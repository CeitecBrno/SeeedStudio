
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d100  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f5c  0801d238  0801d238  0001e238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801e194  0801e194  0001f194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801e26c  0801e26c  00020148  2**0
                  CONTENTS
  5 .ARM          00000008  0801e26c  0801e26c  0001f26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801e274  0801e274  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801e274  0801e274  0001f274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801e278  0801e278  0001f278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  20000000  0801e27c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000022cc  20000148  0801e3c4  00020148  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002414  0801e3c4  00020414  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   000437cf  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a7bc  00000000  00000000  00063941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000035f8  00000000  00000000  0006e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000294f  00000000  00000000  000716f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002968f  00000000  00000000  00074047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043c43  00000000  00000000  0009d6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cec29  00000000  00000000  000e1319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001aff42  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dee4  00000000  00000000  001aff88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001bde6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000148 	.word	0x20000148
 8000154:	00000000 	.word	0x00000000
 8000158:	0801d220 	.word	0x0801d220

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000014c 	.word	0x2000014c
 8000174:	0801d220 	.word	0x0801d220

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008ce:	2afd      	cmp	r2, #253	@ 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	@ 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	@ 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	@ 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f28:	68fb      	ldr	r3, [r7, #12]
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f5e:	4a24      	ldr	r2, [pc, #144]	@ (8000ff0 <MX_ADC_Init+0x98>)
 8000f60:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f62:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000f68:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6a:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f70:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <MX_ADC_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fda:	f002 fb2b 	bl	8003634 <HAL_ADC_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000fe4:	f000 fec6 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000164 	.word	0x20000164
 8000ff0:	40012400 	.word	0x40012400

08000ff4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <HAL_ADC_MspInit+0x54>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d113      	bne.n	800103e <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001016:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800101a:	f7ff ff73 	bl	8000f04 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2002      	movs	r0, #2
 8001020:	f7ff ff58 	bl	8000ed4 <LL_AHB2_GRP1_EnableClock>
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_OUT_CUR_Pin|ADC_IN_VOLT_Pin|ADC_OUT_VOLT_Pin|ADC_TEMP_Pin;
 8001024:	f246 0318 	movw	r3, #24600	@ 0x6018
 8001028:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4619      	mov	r1, r3
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <HAL_ADC_MspInit+0x58>)
 800103a:	f004 f8fb 	bl	8005234 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800103e:	bf00      	nop
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40012400 	.word	0x40012400
 800104c:	48000400 	.word	0x48000400

08001050 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_ADC_MspDeInit+0x2c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d108      	bne.n	8001074 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001062:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001066:	f7ff ff65 	bl	8000f34 <LL_APB2_GRP1_DisableClock>
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, ADC_OUT_CUR_Pin|ADC_IN_VOLT_Pin|ADC_OUT_VOLT_Pin|ADC_TEMP_Pin);
 800106a:	f246 0118 	movw	r1, #24600	@ 0x6018
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <HAL_ADC_MspDeInit+0x30>)
 8001070:	f004 fa40 	bl	80054f4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40012400 	.word	0x40012400
 8001080:	48000400 	.word	0x48000400

08001084 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <SYS_InitMeasurement+0x14>)
 800108a:	4a04      	ldr	r2, [pc, #16]	@ (800109c <SYS_InitMeasurement+0x18>)
 800108c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000164 	.word	0x20000164
 800109c:	40012400 	.word	0x40012400

080010a0 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80010ae:	f000 f869 	bl	8001184 <SYS_GetBatteryLevel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80010b6:	482d      	ldr	r0, [pc, #180]	@ (800116c <SYS_GetTemperatureLevel+0xcc>)
 80010b8:	f000 f926 	bl	8001308 <ADC_ReadChannels>
 80010bc:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80010be:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <SYS_GetTemperatureLevel+0xd0>)
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d026      	beq.n	8001118 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80010ca:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <SYS_GetTemperatureLevel+0xd0>)
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d01c      	beq.n	8001110 <SYS_GetTemperatureLevel+0x70>
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	4a25      	ldr	r2, [pc, #148]	@ (8001178 <SYS_GetTemperatureLevel+0xd8>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b22      	ldr	r3, [pc, #136]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2264      	movs	r2, #100	@ 0x64
 80010f2:	fb03 f202 	mul.w	r2, r3, r2
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <SYS_GetTemperatureLevel+0xd0>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	1acb      	subs	r3, r1, r3
 8001102:	fb92 f3f3 	sdiv	r3, r2, r3
 8001106:	b29b      	uxth	r3, r3
 8001108:	331e      	adds	r3, #30
 800110a:	b29b      	uxth	r3, r3
 800110c:	b21b      	sxth	r3, r3
 800110e:	e001      	b.n	8001114 <SYS_GetTemperatureLevel+0x74>
 8001110:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001114:	803b      	strh	r3, [r7, #0]
 8001116:	e01d      	b.n	8001154 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	fb03 f202 	mul.w	r2, r3, r2
 8001120:	4b16      	ldr	r3, [pc, #88]	@ (800117c <SYS_GetTemperatureLevel+0xdc>)
 8001122:	fba3 1302 	umull	r1, r3, r3, r2
 8001126:	1ad2      	subs	r2, r2, r3
 8001128:	0852      	lsrs	r2, r2, #1
 800112a:	4413      	add	r3, r2
 800112c:	0adb      	lsrs	r3, r3, #11
 800112e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 800113a:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 800113e:	4a10      	ldr	r2, [pc, #64]	@ (8001180 <SYS_GetTemperatureLevel+0xe0>)
 8001140:	fb82 1203 	smull	r1, r2, r2, r3
 8001144:	1292      	asrs	r2, r2, #10
 8001146:	17db      	asrs	r3, r3, #31
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	b29b      	uxth	r3, r3
 800114c:	331e      	adds	r3, #30
 800114e:	b29b      	uxth	r3, r3
 8001150:	b21b      	sxth	r3, r3
 8001152:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001154:	883b      	ldrh	r3, [r7, #0]
 8001156:	b21b      	sxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21b      	sxth	r3, r3
 800115c:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 800115e:	883b      	ldrh	r3, [r7, #0]
 8001160:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	b0001000 	.word	0xb0001000
 8001170:	1fff75c8 	.word	0x1fff75c8
 8001174:	1fff75a8 	.word	0x1fff75a8
 8001178:	09ee009f 	.word	0x09ee009f
 800117c:	00100101 	.word	0x00100101
 8001180:	68db8bad 	.word	0x68db8bad

08001184 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001192:	4813      	ldr	r0, [pc, #76]	@ (80011e0 <SYS_GetBatteryLevel+0x5c>)
 8001194:	f000 f8b8 	bl	8001308 <ADC_ReadChannels>
 8001198:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	e016      	b.n	80011d4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <SYS_GetBatteryLevel+0x60>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00b      	beq.n	80011ca <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <SYS_GetBatteryLevel+0x60>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80011bc:	fb03 f202 	mul.w	r2, r3, r2
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	80fb      	strh	r3, [r7, #6]
 80011c8:	e004      	b.n	80011d4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80011ca:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <SYS_GetBatteryLevel+0x64>)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80011d4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	b4002000 	.word	0xb4002000
 80011e4:	1fff75aa 	.word	0x1fff75aa
 80011e8:	004c08d8 	.word	0x004c08d8

080011ec <SYS_GetADC0>:

/* Private Functions Definition -----------------------------------------------*/
/* USER CODE BEGIN PrFD */
uint16_t SYS_GetADC0(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_0);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 f884 	bl	8001308 <ADC_ReadChannels>
 8001200:	4603      	mov	r3, r0
 8001202:	80fb      	strh	r3, [r7, #6]
	outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	461a      	mov	r2, r3
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <SYS_GetADC0+0x40>)
 8001212:	fba3 1302 	umull	r1, r3, r3, r2
 8001216:	1ad2      	subs	r2, r2, r3
 8001218:	0852      	lsrs	r2, r2, #1
 800121a:	4413      	add	r3, r2
 800121c:	0adb      	lsrs	r3, r3, #11
 800121e:	603b      	str	r3, [r7, #0]
	return outvoltage;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b29b      	uxth	r3, r3
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	00100101 	.word	0x00100101

08001230 <SYS_GetADC1>:

uint16_t SYS_GetADC1(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_1);
 800123e:	480c      	ldr	r0, [pc, #48]	@ (8001270 <SYS_GetADC1+0x40>)
 8001240:	f000 f862 	bl	8001308 <ADC_ReadChannels>
 8001244:	4603      	mov	r3, r0
 8001246:	80fb      	strh	r3, [r7, #6]
	outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	461a      	mov	r2, r3
 8001254:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <SYS_GetADC1+0x44>)
 8001256:	fba3 1302 	umull	r1, r3, r3, r2
 800125a:	1ad2      	subs	r2, r2, r3
 800125c:	0852      	lsrs	r2, r2, #1
 800125e:	4413      	add	r3, r2
 8001260:	0adb      	lsrs	r3, r3, #11
 8001262:	603b      	str	r3, [r7, #0]
	return outvoltage;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b29b      	uxth	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	04000002 	.word	0x04000002
 8001274:	00100101 	.word	0x00100101

08001278 <SYS_GetADC2>:

uint16_t SYS_GetADC2(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_2);
 8001286:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <SYS_GetADC2+0x40>)
 8001288:	f000 f83e 	bl	8001308 <ADC_ReadChannels>
 800128c:	4603      	mov	r3, r0
 800128e:	80fb      	strh	r3, [r7, #6]
	outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	461a      	mov	r2, r3
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <SYS_GetADC2+0x44>)
 800129e:	fba3 1302 	umull	r1, r3, r3, r2
 80012a2:	1ad2      	subs	r2, r2, r3
 80012a4:	0852      	lsrs	r2, r2, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	0adb      	lsrs	r3, r3, #11
 80012aa:	603b      	str	r3, [r7, #0]
	return outvoltage;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b29b      	uxth	r3, r3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	08000004 	.word	0x08000004
 80012bc:	00100101 	.word	0x00100101

080012c0 <SYS_GetADC3>:

uint16_t SYS_GetADC3(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_3);
 80012ce:	480c      	ldr	r0, [pc, #48]	@ (8001300 <SYS_GetADC3+0x40>)
 80012d0:	f000 f81a 	bl	8001308 <ADC_ReadChannels>
 80012d4:	4603      	mov	r3, r0
 80012d6:	80fb      	strh	r3, [r7, #6]
	outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <SYS_GetADC3+0x44>)
 80012e6:	fba3 1302 	umull	r1, r3, r3, r2
 80012ea:	1ad2      	subs	r2, r2, r3
 80012ec:	0852      	lsrs	r2, r2, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	0adb      	lsrs	r3, r3, #11
 80012f2:	603b      	str	r3, [r7, #0]
	return outvoltage;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b29b      	uxth	r3, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0c000008 	.word	0x0c000008
 8001304:	00100101 	.word	0x00100101

08001308 <ADC_ReadChannels>:
/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001320:	f7ff fe1a 	bl	8000f58 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001324:	481a      	ldr	r0, [pc, #104]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001326:	f002 ffa4 	bl	8004272 <HAL_ADCEx_Calibration_Start>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001330:	f000 fd20 	bl	8001d74 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	4619      	mov	r1, r3
 8001346:	4812      	ldr	r0, [pc, #72]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001348:	f002 fcb0 	bl	8003cac <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001352:	f000 fd0f 	bl	8001d74 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001356:	480e      	ldr	r0, [pc, #56]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001358:	f002 fb8c 	bl	8003a74 <HAL_ADC_Start>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001362:	f000 fd07 	bl	8001d74 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001366:	f04f 31ff 	mov.w	r1, #4294967295
 800136a:	4809      	ldr	r0, [pc, #36]	@ (8001390 <ADC_ReadChannels+0x88>)
 800136c:	f002 fbfa 	bl	8003b64 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001370:	4807      	ldr	r0, [pc, #28]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001372:	f002 fbc5 	bl	8003b00 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001376:	4806      	ldr	r0, [pc, #24]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001378:	f002 fc8b 	bl	8003c92 <HAL_ADC_GetValue>
 800137c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800137e:	4804      	ldr	r0, [pc, #16]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001380:	f002 faec 	bl	800395c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001384:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000164 	.word	0x20000164

08001394 <LL_AHB1_GRP1_EnableClock>:
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800139c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80013a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b8:	68fb      	ldr	r3, [r7, #12]
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013c8:	2004      	movs	r0, #4
 80013ca:	f7ff ffe3 	bl	8001394 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff ffe0 	bl	8001394 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2102      	movs	r1, #2
 80013d8:	200b      	movs	r0, #11
 80013da:	f003 f8f0 	bl	80045be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013de:	200b      	movs	r0, #11
 80013e0:	f003 f907 	bl	80045f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	200c      	movs	r0, #12
 80013ea:	f003 f8e8 	bl	80045be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013ee:	200c      	movs	r0, #12
 80013f0:	f003 f8ff 	bl	80045f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	200d      	movs	r0, #13
 80013fa:	f003 f8e0 	bl	80045be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013fe:	200d      	movs	r0, #13
 8001400:	f003 f8f7 	bl	80045f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	200e      	movs	r0, #14
 800140a:	f003 f8d8 	bl	80045be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800140e:	200e      	movs	r0, #14
 8001410:	f003 f8ef 	bl	80045f2 <HAL_NVIC_EnableIRQ>

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001424:	23ff      	movs	r3, #255	@ 0xff
 8001426:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800142e:	d311      	bcc.n	8001454 <FLASH_IF_Write+0x3c>
 8001430:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <FLASH_IF_Write+0x48>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	029a      	lsls	r2, r3, #10
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <FLASH_IF_Write+0x4c>)
 8001438:	4013      	ands	r3, r2
 800143a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800143e:	3b01      	subs	r3, #1
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4293      	cmp	r3, r2
 8001444:	d306      	bcc.n	8001454 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f85a 	bl	8001504 <FLASH_IF_INT_Write>
 8001450:	4603      	mov	r3, r0
 8001452:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001454:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	1fff75e0 	.word	0x1fff75e0
 8001464:	03fffc00 	.word	0x03fffc00

08001468 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001474:	23ff      	movs	r3, #255	@ 0xff
 8001476:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800147e:	d311      	bcc.n	80014a4 <FLASH_IF_Read+0x3c>
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <FLASH_IF_Read+0x48>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	029a      	lsls	r2, r3, #10
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <FLASH_IF_Read+0x4c>)
 8001488:	4013      	ands	r3, r2
 800148a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800148e:	3b01      	subs	r3, #1
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	4293      	cmp	r3, r2
 8001494:	d306      	bcc.n	80014a4 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f93a 	bl	8001714 <FLASH_IF_INT_Read>
 80014a0:	4603      	mov	r3, r0
 80014a2:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80014a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	1fff75e0 	.word	0x1fff75e0
 80014b4:	03fffc00 	.word	0x03fffc00

080014b8 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014c2:	23ff      	movs	r3, #255	@ 0xff
 80014c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80014cc:	d310      	bcc.n	80014f0 <FLASH_IF_Erase+0x38>
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <FLASH_IF_Erase+0x44>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	029a      	lsls	r2, r3, #10
 80014d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <FLASH_IF_Erase+0x48>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80014dc:	3b01      	subs	r3, #1
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d305      	bcc.n	80014f0 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80014e4:	6839      	ldr	r1, [r7, #0]
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f932 	bl	8001750 <FLASH_IF_INT_Erase>
 80014ec:	4603      	mov	r3, r0
 80014ee:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80014f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	1fff75e0 	.word	0x1fff75e0
 8001500:	03fffc00 	.word	0x03fffc00

08001504 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b090      	sub	sp, #64	@ 0x40
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00c      	beq.n	8001542 <FLASH_IF_INT_Write+0x3e>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <FLASH_IF_INT_Write+0x3e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	2b00      	cmp	r3, #0
 8001536:	d104      	bne.n	8001542 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001542:	f06f 0305 	mvn.w	r3, #5
 8001546:	e0da      	b.n	80016fe <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001548:	f000 f992 	bl	8001870 <FLASH_IF_INT_Clear_Error>
 800154c:	4603      	mov	r3, r0
 800154e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 8001552:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 80cf 	bne.w	80016fa <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800155c:	f003 fc94 	bl	8004e88 <HAL_FLASH_Unlock>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 80c6 	bne.w	80016f4 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800156a:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 800156e:	4b66      	ldr	r3, [pc, #408]	@ (8001708 <FLASH_IF_INT_Write+0x204>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0299      	lsls	r1, r3, #10
 8001574:	4b65      	ldr	r3, [pc, #404]	@ (800170c <FLASH_IF_INT_Write+0x208>)
 8001576:	400b      	ands	r3, r1
 8001578:	fbb2 f1f3 	udiv	r1, r2, r3
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	0adb      	lsrs	r3, r3, #11
 8001584:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001586:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001590:	3b01      	subs	r3, #1
 8001592:	4a5d      	ldr	r2, [pc, #372]	@ (8001708 <FLASH_IF_INT_Write+0x204>)
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	0291      	lsls	r1, r2, #10
 8001598:	4a5c      	ldr	r2, [pc, #368]	@ (800170c <FLASH_IF_INT_Write+0x208>)
 800159a:	400a      	ands	r2, r1
 800159c:	fbb3 f1f2 	udiv	r1, r3, r2
 80015a0:	fb01 f202 	mul.w	r2, r1, r2
 80015a4:	1a9b      	subs	r3, r3, r2
 80015a6:	0ada      	lsrs	r2, r3, #11
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d905      	bls.n	80015c2 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80015b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015bc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015c0:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015c6:	e089      	b.n	80016dc <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80015c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ca:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80015ce:	02db      	lsls	r3, r3, #11
 80015d0:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80015d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 f925 	bl	8001824 <FLASH_IF_INT_IsEmpty>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d031      	beq.n	8001644 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80015e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001710 <FLASH_IF_INT_Write+0x20c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80015e8:	23fa      	movs	r3, #250	@ 0xfa
 80015ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 80015ee:	e07e      	b.n	80016ee <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80015f0:	4b47      	ldr	r3, [pc, #284]	@ (8001710 <FLASH_IF_INT_Write+0x20c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6939      	ldr	r1, [r7, #16]
 80015f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f88a 	bl	8001714 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001600:	4b43      	ldr	r3, [pc, #268]	@ (8001710 <FLASH_IF_INT_Write+0x20c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800160a:	4413      	add	r3, r2
 800160c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800160e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001610:	b292      	uxth	r2, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f01a fafc 	bl	801bc10 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f896 	bl	8001750 <FLASH_IF_INT_Erase>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800162a:	23fe      	movs	r3, #254	@ 0xfe
 800162c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001630:	e05d      	b.n	80016ee <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001636:	4b36      	ldr	r3, [pc, #216]	@ (8001710 <FLASH_IF_INT_Write+0x20c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 800163c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	e005      	b.n	8001650 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 8001648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800164a:	623b      	str	r3, [r7, #32]
          current_length = length;
 800164c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800164e:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001654:	e026      	b.n	80016a4 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001656:	6a3a      	ldr	r2, [r7, #32]
 8001658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800165a:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001662:	2001      	movs	r0, #1
 8001664:	f003 fbcc 	bl	8004e00 <HAL_FLASH_Program>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d113      	bne.n	8001696 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001674:	6a3a      	ldr	r2, [r7, #32]
 8001676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001678:	4413      	add	r3, r2
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	4299      	cmp	r1, r3
 8001680:	bf08      	it	eq
 8001682:	4290      	cmpeq	r0, r2
 8001684:	d003      	beq.n	800168e <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001686:	23fc      	movs	r3, #252	@ 0xfc
 8001688:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 800168c:	e00e      	b.n	80016ac <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	3308      	adds	r3, #8
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
 8001694:	e003      	b.n	800169e <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001696:	23fc      	movs	r3, #252	@ 0xfc
 8001698:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 800169c:	e006      	b.n	80016ac <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800169e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a0:	3308      	adds	r3, #8
 80016a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d3d4      	bcc.n	8001656 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80016ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d11b      	bne.n	80016ec <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80016b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016b8:	4413      	add	r3, r2
 80016ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 80016bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016c0:	4413      	add	r3, r2
 80016c2:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016ce:	bf28      	it	cs
 80016d0:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80016d4:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80016d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d8:	3301      	adds	r3, #1
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	4413      	add	r3, r2
 80016e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f4ff af6f 	bcc.w	80015c8 <FLASH_IF_INT_Write+0xc4>
 80016ea:	e000      	b.n	80016ee <FLASH_IF_INT_Write+0x1ea>
          break;
 80016ec:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80016ee:	f003 fbed 	bl	8004ecc <HAL_FLASH_Lock>
 80016f2:	e002      	b.n	80016fa <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80016f4:	23fb      	movs	r3, #251	@ 0xfb
 80016f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 80016fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3740      	adds	r7, #64	@ 0x40
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	1fff75e0 	.word	0x1fff75e0
 800170c:	03fffc00 	.word	0x03fffc00
 8001710:	200001c8 	.word	0x200001c8

08001714 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <FLASH_IF_INT_Read+0x1c>
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001730:	f06f 0305 	mvn.w	r3, #5
 8001734:	e008      	b.n	8001748 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	b29b      	uxth	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f01a fa66 	bl	801bc10 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001744:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001770:	f06f 0305 	mvn.w	r3, #5
 8001774:	e04e      	b.n	8001814 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001776:	f000 f87b 	bl	8001870 <FLASH_IF_INT_Clear_Error>
 800177a:	4603      	mov	r3, r0
 800177c:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 800177e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d144      	bne.n	8001810 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001786:	f003 fb7f 	bl	8004e88 <HAL_FLASH_Unlock>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d13d      	bne.n	800180c <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001790:	2302      	movs	r3, #2
 8001792:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <FLASH_IF_INT_Erase+0xcc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	0299      	lsls	r1, r3, #10
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <FLASH_IF_INT_Erase+0xd0>)
 80017a2:	400b      	ands	r3, r1
 80017a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	0adb      	lsrs	r3, r3, #11
 80017b0:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80017bc:	3b01      	subs	r3, #1
 80017be:	4a17      	ldr	r2, [pc, #92]	@ (800181c <FLASH_IF_INT_Erase+0xcc>)
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	0291      	lsls	r1, r2, #10
 80017c4:	4a16      	ldr	r2, [pc, #88]	@ (8001820 <FLASH_IF_INT_Erase+0xd0>)
 80017c6:	400a      	ands	r2, r1
 80017c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80017cc:	fb01 f202 	mul.w	r2, r1, r2
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	0ada      	lsrs	r2, r3, #11
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	3301      	adds	r3, #1
 80017da:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80017dc:	f107 0214 	add.w	r2, r7, #20
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fc50 	bl	800508c <HAL_FLASHEx_Erase>
 80017ec:	4603      	mov	r3, r0
 80017ee:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 80017f0:	7fbb      	ldrb	r3, [r7, #30]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80017f6:	7fbb      	ldrb	r3, [r7, #30]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d101      	bne.n	8001800 <FLASH_IF_INT_Erase+0xb0>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e001      	b.n	8001804 <FLASH_IF_INT_Erase+0xb4>
 8001800:	f06f 0301 	mvn.w	r3, #1
 8001804:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001806:	f003 fb61 	bl	8004ecc <HAL_FLASH_Lock>
 800180a:	e001      	b.n	8001810 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 800180c:	23fb      	movs	r3, #251	@ 0xfb
 800180e:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001810:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	1fff75e0 	.word	0x1fff75e0
 8001820:	03fffc00 	.word	0x03fffc00

08001824 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	e011      	b.n	800185c <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001842:	bf08      	it	eq
 8001844:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001848:	d002      	beq.n	8001850 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 800184a:	2301      	movs	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
      break;
 800184e:	e009      	b.n	8001864 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3308      	adds	r3, #8
 8001854:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3308      	adds	r3, #8
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d3e9      	bcc.n	8001838 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001864:	68fb      	ldr	r3, [r7, #12]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001876:	23fb      	movs	r3, #251	@ 0xfb
 8001878:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800187a:	f003 fb05 	bl	8004e88 <HAL_FLASH_Unlock>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d110      	bne.n	80018a6 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <FLASH_IF_INT_Clear_Error+0x44>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <FLASH_IF_INT_Clear_Error+0x44>)
 800188a:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <FLASH_IF_INT_Clear_Error+0x44>)
 8001892:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001896:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001898:	f003 fb18 	bl	8004ecc <HAL_FLASH_Lock>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	58004000 	.word	0x58004000

080018b8 <LL_AHB2_GRP1_EnableClock>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018dc:	68fb      	ldr	r3, [r7, #12]
}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	2001      	movs	r0, #1
 80018fe:	f7ff ffdb 	bl	80018b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2002      	movs	r0, #2
 8001904:	f7ff ffd8 	bl	80018b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001908:	2004      	movs	r0, #4
 800190a:	f7ff ffd5 	bl	80018b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190e:	2080      	movs	r0, #128	@ 0x80
 8001910:	f7ff ffd2 	bl	80018b8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|VCC_OUT_EN_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	f248 0131 	movw	r1, #32817	@ 0x8031
 800191a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191e:	f003 feb7 	bl	8005690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001928:	483c      	ldr	r0, [pc, #240]	@ (8001a1c <MX_GPIO_Init+0x134>)
 800192a:	f003 feb1 	bl	8005690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_RE_GPIO_Port, RS485_RE_Pin, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	2102      	movs	r1, #2
 8001932:	483b      	ldr	r0, [pc, #236]	@ (8001a20 <MX_GPIO_Init+0x138>)
 8001934:	f003 feac 	bl	8005690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2101      	movs	r1, #1
 800193c:	4838      	ldr	r0, [pc, #224]	@ (8001a20 <MX_GPIO_Init+0x138>)
 800193e:	f003 fea7 	bl	8005690 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA12 PA11 PA6 PA1
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_6|GPIO_PIN_1
 8001942:	f641 13c2 	movw	r3, #6594	@ 0x19c2
 8001946:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001948:	2303      	movs	r3, #3
 800194a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001958:	f003 fc6c 	bl	8005234 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin RF_CTRL1_Pin RF_CTRL2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800195c:	f248 0330 	movw	r3, #32816	@ 0x8030
 8001960:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	4619      	mov	r1, r3
 8001972:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001976:	f003 fc5d 	bl	8005234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800197a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800197e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4822      	ldr	r0, [pc, #136]	@ (8001a1c <MX_GPIO_Init+0x134>)
 8001992:	f003 fc4f 	bl	8005234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB5 PB8 PB2
                           PB12 PB1 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_2
 8001996:	f641 7326 	movw	r3, #7974	@ 0x1f26
 800199a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800199c:	2303      	movs	r3, #3
 800199e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	4619      	mov	r1, r3
 80019a8:	481c      	ldr	r0, [pc, #112]	@ (8001a1c <MX_GPIO_Init+0x134>)
 80019aa:	f003 fc43 	bl	8005234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC2 PC3 PC5
                           PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80019ae:	f242 037c 	movw	r3, #8316	@ 0x207c
 80019b2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b4:	2303      	movs	r3, #3
 80019b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	4619      	mov	r1, r3
 80019c0:	4817      	ldr	r0, [pc, #92]	@ (8001a20 <MX_GPIO_Init+0x138>)
 80019c2:	f003 fc37 	bl	8005234 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCC_OUT_EN_Pin */
  GPIO_InitStruct.Pin = VCC_OUT_EN_Pin;
 80019c6:	2301      	movs	r3, #1
 80019c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VCC_OUT_EN_GPIO_Port, &GPIO_InitStruct);
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019de:	f003 fc29 	bl	8005234 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_RE_Pin RS485_DE_Pin */
  GPIO_InitStruct.Pin = RS485_RE_Pin|RS485_DE_Pin;
 80019e2:	2303      	movs	r3, #3
 80019e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	480a      	ldr	r0, [pc, #40]	@ (8001a20 <MX_GPIO_Init+0x138>)
 80019f8:	f003 fc1c 	bl	8005234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019fc:	2308      	movs	r3, #8
 80019fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a00:	2303      	movs	r3, #3
 8001a02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	@ (8001a24 <MX_GPIO_Init+0x13c>)
 8001a0e:	f003 fc11 	bl	8005234 <HAL_GPIO_Init>

}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	48000800 	.word	0x48000800
 8001a24:	48001c00 	.word	0x48001c00

08001a28 <LL_AHB2_GRP1_EnableClock>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <LL_APB1_GRP1_EnableClock>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b00 <MX_I2C1_Init+0x78>)
 8001a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001a94:	4a1b      	ldr	r2, [pc, #108]	@ (8001b04 <MX_I2C1_Init+0x7c>)
 8001a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 136;
 8001a98:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001a9a:	2288      	movs	r2, #136	@ 0x88
 8001a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa4:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac2:	480e      	ldr	r0, [pc, #56]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001ac4:	f003 fdfb 	bl	80056be <HAL_I2C_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ace:	f000 f951 	bl	8001d74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4809      	ldr	r0, [pc, #36]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001ad6:	f004 fb3d 	bl	8006154 <HAL_I2CEx_ConfigAnalogFilter>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ae0:	f000 f948 	bl	8001d74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4805      	ldr	r0, [pc, #20]	@ (8001afc <MX_I2C1_Init+0x74>)
 8001ae8:	f004 fb7e 	bl	80061e8 <HAL_I2CEx_ConfigDigitalFilter>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001af2:	f000 f93f 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200001cc 	.word	0x200001cc
 8001b00:	40005400 	.word	0x40005400
 8001b04:	10805d88 	.word	0x10805d88

08001b08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b096      	sub	sp, #88	@ 0x58
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2238      	movs	r2, #56	@ 0x38
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f01b facd 	bl	801d0c8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a4a      	ldr	r2, [pc, #296]	@ (8001c5c <HAL_I2C_MspInit+0x154>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	f040 808d 	bne.w	8001c54 <HAL_I2C_MspInit+0x14c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b3a:	2340      	movs	r3, #64	@ 0x40
 8001b3c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b3e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001b42:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f005 fe09 	bl	8007760 <HAL_RCCEx_PeriphCLKConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001b54:	f000 f90e 	bl	8001d74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f7ff ff65 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff ff62 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = HDC_SDA_Pin;
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b68:	2312      	movs	r3, #18
 8001b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b74:	2304      	movs	r3, #4
 8001b76:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(HDC_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b78:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4838      	ldr	r0, [pc, #224]	@ (8001c60 <HAL_I2C_MspInit+0x158>)
 8001b80:	f003 fb58 	bl	8005234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HDC_SCL_Pin;
 8001b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b88:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8a:	2312      	movs	r3, #18
 8001b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b96:	2304      	movs	r3, #4
 8001b98:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(HDC_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba4:	f003 fb46 	bl	8005234 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001bac:	f7ff ff54 	bl	8001a58 <LL_APB1_GRP1_EnableClock>

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 8001bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c64 <HAL_I2C_MspInit+0x15c>)
 8001bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c68 <HAL_I2C_MspInit+0x160>)
 8001bb4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c64 <HAL_I2C_MspInit+0x15c>)
 8001bb8:	220c      	movs	r2, #12
 8001bba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bbc:	4b29      	ldr	r3, [pc, #164]	@ (8001c64 <HAL_I2C_MspInit+0x15c>)
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc2:	4b28      	ldr	r3, [pc, #160]	@ (8001c64 <HAL_I2C_MspInit+0x15c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc8:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <HAL_I2C_MspInit+0x15c>)
 8001bca:	2280      	movs	r2, #128	@ 0x80
 8001bcc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bce:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <HAL_I2C_MspInit+0x15c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd4:	4b23      	ldr	r3, [pc, #140]	@ (8001c64 <HAL_I2C_MspInit+0x15c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001bda:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <HAL_I2C_MspInit+0x15c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001be0:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <HAL_I2C_MspInit+0x15c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001be6:	481f      	ldr	r0, [pc, #124]	@ (8001c64 <HAL_I2C_MspInit+0x15c>)
 8001be8:	f002 fd20 	bl	800462c <HAL_DMA_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8001bf2:	f000 f8bf 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <HAL_I2C_MspInit+0x15c>)
 8001bfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bfc:	4a19      	ldr	r2, [pc, #100]	@ (8001c64 <HAL_I2C_MspInit+0x15c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <HAL_I2C_MspInit+0x164>)
 8001c04:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <HAL_I2C_MspInit+0x168>)
 8001c06:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001c08:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <HAL_I2C_MspInit+0x164>)
 8001c0a:	220b      	movs	r2, #11
 8001c0c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c0e:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <HAL_I2C_MspInit+0x164>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c14:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <HAL_I2C_MspInit+0x164>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1a:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <HAL_I2C_MspInit+0x164>)
 8001c1c:	2280      	movs	r2, #128	@ 0x80
 8001c1e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_I2C_MspInit+0x164>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <HAL_I2C_MspInit+0x164>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <HAL_I2C_MspInit+0x164>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <HAL_I2C_MspInit+0x164>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <HAL_I2C_MspInit+0x164>)
 8001c3a:	f002 fcf7 	bl	800462c <HAL_DMA_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 8001c44:	f000 f896 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <HAL_I2C_MspInit+0x164>)
 8001c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c4e:	4a07      	ldr	r2, [pc, #28]	@ (8001c6c <HAL_I2C_MspInit+0x164>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c54:	bf00      	nop
 8001c56:	3758      	adds	r7, #88	@ 0x58
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40005400 	.word	0x40005400
 8001c60:	48000400 	.word	0x48000400
 8001c64:	20000220 	.word	0x20000220
 8001c68:	40020030 	.word	0x40020030
 8001c6c:	20000280 	.word	0x20000280
 8001c70:	40020044 	.word	0x40020044

08001c74 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c84:	f023 0218 	bic.w	r2, r3, #24
 8001c88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca2:	f001 fad9 	bl	8003258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca6:	f000 f80b 	bl	8001cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001caa:	f7ff fe1d 	bl	80018e8 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001cae:	f009 f901 	bl	800aeb4 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001cb2:	f000 ff4b 	bl	8002b4c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001cb6:	f7ff fee7 	bl	8001a88 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001cba:	f009 f903 	bl	800aec4 <MX_LoRaWAN_Process>
 8001cbe:	e7fc      	b.n	8001cba <main+0x1c>

08001cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b09a      	sub	sp, #104	@ 0x68
 8001cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc6:	f107 0320 	add.w	r3, r7, #32
 8001cca:	2248      	movs	r2, #72	@ 0x48
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f01b f9fa 	bl	801d0c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
 8001ce4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ce6:	f004 facb 	bl	8006280 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff ffc2 	bl	8001c74 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <SystemClock_Config+0xb0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d70 <SystemClock_Config+0xb0>)
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <SystemClock_Config+0xb0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001d0c:	2324      	movs	r3, #36	@ 0x24
 8001d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d10:	2381      	movs	r3, #129	@ 0x81
 8001d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d14:	2301      	movs	r3, #1
 8001d16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001d1c:	23b0      	movs	r3, #176	@ 0xb0
 8001d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d24:	f107 0320 	add.w	r3, r7, #32
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f004 fdf5 	bl	8006918 <HAL_RCC_OscConfig>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001d34:	f000 f81e 	bl	8001d74 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001d38:	234f      	movs	r3, #79	@ 0x4f
 8001d3a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	2102      	movs	r1, #2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f005 f960 	bl	800701c <HAL_RCC_ClockConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001d62:	f000 f807 	bl	8001d74 <Error_Handler>
  }
}
 8001d66:	bf00      	nop
 8001d68:	3768      	adds	r7, #104	@ 0x68
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	58000400 	.word	0x58000400

08001d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <Error_Handler+0x8>

08001d80 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <LL_APB1_GRP1_EnableClock>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dbc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08c      	sub	sp, #48	@ 0x30
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	222c      	movs	r2, #44	@ 0x2c
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f01b f973 	bl	801d0c8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001de2:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <MX_RTC_Init+0x9c>)
 8001de4:	4a22      	ldr	r2, [pc, #136]	@ (8001e70 <MX_RTC_Init+0xa0>)
 8001de6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001de8:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <MX_RTC_Init+0x9c>)
 8001dea:	221f      	movs	r2, #31
 8001dec:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001dee:	4b1f      	ldr	r3, [pc, #124]	@ (8001e6c <MX_RTC_Init+0x9c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <MX_RTC_Init+0x9c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <MX_RTC_Init+0x9c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e00:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <MX_RTC_Init+0x9c>)
 8001e02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e06:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001e08:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <MX_RTC_Init+0x9c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001e0e:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <MX_RTC_Init+0x9c>)
 8001e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e16:	4815      	ldr	r0, [pc, #84]	@ (8001e6c <MX_RTC_Init+0x9c>)
 8001e18:	f005 fdbc 	bl	8007994 <HAL_RTC_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001e22:	f7ff ffa7 	bl	8001d74 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001e26:	4811      	ldr	r0, [pc, #68]	@ (8001e6c <MX_RTC_Init+0x9c>)
 8001e28:	f006 f8b2 	bl	8007f90 <HAL_RTCEx_SetSSRU_IT>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001e32:	f7ff ff9f 	bl	8001d74 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001e42:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e46:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001e48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <MX_RTC_Init+0x9c>)
 8001e56:	f005 fe1f 	bl	8007a98 <HAL_RTC_SetAlarm_IT>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001e60:	f7ff ff88 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	3730      	adds	r7, #48	@ 0x30
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	200002e0 	.word	0x200002e0
 8001e70:	40002800 	.word	0x40002800

08001e74 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b090      	sub	sp, #64	@ 0x40
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	2238      	movs	r2, #56	@ 0x38
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f01b f91f 	bl	801d0c8 <memset>
  if(rtcHandle->Instance==RTC)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a16      	ldr	r2, [pc, #88]	@ (8001ee8 <HAL_RTC_MspInit+0x74>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d125      	bne.n	8001ee0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e98:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f005 fc5b 	bl	8007760 <HAL_RCCEx_PeriphCLKConfig>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001eb0:	f7ff ff60 	bl	8001d74 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001eb4:	f7ff ff64 	bl	8001d80 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001eb8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ebc:	f7ff ff70 	bl	8001da0 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f002 fb7a 	bl	80045be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001eca:	2002      	movs	r0, #2
 8001ecc:	f002 fb91 	bl	80045f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	202a      	movs	r0, #42	@ 0x2a
 8001ed6:	f002 fb72 	bl	80045be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001eda:	202a      	movs	r0, #42	@ 0x2a
 8001edc:	f002 fb89 	bl	80045f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3740      	adds	r7, #64	@ 0x40
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40002800 	.word	0x40002800

08001eec <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	58000400 	.word	0x58000400

08001f04 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001f20:	f001 f9ba 	bl	8003298 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001f24:	f7ff ffe2 	bl	8001eec <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f004 fa3b 	bl	80063a4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001f36:	f001 f9bd 	bl	80032b4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001f3a:	f001 f83d 	bl	8002fb8 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001f46:	f001 f9a7 	bl	8003298 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f004 f9a5 	bl	800629c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001f5a:	f001 f9ab 	bl	80032b4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f72:	bf00      	nop
 8001f74:	e7fd      	b.n	8001f72 <NMI_Handler+0x4>

08001f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7a:	bf00      	nop
 8001f7c:	e7fd      	b.n	8001f7a <HardFault_Handler+0x4>

08001f7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f82:	bf00      	nop
 8001f84:	e7fd      	b.n	8001f82 <MemManage_Handler+0x4>

08001f86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8a:	bf00      	nop
 8001f8c:	e7fd      	b.n	8001f8a <BusFault_Handler+0x4>

08001f8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f92:	bf00      	nop
 8001f94:	e7fd      	b.n	8001f92 <UsageFault_Handler+0x4>

08001f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
	...

08001fc8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001fce:	f006 f81b 	bl	8008008 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200002e0 	.word	0x200002e0

08001fdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <DMA1_Channel1_IRQHandler+0x10>)
 8001fe2:	f002 fd9d 	bl	8004b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000454 	.word	0x20000454

08001ff0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <DMA1_Channel2_IRQHandler+0x10>)
 8001ff6:	f002 fd93 	bl	8004b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200004b4 	.word	0x200004b4

08002004 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <DMA1_Channel3_IRQHandler+0x10>)
 800200a:	f002 fd89 	bl	8004b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000220 	.word	0x20000220

08002018 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <DMA1_Channel4_IRQHandler+0x10>)
 800201e:	f002 fd7f 	bl	8004b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000280 	.word	0x20000280

0800202c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002030:	4802      	ldr	r0, [pc, #8]	@ (800203c <USART1_IRQHandler+0x10>)
 8002032:	f006 fe43 	bl	8008cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000032c 	.word	0x2000032c

08002040 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <USART2_IRQHandler+0x10>)
 8002046:	f006 fe39 	bl	8008cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200003c0 	.word	0x200003c0

08002054 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <RTC_Alarm_IRQHandler+0x10>)
 800205a:	f005 fe85 	bl	8007d68 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200002e0 	.word	0x200002e0

08002068 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <SUBGHZ_Radio_IRQHandler+0x10>)
 800206e:	f006 fb39 	bl	80086e4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000318 	.word	0x20000318

0800207c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002088:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800208a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4313      	orrs	r3, r2
 8002092:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002098:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020a0:	68fb      	ldr	r3, [r7, #12]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <MX_SUBGHZ_Init+0x20>)
 80020b2:	2208      	movs	r2, #8
 80020b4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80020b6:	4805      	ldr	r0, [pc, #20]	@ (80020cc <MX_SUBGHZ_Init+0x20>)
 80020b8:	f006 f892 	bl	80081e0 <HAL_SUBGHZ_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80020c2:	f7ff fe57 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000318 	.word	0x20000318

080020d0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80020d8:	2001      	movs	r0, #1
 80020da:	f7ff ffcf 	bl	800207c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	2032      	movs	r0, #50	@ 0x32
 80020e4:	f002 fa6b 	bl	80045be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80020e8:	2032      	movs	r0, #50	@ 0x32
 80020ea:	f002 fa82 	bl	80045f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80020fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002108:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002120:	4b02      	ldr	r3, [pc, #8]	@ (800212c <LL_FLASH_GetUDN+0x10>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	1fff7580 	.word	0x1fff7580

08002130 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002134:	4b03      	ldr	r3, [pc, #12]	@ (8002144 <LL_FLASH_GetDeviceID+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b2db      	uxtb	r3, r3
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	1fff7584 	.word	0x1fff7584

08002148 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800214c:	4b03      	ldr	r3, [pc, #12]	@ (800215c <LL_FLASH_GetSTCompanyID+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0a1b      	lsrs	r3, r3, #8
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	1fff7584 	.word	0x1fff7584

08002160 <sht40>:
#define SHT40_CMD_HEATER_01S_110MW	0x24
#define SHT40_CMD_HEATER_1S_20MW	0x1E
#define SHT40_CMD_HEATER_01S_20MW	0x15

uint16_t sht40(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08e      	sub	sp, #56	@ 0x38
 8002164:	af02      	add	r7, sp, #8
	uint8_t tx_data[10]={0};
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	811a      	strh	r2, [r3, #8]
	uint8_t rx_data[10]={0};
 8002172:	463b      	mov	r3, r7
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	811a      	strh	r2, [r3, #8]
	uint32_t t_ticks=0, checksum_t=0, rh_ticks=0, checksum_rh=0, t_degC=0, rh_pRH=0;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
	tx_data[0] = SHT40_CMD_HPR;
 8002194:	23fd      	movs	r3, #253	@ 0xfd
 8002196:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, SHT40_ADR, tx_data, 1, 10);
 8002198:	f107 020c 	add.w	r2, r7, #12
 800219c:	230a      	movs	r3, #10
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2301      	movs	r3, #1
 80021a2:	2188      	movs	r1, #136	@ 0x88
 80021a4:	481e      	ldr	r0, [pc, #120]	@ (8002220 <sht40+0xc0>)
 80021a6:	f003 fb25 	bl	80057f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80021aa:	200a      	movs	r0, #10
 80021ac:	f000 f9b4 	bl	8002518 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, (SHT40_ADR | 0x01), rx_data, 6, 10);
 80021b0:	463a      	mov	r2, r7
 80021b2:	230a      	movs	r3, #10
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2306      	movs	r3, #6
 80021b8:	2189      	movs	r1, #137	@ 0x89
 80021ba:	4819      	ldr	r0, [pc, #100]	@ (8002220 <sht40+0xc0>)
 80021bc:	f003 fc32 	bl	8005a24 <HAL_I2C_Master_Receive>
	t_ticks = rx_data[0] * 256 + rx_data[1];
 80021c0:	783b      	ldrb	r3, [r7, #0]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	787a      	ldrb	r2, [r7, #1]
 80021c6:	4413      	add	r3, r2
 80021c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	checksum_t = rx_data[2];
 80021ca:	78bb      	ldrb	r3, [r7, #2]
 80021cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	rh_ticks = rx_data[3] * 256 + rx_data[4];
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	793a      	ldrb	r2, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
	checksum_rh = rx_data[5];
 80021d8:	797b      	ldrb	r3, [r7, #5]
 80021da:	623b      	str	r3, [r7, #32]
	t_degC = -45 + 175 * t_ticks/65535;
 80021dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021de:	22af      	movs	r2, #175	@ 0xaf
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
 80021e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002224 <sht40+0xc4>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0bdb      	lsrs	r3, r3, #15
 80021ec:	3b2d      	subs	r3, #45	@ 0x2d
 80021ee:	61fb      	str	r3, [r7, #28]
	rh_pRH = -6 + 125 * rh_ticks/65535;
 80021f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f2:	4613      	mov	r3, r2
 80021f4:	015b      	lsls	r3, r3, #5
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	4a09      	ldr	r2, [pc, #36]	@ (8002224 <sht40+0xc4>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0bdb      	lsrs	r3, r3, #15
 8002204:	3b06      	subs	r3, #6
 8002206:	61bb      	str	r3, [r7, #24]
	return (uint16_t)((t_degC << 8) | rh_pRH);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	b29b      	uxth	r3, r3
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b29a      	uxth	r2, r3
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	b29b      	uxth	r3, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	b29b      	uxth	r3, r3
		rh_pRH = 100;
	if (rh_pRH < 0)
		rh_pRH = 0;
	*/

}
 8002218:	4618      	mov	r0, r3
 800221a:	3730      	adds	r7, #48	@ 0x30
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200001cc 	.word	0x200001cc
 8002224:	80008001 	.word	0x80008001

08002228 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800222c:	2000      	movs	r0, #0
 800222e:	f7ff ff62 	bl	80020f6 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002232:	f01a fa13 	bl	801c65c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002236:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <SystemApp_Init+0x50>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 800223c:	f000 f98c 	bl	8002558 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002240:	f01a fc9c 	bl	801cb7c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002244:	480d      	ldr	r0, [pc, #52]	@ (800227c <SystemApp_Init+0x54>)
 8002246:	f01a fd47 	bl	801ccd8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <SystemApp_Init+0x58>)
 800224c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002250:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002252:	2002      	movs	r0, #2
 8002254:	f01a fd4e 	bl	801ccf4 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002258:	f7fe ff14 	bl	8001084 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 800225c:	f000 f9bc 	bl	80025d8 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002260:	f019 fc30 	bl	801bac4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002264:	2101      	movs	r1, #1
 8002266:	2001      	movs	r0, #1
 8002268:	f019 fc6c 	bl	801bb44 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800226c:	2101      	movs	r1, #1
 800226e:	2001      	movs	r0, #1
 8002270:	f019 fc38 	bl	801bae4 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000324 	.word	0x20000324
 800227c:	08002451 	.word	0x08002451
 8002280:	58004000 	.word	0x58004000

08002284 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002288:	f019 fc8c 	bl	801bba4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}

08002290 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800229a:	f7fe ff73 	bl	8001184 <SYS_GetBatteryLevel>
 800229e:	4603      	mov	r3, r0
 80022a0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80022a2:	88bb      	ldrh	r3, [r7, #4]
 80022a4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d902      	bls.n	80022b2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80022ac:	23fe      	movs	r3, #254	@ 0xfe
 80022ae:	71fb      	strb	r3, [r7, #7]
 80022b0:	e014      	b.n	80022dc <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80022b2:	88bb      	ldrh	r3, [r7, #4]
 80022b4:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80022b8:	d202      	bcs.n	80022c0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	71fb      	strb	r3, [r7, #7]
 80022be:	e00d      	b.n	80022dc <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80022c0:	88bb      	ldrh	r3, [r7, #4]
 80022c2:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80022c6:	461a      	mov	r2, r3
 80022c8:	4613      	mov	r3, r2
 80022ca:	01db      	lsls	r3, r3, #7
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <GetBatteryLevel+0x58>)
 80022d4:	fba3 2302 	umull	r2, r3, r3, r2
 80022d8:	09db      	lsrs	r3, r3, #7
 80022da:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80022dc:	79fb      	ldrb	r3, [r7, #7]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	1b4e81b5 	.word	0x1b4e81b5

080022ec <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f93b 	bl	8002574 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe fc0b 	bl	8000b1c <__aeabi_f2iz>
 8002306:	4603      	mov	r3, r0
 8002308:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800230a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002316:	b590      	push	{r4, r7, lr}
 8002318:	b087      	sub	sp, #28
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002322:	f7ff fefb 	bl	800211c <LL_FLASH_GetUDN>
 8002326:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232e:	d138      	bne.n	80023a2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002330:	f000 ffce 	bl	80032d0 <HAL_GetUIDw0>
 8002334:	4604      	mov	r4, r0
 8002336:	f000 ffdf 	bl	80032f8 <HAL_GetUIDw2>
 800233a:	4603      	mov	r3, r0
 800233c:	4423      	add	r3, r4
 800233e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002340:	f000 ffd0 	bl	80032e4 <HAL_GetUIDw1>
 8002344:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	0e1a      	lsrs	r2, r3, #24
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3307      	adds	r3, #7
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	0c1a      	lsrs	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3306      	adds	r3, #6
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	0a1a      	lsrs	r2, r3, #8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3305      	adds	r3, #5
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3304      	adds	r3, #4
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	0e1a      	lsrs	r2, r3, #24
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3303      	adds	r3, #3
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	0c1a      	lsrs	r2, r3, #16
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3302      	adds	r3, #2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	0a1a      	lsrs	r2, r3, #8
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3301      	adds	r3, #1
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80023a0:	e031      	b.n	8002406 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3307      	adds	r3, #7
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	0a1a      	lsrs	r2, r3, #8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3306      	adds	r3, #6
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	0c1a      	lsrs	r2, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3305      	adds	r3, #5
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	0e1a      	lsrs	r2, r3, #24
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80023d0:	f7ff feae 	bl	8002130 <LL_FLASH_GetDeviceID>
 80023d4:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3303      	adds	r3, #3
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80023e0:	f7ff feb2 	bl	8002148 <LL_FLASH_GetSTCompanyID>
 80023e4:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3302      	adds	r3, #2
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	0a1a      	lsrs	r2, r3, #8
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3301      	adds	r3, #1
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	0c1b      	lsrs	r3, r3, #16
 8002400:	b2da      	uxtb	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	701a      	strb	r2, [r3, #0]
}
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}

0800240e <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 800240e:	b590      	push	{r4, r7, lr}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8002416:	f7ff fe81 	bl	800211c <LL_FLASH_GetUDN>
 800241a:	4602      	mov	r2, r0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d10d      	bne.n	8002446 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800242a:	f000 ff51 	bl	80032d0 <HAL_GetUIDw0>
 800242e:	4604      	mov	r4, r0
 8002430:	f000 ff58 	bl	80032e4 <HAL_GetUIDw1>
 8002434:	4603      	mov	r3, r0
 8002436:	405c      	eors	r4, r3
 8002438:	f000 ff5e 	bl	80032f8 <HAL_GetUIDw2>
 800243c:	4603      	mov	r3, r0
 800243e:	ea84 0203 	eor.w	r2, r4, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bd90      	pop	{r4, r7, pc}
	...

08002450 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af02      	add	r7, sp, #8
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800245a:	f107 0308 	add.w	r3, r7, #8
 800245e:	4618      	mov	r0, r3
 8002460:	f019 fcb0 	bl	801bdc4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800246a:	9200      	str	r2, [sp, #0]
 800246c:	4a07      	ldr	r2, [pc, #28]	@ (800248c <TimestampNow+0x3c>)
 800246e:	2110      	movs	r1, #16
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f81d 	bl	80024b0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fd fe7e 	bl	8000178 <strlen>
 800247c:	4603      	mov	r3, r0
 800247e:	b29a      	uxth	r2, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	0801d238 	.word	0x0801d238

08002490 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002494:	2101      	movs	r1, #1
 8002496:	2002      	movs	r0, #2
 8002498:	f019 fb24 	bl	801bae4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}

080024a0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80024a4:	2100      	movs	r1, #0
 80024a6:	2002      	movs	r0, #2
 80024a8:	f019 fb1c 	bl	801bae4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80024b0:	b40c      	push	{r2, r3}
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80024bc:	f107 031c 	add.w	r3, r7, #28
 80024c0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80024c2:	6839      	ldr	r1, [r7, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f019 fde7 	bl	801c09c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024d8:	b002      	add	sp, #8
 80024da:	4770      	bx	lr

080024dc <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_GetTick+0x24>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002502:	f000 f935 	bl	8002770 <TIMER_IF_GetTimerValue>
 8002506:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002508:	687b      	ldr	r3, [r7, #4]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000324 	.word	0x20000324

08002518 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f9ab 	bl	800287e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <LL_EXTI_EnableIT_32_63+0x24>)
 800253a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800253e:	4905      	ldr	r1, [pc, #20]	@ (8002554 <LL_EXTI_EnableIT_32_63+0x24>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	58000800 	.word	0x58000800

08002558 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 800255c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002560:	f7ff ffe6 	bl	8002530 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002564:	f000 fed2 	bl	800330c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002568:	f000 fed6 	bl	8003318 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800256c:	f000 feda 	bl	8003324 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 800257c:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <EnvSensors_Read+0x50>)
 800257e:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <EnvSensors_Read+0x54>)
 8002582:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <EnvSensors_Read+0x58>)
 8002586:	60fb      	str	r3, [r7, #12]

  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8002588:	f7fe fd8a 	bl	80010a0 <SYS_GetTemperatureLevel>
 800258c:	4603      	mov	r3, r0
 800258e:	121b      	asrs	r3, r3, #8
 8002590:	b21b      	sxth	r3, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe f91e 	bl	80007d4 <__aeabi_i2f>
 8002598:	4603      	mov	r3, r0
 800259a:	613b      	str	r3, [r7, #16]

  sensor_data->humidity    = HUMIDITY_Value;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a07      	ldr	r2, [pc, #28]	@ (80025d0 <EnvSensors_Read+0x5c>)
 80025b2:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a07      	ldr	r2, [pc, #28]	@ (80025d4 <EnvSensors_Read+0x60>)
 80025b8:	611a      	str	r2, [r3, #16]

  return 0;
 80025ba:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	42480000 	.word	0x42480000
 80025c8:	41900000 	.word	0x41900000
 80025cc:	447a0000 	.word	0x447a0000
 80025d0:	003e090d 	.word	0x003e090d
 80025d4:	000503ab 	.word	0x000503ab

080025d8 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80025e2:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800261a:	4b14      	ldr	r3, [pc, #80]	@ (800266c <TIMER_IF_Init+0x5c>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	f083 0301 	eor.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <TIMER_IF_Init+0x60>)
 800262a:	f04f 32ff 	mov.w	r2, #4294967295
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002630:	f7ff fbce 	bl	8001dd0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002634:	f000 f856 	bl	80026e4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002638:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800263c:	480c      	ldr	r0, [pc, #48]	@ (8002670 <TIMER_IF_Init+0x60>)
 800263e:	f005 fb37 	bl	8007cb0 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <TIMER_IF_Init+0x60>)
 8002644:	f04f 32ff 	mov.w	r2, #4294967295
 8002648:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800264a:	4809      	ldr	r0, [pc, #36]	@ (8002670 <TIMER_IF_Init+0x60>)
 800264c:	f005 fc6e 	bl	8007f2c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002650:	2000      	movs	r0, #0
 8002652:	f000 f9d3 	bl	80029fc <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002656:	f000 f85f 	bl	8002718 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <TIMER_IF_Init+0x5c>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002660:	79fb      	ldrb	r3, [r7, #7]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000325 	.word	0x20000325
 8002670:	200002e0 	.word	0x200002e0

08002674 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08e      	sub	sp, #56	@ 0x38
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	222c      	movs	r2, #44	@ 0x2c
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f01a fd1c 	bl	801d0c8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002690:	f000 f828 	bl	80026e4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002694:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <TIMER_IF_StartTimer+0x68>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80026ac:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80026b0:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80026b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026b6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	2201      	movs	r2, #1
 80026be:	4619      	mov	r1, r3
 80026c0:	4807      	ldr	r0, [pc, #28]	@ (80026e0 <TIMER_IF_StartTimer+0x6c>)
 80026c2:	f005 f9e9 	bl	8007a98 <HAL_RTC_SetAlarm_IT>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80026cc:	f7ff fb52 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80026d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3738      	adds	r7, #56	@ 0x38
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000328 	.word	0x20000328
 80026e0:	200002e0 	.word	0x200002e0

080026e4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <TIMER_IF_StopTimer+0x2c>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80026f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026f8:	4806      	ldr	r0, [pc, #24]	@ (8002714 <TIMER_IF_StopTimer+0x30>)
 80026fa:	f005 fad9 	bl	8007cb0 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80026fe:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <TIMER_IF_StopTimer+0x30>)
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002706:	79fb      	ldrb	r3, [r7, #7]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40002800 	.word	0x40002800
 8002714:	200002e0 	.word	0x200002e0

08002718 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 800271c:	f000 f98e 	bl	8002a3c <GetTimerTicks>
 8002720:	4603      	mov	r3, r0
 8002722:	4a03      	ldr	r2, [pc, #12]	@ (8002730 <TIMER_IF_SetTimerContext+0x18>)
 8002724:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002726:	4b02      	ldr	r3, [pc, #8]	@ (8002730 <TIMER_IF_SetTimerContext+0x18>)
 8002728:	681b      	ldr	r3, [r3, #0]
}
 800272a:	4618      	mov	r0, r3
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000328 	.word	0x20000328

08002734 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002738:	4b02      	ldr	r3, [pc, #8]	@ (8002744 <TIMER_IF_GetTimerContext+0x10>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	20000328 	.word	0x20000328

08002748 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002752:	f000 f973 	bl	8002a3c <GetTimerTicks>
 8002756:	4602      	mov	r2, r0
 8002758:	4b04      	ldr	r3, [pc, #16]	@ (800276c <TIMER_IF_GetTimerElapsedTime+0x24>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002760:	687b      	ldr	r3, [r7, #4]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000328 	.word	0x20000328

08002770 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <TIMER_IF_GetTimerValue+0x24>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002782:	f000 f95b 	bl	8002a3c <GetTimerTicks>
 8002786:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002788:	687b      	ldr	r3, [r7, #4]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000325 	.word	0x20000325

08002798 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80027a2:	2303      	movs	r3, #3
 80027a4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80027a6:	687b      	ldr	r3, [r7, #4]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80027b2:	b5b0      	push	{r4, r5, r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80027ba:	2100      	movs	r1, #0
 80027bc:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	2000      	movs	r0, #0
 80027c2:	460a      	mov	r2, r1
 80027c4:	4603      	mov	r3, r0
 80027c6:	0d95      	lsrs	r5, r2, #22
 80027c8:	0294      	lsls	r4, r2, #10
 80027ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	4620      	mov	r0, r4
 80027d4:	4629      	mov	r1, r5
 80027d6:	f7fe f9e7 	bl	8000ba8 <__aeabi_uldivmod>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4613      	mov	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80027e2:	68fb      	ldr	r3, [r7, #12]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bdb0      	pop	{r4, r5, r7, pc}

080027ec <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80027ec:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80027f6:	2100      	movs	r1, #0
 80027f8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	2000      	movs	r0, #0
 80027fe:	460c      	mov	r4, r1
 8002800:	4605      	mov	r5, r0
 8002802:	4620      	mov	r0, r4
 8002804:	4629      	mov	r1, r5
 8002806:	f04f 0a00 	mov.w	sl, #0
 800280a:	f04f 0b00 	mov.w	fp, #0
 800280e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002812:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002816:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800281a:	4650      	mov	r0, sl
 800281c:	4659      	mov	r1, fp
 800281e:	1b02      	subs	r2, r0, r4
 8002820:	eb61 0305 	sbc.w	r3, r1, r5
 8002824:	f04f 0000 	mov.w	r0, #0
 8002828:	f04f 0100 	mov.w	r1, #0
 800282c:	0099      	lsls	r1, r3, #2
 800282e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002832:	0090      	lsls	r0, r2, #2
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	eb12 0804 	adds.w	r8, r2, r4
 800283c:	eb43 0905 	adc.w	r9, r3, r5
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800284c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002850:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002854:	4690      	mov	r8, r2
 8002856:	4699      	mov	r9, r3
 8002858:	4640      	mov	r0, r8
 800285a:	4649      	mov	r1, r9
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	0a82      	lsrs	r2, r0, #10
 8002866:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800286a:	0a8b      	lsrs	r3, r1, #10
 800286c:	4613      	mov	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002870:	68fb      	ldr	r3, [r7, #12]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800287c:	4770      	bx	lr

0800287e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ff93 	bl	80027b2 <TIMER_IF_Convert_ms2Tick>
 800288c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800288e:	f000 f8d5 	bl	8002a3c <GetTimerTicks>
 8002892:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002894:	e000      	b.n	8002898 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002896:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002898:	f000 f8d0 	bl	8002a3c <GetTimerTicks>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d8f6      	bhi.n	8002896 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80028ba:	f01a f81d 	bl	801c8f8 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80028ce:	f000 f8a5 	bl	8002a1c <TIMER_IF_BkUp_Read_MSBticks>
 80028d2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3301      	adds	r3, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 f88f 	bl	80029fc <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80028e6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ea:	b08c      	sub	sp, #48	@ 0x30
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80028f4:	f000 f8a2 	bl	8002a3c <GetTimerTicks>
 80028f8:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80028fa:	f000 f88f 	bl	8002a1c <TIMER_IF_BkUp_Read_MSBticks>
 80028fe:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	2200      	movs	r2, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	60fa      	str	r2, [r7, #12]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	000b      	movs	r3, r1
 8002914:	2200      	movs	r2, #0
 8002916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002918:	2000      	movs	r0, #0
 800291a:	460c      	mov	r4, r1
 800291c:	4605      	mov	r5, r0
 800291e:	eb12 0804 	adds.w	r8, r2, r4
 8002922:	eb43 0905 	adc.w	r9, r3, r5
 8002926:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800292a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	0a82      	lsrs	r2, r0, #10
 8002938:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800293c:	0a8b      	lsrs	r3, r1, #10
 800293e:	4613      	mov	r3, r2
 8002940:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2200      	movs	r2, #0
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002950:	f04f 0b00 	mov.w	fp, #0
 8002954:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff46 	bl	80027ec <TIMER_IF_Convert_Tick2ms>
 8002960:	4603      	mov	r3, r0
 8002962:	b29a      	uxth	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800296a:	4618      	mov	r0, r3
 800296c:	3730      	adds	r7, #48	@ 0x30
 800296e:	46bd      	mov	sp, r7
 8002970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002974 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	2100      	movs	r1, #0
 8002980:	4803      	ldr	r0, [pc, #12]	@ (8002990 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002982:	f005 fb65 	bl	8008050 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200002e0 	.word	0x200002e0

08002994 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	2101      	movs	r1, #1
 80029a0:	4803      	ldr	r0, [pc, #12]	@ (80029b0 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80029a2:	f005 fb55 	bl	8008050 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200002e0 	.word	0x200002e0

080029b4 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80029be:	2100      	movs	r1, #0
 80029c0:	4804      	ldr	r0, [pc, #16]	@ (80029d4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80029c2:	f005 fb5d 	bl	8008080 <HAL_RTCEx_BKUPRead>
 80029c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80029c8:	687b      	ldr	r3, [r7, #4]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200002e0 	.word	0x200002e0

080029d8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80029e2:	2101      	movs	r1, #1
 80029e4:	4804      	ldr	r0, [pc, #16]	@ (80029f8 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80029e6:	f005 fb4b 	bl	8008080 <HAL_RTCEx_BKUPRead>
 80029ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80029ec:	687b      	ldr	r3, [r7, #4]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200002e0 	.word	0x200002e0

080029fc <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	2102      	movs	r1, #2
 8002a08:	4803      	ldr	r0, [pc, #12]	@ (8002a18 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002a0a:	f005 fb21 	bl	8008050 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200002e0 	.word	0x200002e0

08002a1c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002a22:	2102      	movs	r1, #2
 8002a24:	4804      	ldr	r0, [pc, #16]	@ (8002a38 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002a26:	f005 fb2b 	bl	8008080 <HAL_RTCEx_BKUPRead>
 8002a2a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002a2c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200002e0 	.word	0x200002e0

08002a3c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002a42:	480b      	ldr	r0, [pc, #44]	@ (8002a70 <GetTimerTicks+0x34>)
 8002a44:	f7ff fdd9 	bl	80025fa <LL_RTC_TIME_GetSubSecond>
 8002a48:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002a4a:	e003      	b.n	8002a54 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002a4c:	4808      	ldr	r0, [pc, #32]	@ (8002a70 <GetTimerTicks+0x34>)
 8002a4e:	f7ff fdd4 	bl	80025fa <LL_RTC_TIME_GetSubSecond>
 8002a52:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002a54:	4806      	ldr	r0, [pc, #24]	@ (8002a70 <GetTimerTicks+0x34>)
 8002a56:	f7ff fdd0 	bl	80025fa <LL_RTC_TIME_GetSubSecond>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d1f4      	bne.n	8002a4c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40002800 	.word	0x40002800

08002a74 <LL_AHB2_GRP1_EnableClock>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a98:	68fb      	ldr	r3, [r7, #12]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <LL_APB1_GRP1_EnableClock>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ab2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <LL_APB1_GRP1_DisableClock>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aea:	4013      	ands	r3, r2
 8002aec:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <LL_APB2_GRP1_EnableClock>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <LL_APB2_GRP1_DisableClock>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b3e:	4013      	ands	r3, r2
 8002b40:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b50:	4b22      	ldr	r3, [pc, #136]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002b52:	4a23      	ldr	r2, [pc, #140]	@ (8002be0 <MX_USART2_UART_Init+0x94>)
 8002b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b56:	4b21      	ldr	r3, [pc, #132]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002b58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b64:	4b1d      	ldr	r3, [pc, #116]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b70:	4b1a      	ldr	r3, [pc, #104]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002b72:	220c      	movs	r2, #12
 8002b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b76:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b7c:	4b17      	ldr	r3, [pc, #92]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b82:	4b16      	ldr	r3, [pc, #88]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b88:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b8e:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b94:	4811      	ldr	r0, [pc, #68]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002b96:	f005 ff74 	bl	8008a82 <HAL_UART_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002ba0:	f7ff f8e8 	bl	8001d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	480d      	ldr	r0, [pc, #52]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002ba8:	f008 f89a 	bl	800ace0 <HAL_UARTEx_SetTxFifoThreshold>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002bb2:	f7ff f8df 	bl	8001d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4808      	ldr	r0, [pc, #32]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002bba:	f008 f8cf 	bl	800ad5c <HAL_UARTEx_SetRxFifoThreshold>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002bc4:	f7ff f8d6 	bl	8001d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002bc8:	4804      	ldr	r0, [pc, #16]	@ (8002bdc <MX_USART2_UART_Init+0x90>)
 8002bca:	f008 f851 	bl	800ac70 <HAL_UARTEx_DisableFifoMode>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002bd4:	f7ff f8ce 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	200003c0 	.word	0x200003c0
 8002be0:	40004400 	.word	0x40004400

08002be4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b096      	sub	sp, #88	@ 0x58
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bfc:	f107 030c 	add.w	r3, r7, #12
 8002c00:	2238      	movs	r2, #56	@ 0x38
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f01a fa5f 	bl	801d0c8 <memset>
  if(uartHandle->Instance==USART1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a68      	ldr	r2, [pc, #416]	@ (8002db0 <HAL_UART_MspInit+0x1cc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d16c      	bne.n	8002cee <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c14:	2301      	movs	r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c18:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002c1c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	4618      	mov	r0, r3
 8002c24:	f004 fd9c 	bl	8007760 <HAL_RCCEx_PeriphCLKConfig>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c2e:	f7ff f8a1 	bl	8001d74 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c32:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002c36:	f7ff ff5f 	bl	8002af8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f7ff ff1a 	bl	8002a74 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c40:	2002      	movs	r0, #2
 8002c42:	f7ff ff17 	bl	8002a74 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8002c46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c4a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c54:	2303      	movs	r3, #3
 8002c56:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c58:	2307      	movs	r3, #7
 8002c5a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8002c5c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002c60:	4619      	mov	r1, r3
 8002c62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c66:	f002 fae5 	bl	8005234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8002c6a:	2340      	movs	r3, #64	@ 0x40
 8002c6c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8002c7e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002c82:	4619      	mov	r1, r3
 8002c84:	484b      	ldr	r0, [pc, #300]	@ (8002db4 <HAL_UART_MspInit+0x1d0>)
 8002c86:	f002 fad5 	bl	8005234 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002c8a:	4b4b      	ldr	r3, [pc, #300]	@ (8002db8 <HAL_UART_MspInit+0x1d4>)
 8002c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002dbc <HAL_UART_MspInit+0x1d8>)
 8002c8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002c90:	4b49      	ldr	r3, [pc, #292]	@ (8002db8 <HAL_UART_MspInit+0x1d4>)
 8002c92:	2212      	movs	r2, #18
 8002c94:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c96:	4b48      	ldr	r3, [pc, #288]	@ (8002db8 <HAL_UART_MspInit+0x1d4>)
 8002c98:	2210      	movs	r2, #16
 8002c9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c9c:	4b46      	ldr	r3, [pc, #280]	@ (8002db8 <HAL_UART_MspInit+0x1d4>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca2:	4b45      	ldr	r3, [pc, #276]	@ (8002db8 <HAL_UART_MspInit+0x1d4>)
 8002ca4:	2280      	movs	r2, #128	@ 0x80
 8002ca6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca8:	4b43      	ldr	r3, [pc, #268]	@ (8002db8 <HAL_UART_MspInit+0x1d4>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cae:	4b42      	ldr	r3, [pc, #264]	@ (8002db8 <HAL_UART_MspInit+0x1d4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cb4:	4b40      	ldr	r3, [pc, #256]	@ (8002db8 <HAL_UART_MspInit+0x1d4>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cba:	4b3f      	ldr	r3, [pc, #252]	@ (8002db8 <HAL_UART_MspInit+0x1d4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cc0:	483d      	ldr	r0, [pc, #244]	@ (8002db8 <HAL_UART_MspInit+0x1d4>)
 8002cc2:	f001 fcb3 	bl	800462c <HAL_DMA_Init>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8002ccc:	f7ff f852 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a39      	ldr	r2, [pc, #228]	@ (8002db8 <HAL_UART_MspInit+0x1d4>)
 8002cd4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002cd6:	4a38      	ldr	r2, [pc, #224]	@ (8002db8 <HAL_UART_MspInit+0x1d4>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2102      	movs	r1, #2
 8002ce0:	2024      	movs	r0, #36	@ 0x24
 8002ce2:	f001 fc6c 	bl	80045be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ce6:	2024      	movs	r0, #36	@ 0x24
 8002ce8:	f001 fc83 	bl	80045f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002cec:	e05c      	b.n	8002da8 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a33      	ldr	r2, [pc, #204]	@ (8002dc0 <HAL_UART_MspInit+0x1dc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d157      	bne.n	8002da8 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cfc:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002d00:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	4618      	mov	r0, r3
 8002d08:	f004 fd2a 	bl	8007760 <HAL_RCCEx_PeriphCLKConfig>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8002d12:	f7ff f82f 	bl	8001d74 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d16:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002d1a:	f7ff fec3 	bl	8002aa4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f7ff fea8 	bl	8002a74 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002d24:	230c      	movs	r3, #12
 8002d26:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d34:	2307      	movs	r3, #7
 8002d36:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d38:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d42:	f002 fa77 	bl	8005234 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002d46:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc4 <HAL_UART_MspInit+0x1e0>)
 8002d48:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc8 <HAL_UART_MspInit+0x1e4>)
 8002d4a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc4 <HAL_UART_MspInit+0x1e0>)
 8002d4e:	2214      	movs	r2, #20
 8002d50:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d52:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc4 <HAL_UART_MspInit+0x1e0>)
 8002d54:	2210      	movs	r2, #16
 8002d56:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d58:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc4 <HAL_UART_MspInit+0x1e0>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d5e:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <HAL_UART_MspInit+0x1e0>)
 8002d60:	2280      	movs	r2, #128	@ 0x80
 8002d62:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d64:	4b17      	ldr	r3, [pc, #92]	@ (8002dc4 <HAL_UART_MspInit+0x1e0>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d6a:	4b16      	ldr	r3, [pc, #88]	@ (8002dc4 <HAL_UART_MspInit+0x1e0>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d70:	4b14      	ldr	r3, [pc, #80]	@ (8002dc4 <HAL_UART_MspInit+0x1e0>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d76:	4b13      	ldr	r3, [pc, #76]	@ (8002dc4 <HAL_UART_MspInit+0x1e0>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d7c:	4811      	ldr	r0, [pc, #68]	@ (8002dc4 <HAL_UART_MspInit+0x1e0>)
 8002d7e:	f001 fc55 	bl	800462c <HAL_DMA_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002d88:	f7fe fff4 	bl	8001d74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc4 <HAL_UART_MspInit+0x1e0>)
 8002d90:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002d92:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc4 <HAL_UART_MspInit+0x1e0>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	2025      	movs	r0, #37	@ 0x25
 8002d9e:	f001 fc0e 	bl	80045be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002da2:	2025      	movs	r0, #37	@ 0x25
 8002da4:	f001 fc25 	bl	80045f2 <HAL_NVIC_EnableIRQ>
}
 8002da8:	bf00      	nop
 8002daa:	3758      	adds	r7, #88	@ 0x58
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40013800 	.word	0x40013800
 8002db4:	48000400 	.word	0x48000400
 8002db8:	20000454 	.word	0x20000454
 8002dbc:	40020008 	.word	0x40020008
 8002dc0:	40004400 	.word	0x40004400
 8002dc4:	200004b4 	.word	0x200004b4
 8002dc8:	4002001c 	.word	0x4002001c

08002dcc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a19      	ldr	r2, [pc, #100]	@ (8002e40 <HAL_UART_MspDeInit+0x74>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d116      	bne.n	8002e0c <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002dde:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002de2:	f7ff fea1 	bl	8002b28 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(RS485_RX_GPIO_Port, RS485_RX_Pin);
 8002de6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002dea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dee:	f002 fb81 	bl	80054f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(RS485_TX_GPIO_Port, RS485_TX_Pin);
 8002df2:	2140      	movs	r1, #64	@ 0x40
 8002df4:	4813      	ldr	r0, [pc, #76]	@ (8002e44 <HAL_UART_MspDeInit+0x78>)
 8002df6:	f002 fb7d 	bl	80054f4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f001 fcbc 	bl	800477c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002e04:	2024      	movs	r0, #36	@ 0x24
 8002e06:	f001 fc02 	bl	800460e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002e0a:	e015      	b.n	8002e38 <HAL_UART_MspDeInit+0x6c>
  else if(uartHandle->Instance==USART2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0d      	ldr	r2, [pc, #52]	@ (8002e48 <HAL_UART_MspDeInit+0x7c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d110      	bne.n	8002e38 <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002e16:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002e1a:	f7ff fe5b 	bl	8002ad4 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002e1e:	210c      	movs	r1, #12
 8002e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e24:	f002 fb66 	bl	80054f4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 fca5 	bl	800477c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002e32:	2025      	movs	r0, #37	@ 0x25
 8002e34:	f001 fbeb 	bl	800460e <HAL_NVIC_DisableIRQ>
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40013800 	.word	0x40013800
 8002e44:	48000400 	.word	0x48000400
 8002e48:	40004400 	.word	0x40004400

08002e4c <LL_APB1_GRP1_ForceReset>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <LL_APB1_GRP1_ReleaseReset>:
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e84:	4013      	ands	r3, r2
 8002e86:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
	...

08002e94 <LL_EXTI_EnableIT_0_31>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002e9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002ea2:	4905      	ldr	r1, [pc, #20]	@ (8002eb8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	58000800 	.word	0x58000800

08002ebc <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002ec4:	4a07      	ldr	r2, [pc, #28]	@ (8002ee4 <vcom_Init+0x28>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002eca:	f7fe fa7b 	bl	80013c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002ece:	f7ff fe3d 	bl	8002b4c <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8002ed2:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002ed6:	f7ff ffdd 	bl	8002e94 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002eda:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000518 	.word	0x20000518

08002ee8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002eec:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002ef0:	f7ff ffac 	bl	8002e4c <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002ef4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002ef8:	f7ff ffb9 	bl	8002e6e <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002efc:	4804      	ldr	r0, [pc, #16]	@ (8002f10 <vcom_DeInit+0x28>)
 8002efe:	f7ff ff65 	bl	8002dcc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002f02:	200f      	movs	r0, #15
 8002f04:	f001 fb83 	bl	800460e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002f08:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	200003c0 	.word	0x200003c0

08002f14 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	461a      	mov	r2, r3
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4804      	ldr	r0, [pc, #16]	@ (8002f38 <vcom_Trace_DMA+0x24>)
 8002f28:	f005 fe48 	bl	8008bbc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002f2c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200003c0 	.word	0x200003c0

08002f3c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002f44:	4a19      	ldr	r2, [pc, #100]	@ (8002fac <vcom_ReceiveInit+0x70>)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002f4a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002f4e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002f50:	f107 0308 	add.w	r3, r7, #8
 8002f54:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002f58:	4815      	ldr	r0, [pc, #84]	@ (8002fb0 <vcom_ReceiveInit+0x74>)
 8002f5a:	f007 fdfc 	bl	800ab56 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002f5e:	bf00      	nop
 8002f60:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <vcom_ReceiveInit+0x74>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f6e:	d0f7      	beq.n	8002f60 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002f70:	bf00      	nop
 8002f72:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb0 <vcom_ReceiveInit+0x74>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f80:	d1f7      	bne.n	8002f72 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002f82:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <vcom_ReceiveInit+0x74>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <vcom_ReceiveInit+0x74>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002f90:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002f92:	4807      	ldr	r0, [pc, #28]	@ (8002fb0 <vcom_ReceiveInit+0x74>)
 8002f94:	f007 fe3a 	bl	800ac0c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4906      	ldr	r1, [pc, #24]	@ (8002fb4 <vcom_ReceiveInit+0x78>)
 8002f9c:	4804      	ldr	r0, [pc, #16]	@ (8002fb0 <vcom_ReceiveInit+0x74>)
 8002f9e:	f005 fdc1 	bl	8008b24 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002fa2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	2000051c 	.word	0x2000051c
 8002fb0:	200003c0 	.word	0x200003c0
 8002fb4:	20000514 	.word	0x20000514

08002fb8 <vcom_Resume>:

void vcom_Resume(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fbc:	4808      	ldr	r0, [pc, #32]	@ (8002fe0 <vcom_Resume+0x28>)
 8002fbe:	f005 fd60 	bl	8008a82 <HAL_UART_Init>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <vcom_Resume+0x14>
  {
    Error_Handler();
 8002fc8:	f7fe fed4 	bl	8001d74 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002fcc:	4805      	ldr	r0, [pc, #20]	@ (8002fe4 <vcom_Resume+0x2c>)
 8002fce:	f001 fb2d 	bl	800462c <HAL_DMA_Init>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <vcom_Resume+0x24>
  {
    Error_Handler();
 8002fd8:	f7fe fecc 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	200003c0 	.word	0x200003c0
 8002fe4:	200004b4 	.word	0x200004b4

08002fe8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a05      	ldr	r2, [pc, #20]	@ (800300c <HAL_UART_TxCpltCallback+0x24>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d103      	bne.n	8003002 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002ffa:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <HAL_UART_TxCpltCallback+0x28>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2000      	movs	r0, #0
 8003000:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40004400 	.word	0x40004400
 8003010:	20000518 	.word	0x20000518

08003014 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0d      	ldr	r2, [pc, #52]	@ (8003058 <HAL_UART_RxCpltCallback+0x44>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d113      	bne.n	800304e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003026:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <HAL_UART_RxCpltCallback+0x48>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_UART_RxCpltCallback+0x30>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003038:	4b08      	ldr	r3, [pc, #32]	@ (800305c <HAL_UART_RxCpltCallback+0x48>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2200      	movs	r2, #0
 800303e:	2101      	movs	r1, #1
 8003040:	4807      	ldr	r0, [pc, #28]	@ (8003060 <HAL_UART_RxCpltCallback+0x4c>)
 8003042:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003044:	2201      	movs	r2, #1
 8003046:	4906      	ldr	r1, [pc, #24]	@ (8003060 <HAL_UART_RxCpltCallback+0x4c>)
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f005 fd6b 	bl	8008b24 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40004400 	.word	0x40004400
 800305c:	2000051c 	.word	0x2000051c
 8003060:	20000514 	.word	0x20000514

08003064 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003064:	480d      	ldr	r0, [pc, #52]	@ (800309c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003066:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003068:	f7ff fac1 	bl	80025ee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800306c:	480c      	ldr	r0, [pc, #48]	@ (80030a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800306e:	490d      	ldr	r1, [pc, #52]	@ (80030a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003070:	4a0d      	ldr	r2, [pc, #52]	@ (80030a8 <LoopForever+0xe>)
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003074:	e002      	b.n	800307c <LoopCopyDataInit>

08003076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800307a:	3304      	adds	r3, #4

0800307c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800307c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003080:	d3f9      	bcc.n	8003076 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003082:	4a0a      	ldr	r2, [pc, #40]	@ (80030ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003084:	4c0a      	ldr	r4, [pc, #40]	@ (80030b0 <LoopForever+0x16>)
  movs r3, #0
 8003086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003088:	e001      	b.n	800308e <LoopFillZerobss>

0800308a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800308a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800308c:	3204      	adds	r2, #4

0800308e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003090:	d3fb      	bcc.n	800308a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003092:	f01a f821 	bl	801d0d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003096:	f7fe fe02 	bl	8001c9e <main>

0800309a <LoopForever>:

LoopForever:
    b LoopForever
 800309a:	e7fe      	b.n	800309a <LoopForever>
  ldr   r0, =_estack
 800309c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80030a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a4:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 80030a8:	0801e27c 	.word	0x0801e27c
  ldr r2, =_sbss
 80030ac:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 80030b0:	20002414 	.word	0x20002414

080030b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030b4:	e7fe      	b.n	80030b4 <ADC_IRQHandler>

080030b6 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	60da      	str	r2, [r3, #12]
 80030c8:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80030ca:	2310      	movs	r3, #16
 80030cc:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80030ce:	2301      	movs	r3, #1
 80030d0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030e2:	f002 f8a7 	bl	8005234 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80030e6:	2320      	movs	r3, #32
 80030e8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030f2:	f002 f89f 	bl	8005234 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80030f6:	2200      	movs	r2, #0
 80030f8:	2120      	movs	r1, #32
 80030fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030fe:	f002 fac7 	bl	8005690 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003102:	2200      	movs	r2, #0
 8003104:	2110      	movs	r1, #16
 8003106:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800310a:	f002 fac1 	bl	8005690 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d83f      	bhi.n	80031a8 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003128:	a201      	add	r2, pc, #4	@ (adr r2, 8003130 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003141 	.word	0x08003141
 8003134:	0800315b 	.word	0x0800315b
 8003138:	08003175 	.word	0x08003175
 800313c:	0800318f 	.word	0x0800318f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003140:	2200      	movs	r2, #0
 8003142:	2110      	movs	r1, #16
 8003144:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003148:	f002 faa2 	bl	8005690 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800314c:	2200      	movs	r2, #0
 800314e:	2120      	movs	r1, #32
 8003150:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003154:	f002 fa9c 	bl	8005690 <HAL_GPIO_WritePin>
      break;      
 8003158:	e027      	b.n	80031aa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800315a:	2201      	movs	r2, #1
 800315c:	2110      	movs	r1, #16
 800315e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003162:	f002 fa95 	bl	8005690 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003166:	2200      	movs	r2, #0
 8003168:	2120      	movs	r1, #32
 800316a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800316e:	f002 fa8f 	bl	8005690 <HAL_GPIO_WritePin>
      break;
 8003172:	e01a      	b.n	80031aa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003174:	2201      	movs	r2, #1
 8003176:	2110      	movs	r1, #16
 8003178:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800317c:	f002 fa88 	bl	8005690 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003180:	2201      	movs	r2, #1
 8003182:	2120      	movs	r1, #32
 8003184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003188:	f002 fa82 	bl	8005690 <HAL_GPIO_WritePin>
      break;
 800318c:	e00d      	b.n	80031aa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800318e:	2200      	movs	r2, #0
 8003190:	2110      	movs	r1, #16
 8003192:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003196:	f002 fa7b 	bl	8005690 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800319a:	2201      	movs	r2, #1
 800319c:	2120      	movs	r1, #32
 800319e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031a2:	f002 fa75 	bl	8005690 <HAL_GPIO_WritePin>
      break;
 80031a6:	e000      	b.n	80031aa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80031a8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80031b8:	2302      	movs	r3, #2
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80031c6:	2301      	movs	r3, #1
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80031d4:	2301      	movs	r3, #1
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80031de:	b480      	push	{r7}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d102      	bne.n	80031f4 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80031ee:	230f      	movs	r3, #15
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e001      	b.n	80031f8 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80031f4:	2316      	movs	r3, #22
 80031f6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80031f8:	68fb      	ldr	r3, [r7, #12]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003208:	4b04      	ldr	r3, [pc, #16]	@ (800321c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a03      	ldr	r2, [pc, #12]	@ (800321c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6053      	str	r3, [r2, #4]
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	e0042000 	.word	0xe0042000

08003220 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003224:	4b04      	ldr	r3, [pc, #16]	@ (8003238 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a03      	ldr	r2, [pc, #12]	@ (8003238 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800322a:	f043 0302 	orr.w	r3, r3, #2
 800322e:	6053      	str	r3, [r2, #4]
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	e0042000 	.word	0xe0042000

0800323c <LL_DBGMCU_EnableDBGStandbyMode>:
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003240:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a03      	ldr	r2, [pc, #12]	@ (8003254 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6053      	str	r3, [r2, #4]
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	e0042000 	.word	0xe0042000

08003258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003262:	2003      	movs	r0, #3
 8003264:	f001 f9a0 	bl	80045a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003268:	f004 f89c 	bl	80073a4 <HAL_RCC_GetHCLKFreq>
 800326c:	4603      	mov	r3, r0
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_Init+0x3c>)
 8003270:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003272:	200f      	movs	r0, #15
 8003274:	f7ff f932 	bl	80024dc <HAL_InitTick>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	71fb      	strb	r3, [r7, #7]
 8003282:	e001      	b.n	8003288 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003284:	f7fe fe6d 	bl	8001f62 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003288:	79fb      	ldrb	r3, [r7, #7]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000000 	.word	0x20000000

08003298 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800329c:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <HAL_SuspendTick+0x18>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a03      	ldr	r2, [pc, #12]	@ (80032b0 <HAL_SuspendTick+0x18>)
 80032a2:	f023 0302 	bic.w	r3, r3, #2
 80032a6:	6013      	str	r3, [r2, #0]
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	e000e010 	.word	0xe000e010

080032b4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80032b8:	4b04      	ldr	r3, [pc, #16]	@ (80032cc <HAL_ResumeTick+0x18>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a03      	ldr	r2, [pc, #12]	@ (80032cc <HAL_ResumeTick+0x18>)
 80032be:	f043 0302 	orr.w	r3, r3, #2
 80032c2:	6013      	str	r3, [r2, #0]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80032d4:	4b02      	ldr	r3, [pc, #8]	@ (80032e0 <HAL_GetUIDw0+0x10>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	1fff7590 	.word	0x1fff7590

080032e4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80032e8:	4b02      	ldr	r3, [pc, #8]	@ (80032f4 <HAL_GetUIDw1+0x10>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	1fff7594 	.word	0x1fff7594

080032f8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80032fc:	4b02      	ldr	r3, [pc, #8]	@ (8003308 <HAL_GetUIDw2+0x10>)
 80032fe:	681b      	ldr	r3, [r3, #0]
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	1fff7598 	.word	0x1fff7598

0800330c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003310:	f7ff ff78 	bl	8003204 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 800331c:	f7ff ff80 	bl	8003220 <LL_DBGMCU_EnableDBGStopMode>
}
 8003320:	bf00      	nop
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003328:	f7ff ff88 	bl	800323c <LL_DBGMCU_EnableDBGStandbyMode>
}
 800332c:	bf00      	nop
 800332e:	bd80      	pop	{r7, pc}

08003330 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	601a      	str	r2, [r3, #0]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2107      	movs	r1, #7
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	401a      	ands	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	fa01 f303 	lsl.w	r3, r1, r3
 800339a:	431a      	orrs	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr

080033aa <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2107      	movs	r1, #7
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033fe:	b480      	push	{r7}
 8003400:	b085      	sub	sp, #20
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	210f      	movs	r1, #15
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	401a      	ands	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	0e9b      	lsrs	r3, r3, #26
 8003422:	f003 010f 	and.w	r1, r3, #15
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	fa01 f303 	lsl.w	r3, r1, r3
 8003430:	431a      	orrs	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003478:	43db      	mvns	r3, r3
 800347a:	401a      	ands	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800348a:	b480      	push	{r7}
 800348c:	b085      	sub	sp, #20
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	43db      	mvns	r3, r3
 80034a0:	401a      	ands	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	0219      	lsls	r1, r3, #8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	400b      	ands	r3, r1
 80034aa:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80034ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034b2:	431a      	orrs	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80034d2:	f023 0317 	bic.w	r3, r3, #23
 80034d6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80034f8:	f023 0317 	bic.w	r3, r3, #23
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6093      	str	r3, [r2, #8]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800351e:	d101      	bne.n	8003524 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003540:	f023 0317 	bic.w	r3, r3, #23
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr

08003556 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003566:	f023 0317 	bic.w	r3, r3, #23
 800356a:	f043 0202 	orr.w	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <LL_ADC_IsEnabled+0x18>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <LL_ADC_IsEnabled+0x1a>
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d101      	bne.n	80035b8 <LL_ADC_IsDisableOngoing+0x18>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <LL_ADC_IsDisableOngoing+0x1a>
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035d4:	f023 0317 	bic.w	r3, r3, #23
 80035d8:	f043 0204 	orr.w	r2, r3, #4
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr

080035ea <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035fa:	f023 0317 	bic.w	r3, r3, #23
 80035fe:	f043 0210 	orr.w	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d101      	bne.n	8003628 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003640:	2300      	movs	r3, #0
 8003642:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e17e      	b.n	8003954 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fd fcc5 	bl	8000ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff44 	bl	800350a <LL_ADC_IsInternalRegulatorEnabled>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d115      	bne.n	80036b4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff18 	bl	80034c2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003692:	4b9e      	ldr	r3, [pc, #632]	@ (800390c <HAL_ADC_Init+0x2d8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	099b      	lsrs	r3, r3, #6
 8003698:	4a9d      	ldr	r2, [pc, #628]	@ (8003910 <HAL_ADC_Init+0x2dc>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	099b      	lsrs	r3, r3, #6
 80036a0:	3301      	adds	r3, #1
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80036a6:	e002      	b.n	80036ae <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f9      	bne.n	80036a8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff26 	bl	800350a <LL_ADC_IsInternalRegulatorEnabled>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10d      	bne.n	80036e0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c8:	f043 0210 	orr.w	r2, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	f043 0201 	orr.w	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff93 	bl	8003610 <LL_ADC_REG_IsConversionOngoing>
 80036ea:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f040 8124 	bne.w	8003942 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f040 8120 	bne.w	8003942 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003706:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800370a:	f043 0202 	orr.w	r2, r3, #2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff ff30 	bl	800357c <LL_ADC_IsEnabled>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	f040 80a7 	bne.w	8003872 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	7e1b      	ldrb	r3, [r3, #24]
 800372c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800372e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7e5b      	ldrb	r3, [r3, #25]
 8003734:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003736:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7e9b      	ldrb	r3, [r3, #26]
 800373c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800373e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003744:	2a00      	cmp	r2, #0
 8003746:	d002      	beq.n	800374e <HAL_ADC_Init+0x11a>
 8003748:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800374c:	e000      	b.n	8003750 <HAL_ADC_Init+0x11c>
 800374e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003750:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003756:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	da04      	bge.n	800376a <HAL_ADC_Init+0x136>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003768:	e001      	b.n	800376e <HAL_ADC_Init+0x13a>
 800376a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 800376e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003776:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003778:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d114      	bne.n	80037b4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	7e9b      	ldrb	r3, [r3, #26]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e00b      	b.n	80037b4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ac:	f043 0201 	orr.w	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037c8:	4313      	orrs	r3, r2
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 80037da:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	69b9      	ldr	r1, [r7, #24]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037f4:	4313      	orrs	r3, r2
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003802:	2b01      	cmp	r3, #1
 8003804:	d111      	bne.n	800382a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003812:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003818:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800381e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	4b38      	ldr	r3, [pc, #224]	@ (8003914 <HAL_ADC_Init+0x2e0>)
 8003832:	4013      	ands	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	6979      	ldr	r1, [r7, #20]
 800383a:	430b      	orrs	r3, r1
 800383c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003846:	d014      	beq.n	8003872 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003850:	d00f      	beq.n	8003872 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800385a:	d00a      	beq.n	8003872 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800385c:	4b2e      	ldr	r3, [pc, #184]	@ (8003918 <HAL_ADC_Init+0x2e4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800386c:	492a      	ldr	r1, [pc, #168]	@ (8003918 <HAL_ADC_Init+0x2e4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387a:	461a      	mov	r2, r3
 800387c:	2100      	movs	r1, #0
 800387e:	f7ff fd76 	bl	800336e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388a:	461a      	mov	r2, r3
 800388c:	4923      	ldr	r1, [pc, #140]	@ (800391c <HAL_ADC_Init+0x2e8>)
 800388e:	f7ff fd6e 	bl	800336e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d108      	bne.n	80038ac <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f062 020f 	orn	r2, r2, #15
 80038a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80038aa:	e017      	b.n	80038dc <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038b4:	d112      	bne.n	80038dc <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	f003 031c 	and.w	r3, r3, #28
 80038c8:	f06f 020f 	mvn.w	r2, #15
 80038cc:	fa02 f103 	lsl.w	r1, r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fd61 	bl	80033aa <LL_ADC_GetSamplingTimeCommonChannels>
 80038e8:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d116      	bne.n	8003920 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	f023 0303 	bic.w	r3, r3, #3
 8003900:	f043 0201 	orr.w	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003908:	e023      	b.n	8003952 <HAL_ADC_Init+0x31e>
 800390a:	bf00      	nop
 800390c:	20000000 	.word	0x20000000
 8003910:	053e2d63 	.word	0x053e2d63
 8003914:	1ffffc02 	.word	0x1ffffc02
 8003918:	40012708 	.word	0x40012708
 800391c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003924:	f023 0312 	bic.w	r3, r3, #18
 8003928:	f043 0210 	orr.w	r2, r3, #16
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003940:	e007      	b.n	8003952 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003946:	f043 0210 	orr.w	r2, r3, #16
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003952:	7ffb      	ldrb	r3, [r7, #31]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3720      	adds	r7, #32
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07a      	b.n	8003a64 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003972:	f043 0202 	orr.w	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 face 	bl	8003f1c <ADC_ConversionStop>
 8003980:	4603      	mov	r3, r0
 8003982:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10f      	bne.n	80039aa <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fb92 	bl	80040b4 <ADC_Disable>
 8003990:	4603      	mov	r3, r0
 8003992:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fd9f 	bl	80034e8 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 80039b8:	f023 0303 	bic.w	r3, r3, #3
 80039bc:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f240 329f 	movw	r2, #927	@ 0x39f
 80039c6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68d9      	ldr	r1, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b26      	ldr	r3, [pc, #152]	@ (8003a6c <HAL_ADC_DeInit+0x110>)
 80039d4:	400b      	ands	r3, r1
 80039d6:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0207 	bic.w	r2, r2, #7
 80039e6:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a1a      	ldr	r2, [r3, #32]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003a04:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003a34:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003a36:	4b0e      	ldr	r3, [pc, #56]	@ (8003a70 <HAL_ADC_DeInit+0x114>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003a70 <HAL_ADC_DeInit+0x114>)
 8003a3c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003a40:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd fb04 	bl	8001050 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	833e0200 	.word	0x833e0200
 8003a70:	40012708 	.word	0x40012708

08003a74 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fdc5 	bl	8003610 <LL_ADC_REG_IsConversionOngoing>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d132      	bne.n	8003af2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_ADC_Start+0x26>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e02e      	b.n	8003af8 <HAL_ADC_Start+0x84>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa80 	bl	8003fa8 <ADC_Enable>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11a      	bne.n	8003ae8 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	221c      	movs	r2, #28
 8003ad2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fd6f 	bl	80035c4 <LL_ADC_REG_StartConversion>
 8003ae6:	e006      	b.n	8003af6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003af0:	e001      	b.n	8003af6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003af2:	2302      	movs	r3, #2
 8003af4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_Stop+0x16>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e022      	b.n	8003b5c <HAL_ADC_Stop+0x5c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f9fc 	bl	8003f1c <ADC_ConversionStop>
 8003b24:	4603      	mov	r3, r0
 8003b26:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d111      	bne.n	8003b52 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fac0 	bl	80040b4 <ADC_Disable>
 8003b34:	4603      	mov	r3, r0
 8003b36:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d102      	bne.n	8003b7c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003b76:	2308      	movs	r3, #8
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e010      	b.n	8003b9e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e077      	b.n	8003c8a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003b9e:	f7fe fca7 	bl	80024f0 <HAL_GetTick>
 8003ba2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ba4:	e021      	b.n	8003bea <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d01d      	beq.n	8003bea <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003bae:	f7fe fc9f 	bl	80024f0 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <HAL_ADC_PollForConversion+0x60>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d112      	bne.n	8003bea <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10b      	bne.n	8003bea <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd6:	f043 0204 	orr.w	r2, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e04f      	b.n	8003c8a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0d6      	beq.n	8003ba6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fbe6 	bl	80033da <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d031      	beq.n	8003c78 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7e9b      	ldrb	r3, [r3, #26]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d12d      	bne.n	8003c78 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d126      	bne.n	8003c78 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fcee 	bl	8003610 <LL_ADC_REG_IsConversionOngoing>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d112      	bne.n	8003c60 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 020c 	bic.w	r2, r2, #12
 8003c48:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	f043 0201 	orr.w	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c5e:	e00b      	b.n	8003c78 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c70:	f043 0201 	orr.w	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	7e1b      	ldrb	r3, [r3, #24]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d103      	bne.n	8003c88 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	220c      	movs	r2, #12
 8003c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x28>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e110      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x24a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fc95 	bl	8003610 <LL_ADC_REG_IsConversionOngoing>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 80f7 	bne.w	8003edc <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	f000 80b1 	beq.w	8003e5a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d00:	d004      	beq.n	8003d0c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d06:	4a7e      	ldr	r2, [pc, #504]	@ (8003f00 <HAL_ADC_ConfigChannel+0x254>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d108      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f7ff fb92 	bl	8003440 <LL_ADC_REG_SetSequencerChAdd>
 8003d1c:	e041      	b.n	8003da2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	210f      	movs	r1, #15
 8003d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	401a      	ands	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d105      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0xa0>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0e9b      	lsrs	r3, r3, #26
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	e011      	b.n	8003d70 <HAL_ADC_ConfigChannel+0xc4>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	fa93 f3a3 	rbit	r3, r3
 8003d58:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003d64:	2320      	movs	r3, #32
 8003d66:	e003      	b.n	8003d70 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	6839      	ldr	r1, [r7, #0]
 8003d72:	6849      	ldr	r1, [r1, #4]
 8003d74:	f001 011f 	and.w	r1, r1, #31
 8003d78:	408b      	lsls	r3, r1
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d808      	bhi.n	8003da2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f7ff fb2e 	bl	80033fe <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6819      	ldr	r1, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f7ff fb6b 	bl	800348a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f280 8097 	bge.w	8003eec <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dbe:	4851      	ldr	r0, [pc, #324]	@ (8003f04 <HAL_ADC_ConfigChannel+0x258>)
 8003dc0:	f7ff fac8 	bl	8003354 <LL_ADC_GetCommonPathInternalCh>
 8003dc4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a4f      	ldr	r2, [pc, #316]	@ (8003f08 <HAL_ADC_ConfigChannel+0x25c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d120      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d11b      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003de0:	4619      	mov	r1, r3
 8003de2:	4848      	ldr	r0, [pc, #288]	@ (8003f04 <HAL_ADC_ConfigChannel+0x258>)
 8003de4:	f7ff faa4 	bl	8003330 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003de8:	4b48      	ldr	r3, [pc, #288]	@ (8003f0c <HAL_ADC_ConfigChannel+0x260>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	099b      	lsrs	r3, r3, #6
 8003dee:	4a48      	ldr	r2, [pc, #288]	@ (8003f10 <HAL_ADC_ConfigChannel+0x264>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	099b      	lsrs	r3, r3, #6
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e02:	e002      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f9      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e10:	e06c      	b.n	8003eec <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a3f      	ldr	r2, [pc, #252]	@ (8003f14 <HAL_ADC_ConfigChannel+0x268>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10c      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d107      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4835      	ldr	r0, [pc, #212]	@ (8003f04 <HAL_ADC_ConfigChannel+0x258>)
 8003e30:	f7ff fa7e 	bl	8003330 <LL_ADC_SetCommonPathInternalCh>
 8003e34:	e05a      	b.n	8003eec <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a37      	ldr	r2, [pc, #220]	@ (8003f18 <HAL_ADC_ConfigChannel+0x26c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d155      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d150      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e50:	4619      	mov	r1, r3
 8003e52:	482c      	ldr	r0, [pc, #176]	@ (8003f04 <HAL_ADC_ConfigChannel+0x258>)
 8003e54:	f7ff fa6c 	bl	8003330 <LL_ADC_SetCommonPathInternalCh>
 8003e58:	e048      	b.n	8003eec <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e62:	d004      	beq.n	8003e6e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e68:	4a25      	ldr	r2, [pc, #148]	@ (8003f00 <HAL_ADC_ConfigChannel+0x254>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d107      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f7ff faf3 	bl	8003464 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	da32      	bge.n	8003eec <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e86:	481f      	ldr	r0, [pc, #124]	@ (8003f04 <HAL_ADC_ConfigChannel+0x258>)
 8003e88:	f7ff fa64 	bl	8003354 <LL_ADC_GetCommonPathInternalCh>
 8003e8c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1d      	ldr	r2, [pc, #116]	@ (8003f08 <HAL_ADC_ConfigChannel+0x25c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d107      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4818      	ldr	r0, [pc, #96]	@ (8003f04 <HAL_ADC_ConfigChannel+0x258>)
 8003ea2:	f7ff fa45 	bl	8003330 <LL_ADC_SetCommonPathInternalCh>
 8003ea6:	e021      	b.n	8003eec <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a19      	ldr	r2, [pc, #100]	@ (8003f14 <HAL_ADC_ConfigChannel+0x268>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d107      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4812      	ldr	r0, [pc, #72]	@ (8003f04 <HAL_ADC_ConfigChannel+0x258>)
 8003ebc:	f7ff fa38 	bl	8003330 <LL_ADC_SetCommonPathInternalCh>
 8003ec0:	e014      	b.n	8003eec <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a14      	ldr	r2, [pc, #80]	@ (8003f18 <HAL_ADC_ConfigChannel+0x26c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d10f      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	480b      	ldr	r0, [pc, #44]	@ (8003f04 <HAL_ADC_ConfigChannel+0x258>)
 8003ed6:	f7ff fa2b 	bl	8003330 <LL_ADC_SetCommonPathInternalCh>
 8003eda:	e007      	b.n	8003eec <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	80000004 	.word	0x80000004
 8003f04:	40012708 	.word	0x40012708
 8003f08:	b0001000 	.word	0xb0001000
 8003f0c:	20000000 	.word	0x20000000
 8003f10:	053e2d63 	.word	0x053e2d63
 8003f14:	b8004000 	.word	0xb8004000
 8003f18:	b4002000 	.word	0xb4002000

08003f1c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fb71 	bl	8003610 <LL_ADC_REG_IsConversionOngoing>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d033      	beq.n	8003f9c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fb31 	bl	80035a0 <LL_ADC_IsDisableOngoing>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d104      	bne.n	8003f4e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fb4e 	bl	80035ea <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f4e:	f7fe facf 	bl	80024f0 <HAL_GetTick>
 8003f52:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003f54:	e01b      	b.n	8003f8e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f56:	f7fe facb 	bl	80024f0 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d914      	bls.n	8003f8e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00d      	beq.n	8003f8e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f76:	f043 0210 	orr.w	r2, r3, #16
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e007      	b.n	8003f9e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1dc      	bne.n	8003f56 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fadf 	bl	800357c <LL_ADC_IsEnabled>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d169      	bne.n	8004098 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	4b36      	ldr	r3, [pc, #216]	@ (80040a4 <ADC_Enable+0xfc>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd6:	f043 0210 	orr.w	r2, r3, #16
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe2:	f043 0201 	orr.w	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e055      	b.n	800409a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fa9c 	bl	8003530 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003ff8:	482b      	ldr	r0, [pc, #172]	@ (80040a8 <ADC_Enable+0x100>)
 8003ffa:	f7ff f9ab 	bl	8003354 <LL_ADC_GetCommonPathInternalCh>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00f      	beq.n	8004028 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004008:	4b28      	ldr	r3, [pc, #160]	@ (80040ac <ADC_Enable+0x104>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	4a28      	ldr	r2, [pc, #160]	@ (80040b0 <ADC_Enable+0x108>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004018:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800401a:	e002      	b.n	8004022 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	3b01      	subs	r3, #1
 8004020:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1f9      	bne.n	800401c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	7e5b      	ldrb	r3, [r3, #25]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d033      	beq.n	8004098 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004030:	f7fe fa5e 	bl	80024f0 <HAL_GetTick>
 8004034:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004036:	e028      	b.n	800408a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fa9d 	bl	800357c <LL_ADC_IsEnabled>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fa6f 	bl	8003530 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004052:	f7fe fa4d 	bl	80024f0 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d914      	bls.n	800408a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d00d      	beq.n	800408a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004072:	f043 0210 	orr.w	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407e:	f043 0201 	orr.w	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e007      	b.n	800409a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b01      	cmp	r3, #1
 8004096:	d1cf      	bne.n	8004038 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	80000017 	.word	0x80000017
 80040a8:	40012708 	.word	0x40012708
 80040ac:	20000000 	.word	0x20000000
 80040b0:	053e2d63 	.word	0x053e2d63

080040b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fa6d 	bl	80035a0 <LL_ADC_IsDisableOngoing>
 80040c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fa55 	bl	800357c <LL_ADC_IsEnabled>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d047      	beq.n	8004168 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d144      	bne.n	8004168 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0305 	and.w	r3, r3, #5
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d10c      	bne.n	8004106 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fa30 	bl	8003556 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2203      	movs	r2, #3
 80040fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040fe:	f7fe f9f7 	bl	80024f0 <HAL_GetTick>
 8004102:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004104:	e029      	b.n	800415a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410a:	f043 0210 	orr.w	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004116:	f043 0201 	orr.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e023      	b.n	800416a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004122:	f7fe f9e5 	bl	80024f0 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d914      	bls.n	800415a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	f043 0210 	orr.w	r2, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414e:	f043 0201 	orr.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e007      	b.n	800416a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1dc      	bne.n	8004122 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <LL_ADC_SetCalibrationFactor>:
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004182:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <LL_ADC_GetCalibrationFactor>:
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr

080041b6 <LL_ADC_Enable>:
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041c6:	f023 0317 	bic.w	r3, r3, #23
 80041ca:	f043 0201 	orr.w	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	609a      	str	r2, [r3, #8]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <LL_ADC_Disable>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041ec:	f023 0317 	bic.w	r3, r3, #23
 80041f0:	f043 0202 	orr.w	r2, r3, #2
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <LL_ADC_IsEnabled>:
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <LL_ADC_IsEnabled+0x18>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <LL_ADC_IsEnabled+0x1a>
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <LL_ADC_StartCalibration>:
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004236:	f023 0317 	bic.w	r3, r3, #23
 800423a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	609a      	str	r2, [r3, #8]
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <LL_ADC_IsCalibrationOnGoing>:
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800425c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004260:	d101      	bne.n	8004266 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr

08004272 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b088      	sub	sp, #32
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_ADCEx_Calibration_Start+0x1e>
 800428c:	2302      	movs	r3, #2
 800428e:	e0b9      	b.n	8004404 <HAL_ADCEx_Calibration_Start+0x192>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff ff0b 	bl	80040b4 <ADC_Disable>
 800429e:	4603      	mov	r3, r0
 80042a0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff ffab 	bl	8004202 <LL_ADC_IsEnabled>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f040 809d 	bne.w	80043ee <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80042bc:	f043 0202 	orr.w	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	f248 0303 	movw	r3, #32771	@ 0x8003
 80042ce:	4013      	ands	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80042e0:	f023 0303 	bic.w	r3, r3, #3
 80042e4:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	e02e      	b.n	800434a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ff98 	bl	8004226 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042f6:	e014      	b.n	8004322 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	3301      	adds	r3, #1
 80042fc:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004304:	d30d      	bcc.n	8004322 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430a:	f023 0312 	bic.w	r3, r3, #18
 800430e:	f043 0210 	orr.w	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e070      	b.n	8004404 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff ff90 	bl	800424c <LL_ADC_IsCalibrationOnGoing>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e2      	bne.n	80042f8 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff ff2f 	bl	800419a <LL_ADC_GetCalibrationFactor>
 800433c:	4602      	mov	r2, r0
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4413      	add	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3301      	adds	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	2b07      	cmp	r3, #7
 800434e:	d9cd      	bls.n	80042ec <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff ff29 	bl	80041b6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff ff01 	bl	8004172 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ff31 	bl	80041dc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800437a:	f7fe f8b9 	bl	80024f0 <HAL_GetTick>
 800437e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004380:	e01c      	b.n	80043bc <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004382:	f7fe f8b5 	bl	80024f0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d915      	bls.n	80043bc <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff34 	bl	8004202 <LL_ADC_IsEnabled>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00d      	beq.n	80043bc <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a4:	f043 0210 	orr.w	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b0:	f043 0201 	orr.w	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e023      	b.n	8004404 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff1e 	bl	8004202 <LL_ADC_IsEnabled>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1da      	bne.n	8004382 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68d9      	ldr	r1, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	430a      	orrs	r2, r1
 80043da:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e0:	f023 0303 	bic.w	r3, r3, #3
 80043e4:	f043 0201 	orr.w	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80043ec:	e005      	b.n	80043fa <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f2:	f043 0210 	orr.w	r2, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004402:	7dfb      	ldrb	r3, [r7, #23]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800441c:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <__NVIC_SetPriorityGrouping+0x44>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004428:	4013      	ands	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800443c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800443e:	4a04      	ldr	r2, [pc, #16]	@ (8004450 <__NVIC_SetPriorityGrouping+0x44>)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	60d3      	str	r3, [r2, #12]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	e000ed00 	.word	0xe000ed00

08004454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004458:	4b04      	ldr	r3, [pc, #16]	@ (800446c <__NVIC_GetPriorityGrouping+0x18>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	0a1b      	lsrs	r3, r3, #8
 800445e:	f003 0307 	and.w	r3, r3, #7
}
 8004462:	4618      	mov	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000ed00 	.word	0xe000ed00

08004470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	2b00      	cmp	r3, #0
 8004480:	db0b      	blt.n	800449a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	f003 021f 	and.w	r2, r3, #31
 8004488:	4906      	ldr	r1, [pc, #24]	@ (80044a4 <__NVIC_EnableIRQ+0x34>)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2001      	movs	r0, #1
 8004492:	fa00 f202 	lsl.w	r2, r0, r2
 8004496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	e000e100 	.word	0xe000e100

080044a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	db12      	blt.n	80044e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	f003 021f 	and.w	r2, r3, #31
 80044c0:	490a      	ldr	r1, [pc, #40]	@ (80044ec <__NVIC_DisableIRQ+0x44>)
 80044c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2001      	movs	r0, #1
 80044ca:	fa00 f202 	lsl.w	r2, r0, r2
 80044ce:	3320      	adds	r3, #32
 80044d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80044d4:	f3bf 8f4f 	dsb	sy
}
 80044d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044da:	f3bf 8f6f 	isb	sy
}
 80044de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	e000e100 	.word	0xe000e100

080044f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	6039      	str	r1, [r7, #0]
 80044fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004500:	2b00      	cmp	r3, #0
 8004502:	db0a      	blt.n	800451a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	490c      	ldr	r1, [pc, #48]	@ (800453c <__NVIC_SetPriority+0x4c>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	0112      	lsls	r2, r2, #4
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	440b      	add	r3, r1
 8004514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004518:	e00a      	b.n	8004530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4908      	ldr	r1, [pc, #32]	@ (8004540 <__NVIC_SetPriority+0x50>)
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	3b04      	subs	r3, #4
 8004528:	0112      	lsls	r2, r2, #4
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	440b      	add	r3, r1
 800452e:	761a      	strb	r2, [r3, #24]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	e000e100 	.word	0xe000e100
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	@ 0x24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f1c3 0307 	rsb	r3, r3, #7
 800455e:	2b04      	cmp	r3, #4
 8004560:	bf28      	it	cs
 8004562:	2304      	movcs	r3, #4
 8004564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3304      	adds	r3, #4
 800456a:	2b06      	cmp	r3, #6
 800456c:	d902      	bls.n	8004574 <NVIC_EncodePriority+0x30>
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3b03      	subs	r3, #3
 8004572:	e000      	b.n	8004576 <NVIC_EncodePriority+0x32>
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004578:	f04f 32ff 	mov.w	r2, #4294967295
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43da      	mvns	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	401a      	ands	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800458c:	f04f 31ff 	mov.w	r1, #4294967295
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	43d9      	mvns	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800459c:	4313      	orrs	r3, r2
         );
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3724      	adds	r7, #36	@ 0x24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff ff2b 	bl	800440c <__NVIC_SetPriorityGrouping>
}
 80045b6:	bf00      	nop
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b086      	sub	sp, #24
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	4603      	mov	r3, r0
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
 80045ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045cc:	f7ff ff42 	bl	8004454 <__NVIC_GetPriorityGrouping>
 80045d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	6978      	ldr	r0, [r7, #20]
 80045d8:	f7ff ffb4 	bl	8004544 <NVIC_EncodePriority>
 80045dc:	4602      	mov	r2, r0
 80045de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045e2:	4611      	mov	r1, r2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ff83 	bl	80044f0 <__NVIC_SetPriority>
}
 80045ea:	bf00      	nop
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	4603      	mov	r3, r0
 80045fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff ff35 	bl	8004470 <__NVIC_EnableIRQ>
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	4603      	mov	r3, r0
 8004616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff ff43 	bl	80044a8 <__NVIC_DisableIRQ>
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e08e      	b.n	800475c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	4b47      	ldr	r3, [pc, #284]	@ (8004764 <HAL_DMA_Init+0x138>)
 8004646:	429a      	cmp	r2, r3
 8004648:	d80f      	bhi.n	800466a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	4b45      	ldr	r3, [pc, #276]	@ (8004768 <HAL_DMA_Init+0x13c>)
 8004652:	4413      	add	r3, r2
 8004654:	4a45      	ldr	r2, [pc, #276]	@ (800476c <HAL_DMA_Init+0x140>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	009a      	lsls	r2, r3, #2
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a42      	ldr	r2, [pc, #264]	@ (8004770 <HAL_DMA_Init+0x144>)
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40
 8004668:	e00e      	b.n	8004688 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	4b40      	ldr	r3, [pc, #256]	@ (8004774 <HAL_DMA_Init+0x148>)
 8004672:	4413      	add	r3, r2
 8004674:	4a3d      	ldr	r2, [pc, #244]	@ (800476c <HAL_DMA_Init+0x140>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	009a      	lsls	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a3c      	ldr	r2, [pc, #240]	@ (8004778 <HAL_DMA_Init+0x14c>)
 8004686:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800469e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fb24 	bl	8004d28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046e8:	d102      	bne.n	80046f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004706:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d010      	beq.n	8004732 <HAL_DMA_Init+0x106>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d80c      	bhi.n	8004732 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fb4d 	bl	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	e008      	b.n	8004744 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40020407 	.word	0x40020407
 8004768:	bffdfff8 	.word	0xbffdfff8
 800476c:	cccccccd 	.word	0xcccccccd
 8004770:	40020000 	.word	0x40020000
 8004774:	bffdfbf8 	.word	0xbffdfbf8
 8004778:	40020400 	.word	0x40020400

0800477c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e07b      	b.n	8004886 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0201 	bic.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004890 <HAL_DMA_DeInit+0x114>)
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d80f      	bhi.n	80047ca <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	4b38      	ldr	r3, [pc, #224]	@ (8004894 <HAL_DMA_DeInit+0x118>)
 80047b2:	4413      	add	r3, r2
 80047b4:	4a38      	ldr	r2, [pc, #224]	@ (8004898 <HAL_DMA_DeInit+0x11c>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	091b      	lsrs	r3, r3, #4
 80047bc:	009a      	lsls	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a35      	ldr	r2, [pc, #212]	@ (800489c <HAL_DMA_DeInit+0x120>)
 80047c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80047c8:	e00e      	b.n	80047e8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	4b33      	ldr	r3, [pc, #204]	@ (80048a0 <HAL_DMA_DeInit+0x124>)
 80047d2:	4413      	add	r3, r2
 80047d4:	4a30      	ldr	r2, [pc, #192]	@ (8004898 <HAL_DMA_DeInit+0x11c>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	091b      	lsrs	r3, r3, #4
 80047dc:	009a      	lsls	r2, r3, #2
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a2f      	ldr	r2, [pc, #188]	@ (80048a4 <HAL_DMA_DeInit+0x128>)
 80047e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f4:	f003 021c 	and.w	r2, r3, #28
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	2101      	movs	r1, #1
 80047fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004802:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fa8f 	bl	8004d28 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800481a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00f      	beq.n	8004844 <HAL_DMA_DeInit+0xc8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b04      	cmp	r3, #4
 800482a:	d80b      	bhi.n	8004844 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fac3 	bl	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004842:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40020407 	.word	0x40020407
 8004894:	bffdfff8 	.word	0xbffdfff8
 8004898:	cccccccd 	.word	0xcccccccd
 800489c:	40020000 	.word	0x40020000
 80048a0:	bffdfbf8 	.word	0xbffdfbf8
 80048a4:	40020400 	.word	0x40020400

080048a8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_DMA_Start_IT+0x20>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e069      	b.n	800499c <HAL_DMA_Start_IT+0xf4>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d155      	bne.n	8004988 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0201 	bic.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f9d3 	bl	8004cac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 020e 	orr.w	r2, r2, #14
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e00f      	b.n	8004940 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0204 	bic.w	r2, r2, #4
 800492e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 020a 	orr.w	r2, r2, #10
 800493e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004958:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800495c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004970:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004974:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	e008      	b.n	800499a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2280      	movs	r2, #128	@ 0x80
 800498c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800499a:	7dfb      	ldrb	r3, [r7, #23]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e04f      	b.n	8004a56 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d008      	beq.n	80049d4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2204      	movs	r2, #4
 80049c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e040      	b.n	8004a56 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 020e 	bic.w	r2, r2, #14
 80049e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a08:	f003 021c 	and.w	r2, r3, #28
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f202 	lsl.w	r2, r1, r2
 8004a16:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d005      	beq.n	8004a84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	e047      	b.n	8004b14 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 020e 	bic.w	r2, r2, #14
 8004a92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab8:	f003 021c 	and.w	r2, r3, #28
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ad0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00c      	beq.n	8004af4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ae8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004af2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	4798      	blx	r3
    }
  }
  return status;
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3c:	f003 031c 	and.w	r3, r3, #28
 8004b40:	2204      	movs	r2, #4
 8004b42:	409a      	lsls	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d027      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x7c>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d022      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d107      	bne.n	8004b74 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0204 	bic.w	r2, r2, #4
 8004b72:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b78:	f003 021c 	and.w	r2, r3, #28
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b80:	2104      	movs	r1, #4
 8004b82:	fa01 f202 	lsl.w	r2, r1, r2
 8004b86:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8081 	beq.w	8004c94 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004b9a:	e07b      	b.n	8004c94 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba0:	f003 031c 	and.w	r3, r3, #28
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d03d      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x10c>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d038      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10b      	bne.n	8004be0 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 020a 	bic.w	r2, r2, #10
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	4b2e      	ldr	r3, [pc, #184]	@ (8004ca0 <HAL_DMA_IRQHandler+0x180>)
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d909      	bls.n	8004c00 <HAL_DMA_IRQHandler+0xe0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf0:	f003 031c 	and.w	r3, r3, #28
 8004bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8004ca4 <HAL_DMA_IRQHandler+0x184>)
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	6053      	str	r3, [r2, #4]
 8004bfe:	e008      	b.n	8004c12 <HAL_DMA_IRQHandler+0xf2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c04:	f003 031c 	and.w	r3, r3, #28
 8004c08:	4a27      	ldr	r2, [pc, #156]	@ (8004ca8 <HAL_DMA_IRQHandler+0x188>)
 8004c0a:	2102      	movs	r1, #2
 8004c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c10:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d038      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004c2a:	e033      	b.n	8004c94 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c30:	f003 031c 	and.w	r3, r3, #28
 8004c34:	2208      	movs	r2, #8
 8004c36:	409a      	lsls	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d02a      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x176>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d025      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 020e 	bic.w	r2, r2, #14
 8004c58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5e:	f003 021c 	and.w	r2, r3, #28
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	2101      	movs	r1, #1
 8004c68:	fa01 f202 	lsl.w	r2, r1, r2
 8004c6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d004      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
}
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40020080 	.word	0x40020080
 8004ca4:	40020400 	.word	0x40020400
 8004ca8:	40020000 	.word	0x40020000

08004cac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cc2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004cd4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cda:	f003 021c 	and.w	r2, r3, #28
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d108      	bne.n	8004d0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d0a:	e007      	b.n	8004d1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	60da      	str	r2, [r3, #12]
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr
	...

08004d28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	4b1c      	ldr	r3, [pc, #112]	@ (8004da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d813      	bhi.n	8004d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d40:	089b      	lsrs	r3, r3, #2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d48:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	3b08      	subs	r3, #8
 8004d58:	4a14      	ldr	r2, [pc, #80]	@ (8004dac <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	091b      	lsrs	r3, r3, #4
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	e011      	b.n	8004d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d68:	089b      	lsrs	r3, r3, #2
 8004d6a:	009a      	lsls	r2, r3, #2
 8004d6c:	4b10      	ldr	r3, [pc, #64]	@ (8004db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004d6e:	4413      	add	r3, r2
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	3b08      	subs	r3, #8
 8004d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8004dac <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	3307      	adds	r3, #7
 8004d86:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004d8c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	2201      	movs	r2, #1
 8004d96:	409a      	lsls	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40020407 	.word	0x40020407
 8004dac:	cccccccd 	.word	0xcccccccd
 8004db0:	4002081c 	.word	0x4002081c
 8004db4:	40020880 	.word	0x40020880

08004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a08      	ldr	r2, [pc, #32]	@ (8004dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ddc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2201      	movs	r2, #1
 8004de8:	409a      	lsls	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	1000823f 	.word	0x1000823f
 8004dfc:	40020940 	.word	0x40020940

08004e00 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004e80 <HAL_FLASH_Program+0x80>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_FLASH_Program+0x1a>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e02d      	b.n	8004e76 <HAL_FLASH_Program+0x76>
 8004e1a:	4b19      	ldr	r3, [pc, #100]	@ (8004e80 <HAL_FLASH_Program+0x80>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e20:	4b17      	ldr	r3, [pc, #92]	@ (8004e80 <HAL_FLASH_Program+0x80>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e2a:	f000 f869 	bl	8004f00 <FLASH_WaitForLastOperation>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11a      	bne.n	8004e6e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d105      	bne.n	8004e4a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e42:	68b8      	ldr	r0, [r7, #8]
 8004e44:	f000 f8be 	bl	8004fc4 <FLASH_Program_DoubleWord>
 8004e48:	e004      	b.n	8004e54 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68b8      	ldr	r0, [r7, #8]
 8004e50:	f000 f8de 	bl	8005010 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e58:	f000 f852 	bl	8004f00 <FLASH_WaitForLastOperation>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004e60:	4b08      	ldr	r3, [pc, #32]	@ (8004e84 <HAL_FLASH_Program+0x84>)
 8004e62:	695a      	ldr	r2, [r3, #20]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	43db      	mvns	r3, r3
 8004e68:	4906      	ldr	r1, [pc, #24]	@ (8004e84 <HAL_FLASH_Program+0x84>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004e6e:	4b04      	ldr	r3, [pc, #16]	@ (8004e80 <HAL_FLASH_Program+0x80>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000520 	.word	0x20000520
 8004e84:	58004000 	.word	0x58004000

08004e88 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004e92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <HAL_FLASH_Unlock+0x38>)
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da0b      	bge.n	8004eb2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004e9a:	4b09      	ldr	r3, [pc, #36]	@ (8004ec0 <HAL_FLASH_Unlock+0x38>)
 8004e9c:	4a09      	ldr	r2, [pc, #36]	@ (8004ec4 <HAL_FLASH_Unlock+0x3c>)
 8004e9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004ea0:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <HAL_FLASH_Unlock+0x38>)
 8004ea2:	4a09      	ldr	r2, [pc, #36]	@ (8004ec8 <HAL_FLASH_Unlock+0x40>)
 8004ea4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004ea6:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <HAL_FLASH_Unlock+0x38>)
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	da01      	bge.n	8004eb2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	58004000 	.word	0x58004000
 8004ec4:	45670123 	.word	0x45670123
 8004ec8:	cdef89ab 	.word	0xcdef89ab

08004ecc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004ed6:	4b09      	ldr	r3, [pc, #36]	@ (8004efc <HAL_FLASH_Lock+0x30>)
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	4a08      	ldr	r2, [pc, #32]	@ (8004efc <HAL_FLASH_Lock+0x30>)
 8004edc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ee0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004ee2:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <HAL_FLASH_Lock+0x30>)
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	db01      	blt.n	8004eee <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004eee:	79fb      	ldrb	r3, [r7, #7]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	58004000 	.word	0x58004000

08004f00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004f08:	f7fd faf2 	bl	80024f0 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004f0e:	e009      	b.n	8004f24 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004f10:	f7fd faee 	bl	80024f0 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d801      	bhi.n	8004f24 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e046      	b.n	8004fb2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004f24:	4b25      	ldr	r3, [pc, #148]	@ (8004fbc <FLASH_WaitForLastOperation+0xbc>)
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f30:	d0ee      	beq.n	8004f10 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004f32:	4b22      	ldr	r3, [pc, #136]	@ (8004fbc <FLASH_WaitForLastOperation+0xbc>)
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004f42:	4b1e      	ldr	r3, [pc, #120]	@ (8004fbc <FLASH_WaitForLastOperation+0xbc>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004f4e:	4013      	ands	r3, r2
 8004f50:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f58:	d307      	bcc.n	8004f6a <FLASH_WaitForLastOperation+0x6a>
 8004f5a:	4b18      	ldr	r3, [pc, #96]	@ (8004fbc <FLASH_WaitForLastOperation+0xbc>)
 8004f5c:	699a      	ldr	r2, [r3, #24]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004f64:	4915      	ldr	r1, [pc, #84]	@ (8004fbc <FLASH_WaitForLastOperation+0xbc>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	618b      	str	r3, [r1, #24]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <FLASH_WaitForLastOperation+0x7e>
 8004f74:	4a11      	ldr	r2, [pc, #68]	@ (8004fbc <FLASH_WaitForLastOperation+0xbc>)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004f7c:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00e      	beq.n	8004fa2 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004f84:	4a0e      	ldr	r2, [pc, #56]	@ (8004fc0 <FLASH_WaitForLastOperation+0xc0>)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e011      	b.n	8004fb2 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004f8e:	f7fd faaf 	bl	80024f0 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d801      	bhi.n	8004fa2 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e007      	b.n	8004fb2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004fa2:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <FLASH_WaitForLastOperation+0xbc>)
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004faa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fae:	d0ee      	beq.n	8004f8e <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	58004000 	.word	0x58004000
 8004fc0:	20000520 	.word	0x20000520

08004fc4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800500c <FLASH_Program_DoubleWord+0x48>)
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800500c <FLASH_Program_DoubleWord+0x48>)
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004fe2:	f3bf 8f6f 	isb	sy
}
 8004fe6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	000a      	movs	r2, r1
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	68f9      	ldr	r1, [r7, #12]
 8004ffa:	3104      	adds	r1, #4
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	600b      	str	r3, [r1, #0]
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	58004000 	.word	0x58004000

08005010 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005010:	b480      	push	{r7}
 8005012:	b089      	sub	sp, #36	@ 0x24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800501a:	2340      	movs	r3, #64	@ 0x40
 800501c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005026:	4b18      	ldr	r3, [pc, #96]	@ (8005088 <FLASH_Program_Fast+0x78>)
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	4a17      	ldr	r2, [pc, #92]	@ (8005088 <FLASH_Program_Fast+0x78>)
 800502c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005030:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005032:	f3ef 8310 	mrs	r3, PRIMASK
 8005036:	60fb      	str	r3, [r7, #12]
  return(result);
 8005038:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800503a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800503c:	b672      	cpsid	i
}
 800503e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	3304      	adds	r3, #4
 800504c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	3304      	adds	r3, #4
 8005052:	617b      	str	r3, [r7, #20]
    row_index--;
 8005054:	7ffb      	ldrb	r3, [r7, #31]
 8005056:	3b01      	subs	r3, #1
 8005058:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800505a:	7ffb      	ldrb	r3, [r7, #31]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1ef      	bne.n	8005040 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005060:	bf00      	nop
 8005062:	4b09      	ldr	r3, [pc, #36]	@ (8005088 <FLASH_Program_Fast+0x78>)
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800506a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506e:	d0f8      	beq.n	8005062 <FLASH_Program_Fast+0x52>
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f383 8810 	msr	PRIMASK, r3
}
 800507a:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800507c:	bf00      	nop
 800507e:	3724      	adds	r7, #36	@ 0x24
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	58004000 	.word	0x58004000

0800508c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005096:	4b28      	ldr	r3, [pc, #160]	@ (8005138 <HAL_FLASHEx_Erase+0xac>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_FLASHEx_Erase+0x16>
 800509e:	2302      	movs	r3, #2
 80050a0:	e046      	b.n	8005130 <HAL_FLASHEx_Erase+0xa4>
 80050a2:	4b25      	ldr	r3, [pc, #148]	@ (8005138 <HAL_FLASHEx_Erase+0xac>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80050a8:	4b23      	ldr	r3, [pc, #140]	@ (8005138 <HAL_FLASHEx_Erase+0xac>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80050ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80050b2:	f7ff ff25 	bl	8004f00 <FLASH_WaitForLastOperation>
 80050b6:	4603      	mov	r3, r0
 80050b8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d133      	bne.n	8005128 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d108      	bne.n	80050da <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80050c8:	f000 f838 	bl	800513c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80050cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80050d0:	f7ff ff16 	bl	8004f00 <FLASH_WaitForLastOperation>
 80050d4:	4603      	mov	r3, r0
 80050d6:	73fb      	strb	r3, [r7, #15]
 80050d8:	e024      	b.n	8005124 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	f04f 32ff 	mov.w	r2, #4294967295
 80050e0:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60bb      	str	r3, [r7, #8]
 80050e8:	e012      	b.n	8005110 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80050ea:	68b8      	ldr	r0, [r7, #8]
 80050ec:	f000 f836 	bl	800515c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80050f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80050f4:	f7ff ff04 	bl	8004f00 <FLASH_WaitForLastOperation>
 80050f8:	4603      	mov	r3, r0
 80050fa:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	601a      	str	r2, [r3, #0]
          break;
 8005108:	e00a      	b.n	8005120 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	3301      	adds	r3, #1
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	4413      	add	r3, r2
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	429a      	cmp	r2, r3
 800511e:	d3e4      	bcc.n	80050ea <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005120:	f000 f878 	bl	8005214 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005124:	f000 f832 	bl	800518c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005128:	4b03      	ldr	r3, [pc, #12]	@ (8005138 <HAL_FLASHEx_Erase+0xac>)
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]

  return status;
 800512e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000520 	.word	0x20000520

0800513c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005140:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <FLASH_MassErase+0x1c>)
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	4a04      	ldr	r2, [pc, #16]	@ (8005158 <FLASH_MassErase+0x1c>)
 8005146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800514a:	f043 0304 	orr.w	r3, r3, #4
 800514e:	6153      	str	r3, [r2, #20]
#endif
}
 8005150:	bf00      	nop
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr
 8005158:	58004000 	.word	0x58004000

0800515c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005164:	4b08      	ldr	r3, [pc, #32]	@ (8005188 <FLASH_PageErase+0x2c>)
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4313      	orrs	r3, r2
 8005172:	4a05      	ldr	r2, [pc, #20]	@ (8005188 <FLASH_PageErase+0x2c>)
 8005174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005178:	f043 0302 	orr.w	r3, r3, #2
 800517c:	6153      	str	r3, [r2, #20]
#endif
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr
 8005188:	58004000 	.word	0x58004000

0800518c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005190:	4b1f      	ldr	r3, [pc, #124]	@ (8005210 <FLASH_FlushCaches+0x84>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005198:	2b01      	cmp	r3, #1
 800519a:	d117      	bne.n	80051cc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800519c:	4b1c      	ldr	r3, [pc, #112]	@ (8005210 <FLASH_FlushCaches+0x84>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051a2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051a6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80051a8:	4b19      	ldr	r3, [pc, #100]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a18      	ldr	r2, [pc, #96]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4b16      	ldr	r3, [pc, #88]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a15      	ldr	r2, [pc, #84]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051be:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051c0:	4b13      	ldr	r3, [pc, #76]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a12      	ldr	r2, [pc, #72]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051ca:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80051cc:	4b10      	ldr	r3, [pc, #64]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d117      	bne.n	8005208 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80051d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051e2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80051e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a09      	ldr	r2, [pc, #36]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	4b07      	ldr	r3, [pc, #28]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a06      	ldr	r2, [pc, #24]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051fa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80051fc:	4b04      	ldr	r3, [pc, #16]	@ (8005210 <FLASH_FlushCaches+0x84>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a03      	ldr	r2, [pc, #12]	@ (8005210 <FLASH_FlushCaches+0x84>)
 8005202:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005206:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005208:	bf00      	nop
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr
 8005210:	58004000 	.word	0x58004000

08005214 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005218:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <FLASH_AcknowledgePageErase+0x1c>)
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	4a04      	ldr	r2, [pc, #16]	@ (8005230 <FLASH_AcknowledgePageErase+0x1c>)
 800521e:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8005222:	f023 0302 	bic.w	r3, r3, #2
 8005226:	6153      	str	r3, [r2, #20]
#endif
}
 8005228:	bf00      	nop
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr
 8005230:	58004000 	.word	0x58004000

08005234 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005242:	e140      	b.n	80054c6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	2101      	movs	r1, #1
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	fa01 f303 	lsl.w	r3, r1, r3
 8005250:	4013      	ands	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 8132 	beq.w	80054c0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	2b01      	cmp	r3, #1
 8005266:	d005      	beq.n	8005274 <HAL_GPIO_Init+0x40>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d130      	bne.n	80052d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	2203      	movs	r2, #3
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	43db      	mvns	r3, r3
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4013      	ands	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052aa:	2201      	movs	r2, #1
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	43db      	mvns	r3, r3
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4013      	ands	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	f003 0201 	and.w	r2, r3, #1
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d017      	beq.n	8005312 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	2203      	movs	r2, #3
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	43db      	mvns	r3, r3
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4013      	ands	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d123      	bne.n	8005366 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	08da      	lsrs	r2, r3, #3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3208      	adds	r2, #8
 8005326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	220f      	movs	r2, #15
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43db      	mvns	r3, r3
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4013      	ands	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	08da      	lsrs	r2, r3, #3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3208      	adds	r2, #8
 8005360:	6939      	ldr	r1, [r7, #16]
 8005362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	2203      	movs	r2, #3
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43db      	mvns	r3, r3
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4013      	ands	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f003 0203 	and.w	r2, r3, #3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 808c 	beq.w	80054c0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80053a8:	4a4e      	ldr	r2, [pc, #312]	@ (80054e4 <HAL_GPIO_Init+0x2b0>)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	089b      	lsrs	r3, r3, #2
 80053ae:	3302      	adds	r3, #2
 80053b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	2207      	movs	r2, #7
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	43db      	mvns	r3, r3
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4013      	ands	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80053d2:	d00d      	beq.n	80053f0 <HAL_GPIO_Init+0x1bc>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a44      	ldr	r2, [pc, #272]	@ (80054e8 <HAL_GPIO_Init+0x2b4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <HAL_GPIO_Init+0x1b8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a43      	ldr	r2, [pc, #268]	@ (80054ec <HAL_GPIO_Init+0x2b8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d101      	bne.n	80053e8 <HAL_GPIO_Init+0x1b4>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e004      	b.n	80053f2 <HAL_GPIO_Init+0x1be>
 80053e8:	2307      	movs	r3, #7
 80053ea:	e002      	b.n	80053f2 <HAL_GPIO_Init+0x1be>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <HAL_GPIO_Init+0x1be>
 80053f0:	2300      	movs	r3, #0
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	f002 0203 	and.w	r2, r2, #3
 80053f8:	0092      	lsls	r2, r2, #2
 80053fa:	4093      	lsls	r3, r2
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005402:	4938      	ldr	r1, [pc, #224]	@ (80054e4 <HAL_GPIO_Init+0x2b0>)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	3302      	adds	r3, #2
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005410:	4b37      	ldr	r3, [pc, #220]	@ (80054f0 <HAL_GPIO_Init+0x2bc>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	43db      	mvns	r3, r3
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4013      	ands	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005434:	4a2e      	ldr	r2, [pc, #184]	@ (80054f0 <HAL_GPIO_Init+0x2bc>)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800543a:	4b2d      	ldr	r3, [pc, #180]	@ (80054f0 <HAL_GPIO_Init+0x2bc>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	43db      	mvns	r3, r3
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4013      	ands	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800545e:	4a24      	ldr	r2, [pc, #144]	@ (80054f0 <HAL_GPIO_Init+0x2bc>)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005464:	4b22      	ldr	r3, [pc, #136]	@ (80054f0 <HAL_GPIO_Init+0x2bc>)
 8005466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800546a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	43db      	mvns	r3, r3
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4013      	ands	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800548a:	4a19      	ldr	r2, [pc, #100]	@ (80054f0 <HAL_GPIO_Init+0x2bc>)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005492:	4b17      	ldr	r3, [pc, #92]	@ (80054f0 <HAL_GPIO_Init+0x2bc>)
 8005494:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005498:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	43db      	mvns	r3, r3
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4013      	ands	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80054b8:	4a0d      	ldr	r2, [pc, #52]	@ (80054f0 <HAL_GPIO_Init+0x2bc>)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	3301      	adds	r3, #1
 80054c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f47f aeb7 	bne.w	8005244 <HAL_GPIO_Init+0x10>
  }
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40010000 	.word	0x40010000
 80054e8:	48000400 	.word	0x48000400
 80054ec:	48000800 	.word	0x48000800
 80054f0:	58000800 	.word	0x58000800

080054f4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005502:	e0af      	b.n	8005664 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005504:	2201      	movs	r2, #1
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	4013      	ands	r3, r2
 8005510:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80a2 	beq.w	800565e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800551a:	4a59      	ldr	r2, [pc, #356]	@ (8005680 <HAL_GPIO_DeInit+0x18c>)
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	089b      	lsrs	r3, r3, #2
 8005520:	3302      	adds	r3, #2
 8005522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005526:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	2207      	movs	r2, #7
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4013      	ands	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005542:	d00d      	beq.n	8005560 <HAL_GPIO_DeInit+0x6c>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a4f      	ldr	r2, [pc, #316]	@ (8005684 <HAL_GPIO_DeInit+0x190>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d007      	beq.n	800555c <HAL_GPIO_DeInit+0x68>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a4e      	ldr	r2, [pc, #312]	@ (8005688 <HAL_GPIO_DeInit+0x194>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d101      	bne.n	8005558 <HAL_GPIO_DeInit+0x64>
 8005554:	2302      	movs	r3, #2
 8005556:	e004      	b.n	8005562 <HAL_GPIO_DeInit+0x6e>
 8005558:	2307      	movs	r3, #7
 800555a:	e002      	b.n	8005562 <HAL_GPIO_DeInit+0x6e>
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <HAL_GPIO_DeInit+0x6e>
 8005560:	2300      	movs	r3, #0
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	f002 0203 	and.w	r2, r2, #3
 8005568:	0092      	lsls	r2, r2, #2
 800556a:	4093      	lsls	r3, r2
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	429a      	cmp	r2, r3
 8005570:	d136      	bne.n	80055e0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005572:	4b46      	ldr	r3, [pc, #280]	@ (800568c <HAL_GPIO_DeInit+0x198>)
 8005574:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	43db      	mvns	r3, r3
 800557c:	4943      	ldr	r1, [pc, #268]	@ (800568c <HAL_GPIO_DeInit+0x198>)
 800557e:	4013      	ands	r3, r2
 8005580:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005584:	4b41      	ldr	r3, [pc, #260]	@ (800568c <HAL_GPIO_DeInit+0x198>)
 8005586:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	43db      	mvns	r3, r3
 800558e:	493f      	ldr	r1, [pc, #252]	@ (800568c <HAL_GPIO_DeInit+0x198>)
 8005590:	4013      	ands	r3, r2
 8005592:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005596:	4b3d      	ldr	r3, [pc, #244]	@ (800568c <HAL_GPIO_DeInit+0x198>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	43db      	mvns	r3, r3
 800559e:	493b      	ldr	r1, [pc, #236]	@ (800568c <HAL_GPIO_DeInit+0x198>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80055a4:	4b39      	ldr	r3, [pc, #228]	@ (800568c <HAL_GPIO_DeInit+0x198>)
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	43db      	mvns	r3, r3
 80055ac:	4937      	ldr	r1, [pc, #220]	@ (800568c <HAL_GPIO_DeInit+0x198>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	2207      	movs	r2, #7
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80055c2:	4a2f      	ldr	r2, [pc, #188]	@ (8005680 <HAL_GPIO_DeInit+0x18c>)
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	089b      	lsrs	r3, r3, #2
 80055c8:	3302      	adds	r3, #2
 80055ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	43da      	mvns	r2, r3
 80055d2:	482b      	ldr	r0, [pc, #172]	@ (8005680 <HAL_GPIO_DeInit+0x18c>)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	089b      	lsrs	r3, r3, #2
 80055d8:	400a      	ands	r2, r1
 80055da:	3302      	adds	r3, #2
 80055dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	2103      	movs	r1, #3
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	08da      	lsrs	r2, r3, #3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3208      	adds	r2, #8
 80055fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	220f      	movs	r2, #15
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	43db      	mvns	r3, r3
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	08d2      	lsrs	r2, r2, #3
 8005614:	4019      	ands	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3208      	adds	r2, #8
 800561a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	2103      	movs	r1, #3
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	401a      	ands	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	2101      	movs	r1, #1
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	2103      	movs	r1, #3
 8005652:	fa01 f303 	lsl.w	r3, r1, r3
 8005656:	43db      	mvns	r3, r3
 8005658:	401a      	ands	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	3301      	adds	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	f47f af49 	bne.w	8005504 <HAL_GPIO_DeInit+0x10>
  }
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	bc80      	pop	{r7}
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	48000400 	.word	0x48000400
 8005688:	48000800 	.word	0x48000800
 800568c:	58000800 	.word	0x58000800

08005690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	807b      	strh	r3, [r7, #2]
 800569c:	4613      	mov	r3, r2
 800569e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056a0:	787b      	ldrb	r3, [r7, #1]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056a6:	887a      	ldrh	r2, [r7, #2]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056ac:	e002      	b.n	80056b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056ae:	887a      	ldrh	r2, [r7, #2]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e08d      	b.n	80057ec <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7fc fa0f 	bl	8001b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2224      	movs	r2, #36	@ 0x24
 80056ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0201 	bic.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800570e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800571e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d107      	bne.n	8005738 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005734:	609a      	str	r2, [r3, #8]
 8005736:	e006      	b.n	8005746 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005744:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d108      	bne.n	8005760 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800575c:	605a      	str	r2, [r3, #4]
 800575e:	e007      	b.n	8005770 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800576e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800577e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005782:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005792:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69d9      	ldr	r1, [r3, #28]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	607a      	str	r2, [r7, #4]
 80057fe:	461a      	mov	r2, r3
 8005800:	460b      	mov	r3, r1
 8005802:	817b      	strh	r3, [r7, #10]
 8005804:	4613      	mov	r3, r2
 8005806:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b20      	cmp	r3, #32
 8005812:	f040 80fd 	bne.w	8005a10 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_I2C_Master_Transmit+0x30>
 8005820:	2302      	movs	r3, #2
 8005822:	e0f6      	b.n	8005a12 <HAL_I2C_Master_Transmit+0x21e>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800582c:	f7fc fe60 	bl	80024f0 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	2319      	movs	r3, #25
 8005838:	2201      	movs	r2, #1
 800583a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fa09 	bl	8005c56 <I2C_WaitOnFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e0e1      	b.n	8005a12 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2221      	movs	r2, #33	@ 0x21
 8005852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2210      	movs	r2, #16
 800585a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	893a      	ldrh	r2, [r7, #8]
 800586e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	2bff      	cmp	r3, #255	@ 0xff
 800587e:	d906      	bls.n	800588e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	22ff      	movs	r2, #255	@ 0xff
 8005884:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005886:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	e007      	b.n	800589e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005898:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800589c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d024      	beq.n	80058f0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	3301      	adds	r3, #1
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	8979      	ldrh	r1, [r7, #10]
 80058e2:	4b4e      	ldr	r3, [pc, #312]	@ (8005a1c <HAL_I2C_Master_Transmit+0x228>)
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fc03 	bl	80060f4 <I2C_TransferConfig>
 80058ee:	e066      	b.n	80059be <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	8979      	ldrh	r1, [r7, #10]
 80058f8:	4b48      	ldr	r3, [pc, #288]	@ (8005a1c <HAL_I2C_Master_Transmit+0x228>)
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fbf8 	bl	80060f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005904:	e05b      	b.n	80059be <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	6a39      	ldr	r1, [r7, #32]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f9fc 	bl	8005d08 <I2C_WaitOnTXISFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e07b      	b.n	8005a12 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	781a      	ldrb	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d034      	beq.n	80059be <HAL_I2C_Master_Transmit+0x1ca>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005958:	2b00      	cmp	r3, #0
 800595a:	d130      	bne.n	80059be <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	2200      	movs	r2, #0
 8005964:	2180      	movs	r1, #128	@ 0x80
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 f975 	bl	8005c56 <I2C_WaitOnFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e04d      	b.n	8005a12 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	2bff      	cmp	r3, #255	@ 0xff
 800597e:	d90e      	bls.n	800599e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	22ff      	movs	r2, #255	@ 0xff
 8005984:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800598a:	b2da      	uxtb	r2, r3
 800598c:	8979      	ldrh	r1, [r7, #10]
 800598e:	2300      	movs	r3, #0
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 fbac 	bl	80060f4 <I2C_TransferConfig>
 800599c:	e00f      	b.n	80059be <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	8979      	ldrh	r1, [r7, #10]
 80059b0:	2300      	movs	r3, #0
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fb9b 	bl	80060f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d19e      	bne.n	8005906 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	6a39      	ldr	r1, [r7, #32]
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f9e2 	bl	8005d96 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e01a      	b.n	8005a12 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2220      	movs	r2, #32
 80059e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6859      	ldr	r1, [r3, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <HAL_I2C_Master_Transmit+0x22c>)
 80059f0:	400b      	ands	r3, r1
 80059f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e000      	b.n	8005a12 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005a10:	2302      	movs	r3, #2
  }
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	80002000 	.word	0x80002000
 8005a20:	fe00e800 	.word	0xfe00e800

08005a24 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	460b      	mov	r3, r1
 8005a32:	817b      	strh	r3, [r7, #10]
 8005a34:	4613      	mov	r3, r2
 8005a36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	f040 80db 	bne.w	8005bfc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_I2C_Master_Receive+0x30>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e0d4      	b.n	8005bfe <HAL_I2C_Master_Receive+0x1da>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a5c:	f7fc fd48 	bl	80024f0 <HAL_GetTick>
 8005a60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	2319      	movs	r3, #25
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f8f1 	bl	8005c56 <I2C_WaitOnFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e0bf      	b.n	8005bfe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2222      	movs	r2, #34	@ 0x22
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2210      	movs	r2, #16
 8005a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	893a      	ldrh	r2, [r7, #8]
 8005a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2bff      	cmp	r3, #255	@ 0xff
 8005aae:	d90e      	bls.n	8005ace <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	22ff      	movs	r2, #255	@ 0xff
 8005ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	8979      	ldrh	r1, [r7, #10]
 8005abe:	4b52      	ldr	r3, [pc, #328]	@ (8005c08 <HAL_I2C_Master_Receive+0x1e4>)
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fb14 	bl	80060f4 <I2C_TransferConfig>
 8005acc:	e06d      	b.n	8005baa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	8979      	ldrh	r1, [r7, #10]
 8005ae0:	4b49      	ldr	r3, [pc, #292]	@ (8005c08 <HAL_I2C_Master_Receive+0x1e4>)
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fb03 	bl	80060f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005aee:	e05c      	b.n	8005baa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	6a39      	ldr	r1, [r7, #32]
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f991 	bl	8005e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e07c      	b.n	8005bfe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d034      	beq.n	8005baa <HAL_I2C_Master_Receive+0x186>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d130      	bne.n	8005baa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2180      	movs	r1, #128	@ 0x80
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f87f 	bl	8005c56 <I2C_WaitOnFlagUntilTimeout>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e04d      	b.n	8005bfe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2bff      	cmp	r3, #255	@ 0xff
 8005b6a:	d90e      	bls.n	8005b8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	22ff      	movs	r2, #255	@ 0xff
 8005b70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	8979      	ldrh	r1, [r7, #10]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fab6 	bl	80060f4 <I2C_TransferConfig>
 8005b88:	e00f      	b.n	8005baa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	8979      	ldrh	r1, [r7, #10]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 faa5 	bl	80060f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d19d      	bne.n	8005af0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	6a39      	ldr	r1, [r7, #32]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f8ec 	bl	8005d96 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e01a      	b.n	8005bfe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6859      	ldr	r1, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b0c      	ldr	r3, [pc, #48]	@ (8005c0c <HAL_I2C_Master_Receive+0x1e8>)
 8005bdc:	400b      	ands	r3, r1
 8005bde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e000      	b.n	8005bfe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
  }
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	80002400 	.word	0x80002400
 8005c0c:	fe00e800 	.word	0xfe00e800

08005c10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d103      	bne.n	8005c2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d007      	beq.n	8005c4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	619a      	str	r2, [r3, #24]
  }
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc80      	pop	{r7}
 8005c54:	4770      	bx	lr

08005c56 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	603b      	str	r3, [r7, #0]
 8005c62:	4613      	mov	r3, r2
 8005c64:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c66:	e03b      	b.n	8005ce0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f961 	bl	8005f34 <I2C_IsErrorOccurred>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e041      	b.n	8005d00 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	d02d      	beq.n	8005ce0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c84:	f7fc fc34 	bl	80024f0 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d302      	bcc.n	8005c9a <I2C_WaitOnFlagUntilTimeout+0x44>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d122      	bne.n	8005ce0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	bf0c      	ite	eq
 8005caa:	2301      	moveq	r3, #1
 8005cac:	2300      	movne	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d113      	bne.n	8005ce0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbc:	f043 0220 	orr.w	r2, r3, #32
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e00f      	b.n	8005d00 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	bf0c      	ite	eq
 8005cf0:	2301      	moveq	r3, #1
 8005cf2:	2300      	movne	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	79fb      	ldrb	r3, [r7, #7]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d0b4      	beq.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d14:	e033      	b.n	8005d7e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f90a 	bl	8005f34 <I2C_IsErrorOccurred>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e031      	b.n	8005d8e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d30:	d025      	beq.n	8005d7e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d32:	f7fc fbdd 	bl	80024f0 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d302      	bcc.n	8005d48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d11a      	bne.n	8005d7e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d013      	beq.n	8005d7e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5a:	f043 0220 	orr.w	r2, r3, #32
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e007      	b.n	8005d8e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d1c4      	bne.n	8005d16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005da2:	e02f      	b.n	8005e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f8c3 	bl	8005f34 <I2C_IsErrorOccurred>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e02d      	b.n	8005e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db8:	f7fc fb9a 	bl	80024f0 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d302      	bcc.n	8005dce <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d11a      	bne.n	8005e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d013      	beq.n	8005e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de0:	f043 0220 	orr.w	r2, r3, #32
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e007      	b.n	8005e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d1c8      	bne.n	8005da4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005e2c:	e071      	b.n	8005f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f87e 	bl	8005f34 <I2C_IsErrorOccurred>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d13b      	bne.n	8005ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d138      	bne.n	8005ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d105      	bne.n	8005e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d121      	bne.n	8005ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2210      	movs	r2, #16
 8005e84:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2204      	movs	r2, #4
 8005e8a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2220      	movs	r2, #32
 8005e92:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6859      	ldr	r1, [r3, #4]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	4b24      	ldr	r3, [pc, #144]	@ (8005f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005ea0:	400b      	ands	r3, r1
 8005ea2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	75fb      	strb	r3, [r7, #23]
 8005ec0:	e002      	b.n	8005ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005ec8:	f7fc fb12 	bl	80024f0 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d302      	bcc.n	8005ede <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d119      	bne.n	8005f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d116      	bne.n	8005f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d00f      	beq.n	8005f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d002      	beq.n	8005f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d083      	beq.n	8005e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	fe00e800 	.word	0xfe00e800

08005f34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	@ 0x28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d068      	beq.n	8006032 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2210      	movs	r2, #16
 8005f66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f68:	e049      	b.n	8005ffe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d045      	beq.n	8005ffe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f72:	f7fc fabd 	bl	80024f0 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <I2C_IsErrorOccurred+0x54>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d13a      	bne.n	8005ffe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005faa:	d121      	bne.n	8005ff0 <I2C_IsErrorOccurred+0xbc>
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fb2:	d01d      	beq.n	8005ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005fb4:	7cfb      	ldrb	r3, [r7, #19]
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d01a      	beq.n	8005ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005fca:	f7fc fa91 	bl	80024f0 <HAL_GetTick>
 8005fce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fd0:	e00e      	b.n	8005ff0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005fd2:	f7fc fa8d 	bl	80024f0 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b19      	cmp	r3, #25
 8005fde:	d907      	bls.n	8005ff0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	f043 0320 	orr.w	r3, r3, #32
 8005fe6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005fee:	e006      	b.n	8005ffe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d1e9      	bne.n	8005fd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b20      	cmp	r3, #32
 800600a:	d003      	beq.n	8006014 <I2C_IsErrorOccurred+0xe0>
 800600c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0aa      	beq.n	8005f6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006018:	2b00      	cmp	r3, #0
 800601a:	d103      	bne.n	8006024 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2220      	movs	r2, #32
 8006022:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	f043 0304 	orr.w	r3, r3, #4
 800602a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00b      	beq.n	800605c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	f043 0301 	orr.w	r3, r3, #1
 800604a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006054:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00b      	beq.n	800607e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	f043 0308 	orr.w	r3, r3, #8
 800606c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	f043 0302 	orr.w	r3, r3, #2
 800608e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80060a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01c      	beq.n	80060e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff fdb1 	bl	8005c10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6859      	ldr	r1, [r3, #4]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b0d      	ldr	r3, [pc, #52]	@ (80060f0 <I2C_IsErrorOccurred+0x1bc>)
 80060ba:	400b      	ands	r3, r1
 80060bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80060e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3728      	adds	r7, #40	@ 0x28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	fe00e800 	.word	0xfe00e800

080060f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	607b      	str	r3, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	817b      	strh	r3, [r7, #10]
 8006102:	4613      	mov	r3, r2
 8006104:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006106:	897b      	ldrh	r3, [r7, #10]
 8006108:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800610c:	7a7b      	ldrb	r3, [r7, #9]
 800610e:	041b      	lsls	r3, r3, #16
 8006110:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006114:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	4313      	orrs	r3, r2
 800611e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006122:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	0d5b      	lsrs	r3, r3, #21
 800612e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006132:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <I2C_TransferConfig+0x5c>)
 8006134:	430b      	orrs	r3, r1
 8006136:	43db      	mvns	r3, r3
 8006138:	ea02 0103 	and.w	r1, r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr
 8006150:	03ff63ff 	.word	0x03ff63ff

08006154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b20      	cmp	r3, #32
 8006168:	d138      	bne.n	80061dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006174:	2302      	movs	r3, #2
 8006176:	e032      	b.n	80061de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2224      	movs	r2, #36	@ 0x24
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6819      	ldr	r1, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e000      	b.n	80061de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d139      	bne.n	8006272 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006208:	2302      	movs	r3, #2
 800620a:	e033      	b.n	8006274 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2224      	movs	r2, #36	@ 0x24
 8006218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800623a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0201 	orr.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	e000      	b.n	8006274 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006272:	2302      	movs	r3, #2
  }
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr
	...

08006280 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006284:	4b04      	ldr	r3, [pc, #16]	@ (8006298 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a03      	ldr	r2, [pc, #12]	@ (8006298 <HAL_PWR_EnableBkUpAccess+0x18>)
 800628a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800628e:	6013      	str	r3, [r2, #0]
}
 8006290:	bf00      	nop
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr
 8006298:	58000400 	.word	0x58000400

0800629c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10c      	bne.n	80062c8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80062ae:	4b13      	ldr	r3, [pc, #76]	@ (80062fc <HAL_PWR_EnterSLEEPMode+0x60>)
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ba:	d10d      	bne.n	80062d8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80062bc:	f000 f83c 	bl	8006338 <HAL_PWREx_DisableLowPowerRunMode>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d008      	beq.n	80062d8 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80062c6:	e015      	b.n	80062f4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80062c8:	4b0c      	ldr	r3, [pc, #48]	@ (80062fc <HAL_PWR_EnterSLEEPMode+0x60>)
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80062d4:	f000 f822 	bl	800631c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80062d8:	4b09      	ldr	r3, [pc, #36]	@ (8006300 <HAL_PWR_EnterSLEEPMode+0x64>)
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	4a08      	ldr	r2, [pc, #32]	@ (8006300 <HAL_PWR_EnterSLEEPMode+0x64>)
 80062de:	f023 0304 	bic.w	r3, r3, #4
 80062e2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80062ea:	bf30      	wfi
 80062ec:	e002      	b.n	80062f4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80062ee:	bf40      	sev
    __WFE();
 80062f0:	bf20      	wfe
    __WFE();
 80062f2:	bf20      	wfe
  }
}
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	58000400 	.word	0x58000400
 8006300:	e000ed00 	.word	0xe000ed00

08006304 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006308:	4b03      	ldr	r3, [pc, #12]	@ (8006318 <HAL_PWREx_GetVoltageRange+0x14>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8006310:	4618      	mov	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr
 8006318:	58000400 	.word	0x58000400

0800631c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006320:	4b04      	ldr	r3, [pc, #16]	@ (8006334 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a03      	ldr	r2, [pc, #12]	@ (8006334 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006326:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800632a:	6013      	str	r3, [r2, #0]
}
 800632c:	bf00      	nop
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr
 8006334:	58000400 	.word	0x58000400

08006338 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800633e:	4b16      	ldr	r3, [pc, #88]	@ (8006398 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a15      	ldr	r2, [pc, #84]	@ (8006398 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006344:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006348:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800634a:	4b14      	ldr	r3, [pc, #80]	@ (800639c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2232      	movs	r2, #50	@ 0x32
 8006350:	fb02 f303 	mul.w	r3, r2, r3
 8006354:	4a12      	ldr	r2, [pc, #72]	@ (80063a0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	0c9b      	lsrs	r3, r3, #18
 800635c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800635e:	e002      	b.n	8006366 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3b01      	subs	r3, #1
 8006364:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006366:	4b0c      	ldr	r3, [pc, #48]	@ (8006398 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800636e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006372:	d102      	bne.n	800637a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f2      	bne.n	8006360 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800637a:	4b07      	ldr	r3, [pc, #28]	@ (8006398 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006382:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006386:	d101      	bne.n	800638c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e000      	b.n	800638e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr
 8006398:	58000400 	.word	0x58000400
 800639c:	20000000 	.word	0x20000000
 80063a0:	431bde83 	.word	0x431bde83

080063a4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	4603      	mov	r3, r0
 80063ac:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80063ae:	4b10      	ldr	r3, [pc, #64]	@ (80063f0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f023 0307 	bic.w	r3, r3, #7
 80063b6:	4a0e      	ldr	r2, [pc, #56]	@ (80063f0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80063b8:	f043 0302 	orr.w	r3, r3, #2
 80063bc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80063be:	4b0d      	ldr	r3, [pc, #52]	@ (80063f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	4a0c      	ldr	r2, [pc, #48]	@ (80063f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80063c4:	f043 0304 	orr.w	r3, r3, #4
 80063c8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80063d0:	bf30      	wfi
 80063d2:	e002      	b.n	80063da <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80063d4:	bf40      	sev
    __WFE();
 80063d6:	bf20      	wfe
    __WFE();
 80063d8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80063da:	4b06      	ldr	r3, [pc, #24]	@ (80063f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	4a05      	ldr	r2, [pc, #20]	@ (80063f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80063e0:	f023 0304 	bic.w	r3, r3, #4
 80063e4:	6113      	str	r3, [r2, #16]
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bc80      	pop	{r7}
 80063ee:	4770      	bx	lr
 80063f0:	58000400 	.word	0x58000400
 80063f4:	e000ed00 	.word	0xe000ed00

080063f8 <LL_PWR_IsEnabledBkUpAccess>:
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80063fc:	4b06      	ldr	r3, [pc, #24]	@ (8006418 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006408:	d101      	bne.n	800640e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr
 8006418:	58000400 	.word	0x58000400

0800641c <LL_RCC_HSE_EnableTcxo>:
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800642a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800642e:	6013      	str	r3, [r2, #0]
}
 8006430:	bf00      	nop
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <LL_RCC_HSE_DisableTcxo>:
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800643c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006446:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800644a:	6013      	str	r3, [r2, #0]
}
 800644c:	bf00      	nop
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006466:	d101      	bne.n	800646c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006468:	2301      	movs	r3, #1
 800646a:	e000      	b.n	800646e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	bc80      	pop	{r7}
 8006474:	4770      	bx	lr

08006476 <LL_RCC_HSE_Enable>:
{
 8006476:	b480      	push	{r7}
 8006478:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800647a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006488:	6013      	str	r3, [r2, #0]
}
 800648a:	bf00      	nop
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr

08006492 <LL_RCC_HSE_Disable>:
{
 8006492:	b480      	push	{r7}
 8006494:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064a4:	6013      	str	r3, [r2, #0]
}
 80064a6:	bf00      	nop
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr

080064ae <LL_RCC_HSE_IsReady>:
{
 80064ae:	b480      	push	{r7}
 80064b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80064b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064c0:	d101      	bne.n	80064c6 <LL_RCC_HSE_IsReady+0x18>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <LL_RCC_HSE_IsReady+0x1a>
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr

080064d0 <LL_RCC_HSI_Enable>:
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80064d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064e2:	6013      	str	r3, [r2, #0]
}
 80064e4:	bf00      	nop
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <LL_RCC_HSI_Disable>:
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80064f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064fe:	6013      	str	r3, [r2, #0]
}
 8006500:	bf00      	nop
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <LL_RCC_HSI_IsReady>:
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800650c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800651a:	d101      	bne.n	8006520 <LL_RCC_HSI_IsReady+0x18>
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <LL_RCC_HSI_IsReady+0x1a>
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr

0800652a <LL_RCC_HSI_SetCalibTrimming>:
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	061b      	lsls	r3, r3, #24
 8006540:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006544:	4313      	orrs	r3, r2
 8006546:	604b      	str	r3, [r1, #4]
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr

08006552 <LL_RCC_LSE_IsReady>:
{
 8006552:	b480      	push	{r7}
 8006554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800655a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b02      	cmp	r3, #2
 8006564:	d101      	bne.n	800656a <LL_RCC_LSE_IsReady+0x18>
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <LL_RCC_LSE_IsReady+0x1a>
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <LL_RCC_LSI_Enable>:
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800657c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800658c:	bf00      	nop
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr

08006594 <LL_RCC_LSI_Disable>:
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800659c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065a4:	f023 0301 	bic.w	r3, r3, #1
 80065a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80065ac:	bf00      	nop
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bc80      	pop	{r7}
 80065b2:	4770      	bx	lr

080065b4 <LL_RCC_LSI_IsReady>:
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80065b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d101      	bne.n	80065cc <LL_RCC_LSI_IsReady+0x18>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e000      	b.n	80065ce <LL_RCC_LSI_IsReady+0x1a>
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr

080065d6 <LL_RCC_MSI_Enable>:
{
 80065d6:	b480      	push	{r7}
 80065d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80065da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065e4:	f043 0301 	orr.w	r3, r3, #1
 80065e8:	6013      	str	r3, [r2, #0]
}
 80065ea:	bf00      	nop
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr

080065f2 <LL_RCC_MSI_Disable>:
{
 80065f2:	b480      	push	{r7}
 80065f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80065f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	6013      	str	r3, [r2, #0]
}
 8006606:	bf00      	nop
 8006608:	46bd      	mov	sp, r7
 800660a:	bc80      	pop	{r7}
 800660c:	4770      	bx	lr

0800660e <LL_RCC_MSI_IsReady>:
{
 800660e:	b480      	push	{r7}
 8006610:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b02      	cmp	r3, #2
 800661e:	d101      	bne.n	8006624 <LL_RCC_MSI_IsReady+0x16>
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <LL_RCC_MSI_IsReady+0x18>
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr

0800662e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800662e:	b480      	push	{r7}
 8006630:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b08      	cmp	r3, #8
 800663e:	d101      	bne.n	8006644 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	4770      	bx	lr

0800664e <LL_RCC_MSI_GetRange>:
{
 800664e:	b480      	push	{r7}
 8006650:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800665c:	4618      	mov	r0, r3
 800665e:	46bd      	mov	sp, r7
 8006660:	bc80      	pop	{r7}
 8006662:	4770      	bx	lr

08006664 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800666c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006670:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8006674:	4618      	mov	r0, r3
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <LL_RCC_MSI_SetCalibTrimming>:
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006696:	4313      	orrs	r3, r2
 8006698:	604b      	str	r3, [r1, #4]
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	bc80      	pop	{r7}
 80066a2:	4770      	bx	lr

080066a4 <LL_RCC_SetSysClkSource>:
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80066ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f023 0203 	bic.w	r2, r3, #3
 80066b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4313      	orrs	r3, r2
 80066be:	608b      	str	r3, [r1, #8]
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr

080066ca <LL_RCC_GetSysClkSource>:
{
 80066ca:	b480      	push	{r7}
 80066cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80066ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 030c 	and.w	r3, r3, #12
}
 80066d8:	4618      	mov	r0, r3
 80066da:	46bd      	mov	sp, r7
 80066dc:	bc80      	pop	{r7}
 80066de:	4770      	bx	lr

080066e0 <LL_RCC_SetAHBPrescaler>:
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80066e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	608b      	str	r3, [r1, #8]
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <LL_RCC_SetAHB3Prescaler>:
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800670e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006712:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006716:	f023 020f 	bic.w	r2, r3, #15
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	091b      	lsrs	r3, r3, #4
 800671e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr

08006732 <LL_RCC_SetAPB1Prescaler>:
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800673a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006744:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4313      	orrs	r3, r2
 800674c:	608b      	str	r3, [r1, #8]
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <LL_RCC_SetAPB2Prescaler>:
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800676a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4313      	orrs	r3, r2
 8006772:	608b      	str	r3, [r1, #8]
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr

0800677e <LL_RCC_GetAHBPrescaler>:
{
 800677e:	b480      	push	{r7}
 8006780:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800678c:	4618      	mov	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr

08006794 <LL_RCC_GetAHB3Prescaler>:
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800679c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bc80      	pop	{r7}
 80067ac:	4770      	bx	lr

080067ae <LL_RCC_GetAPB1Prescaler>:
{
 80067ae:	b480      	push	{r7}
 80067b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80067b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80067bc:	4618      	mov	r0, r3
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr

080067c4 <LL_RCC_GetAPB2Prescaler>:
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80067c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bc80      	pop	{r7}
 80067d8:	4770      	bx	lr

080067da <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80067da:	b480      	push	{r7}
 80067dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80067de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067ec:	6013      	str	r3, [r2, #0]
}
 80067ee:	bf00      	nop
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80067f6:	b480      	push	{r7}
 80067f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80067fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006804:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006808:	6013      	str	r3, [r2, #0]
}
 800680a:	bf00      	nop
 800680c:	46bd      	mov	sp, r7
 800680e:	bc80      	pop	{r7}
 8006810:	4770      	bx	lr

08006812 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006812:	b480      	push	{r7}
 8006814:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006820:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006824:	d101      	bne.n	800682a <LL_RCC_PLL_IsReady+0x18>
 8006826:	2301      	movs	r3, #1
 8006828:	e000      	b.n	800682c <LL_RCC_PLL_IsReady+0x1a>
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr

08006834 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006844:	4618      	mov	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	bc80      	pop	{r7}
 800684a:	4770      	bx	lr

0800684c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800685a:	4618      	mov	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr

08006862 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006862:	b480      	push	{r7}
 8006864:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006870:	4618      	mov	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800687c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f003 0303 	and.w	r3, r3, #3
}
 8006886:	4618      	mov	r0, r3
 8006888:	46bd      	mov	sp, r7
 800688a:	bc80      	pop	{r7}
 800688c:	4770      	bx	lr

0800688e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800688e:	b480      	push	{r7}
 8006890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800689c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a0:	d101      	bne.n	80068a6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80068b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80068bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c4:	d101      	bne.n	80068ca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr

080068d4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80068d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068e6:	d101      	bne.n	80068ec <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80068e8:	2301      	movs	r3, #1
 80068ea:	e000      	b.n	80068ee <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr

080068f6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80068f6:	b480      	push	{r7}
 80068f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80068fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006904:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006908:	d101      	bne.n	800690e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr

08006918 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e36f      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800692a:	f7ff fece 	bl	80066ca <LL_RCC_GetSysClkSource>
 800692e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006930:	f7ff ffa2 	bl	8006878 <LL_RCC_PLL_GetMainSource>
 8006934:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 80c4 	beq.w	8006acc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d005      	beq.n	8006956 <HAL_RCC_OscConfig+0x3e>
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	2b0c      	cmp	r3, #12
 800694e:	d176      	bne.n	8006a3e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d173      	bne.n	8006a3e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e353      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_RCC_OscConfig+0x68>
 8006974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800697e:	e006      	b.n	800698e <HAL_RCC_OscConfig+0x76>
 8006980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006988:	091b      	lsrs	r3, r3, #4
 800698a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800698e:	4293      	cmp	r3, r2
 8006990:	d222      	bcs.n	80069d8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fd3c 	bl	8007414 <RCC_SetFlashLatencyFromMSIRange>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e331      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069b0:	f043 0308 	orr.w	r3, r3, #8
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069c8:	4313      	orrs	r3, r2
 80069ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff fe53 	bl	800667c <LL_RCC_MSI_SetCalibTrimming>
 80069d6:	e021      	b.n	8006a1c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069e2:	f043 0308 	orr.w	r3, r3, #8
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069fa:	4313      	orrs	r3, r2
 80069fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff fe3a 	bl	800667c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 fd01 	bl	8007414 <RCC_SetFlashLatencyFromMSIRange>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e2f6      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006a1c:	f000 fcc2 	bl	80073a4 <HAL_RCC_GetHCLKFreq>
 8006a20:	4603      	mov	r3, r0
 8006a22:	4aa7      	ldr	r2, [pc, #668]	@ (8006cc0 <HAL_RCC_OscConfig+0x3a8>)
 8006a24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8006a26:	4ba7      	ldr	r3, [pc, #668]	@ (8006cc4 <HAL_RCC_OscConfig+0x3ac>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fb fd56 	bl	80024dc <HAL_InitTick>
 8006a30:	4603      	mov	r3, r0
 8006a32:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006a34:	7cfb      	ldrb	r3, [r7, #19]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d047      	beq.n	8006aca <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8006a3a:	7cfb      	ldrb	r3, [r7, #19]
 8006a3c:	e2e5      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d02c      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006a46:	f7ff fdc6 	bl	80065d6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a4a:	f7fb fd51 	bl	80024f0 <HAL_GetTick>
 8006a4e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006a50:	e008      	b.n	8006a64 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a52:	f7fb fd4d 	bl	80024f0 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e2d2      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006a64:	f7ff fdd3 	bl	800660e <LL_RCC_MSI_IsReady>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0f1      	beq.n	8006a52 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a78:	f043 0308 	orr.w	r3, r3, #8
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a90:	4313      	orrs	r3, r2
 8006a92:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff fdef 	bl	800667c <LL_RCC_MSI_SetCalibTrimming>
 8006a9e:	e015      	b.n	8006acc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006aa0:	f7ff fda7 	bl	80065f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006aa4:	f7fb fd24 	bl	80024f0 <HAL_GetTick>
 8006aa8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006aac:	f7fb fd20 	bl	80024f0 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e2a5      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006abe:	f7ff fda6 	bl	800660e <LL_RCC_MSI_IsReady>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1f1      	bne.n	8006aac <HAL_RCC_OscConfig+0x194>
 8006ac8:	e000      	b.n	8006acc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006aca:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d058      	beq.n	8006b8a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d005      	beq.n	8006aea <HAL_RCC_OscConfig+0x1d2>
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	2b0c      	cmp	r3, #12
 8006ae2:	d108      	bne.n	8006af6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d105      	bne.n	8006af6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d14b      	bne.n	8006b8a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e289      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8006af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b14:	d102      	bne.n	8006b1c <HAL_RCC_OscConfig+0x204>
 8006b16:	f7ff fcae 	bl	8006476 <LL_RCC_HSE_Enable>
 8006b1a:	e00d      	b.n	8006b38 <HAL_RCC_OscConfig+0x220>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8006b24:	d104      	bne.n	8006b30 <HAL_RCC_OscConfig+0x218>
 8006b26:	f7ff fc79 	bl	800641c <LL_RCC_HSE_EnableTcxo>
 8006b2a:	f7ff fca4 	bl	8006476 <LL_RCC_HSE_Enable>
 8006b2e:	e003      	b.n	8006b38 <HAL_RCC_OscConfig+0x220>
 8006b30:	f7ff fcaf 	bl	8006492 <LL_RCC_HSE_Disable>
 8006b34:	f7ff fc80 	bl	8006438 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d012      	beq.n	8006b66 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b40:	f7fb fcd6 	bl	80024f0 <HAL_GetTick>
 8006b44:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b48:	f7fb fcd2 	bl	80024f0 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b64      	cmp	r3, #100	@ 0x64
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e257      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006b5a:	f7ff fca8 	bl	80064ae <LL_RCC_HSE_IsReady>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0f1      	beq.n	8006b48 <HAL_RCC_OscConfig+0x230>
 8006b64:	e011      	b.n	8006b8a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b66:	f7fb fcc3 	bl	80024f0 <HAL_GetTick>
 8006b6a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b6e:	f7fb fcbf 	bl	80024f0 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b64      	cmp	r3, #100	@ 0x64
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e244      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006b80:	f7ff fc95 	bl	80064ae <LL_RCC_HSE_IsReady>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f1      	bne.n	8006b6e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d046      	beq.n	8006c24 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d005      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x290>
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	2b0c      	cmp	r3, #12
 8006ba0:	d10e      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d10b      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e22a      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff fcb6 	bl	800652a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006bbe:	e031      	b.n	8006c24 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d019      	beq.n	8006bfc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bc8:	f7ff fc82 	bl	80064d0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bcc:	f7fb fc90 	bl	80024f0 <HAL_GetTick>
 8006bd0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bd4:	f7fb fc8c 	bl	80024f0 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e211      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006be6:	f7ff fc8f 	bl	8006508 <LL_RCC_HSI_IsReady>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0f1      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7ff fc98 	bl	800652a <LL_RCC_HSI_SetCalibTrimming>
 8006bfa:	e013      	b.n	8006c24 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bfc:	f7ff fc76 	bl	80064ec <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c00:	f7fb fc76 	bl	80024f0 <HAL_GetTick>
 8006c04:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c08:	f7fb fc72 	bl	80024f0 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e1f7      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006c1a:	f7ff fc75 	bl	8006508 <LL_RCC_HSI_IsReady>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1f1      	bne.n	8006c08 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0308 	and.w	r3, r3, #8
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d06e      	beq.n	8006d0e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d056      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8006c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c40:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69da      	ldr	r2, [r3, #28]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f003 0310 	and.w	r3, r3, #16
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d031      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d006      	beq.n	8006c68 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e1d0      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d013      	beq.n	8006c9a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8006c72:	f7ff fc8f 	bl	8006594 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c76:	f7fb fc3b 	bl	80024f0 <HAL_GetTick>
 8006c7a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c7e:	f7fb fc37 	bl	80024f0 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b11      	cmp	r3, #17
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e1bc      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8006c90:	f7ff fc90 	bl	80065b4 <LL_RCC_LSI_IsReady>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1f1      	bne.n	8006c7e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ca2:	f023 0210 	bic.w	r2, r3, #16
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cb4:	f7ff fc5e 	bl	8006574 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cb8:	f7fb fc1a 	bl	80024f0 <HAL_GetTick>
 8006cbc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006cbe:	e00c      	b.n	8006cda <HAL_RCC_OscConfig+0x3c2>
 8006cc0:	20000000 	.word	0x20000000
 8006cc4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cc8:	f7fb fc12 	bl	80024f0 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b11      	cmp	r3, #17
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e197      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006cda:	f7ff fc6b 	bl	80065b4 <LL_RCC_LSI_IsReady>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0f1      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x3b0>
 8006ce4:	e013      	b.n	8006d0e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ce6:	f7ff fc55 	bl	8006594 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cea:	f7fb fc01 	bl	80024f0 <HAL_GetTick>
 8006cee:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cf2:	f7fb fbfd 	bl	80024f0 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b11      	cmp	r3, #17
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e182      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006d04:	f7ff fc56 	bl	80065b4 <LL_RCC_LSI_IsReady>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f1      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 80d8 	beq.w	8006ecc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006d1c:	f7ff fb6c 	bl	80063f8 <LL_PWR_IsEnabledBkUpAccess>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d113      	bne.n	8006d4e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006d26:	f7ff faab 	bl	8006280 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d2a:	f7fb fbe1 	bl	80024f0 <HAL_GetTick>
 8006d2e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006d30:	e008      	b.n	8006d44 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d32:	f7fb fbdd 	bl	80024f0 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e162      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006d44:	f7ff fb58 	bl	80063f8 <LL_PWR_IsEnabledBkUpAccess>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f1      	beq.n	8006d32 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d07b      	beq.n	8006e4e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	2b85      	cmp	r3, #133	@ 0x85
 8006d5c:	d003      	beq.n	8006d66 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	2b05      	cmp	r3, #5
 8006d64:	d109      	bne.n	8006d7a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d72:	f043 0304 	orr.w	r3, r3, #4
 8006d76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d7a:	f7fb fbb9 	bl	80024f0 <HAL_GetTick>
 8006d7e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d8c:	f043 0301 	orr.w	r3, r3, #1
 8006d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006d94:	e00a      	b.n	8006dac <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d96:	f7fb fbab 	bl	80024f0 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d901      	bls.n	8006dac <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e12e      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006dac:	f7ff fbd1 	bl	8006552 <LL_RCC_LSE_IsReady>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0ef      	beq.n	8006d96 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	2b81      	cmp	r3, #129	@ 0x81
 8006dbc:	d003      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	2b85      	cmp	r3, #133	@ 0x85
 8006dc4:	d121      	bne.n	8006e0a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc6:	f7fb fb93 	bl	80024f0 <HAL_GetTick>
 8006dca:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006de0:	e00a      	b.n	8006df8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de2:	f7fb fb85 	bl	80024f0 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e108      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0ec      	beq.n	8006de2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006e08:	e060      	b.n	8006ecc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0a:	f7fb fb71 	bl	80024f0 <HAL_GetTick>
 8006e0e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e24:	e00a      	b.n	8006e3c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e26:	f7fb fb63 	bl	80024f0 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d901      	bls.n	8006e3c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e0e6      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1ec      	bne.n	8006e26 <HAL_RCC_OscConfig+0x50e>
 8006e4c:	e03e      	b.n	8006ecc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e4e:	f7fb fb4f 	bl	80024f0 <HAL_GetTick>
 8006e52:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e68:	e00a      	b.n	8006e80 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e6a:	f7fb fb41 	bl	80024f0 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e0c4      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1ec      	bne.n	8006e6a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e90:	f7fb fb2e 	bl	80024f0 <HAL_GetTick>
 8006e94:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ea2:	f023 0301 	bic.w	r3, r3, #1
 8006ea6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006eaa:	e00a      	b.n	8006ec2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eac:	f7fb fb20 	bl	80024f0 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e0a3      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006ec2:	f7ff fb46 	bl	8006552 <LL_RCC_LSE_IsReady>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1ef      	bne.n	8006eac <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8099 	beq.w	8007008 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	2b0c      	cmp	r3, #12
 8006eda:	d06c      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d14b      	bne.n	8006f7c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ee4:	f7ff fc87 	bl	80067f6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee8:	f7fb fb02 	bl	80024f0 <HAL_GetTick>
 8006eec:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef0:	f7fb fafe 	bl	80024f0 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b0a      	cmp	r3, #10
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e083      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006f02:	f7ff fc86 	bl	8006812 <LL_RCC_PLL_IsReady>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1f1      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	4b40      	ldr	r3, [pc, #256]	@ (8007014 <HAL_RCC_OscConfig+0x6fc>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f1e:	4311      	orrs	r1, r2
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f24:	0212      	lsls	r2, r2, #8
 8006f26:	4311      	orrs	r1, r2
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f2c:	4311      	orrs	r1, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006f32:	4311      	orrs	r1, r2
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f42:	f7ff fc4a 	bl	80067da <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f54:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f56:	f7fb facb 	bl	80024f0 <HAL_GetTick>
 8006f5a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006f5c:	e008      	b.n	8006f70 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f5e:	f7fb fac7 	bl	80024f0 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b0a      	cmp	r3, #10
 8006f6a:	d901      	bls.n	8006f70 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e04c      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006f70:	f7ff fc4f 	bl	8006812 <LL_RCC_PLL_IsReady>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f1      	beq.n	8006f5e <HAL_RCC_OscConfig+0x646>
 8006f7a:	e045      	b.n	8007008 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f7c:	f7ff fc3b 	bl	80067f6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f80:	f7fb fab6 	bl	80024f0 <HAL_GetTick>
 8006f84:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f88:	f7fb fab2 	bl	80024f0 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b0a      	cmp	r3, #10
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e037      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006f9a:	f7ff fc3a 	bl	8006812 <LL_RCC_PLL_IsReady>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1f1      	bne.n	8006f88 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fae:	4b1a      	ldr	r3, [pc, #104]	@ (8007018 <HAL_RCC_OscConfig+0x700>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	60cb      	str	r3, [r1, #12]
 8006fb4:	e028      	b.n	8007008 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e023      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	f003 0203 	and.w	r2, r3, #3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d115      	bne.n	8007004 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d10e      	bne.n	8007004 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff0:	021b      	lsls	r3, r3, #8
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d106      	bne.n	8007004 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007000:	429a      	cmp	r2, r3
 8007002:	d001      	beq.n	8007008 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3720      	adds	r7, #32
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	11c1808c 	.word	0x11c1808c
 8007018:	eefefffc 	.word	0xeefefffc

0800701c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e10f      	b.n	8007250 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007030:	4b89      	ldr	r3, [pc, #548]	@ (8007258 <HAL_RCC_ClockConfig+0x23c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0307 	and.w	r3, r3, #7
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	429a      	cmp	r2, r3
 800703c:	d91b      	bls.n	8007076 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800703e:	4b86      	ldr	r3, [pc, #536]	@ (8007258 <HAL_RCC_ClockConfig+0x23c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f023 0207 	bic.w	r2, r3, #7
 8007046:	4984      	ldr	r1, [pc, #528]	@ (8007258 <HAL_RCC_ClockConfig+0x23c>)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	4313      	orrs	r3, r2
 800704c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800704e:	f7fb fa4f 	bl	80024f0 <HAL_GetTick>
 8007052:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007054:	e008      	b.n	8007068 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007056:	f7fb fa4b 	bl	80024f0 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d901      	bls.n	8007068 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e0f3      	b.n	8007250 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007068:	4b7b      	ldr	r3, [pc, #492]	@ (8007258 <HAL_RCC_ClockConfig+0x23c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d1ef      	bne.n	8007056 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d016      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff fb2a 	bl	80066e0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800708c:	f7fb fa30 	bl	80024f0 <HAL_GetTick>
 8007090:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007094:	f7fb fa2c 	bl	80024f0 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e0d4      	b.n	8007250 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80070a6:	f7ff fbf2 	bl	800688e <LL_RCC_IsActiveFlag_HPRE>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0f1      	beq.n	8007094 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d016      	beq.n	80070ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff fb20 	bl	8006706 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80070c6:	f7fb fa13 	bl	80024f0 <HAL_GetTick>
 80070ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80070ce:	f7fb fa0f 	bl	80024f0 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e0b7      	b.n	8007250 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80070e0:	f7ff fbe6 	bl	80068b0 <LL_RCC_IsActiveFlag_SHDHPRE>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f1      	beq.n	80070ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d016      	beq.n	8007124 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff fb19 	bl	8006732 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007100:	f7fb f9f6 	bl	80024f0 <HAL_GetTick>
 8007104:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007106:	e008      	b.n	800711a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007108:	f7fb f9f2 	bl	80024f0 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e09a      	b.n	8007250 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800711a:	f7ff fbdb 	bl	80068d4 <LL_RCC_IsActiveFlag_PPRE1>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0f1      	beq.n	8007108 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0308 	and.w	r3, r3, #8
 800712c:	2b00      	cmp	r3, #0
 800712e:	d017      	beq.n	8007160 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	00db      	lsls	r3, r3, #3
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff fb0e 	bl	8006758 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800713c:	f7fb f9d8 	bl	80024f0 <HAL_GetTick>
 8007140:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007142:	e008      	b.n	8007156 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007144:	f7fb f9d4 	bl	80024f0 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e07c      	b.n	8007250 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007156:	f7ff fbce 	bl	80068f6 <LL_RCC_IsActiveFlag_PPRE2>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0f1      	beq.n	8007144 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	d043      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d106      	bne.n	8007182 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007174:	f7ff f99b 	bl	80064ae <LL_RCC_HSE_IsReady>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d11e      	bne.n	80071bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e066      	b.n	8007250 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b03      	cmp	r3, #3
 8007188:	d106      	bne.n	8007198 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800718a:	f7ff fb42 	bl	8006812 <LL_RCC_PLL_IsReady>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d113      	bne.n	80071bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e05b      	b.n	8007250 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d106      	bne.n	80071ae <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80071a0:	f7ff fa35 	bl	800660e <LL_RCC_MSI_IsReady>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d108      	bne.n	80071bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e050      	b.n	8007250 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80071ae:	f7ff f9ab 	bl	8006508 <LL_RCC_HSI_IsReady>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e049      	b.n	8007250 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff fa6f 	bl	80066a4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071c6:	f7fb f993 	bl	80024f0 <HAL_GetTick>
 80071ca:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071cc:	e00a      	b.n	80071e4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071ce:	f7fb f98f 	bl	80024f0 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071dc:	4293      	cmp	r3, r2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e035      	b.n	8007250 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071e4:	f7ff fa71 	bl	80066ca <LL_RCC_GetSysClkSource>
 80071e8:	4602      	mov	r2, r0
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d1ec      	bne.n	80071ce <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071f4:	4b18      	ldr	r3, [pc, #96]	@ (8007258 <HAL_RCC_ClockConfig+0x23c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d21b      	bcs.n	800723a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007202:	4b15      	ldr	r3, [pc, #84]	@ (8007258 <HAL_RCC_ClockConfig+0x23c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f023 0207 	bic.w	r2, r3, #7
 800720a:	4913      	ldr	r1, [pc, #76]	@ (8007258 <HAL_RCC_ClockConfig+0x23c>)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	4313      	orrs	r3, r2
 8007210:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007212:	f7fb f96d 	bl	80024f0 <HAL_GetTick>
 8007216:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007218:	e008      	b.n	800722c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800721a:	f7fb f969 	bl	80024f0 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e011      	b.n	8007250 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800722c:	4b0a      	ldr	r3, [pc, #40]	@ (8007258 <HAL_RCC_ClockConfig+0x23c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d1ef      	bne.n	800721a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800723a:	f000 f8b3 	bl	80073a4 <HAL_RCC_GetHCLKFreq>
 800723e:	4603      	mov	r3, r0
 8007240:	4a06      	ldr	r2, [pc, #24]	@ (800725c <HAL_RCC_ClockConfig+0x240>)
 8007242:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8007244:	4b06      	ldr	r3, [pc, #24]	@ (8007260 <HAL_RCC_ClockConfig+0x244>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4618      	mov	r0, r3
 800724a:	f7fb f947 	bl	80024dc <HAL_InitTick>
 800724e:	4603      	mov	r3, r0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	58004000 	.word	0x58004000
 800725c:	20000000 	.word	0x20000000
 8007260:	20000004 	.word	0x20000004

08007264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007264:	b590      	push	{r4, r7, lr}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007272:	f7ff fa2a 	bl	80066ca <LL_RCC_GetSysClkSource>
 8007276:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007278:	f7ff fafe 	bl	8006878 <LL_RCC_PLL_GetMainSource>
 800727c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <HAL_RCC_GetSysClockFreq+0x2c>
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b0c      	cmp	r3, #12
 8007288:	d139      	bne.n	80072fe <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d136      	bne.n	80072fe <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007290:	f7ff f9cd 	bl	800662e <LL_RCC_MSI_IsEnabledRangeSelect>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d115      	bne.n	80072c6 <HAL_RCC_GetSysClockFreq+0x62>
 800729a:	f7ff f9c8 	bl	800662e <LL_RCC_MSI_IsEnabledRangeSelect>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d106      	bne.n	80072b2 <HAL_RCC_GetSysClockFreq+0x4e>
 80072a4:	f7ff f9d3 	bl	800664e <LL_RCC_MSI_GetRange>
 80072a8:	4603      	mov	r3, r0
 80072aa:	0a1b      	lsrs	r3, r3, #8
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	e005      	b.n	80072be <HAL_RCC_GetSysClockFreq+0x5a>
 80072b2:	f7ff f9d7 	bl	8006664 <LL_RCC_MSI_GetRangeAfterStandby>
 80072b6:	4603      	mov	r3, r0
 80072b8:	0a1b      	lsrs	r3, r3, #8
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	4a36      	ldr	r2, [pc, #216]	@ (8007398 <HAL_RCC_GetSysClockFreq+0x134>)
 80072c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c4:	e014      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0x8c>
 80072c6:	f7ff f9b2 	bl	800662e <LL_RCC_MSI_IsEnabledRangeSelect>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d106      	bne.n	80072de <HAL_RCC_GetSysClockFreq+0x7a>
 80072d0:	f7ff f9bd 	bl	800664e <LL_RCC_MSI_GetRange>
 80072d4:	4603      	mov	r3, r0
 80072d6:	091b      	lsrs	r3, r3, #4
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	e005      	b.n	80072ea <HAL_RCC_GetSysClockFreq+0x86>
 80072de:	f7ff f9c1 	bl	8006664 <LL_RCC_MSI_GetRangeAfterStandby>
 80072e2:	4603      	mov	r3, r0
 80072e4:	091b      	lsrs	r3, r3, #4
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	4a2b      	ldr	r2, [pc, #172]	@ (8007398 <HAL_RCC_GetSysClockFreq+0x134>)
 80072ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d115      	bne.n	8007324 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80072fc:	e012      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b04      	cmp	r3, #4
 8007302:	d102      	bne.n	800730a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007304:	4b25      	ldr	r3, [pc, #148]	@ (800739c <HAL_RCC_GetSysClockFreq+0x138>)
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	e00c      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2b08      	cmp	r3, #8
 800730e:	d109      	bne.n	8007324 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007310:	f7ff f8a0 	bl	8006454 <LL_RCC_HSE_IsEnabledDiv2>
 8007314:	4603      	mov	r3, r0
 8007316:	2b01      	cmp	r3, #1
 8007318:	d102      	bne.n	8007320 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800731a:	4b20      	ldr	r3, [pc, #128]	@ (800739c <HAL_RCC_GetSysClockFreq+0x138>)
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	e001      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007320:	4b1f      	ldr	r3, [pc, #124]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007322:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007324:	f7ff f9d1 	bl	80066ca <LL_RCC_GetSysClkSource>
 8007328:	4603      	mov	r3, r0
 800732a:	2b0c      	cmp	r3, #12
 800732c:	d12f      	bne.n	800738e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800732e:	f7ff faa3 	bl	8006878 <LL_RCC_PLL_GetMainSource>
 8007332:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d003      	beq.n	8007342 <HAL_RCC_GetSysClockFreq+0xde>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d003      	beq.n	8007348 <HAL_RCC_GetSysClockFreq+0xe4>
 8007340:	e00d      	b.n	800735e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007342:	4b16      	ldr	r3, [pc, #88]	@ (800739c <HAL_RCC_GetSysClockFreq+0x138>)
 8007344:	60fb      	str	r3, [r7, #12]
        break;
 8007346:	e00d      	b.n	8007364 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007348:	f7ff f884 	bl	8006454 <LL_RCC_HSE_IsEnabledDiv2>
 800734c:	4603      	mov	r3, r0
 800734e:	2b01      	cmp	r3, #1
 8007350:	d102      	bne.n	8007358 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007352:	4b12      	ldr	r3, [pc, #72]	@ (800739c <HAL_RCC_GetSysClockFreq+0x138>)
 8007354:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007356:	e005      	b.n	8007364 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007358:	4b11      	ldr	r3, [pc, #68]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800735a:	60fb      	str	r3, [r7, #12]
        break;
 800735c:	e002      	b.n	8007364 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	60fb      	str	r3, [r7, #12]
        break;
 8007362:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007364:	f7ff fa66 	bl	8006834 <LL_RCC_PLL_GetN>
 8007368:	4602      	mov	r2, r0
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	fb03 f402 	mul.w	r4, r3, r2
 8007370:	f7ff fa77 	bl	8006862 <LL_RCC_PLL_GetDivider>
 8007374:	4603      	mov	r3, r0
 8007376:	091b      	lsrs	r3, r3, #4
 8007378:	3301      	adds	r3, #1
 800737a:	fbb4 f4f3 	udiv	r4, r4, r3
 800737e:	f7ff fa65 	bl	800684c <LL_RCC_PLL_GetR>
 8007382:	4603      	mov	r3, r0
 8007384:	0f5b      	lsrs	r3, r3, #29
 8007386:	3301      	adds	r3, #1
 8007388:	fbb4 f3f3 	udiv	r3, r4, r3
 800738c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800738e:	697b      	ldr	r3, [r7, #20]
}
 8007390:	4618      	mov	r0, r3
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	bd90      	pop	{r4, r7, pc}
 8007398:	0801dbc0 	.word	0x0801dbc0
 800739c:	00f42400 	.word	0x00f42400
 80073a0:	01e84800 	.word	0x01e84800

080073a4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073a4:	b598      	push	{r3, r4, r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80073a8:	f7ff ff5c 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 80073ac:	4604      	mov	r4, r0
 80073ae:	f7ff f9e6 	bl	800677e <LL_RCC_GetAHBPrescaler>
 80073b2:	4603      	mov	r3, r0
 80073b4:	091b      	lsrs	r3, r3, #4
 80073b6:	f003 030f 	and.w	r3, r3, #15
 80073ba:	4a03      	ldr	r2, [pc, #12]	@ (80073c8 <HAL_RCC_GetHCLKFreq+0x24>)
 80073bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	bd98      	pop	{r3, r4, r7, pc}
 80073c8:	0801db60 	.word	0x0801db60

080073cc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073cc:	b598      	push	{r3, r4, r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80073d0:	f7ff ffe8 	bl	80073a4 <HAL_RCC_GetHCLKFreq>
 80073d4:	4604      	mov	r4, r0
 80073d6:	f7ff f9ea 	bl	80067ae <LL_RCC_GetAPB1Prescaler>
 80073da:	4603      	mov	r3, r0
 80073dc:	0a1b      	lsrs	r3, r3, #8
 80073de:	4a03      	ldr	r2, [pc, #12]	@ (80073ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80073e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd98      	pop	{r3, r4, r7, pc}
 80073ec:	0801dba0 	.word	0x0801dba0

080073f0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073f0:	b598      	push	{r3, r4, r7, lr}
 80073f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80073f4:	f7ff ffd6 	bl	80073a4 <HAL_RCC_GetHCLKFreq>
 80073f8:	4604      	mov	r4, r0
 80073fa:	f7ff f9e3 	bl	80067c4 <LL_RCC_GetAPB2Prescaler>
 80073fe:	4603      	mov	r3, r0
 8007400:	0adb      	lsrs	r3, r3, #11
 8007402:	4a03      	ldr	r2, [pc, #12]	@ (8007410 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007408:	fa24 f303 	lsr.w	r3, r4, r3
}
 800740c:	4618      	mov	r0, r3
 800740e:	bd98      	pop	{r3, r4, r7, pc}
 8007410:	0801dba0 	.word	0x0801dba0

08007414 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007414:	b590      	push	{r4, r7, lr}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	091b      	lsrs	r3, r3, #4
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	4a10      	ldr	r2, [pc, #64]	@ (8007468 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800742a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800742c:	f7ff f9b2 	bl	8006794 <LL_RCC_GetAHB3Prescaler>
 8007430:	4603      	mov	r3, r0
 8007432:	091b      	lsrs	r3, r3, #4
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	4a0c      	ldr	r2, [pc, #48]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800743a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	fbb2 f3f3 	udiv	r3, r2, r3
 8007444:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	4a09      	ldr	r2, [pc, #36]	@ (8007470 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800744a:	fba2 2303 	umull	r2, r3, r2, r3
 800744e:	0c9c      	lsrs	r4, r3, #18
 8007450:	f7fe ff58 	bl	8006304 <HAL_PWREx_GetVoltageRange>
 8007454:	4603      	mov	r3, r0
 8007456:	4619      	mov	r1, r3
 8007458:	4620      	mov	r0, r4
 800745a:	f000 f80b 	bl	8007474 <RCC_SetFlashLatency>
 800745e:	4603      	mov	r3, r0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	bd90      	pop	{r4, r7, pc}
 8007468:	0801dbc0 	.word	0x0801dbc0
 800746c:	0801db60 	.word	0x0801db60
 8007470:	431bde83 	.word	0x431bde83

08007474 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08e      	sub	sp, #56	@ 0x38
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800747e:	4a3a      	ldr	r2, [pc, #232]	@ (8007568 <RCC_SetFlashLatency+0xf4>)
 8007480:	f107 0320 	add.w	r3, r7, #32
 8007484:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007488:	6018      	str	r0, [r3, #0]
 800748a:	3304      	adds	r3, #4
 800748c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800748e:	4a37      	ldr	r2, [pc, #220]	@ (800756c <RCC_SetFlashLatency+0xf8>)
 8007490:	f107 0318 	add.w	r3, r7, #24
 8007494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007498:	6018      	str	r0, [r3, #0]
 800749a:	3304      	adds	r3, #4
 800749c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800749e:	4a34      	ldr	r2, [pc, #208]	@ (8007570 <RCC_SetFlashLatency+0xfc>)
 80074a0:	f107 030c 	add.w	r3, r7, #12
 80074a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80074a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80074aa:	2300      	movs	r3, #0
 80074ac:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074b4:	d11b      	bne.n	80074ee <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80074b6:	2300      	movs	r3, #0
 80074b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80074ba:	e014      	b.n	80074e6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	3338      	adds	r3, #56	@ 0x38
 80074c2:	443b      	add	r3, r7
 80074c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80074c8:	461a      	mov	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d807      	bhi.n	80074e0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	3338      	adds	r3, #56	@ 0x38
 80074d6:	443b      	add	r3, r7
 80074d8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074de:	e021      	b.n	8007524 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	3301      	adds	r3, #1
 80074e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d9e7      	bls.n	80074bc <RCC_SetFlashLatency+0x48>
 80074ec:	e01a      	b.n	8007524 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80074ee:	2300      	movs	r3, #0
 80074f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074f2:	e014      	b.n	800751e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80074f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	3338      	adds	r3, #56	@ 0x38
 80074fa:	443b      	add	r3, r7
 80074fc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007500:	461a      	mov	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4293      	cmp	r3, r2
 8007506:	d807      	bhi.n	8007518 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	3338      	adds	r3, #56	@ 0x38
 800750e:	443b      	add	r3, r7
 8007510:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007516:	e005      	b.n	8007524 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751a:	3301      	adds	r3, #1
 800751c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800751e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007520:	2b02      	cmp	r3, #2
 8007522:	d9e7      	bls.n	80074f4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007524:	4b13      	ldr	r3, [pc, #76]	@ (8007574 <RCC_SetFlashLatency+0x100>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f023 0207 	bic.w	r2, r3, #7
 800752c:	4911      	ldr	r1, [pc, #68]	@ (8007574 <RCC_SetFlashLatency+0x100>)
 800752e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007530:	4313      	orrs	r3, r2
 8007532:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007534:	f7fa ffdc 	bl	80024f0 <HAL_GetTick>
 8007538:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800753a:	e008      	b.n	800754e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800753c:	f7fa ffd8 	bl	80024f0 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	d901      	bls.n	800754e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e007      	b.n	800755e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800754e:	4b09      	ldr	r3, [pc, #36]	@ (8007574 <RCC_SetFlashLatency+0x100>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007558:	429a      	cmp	r2, r3
 800755a:	d1ef      	bne.n	800753c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3738      	adds	r7, #56	@ 0x38
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	0801d244 	.word	0x0801d244
 800756c:	0801d24c 	.word	0x0801d24c
 8007570:	0801d254 	.word	0x0801d254
 8007574:	58004000 	.word	0x58004000

08007578 <LL_RCC_LSE_IsReady>:
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800757c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b02      	cmp	r3, #2
 800758a:	d101      	bne.n	8007590 <LL_RCC_LSE_IsReady+0x18>
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <LL_RCC_LSE_IsReady+0x1a>
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	46bd      	mov	sp, r7
 8007596:	bc80      	pop	{r7}
 8007598:	4770      	bx	lr

0800759a <LL_RCC_SetUSARTClockSource>:
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80075a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	0c1b      	lsrs	r3, r3, #16
 80075ae:	43db      	mvns	r3, r3
 80075b0:	401a      	ands	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075ba:	4313      	orrs	r3, r2
 80075bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr

080075ca <LL_RCC_SetI2SClockSource>:
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80075d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr

080075f4 <LL_RCC_SetLPUARTClockSource>:
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80075fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007604:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007608:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4313      	orrs	r3, r2
 8007610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	bc80      	pop	{r7}
 800761c:	4770      	bx	lr

0800761e <LL_RCC_SetI2CClockSource>:
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800762a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	091b      	lsrs	r3, r3, #4
 8007632:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007636:	43db      	mvns	r3, r3
 8007638:	401a      	ands	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007642:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007646:	4313      	orrs	r3, r2
 8007648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	bc80      	pop	{r7}
 8007654:	4770      	bx	lr

08007656 <LL_RCC_SetLPTIMClockSource>:
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800765e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007662:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	0c1b      	lsrs	r3, r3, #16
 800766a:	041b      	lsls	r3, r3, #16
 800766c:	43db      	mvns	r3, r3
 800766e:	401a      	ands	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	041b      	lsls	r3, r3, #16
 8007674:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007678:	4313      	orrs	r3, r2
 800767a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr

08007688 <LL_RCC_SetRNGClockSource>:
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007698:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800769c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr

080076b2 <LL_RCC_SetADCClockSource>:
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80076ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80076c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bc80      	pop	{r7}
 80076da:	4770      	bx	lr

080076dc <LL_RCC_SetRTCClockSource>:
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80076e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	bc80      	pop	{r7}
 8007704:	4770      	bx	lr

08007706 <LL_RCC_GetRTCClockSource>:
{
 8007706:	b480      	push	{r7}
 8007708:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800770a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800770e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007716:	4618      	mov	r0, r3
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr

0800771e <LL_RCC_ForceBackupDomainReset>:
{
 800771e:	b480      	push	{r7}
 8007720:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800772a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800772e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007736:	bf00      	nop
 8007738:	46bd      	mov	sp, r7
 800773a:	bc80      	pop	{r7}
 800773c:	4770      	bx	lr

0800773e <LL_RCC_ReleaseBackupDomainReset>:
{
 800773e:	b480      	push	{r7}
 8007740:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800774a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800774e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007752:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007756:	bf00      	nop
 8007758:	46bd      	mov	sp, r7
 800775a:	bc80      	pop	{r7}
 800775c:	4770      	bx	lr
	...

08007760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800776c:	2300      	movs	r3, #0
 800776e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007770:	2300      	movs	r3, #0
 8007772:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d058      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007780:	f7fe fd7e 	bl	8006280 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007784:	f7fa feb4 	bl	80024f0 <HAL_GetTick>
 8007788:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800778a:	e009      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800778c:	f7fa feb0 	bl	80024f0 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d902      	bls.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	74fb      	strb	r3, [r7, #19]
        break;
 800779e:	e006      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80077a0:	4b7b      	ldr	r3, [pc, #492]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ac:	d1ee      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80077ae:	7cfb      	ldrb	r3, [r7, #19]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d13c      	bne.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80077b4:	f7ff ffa7 	bl	8007706 <LL_RCC_GetRTCClockSource>
 80077b8:	4602      	mov	r2, r0
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077be:	429a      	cmp	r2, r3
 80077c0:	d00f      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80077c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ce:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077d0:	f7ff ffa5 	bl	800771e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077d4:	f7ff ffb3 	bl	800773e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80077d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d014      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ec:	f7fa fe80 	bl	80024f0 <HAL_GetTick>
 80077f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80077f2:	e00b      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f4:	f7fa fe7c 	bl	80024f0 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007802:	4293      	cmp	r3, r2
 8007804:	d902      	bls.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	74fb      	strb	r3, [r7, #19]
            break;
 800780a:	e004      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800780c:	f7ff feb4 	bl	8007578 <LL_RCC_LSE_IsReady>
 8007810:	4603      	mov	r3, r0
 8007812:	2b01      	cmp	r3, #1
 8007814:	d1ee      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007816:	7cfb      	ldrb	r3, [r7, #19]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d105      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff ff5b 	bl	80076dc <LL_RCC_SetRTCClockSource>
 8007826:	e004      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007828:	7cfb      	ldrb	r3, [r7, #19]
 800782a:	74bb      	strb	r3, [r7, #18]
 800782c:	e001      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782e:	7cfb      	ldrb	r3, [r7, #19]
 8007830:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d004      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff fea9 	bl	800759a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d004      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff fe9e 	bl	800759a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b00      	cmp	r3, #0
 8007868:	d004      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	4618      	mov	r0, r3
 8007870:	f7ff fec0 	bl	80075f4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800787c:	2b00      	cmp	r3, #0
 800787e:	d004      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a1b      	ldr	r3, [r3, #32]
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff fee6 	bl	8007656 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007892:	2b00      	cmp	r3, #0
 8007894:	d004      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fedb 	bl	8007656 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff fed0 	bl	8007656 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff fea9 	bl	800761e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff fe9e 	bl	800761e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff fe93 	bl	800761e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b00      	cmp	r3, #0
 8007902:	d011      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff fe5e 	bl	80075ca <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007916:	d107      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007926:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d010      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff fea5 	bl	8007688 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007942:	2b00      	cmp	r3, #0
 8007944:	d107      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007950:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007954:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d011      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007966:	4618      	mov	r0, r3
 8007968:	f7ff fea3 	bl	80076b2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007974:	d107      	bne.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007984:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007986:	7cbb      	ldrb	r3, [r7, #18]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	58000400 	.word	0x58000400

08007994 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d071      	beq.n	8007a8a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d106      	bne.n	80079c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fa fa5a 	bl	8001e74 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80079c8:	4b32      	ldr	r3, [pc, #200]	@ (8007a94 <HAL_RTC_Init+0x100>)
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f003 0310 	and.w	r3, r3, #16
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d051      	beq.n	8007a78 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079d4:	4b2f      	ldr	r3, [pc, #188]	@ (8007a94 <HAL_RTC_Init+0x100>)
 80079d6:	22ca      	movs	r2, #202	@ 0xca
 80079d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80079da:	4b2e      	ldr	r3, [pc, #184]	@ (8007a94 <HAL_RTC_Init+0x100>)
 80079dc:	2253      	movs	r2, #83	@ 0x53
 80079de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa11 	bl	8007e08 <RTC_EnterInitMode>
 80079e6:	4603      	mov	r3, r0
 80079e8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d13f      	bne.n	8007a70 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80079f0:	4b28      	ldr	r3, [pc, #160]	@ (8007a94 <HAL_RTC_Init+0x100>)
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	4a27      	ldr	r2, [pc, #156]	@ (8007a94 <HAL_RTC_Init+0x100>)
 80079f6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80079fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079fe:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007a00:	4b24      	ldr	r3, [pc, #144]	@ (8007a94 <HAL_RTC_Init+0x100>)
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6859      	ldr	r1, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	4319      	orrs	r1, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	430b      	orrs	r3, r1
 8007a14:	491f      	ldr	r1, [pc, #124]	@ (8007a94 <HAL_RTC_Init+0x100>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	041b      	lsls	r3, r3, #16
 8007a24:	491b      	ldr	r1, [pc, #108]	@ (8007a94 <HAL_RTC_Init+0x100>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007a94 <HAL_RTC_Init+0x100>)
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	4915      	ldr	r1, [pc, #84]	@ (8007a94 <HAL_RTC_Init+0x100>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa14 	bl	8007e70 <RTC_ExitInitMode>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10e      	bne.n	8007a70 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8007a52:	4b10      	ldr	r3, [pc, #64]	@ (8007a94 <HAL_RTC_Init+0x100>)
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a19      	ldr	r1, [r3, #32]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	4319      	orrs	r1, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	490a      	ldr	r1, [pc, #40]	@ (8007a94 <HAL_RTC_Init+0x100>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a70:	4b08      	ldr	r3, [pc, #32]	@ (8007a94 <HAL_RTC_Init+0x100>)
 8007a72:	22ff      	movs	r2, #255	@ 0xff
 8007a74:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a76:	e001      	b.n	8007a7c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	40002800 	.word	0x40002800

08007a98 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007a98:	b590      	push	{r4, r7, lr}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <HAL_RTC_SetAlarm_IT+0x1e>
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e0f3      	b.n	8007c9e <HAL_RTC_SetAlarm_IT+0x206>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007ac6:	4b78      	ldr	r3, [pc, #480]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ace:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ad6:	d06a      	beq.n	8007bae <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d13a      	bne.n	8007b54 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007ade:	4b72      	ldr	r3, [pc, #456]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2200      	movs	r2, #0
 8007aee:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 f9f5 	bl	8007eec <RTC_ByteToBcd2>
 8007b02:	4603      	mov	r3, r0
 8007b04:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 f9ee 	bl	8007eec <RTC_ByteToBcd2>
 8007b10:	4603      	mov	r3, r0
 8007b12:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007b14:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	789b      	ldrb	r3, [r3, #2]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f9e6 	bl	8007eec <RTC_ByteToBcd2>
 8007b20:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b22:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	78db      	ldrb	r3, [r3, #3]
 8007b2a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007b2c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 f9d8 	bl	8007eec <RTC_ByteToBcd2>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007b40:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007b48:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	617b      	str	r3, [r7, #20]
 8007b52:	e02c      	b.n	8007bae <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8007b5c:	d00d      	beq.n	8007b7a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b66:	d008      	beq.n	8007b7a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007b68:	4b4f      	ldr	r3, [pc, #316]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2200      	movs	r2, #0
 8007b78:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	785b      	ldrb	r3, [r3, #1]
 8007b84:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007b86:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b8c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	78db      	ldrb	r3, [r3, #3]
 8007b92:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007b94:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b9c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007b9e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007ba4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007baa:	4313      	orrs	r3, r2
 8007bac:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bae:	4b3e      	ldr	r3, [pc, #248]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007bb0:	22ca      	movs	r2, #202	@ 0xca
 8007bb2:	625a      	str	r2, [r3, #36]	@ 0x24
 8007bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007bb6:	2253      	movs	r2, #83	@ 0x53
 8007bb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bc2:	d12c      	bne.n	8007c1e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007bc4:	4b38      	ldr	r3, [pc, #224]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	4a37      	ldr	r2, [pc, #220]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007bca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007bce:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007bd0:	4b35      	ldr	r3, [pc, #212]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bdc:	d107      	bne.n	8007bee <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	4930      	ldr	r1, [pc, #192]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	644b      	str	r3, [r1, #68]	@ 0x44
 8007bec:	e006      	b.n	8007bfc <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007bee:	4a2e      	ldr	r2, [pc, #184]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c08:	f043 0201 	orr.w	r2, r3, #1
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007c10:	4b25      	ldr	r3, [pc, #148]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	4a24      	ldr	r2, [pc, #144]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c16:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8007c1a:	6193      	str	r3, [r2, #24]
 8007c1c:	e02b      	b.n	8007c76 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007c1e:	4b22      	ldr	r3, [pc, #136]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	4a21      	ldr	r2, [pc, #132]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c24:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007c28:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c36:	d107      	bne.n	8007c48 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	699a      	ldr	r2, [r3, #24]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	4919      	ldr	r1, [pc, #100]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8007c46:	e006      	b.n	8007c56 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007c48:	4a17      	ldr	r2, [pc, #92]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007c4e:	4a16      	ldr	r2, [pc, #88]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007c56:	4a14      	ldr	r2, [pc, #80]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c62:	f043 0202 	orr.w	r2, r3, #2
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c70:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8007c74:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007c76:	4b0d      	ldr	r3, [pc, #52]	@ (8007cac <HAL_RTC_SetAlarm_IT+0x214>)
 8007c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8007cac <HAL_RTC_SetAlarm_IT+0x214>)
 8007c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c82:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c86:	4b08      	ldr	r3, [pc, #32]	@ (8007ca8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007c88:	22ff      	movs	r2, #255	@ 0xff
 8007c8a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd90      	pop	{r4, r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40002800 	.word	0x40002800
 8007cac:	58000800 	.word	0x58000800

08007cb0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_RTC_DeactivateAlarm+0x18>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e048      	b.n	8007d5a <HAL_RTC_DeactivateAlarm+0xaa>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cd8:	4b22      	ldr	r3, [pc, #136]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007cda:	22ca      	movs	r2, #202	@ 0xca
 8007cdc:	625a      	str	r2, [r3, #36]	@ 0x24
 8007cde:	4b21      	ldr	r3, [pc, #132]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007ce0:	2253      	movs	r2, #83	@ 0x53
 8007ce2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cea:	d115      	bne.n	8007d18 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007cec:	4b1d      	ldr	r3, [pc, #116]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007cf2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007cf6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cfc:	4a19      	ldr	r2, [pc, #100]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007cfe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d02:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d08:	f023 0201 	bic.w	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007d10:	4b14      	ldr	r3, [pc, #80]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007d12:	2201      	movs	r2, #1
 8007d14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007d16:	e014      	b.n	8007d42 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007d18:	4b12      	ldr	r3, [pc, #72]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	4a11      	ldr	r2, [pc, #68]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007d1e:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007d22:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007d24:	4b0f      	ldr	r3, [pc, #60]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d28:	4a0e      	ldr	r2, [pc, #56]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007d2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d34:	f023 0202 	bic.w	r2, r3, #2
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007d3c:	4b09      	ldr	r3, [pc, #36]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007d3e:	2202      	movs	r2, #2
 8007d40:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d42:	4b08      	ldr	r3, [pc, #32]	@ (8007d64 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007d44:	22ff      	movs	r2, #255	@ 0xff
 8007d46:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr
 8007d64:	40002800 	.word	0x40002800

08007d68 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007d70:	4b11      	ldr	r3, [pc, #68]	@ (8007db8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007d72:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d005      	beq.n	8007d92 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007d86:	4b0c      	ldr	r3, [pc, #48]	@ (8007db8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007d88:	2201      	movs	r2, #1
 8007d8a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7fa fd90 	bl	80028b2 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007d9c:	4b06      	ldr	r3, [pc, #24]	@ (8007db8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007d9e:	2202      	movs	r2, #2
 8007da0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f94a 	bl	800803c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007db0:	bf00      	nop
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	40002800 	.word	0x40002800

08007dbc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8007e04 <HAL_RTC_WaitForSynchro+0x48>)
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8007e04 <HAL_RTC_WaitForSynchro+0x48>)
 8007dca:	f023 0320 	bic.w	r3, r3, #32
 8007dce:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007dd0:	f7fa fb8e 	bl	80024f0 <HAL_GetTick>
 8007dd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007dd6:	e009      	b.n	8007dec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007dd8:	f7fa fb8a 	bl	80024f0 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007de6:	d901      	bls.n	8007dec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e006      	b.n	8007dfa <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007dec:	4b05      	ldr	r3, [pc, #20]	@ (8007e04 <HAL_RTC_WaitForSynchro+0x48>)
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0ef      	beq.n	8007dd8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	40002800 	.word	0x40002800

08007e08 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007e14:	4b15      	ldr	r3, [pc, #84]	@ (8007e6c <RTC_EnterInitMode+0x64>)
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d120      	bne.n	8007e62 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007e20:	4b12      	ldr	r3, [pc, #72]	@ (8007e6c <RTC_EnterInitMode+0x64>)
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	4a11      	ldr	r2, [pc, #68]	@ (8007e6c <RTC_EnterInitMode+0x64>)
 8007e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e2a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007e2c:	f7fa fb60 	bl	80024f0 <HAL_GetTick>
 8007e30:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007e32:	e00d      	b.n	8007e50 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007e34:	f7fa fb5c 	bl	80024f0 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e42:	d905      	bls.n	8007e50 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2203      	movs	r2, #3
 8007e4c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007e50:	4b06      	ldr	r3, [pc, #24]	@ (8007e6c <RTC_EnterInitMode+0x64>)
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d102      	bne.n	8007e62 <RTC_EnterInitMode+0x5a>
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d1e8      	bne.n	8007e34 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	40002800 	.word	0x40002800

08007e70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee8 <RTC_ExitInitMode+0x78>)
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	4a19      	ldr	r2, [pc, #100]	@ (8007ee8 <RTC_ExitInitMode+0x78>)
 8007e82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e86:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007e88:	4b17      	ldr	r3, [pc, #92]	@ (8007ee8 <RTC_ExitInitMode+0x78>)
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	f003 0320 	and.w	r3, r3, #32
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10c      	bne.n	8007eae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff ff91 	bl	8007dbc <HAL_RTC_WaitForSynchro>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01e      	beq.n	8007ede <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2203      	movs	r2, #3
 8007ea4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	73fb      	strb	r3, [r7, #15]
 8007eac:	e017      	b.n	8007ede <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007eae:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee8 <RTC_ExitInitMode+0x78>)
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8007ee8 <RTC_ExitInitMode+0x78>)
 8007eb4:	f023 0320 	bic.w	r3, r3, #32
 8007eb8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff ff7e 	bl	8007dbc <HAL_RTC_WaitForSynchro>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2203      	movs	r2, #3
 8007eca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007ed2:	4b05      	ldr	r3, [pc, #20]	@ (8007ee8 <RTC_ExitInitMode+0x78>)
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	4a04      	ldr	r2, [pc, #16]	@ (8007ee8 <RTC_ExitInitMode+0x78>)
 8007ed8:	f043 0320 	orr.w	r3, r3, #32
 8007edc:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	40002800 	.word	0x40002800

08007eec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007efa:	79fb      	ldrb	r3, [r7, #7]
 8007efc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007efe:	e005      	b.n	8007f0c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3301      	adds	r3, #1
 8007f04:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007f06:	7afb      	ldrb	r3, [r7, #11]
 8007f08:	3b0a      	subs	r3, #10
 8007f0a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007f0c:	7afb      	ldrb	r3, [r7, #11]
 8007f0e:	2b09      	cmp	r3, #9
 8007f10:	d8f6      	bhi.n	8007f00 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	7afb      	ldrb	r3, [r7, #11]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	b2db      	uxtb	r3, r3
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bc80      	pop	{r7}
 8007f28:	4770      	bx	lr
	...

08007f2c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d101      	bne.n	8007f42 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e01f      	b.n	8007f82 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f52:	4b0e      	ldr	r3, [pc, #56]	@ (8007f8c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007f54:	22ca      	movs	r2, #202	@ 0xca
 8007f56:	625a      	str	r2, [r3, #36]	@ 0x24
 8007f58:	4b0c      	ldr	r3, [pc, #48]	@ (8007f8c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007f5a:	2253      	movs	r2, #83	@ 0x53
 8007f5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f8c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	4a0a      	ldr	r2, [pc, #40]	@ (8007f8c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007f64:	f043 0320 	orr.w	r3, r3, #32
 8007f68:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f6a:	4b08      	ldr	r3, [pc, #32]	@ (8007f8c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007f6c:	22ff      	movs	r2, #255	@ 0xff
 8007f6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bc80      	pop	{r7}
 8007f8a:	4770      	bx	lr
 8007f8c:	40002800 	.word	0x40002800

08007f90 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d101      	bne.n	8007fa6 <HAL_RTCEx_SetSSRU_IT+0x16>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e027      	b.n	8007ff6 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fb6:	4b12      	ldr	r3, [pc, #72]	@ (8008000 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007fb8:	22ca      	movs	r2, #202	@ 0xca
 8007fba:	625a      	str	r2, [r3, #36]	@ 0x24
 8007fbc:	4b10      	ldr	r3, [pc, #64]	@ (8008000 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007fbe:	2253      	movs	r2, #83	@ 0x53
 8007fc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8008000 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8008000 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fcc:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007fce:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8008004 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007fd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007fda:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fde:	4b08      	ldr	r3, [pc, #32]	@ (8008000 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007fe0:	22ff      	movs	r2, #255	@ 0xff
 8007fe2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr
 8008000:	40002800 	.word	0x40002800
 8008004:	58000800 	.word	0x58000800

08008008 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008010:	4b09      	ldr	r3, [pc, #36]	@ (8008038 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800801c:	4b06      	ldr	r3, [pc, #24]	@ (8008038 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800801e:	2240      	movs	r2, #64	@ 0x40
 8008020:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7fa fc4f 	bl	80028c6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	40002800 	.word	0x40002800

0800803c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	bc80      	pop	{r7}
 800804c:	4770      	bx	lr
	...

08008050 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800805c:	4b07      	ldr	r3, [pc, #28]	@ (800807c <HAL_RTCEx_BKUPWrite+0x2c>)
 800805e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	4413      	add	r3, r2
 8008068:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	601a      	str	r2, [r3, #0]
}
 8008070:	bf00      	nop
 8008072:	371c      	adds	r7, #28
 8008074:	46bd      	mov	sp, r7
 8008076:	bc80      	pop	{r7}
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	4000b100 	.word	0x4000b100

08008080 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800808a:	4b07      	ldr	r3, [pc, #28]	@ (80080a8 <HAL_RTCEx_BKUPRead+0x28>)
 800808c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4413      	add	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	4000b100 	.word	0x4000b100

080080ac <LL_PWR_SetRadioBusyTrigger>:
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80080b4:	4b06      	ldr	r3, [pc, #24]	@ (80080d0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80080bc:	4904      	ldr	r1, [pc, #16]	@ (80080d0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	608b      	str	r3, [r1, #8]
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	58000400 	.word	0x58000400

080080d4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80080d4:	b480      	push	{r7}
 80080d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80080d8:	4b05      	ldr	r3, [pc, #20]	@ (80080f0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80080da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080de:	4a04      	ldr	r2, [pc, #16]	@ (80080f0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80080e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80080e8:	bf00      	nop
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bc80      	pop	{r7}
 80080ee:	4770      	bx	lr
 80080f0:	58000400 	.word	0x58000400

080080f4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80080f4:	b480      	push	{r7}
 80080f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80080f8:	4b05      	ldr	r3, [pc, #20]	@ (8008110 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80080fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080fe:	4a04      	ldr	r2, [pc, #16]	@ (8008110 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008100:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008108:	bf00      	nop
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr
 8008110:	58000400 	.word	0x58000400

08008114 <LL_PWR_ClearFlag_RFBUSY>:
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008118:	4b03      	ldr	r3, [pc, #12]	@ (8008128 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800811a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800811e:	619a      	str	r2, [r3, #24]
}
 8008120:	bf00      	nop
 8008122:	46bd      	mov	sp, r7
 8008124:	bc80      	pop	{r7}
 8008126:	4770      	bx	lr
 8008128:	58000400 	.word	0x58000400

0800812c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008130:	4b06      	ldr	r3, [pc, #24]	@ (800814c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	f003 0302 	and.w	r3, r3, #2
 8008138:	2b02      	cmp	r3, #2
 800813a:	d101      	bne.n	8008140 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800813c:	2301      	movs	r3, #1
 800813e:	e000      	b.n	8008142 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	46bd      	mov	sp, r7
 8008146:	bc80      	pop	{r7}
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	58000400 	.word	0x58000400

08008150 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8008150:	b480      	push	{r7}
 8008152:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008154:	4b06      	ldr	r3, [pc, #24]	@ (8008170 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	f003 0304 	and.w	r3, r3, #4
 800815c:	2b04      	cmp	r3, #4
 800815e:	d101      	bne.n	8008164 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	58000400 	.word	0x58000400

08008174 <LL_RCC_RF_DisableReset>:
{
 8008174:	b480      	push	{r7}
 8008176:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800817c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008180:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008184:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008188:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800818c:	bf00      	nop
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr

08008194 <LL_RCC_IsRFUnderReset>:
{
 8008194:	b480      	push	{r7}
 8008196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800819c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081a8:	d101      	bne.n	80081ae <LL_RCC_IsRFUnderReset+0x1a>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e000      	b.n	80081b0 <LL_RCC_IsRFUnderReset+0x1c>
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bc80      	pop	{r7}
 80081b6:	4770      	bx	lr

080081b8 <LL_EXTI_EnableIT_32_63>:
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80081c0:	4b06      	ldr	r3, [pc, #24]	@ (80081dc <LL_EXTI_EnableIT_32_63+0x24>)
 80081c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80081c6:	4905      	ldr	r1, [pc, #20]	@ (80081dc <LL_EXTI_EnableIT_32_63+0x24>)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bc80      	pop	{r7}
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	58000800 	.word	0x58000800

080081e0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d103      	bne.n	80081f6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	73fb      	strb	r3, [r7, #15]
    return status;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	e052      	b.n	800829c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	799b      	ldrb	r3, [r3, #6]
 80081fe:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <HAL_SUBGHZ_Init+0x2c>
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	2b03      	cmp	r3, #3
 800820a:	d109      	bne.n	8008220 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7f9 ff5c 	bl	80020d0 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8008218:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800821c:	f7ff ffcc 	bl	80081b8 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d126      	bne.n	8008274 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2202      	movs	r2, #2
 800822a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800822c:	f7ff ffa2 	bl	8008174 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008230:	4b1c      	ldr	r3, [pc, #112]	@ (80082a4 <HAL_SUBGHZ_Init+0xc4>)
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	4613      	mov	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	0cdb      	lsrs	r3, r3, #19
 800823e:	2264      	movs	r2, #100	@ 0x64
 8008240:	fb02 f303 	mul.w	r3, r2, r3
 8008244:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d105      	bne.n	8008258 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	609a      	str	r2, [r3, #8]
        break;
 8008256:	e007      	b.n	8008268 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	3b01      	subs	r3, #1
 800825c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800825e:	f7ff ff99 	bl	8008194 <LL_RCC_IsRFUnderReset>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1ee      	bne.n	8008246 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008268:	f7ff ff34 	bl	80080d4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800826c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008270:	f7ff ff1c 	bl	80080ac <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8008274:	f7ff ff4e 	bl	8008114 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fabc 	bl	8008800 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	719a      	strb	r2, [r3, #6]

  return status;
 800829a:	7bfb      	ldrb	r3, [r7, #15]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20000000 	.word	0x20000000

080082a8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	607a      	str	r2, [r7, #4]
 80082b2:	461a      	mov	r2, r3
 80082b4:	460b      	mov	r3, r1
 80082b6:	817b      	strh	r3, [r7, #10]
 80082b8:	4613      	mov	r3, r2
 80082ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	799b      	ldrb	r3, [r3, #6]
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d14a      	bne.n	800835c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	795b      	ldrb	r3, [r3, #5]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80082ce:	2302      	movs	r3, #2
 80082d0:	e045      	b.n	800835e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2202      	movs	r2, #2
 80082dc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 fb5c 	bl	800899c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80082e4:	f7ff ff06 	bl	80080f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80082e8:	210d      	movs	r1, #13
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 faa8 	bl	8008840 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80082f0:	897b      	ldrh	r3, [r7, #10]
 80082f2:	0a1b      	lsrs	r3, r3, #8
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	4619      	mov	r1, r3
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 faa0 	bl	8008840 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008300:	897b      	ldrh	r3, [r7, #10]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	4619      	mov	r1, r3
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fa9a 	bl	8008840 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800830c:	2300      	movs	r3, #0
 800830e:	82bb      	strh	r3, [r7, #20]
 8008310:	e00a      	b.n	8008328 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008312:	8abb      	ldrh	r3, [r7, #20]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	4413      	add	r3, r2
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	4619      	mov	r1, r3
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 fa8f 	bl	8008840 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008322:	8abb      	ldrh	r3, [r7, #20]
 8008324:	3301      	adds	r3, #1
 8008326:	82bb      	strh	r3, [r7, #20]
 8008328:	8aba      	ldrh	r2, [r7, #20]
 800832a:	893b      	ldrh	r3, [r7, #8]
 800832c:	429a      	cmp	r2, r3
 800832e:	d3f0      	bcc.n	8008312 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008330:	f7ff fed0 	bl	80080d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 fb55 	bl	80089e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]
 8008346:	e001      	b.n	800834c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2201      	movs	r2, #1
 8008350:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	715a      	strb	r2, [r3, #5]

    return status;
 8008358:	7dfb      	ldrb	r3, [r7, #23]
 800835a:	e000      	b.n	800835e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800835c:	2302      	movs	r3, #2
  }
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b088      	sub	sp, #32
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	461a      	mov	r2, r3
 8008372:	460b      	mov	r3, r1
 8008374:	817b      	strh	r3, [r7, #10]
 8008376:	4613      	mov	r3, r2
 8008378:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	799b      	ldrb	r3, [r3, #6]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b01      	cmp	r3, #1
 8008386:	d14a      	bne.n	800841e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	795b      	ldrb	r3, [r3, #5]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008390:	2302      	movs	r3, #2
 8008392:	e045      	b.n	8008420 <HAL_SUBGHZ_ReadRegisters+0xba>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 fafe 	bl	800899c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80083a0:	f7ff fea8 	bl	80080f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80083a4:	211d      	movs	r1, #29
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 fa4a 	bl	8008840 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80083ac:	897b      	ldrh	r3, [r7, #10]
 80083ae:	0a1b      	lsrs	r3, r3, #8
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	4619      	mov	r1, r3
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 fa42 	bl	8008840 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80083bc:	897b      	ldrh	r3, [r7, #10]
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	4619      	mov	r1, r3
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 fa3c 	bl	8008840 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80083c8:	2100      	movs	r1, #0
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 fa38 	bl	8008840 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80083d0:	2300      	movs	r3, #0
 80083d2:	82fb      	strh	r3, [r7, #22]
 80083d4:	e009      	b.n	80083ea <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80083d6:	69b9      	ldr	r1, [r7, #24]
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 fa87 	bl	80088ec <SUBGHZSPI_Receive>
      pData++;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	3301      	adds	r3, #1
 80083e2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80083e4:	8afb      	ldrh	r3, [r7, #22]
 80083e6:	3301      	adds	r3, #1
 80083e8:	82fb      	strh	r3, [r7, #22]
 80083ea:	8afa      	ldrh	r2, [r7, #22]
 80083ec:	893b      	ldrh	r3, [r7, #8]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d3f1      	bcc.n	80083d6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80083f2:	f7ff fe6f 	bl	80080d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 faf4 	bl	80089e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	77fb      	strb	r3, [r7, #31]
 8008408:	e001      	b.n	800840e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	715a      	strb	r2, [r3, #5]

    return status;
 800841a:	7ffb      	ldrb	r3, [r7, #31]
 800841c:	e000      	b.n	8008420 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800841e:	2302      	movs	r3, #2
  }
}
 8008420:	4618      	mov	r0, r3
 8008422:	3720      	adds	r7, #32
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	607a      	str	r2, [r7, #4]
 8008432:	461a      	mov	r2, r3
 8008434:	460b      	mov	r3, r1
 8008436:	72fb      	strb	r3, [r7, #11]
 8008438:	4613      	mov	r3, r2
 800843a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	799b      	ldrb	r3, [r3, #6]
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b01      	cmp	r3, #1
 8008444:	d14a      	bne.n	80084dc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	795b      	ldrb	r3, [r3, #5]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d101      	bne.n	8008452 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800844e:	2302      	movs	r3, #2
 8008450:	e045      	b.n	80084de <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2201      	movs	r2, #1
 8008456:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 fa9f 	bl	800899c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	2b84      	cmp	r3, #132	@ 0x84
 8008462:	d002      	beq.n	800846a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8008464:	7afb      	ldrb	r3, [r7, #11]
 8008466:	2b94      	cmp	r3, #148	@ 0x94
 8008468:	d103      	bne.n	8008472 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	711a      	strb	r2, [r3, #4]
 8008470:	e002      	b.n	8008478 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008478:	f7ff fe3c 	bl	80080f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800847c:	7afb      	ldrb	r3, [r7, #11]
 800847e:	4619      	mov	r1, r3
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f9dd 	bl	8008840 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008486:	2300      	movs	r3, #0
 8008488:	82bb      	strh	r3, [r7, #20]
 800848a:	e00a      	b.n	80084a2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800848c:	8abb      	ldrh	r3, [r7, #20]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	4413      	add	r3, r2
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	4619      	mov	r1, r3
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 f9d2 	bl	8008840 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800849c:	8abb      	ldrh	r3, [r7, #20]
 800849e:	3301      	adds	r3, #1
 80084a0:	82bb      	strh	r3, [r7, #20]
 80084a2:	8aba      	ldrh	r2, [r7, #20]
 80084a4:	893b      	ldrh	r3, [r7, #8]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d3f0      	bcc.n	800848c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80084aa:	f7ff fe13 	bl	80080d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80084ae:	7afb      	ldrb	r3, [r7, #11]
 80084b0:	2b84      	cmp	r3, #132	@ 0x84
 80084b2:	d002      	beq.n	80084ba <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 fa95 	bl	80089e4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	75fb      	strb	r3, [r7, #23]
 80084c6:	e001      	b.n	80084cc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	715a      	strb	r2, [r3, #5]

    return status;
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
 80084da:	e000      	b.n	80084de <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80084dc:	2302      	movs	r3, #2
  }
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b088      	sub	sp, #32
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	461a      	mov	r2, r3
 80084f2:	460b      	mov	r3, r1
 80084f4:	72fb      	strb	r3, [r7, #11]
 80084f6:	4613      	mov	r3, r2
 80084f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	799b      	ldrb	r3, [r3, #6]
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b01      	cmp	r3, #1
 8008506:	d13d      	bne.n	8008584 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	795b      	ldrb	r3, [r3, #5]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008510:	2302      	movs	r3, #2
 8008512:	e038      	b.n	8008586 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2201      	movs	r2, #1
 8008518:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 fa3e 	bl	800899c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008520:	f7ff fde8 	bl	80080f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008524:	7afb      	ldrb	r3, [r7, #11]
 8008526:	4619      	mov	r1, r3
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 f989 	bl	8008840 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800852e:	2100      	movs	r1, #0
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f985 	bl	8008840 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008536:	2300      	movs	r3, #0
 8008538:	82fb      	strh	r3, [r7, #22]
 800853a:	e009      	b.n	8008550 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800853c:	69b9      	ldr	r1, [r7, #24]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 f9d4 	bl	80088ec <SUBGHZSPI_Receive>
      pData++;
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	3301      	adds	r3, #1
 8008548:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800854a:	8afb      	ldrh	r3, [r7, #22]
 800854c:	3301      	adds	r3, #1
 800854e:	82fb      	strh	r3, [r7, #22]
 8008550:	8afa      	ldrh	r2, [r7, #22]
 8008552:	893b      	ldrh	r3, [r7, #8]
 8008554:	429a      	cmp	r2, r3
 8008556:	d3f1      	bcc.n	800853c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008558:	f7ff fdbc 	bl	80080d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 fa41 	bl	80089e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	77fb      	strb	r3, [r7, #31]
 800856e:	e001      	b.n	8008574 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2201      	movs	r2, #1
 8008578:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	715a      	strb	r2, [r3, #5]

    return status;
 8008580:	7ffb      	ldrb	r3, [r7, #31]
 8008582:	e000      	b.n	8008586 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008584:	2302      	movs	r3, #2
  }
}
 8008586:	4618      	mov	r0, r3
 8008588:	3720      	adds	r7, #32
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b086      	sub	sp, #24
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	461a      	mov	r2, r3
 800859a:	460b      	mov	r3, r1
 800859c:	72fb      	strb	r3, [r7, #11]
 800859e:	4613      	mov	r3, r2
 80085a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	799b      	ldrb	r3, [r3, #6]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d13e      	bne.n	800862a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	795b      	ldrb	r3, [r3, #5]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d101      	bne.n	80085b8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80085b4:	2302      	movs	r3, #2
 80085b6:	e039      	b.n	800862c <HAL_SUBGHZ_WriteBuffer+0x9e>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 f9ec 	bl	800899c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80085c4:	f7ff fd96 	bl	80080f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80085c8:	210e      	movs	r1, #14
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 f938 	bl	8008840 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80085d0:	7afb      	ldrb	r3, [r7, #11]
 80085d2:	4619      	mov	r1, r3
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 f933 	bl	8008840 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80085da:	2300      	movs	r3, #0
 80085dc:	82bb      	strh	r3, [r7, #20]
 80085de:	e00a      	b.n	80085f6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80085e0:	8abb      	ldrh	r3, [r7, #20]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	4413      	add	r3, r2
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	4619      	mov	r1, r3
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 f928 	bl	8008840 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80085f0:	8abb      	ldrh	r3, [r7, #20]
 80085f2:	3301      	adds	r3, #1
 80085f4:	82bb      	strh	r3, [r7, #20]
 80085f6:	8aba      	ldrh	r2, [r7, #20]
 80085f8:	893b      	ldrh	r3, [r7, #8]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d3f0      	bcc.n	80085e0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80085fe:	f7ff fd69 	bl	80080d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 f9ee 	bl	80089e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	75fb      	strb	r3, [r7, #23]
 8008614:	e001      	b.n	800861a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	715a      	strb	r2, [r3, #5]

    return status;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	e000      	b.n	800862c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800862a:	2302      	movs	r3, #2
  }
}
 800862c:	4618      	mov	r0, r3
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	607a      	str	r2, [r7, #4]
 800863e:	461a      	mov	r2, r3
 8008640:	460b      	mov	r3, r1
 8008642:	72fb      	strb	r3, [r7, #11]
 8008644:	4613      	mov	r3, r2
 8008646:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	799b      	ldrb	r3, [r3, #6]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b01      	cmp	r3, #1
 8008654:	d141      	bne.n	80086da <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	795b      	ldrb	r3, [r3, #5]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d101      	bne.n	8008662 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800865e:	2302      	movs	r3, #2
 8008660:	e03c      	b.n	80086dc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2201      	movs	r2, #1
 8008666:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 f997 	bl	800899c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800866e:	f7ff fd41 	bl	80080f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008672:	211e      	movs	r1, #30
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 f8e3 	bl	8008840 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	4619      	mov	r1, r3
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 f8de 	bl	8008840 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008684:	2100      	movs	r1, #0
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f8da 	bl	8008840 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800868c:	2300      	movs	r3, #0
 800868e:	82fb      	strh	r3, [r7, #22]
 8008690:	e009      	b.n	80086a6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008692:	69b9      	ldr	r1, [r7, #24]
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 f929 	bl	80088ec <SUBGHZSPI_Receive>
      pData++;
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	3301      	adds	r3, #1
 800869e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80086a0:	8afb      	ldrh	r3, [r7, #22]
 80086a2:	3301      	adds	r3, #1
 80086a4:	82fb      	strh	r3, [r7, #22]
 80086a6:	8afa      	ldrh	r2, [r7, #22]
 80086a8:	893b      	ldrh	r3, [r7, #8]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d3f1      	bcc.n	8008692 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80086ae:	f7ff fd11 	bl	80080d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 f996 	bl	80089e4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	77fb      	strb	r3, [r7, #31]
 80086c4:	e001      	b.n	80086ca <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	715a      	strb	r2, [r3, #5]

    return status;
 80086d6:	7ffb      	ldrb	r3, [r7, #31]
 80086d8:	e000      	b.n	80086dc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80086da:	2302      	movs	r3, #2
  }
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3720      	adds	r7, #32
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80086ec:	2300      	movs	r3, #0
 80086ee:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80086f0:	f107 020c 	add.w	r2, r7, #12
 80086f4:	2302      	movs	r3, #2
 80086f6:	2112      	movs	r1, #18
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7ff fef4 	bl	80084e6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80086fe:	7b3b      	ldrb	r3, [r7, #12]
 8008700:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008702:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008706:	021b      	lsls	r3, r3, #8
 8008708:	b21a      	sxth	r2, r3
 800870a:	7b7b      	ldrb	r3, [r7, #13]
 800870c:	b21b      	sxth	r3, r3
 800870e:	4313      	orrs	r3, r2
 8008710:	b21b      	sxth	r3, r3
 8008712:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8008714:	f107 020c 	add.w	r2, r7, #12
 8008718:	2302      	movs	r3, #2
 800871a:	2102      	movs	r1, #2
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff fe83 	bl	8008428 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008722:	89fb      	ldrh	r3, [r7, #14]
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f012 ffed 	bl	801b70c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8008732:	89fb      	ldrh	r3, [r7, #14]
 8008734:	085b      	lsrs	r3, r3, #1
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d008      	beq.n	8008750 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 800873e:	89fb      	ldrh	r3, [r7, #14]
 8008740:	099b      	lsrs	r3, r3, #6
 8008742:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8008746:	2b00      	cmp	r3, #0
 8008748:	d102      	bne.n	8008750 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f012 ffec 	bl	801b728 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008750:	89fb      	ldrh	r3, [r7, #14]
 8008752:	089b      	lsrs	r3, r3, #2
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f013 f83b 	bl	801b7d8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008762:	89fb      	ldrh	r3, [r7, #14]
 8008764:	08db      	lsrs	r3, r3, #3
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f013 f840 	bl	801b7f4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008774:	89fb      	ldrh	r3, [r7, #14]
 8008776:	091b      	lsrs	r3, r3, #4
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f013 f845 	bl	801b810 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008786:	89fb      	ldrh	r3, [r7, #14]
 8008788:	095b      	lsrs	r3, r3, #5
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f013 f812 	bl	801b7bc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008798:	89fb      	ldrh	r3, [r7, #14]
 800879a:	099b      	lsrs	r3, r3, #6
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f012 ffcd 	bl	801b744 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80087aa:	89fb      	ldrh	r3, [r7, #14]
 80087ac:	09db      	lsrs	r3, r3, #7
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00e      	beq.n	80087d4 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80087b6:	89fb      	ldrh	r3, [r7, #14]
 80087b8:	0a1b      	lsrs	r3, r3, #8
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d004      	beq.n	80087cc <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80087c2:	2101      	movs	r1, #1
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f012 ffcb 	bl	801b760 <HAL_SUBGHZ_CADStatusCallback>
 80087ca:	e003      	b.n	80087d4 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80087cc:	2100      	movs	r1, #0
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f012 ffc6 	bl	801b760 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80087d4:	89fb      	ldrh	r3, [r7, #14]
 80087d6:	0a5b      	lsrs	r3, r3, #9
 80087d8:	f003 0301 	and.w	r3, r3, #1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f012 ffdb 	bl	801b79c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80087e6:	89fb      	ldrh	r3, [r7, #14]
 80087e8:	0b9b      	lsrs	r3, r3, #14
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f013 f81a 	bl	801b82c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80087f8:	bf00      	nop
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008808:	4b0c      	ldr	r3, [pc, #48]	@ (800883c <SUBGHZSPI_Init+0x3c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a0b      	ldr	r2, [pc, #44]	@ (800883c <SUBGHZSPI_Init+0x3c>)
 800880e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008812:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008814:	4a09      	ldr	r2, [pc, #36]	@ (800883c <SUBGHZSPI_Init+0x3c>)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 800881c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800881e:	4b07      	ldr	r3, [pc, #28]	@ (800883c <SUBGHZSPI_Init+0x3c>)
 8008820:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8008824:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008826:	4b05      	ldr	r3, [pc, #20]	@ (800883c <SUBGHZSPI_Init+0x3c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a04      	ldr	r2, [pc, #16]	@ (800883c <SUBGHZSPI_Init+0x3c>)
 800882c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008830:	6013      	str	r3, [r2, #0]
}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	bc80      	pop	{r7}
 800883a:	4770      	bx	lr
 800883c:	58010000 	.word	0x58010000

08008840 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008850:	4b23      	ldr	r3, [pc, #140]	@ (80088e0 <SUBGHZSPI_Transmit+0xa0>)
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	4613      	mov	r3, r2
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	1a9b      	subs	r3, r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	0cdb      	lsrs	r3, r3, #19
 800885e:	2264      	movs	r2, #100	@ 0x64
 8008860:	fb02 f303 	mul.w	r3, r2, r3
 8008864:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d105      	bne.n	8008878 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	609a      	str	r2, [r3, #8]
      break;
 8008876:	e008      	b.n	800888a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3b01      	subs	r3, #1
 800887c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800887e:	4b19      	ldr	r3, [pc, #100]	@ (80088e4 <SUBGHZSPI_Transmit+0xa4>)
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b02      	cmp	r3, #2
 8008888:	d1ed      	bne.n	8008866 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800888a:	4b17      	ldr	r3, [pc, #92]	@ (80088e8 <SUBGHZSPI_Transmit+0xa8>)
 800888c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	78fa      	ldrb	r2, [r7, #3]
 8008892:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008894:	4b12      	ldr	r3, [pc, #72]	@ (80088e0 <SUBGHZSPI_Transmit+0xa0>)
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	4613      	mov	r3, r2
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	0cdb      	lsrs	r3, r3, #19
 80088a2:	2264      	movs	r2, #100	@ 0x64
 80088a4:	fb02 f303 	mul.w	r3, r2, r3
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d105      	bne.n	80088bc <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	609a      	str	r2, [r3, #8]
      break;
 80088ba:	e008      	b.n	80088ce <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3b01      	subs	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80088c2:	4b08      	ldr	r3, [pc, #32]	@ (80088e4 <SUBGHZSPI_Transmit+0xa4>)
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d1ed      	bne.n	80088aa <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80088ce:	4b05      	ldr	r3, [pc, #20]	@ (80088e4 <SUBGHZSPI_Transmit+0xa4>)
 80088d0:	68db      	ldr	r3, [r3, #12]

  return status;
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	371c      	adds	r7, #28
 80088d8:	46bd      	mov	sp, r7
 80088da:	bc80      	pop	{r7}
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	20000000 	.word	0x20000000
 80088e4:	58010000 	.word	0x58010000
 80088e8:	5801000c 	.word	0x5801000c

080088ec <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80088fa:	4b25      	ldr	r3, [pc, #148]	@ (8008990 <SUBGHZSPI_Receive+0xa4>)
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	4613      	mov	r3, r2
 8008900:	00db      	lsls	r3, r3, #3
 8008902:	1a9b      	subs	r3, r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	0cdb      	lsrs	r3, r3, #19
 8008908:	2264      	movs	r2, #100	@ 0x64
 800890a:	fb02 f303 	mul.w	r3, r2, r3
 800890e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d105      	bne.n	8008922 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	609a      	str	r2, [r3, #8]
      break;
 8008920:	e008      	b.n	8008934 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3b01      	subs	r3, #1
 8008926:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008928:	4b1a      	ldr	r3, [pc, #104]	@ (8008994 <SUBGHZSPI_Receive+0xa8>)
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b02      	cmp	r3, #2
 8008932:	d1ed      	bne.n	8008910 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008934:	4b18      	ldr	r3, [pc, #96]	@ (8008998 <SUBGHZSPI_Receive+0xac>)
 8008936:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	22ff      	movs	r2, #255	@ 0xff
 800893c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800893e:	4b14      	ldr	r3, [pc, #80]	@ (8008990 <SUBGHZSPI_Receive+0xa4>)
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	4613      	mov	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	1a9b      	subs	r3, r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	0cdb      	lsrs	r3, r3, #19
 800894c:	2264      	movs	r2, #100	@ 0x64
 800894e:	fb02 f303 	mul.w	r3, r2, r3
 8008952:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d105      	bne.n	8008966 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	609a      	str	r2, [r3, #8]
      break;
 8008964:	e008      	b.n	8008978 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3b01      	subs	r3, #1
 800896a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800896c:	4b09      	ldr	r3, [pc, #36]	@ (8008994 <SUBGHZSPI_Receive+0xa8>)
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	2b01      	cmp	r3, #1
 8008976:	d1ed      	bne.n	8008954 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008978:	4b06      	ldr	r3, [pc, #24]	@ (8008994 <SUBGHZSPI_Receive+0xa8>)
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	b2da      	uxtb	r2, r3
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	701a      	strb	r2, [r3, #0]

  return status;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
}
 8008984:	4618      	mov	r0, r3
 8008986:	371c      	adds	r7, #28
 8008988:	46bd      	mov	sp, r7
 800898a:	bc80      	pop	{r7}
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	20000000 	.word	0x20000000
 8008994:	58010000 	.word	0x58010000
 8008998:	5801000c 	.word	0x5801000c

0800899c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	791b      	ldrb	r3, [r3, #4]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d111      	bne.n	80089d0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80089ac:	4b0c      	ldr	r3, [pc, #48]	@ (80089e0 <SUBGHZ_CheckDeviceReady+0x44>)
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	4613      	mov	r3, r2
 80089b2:	005b      	lsls	r3, r3, #1
 80089b4:	4413      	add	r3, r2
 80089b6:	00db      	lsls	r3, r3, #3
 80089b8:	0c1b      	lsrs	r3, r3, #16
 80089ba:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80089bc:	f7ff fb9a 	bl	80080f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1f9      	bne.n	80089c0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80089cc:	f7ff fb82 	bl	80080d4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f807 	bl	80089e4 <SUBGHZ_WaitOnBusy>
 80089d6:	4603      	mov	r3, r0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	20000000 	.word	0x20000000

080089e4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80089f0:	4b12      	ldr	r3, [pc, #72]	@ (8008a3c <SUBGHZ_WaitOnBusy+0x58>)
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	4613      	mov	r3, r2
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	4413      	add	r3, r2
 80089fa:	00db      	lsls	r3, r3, #3
 80089fc:	0d1b      	lsrs	r3, r3, #20
 80089fe:	2264      	movs	r2, #100	@ 0x64
 8008a00:	fb02 f303 	mul.w	r3, r2, r3
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008a06:	f7ff fba3 	bl	8008150 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8008a0a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d105      	bne.n	8008a1e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2202      	movs	r2, #2
 8008a1a:	609a      	str	r2, [r3, #8]
      break;
 8008a1c:	e009      	b.n	8008a32 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008a24:	f7ff fb82 	bl	800812c <LL_PWR_IsActiveFlag_RFBUSYS>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d0e9      	beq.n	8008a06 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20000000 	.word	0x20000000

08008a40 <LL_RCC_GetUSARTClockSource>:
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	401a      	ands	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	041b      	lsls	r3, r3, #16
 8008a58:	4313      	orrs	r3, r2
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bc80      	pop	{r7}
 8008a62:	4770      	bx	lr

08008a64 <LL_RCC_GetLPUARTClockSource>:
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a70:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4013      	ands	r3, r2
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr

08008a82 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d101      	bne.n	8008a94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e042      	b.n	8008b1a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fa f89c 	bl	8002be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2224      	movs	r2, #36	@ 0x24
 8008ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 0201 	bic.w	r2, r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 feab 	bl	8009828 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fc34 	bl	8009340 <UART_SetConfig>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d101      	bne.n	8008ae2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e01b      	b.n	8008b1a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008af0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	689a      	ldr	r2, [r3, #8]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f042 0201 	orr.w	r2, r2, #1
 8008b10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 ff29 	bl	800996a <UART_CheckIdleState>
 8008b18:	4603      	mov	r3, r0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b08a      	sub	sp, #40	@ 0x28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b38:	2b20      	cmp	r3, #32
 8008b3a:	d137      	bne.n	8008bac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <HAL_UART_Receive_IT+0x24>
 8008b42:	88fb      	ldrh	r3, [r7, #6]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e030      	b.n	8008bae <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a18      	ldr	r2, [pc, #96]	@ (8008bb8 <HAL_UART_Receive_IT+0x94>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d01f      	beq.n	8008b9c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d018      	beq.n	8008b9c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	e853 3f00 	ldrex	r3, [r3]
 8008b76:	613b      	str	r3, [r7, #16]
   return(result);
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b88:	623b      	str	r3, [r7, #32]
 8008b8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	69f9      	ldr	r1, [r7, #28]
 8008b8e:	6a3a      	ldr	r2, [r7, #32]
 8008b90:	e841 2300 	strex	r3, r2, [r1]
 8008b94:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e6      	bne.n	8008b6a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b9c:	88fb      	ldrh	r3, [r7, #6]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 fffe 	bl	8009ba4 <UART_Start_Receive_IT>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	e000      	b.n	8008bae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008bac:	2302      	movs	r3, #2
  }
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3728      	adds	r7, #40	@ 0x28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	40008000 	.word	0x40008000

08008bbc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08a      	sub	sp, #40	@ 0x28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bd0:	2b20      	cmp	r3, #32
 8008bd2:	d167      	bne.n	8008ca4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d002      	beq.n	8008be0 <HAL_UART_Transmit_DMA+0x24>
 8008bda:	88fb      	ldrh	r3, [r7, #6]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e060      	b.n	8008ca6 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	88fa      	ldrh	r2, [r7, #6]
 8008bee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	88fa      	ldrh	r2, [r7, #6]
 8008bf6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2221      	movs	r2, #33	@ 0x21
 8008c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d028      	beq.n	8008c64 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c16:	4a26      	ldr	r2, [pc, #152]	@ (8008cb0 <HAL_UART_Transmit_DMA+0xf4>)
 8008c18:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c1e:	4a25      	ldr	r2, [pc, #148]	@ (8008cb4 <HAL_UART_Transmit_DMA+0xf8>)
 8008c20:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c26:	4a24      	ldr	r2, [pc, #144]	@ (8008cb8 <HAL_UART_Transmit_DMA+0xfc>)
 8008c28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c2e:	2200      	movs	r2, #0
 8008c30:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3328      	adds	r3, #40	@ 0x28
 8008c42:	461a      	mov	r2, r3
 8008c44:	88fb      	ldrh	r3, [r7, #6]
 8008c46:	f7fb fe2f 	bl	80048a8 <HAL_DMA_Start_IT>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d009      	beq.n	8008c64 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2210      	movs	r2, #16
 8008c54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e020      	b.n	8008ca6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2240      	movs	r2, #64	@ 0x40
 8008c6a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3308      	adds	r3, #8
 8008c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	e853 3f00 	ldrex	r3, [r3]
 8008c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3308      	adds	r3, #8
 8008c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c8c:	623a      	str	r2, [r7, #32]
 8008c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	69f9      	ldr	r1, [r7, #28]
 8008c92:	6a3a      	ldr	r2, [r7, #32]
 8008c94:	e841 2300 	strex	r3, r2, [r1]
 8008c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e5      	bne.n	8008c6c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	e000      	b.n	8008ca6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008ca4:	2302      	movs	r3, #2
  }
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3728      	adds	r7, #40	@ 0x28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	08009f2f 	.word	0x08009f2f
 8008cb4:	08009fc9 	.word	0x08009fc9
 8008cb8:	08009fe5 	.word	0x08009fe5

08008cbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b0ba      	sub	sp, #232	@ 0xe8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ce2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008ce6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008cea:	4013      	ands	r3, r2
 8008cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d11b      	bne.n	8008d30 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d015      	beq.n	8008d30 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d105      	bne.n	8008d1c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d009      	beq.n	8008d30 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 82e3 	beq.w	80092ec <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	4798      	blx	r3
      }
      return;
 8008d2e:	e2dd      	b.n	80092ec <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 8123 	beq.w	8008f80 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8008f74 <HAL_UART_IRQHandler+0x2b8>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d106      	bne.n	8008d54 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8008f78 <HAL_UART_IRQHandler+0x2bc>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 8116 	beq.w	8008f80 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d011      	beq.n	8008d84 <HAL_UART_IRQHandler+0xc8>
 8008d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00b      	beq.n	8008d84 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2201      	movs	r2, #1
 8008d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d7a:	f043 0201 	orr.w	r2, r3, #1
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d88:	f003 0302 	and.w	r3, r3, #2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d011      	beq.n	8008db4 <HAL_UART_IRQHandler+0xf8>
 8008d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00b      	beq.n	8008db4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2202      	movs	r2, #2
 8008da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008daa:	f043 0204 	orr.w	r2, r3, #4
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d011      	beq.n	8008de4 <HAL_UART_IRQHandler+0x128>
 8008dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00b      	beq.n	8008de4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2204      	movs	r2, #4
 8008dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dda:	f043 0202 	orr.w	r2, r3, #2
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de8:	f003 0308 	and.w	r3, r3, #8
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d017      	beq.n	8008e20 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d105      	bne.n	8008e08 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008dfc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e00:	4b5c      	ldr	r3, [pc, #368]	@ (8008f74 <HAL_UART_IRQHandler+0x2b8>)
 8008e02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00b      	beq.n	8008e20 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2208      	movs	r2, #8
 8008e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e16:	f043 0208 	orr.w	r2, r3, #8
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d012      	beq.n	8008e52 <HAL_UART_IRQHandler+0x196>
 8008e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00c      	beq.n	8008e52 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e48:	f043 0220 	orr.w	r2, r3, #32
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 8249 	beq.w	80092f0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e62:	f003 0320 	and.w	r3, r3, #32
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d013      	beq.n	8008e92 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e6e:	f003 0320 	and.w	r3, r3, #32
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d105      	bne.n	8008e82 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d007      	beq.n	8008e92 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea6:	2b40      	cmp	r3, #64	@ 0x40
 8008ea8:	d005      	beq.n	8008eb6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008eae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d054      	beq.n	8008f60 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 ffd4 	bl	8009e64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec6:	2b40      	cmp	r3, #64	@ 0x40
 8008ec8:	d146      	bne.n	8008f58 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ed8:	e853 3f00 	ldrex	r3, [r3]
 8008edc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008ef6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008efa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1d9      	bne.n	8008eca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d017      	beq.n	8008f50 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f26:	4a15      	ldr	r2, [pc, #84]	@ (8008f7c <HAL_UART_IRQHandler+0x2c0>)
 8008f28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fb fd95 	bl	8004a60 <HAL_DMA_Abort_IT>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d019      	beq.n	8008f70 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f4e:	e00f      	b.n	8008f70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f9e0 	bl	8009316 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f56:	e00b      	b.n	8008f70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f9dc 	bl	8009316 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f5e:	e007      	b.n	8008f70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f9d8 	bl	8009316 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f6e:	e1bf      	b.n	80092f0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f70:	bf00      	nop
    return;
 8008f72:	e1bd      	b.n	80092f0 <HAL_UART_IRQHandler+0x634>
 8008f74:	10000001 	.word	0x10000001
 8008f78:	04000120 	.word	0x04000120
 8008f7c:	0800a065 	.word	0x0800a065

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	f040 8153 	bne.w	8009230 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f8e:	f003 0310 	and.w	r3, r3, #16
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f000 814c 	beq.w	8009230 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f9c:	f003 0310 	and.w	r3, r3, #16
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 8145 	beq.w	8009230 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2210      	movs	r2, #16
 8008fac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fb8:	2b40      	cmp	r3, #64	@ 0x40
 8008fba:	f040 80bb 	bne.w	8009134 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 818f 	beq.w	80092f4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	f080 8187 	bcs.w	80092f4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f040 8087 	bne.w	8009112 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009010:	e853 3f00 	ldrex	r3, [r3]
 8009014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009018:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800901c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800902e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009032:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009036:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800903a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1da      	bne.n	8009004 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3308      	adds	r3, #8
 8009054:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800905e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009060:	f023 0301 	bic.w	r3, r3, #1
 8009064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3308      	adds	r3, #8
 800906e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009072:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009076:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009078:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800907a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800907e:	e841 2300 	strex	r3, r2, [r1]
 8009082:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1e1      	bne.n	800904e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	3308      	adds	r3, #8
 8009090:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009094:	e853 3f00 	ldrex	r3, [r3]
 8009098:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800909a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800909c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3308      	adds	r3, #8
 80090aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80090ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090b6:	e841 2300 	strex	r3, r2, [r1]
 80090ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1e3      	bne.n	800908a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2220      	movs	r2, #32
 80090c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090e0:	f023 0310 	bic.w	r3, r3, #16
 80090e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e4      	bne.n	80090d0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800910c:	4618      	mov	r0, r3
 800910e:	f7fb fc49 	bl	80049a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2202      	movs	r2, #2
 8009116:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009124:	b29b      	uxth	r3, r3
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	b29b      	uxth	r3, r3
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f8fb 	bl	8009328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009132:	e0df      	b.n	80092f4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009140:	b29b      	uxth	r3, r3
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800914e:	b29b      	uxth	r3, r3
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 80d1 	beq.w	80092f8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009156:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 80cc 	beq.w	80092f8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800916e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009174:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	461a      	mov	r2, r3
 800917e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009182:	647b      	str	r3, [r7, #68]	@ 0x44
 8009184:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009188:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800918a:	e841 2300 	strex	r3, r2, [r1]
 800918e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1e4      	bne.n	8009160 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3308      	adds	r3, #8
 800919c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a0:	e853 3f00 	ldrex	r3, [r3]
 80091a4:	623b      	str	r3, [r7, #32]
   return(result);
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091ac:	f023 0301 	bic.w	r3, r3, #1
 80091b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3308      	adds	r3, #8
 80091ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091be:	633a      	str	r2, [r7, #48]	@ 0x30
 80091c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e1      	bne.n	8009196 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0310 	bic.w	r3, r3, #16
 80091fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009208:	61fb      	str	r3, [r7, #28]
 800920a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920c:	69b9      	ldr	r1, [r7, #24]
 800920e:	69fa      	ldr	r2, [r7, #28]
 8009210:	e841 2300 	strex	r3, r2, [r1]
 8009214:	617b      	str	r3, [r7, #20]
   return(result);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e4      	bne.n	80091e6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f87d 	bl	8009328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800922e:	e063      	b.n	80092f8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00e      	beq.n	800925a <HAL_UART_IRQHandler+0x59e>
 800923c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d008      	beq.n	800925a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009250:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 fc64 	bl	800ab20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009258:	e051      	b.n	80092fe <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800925a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800925e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009262:	2b00      	cmp	r3, #0
 8009264:	d014      	beq.n	8009290 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800926a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800926e:	2b00      	cmp	r3, #0
 8009270:	d105      	bne.n	800927e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d008      	beq.n	8009290 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009282:	2b00      	cmp	r3, #0
 8009284:	d03a      	beq.n	80092fc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
    }
    return;
 800928e:	e035      	b.n	80092fc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009298:	2b00      	cmp	r3, #0
 800929a:	d009      	beq.n	80092b0 <HAL_UART_IRQHandler+0x5f4>
 800929c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fef1 	bl	800a090 <UART_EndTransmit_IT>
    return;
 80092ae:	e026      	b.n	80092fe <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d009      	beq.n	80092d0 <HAL_UART_IRQHandler+0x614>
 80092bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d003      	beq.n	80092d0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fc3b 	bl	800ab44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092ce:	e016      	b.n	80092fe <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d010      	beq.n	80092fe <HAL_UART_IRQHandler+0x642>
 80092dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	da0c      	bge.n	80092fe <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f001 fc24 	bl	800ab32 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092ea:	e008      	b.n	80092fe <HAL_UART_IRQHandler+0x642>
      return;
 80092ec:	bf00      	nop
 80092ee:	e006      	b.n	80092fe <HAL_UART_IRQHandler+0x642>
    return;
 80092f0:	bf00      	nop
 80092f2:	e004      	b.n	80092fe <HAL_UART_IRQHandler+0x642>
      return;
 80092f4:	bf00      	nop
 80092f6:	e002      	b.n	80092fe <HAL_UART_IRQHandler+0x642>
      return;
 80092f8:	bf00      	nop
 80092fa:	e000      	b.n	80092fe <HAL_UART_IRQHandler+0x642>
    return;
 80092fc:	bf00      	nop
  }
}
 80092fe:	37e8      	adds	r7, #232	@ 0xe8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	4770      	bx	lr

08009316 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	bc80      	pop	{r7}
 8009326:	4770      	bx	lr

08009328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	bc80      	pop	{r7}
 800933c:	4770      	bx	lr
	...

08009340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009344:	b08c      	sub	sp, #48	@ 0x30
 8009346:	af00      	add	r7, sp, #0
 8009348:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	431a      	orrs	r2, r3
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	431a      	orrs	r2, r3
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	69db      	ldr	r3, [r3, #28]
 8009364:	4313      	orrs	r3, r2
 8009366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	4b94      	ldr	r3, [pc, #592]	@ (80095c0 <UART_SetConfig+0x280>)
 8009370:	4013      	ands	r3, r2
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	6812      	ldr	r2, [r2, #0]
 8009376:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009378:	430b      	orrs	r3, r1
 800937a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	68da      	ldr	r2, [r3, #12]
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a89      	ldr	r2, [pc, #548]	@ (80095c4 <UART_SetConfig+0x284>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d004      	beq.n	80093ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093a8:	4313      	orrs	r3, r2
 80093aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80093b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	6812      	ldr	r2, [r2, #0]
 80093be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093c0:	430b      	orrs	r3, r1
 80093c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ca:	f023 010f 	bic.w	r1, r3, #15
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a7a      	ldr	r2, [pc, #488]	@ (80095c8 <UART_SetConfig+0x288>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d127      	bne.n	8009434 <UART_SetConfig+0xf4>
 80093e4:	2003      	movs	r0, #3
 80093e6:	f7ff fb2b 	bl	8008a40 <LL_RCC_GetUSARTClockSource>
 80093ea:	4603      	mov	r3, r0
 80093ec:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d81b      	bhi.n	800942c <UART_SetConfig+0xec>
 80093f4:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <UART_SetConfig+0xbc>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	0800940d 	.word	0x0800940d
 8009400:	0800941d 	.word	0x0800941d
 8009404:	08009415 	.word	0x08009415
 8009408:	08009425 	.word	0x08009425
 800940c:	2301      	movs	r3, #1
 800940e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009412:	e080      	b.n	8009516 <UART_SetConfig+0x1d6>
 8009414:	2302      	movs	r3, #2
 8009416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800941a:	e07c      	b.n	8009516 <UART_SetConfig+0x1d6>
 800941c:	2304      	movs	r3, #4
 800941e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009422:	e078      	b.n	8009516 <UART_SetConfig+0x1d6>
 8009424:	2308      	movs	r3, #8
 8009426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800942a:	e074      	b.n	8009516 <UART_SetConfig+0x1d6>
 800942c:	2310      	movs	r3, #16
 800942e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009432:	e070      	b.n	8009516 <UART_SetConfig+0x1d6>
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a64      	ldr	r2, [pc, #400]	@ (80095cc <UART_SetConfig+0x28c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d138      	bne.n	80094b0 <UART_SetConfig+0x170>
 800943e:	200c      	movs	r0, #12
 8009440:	f7ff fafe 	bl	8008a40 <LL_RCC_GetUSARTClockSource>
 8009444:	4603      	mov	r3, r0
 8009446:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800944a:	2b0c      	cmp	r3, #12
 800944c:	d82c      	bhi.n	80094a8 <UART_SetConfig+0x168>
 800944e:	a201      	add	r2, pc, #4	@ (adr r2, 8009454 <UART_SetConfig+0x114>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	08009489 	.word	0x08009489
 8009458:	080094a9 	.word	0x080094a9
 800945c:	080094a9 	.word	0x080094a9
 8009460:	080094a9 	.word	0x080094a9
 8009464:	08009499 	.word	0x08009499
 8009468:	080094a9 	.word	0x080094a9
 800946c:	080094a9 	.word	0x080094a9
 8009470:	080094a9 	.word	0x080094a9
 8009474:	08009491 	.word	0x08009491
 8009478:	080094a9 	.word	0x080094a9
 800947c:	080094a9 	.word	0x080094a9
 8009480:	080094a9 	.word	0x080094a9
 8009484:	080094a1 	.word	0x080094a1
 8009488:	2300      	movs	r3, #0
 800948a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800948e:	e042      	b.n	8009516 <UART_SetConfig+0x1d6>
 8009490:	2302      	movs	r3, #2
 8009492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009496:	e03e      	b.n	8009516 <UART_SetConfig+0x1d6>
 8009498:	2304      	movs	r3, #4
 800949a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800949e:	e03a      	b.n	8009516 <UART_SetConfig+0x1d6>
 80094a0:	2308      	movs	r3, #8
 80094a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094a6:	e036      	b.n	8009516 <UART_SetConfig+0x1d6>
 80094a8:	2310      	movs	r3, #16
 80094aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094ae:	e032      	b.n	8009516 <UART_SetConfig+0x1d6>
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a43      	ldr	r2, [pc, #268]	@ (80095c4 <UART_SetConfig+0x284>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d12a      	bne.n	8009510 <UART_SetConfig+0x1d0>
 80094ba:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80094be:	f7ff fad1 	bl	8008a64 <LL_RCC_GetLPUARTClockSource>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094c8:	d01a      	beq.n	8009500 <UART_SetConfig+0x1c0>
 80094ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094ce:	d81b      	bhi.n	8009508 <UART_SetConfig+0x1c8>
 80094d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094d4:	d00c      	beq.n	80094f0 <UART_SetConfig+0x1b0>
 80094d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094da:	d815      	bhi.n	8009508 <UART_SetConfig+0x1c8>
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d003      	beq.n	80094e8 <UART_SetConfig+0x1a8>
 80094e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094e4:	d008      	beq.n	80094f8 <UART_SetConfig+0x1b8>
 80094e6:	e00f      	b.n	8009508 <UART_SetConfig+0x1c8>
 80094e8:	2300      	movs	r3, #0
 80094ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094ee:	e012      	b.n	8009516 <UART_SetConfig+0x1d6>
 80094f0:	2302      	movs	r3, #2
 80094f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094f6:	e00e      	b.n	8009516 <UART_SetConfig+0x1d6>
 80094f8:	2304      	movs	r3, #4
 80094fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094fe:	e00a      	b.n	8009516 <UART_SetConfig+0x1d6>
 8009500:	2308      	movs	r3, #8
 8009502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009506:	e006      	b.n	8009516 <UART_SetConfig+0x1d6>
 8009508:	2310      	movs	r3, #16
 800950a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800950e:	e002      	b.n	8009516 <UART_SetConfig+0x1d6>
 8009510:	2310      	movs	r3, #16
 8009512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a2a      	ldr	r2, [pc, #168]	@ (80095c4 <UART_SetConfig+0x284>)
 800951c:	4293      	cmp	r3, r2
 800951e:	f040 80a4 	bne.w	800966a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009522:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009526:	2b08      	cmp	r3, #8
 8009528:	d823      	bhi.n	8009572 <UART_SetConfig+0x232>
 800952a:	a201      	add	r2, pc, #4	@ (adr r2, 8009530 <UART_SetConfig+0x1f0>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	08009555 	.word	0x08009555
 8009534:	08009573 	.word	0x08009573
 8009538:	0800955d 	.word	0x0800955d
 800953c:	08009573 	.word	0x08009573
 8009540:	08009563 	.word	0x08009563
 8009544:	08009573 	.word	0x08009573
 8009548:	08009573 	.word	0x08009573
 800954c:	08009573 	.word	0x08009573
 8009550:	0800956b 	.word	0x0800956b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009554:	f7fd ff3a 	bl	80073cc <HAL_RCC_GetPCLK1Freq>
 8009558:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800955a:	e010      	b.n	800957e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800955c:	4b1c      	ldr	r3, [pc, #112]	@ (80095d0 <UART_SetConfig+0x290>)
 800955e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009560:	e00d      	b.n	800957e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009562:	f7fd fe7f 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8009566:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009568:	e009      	b.n	800957e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800956a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800956e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009570:	e005      	b.n	800957e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009572:	2300      	movs	r3, #0
 8009574:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800957c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 8137 	beq.w	80097f4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958a:	4a12      	ldr	r2, [pc, #72]	@ (80095d4 <UART_SetConfig+0x294>)
 800958c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009590:	461a      	mov	r2, r3
 8009592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009594:	fbb3 f3f2 	udiv	r3, r3, r2
 8009598:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	4613      	mov	r3, r2
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	4413      	add	r3, r2
 80095a4:	69ba      	ldr	r2, [r7, #24]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d305      	bcc.n	80095b6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d910      	bls.n	80095d8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80095bc:	e11a      	b.n	80097f4 <UART_SetConfig+0x4b4>
 80095be:	bf00      	nop
 80095c0:	cfff69f3 	.word	0xcfff69f3
 80095c4:	40008000 	.word	0x40008000
 80095c8:	40013800 	.word	0x40013800
 80095cc:	40004400 	.word	0x40004400
 80095d0:	00f42400 	.word	0x00f42400
 80095d4:	0801dc50 	.word	0x0801dc50
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095da:	2200      	movs	r2, #0
 80095dc:	60bb      	str	r3, [r7, #8]
 80095de:	60fa      	str	r2, [r7, #12]
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e4:	4a8e      	ldr	r2, [pc, #568]	@ (8009820 <UART_SetConfig+0x4e0>)
 80095e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	2200      	movs	r2, #0
 80095ee:	603b      	str	r3, [r7, #0]
 80095f0:	607a      	str	r2, [r7, #4]
 80095f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095fa:	f7f7 fad5 	bl	8000ba8 <__aeabi_uldivmod>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	4610      	mov	r0, r2
 8009604:	4619      	mov	r1, r3
 8009606:	f04f 0200 	mov.w	r2, #0
 800960a:	f04f 0300 	mov.w	r3, #0
 800960e:	020b      	lsls	r3, r1, #8
 8009610:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009614:	0202      	lsls	r2, r0, #8
 8009616:	6979      	ldr	r1, [r7, #20]
 8009618:	6849      	ldr	r1, [r1, #4]
 800961a:	0849      	lsrs	r1, r1, #1
 800961c:	2000      	movs	r0, #0
 800961e:	460c      	mov	r4, r1
 8009620:	4605      	mov	r5, r0
 8009622:	eb12 0804 	adds.w	r8, r2, r4
 8009626:	eb43 0905 	adc.w	r9, r3, r5
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	469a      	mov	sl, r3
 8009632:	4693      	mov	fp, r2
 8009634:	4652      	mov	r2, sl
 8009636:	465b      	mov	r3, fp
 8009638:	4640      	mov	r0, r8
 800963a:	4649      	mov	r1, r9
 800963c:	f7f7 fab4 	bl	8000ba8 <__aeabi_uldivmod>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4613      	mov	r3, r2
 8009646:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800964e:	d308      	bcc.n	8009662 <UART_SetConfig+0x322>
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009656:	d204      	bcs.n	8009662 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6a3a      	ldr	r2, [r7, #32]
 800965e:	60da      	str	r2, [r3, #12]
 8009660:	e0c8      	b.n	80097f4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009668:	e0c4      	b.n	80097f4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009672:	d167      	bne.n	8009744 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8009674:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009678:	2b08      	cmp	r3, #8
 800967a:	d828      	bhi.n	80096ce <UART_SetConfig+0x38e>
 800967c:	a201      	add	r2, pc, #4	@ (adr r2, 8009684 <UART_SetConfig+0x344>)
 800967e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009682:	bf00      	nop
 8009684:	080096a9 	.word	0x080096a9
 8009688:	080096b1 	.word	0x080096b1
 800968c:	080096b9 	.word	0x080096b9
 8009690:	080096cf 	.word	0x080096cf
 8009694:	080096bf 	.word	0x080096bf
 8009698:	080096cf 	.word	0x080096cf
 800969c:	080096cf 	.word	0x080096cf
 80096a0:	080096cf 	.word	0x080096cf
 80096a4:	080096c7 	.word	0x080096c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096a8:	f7fd fe90 	bl	80073cc <HAL_RCC_GetPCLK1Freq>
 80096ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096ae:	e014      	b.n	80096da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096b0:	f7fd fe9e 	bl	80073f0 <HAL_RCC_GetPCLK2Freq>
 80096b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096b6:	e010      	b.n	80096da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096b8:	4b5a      	ldr	r3, [pc, #360]	@ (8009824 <UART_SetConfig+0x4e4>)
 80096ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096bc:	e00d      	b.n	80096da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096be:	f7fd fdd1 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 80096c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096c4:	e009      	b.n	80096da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096cc:	e005      	b.n	80096da <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80096d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 8089 	beq.w	80097f4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096e6:	4a4e      	ldr	r2, [pc, #312]	@ (8009820 <UART_SetConfig+0x4e0>)
 80096e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096ec:	461a      	mov	r2, r3
 80096ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80096f4:	005a      	lsls	r2, r3, #1
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	441a      	add	r2, r3
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	fbb2 f3f3 	udiv	r3, r2, r3
 8009706:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	2b0f      	cmp	r3, #15
 800970c:	d916      	bls.n	800973c <UART_SetConfig+0x3fc>
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009714:	d212      	bcs.n	800973c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	b29b      	uxth	r3, r3
 800971a:	f023 030f 	bic.w	r3, r3, #15
 800971e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	085b      	lsrs	r3, r3, #1
 8009724:	b29b      	uxth	r3, r3
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	b29a      	uxth	r2, r3
 800972c:	8bfb      	ldrh	r3, [r7, #30]
 800972e:	4313      	orrs	r3, r2
 8009730:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	8bfa      	ldrh	r2, [r7, #30]
 8009738:	60da      	str	r2, [r3, #12]
 800973a:	e05b      	b.n	80097f4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009742:	e057      	b.n	80097f4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009744:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009748:	2b08      	cmp	r3, #8
 800974a:	d828      	bhi.n	800979e <UART_SetConfig+0x45e>
 800974c:	a201      	add	r2, pc, #4	@ (adr r2, 8009754 <UART_SetConfig+0x414>)
 800974e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009752:	bf00      	nop
 8009754:	08009779 	.word	0x08009779
 8009758:	08009781 	.word	0x08009781
 800975c:	08009789 	.word	0x08009789
 8009760:	0800979f 	.word	0x0800979f
 8009764:	0800978f 	.word	0x0800978f
 8009768:	0800979f 	.word	0x0800979f
 800976c:	0800979f 	.word	0x0800979f
 8009770:	0800979f 	.word	0x0800979f
 8009774:	08009797 	.word	0x08009797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009778:	f7fd fe28 	bl	80073cc <HAL_RCC_GetPCLK1Freq>
 800977c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800977e:	e014      	b.n	80097aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009780:	f7fd fe36 	bl	80073f0 <HAL_RCC_GetPCLK2Freq>
 8009784:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009786:	e010      	b.n	80097aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009788:	4b26      	ldr	r3, [pc, #152]	@ (8009824 <UART_SetConfig+0x4e4>)
 800978a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800978c:	e00d      	b.n	80097aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800978e:	f7fd fd69 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8009792:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009794:	e009      	b.n	80097aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800979a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800979c:	e005      	b.n	80097aa <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80097a8:	bf00      	nop
    }

    if (pclk != 0U)
 80097aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d021      	beq.n	80097f4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b4:	4a1a      	ldr	r2, [pc, #104]	@ (8009820 <UART_SetConfig+0x4e0>)
 80097b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ba:	461a      	mov	r2, r3
 80097bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097be:	fbb3 f2f2 	udiv	r2, r3, r2
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	085b      	lsrs	r3, r3, #1
 80097c8:	441a      	add	r2, r3
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	2b0f      	cmp	r3, #15
 80097d8:	d909      	bls.n	80097ee <UART_SetConfig+0x4ae>
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097e0:	d205      	bcs.n	80097ee <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60da      	str	r2, [r3, #12]
 80097ec:	e002      	b.n	80097f4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	2201      	movs	r2, #1
 8009800:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	2200      	movs	r2, #0
 8009808:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2200      	movs	r2, #0
 800980e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009810:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009814:	4618      	mov	r0, r3
 8009816:	3730      	adds	r7, #48	@ 0x30
 8009818:	46bd      	mov	sp, r7
 800981a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800981e:	bf00      	nop
 8009820:	0801dc50 	.word	0x0801dc50
 8009824:	00f42400 	.word	0x00f42400

08009828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009834:	f003 0308 	and.w	r3, r3, #8
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00a      	beq.n	8009852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	430a      	orrs	r2, r1
 8009850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00a      	beq.n	8009874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	430a      	orrs	r2, r1
 8009872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009878:	f003 0302 	and.w	r3, r3, #2
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00a      	beq.n	8009896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	430a      	orrs	r2, r1
 8009894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800989a:	f003 0304 	and.w	r3, r3, #4
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00a      	beq.n	80098b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	430a      	orrs	r2, r1
 80098b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098bc:	f003 0310 	and.w	r3, r3, #16
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00a      	beq.n	80098da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	430a      	orrs	r2, r1
 80098fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009904:	2b00      	cmp	r3, #0
 8009906:	d01a      	beq.n	800993e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	430a      	orrs	r2, r1
 800991c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009926:	d10a      	bne.n	800993e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	430a      	orrs	r2, r1
 800993c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00a      	beq.n	8009960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	430a      	orrs	r2, r1
 800995e:	605a      	str	r2, [r3, #4]
  }
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	bc80      	pop	{r7}
 8009968:	4770      	bx	lr

0800996a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b086      	sub	sp, #24
 800996e:	af02      	add	r7, sp, #8
 8009970:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800997a:	f7f8 fdb9 	bl	80024f0 <HAL_GetTick>
 800997e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0308 	and.w	r3, r3, #8
 800998a:	2b08      	cmp	r3, #8
 800998c:	d10e      	bne.n	80099ac <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800998e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f832 	bl	8009a06 <UART_WaitOnFlagUntilTimeout>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e028      	b.n	80099fe <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0304 	and.w	r3, r3, #4
 80099b6:	2b04      	cmp	r3, #4
 80099b8:	d10e      	bne.n	80099d8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f81c 	bl	8009a06 <UART_WaitOnFlagUntilTimeout>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e012      	b.n	80099fe <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2220      	movs	r2, #32
 80099dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2220      	movs	r2, #32
 80099e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b09c      	sub	sp, #112	@ 0x70
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	60f8      	str	r0, [r7, #12]
 8009a0e:	60b9      	str	r1, [r7, #8]
 8009a10:	603b      	str	r3, [r7, #0]
 8009a12:	4613      	mov	r3, r2
 8009a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a16:	e0af      	b.n	8009b78 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1e:	f000 80ab 	beq.w	8009b78 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a22:	f7f8 fd65 	bl	80024f0 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d302      	bcc.n	8009a38 <UART_WaitOnFlagUntilTimeout+0x32>
 8009a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d140      	bne.n	8009aba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a40:	e853 3f00 	ldrex	r3, [r3]
 8009a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a48:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009a4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a58:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009a5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a5e:	e841 2300 	strex	r3, r2, [r1]
 8009a62:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1e6      	bne.n	8009a38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7c:	f023 0301 	bic.w	r3, r3, #1
 8009a80:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3308      	adds	r3, #8
 8009a88:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009a8a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009a8c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e5      	bne.n	8009a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e06f      	b.n	8009b9a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0304 	and.w	r3, r3, #4
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d057      	beq.n	8009b78 <UART_WaitOnFlagUntilTimeout+0x172>
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	2b80      	cmp	r3, #128	@ 0x80
 8009acc:	d054      	beq.n	8009b78 <UART_WaitOnFlagUntilTimeout+0x172>
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b40      	cmp	r3, #64	@ 0x40
 8009ad2:	d051      	beq.n	8009b78 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ae2:	d149      	bne.n	8009b78 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009aec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af6:	e853 3f00 	ldrex	r3, [r3]
 8009afa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009b02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b0e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b14:	e841 2300 	strex	r3, r2, [r1]
 8009b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e6      	bne.n	8009aee <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3308      	adds	r3, #8
 8009b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	e853 3f00 	ldrex	r3, [r3]
 8009b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f023 0301 	bic.w	r3, r3, #1
 8009b36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009b40:	623a      	str	r2, [r7, #32]
 8009b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b44:	69f9      	ldr	r1, [r7, #28]
 8009b46:	6a3a      	ldr	r2, [r7, #32]
 8009b48:	e841 2300 	strex	r3, r2, [r1]
 8009b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e5      	bne.n	8009b20 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2220      	movs	r2, #32
 8009b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e010      	b.n	8009b9a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	69da      	ldr	r2, [r3, #28]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	4013      	ands	r3, r2
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	bf0c      	ite	eq
 8009b88:	2301      	moveq	r3, #1
 8009b8a:	2300      	movne	r3, #0
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	461a      	mov	r2, r3
 8009b90:	79fb      	ldrb	r3, [r7, #7]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	f43f af40 	beq.w	8009a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3770      	adds	r7, #112	@ 0x70
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
	...

08009ba4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b0a3      	sub	sp, #140	@ 0x8c
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	88fa      	ldrh	r2, [r7, #6]
 8009bbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	88fa      	ldrh	r2, [r7, #6]
 8009bc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bd6:	d10e      	bne.n	8009bf6 <UART_Start_Receive_IT+0x52>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d105      	bne.n	8009bec <UART_Start_Receive_IT+0x48>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009be6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009bea:	e02d      	b.n	8009c48 <UART_Start_Receive_IT+0xa4>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	22ff      	movs	r2, #255	@ 0xff
 8009bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009bf4:	e028      	b.n	8009c48 <UART_Start_Receive_IT+0xa4>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10d      	bne.n	8009c1a <UART_Start_Receive_IT+0x76>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d104      	bne.n	8009c10 <UART_Start_Receive_IT+0x6c>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	22ff      	movs	r2, #255	@ 0xff
 8009c0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009c0e:	e01b      	b.n	8009c48 <UART_Start_Receive_IT+0xa4>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	227f      	movs	r2, #127	@ 0x7f
 8009c14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009c18:	e016      	b.n	8009c48 <UART_Start_Receive_IT+0xa4>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c22:	d10d      	bne.n	8009c40 <UART_Start_Receive_IT+0x9c>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d104      	bne.n	8009c36 <UART_Start_Receive_IT+0x92>
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	227f      	movs	r2, #127	@ 0x7f
 8009c30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009c34:	e008      	b.n	8009c48 <UART_Start_Receive_IT+0xa4>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	223f      	movs	r2, #63	@ 0x3f
 8009c3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009c3e:	e003      	b.n	8009c48 <UART_Start_Receive_IT+0xa4>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2222      	movs	r2, #34	@ 0x22
 8009c54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3308      	adds	r3, #8
 8009c5e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c62:	e853 3f00 	ldrex	r3, [r3]
 8009c66:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009c68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c6a:	f043 0301 	orr.w	r3, r3, #1
 8009c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3308      	adds	r3, #8
 8009c78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009c7c:	673a      	str	r2, [r7, #112]	@ 0x70
 8009c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c80:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009c82:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009c84:	e841 2300 	strex	r3, r2, [r1]
 8009c88:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009c8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1e3      	bne.n	8009c58 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c98:	d14f      	bne.n	8009d3a <UART_Start_Receive_IT+0x196>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ca0:	88fa      	ldrh	r2, [r7, #6]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d349      	bcc.n	8009d3a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cae:	d107      	bne.n	8009cc0 <UART_Start_Receive_IT+0x11c>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d103      	bne.n	8009cc0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	4a46      	ldr	r2, [pc, #280]	@ (8009dd4 <UART_Start_Receive_IT+0x230>)
 8009cbc:	675a      	str	r2, [r3, #116]	@ 0x74
 8009cbe:	e002      	b.n	8009cc6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4a45      	ldr	r2, [pc, #276]	@ (8009dd8 <UART_Start_Receive_IT+0x234>)
 8009cc4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d01a      	beq.n	8009d04 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cd6:	e853 3f00 	ldrex	r3, [r3]
 8009cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ce2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cf2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009cf6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009cf8:	e841 2300 	strex	r3, r2, [r1]
 8009cfc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1e4      	bne.n	8009cce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3308      	adds	r3, #8
 8009d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d0e:	e853 3f00 	ldrex	r3, [r3]
 8009d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	3308      	adds	r3, #8
 8009d22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009d24:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009d26:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d2c:	e841 2300 	strex	r3, r2, [r1]
 8009d30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1e5      	bne.n	8009d04 <UART_Start_Receive_IT+0x160>
 8009d38:	e046      	b.n	8009dc8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d42:	d107      	bne.n	8009d54 <UART_Start_Receive_IT+0x1b0>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d103      	bne.n	8009d54 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4a23      	ldr	r2, [pc, #140]	@ (8009ddc <UART_Start_Receive_IT+0x238>)
 8009d50:	675a      	str	r2, [r3, #116]	@ 0x74
 8009d52:	e002      	b.n	8009d5a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4a22      	ldr	r2, [pc, #136]	@ (8009de0 <UART_Start_Receive_IT+0x23c>)
 8009d58:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d019      	beq.n	8009d96 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6a:	e853 3f00 	ldrex	r3, [r3]
 8009d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d72:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009d76:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d82:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d88:	e841 2300 	strex	r3, r2, [r1]
 8009d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e6      	bne.n	8009d62 <UART_Start_Receive_IT+0x1be>
 8009d94:	e018      	b.n	8009dc8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	613b      	str	r3, [r7, #16]
   return(result);
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f043 0320 	orr.w	r3, r3, #32
 8009daa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	461a      	mov	r2, r3
 8009db2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009db4:	623b      	str	r3, [r7, #32]
 8009db6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db8:	69f9      	ldr	r1, [r7, #28]
 8009dba:	6a3a      	ldr	r2, [r7, #32]
 8009dbc:	e841 2300 	strex	r3, r2, [r1]
 8009dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1e6      	bne.n	8009d96 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	378c      	adds	r7, #140	@ 0x8c
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bc80      	pop	{r7}
 8009dd2:	4770      	bx	lr
 8009dd4:	0800a7b9 	.word	0x0800a7b9
 8009dd8:	0800a459 	.word	0x0800a459
 8009ddc:	0800a2a1 	.word	0x0800a2a1
 8009de0:	0800a0e9 	.word	0x0800a0e9

08009de4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b08f      	sub	sp, #60	@ 0x3c
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e0c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e12:	e841 2300 	strex	r3, r2, [r1]
 8009e16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1e6      	bne.n	8009dec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3308      	adds	r3, #8
 8009e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	e853 3f00 	ldrex	r3, [r3]
 8009e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e3e:	61ba      	str	r2, [r7, #24]
 8009e40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e42:	6979      	ldr	r1, [r7, #20]
 8009e44:	69ba      	ldr	r2, [r7, #24]
 8009e46:	e841 2300 	strex	r3, r2, [r1]
 8009e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1e5      	bne.n	8009e1e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2220      	movs	r2, #32
 8009e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009e5a:	bf00      	nop
 8009e5c:	373c      	adds	r7, #60	@ 0x3c
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bc80      	pop	{r7}
 8009e62:	4770      	bx	lr

08009e64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b095      	sub	sp, #84	@ 0x54
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e74:	e853 3f00 	ldrex	r3, [r3]
 8009e78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	461a      	mov	r2, r3
 8009e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e92:	e841 2300 	strex	r3, r2, [r1]
 8009e96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1e6      	bne.n	8009e6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	e853 3f00 	ldrex	r3, [r3]
 8009eac:	61fb      	str	r3, [r7, #28]
   return(result);
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009eb4:	f023 0301 	bic.w	r3, r3, #1
 8009eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3308      	adds	r3, #8
 8009ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eca:	e841 2300 	strex	r3, r2, [r1]
 8009ece:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1e3      	bne.n	8009e9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d118      	bne.n	8009f10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	e853 3f00 	ldrex	r3, [r3]
 8009eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f023 0310 	bic.w	r3, r3, #16
 8009ef2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009efc:	61bb      	str	r3, [r7, #24]
 8009efe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f00:	6979      	ldr	r1, [r7, #20]
 8009f02:	69ba      	ldr	r2, [r7, #24]
 8009f04:	e841 2300 	strex	r3, r2, [r1]
 8009f08:	613b      	str	r3, [r7, #16]
   return(result);
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1e6      	bne.n	8009ede <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2220      	movs	r2, #32
 8009f14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f24:	bf00      	nop
 8009f26:	3754      	adds	r7, #84	@ 0x54
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bc80      	pop	{r7}
 8009f2c:	4770      	bx	lr

08009f2e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b090      	sub	sp, #64	@ 0x40
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0320 	and.w	r3, r3, #32
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d137      	bne.n	8009fba <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3308      	adds	r3, #8
 8009f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	623b      	str	r3, [r7, #32]
   return(result);
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3308      	adds	r3, #8
 8009f70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f72:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1e5      	bne.n	8009f52 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	e853 3f00 	ldrex	r3, [r3]
 8009f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa4:	61fb      	str	r3, [r7, #28]
 8009fa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa8:	69b9      	ldr	r1, [r7, #24]
 8009faa:	69fa      	ldr	r2, [r7, #28]
 8009fac:	e841 2300 	strex	r3, r2, [r1]
 8009fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1e6      	bne.n	8009f86 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fb8:	e002      	b.n	8009fc0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009fba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009fbc:	f7f9 f814 	bl	8002fe8 <HAL_UART_TxCpltCallback>
}
 8009fc0:	bf00      	nop
 8009fc2:	3740      	adds	r7, #64	@ 0x40
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7ff f994 	bl	8009304 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fdc:	bf00      	nop
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ff8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a000:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a00c:	2b80      	cmp	r3, #128	@ 0x80
 800a00e:	d109      	bne.n	800a024 <UART_DMAError+0x40>
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	2b21      	cmp	r3, #33	@ 0x21
 800a014:	d106      	bne.n	800a024 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	2200      	movs	r2, #0
 800a01a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a01e:	6978      	ldr	r0, [r7, #20]
 800a020:	f7ff fee0 	bl	8009de4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a02e:	2b40      	cmp	r3, #64	@ 0x40
 800a030:	d109      	bne.n	800a046 <UART_DMAError+0x62>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b22      	cmp	r3, #34	@ 0x22
 800a036:	d106      	bne.n	800a046 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a040:	6978      	ldr	r0, [r7, #20]
 800a042:	f7ff ff0f 	bl	8009e64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a04c:	f043 0210 	orr.w	r2, r3, #16
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a056:	6978      	ldr	r0, [r7, #20]
 800a058:	f7ff f95d 	bl	8009316 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a05c:	bf00      	nop
 800a05e:	3718      	adds	r7, #24
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7ff f947 	bl	8009316 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a088:	bf00      	nop
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b088      	sub	sp, #32
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0ac:	61fb      	str	r3, [r7, #28]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	61bb      	str	r3, [r7, #24]
 800a0b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ba:	6979      	ldr	r1, [r7, #20]
 800a0bc:	69ba      	ldr	r2, [r7, #24]
 800a0be:	e841 2300 	strex	r3, r2, [r1]
 800a0c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1e6      	bne.n	800a098 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7f8 ff85 	bl	8002fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0de:	bf00      	nop
 800a0e0:	3720      	adds	r7, #32
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b09c      	sub	sp, #112	@ 0x70
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a0f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a100:	2b22      	cmp	r3, #34	@ 0x22
 800a102:	f040 80be 	bne.w	800a282 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a10c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a110:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a114:	b2d9      	uxtb	r1, r3
 800a116:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a120:	400a      	ands	r2, r1
 800a122:	b2d2      	uxtb	r2, r2
 800a124:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a136:	b29b      	uxth	r3, r3
 800a138:	3b01      	subs	r3, #1
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a148:	b29b      	uxth	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f040 80a1 	bne.w	800a292 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a158:	e853 3f00 	ldrex	r3, [r3]
 800a15c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a15e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a160:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a164:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a16e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a170:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a172:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a174:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a176:	e841 2300 	strex	r3, r2, [r1]
 800a17a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a17c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e6      	bne.n	800a150 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	3308      	adds	r3, #8
 800a188:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a194:	f023 0301 	bic.w	r3, r3, #1
 800a198:	667b      	str	r3, [r7, #100]	@ 0x64
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3308      	adds	r3, #8
 800a1a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a1a2:	647a      	str	r2, [r7, #68]	@ 0x44
 800a1a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1aa:	e841 2300 	strex	r3, r2, [r1]
 800a1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e5      	bne.n	800a182 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a33      	ldr	r2, [pc, #204]	@ (800a29c <UART_RxISR_8BIT+0x1b4>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d01f      	beq.n	800a214 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d018      	beq.n	800a214 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	623b      	str	r3, [r7, #32]
   return(result);
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a1f6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a200:	633b      	str	r3, [r7, #48]	@ 0x30
 800a202:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a204:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a208:	e841 2300 	strex	r3, r2, [r1]
 800a20c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e6      	bne.n	800a1e2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d12e      	bne.n	800a27a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	e853 3f00 	ldrex	r3, [r3]
 800a22e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f023 0310 	bic.w	r3, r3, #16
 800a236:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	461a      	mov	r2, r3
 800a23e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a240:	61fb      	str	r3, [r7, #28]
 800a242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a244:	69b9      	ldr	r1, [r7, #24]
 800a246:	69fa      	ldr	r2, [r7, #28]
 800a248:	e841 2300 	strex	r3, r2, [r1]
 800a24c:	617b      	str	r3, [r7, #20]
   return(result);
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e6      	bne.n	800a222 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	f003 0310 	and.w	r3, r3, #16
 800a25e:	2b10      	cmp	r3, #16
 800a260:	d103      	bne.n	800a26a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2210      	movs	r2, #16
 800a268:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7ff f858 	bl	8009328 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a278:	e00b      	b.n	800a292 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7f8 feca 	bl	8003014 <HAL_UART_RxCpltCallback>
}
 800a280:	e007      	b.n	800a292 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	699a      	ldr	r2, [r3, #24]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f042 0208 	orr.w	r2, r2, #8
 800a290:	619a      	str	r2, [r3, #24]
}
 800a292:	bf00      	nop
 800a294:	3770      	adds	r7, #112	@ 0x70
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	40008000 	.word	0x40008000

0800a2a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b09c      	sub	sp, #112	@ 0x70
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a2ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2b8:	2b22      	cmp	r3, #34	@ 0x22
 800a2ba:	f040 80be 	bne.w	800a43a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a2ce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a2d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2e2:	1c9a      	adds	r2, r3, #2
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a300:	b29b      	uxth	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	f040 80a1 	bne.w	800a44a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a31c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a326:	657b      	str	r3, [r7, #84]	@ 0x54
 800a328:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a32c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e6      	bne.n	800a308 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3308      	adds	r3, #8
 800a340:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a344:	e853 3f00 	ldrex	r3, [r3]
 800a348:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34c:	f023 0301 	bic.w	r3, r3, #1
 800a350:	663b      	str	r3, [r7, #96]	@ 0x60
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3308      	adds	r3, #8
 800a358:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a35a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a360:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a362:	e841 2300 	strex	r3, r2, [r1]
 800a366:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e5      	bne.n	800a33a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2220      	movs	r2, #32
 800a372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a33      	ldr	r2, [pc, #204]	@ (800a454 <UART_RxISR_16BIT+0x1b4>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d01f      	beq.n	800a3cc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a396:	2b00      	cmp	r3, #0
 800a398:	d018      	beq.n	800a3cc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	e853 3f00 	ldrex	r3, [r3]
 800a3a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a3ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3ba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3c0:	e841 2300 	strex	r3, r2, [r1]
 800a3c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1e6      	bne.n	800a39a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d12e      	bne.n	800a432 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	e853 3f00 	ldrex	r3, [r3]
 800a3e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	f023 0310 	bic.w	r3, r3, #16
 800a3ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a3f8:	61bb      	str	r3, [r7, #24]
 800a3fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fc:	6979      	ldr	r1, [r7, #20]
 800a3fe:	69ba      	ldr	r2, [r7, #24]
 800a400:	e841 2300 	strex	r3, r2, [r1]
 800a404:	613b      	str	r3, [r7, #16]
   return(result);
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1e6      	bne.n	800a3da <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	f003 0310 	and.w	r3, r3, #16
 800a416:	2b10      	cmp	r3, #16
 800a418:	d103      	bne.n	800a422 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2210      	movs	r2, #16
 800a420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7fe ff7c 	bl	8009328 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a430:	e00b      	b.n	800a44a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f7f8 fdee 	bl	8003014 <HAL_UART_RxCpltCallback>
}
 800a438:	e007      	b.n	800a44a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	699a      	ldr	r2, [r3, #24]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f042 0208 	orr.w	r2, r2, #8
 800a448:	619a      	str	r2, [r3, #24]
}
 800a44a:	bf00      	nop
 800a44c:	3770      	adds	r7, #112	@ 0x70
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	40008000 	.word	0x40008000

0800a458 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b0ac      	sub	sp, #176	@ 0xb0
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a466:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a48e:	2b22      	cmp	r3, #34	@ 0x22
 800a490:	f040 8182 	bne.w	800a798 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a49a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a49e:	e125      	b.n	800a6ec <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a4aa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a4ae:	b2d9      	uxtb	r1, r3
 800a4b0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a4b4:	b2da      	uxtb	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4ba:	400a      	ands	r2, r1
 800a4bc:	b2d2      	uxtb	r2, r2
 800a4be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a4e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4ea:	f003 0307 	and.w	r3, r3, #7
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d053      	beq.n	800a59a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d011      	beq.n	800a522 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a4fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00b      	beq.n	800a522 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2201      	movs	r2, #1
 800a510:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a518:	f043 0201 	orr.w	r2, r3, #1
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d011      	beq.n	800a552 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a52e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00b      	beq.n	800a552 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2202      	movs	r2, #2
 800a540:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a548:	f043 0204 	orr.w	r2, r3, #4
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a556:	f003 0304 	and.w	r3, r3, #4
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d011      	beq.n	800a582 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a55e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a562:	f003 0301 	and.w	r3, r3, #1
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00b      	beq.n	800a582 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2204      	movs	r2, #4
 800a570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a578:	f043 0202 	orr.w	r2, r3, #2
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d006      	beq.n	800a59a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7fe fec2 	bl	8009316 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f040 80a2 	bne.w	800a6ec <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a5b0:	e853 3f00 	ldrex	r3, [r3]
 800a5b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a5b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a5cc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ce:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a5d0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a5d2:	e841 2300 	strex	r3, r2, [r1]
 800a5d6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a5d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1e4      	bne.n	800a5a8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5e8:	e853 3f00 	ldrex	r3, [r3]
 800a5ec:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a5ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a5f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5f4:	f023 0301 	bic.w	r3, r3, #1
 800a5f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	3308      	adds	r3, #8
 800a602:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a606:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a608:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a60c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a60e:	e841 2300 	strex	r3, r2, [r1]
 800a612:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a614:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1e1      	bne.n	800a5de <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2220      	movs	r2, #32
 800a61e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a5f      	ldr	r2, [pc, #380]	@ (800a7b0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d021      	beq.n	800a67c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a642:	2b00      	cmp	r3, #0
 800a644:	d01a      	beq.n	800a67c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a64e:	e853 3f00 	ldrex	r3, [r3]
 800a652:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a656:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a65a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	461a      	mov	r2, r3
 800a664:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a668:	657b      	str	r3, [r7, #84]	@ 0x54
 800a66a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a66e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a670:	e841 2300 	strex	r3, r2, [r1]
 800a674:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1e4      	bne.n	800a646 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a680:	2b01      	cmp	r3, #1
 800a682:	d130      	bne.n	800a6e6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a692:	e853 3f00 	ldrex	r3, [r3]
 800a696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69a:	f023 0310 	bic.w	r3, r3, #16
 800a69e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6b4:	e841 2300 	strex	r3, r2, [r1]
 800a6b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e4      	bne.n	800a68a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	f003 0310 	and.w	r3, r3, #16
 800a6ca:	2b10      	cmp	r3, #16
 800a6cc:	d103      	bne.n	800a6d6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2210      	movs	r2, #16
 800a6d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7fe fe22 	bl	8009328 <HAL_UARTEx_RxEventCallback>
 800a6e4:	e002      	b.n	800a6ec <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7f8 fc94 	bl	8003014 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a6ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d006      	beq.n	800a702 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a6f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6f8:	f003 0320 	and.w	r3, r3, #32
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f47f aecf 	bne.w	800a4a0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a708:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a70c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a710:	2b00      	cmp	r3, #0
 800a712:	d049      	beq.n	800a7a8 <UART_RxISR_8BIT_FIFOEN+0x350>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a71a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a71e:	429a      	cmp	r2, r3
 800a720:	d242      	bcs.n	800a7a8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	3308      	adds	r3, #8
 800a728:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	e853 3f00 	ldrex	r3, [r3]
 800a730:	61fb      	str	r3, [r7, #28]
   return(result);
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	3308      	adds	r3, #8
 800a742:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a74c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e3      	bne.n	800a722 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a15      	ldr	r2, [pc, #84]	@ (800a7b4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a75e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	e853 3f00 	ldrex	r3, [r3]
 800a76c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	f043 0320 	orr.w	r3, r3, #32
 800a774:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	461a      	mov	r2, r3
 800a77e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a782:	61bb      	str	r3, [r7, #24]
 800a784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	6979      	ldr	r1, [r7, #20]
 800a788:	69ba      	ldr	r2, [r7, #24]
 800a78a:	e841 2300 	strex	r3, r2, [r1]
 800a78e:	613b      	str	r3, [r7, #16]
   return(result);
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1e4      	bne.n	800a760 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a796:	e007      	b.n	800a7a8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0208 	orr.w	r2, r2, #8
 800a7a6:	619a      	str	r2, [r3, #24]
}
 800a7a8:	bf00      	nop
 800a7aa:	37b0      	adds	r7, #176	@ 0xb0
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	40008000 	.word	0x40008000
 800a7b4:	0800a0e9 	.word	0x0800a0e9

0800a7b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b0ae      	sub	sp, #184	@ 0xb8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7c6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7ee:	2b22      	cmp	r3, #34	@ 0x22
 800a7f0:	f040 8186 	bne.w	800ab00 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a7fa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7fe:	e129      	b.n	800aa54 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a806:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a80e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a812:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a816:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a81a:	4013      	ands	r3, r2
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a822:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a828:	1c9a      	adds	r2, r3, #2
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a834:	b29b      	uxth	r3, r3
 800a836:	3b01      	subs	r3, #1
 800a838:	b29a      	uxth	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a84a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a84e:	f003 0307 	and.w	r3, r3, #7
 800a852:	2b00      	cmp	r3, #0
 800a854:	d053      	beq.n	800a8fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a856:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a85a:	f003 0301 	and.w	r3, r3, #1
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d011      	beq.n	800a886 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00b      	beq.n	800a886 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2201      	movs	r2, #1
 800a874:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a87c:	f043 0201 	orr.w	r2, r3, #1
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a88a:	f003 0302 	and.w	r3, r3, #2
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d011      	beq.n	800a8b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00b      	beq.n	800a8b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ac:	f043 0204 	orr.w	r2, r3, #4
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a8ba:	f003 0304 	and.w	r3, r3, #4
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d011      	beq.n	800a8e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a8c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00b      	beq.n	800a8e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2204      	movs	r2, #4
 800a8d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8dc:	f043 0202 	orr.w	r2, r3, #2
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d006      	beq.n	800a8fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7fe fd10 	bl	8009316 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a904:	b29b      	uxth	r3, r3
 800a906:	2b00      	cmp	r3, #0
 800a908:	f040 80a4 	bne.w	800aa54 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a914:	e853 3f00 	ldrex	r3, [r3]
 800a918:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a91a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a91c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a920:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	461a      	mov	r2, r3
 800a92a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a92e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a932:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a934:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a936:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a93a:	e841 2300 	strex	r3, r2, [r1]
 800a93e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1e2      	bne.n	800a90c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3308      	adds	r3, #8
 800a94c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a950:	e853 3f00 	ldrex	r3, [r3]
 800a954:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a958:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a95c:	f023 0301 	bic.w	r3, r3, #1
 800a960:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3308      	adds	r3, #8
 800a96a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a96e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a970:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a972:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a974:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a976:	e841 2300 	strex	r3, r2, [r1]
 800a97a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a97c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1e1      	bne.n	800a946 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2220      	movs	r2, #32
 800a986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a5f      	ldr	r2, [pc, #380]	@ (800ab18 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d021      	beq.n	800a9e4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d01a      	beq.n	800a9e4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9b6:	e853 3f00 	ldrex	r3, [r3]
 800a9ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a9bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a9c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a9d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9d2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a9d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a9d8:	e841 2300 	strex	r3, r2, [r1]
 800a9dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a9de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e4      	bne.n	800a9ae <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d130      	bne.n	800aa4e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fa:	e853 3f00 	ldrex	r3, [r3]
 800a9fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa02:	f023 0310 	bic.w	r3, r3, #16
 800aa06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aa14:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa1c:	e841 2300 	strex	r3, r2, [r1]
 800aa20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1e4      	bne.n	800a9f2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	f003 0310 	and.w	r3, r3, #16
 800aa32:	2b10      	cmp	r3, #16
 800aa34:	d103      	bne.n	800aa3e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2210      	movs	r2, #16
 800aa3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa44:	4619      	mov	r1, r3
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7fe fc6e 	bl	8009328 <HAL_UARTEx_RxEventCallback>
 800aa4c:	e002      	b.n	800aa54 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7f8 fae0 	bl	8003014 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa54:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d006      	beq.n	800aa6a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800aa5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa60:	f003 0320 	and.w	r3, r3, #32
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f47f aecb 	bne.w	800a800 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa70:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aa74:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d049      	beq.n	800ab10 <UART_RxISR_16BIT_FIFOEN+0x358>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aa82:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d242      	bcs.n	800ab10 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3308      	adds	r3, #8
 800aa90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	e853 3f00 	ldrex	r3, [r3]
 800aa98:	623b      	str	r3, [r7, #32]
   return(result);
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aaa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	3308      	adds	r3, #8
 800aaaa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800aaae:	633a      	str	r2, [r7, #48]	@ 0x30
 800aab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aab6:	e841 2300 	strex	r3, r2, [r1]
 800aaba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1e3      	bne.n	800aa8a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a15      	ldr	r2, [pc, #84]	@ (800ab1c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800aac6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	e853 3f00 	ldrex	r3, [r3]
 800aad4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f043 0320 	orr.w	r3, r3, #32
 800aadc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	461a      	mov	r2, r3
 800aae6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aaea:	61fb      	str	r3, [r7, #28]
 800aaec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaee:	69b9      	ldr	r1, [r7, #24]
 800aaf0:	69fa      	ldr	r2, [r7, #28]
 800aaf2:	e841 2300 	strex	r3, r2, [r1]
 800aaf6:	617b      	str	r3, [r7, #20]
   return(result);
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1e4      	bne.n	800aac8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aafe:	e007      	b.n	800ab10 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	699a      	ldr	r2, [r3, #24]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f042 0208 	orr.w	r2, r2, #8
 800ab0e:	619a      	str	r2, [r3, #24]
}
 800ab10:	bf00      	nop
 800ab12:	37b8      	adds	r7, #184	@ 0xb8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	40008000 	.word	0x40008000
 800ab1c:	0800a2a1 	.word	0x0800a2a1

0800ab20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bc80      	pop	{r7}
 800ab30:	4770      	bx	lr

0800ab32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab32:	b480      	push	{r7}
 800ab34:	b083      	sub	sp, #12
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ab3a:	bf00      	nop
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bc80      	pop	{r7}
 800ab42:	4770      	bx	lr

0800ab44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bc80      	pop	{r7}
 800ab54:	4770      	bx	lr

0800ab56 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b088      	sub	sp, #32
 800ab5a:	af02      	add	r7, sp, #8
 800ab5c:	60f8      	str	r0, [r7, #12]
 800ab5e:	1d3b      	adds	r3, r7, #4
 800ab60:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d101      	bne.n	800ab76 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800ab72:	2302      	movs	r3, #2
 800ab74:	e046      	b.n	800ac04 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2224      	movs	r2, #36	@ 0x24
 800ab82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f022 0201 	bic.w	r2, r2, #1
 800ab94:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d105      	bne.n	800abbc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800abb0:	1d3b      	adds	r3, r7, #4
 800abb2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f000 f90e 	bl	800add8 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0201 	orr.w	r2, r2, #1
 800abca:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abcc:	f7f7 fc90 	bl	80024f0 <HAL_GetTick>
 800abd0:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	2200      	movs	r2, #0
 800abdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f7fe ff10 	bl	8009a06 <UART_WaitOnFlagUntilTimeout>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800abec:	2303      	movs	r3, #3
 800abee:	75fb      	strb	r3, [r7, #23]
 800abf0:	e003      	b.n	800abfa <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800ac02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b089      	sub	sp, #36	@ 0x24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d101      	bne.n	800ac22 <HAL_UARTEx_EnableStopMode+0x16>
 800ac1e:	2302      	movs	r3, #2
 800ac20:	e021      	b.n	800ac66 <HAL_UARTEx_EnableStopMode+0x5a>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	e853 3f00 	ldrex	r3, [r3]
 800ac36:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	f043 0302 	orr.w	r3, r3, #2
 800ac3e:	61fb      	str	r3, [r7, #28]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	461a      	mov	r2, r3
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	61bb      	str	r3, [r7, #24]
 800ac4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4c:	6979      	ldr	r1, [r7, #20]
 800ac4e:	69ba      	ldr	r2, [r7, #24]
 800ac50:	e841 2300 	strex	r3, r2, [r1]
 800ac54:	613b      	str	r3, [r7, #16]
   return(result);
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1e6      	bne.n	800ac2a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3724      	adds	r7, #36	@ 0x24
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bc80      	pop	{r7}
 800ac6e:	4770      	bx	lr

0800ac70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d101      	bne.n	800ac86 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac82:	2302      	movs	r3, #2
 800ac84:	e027      	b.n	800acd6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2224      	movs	r2, #36	@ 0x24
 800ac92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f022 0201 	bic.w	r2, r2, #1
 800acac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800acb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2220      	movs	r2, #32
 800acc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	bc80      	pop	{r7}
 800acde:	4770      	bx	lr

0800ace0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d101      	bne.n	800acf8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800acf4:	2302      	movs	r3, #2
 800acf6:	e02d      	b.n	800ad54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2224      	movs	r2, #36	@ 0x24
 800ad04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f022 0201 	bic.w	r2, r2, #1
 800ad1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	430a      	orrs	r2, r1
 800ad32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f871 	bl	800ae1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2220      	movs	r2, #32
 800ad46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d101      	bne.n	800ad74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad70:	2302      	movs	r3, #2
 800ad72:	e02d      	b.n	800add0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2224      	movs	r2, #36	@ 0x24
 800ad80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f022 0201 	bic.w	r2, r2, #1
 800ad9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	430a      	orrs	r2, r1
 800adae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f833 	bl	800ae1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2220      	movs	r2, #32
 800adc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	1d3b      	adds	r3, r7, #4
 800ade2:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f023 0210 	bic.w	r2, r3, #16
 800adf0:	893b      	ldrh	r3, [r7, #8]
 800adf2:	4619      	mov	r1, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800ae06:	7abb      	ldrb	r3, [r7, #10]
 800ae08:	061a      	lsls	r2, r3, #24
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	605a      	str	r2, [r3, #4]
}
 800ae12:	bf00      	nop
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bc80      	pop	{r7}
 800ae1a:	4770      	bx	lr

0800ae1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d108      	bne.n	800ae3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae3c:	e031      	b.n	800aea2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae3e:	2308      	movs	r3, #8
 800ae40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae42:	2308      	movs	r3, #8
 800ae44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	0e5b      	lsrs	r3, r3, #25
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	f003 0307 	and.w	r3, r3, #7
 800ae54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	0f5b      	lsrs	r3, r3, #29
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	f003 0307 	and.w	r3, r3, #7
 800ae64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	7b3a      	ldrb	r2, [r7, #12]
 800ae6a:	4910      	ldr	r1, [pc, #64]	@ (800aeac <UARTEx_SetNbDataToProcess+0x90>)
 800ae6c:	5c8a      	ldrb	r2, [r1, r2]
 800ae6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae72:	7b3a      	ldrb	r2, [r7, #12]
 800ae74:	490e      	ldr	r1, [pc, #56]	@ (800aeb0 <UARTEx_SetNbDataToProcess+0x94>)
 800ae76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae78:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
 800ae86:	7b7a      	ldrb	r2, [r7, #13]
 800ae88:	4908      	ldr	r1, [pc, #32]	@ (800aeac <UARTEx_SetNbDataToProcess+0x90>)
 800ae8a:	5c8a      	ldrb	r2, [r1, r2]
 800ae8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae90:	7b7a      	ldrb	r2, [r7, #13]
 800ae92:	4907      	ldr	r1, [pc, #28]	@ (800aeb0 <UARTEx_SetNbDataToProcess+0x94>)
 800ae94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae96:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aea2:	bf00      	nop
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bc80      	pop	{r7}
 800aeaa:	4770      	bx	lr
 800aeac:	0801dc68 	.word	0x0801dc68
 800aeb0:	0801dc70 	.word	0x0801dc70

0800aeb4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800aeb8:	f7f7 f9b6 	bl	8002228 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800aebc:	f000 f820 	bl	800af00 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800aec0:	bf00      	nop
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800aec8:	f04f 30ff 	mov.w	r0, #4294967295
 800aecc:	f011 fa38 	bl	801c340 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800aed0:	bf00      	nop
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800aed4:	b480      	push	{r7}
 800aed6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800aed8:	f3bf 8f4f 	dsb	sy
}
 800aedc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800aede:	4b06      	ldr	r3, [pc, #24]	@ (800aef8 <__NVIC_SystemReset+0x24>)
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800aee6:	4904      	ldr	r1, [pc, #16]	@ (800aef8 <__NVIC_SystemReset+0x24>)
 800aee8:	4b04      	ldr	r3, [pc, #16]	@ (800aefc <__NVIC_SystemReset+0x28>)
 800aeea:	4313      	orrs	r3, r2
 800aeec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800aeee:	f3bf 8f4f 	dsb	sy
}
 800aef2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800aef4:	bf00      	nop
 800aef6:	e7fd      	b.n	800aef4 <__NVIC_SystemReset+0x20>
 800aef8:	e000ed00 	.word	0xe000ed00
 800aefc:	05fa0004 	.word	0x05fa0004

0800af00 <LoRaWAN_Init>:


/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800af06:	2300      	movs	r3, #0
 800af08:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800af0a:	2301      	movs	r3, #1
 800af0c:	9302      	str	r3, [sp, #8]
 800af0e:	2303      	movs	r3, #3
 800af10:	9301      	str	r3, [sp, #4]
 800af12:	2301      	movs	r3, #1
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	4b59      	ldr	r3, [pc, #356]	@ (800b07c <LoRaWAN_Init+0x17c>)
 800af18:	2200      	movs	r2, #0
 800af1a:	2100      	movs	r1, #0
 800af1c:	2002      	movs	r0, #2
 800af1e:	f011 fe5b 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800af22:	2301      	movs	r3, #1
 800af24:	9302      	str	r3, [sp, #8]
 800af26:	2306      	movs	r3, #6
 800af28:	9301      	str	r3, [sp, #4]
 800af2a:	2302      	movs	r3, #2
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	4b54      	ldr	r3, [pc, #336]	@ (800b080 <LoRaWAN_Init+0x180>)
 800af30:	2200      	movs	r2, #0
 800af32:	2100      	movs	r1, #0
 800af34:	2002      	movs	r0, #2
 800af36:	f011 fe4f 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800af3a:	2301      	movs	r3, #1
 800af3c:	9302      	str	r3, [sp, #8]
 800af3e:	2303      	movs	r3, #3
 800af40:	9301      	str	r3, [sp, #4]
 800af42:	2301      	movs	r3, #1
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	4b4f      	ldr	r3, [pc, #316]	@ (800b084 <LoRaWAN_Init+0x184>)
 800af48:	2200      	movs	r2, #0
 800af4a:	2100      	movs	r1, #0
 800af4c:	2002      	movs	r0, #2
 800af4e:	f011 fe43 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800af52:	1d3b      	adds	r3, r7, #4
 800af54:	4619      	mov	r1, r3
 800af56:	2000      	movs	r0, #0
 800af58:	f003 fa74 	bl	800e444 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	0e1b      	lsrs	r3, r3, #24
 800af60:	b2db      	uxtb	r3, r3
 800af62:	461a      	mov	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	0c1b      	lsrs	r3, r3, #16
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	4619      	mov	r1, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	0a1b      	lsrs	r3, r3, #8
 800af70:	b2db      	uxtb	r3, r3
 800af72:	9302      	str	r3, [sp, #8]
 800af74:	9101      	str	r1, [sp, #4]
 800af76:	9200      	str	r2, [sp, #0]
 800af78:	4b43      	ldr	r3, [pc, #268]	@ (800b088 <LoRaWAN_Init+0x188>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	2100      	movs	r1, #0
 800af7e:	2002      	movs	r0, #2
 800af80:	f011 fe2a 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800af84:	1d3b      	adds	r3, r7, #4
 800af86:	4619      	mov	r1, r3
 800af88:	2001      	movs	r0, #1
 800af8a:	f003 fa5b 	bl	800e444 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	0e1b      	lsrs	r3, r3, #24
 800af92:	b2db      	uxtb	r3, r3
 800af94:	461a      	mov	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	0c1b      	lsrs	r3, r3, #16
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	4619      	mov	r1, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	0a1b      	lsrs	r3, r3, #8
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	b2c0      	uxtb	r0, r0
 800afa8:	9003      	str	r0, [sp, #12]
 800afaa:	9302      	str	r3, [sp, #8]
 800afac:	9101      	str	r1, [sp, #4]
 800afae:	9200      	str	r2, [sp, #0]
 800afb0:	4b36      	ldr	r3, [pc, #216]	@ (800b08c <LoRaWAN_Init+0x18c>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	2100      	movs	r1, #0
 800afb6:	2002      	movs	r0, #2
 800afb8:	f011 fe0e 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800afbc:	2300      	movs	r3, #0
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	4b33      	ldr	r3, [pc, #204]	@ (800b090 <LoRaWAN_Init+0x190>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800afc8:	4832      	ldr	r0, [pc, #200]	@ (800b094 <LoRaWAN_Init+0x194>)
 800afca:	f011 fb57 	bl	801c67c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800afce:	2300      	movs	r3, #0
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	4b31      	ldr	r3, [pc, #196]	@ (800b098 <LoRaWAN_Init+0x198>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800afda:	4830      	ldr	r0, [pc, #192]	@ (800b09c <LoRaWAN_Init+0x19c>)
 800afdc:	f011 fb4e 	bl	801c67c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800afe0:	2300      	movs	r3, #0
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	4b2e      	ldr	r3, [pc, #184]	@ (800b0a0 <LoRaWAN_Init+0x1a0>)
 800afe6:	2201      	movs	r2, #1
 800afe8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800afec:	482d      	ldr	r0, [pc, #180]	@ (800b0a4 <LoRaWAN_Init+0x1a4>)
 800afee:	f011 fb45 	bl	801c67c <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800aff2:	2300      	movs	r3, #0
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	4b2c      	ldr	r3, [pc, #176]	@ (800b0a8 <LoRaWAN_Init+0x1a8>)
 800aff8:	2200      	movs	r2, #0
 800affa:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800affe:	482b      	ldr	r0, [pc, #172]	@ (800b0ac <LoRaWAN_Init+0x1ac>)
 800b000:	f011 fb3c 	bl	801c67c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800b004:	4a2a      	ldr	r2, [pc, #168]	@ (800b0b0 <LoRaWAN_Init+0x1b0>)
 800b006:	2100      	movs	r1, #0
 800b008:	2001      	movs	r0, #1
 800b00a:	f011 fa95 	bl	801c538 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800b00e:	4a29      	ldr	r2, [pc, #164]	@ (800b0b4 <LoRaWAN_Init+0x1b4>)
 800b010:	2100      	movs	r1, #0
 800b012:	2004      	movs	r0, #4
 800b014:	f011 fa90 	bl	801c538 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800b018:	4a27      	ldr	r2, [pc, #156]	@ (800b0b8 <LoRaWAN_Init+0x1b8>)
 800b01a:	2100      	movs	r1, #0
 800b01c:	2008      	movs	r0, #8
 800b01e:	f011 fa8b 	bl	801c538 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800b022:	4a26      	ldr	r2, [pc, #152]	@ (800b0bc <LoRaWAN_Init+0x1bc>)
 800b024:	2100      	movs	r1, #0
 800b026:	2010      	movs	r0, #16
 800b028:	f011 fa86 	bl	801c538 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800b02c:	f000 fd5a 	bl	800bae4 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800b030:	4923      	ldr	r1, [pc, #140]	@ (800b0c0 <LoRaWAN_Init+0x1c0>)
 800b032:	4824      	ldr	r0, [pc, #144]	@ (800b0c4 <LoRaWAN_Init+0x1c4>)
 800b034:	f002 fa6c 	bl	800d510 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800b038:	4823      	ldr	r0, [pc, #140]	@ (800b0c8 <LoRaWAN_Init+0x1c8>)
 800b03a:	f002 fad7 	bl	800d5ec <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800b03e:	4819      	ldr	r0, [pc, #100]	@ (800b0a4 <LoRaWAN_Init+0x1a4>)
 800b040:	f011 fb52 	bl	801c6e8 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800b044:	4b21      	ldr	r3, [pc, #132]	@ (800b0cc <LoRaWAN_Init+0x1cc>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	4a21      	ldr	r2, [pc, #132]	@ (800b0d0 <LoRaWAN_Init+0x1d0>)
 800b04a:	7812      	ldrb	r2, [r2, #0]
 800b04c:	4611      	mov	r1, r2
 800b04e:	4618      	mov	r0, r3
 800b050:	f002 fc30 	bl	800d8b4 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800b054:	4b1f      	ldr	r3, [pc, #124]	@ (800b0d4 <LoRaWAN_Init+0x1d4>)
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10b      	bne.n	800b074 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800b05c:	4b1e      	ldr	r3, [pc, #120]	@ (800b0d8 <LoRaWAN_Init+0x1d8>)
 800b05e:	6819      	ldr	r1, [r3, #0]
 800b060:	2300      	movs	r3, #0
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	4b1d      	ldr	r3, [pc, #116]	@ (800b0dc <LoRaWAN_Init+0x1dc>)
 800b066:	2200      	movs	r2, #0
 800b068:	481d      	ldr	r0, [pc, #116]	@ (800b0e0 <LoRaWAN_Init+0x1e0>)
 800b06a:	f011 fb07 	bl	801c67c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800b06e:	481c      	ldr	r0, [pc, #112]	@ (800b0e0 <LoRaWAN_Init+0x1e0>)
 800b070:	f011 fb3a 	bl	801c6e8 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800b074:	bf00      	nop
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	0801d280 	.word	0x0801d280
 800b080:	0801d2a4 	.word	0x0801d2a4
 800b084:	0801d2c8 	.word	0x0801d2c8
 800b088:	0801d2ec 	.word	0x0801d2ec
 800b08c:	0801d310 	.word	0x0801d310
 800b090:	0800b605 	.word	0x0800b605
 800b094:	20000660 	.word	0x20000660
 800b098:	0800b617 	.word	0x0800b617
 800b09c:	20000678 	.word	0x20000678
 800b0a0:	0800b629 	.word	0x0800b629
 800b0a4:	20000690 	.word	0x20000690
 800b0a8:	0800b9e5 	.word	0x0800b9e5
 800b0ac:	20000554 	.word	0x20000554
 800b0b0:	0800d849 	.word	0x0800d849
 800b0b4:	0800b211 	.word	0x0800b211
 800b0b8:	0800ba09 	.word	0x0800ba09
 800b0bc:	0800b965 	.word	0x0800b965
 800b0c0:	01030100 	.word	0x01030100
 800b0c4:	20000024 	.word	0x20000024
 800b0c8:	20000070 	.word	0x20000070
 800b0cc:	20000020 	.word	0x20000020
 800b0d0:	20000021 	.word	0x20000021
 800b0d4:	20000538 	.word	0x20000538
 800b0d8:	20000088 	.word	0x20000088
 800b0dc:	0800b5e1 	.word	0x0800b5e1
 800b0e0:	2000053c 	.word	0x2000053c

0800b0e4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800b0e4:	b5b0      	push	{r4, r5, r7, lr}
 800b0e6:	b08a      	sub	sp, #40	@ 0x28
 800b0e8:	af06      	add	r7, sp, #24
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d07b      	beq.n	800b1f0 <OnRxData+0x10c>
  {
#if defined(DBG)   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800b0f8:	483f      	ldr	r0, [pc, #252]	@ (800b1f8 <OnRxData+0x114>)
 800b0fa:	f011 faf5 	bl	801c6e8 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d050      	beq.n	800b1a8 <OnRxData+0xc4>
    {
      if (appData != NULL)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d04d      	beq.n	800b1a8 <OnRxData+0xc4>
      {
        RxPort = appData->Port;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d046      	beq.n	800b1a8 <OnRxData+0xc4>
        {
          switch (appData->Port)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d01f      	beq.n	800b162 <OnRxData+0x7e>
 800b122:	2b03      	cmp	r3, #3
 800b124:	d13b      	bne.n	800b19e <OnRxData+0xba>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	785b      	ldrb	r3, [r3, #1]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d139      	bne.n	800b1a2 <OnRxData+0xbe>
              {
                switch (appData->Buffer[0])
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b02      	cmp	r3, #2
 800b136:	d00e      	beq.n	800b156 <OnRxData+0x72>
 800b138:	2b02      	cmp	r3, #2
 800b13a:	dc10      	bgt.n	800b15e <OnRxData+0x7a>
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d002      	beq.n	800b146 <OnRxData+0x62>
 800b140:	2b01      	cmp	r3, #1
 800b142:	d004      	beq.n	800b14e <OnRxData+0x6a>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800b144:	e00b      	b.n	800b15e <OnRxData+0x7a>
                    LmHandlerRequestClass(CLASS_A);
 800b146:	2000      	movs	r0, #0
 800b148:	f002 fd68 	bl	800dc1c <LmHandlerRequestClass>
                    break;
 800b14c:	e008      	b.n	800b160 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_B);
 800b14e:	2001      	movs	r0, #1
 800b150:	f002 fd64 	bl	800dc1c <LmHandlerRequestClass>
                    break;
 800b154:	e004      	b.n	800b160 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_C);
 800b156:	2002      	movs	r0, #2
 800b158:	f002 fd60 	bl	800dc1c <LmHandlerRequestClass>
                    break;
 800b15c:	e000      	b.n	800b160 <OnRxData+0x7c>
                    break;
 800b15e:	bf00      	nop
                }
              }
              break;
 800b160:	e01f      	b.n	800b1a2 <OnRxData+0xbe>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	785b      	ldrb	r3, [r3, #1]
 800b166:	2b01      	cmp	r3, #1
 800b168:	d11d      	bne.n	800b1a6 <OnRxData+0xc2>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	b2da      	uxtb	r2, r3
 800b176:	4b21      	ldr	r3, [pc, #132]	@ (800b1fc <OnRxData+0x118>)
 800b178:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800b17a:	4b20      	ldr	r3, [pc, #128]	@ (800b1fc <OnRxData+0x118>)
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d106      	bne.n	800b190 <OnRxData+0xac>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800b182:	4b1f      	ldr	r3, [pc, #124]	@ (800b200 <OnRxData+0x11c>)
 800b184:	2200      	movs	r2, #0
 800b186:	2100      	movs	r1, #0
 800b188:	2003      	movs	r0, #3
 800b18a:	f011 fd25 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
					#if defined(DBG)   // XXX:
                  	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
					#endif
                }
              }
              break;
 800b18e:	e00a      	b.n	800b1a6 <OnRxData+0xc2>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800b190:	4b1c      	ldr	r3, [pc, #112]	@ (800b204 <OnRxData+0x120>)
 800b192:	2200      	movs	r2, #0
 800b194:	2100      	movs	r1, #0
 800b196:	2003      	movs	r0, #3
 800b198:	f011 fd1e 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
              break;
 800b19c:	e003      	b.n	800b1a6 <OnRxData+0xc2>

            default:

              break;
 800b19e:	bf00      	nop
 800b1a0:	e002      	b.n	800b1a8 <OnRxData+0xc4>
              break;
 800b1a2:	bf00      	nop
 800b1a4:	e000      	b.n	800b1a8 <OnRxData+0xc4>
              break;
 800b1a6:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	7c1b      	ldrb	r3, [r3, #16]
 800b1ac:	2b05      	cmp	r3, #5
 800b1ae:	d81f      	bhi.n	800b1f0 <OnRxData+0x10c>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	7bfa      	ldrb	r2, [r7, #15]
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800b1bc:	460c      	mov	r4, r1
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	7c09      	ldrb	r1, [r1, #16]
 800b1c2:	4608      	mov	r0, r1
 800b1c4:	4910      	ldr	r1, [pc, #64]	@ (800b208 <OnRxData+0x124>)
 800b1c6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b1ca:	6838      	ldr	r0, [r7, #0]
 800b1cc:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800b1d0:	4605      	mov	r5, r0
 800b1d2:	6838      	ldr	r0, [r7, #0]
 800b1d4:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800b1d8:	9005      	str	r0, [sp, #20]
 800b1da:	9504      	str	r5, [sp, #16]
 800b1dc:	9103      	str	r1, [sp, #12]
 800b1de:	9402      	str	r4, [sp, #8]
 800b1e0:	9201      	str	r2, [sp, #4]
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	4b09      	ldr	r3, [pc, #36]	@ (800b20c <OnRxData+0x128>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	2003      	movs	r0, #3
 800b1ec:	f011 fcf4 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800b1f0:	bf00      	nop
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bdb0      	pop	{r4, r5, r7, pc}
 800b1f8:	20000678 	.word	0x20000678
 800b1fc:	2000065e 	.word	0x2000065e
 800b200:	0801d334 	.word	0x0801d334
 800b204:	0801d340 	.word	0x0801d340
 800b208:	20000008 	.word	0x20000008
 800b20c:	0801d34c 	.word	0x0801d34c

0800b210 <SendTxData>:

static void SendTxData(void)
{
 800b210:	b590      	push	{r4, r7, lr}
 800b212:	b091      	sub	sp, #68	@ 0x44
 800b214:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b216:	23ff      	movs	r3, #255	@ 0xff
 800b218:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800b21c:	f7f7 f838 	bl	8002290 <GetBatteryLevel>
 800b220:	4603      	mov	r3, r0
 800b222:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	637b      	str	r3, [r7, #52]	@ 0x34

  uint16_t pressure = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  int16_t temperature = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t humidity = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint32_t i = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t latitude = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	627b      	str	r3, [r7, #36]	@ 0x24
  int32_t longitude = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800b242:	2300      	movs	r3, #0
 800b244:	83fb      	strh	r3, [r7, #30]
  uint8_t t_sht=0, rh_sht=0;
 800b246:	2300      	movs	r3, #0
 800b248:	777b      	strb	r3, [r7, #29]
 800b24a:	2300      	movs	r3, #0
 800b24c:	773b      	strb	r3, [r7, #28]
  uint16_t data_sht=0;
 800b24e:	2300      	movs	r3, #0
 800b250:	837b      	strh	r3, [r7, #26]

  EnvSensors_Read(&sensor_data);
 800b252:	463b      	mov	r3, r7
 800b254:	4618      	mov	r0, r3
 800b256:	f7f7 f98d 	bl	8002574 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800b25a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	4b71      	ldr	r3, [pc, #452]	@ (800b428 <SendTxData+0x218>)
 800b262:	2201      	movs	r2, #1
 800b264:	2100      	movs	r1, #0
 800b266:	2002      	movs	r0, #2
 800b268:	f011 fcb6 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4618      	mov	r0, r3
 800b270:	f7f5 fc54 	bl	8000b1c <__aeabi_f2iz>
 800b274:	4603      	mov	r3, r0
 800b276:	b21b      	sxth	r3, r3
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	4b6c      	ldr	r3, [pc, #432]	@ (800b42c <SendTxData+0x21c>)
 800b27c:	2201      	movs	r2, #1
 800b27e:	2100      	movs	r1, #0
 800b280:	2002      	movs	r0, #2
 800b282:	f011 fca9 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC0 - Temp : %d\r\n", (int16_t)(SYS_GetADC0()));
 800b286:	f7f5 ffb1 	bl	80011ec <SYS_GetADC0>
 800b28a:	4603      	mov	r3, r0
 800b28c:	b21b      	sxth	r3, r3
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	4b67      	ldr	r3, [pc, #412]	@ (800b430 <SendTxData+0x220>)
 800b292:	2201      	movs	r2, #1
 800b294:	2100      	movs	r1, #0
 800b296:	2002      	movs	r0, #2
 800b298:	f011 fc9e 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC1 - Out V: %d\r\n", (int16_t)(SYS_GetADC1()));
 800b29c:	f7f5 ffc8 	bl	8001230 <SYS_GetADC1>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	b21b      	sxth	r3, r3
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	4b63      	ldr	r3, [pc, #396]	@ (800b434 <SendTxData+0x224>)
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	2002      	movs	r0, #2
 800b2ae:	f011 fc93 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC2 - Out A: %d\r\n", (int16_t)(SYS_GetADC2()));
 800b2b2:	f7f5 ffe1 	bl	8001278 <SYS_GetADC2>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	b21b      	sxth	r3, r3
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	4b5e      	ldr	r3, [pc, #376]	@ (800b438 <SendTxData+0x228>)
 800b2be:	2201      	movs	r2, #1
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	2002      	movs	r0, #2
 800b2c4:	f011 fc88 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC3 - In V : %d\r\n", (int16_t)(SYS_GetADC3()));
 800b2c8:	f7f5 fffa 	bl	80012c0 <SYS_GetADC3>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	b21b      	sxth	r3, r3
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	4b5a      	ldr	r3, [pc, #360]	@ (800b43c <SendTxData+0x22c>)
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	2002      	movs	r0, #2
 800b2da:	f011 fc7d 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>

  data_sht = sht40();
 800b2de:	f7f6 ff3f 	bl	8002160 <sht40>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	837b      	strh	r3, [r7, #26]
  t_sht = (data_sht >> 8);
 800b2e6:	8b7b      	ldrh	r3, [r7, #26]
 800b2e8:	0a1b      	lsrs	r3, r3, #8
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	777b      	strb	r3, [r7, #29]
  rh_sht = ((data_sht) & 0xFF);
 800b2ee:	8b7b      	ldrh	r3, [r7, #26]
 800b2f0:	773b      	strb	r3, [r7, #28]
  APP_LOG(TS_ON, VLEVEL_M, "TempSHT - In °C : %d\r\n", (uint8_t)(t_sht));
 800b2f2:	7f7b      	ldrb	r3, [r7, #29]
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	4b52      	ldr	r3, [pc, #328]	@ (800b440 <SendTxData+0x230>)
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	2002      	movs	r0, #2
 800b2fe:	f011 fc6b 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "RH SHT  - In  % : %d\r\n", (uint8_t)(rh_sht));
 800b302:	7f3b      	ldrb	r3, [r7, #28]
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	4b4f      	ldr	r3, [pc, #316]	@ (800b444 <SendTxData+0x234>)
 800b308:	2201      	movs	r2, #1
 800b30a:	2100      	movs	r1, #0
 800b30c:	2002      	movs	r0, #2
 800b30e:	f011 fc63 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800b312:	4b4d      	ldr	r3, [pc, #308]	@ (800b448 <SendTxData+0x238>)
 800b314:	2202      	movs	r2, #2
 800b316:	701a      	strb	r2, [r3, #0]


  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	494c      	ldr	r1, [pc, #304]	@ (800b44c <SendTxData+0x23c>)
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7f5 faad 	bl	800087c <__aeabi_fmul>
 800b322:	4603      	mov	r3, r0
 800b324:	4618      	mov	r0, r3
 800b326:	f7f5 fc1f 	bl	8000b68 <__aeabi_f2uiz>
 800b32a:	4603      	mov	r3, r0
 800b32c:	853b      	strh	r3, [r7, #40]	@ 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4618      	mov	r0, r3
 800b332:	f7f5 fbf3 	bl	8000b1c <__aeabi_f2iz>
 800b336:	4603      	mov	r3, r0
 800b338:	857b      	strh	r3, [r7, #42]	@ 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	4944      	ldr	r1, [pc, #272]	@ (800b450 <SendTxData+0x240>)
 800b33e:	4618      	mov	r0, r3
 800b340:	f7f5 fa9c 	bl	800087c <__aeabi_fmul>
 800b344:	4603      	mov	r3, r0
 800b346:	4941      	ldr	r1, [pc, #260]	@ (800b44c <SendTxData+0x23c>)
 800b348:	4618      	mov	r0, r3
 800b34a:	f7f5 fb4b 	bl	80009e4 <__aeabi_fdiv>
 800b34e:	4603      	mov	r3, r0
 800b350:	4618      	mov	r0, r3
 800b352:	f7f5 fc09 	bl	8000b68 <__aeabi_f2uiz>
 800b356:	4603      	mov	r3, r0
 800b358:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800b35a:	4b3b      	ldr	r3, [pc, #236]	@ (800b448 <SendTxData+0x238>)
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b360:	1c59      	adds	r1, r3, #1
 800b362:	6339      	str	r1, [r7, #48]	@ 0x30
 800b364:	4413      	add	r3, r2
 800b366:	4a3b      	ldr	r2, [pc, #236]	@ (800b454 <SendTxData+0x244>)
 800b368:	7812      	ldrb	r2, [r2, #0]
 800b36a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800b36c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b36e:	0a1b      	lsrs	r3, r3, #8
 800b370:	b298      	uxth	r0, r3
 800b372:	4b35      	ldr	r3, [pc, #212]	@ (800b448 <SendTxData+0x238>)
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b378:	1c59      	adds	r1, r3, #1
 800b37a:	6339      	str	r1, [r7, #48]	@ 0x30
 800b37c:	4413      	add	r3, r2
 800b37e:	b2c2      	uxtb	r2, r0
 800b380:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800b382:	4b31      	ldr	r3, [pc, #196]	@ (800b448 <SendTxData+0x238>)
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b388:	1c59      	adds	r1, r3, #1
 800b38a:	6339      	str	r1, [r7, #48]	@ 0x30
 800b38c:	4413      	add	r3, r2
 800b38e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800b390:	b2d2      	uxtb	r2, r2
 800b392:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800b394:	4b2c      	ldr	r3, [pc, #176]	@ (800b448 <SendTxData+0x238>)
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39a:	1c59      	adds	r1, r3, #1
 800b39c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b39e:	4413      	add	r3, r2
 800b3a0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800b3a2:	b2d2      	uxtb	r2, r2
 800b3a4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800b3a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b3a8:	0a1b      	lsrs	r3, r3, #8
 800b3aa:	b298      	uxth	r0, r3
 800b3ac:	4b26      	ldr	r3, [pc, #152]	@ (800b448 <SendTxData+0x238>)
 800b3ae:	685a      	ldr	r2, [r3, #4]
 800b3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b2:	1c59      	adds	r1, r3, #1
 800b3b4:	6339      	str	r1, [r7, #48]	@ 0x30
 800b3b6:	4413      	add	r3, r2
 800b3b8:	b2c2      	uxtb	r2, r0
 800b3ba:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800b3bc:	4b22      	ldr	r3, [pc, #136]	@ (800b448 <SendTxData+0x238>)
 800b3be:	685a      	ldr	r2, [r3, #4]
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c2:	1c59      	adds	r1, r3, #1
 800b3c4:	6339      	str	r1, [r7, #48]	@ 0x30
 800b3c6:	4413      	add	r3, r2
 800b3c8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b3ca:	b2d2      	uxtb	r2, r2
 800b3cc:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800b3ce:	4b22      	ldr	r3, [pc, #136]	@ (800b458 <SendTxData+0x248>)
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	2b08      	cmp	r3, #8
 800b3d4:	d007      	beq.n	800b3e6 <SendTxData+0x1d6>
 800b3d6:	4b20      	ldr	r3, [pc, #128]	@ (800b458 <SendTxData+0x248>)
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d003      	beq.n	800b3e6 <SendTxData+0x1d6>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800b3de:	4b1e      	ldr	r3, [pc, #120]	@ (800b458 <SendTxData+0x248>)
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d13a      	bne.n	800b45c <SendTxData+0x24c>
  {
    AppData.Buffer[i++] = 0;
 800b3e6:	4b18      	ldr	r3, [pc, #96]	@ (800b448 <SendTxData+0x238>)
 800b3e8:	685a      	ldr	r2, [r3, #4]
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ec:	1c59      	adds	r1, r3, #1
 800b3ee:	6339      	str	r1, [r7, #48]	@ 0x30
 800b3f0:	4413      	add	r3, r2
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b3f6:	4b14      	ldr	r3, [pc, #80]	@ (800b448 <SendTxData+0x238>)
 800b3f8:	685a      	ldr	r2, [r3, #4]
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fc:	1c59      	adds	r1, r3, #1
 800b3fe:	6339      	str	r1, [r7, #48]	@ 0x30
 800b400:	4413      	add	r3, r2
 800b402:	2200      	movs	r2, #0
 800b404:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b406:	4b10      	ldr	r3, [pc, #64]	@ (800b448 <SendTxData+0x238>)
 800b408:	685a      	ldr	r2, [r3, #4]
 800b40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40c:	1c59      	adds	r1, r3, #1
 800b40e:	6339      	str	r1, [r7, #48]	@ 0x30
 800b410:	4413      	add	r3, r2
 800b412:	2200      	movs	r2, #0
 800b414:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b416:	4b0c      	ldr	r3, [pc, #48]	@ (800b448 <SendTxData+0x238>)
 800b418:	685a      	ldr	r2, [r3, #4]
 800b41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41c:	1c59      	adds	r1, r3, #1
 800b41e:	6339      	str	r1, [r7, #48]	@ 0x30
 800b420:	4413      	add	r3, r2
 800b422:	2200      	movs	r2, #0
 800b424:	701a      	strb	r2, [r3, #0]
 800b426:	e075      	b.n	800b514 <SendTxData+0x304>
 800b428:	0801d394 	.word	0x0801d394
 800b42c:	0801d3a0 	.word	0x0801d3a0
 800b430:	0801d3ac 	.word	0x0801d3ac
 800b434:	0801d3c0 	.word	0x0801d3c0
 800b438:	0801d3d4 	.word	0x0801d3d4
 800b43c:	0801d3e8 	.word	0x0801d3e8
 800b440:	0801d3fc 	.word	0x0801d3fc
 800b444:	0801d414 	.word	0x0801d414
 800b448:	2000008c 	.word	0x2000008c
 800b44c:	41200000 	.word	0x41200000
 800b450:	42c80000 	.word	0x42c80000
 800b454:	2000065e 	.word	0x2000065e
 800b458:	20000070 	.word	0x20000070
  }
  else
  {
    latitude = sensor_data.latitude;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	627b      	str	r3, [r7, #36]	@ 0x24
    longitude = sensor_data.longitude;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800b464:	4b55      	ldr	r3, [pc, #340]	@ (800b5bc <SendTxData+0x3ac>)
 800b466:	685a      	ldr	r2, [r3, #4]
 800b468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46a:	1c59      	adds	r1, r3, #1
 800b46c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b46e:	18d4      	adds	r4, r2, r3
 800b470:	f7f6 ff0e 	bl	8002290 <GetBatteryLevel>
 800b474:	4603      	mov	r3, r0
 800b476:	7023      	strb	r3, [r4, #0]
    //AppData.Buffer[i++] = sht40();        /* 1 (very low) to 254 (fully charged) */
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800b478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47a:	1418      	asrs	r0, r3, #16
 800b47c:	4b4f      	ldr	r3, [pc, #316]	@ (800b5bc <SendTxData+0x3ac>)
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b482:	1c59      	adds	r1, r3, #1
 800b484:	6339      	str	r1, [r7, #48]	@ 0x30
 800b486:	4413      	add	r3, r2
 800b488:	b2c2      	uxtb	r2, r0
 800b48a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800b48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48e:	1218      	asrs	r0, r3, #8
 800b490:	4b4a      	ldr	r3, [pc, #296]	@ (800b5bc <SendTxData+0x3ac>)
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b496:	1c59      	adds	r1, r3, #1
 800b498:	6339      	str	r1, [r7, #48]	@ 0x30
 800b49a:	4413      	add	r3, r2
 800b49c:	b2c2      	uxtb	r2, r0
 800b49e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800b4a0:	4b46      	ldr	r3, [pc, #280]	@ (800b5bc <SendTxData+0x3ac>)
 800b4a2:	685a      	ldr	r2, [r3, #4]
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a6:	1c59      	adds	r1, r3, #1
 800b4a8:	6339      	str	r1, [r7, #48]	@ 0x30
 800b4aa:	4413      	add	r3, r2
 800b4ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4ae:	b2d2      	uxtb	r2, r2
 800b4b0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	1418      	asrs	r0, r3, #16
 800b4b6:	4b41      	ldr	r3, [pc, #260]	@ (800b5bc <SendTxData+0x3ac>)
 800b4b8:	685a      	ldr	r2, [r3, #4]
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4bc:	1c59      	adds	r1, r3, #1
 800b4be:	6339      	str	r1, [r7, #48]	@ 0x30
 800b4c0:	4413      	add	r3, r2
 800b4c2:	b2c2      	uxtb	r2, r0
 800b4c4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	1218      	asrs	r0, r3, #8
 800b4ca:	4b3c      	ldr	r3, [pc, #240]	@ (800b5bc <SendTxData+0x3ac>)
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d0:	1c59      	adds	r1, r3, #1
 800b4d2:	6339      	str	r1, [r7, #48]	@ 0x30
 800b4d4:	4413      	add	r3, r2
 800b4d6:	b2c2      	uxtb	r2, r0
 800b4d8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800b4da:	4b38      	ldr	r3, [pc, #224]	@ (800b5bc <SendTxData+0x3ac>)
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e0:	1c59      	adds	r1, r3, #1
 800b4e2:	6339      	str	r1, [r7, #48]	@ 0x30
 800b4e4:	4413      	add	r3, r2
 800b4e6:	6a3a      	ldr	r2, [r7, #32]
 800b4e8:	b2d2      	uxtb	r2, r2
 800b4ea:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800b4ec:	8bfb      	ldrh	r3, [r7, #30]
 800b4ee:	0a1b      	lsrs	r3, r3, #8
 800b4f0:	b298      	uxth	r0, r3
 800b4f2:	4b32      	ldr	r3, [pc, #200]	@ (800b5bc <SendTxData+0x3ac>)
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f8:	1c59      	adds	r1, r3, #1
 800b4fa:	6339      	str	r1, [r7, #48]	@ 0x30
 800b4fc:	4413      	add	r3, r2
 800b4fe:	b2c2      	uxtb	r2, r0
 800b500:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800b502:	4b2e      	ldr	r3, [pc, #184]	@ (800b5bc <SendTxData+0x3ac>)
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	1c59      	adds	r1, r3, #1
 800b50a:	6339      	str	r1, [r7, #48]	@ 0x30
 800b50c:	4413      	add	r3, r2
 800b50e:	8bfa      	ldrh	r2, [r7, #30]
 800b510:	b2d2      	uxtb	r2, r2
 800b512:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800b514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b516:	b2da      	uxtb	r2, r3
 800b518:	4b28      	ldr	r3, [pc, #160]	@ (800b5bc <SendTxData+0x3ac>)
 800b51a:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b51c:	4b28      	ldr	r3, [pc, #160]	@ (800b5c0 <SendTxData+0x3b0>)
 800b51e:	7a5b      	ldrb	r3, [r3, #9]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d007      	beq.n	800b534 <SendTxData+0x324>
 800b524:	f002 fa68 	bl	800d9f8 <LmHandlerJoinStatus>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d102      	bne.n	800b534 <SendTxData+0x324>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800b52e:	4824      	ldr	r0, [pc, #144]	@ (800b5c0 <SendTxData+0x3b0>)
 800b530:	f011 f948 	bl	801c7c4 <UTIL_TIMER_Stop>
#if defined(DBG)   // XXX:
    //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800b534:	4b23      	ldr	r3, [pc, #140]	@ (800b5c4 <SendTxData+0x3b4>)
 800b536:	78db      	ldrb	r3, [r3, #3]
 800b538:	2200      	movs	r2, #0
 800b53a:	4619      	mov	r1, r3
 800b53c:	481f      	ldr	r0, [pc, #124]	@ (800b5bc <SendTxData+0x3ac>)
 800b53e:	f002 fa77 	bl	800da30 <LmHandlerSend>
 800b542:	4603      	mov	r3, r0
 800b544:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800b548:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d106      	bne.n	800b55e <SendTxData+0x34e>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800b550:	4b1d      	ldr	r3, [pc, #116]	@ (800b5c8 <SendTxData+0x3b8>)
 800b552:	2201      	movs	r2, #1
 800b554:	2100      	movs	r1, #0
 800b556:	2001      	movs	r0, #1
 800b558:	f011 fb3e 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
 800b55c:	e016      	b.n	800b58c <SendTxData+0x37c>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800b55e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b562:	f113 0f06 	cmn.w	r3, #6
 800b566:	d111      	bne.n	800b58c <SendTxData+0x37c>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800b568:	f002 f99a 	bl	800d8a0 <LmHandlerGetDutyCycleWaitTime>
 800b56c:	6378      	str	r0, [r7, #52]	@ 0x34
    if (nextTxIn > 0)
 800b56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00b      	beq.n	800b58c <SendTxData+0x37c>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800b574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b576:	4a15      	ldr	r2, [pc, #84]	@ (800b5cc <SendTxData+0x3bc>)
 800b578:	fba2 2303 	umull	r2, r3, r2, r3
 800b57c:	099b      	lsrs	r3, r3, #6
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	4b13      	ldr	r3, [pc, #76]	@ (800b5d0 <SendTxData+0x3c0>)
 800b582:	2201      	movs	r2, #1
 800b584:	2100      	movs	r1, #0
 800b586:	2001      	movs	r0, #1
 800b588:	f011 fb26 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800b58c:	4b11      	ldr	r3, [pc, #68]	@ (800b5d4 <SendTxData+0x3c4>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10f      	bne.n	800b5b4 <SendTxData+0x3a4>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800b594:	4810      	ldr	r0, [pc, #64]	@ (800b5d8 <SendTxData+0x3c8>)
 800b596:	f011 f915 	bl	801c7c4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800b59a:	4b10      	ldr	r3, [pc, #64]	@ (800b5dc <SendTxData+0x3cc>)
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	bf38      	it	cc
 800b5a4:	4613      	movcc	r3, r2
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	480b      	ldr	r0, [pc, #44]	@ (800b5d8 <SendTxData+0x3c8>)
 800b5aa:	f011 f97b 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800b5ae:	480a      	ldr	r0, [pc, #40]	@ (800b5d8 <SendTxData+0x3c8>)
 800b5b0:	f011 f89a 	bl	801c6e8 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800b5b4:	bf00      	nop
 800b5b6:	373c      	adds	r7, #60	@ 0x3c
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd90      	pop	{r4, r7, pc}
 800b5bc:	2000008c 	.word	0x2000008c
 800b5c0:	20000690 	.word	0x20000690
 800b5c4:	20000070 	.word	0x20000070
 800b5c8:	0801d42c 	.word	0x0801d42c
 800b5cc:	10624dd3 	.word	0x10624dd3
 800b5d0:	0801d43c 	.word	0x0801d43c
 800b5d4:	20000538 	.word	0x20000538
 800b5d8:	2000053c 	.word	0x2000053c
 800b5dc:	20000088 	.word	0x20000088

0800b5e0 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	2004      	movs	r0, #4
 800b5ec:	f010 ffc6 	bl	801c57c <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800b5f0:	4803      	ldr	r0, [pc, #12]	@ (800b600 <OnTxTimerEvent+0x20>)
 800b5f2:	f011 f879 	bl	801c6e8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800b5f6:	bf00      	nop
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	2000053c 	.word	0x2000053c

0800b604 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
#if defined(DBG)	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800b60c:	bf00      	nop
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	bc80      	pop	{r7}
 800b614:	4770      	bx	lr

0800b616 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800b616:	b480      	push	{r7}
 800b618:	b083      	sub	sp, #12
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
#if defined(DBG)   // XXX: No LED available
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800b61e:	bf00      	nop
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	bc80      	pop	{r7}
 800b626:	4770      	bx	lr

0800b628 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
#if defined(DBG)   // XXX: No LED available
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); /* LED_RED */
#endif
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	bc80      	pop	{r7}
 800b638:	4770      	bx	lr
	...

0800b63c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af04      	add	r7, sp, #16
 800b642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d041      	beq.n	800b6ce <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d03d      	beq.n	800b6ce <OnTxData+0x92>
    {
#if defined(DBG)	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800b652:	4821      	ldr	r0, [pc, #132]	@ (800b6d8 <OnTxData+0x9c>)
 800b654:	f011 f848 	bl	801c6e8 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800b658:	4b20      	ldr	r3, [pc, #128]	@ (800b6dc <OnTxData+0xa0>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	2100      	movs	r1, #0
 800b65e:	2002      	movs	r0, #2
 800b660:	f011 faba 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	7c12      	ldrb	r2, [r2, #16]
 800b66c:	4611      	mov	r1, r2
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800b674:	4610      	mov	r0, r2
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800b67c:	9203      	str	r2, [sp, #12]
 800b67e:	9002      	str	r0, [sp, #8]
 800b680:	9101      	str	r1, [sp, #4]
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	4b16      	ldr	r3, [pc, #88]	@ (800b6e0 <OnTxData+0xa4>)
 800b686:	2200      	movs	r2, #0
 800b688:	2100      	movs	r1, #0
 800b68a:	2003      	movs	r0, #3
 800b68c:	f011 faa4 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800b690:	4b14      	ldr	r3, [pc, #80]	@ (800b6e4 <OnTxData+0xa8>)
 800b692:	2200      	movs	r2, #0
 800b694:	2100      	movs	r1, #0
 800b696:	2003      	movs	r0, #3
 800b698:	f011 fa9e 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	7a1b      	ldrb	r3, [r3, #8]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d10e      	bne.n	800b6c2 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	7a5b      	ldrb	r3, [r3, #9]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d001      	beq.n	800b6b0 <OnTxData+0x74>
 800b6ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b6e8 <OnTxData+0xac>)
 800b6ae:	e000      	b.n	800b6b2 <OnTxData+0x76>
 800b6b0:	4b0e      	ldr	r3, [pc, #56]	@ (800b6ec <OnTxData+0xb0>)
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	4b0e      	ldr	r3, [pc, #56]	@ (800b6f0 <OnTxData+0xb4>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	2003      	movs	r0, #3
 800b6bc:	f011 fa8c 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800b6c0:	e005      	b.n	800b6ce <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800b6c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f4 <OnTxData+0xb8>)
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	2100      	movs	r1, #0
 800b6c8:	2003      	movs	r0, #3
 800b6ca:	f011 fa85 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
}
 800b6ce:	bf00      	nop
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20000660 	.word	0x20000660
 800b6dc:	0801d45c 	.word	0x0801d45c
 800b6e0:	0801d490 	.word	0x0801d490
 800b6e4:	0801d4c4 	.word	0x0801d4c4
 800b6e8:	0801d4d4 	.word	0x0801d4d4
 800b6ec:	0801d4d8 	.word	0x0801d4d8
 800b6f0:	0801d4e0 	.word	0x0801d4e0
 800b6f4:	0801d4f4 	.word	0x0801d4f4

0800b6f8 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d039      	beq.n	800b77a <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d11e      	bne.n	800b74e <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800b710:	2100      	movs	r1, #0
 800b712:	2008      	movs	r0, #8
 800b714:	f010 ff32 	bl	801c57c <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800b718:	481a      	ldr	r0, [pc, #104]	@ (800b784 <OnJoinRequest+0x8c>)
 800b71a:	f011 f853 	bl	801c7c4 <UTIL_TIMER_Stop>
#if defined(DBG)   // XXX:
      //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800b71e:	4b1a      	ldr	r3, [pc, #104]	@ (800b788 <OnJoinRequest+0x90>)
 800b720:	2200      	movs	r2, #0
 800b722:	2100      	movs	r1, #0
 800b724:	2002      	movs	r0, #2
 800b726:	f011 fa57 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	79db      	ldrb	r3, [r3, #7]
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d106      	bne.n	800b740 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800b732:	4b16      	ldr	r3, [pc, #88]	@ (800b78c <OnJoinRequest+0x94>)
 800b734:	2200      	movs	r2, #0
 800b736:	2100      	movs	r1, #0
 800b738:	2002      	movs	r0, #2
 800b73a:	f011 fa4d 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800b73e:	e01c      	b.n	800b77a <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800b740:	4b13      	ldr	r3, [pc, #76]	@ (800b790 <OnJoinRequest+0x98>)
 800b742:	2200      	movs	r2, #0
 800b744:	2100      	movs	r1, #0
 800b746:	2002      	movs	r0, #2
 800b748:	f011 fa46 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
}
 800b74c:	e015      	b.n	800b77a <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800b74e:	4b11      	ldr	r3, [pc, #68]	@ (800b794 <OnJoinRequest+0x9c>)
 800b750:	2200      	movs	r2, #0
 800b752:	2100      	movs	r1, #0
 800b754:	2002      	movs	r0, #2
 800b756:	f011 fa3f 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	79db      	ldrb	r3, [r3, #7]
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d10b      	bne.n	800b77a <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800b762:	4b0d      	ldr	r3, [pc, #52]	@ (800b798 <OnJoinRequest+0xa0>)
 800b764:	2200      	movs	r2, #0
 800b766:	2100      	movs	r1, #0
 800b768:	2002      	movs	r0, #2
 800b76a:	f011 fa35 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800b76e:	4b0b      	ldr	r3, [pc, #44]	@ (800b79c <OnJoinRequest+0xa4>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	2101      	movs	r1, #1
 800b774:	4618      	mov	r0, r3
 800b776:	f002 f89d 	bl	800d8b4 <LmHandlerJoin>
}
 800b77a:	bf00      	nop
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20000690 	.word	0x20000690
 800b788:	0801d504 	.word	0x0801d504
 800b78c:	0801d51c 	.word	0x0801d51c
 800b790:	0801d53c 	.word	0x0801d53c
 800b794:	0801d55c 	.word	0x0801d55c
 800b798:	0801d578 	.word	0x0801d578
 800b79c:	20000020 	.word	0x20000020

0800b7a0 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800b7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7a2:	b093      	sub	sp, #76	@ 0x4c
 800b7a4:	af0c      	add	r7, sp, #48	@ 0x30
 800b7a6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d056      	beq.n	800b85c <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	785b      	ldrb	r3, [r3, #1]
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	d008      	beq.n	800b7c8 <OnBeaconStatusChange+0x28>
 800b7b6:	2b03      	cmp	r3, #3
 800b7b8:	d049      	beq.n	800b84e <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800b7ba:	4b2a      	ldr	r3, [pc, #168]	@ (800b864 <OnBeaconStatusChange+0xc4>)
 800b7bc:	2200      	movs	r2, #0
 800b7be:	2100      	movs	r1, #0
 800b7c0:	2002      	movs	r0, #2
 800b7c2:	f011 fa09 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800b7c6:	e049      	b.n	800b85c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	7c1b      	ldrb	r3, [r3, #16]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b7d4:	461c      	mov	r4, r3
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800b7dc:	461d      	mov	r5, r3
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	697a      	ldr	r2, [r7, #20]
 800b7e4:	6852      	ldr	r2, [r2, #4]
 800b7e6:	6979      	ldr	r1, [r7, #20]
 800b7e8:	7d89      	ldrb	r1, [r1, #22]
 800b7ea:	460e      	mov	r6, r1
 800b7ec:	6979      	ldr	r1, [r7, #20]
 800b7ee:	7dc9      	ldrb	r1, [r1, #23]
 800b7f0:	6139      	str	r1, [r7, #16]
 800b7f2:	6979      	ldr	r1, [r7, #20]
 800b7f4:	7e09      	ldrb	r1, [r1, #24]
 800b7f6:	60f9      	str	r1, [r7, #12]
 800b7f8:	6979      	ldr	r1, [r7, #20]
 800b7fa:	7e49      	ldrb	r1, [r1, #25]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	6979      	ldr	r1, [r7, #20]
 800b800:	7e89      	ldrb	r1, [r1, #26]
 800b802:	6079      	str	r1, [r7, #4]
 800b804:	6979      	ldr	r1, [r7, #20]
 800b806:	7ec9      	ldrb	r1, [r1, #27]
 800b808:	6039      	str	r1, [r7, #0]
 800b80a:	6979      	ldr	r1, [r7, #20]
 800b80c:	7f09      	ldrb	r1, [r1, #28]
 800b80e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b810:	f8d7 c000 	ldr.w	ip, [r7]
 800b814:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800b818:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b81c:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800b820:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800b824:	f8cd c020 	str.w	ip, [sp, #32]
 800b828:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800b82c:	f8cd c01c 	str.w	ip, [sp, #28]
 800b830:	6939      	ldr	r1, [r7, #16]
 800b832:	9106      	str	r1, [sp, #24]
 800b834:	9605      	str	r6, [sp, #20]
 800b836:	9204      	str	r2, [sp, #16]
 800b838:	9303      	str	r3, [sp, #12]
 800b83a:	9502      	str	r5, [sp, #8]
 800b83c:	9401      	str	r4, [sp, #4]
 800b83e:	9000      	str	r0, [sp, #0]
 800b840:	4b09      	ldr	r3, [pc, #36]	@ (800b868 <OnBeaconStatusChange+0xc8>)
 800b842:	2200      	movs	r2, #0
 800b844:	2100      	movs	r1, #0
 800b846:	2002      	movs	r0, #2
 800b848:	f011 f9c6 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800b84c:	e006      	b.n	800b85c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800b84e:	4b07      	ldr	r3, [pc, #28]	@ (800b86c <OnBeaconStatusChange+0xcc>)
 800b850:	2200      	movs	r2, #0
 800b852:	2100      	movs	r1, #0
 800b854:	2002      	movs	r0, #2
 800b856:	f011 f9bf 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800b85a:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800b85c:	bf00      	nop
 800b85e:	371c      	adds	r7, #28
 800b860:	46bd      	mov	sp, r7
 800b862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b864:	0801d59c 	.word	0x0801d59c
 800b868:	0801d5b4 	.word	0x0801d5b4
 800b86c:	0801d628 	.word	0x0801d628

0800b870 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800b870:	b480      	push	{r7}
 800b872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800b874:	bf00      	nop
 800b876:	46bd      	mov	sp, r7
 800b878:	bc80      	pop	{r7}
 800b87a:	4770      	bx	lr

0800b87c <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af02      	add	r7, sp, #8
 800b882:	4603      	mov	r3, r0
 800b884:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800b886:	79fb      	ldrb	r3, [r7, #7]
 800b888:	4a06      	ldr	r2, [pc, #24]	@ (800b8a4 <OnClassChange+0x28>)
 800b88a:	5cd3      	ldrb	r3, [r2, r3]
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	4b06      	ldr	r3, [pc, #24]	@ (800b8a8 <OnClassChange+0x2c>)
 800b890:	2200      	movs	r2, #0
 800b892:	2100      	movs	r1, #0
 800b894:	2002      	movs	r0, #2
 800b896:	f011 f99f 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800b89a:	bf00      	nop
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	0801d664 	.word	0x0801d664
 800b8a8:	0801d648 	.word	0x0801d648

0800b8ac <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	2001      	movs	r0, #1
 800b8b4:	f010 fe62 	bl	801c57c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800b8b8:	bf00      	nop
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800b8c4:	4a0d      	ldr	r2, [pc, #52]	@ (800b8fc <OnTxPeriodicityChanged+0x40>)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800b8ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b8fc <OnTxPeriodicityChanged+0x40>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d103      	bne.n	800b8da <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800b8d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8fc <OnTxPeriodicityChanged+0x40>)
 800b8d4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800b8d8:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800b8da:	4809      	ldr	r0, [pc, #36]	@ (800b900 <OnTxPeriodicityChanged+0x44>)
 800b8dc:	f010 ff72 	bl	801c7c4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800b8e0:	4b06      	ldr	r3, [pc, #24]	@ (800b8fc <OnTxPeriodicityChanged+0x40>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	4806      	ldr	r0, [pc, #24]	@ (800b900 <OnTxPeriodicityChanged+0x44>)
 800b8e8:	f010 ffdc 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800b8ec:	4804      	ldr	r0, [pc, #16]	@ (800b900 <OnTxPeriodicityChanged+0x44>)
 800b8ee:	f010 fefb 	bl	801c6e8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	20000088 	.word	0x20000088
 800b900:	2000053c 	.word	0x2000053c

0800b904 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4603      	mov	r3, r0
 800b90c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800b90e:	4a04      	ldr	r2, [pc, #16]	@ (800b920 <OnTxFrameCtrlChanged+0x1c>)
 800b910:	79fb      	ldrb	r3, [r7, #7]
 800b912:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800b914:	bf00      	nop
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	bc80      	pop	{r7}
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	20000070 	.word	0x20000070

0800b924 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	4603      	mov	r3, r0
 800b92c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800b92e:	4a04      	ldr	r2, [pc, #16]	@ (800b940 <OnPingSlotPeriodicityChanged+0x1c>)
 800b930:	79fb      	ldrb	r3, [r7, #7]
 800b932:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800b934:	bf00      	nop
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	bc80      	pop	{r7}
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	20000070 	.word	0x20000070

0800b944 <OnSystemReset>:

static void OnSystemReset(void)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b948:	f002 fdad 	bl	800e4a6 <LmHandlerHalt>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <OnSystemReset+0x1c>
 800b952:	f002 f851 	bl	800d9f8 <LmHandlerJoinStatus>
 800b956:	4603      	mov	r3, r0
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d101      	bne.n	800b960 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800b95c:	f7ff faba 	bl	800aed4 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800b960:	bf00      	nop
 800b962:	bd80      	pop	{r7, pc}

0800b964 <StopJoin>:

static void StopJoin(void)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800b968:	4817      	ldr	r0, [pc, #92]	@ (800b9c8 <StopJoin+0x64>)
 800b96a:	f010 ff2b 	bl	801c7c4 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800b96e:	f002 fd8d 	bl	800e48c <LmHandlerStop>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d006      	beq.n	800b986 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800b978:	4b14      	ldr	r3, [pc, #80]	@ (800b9cc <StopJoin+0x68>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	2100      	movs	r1, #0
 800b97e:	2002      	movs	r0, #2
 800b980:	f011 f92a 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
 800b984:	e01a      	b.n	800b9bc <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800b986:	4b12      	ldr	r3, [pc, #72]	@ (800b9d0 <StopJoin+0x6c>)
 800b988:	2200      	movs	r2, #0
 800b98a:	2100      	movs	r1, #0
 800b98c:	2002      	movs	r0, #2
 800b98e:	f011 f923 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800b992:	4b10      	ldr	r3, [pc, #64]	@ (800b9d4 <StopJoin+0x70>)
 800b994:	2201      	movs	r2, #1
 800b996:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800b998:	4b0f      	ldr	r3, [pc, #60]	@ (800b9d8 <StopJoin+0x74>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	2100      	movs	r1, #0
 800b99e:	2002      	movs	r0, #2
 800b9a0:	f011 f91a 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800b9a4:	480d      	ldr	r0, [pc, #52]	@ (800b9dc <StopJoin+0x78>)
 800b9a6:	f001 fe21 	bl	800d5ec <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800b9aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d4 <StopJoin+0x70>)
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	2101      	movs	r1, #1
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f001 ff7f 	bl	800d8b4 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800b9b6:	4804      	ldr	r0, [pc, #16]	@ (800b9c8 <StopJoin+0x64>)
 800b9b8:	f010 fe96 	bl	801c6e8 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800b9bc:	4808      	ldr	r0, [pc, #32]	@ (800b9e0 <StopJoin+0x7c>)
 800b9be:	f010 fe93 	bl	801c6e8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800b9c2:	bf00      	nop
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	2000053c 	.word	0x2000053c
 800b9cc:	0801d668 	.word	0x0801d668
 800b9d0:	0801d688 	.word	0x0801d688
 800b9d4:	20000020 	.word	0x20000020
 800b9d8:	0801d69c 	.word	0x0801d69c
 800b9dc:	20000070 	.word	0x20000070
 800b9e0:	20000554 	.word	0x20000554

0800b9e4 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800b9ec:	4b05      	ldr	r3, [pc, #20]	@ (800ba04 <OnStopJoinTimerEvent+0x20>)
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d103      	bne.n	800b9fc <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	2010      	movs	r0, #16
 800b9f8:	f010 fdc0 	bl	801c57c <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800b9fc:	bf00      	nop
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	20000020 	.word	0x20000020

0800ba08 <StoreContext>:

static void StoreContext(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ba0e:	23ff      	movs	r3, #255	@ 0xff
 800ba10:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800ba12:	f002 fd7d 	bl	800e510 <LmHandlerNvmDataStore>
 800ba16:	4603      	mov	r3, r0
 800ba18:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800ba1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba1e:	f113 0f08 	cmn.w	r3, #8
 800ba22:	d106      	bne.n	800ba32 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800ba24:	4b0a      	ldr	r3, [pc, #40]	@ (800ba50 <StoreContext+0x48>)
 800ba26:	2200      	movs	r2, #0
 800ba28:	2100      	movs	r1, #0
 800ba2a:	2002      	movs	r0, #2
 800ba2c:	f011 f8d4 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800ba30:	e00a      	b.n	800ba48 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800ba32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba3a:	d105      	bne.n	800ba48 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800ba3c:	4b05      	ldr	r3, [pc, #20]	@ (800ba54 <StoreContext+0x4c>)
 800ba3e:	2200      	movs	r2, #0
 800ba40:	2100      	movs	r1, #0
 800ba42:	2002      	movs	r0, #2
 800ba44:	f011 f8c8 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
}
 800ba48:	bf00      	nop
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	0801d6bc 	.word	0x0801d6bc
 800ba54:	0801d6d4 	.word	0x0801d6d4

0800ba58 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800ba62:	79fb      	ldrb	r3, [r7, #7]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d106      	bne.n	800ba76 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800ba68:	4b08      	ldr	r3, [pc, #32]	@ (800ba8c <OnNvmDataChange+0x34>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	2002      	movs	r0, #2
 800ba70:	f011 f8b2 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800ba74:	e005      	b.n	800ba82 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800ba76:	4b06      	ldr	r3, [pc, #24]	@ (800ba90 <OnNvmDataChange+0x38>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	2002      	movs	r0, #2
 800ba7e:	f011 f8ab 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
}
 800ba82:	bf00      	nop
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	0801d6ec 	.word	0x0801d6ec
 800ba90:	0801d700 	.word	0x0801d700

0800ba94 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800ba9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800baa2:	4807      	ldr	r0, [pc, #28]	@ (800bac0 <OnStoreContextRequest+0x2c>)
 800baa4:	f7f5 fd08 	bl	80014b8 <FLASH_IF_Erase>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d104      	bne.n	800bab8 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	6879      	ldr	r1, [r7, #4]
 800bab2:	4803      	ldr	r0, [pc, #12]	@ (800bac0 <OnStoreContextRequest+0x2c>)
 800bab4:	f7f5 fcb0 	bl	8001418 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800bab8:	bf00      	nop
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	0803f000 	.word	0x0803f000

0800bac4 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	4903      	ldr	r1, [pc, #12]	@ (800bae0 <OnRestoreContextRequest+0x1c>)
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7f5 fcc8 	bl	8001468 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800bad8:	bf00      	nop
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	0803f000 	.word	0x0803f000

0800bae4 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800bae8:	4b15      	ldr	r3, [pc, #84]	@ (800bb40 <LoraInfo_Init+0x5c>)
 800baea:	2200      	movs	r2, #0
 800baec:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800baee:	4b14      	ldr	r3, [pc, #80]	@ (800bb40 <LoraInfo_Init+0x5c>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800baf4:	4b12      	ldr	r3, [pc, #72]	@ (800bb40 <LoraInfo_Init+0x5c>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800bafa:	4b11      	ldr	r3, [pc, #68]	@ (800bb40 <LoraInfo_Init+0x5c>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800bb00:	4b0f      	ldr	r3, [pc, #60]	@ (800bb40 <LoraInfo_Init+0x5c>)
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	f043 0320 	orr.w	r3, r3, #32
 800bb08:	4a0d      	ldr	r2, [pc, #52]	@ (800bb40 <LoraInfo_Init+0x5c>)
 800bb0a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800bb0c:	4b0c      	ldr	r3, [pc, #48]	@ (800bb40 <LoraInfo_Init+0x5c>)
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10d      	bne.n	800bb30 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800bb14:	4b0b      	ldr	r3, [pc, #44]	@ (800bb44 <LoraInfo_Init+0x60>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	2100      	movs	r1, #0
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	f011 f85c 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800bb20:	bf00      	nop
 800bb22:	f011 f847 	bl	801cbb4 <UTIL_ADV_TRACE_IsBufferEmpty>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d1fa      	bne.n	800bb22 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800bb2c:	bf00      	nop
 800bb2e:	e7fd      	b.n	800bb2c <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800bb30:	4b03      	ldr	r3, [pc, #12]	@ (800bb40 <LoraInfo_Init+0x5c>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800bb36:	4b02      	ldr	r3, [pc, #8]	@ (800bb40 <LoraInfo_Init+0x5c>)
 800bb38:	2201      	movs	r2, #1
 800bb3a:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800bb3c:	bf00      	nop
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	200006a8 	.word	0x200006a8
 800bb44:	0801d714 	.word	0x0801d714

0800bb48 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800bb4c:	4b02      	ldr	r3, [pc, #8]	@ (800bb58 <LoraInfo_GetPtr+0x10>)
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bc80      	pop	{r7}
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	200006a8 	.word	0x200006a8

0800bb5c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800bb60:	f7f7 faa9 	bl	80030b6 <BSP_RADIO_Init>
 800bb64:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b082      	sub	sp, #8
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	4603      	mov	r3, r0
 800bb72:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800bb74:	79fb      	ldrb	r3, [r7, #7]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7f7 face 	bl	8003118 <BSP_RADIO_ConfigRFSwitch>
 800bb7c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800bb8a:	f7f7 fb13 	bl	80031b4 <BSP_RADIO_GetTxConfig>
 800bb8e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800bb98:	f7f7 fb13 	bl	80031c2 <BSP_RADIO_IsTCXO>
 800bb9c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800bba6:	f7f7 fb13 	bl	80031d0 <BSP_RADIO_IsDCDC>
 800bbaa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800bbba:	79fb      	ldrb	r3, [r7, #7]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7f7 fb0e 	bl	80031de <BSP_RADIO_GetRFOMaxPowerConfig>
 800bbc2:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	33f1      	adds	r3, #241	@ 0xf1
 800bbd8:	2210      	movs	r2, #16
 800bbda:	2100      	movs	r1, #0
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f00c fcd9 	bl	8018594 <memset1>
    ctx->M_n = 0;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	22f0      	movs	r2, #240	@ 0xf0
 800bbee:	2100      	movs	r1, #0
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f00c fccf 	bl	8018594 <memset1>
}
 800bbf6:	bf00      	nop
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b082      	sub	sp, #8
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	2110      	movs	r1, #16
 800bc0e:	6838      	ldr	r0, [r7, #0]
 800bc10:	f000 fe60 	bl	800c8d4 <lorawan_aes_set_key>
}
 800bc14:	bf00      	nop
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b08c      	sub	sp, #48	@ 0x30
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f000 80a1 	beq.w	800bd76 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bc3a:	f1c3 0310 	rsb	r3, r3, #16
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	4293      	cmp	r3, r2
 800bc42:	bf28      	it	cs
 800bc44:	4613      	movcs	r3, r2
 800bc46:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bc54:	4413      	add	r3, r2
 800bc56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc58:	b292      	uxth	r2, r2
 800bc5a:	68b9      	ldr	r1, [r7, #8]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f00c fc5e 	bl	801851e <memcpy1>
        ctx->M_n += mlen;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800bc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6a:	441a      	add	r2, r3
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bc78:	2b0f      	cmp	r3, #15
 800bc7a:	f240 808d 	bls.w	800bd98 <AES_CMAC_Update+0x17c>
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc82:	429a      	cmp	r2, r3
 800bc84:	f000 8088 	beq.w	800bd98 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800bc88:	2300      	movs	r3, #0
 800bc8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc8c:	e015      	b.n	800bcba <AES_CMAC_Update+0x9e>
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc92:	4413      	add	r3, r2
 800bc94:	33f1      	adds	r3, #241	@ 0xf1
 800bc96:	781a      	ldrb	r2, [r3, #0]
 800bc98:	68f9      	ldr	r1, [r7, #12]
 800bc9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc9c:	440b      	add	r3, r1
 800bc9e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	4053      	eors	r3, r2
 800bca6:	b2d9      	uxtb	r1, r3
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcac:	4413      	add	r3, r2
 800bcae:	33f1      	adds	r3, #241	@ 0xf1
 800bcb0:	460a      	mov	r2, r1
 800bcb2:	701a      	strb	r2, [r3, #0]
 800bcb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bcba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcbc:	2b0f      	cmp	r3, #15
 800bcbe:	dde6      	ble.n	800bc8e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800bcc6:	f107 0314 	add.w	r3, r7, #20
 800bcca:	2210      	movs	r2, #16
 800bccc:	4618      	mov	r0, r3
 800bcce:	f00c fc26 	bl	801851e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	f107 0114 	add.w	r1, r7, #20
 800bcd8:	f107 0314 	add.w	r3, r7, #20
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 fed7 	bl	800ca90 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	33f1      	adds	r3, #241	@ 0xf1
 800bce6:	f107 0114 	add.w	r1, r7, #20
 800bcea:	2210      	movs	r2, #16
 800bcec:	4618      	mov	r0, r3
 800bcee:	f00c fc16 	bl	801851e <memcpy1>

        data += mlen;
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf6:	4413      	add	r3, r2
 800bcf8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800bd02:	e038      	b.n	800bd76 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800bd04:	2300      	movs	r3, #0
 800bd06:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd08:	e013      	b.n	800bd32 <AES_CMAC_Update+0x116>
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd0e:	4413      	add	r3, r2
 800bd10:	33f1      	adds	r3, #241	@ 0xf1
 800bd12:	781a      	ldrb	r2, [r3, #0]
 800bd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd16:	68b9      	ldr	r1, [r7, #8]
 800bd18:	440b      	add	r3, r1
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	4053      	eors	r3, r2
 800bd1e:	b2d9      	uxtb	r1, r3
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd24:	4413      	add	r3, r2
 800bd26:	33f1      	adds	r3, #241	@ 0xf1
 800bd28:	460a      	mov	r2, r1
 800bd2a:	701a      	strb	r2, [r3, #0]
 800bd2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2e:	3301      	adds	r3, #1
 800bd30:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd34:	2b0f      	cmp	r3, #15
 800bd36:	dde8      	ble.n	800bd0a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800bd3e:	f107 0314 	add.w	r3, r7, #20
 800bd42:	2210      	movs	r2, #16
 800bd44:	4618      	mov	r0, r3
 800bd46:	f00c fbea 	bl	801851e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	f107 0114 	add.w	r1, r7, #20
 800bd50:	f107 0314 	add.w	r3, r7, #20
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 fe9b 	bl	800ca90 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	33f1      	adds	r3, #241	@ 0xf1
 800bd5e:	f107 0114 	add.w	r1, r7, #20
 800bd62:	2210      	movs	r2, #16
 800bd64:	4618      	mov	r0, r3
 800bd66:	f00c fbda 	bl	801851e <memcpy1>

        data += 16;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	3310      	adds	r3, #16
 800bd6e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3b10      	subs	r3, #16
 800bd74:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b10      	cmp	r3, #16
 800bd7a:	d8c3      	bhi.n	800bd04 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	b292      	uxth	r2, r2
 800bd86:	68b9      	ldr	r1, [r7, #8]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f00c fbc8 	bl	801851e <memcpy1>
    ctx->M_n = len;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800bd96:	e000      	b.n	800bd9a <AES_CMAC_Update+0x17e>
            return;
 800bd98:	bf00      	nop
}
 800bd9a:	3730      	adds	r7, #48	@ 0x30
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b092      	sub	sp, #72	@ 0x48
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800bdaa:	f107 031c 	add.w	r3, r7, #28
 800bdae:	2210      	movs	r2, #16
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f00c fbee 	bl	8018594 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	f107 011c 	add.w	r1, r7, #28
 800bdbe:	f107 031c 	add.w	r3, r7, #28
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 fe64 	bl	800ca90 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800bdc8:	7f3b      	ldrb	r3, [r7, #28]
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	da31      	bge.n	800be34 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdd4:	e01c      	b.n	800be10 <AES_CMAC_Final+0x70>
 800bdd6:	f107 021c 	add.w	r2, r7, #28
 800bdda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bddc:	4413      	add	r3, r2
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	b25b      	sxtb	r3, r3
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	b25a      	sxtb	r2, r3
 800bde6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bde8:	3301      	adds	r3, #1
 800bdea:	3348      	adds	r3, #72	@ 0x48
 800bdec:	443b      	add	r3, r7
 800bdee:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bdf2:	09db      	lsrs	r3, r3, #7
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	b25b      	sxtb	r3, r3
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	b25b      	sxtb	r3, r3
 800bdfc:	b2d9      	uxtb	r1, r3
 800bdfe:	f107 021c 	add.w	r2, r7, #28
 800be02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be04:	4413      	add	r3, r2
 800be06:	460a      	mov	r2, r1
 800be08:	701a      	strb	r2, [r3, #0]
 800be0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be0c:	3301      	adds	r3, #1
 800be0e:	647b      	str	r3, [r7, #68]	@ 0x44
 800be10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be12:	2b0e      	cmp	r3, #14
 800be14:	dddf      	ble.n	800bdd6 <AES_CMAC_Final+0x36>
 800be16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be1a:	005b      	lsls	r3, r3, #1
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800be22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be26:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800be2a:	43db      	mvns	r3, r3
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be32:	e028      	b.n	800be86 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800be34:	2300      	movs	r3, #0
 800be36:	643b      	str	r3, [r7, #64]	@ 0x40
 800be38:	e01c      	b.n	800be74 <AES_CMAC_Final+0xd4>
 800be3a:	f107 021c 	add.w	r2, r7, #28
 800be3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be40:	4413      	add	r3, r2
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	b25b      	sxtb	r3, r3
 800be46:	005b      	lsls	r3, r3, #1
 800be48:	b25a      	sxtb	r2, r3
 800be4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be4c:	3301      	adds	r3, #1
 800be4e:	3348      	adds	r3, #72	@ 0x48
 800be50:	443b      	add	r3, r7
 800be52:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800be56:	09db      	lsrs	r3, r3, #7
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	b25b      	sxtb	r3, r3
 800be5c:	4313      	orrs	r3, r2
 800be5e:	b25b      	sxtb	r3, r3
 800be60:	b2d9      	uxtb	r1, r3
 800be62:	f107 021c 	add.w	r2, r7, #28
 800be66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be68:	4413      	add	r3, r2
 800be6a:	460a      	mov	r2, r1
 800be6c:	701a      	strb	r2, [r3, #0]
 800be6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be70:	3301      	adds	r3, #1
 800be72:	643b      	str	r3, [r7, #64]	@ 0x40
 800be74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be76:	2b0e      	cmp	r3, #14
 800be78:	dddf      	ble.n	800be3a <AES_CMAC_Final+0x9a>
 800be7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	b2db      	uxtb	r3, r3
 800be82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800be8c:	2b10      	cmp	r3, #16
 800be8e:	d11d      	bne.n	800becc <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800be90:	2300      	movs	r3, #0
 800be92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be94:	e016      	b.n	800bec4 <AES_CMAC_Final+0x124>
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be9a:	4413      	add	r3, r2
 800be9c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	f107 011c 	add.w	r1, r7, #28
 800bea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bea8:	440b      	add	r3, r1
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	4053      	eors	r3, r2
 800beae:	b2d9      	uxtb	r1, r3
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beb4:	4413      	add	r3, r2
 800beb6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800beba:	460a      	mov	r2, r1
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bec0:	3301      	adds	r3, #1
 800bec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bec6:	2b0f      	cmp	r3, #15
 800bec8:	dde5      	ble.n	800be96 <AES_CMAC_Final+0xf6>
 800beca:	e098      	b.n	800bffe <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800becc:	7f3b      	ldrb	r3, [r7, #28]
 800bece:	b25b      	sxtb	r3, r3
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	da31      	bge.n	800bf38 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800bed4:	2300      	movs	r3, #0
 800bed6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bed8:	e01c      	b.n	800bf14 <AES_CMAC_Final+0x174>
 800beda:	f107 021c 	add.w	r2, r7, #28
 800bede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee0:	4413      	add	r3, r2
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	b25b      	sxtb	r3, r3
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	b25a      	sxtb	r2, r3
 800beea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beec:	3301      	adds	r3, #1
 800beee:	3348      	adds	r3, #72	@ 0x48
 800bef0:	443b      	add	r3, r7
 800bef2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bef6:	09db      	lsrs	r3, r3, #7
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	b25b      	sxtb	r3, r3
 800befc:	4313      	orrs	r3, r2
 800befe:	b25b      	sxtb	r3, r3
 800bf00:	b2d9      	uxtb	r1, r3
 800bf02:	f107 021c 	add.w	r2, r7, #28
 800bf06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf08:	4413      	add	r3, r2
 800bf0a:	460a      	mov	r2, r1
 800bf0c:	701a      	strb	r2, [r3, #0]
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf10:	3301      	adds	r3, #1
 800bf12:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf16:	2b0e      	cmp	r3, #14
 800bf18:	dddf      	ble.n	800beda <AES_CMAC_Final+0x13a>
 800bf1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800bf26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf2a:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800bf2e:	43db      	mvns	r3, r3
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf36:	e028      	b.n	800bf8a <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800bf38:	2300      	movs	r3, #0
 800bf3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf3c:	e01c      	b.n	800bf78 <AES_CMAC_Final+0x1d8>
 800bf3e:	f107 021c 	add.w	r2, r7, #28
 800bf42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf44:	4413      	add	r3, r2
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	b25b      	sxtb	r3, r3
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	b25a      	sxtb	r2, r3
 800bf4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf50:	3301      	adds	r3, #1
 800bf52:	3348      	adds	r3, #72	@ 0x48
 800bf54:	443b      	add	r3, r7
 800bf56:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bf5a:	09db      	lsrs	r3, r3, #7
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	b25b      	sxtb	r3, r3
 800bf60:	4313      	orrs	r3, r2
 800bf62:	b25b      	sxtb	r3, r3
 800bf64:	b2d9      	uxtb	r1, r3
 800bf66:	f107 021c 	add.w	r2, r7, #28
 800bf6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf6c:	4413      	add	r3, r2
 800bf6e:	460a      	mov	r2, r1
 800bf70:	701a      	strb	r2, [r3, #0]
 800bf72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf74:	3301      	adds	r3, #1
 800bf76:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf7a:	2b0e      	cmp	r3, #14
 800bf7c:	dddf      	ble.n	800bf3e <AES_CMAC_Final+0x19e>
 800bf7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf82:	005b      	lsls	r3, r3, #1
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	4413      	add	r3, r2
 800bf94:	2280      	movs	r2, #128	@ 0x80
 800bf96:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800bf9a:	e007      	b.n	800bfac <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bfb2:	1c5a      	adds	r2, r3, #1
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bfc0:	2b0f      	cmp	r3, #15
 800bfc2:	d9eb      	bls.n	800bf9c <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfc8:	e016      	b.n	800bff8 <AES_CMAC_Final+0x258>
 800bfca:	683a      	ldr	r2, [r7, #0]
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfce:	4413      	add	r3, r2
 800bfd0:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bfd4:	781a      	ldrb	r2, [r3, #0]
 800bfd6:	f107 011c 	add.w	r1, r7, #28
 800bfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfdc:	440b      	add	r3, r1
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	4053      	eors	r3, r2
 800bfe2:	b2d9      	uxtb	r1, r3
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe8:	4413      	add	r3, r2
 800bfea:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bfee:	460a      	mov	r2, r1
 800bff0:	701a      	strb	r2, [r3, #0]
 800bff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff4:	3301      	adds	r3, #1
 800bff6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffa:	2b0f      	cmp	r3, #15
 800bffc:	dde5      	ble.n	800bfca <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800bffe:	2300      	movs	r3, #0
 800c000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c002:	e015      	b.n	800c030 <AES_CMAC_Final+0x290>
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c008:	4413      	add	r3, r2
 800c00a:	33f1      	adds	r3, #241	@ 0xf1
 800c00c:	781a      	ldrb	r2, [r3, #0]
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c012:	440b      	add	r3, r1
 800c014:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	4053      	eors	r3, r2
 800c01c:	b2d9      	uxtb	r1, r3
 800c01e:	683a      	ldr	r2, [r7, #0]
 800c020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c022:	4413      	add	r3, r2
 800c024:	33f1      	adds	r3, #241	@ 0xf1
 800c026:	460a      	mov	r2, r1
 800c028:	701a      	strb	r2, [r3, #0]
 800c02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c02c:	3301      	adds	r3, #1
 800c02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c032:	2b0f      	cmp	r3, #15
 800c034:	dde6      	ble.n	800c004 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c03c:	f107 030c 	add.w	r3, r7, #12
 800c040:	2210      	movs	r2, #16
 800c042:	4618      	mov	r0, r3
 800c044:	f00c fa6b 	bl	801851e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	f107 030c 	add.w	r3, r7, #12
 800c04e:	6879      	ldr	r1, [r7, #4]
 800c050:	4618      	mov	r0, r3
 800c052:	f000 fd1d 	bl	800ca90 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c056:	f107 031c 	add.w	r3, r7, #28
 800c05a:	2210      	movs	r2, #16
 800c05c:	2100      	movs	r1, #0
 800c05e:	4618      	mov	r0, r3
 800c060:	f00c fa98 	bl	8018594 <memset1>
}
 800c064:	bf00      	nop
 800c066:	3748      	adds	r7, #72	@ 0x48
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	781a      	ldrb	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	3301      	adds	r3, #1
 800c082:	683a      	ldr	r2, [r7, #0]
 800c084:	7852      	ldrb	r2, [r2, #1]
 800c086:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	3302      	adds	r3, #2
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	7892      	ldrb	r2, [r2, #2]
 800c090:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	3303      	adds	r3, #3
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	78d2      	ldrb	r2, [r2, #3]
 800c09a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	683a      	ldr	r2, [r7, #0]
 800c0a2:	7912      	ldrb	r2, [r2, #4]
 800c0a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	3305      	adds	r3, #5
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	7952      	ldrb	r2, [r2, #5]
 800c0ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	3306      	adds	r3, #6
 800c0b4:	683a      	ldr	r2, [r7, #0]
 800c0b6:	7992      	ldrb	r2, [r2, #6]
 800c0b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	3307      	adds	r3, #7
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	79d2      	ldrb	r2, [r2, #7]
 800c0c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	3308      	adds	r3, #8
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	7a12      	ldrb	r2, [r2, #8]
 800c0cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	3309      	adds	r3, #9
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	7a52      	ldrb	r2, [r2, #9]
 800c0d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	330a      	adds	r3, #10
 800c0dc:	683a      	ldr	r2, [r7, #0]
 800c0de:	7a92      	ldrb	r2, [r2, #10]
 800c0e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	330b      	adds	r3, #11
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	7ad2      	ldrb	r2, [r2, #11]
 800c0ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	330c      	adds	r3, #12
 800c0f0:	683a      	ldr	r2, [r7, #0]
 800c0f2:	7b12      	ldrb	r2, [r2, #12]
 800c0f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	330d      	adds	r3, #13
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	7b52      	ldrb	r2, [r2, #13]
 800c0fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	330e      	adds	r3, #14
 800c104:	683a      	ldr	r2, [r7, #0]
 800c106:	7b92      	ldrb	r2, [r2, #14]
 800c108:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	330f      	adds	r3, #15
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	7bd2      	ldrb	r2, [r2, #15]
 800c112:	701a      	strb	r2, [r3, #0]
#endif
}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	bc80      	pop	{r7}
 800c11c:	4770      	bx	lr

0800c11e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c11e:	b480      	push	{r7}
 800c120:	b085      	sub	sp, #20
 800c122:	af00      	add	r7, sp, #0
 800c124:	60f8      	str	r0, [r7, #12]
 800c126:	60b9      	str	r1, [r7, #8]
 800c128:	4613      	mov	r3, r2
 800c12a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c12c:	e007      	b.n	800c13e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	1c53      	adds	r3, r2, #1
 800c132:	60bb      	str	r3, [r7, #8]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	1c59      	adds	r1, r3, #1
 800c138:	60f9      	str	r1, [r7, #12]
 800c13a:	7812      	ldrb	r2, [r2, #0]
 800c13c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c13e:	79fb      	ldrb	r3, [r7, #7]
 800c140:	1e5a      	subs	r2, r3, #1
 800c142:	71fa      	strb	r2, [r7, #7]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d1f2      	bne.n	800c12e <copy_block_nn+0x10>
}
 800c148:	bf00      	nop
 800c14a:	bf00      	nop
 800c14c:	3714      	adds	r7, #20
 800c14e:	46bd      	mov	sp, r7
 800c150:	bc80      	pop	{r7}
 800c152:	4770      	bx	lr

0800c154 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	781a      	ldrb	r2, [r3, #0]
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	4053      	eors	r3, r2
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	3301      	adds	r3, #1
 800c172:	7819      	ldrb	r1, [r3, #0]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	3301      	adds	r3, #1
 800c178:	781a      	ldrb	r2, [r3, #0]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	3301      	adds	r3, #1
 800c17e:	404a      	eors	r2, r1
 800c180:	b2d2      	uxtb	r2, r2
 800c182:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	3302      	adds	r3, #2
 800c188:	7819      	ldrb	r1, [r3, #0]
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	3302      	adds	r3, #2
 800c18e:	781a      	ldrb	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	3302      	adds	r3, #2
 800c194:	404a      	eors	r2, r1
 800c196:	b2d2      	uxtb	r2, r2
 800c198:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	3303      	adds	r3, #3
 800c19e:	7819      	ldrb	r1, [r3, #0]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	3303      	adds	r3, #3
 800c1a4:	781a      	ldrb	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	3303      	adds	r3, #3
 800c1aa:	404a      	eors	r2, r1
 800c1ac:	b2d2      	uxtb	r2, r2
 800c1ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	7819      	ldrb	r1, [r3, #0]
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	781a      	ldrb	r2, [r3, #0]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	3304      	adds	r3, #4
 800c1c0:	404a      	eors	r2, r1
 800c1c2:	b2d2      	uxtb	r2, r2
 800c1c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	3305      	adds	r3, #5
 800c1ca:	7819      	ldrb	r1, [r3, #0]
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	3305      	adds	r3, #5
 800c1d0:	781a      	ldrb	r2, [r3, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	3305      	adds	r3, #5
 800c1d6:	404a      	eors	r2, r1
 800c1d8:	b2d2      	uxtb	r2, r2
 800c1da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	3306      	adds	r3, #6
 800c1e0:	7819      	ldrb	r1, [r3, #0]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	3306      	adds	r3, #6
 800c1e6:	781a      	ldrb	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3306      	adds	r3, #6
 800c1ec:	404a      	eors	r2, r1
 800c1ee:	b2d2      	uxtb	r2, r2
 800c1f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	3307      	adds	r3, #7
 800c1f6:	7819      	ldrb	r1, [r3, #0]
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	3307      	adds	r3, #7
 800c1fc:	781a      	ldrb	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	3307      	adds	r3, #7
 800c202:	404a      	eors	r2, r1
 800c204:	b2d2      	uxtb	r2, r2
 800c206:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	3308      	adds	r3, #8
 800c20c:	7819      	ldrb	r1, [r3, #0]
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	3308      	adds	r3, #8
 800c212:	781a      	ldrb	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	3308      	adds	r3, #8
 800c218:	404a      	eors	r2, r1
 800c21a:	b2d2      	uxtb	r2, r2
 800c21c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3309      	adds	r3, #9
 800c222:	7819      	ldrb	r1, [r3, #0]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	3309      	adds	r3, #9
 800c228:	781a      	ldrb	r2, [r3, #0]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	3309      	adds	r3, #9
 800c22e:	404a      	eors	r2, r1
 800c230:	b2d2      	uxtb	r2, r2
 800c232:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	330a      	adds	r3, #10
 800c238:	7819      	ldrb	r1, [r3, #0]
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	330a      	adds	r3, #10
 800c23e:	781a      	ldrb	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	330a      	adds	r3, #10
 800c244:	404a      	eors	r2, r1
 800c246:	b2d2      	uxtb	r2, r2
 800c248:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	330b      	adds	r3, #11
 800c24e:	7819      	ldrb	r1, [r3, #0]
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	330b      	adds	r3, #11
 800c254:	781a      	ldrb	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	330b      	adds	r3, #11
 800c25a:	404a      	eors	r2, r1
 800c25c:	b2d2      	uxtb	r2, r2
 800c25e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	330c      	adds	r3, #12
 800c264:	7819      	ldrb	r1, [r3, #0]
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	330c      	adds	r3, #12
 800c26a:	781a      	ldrb	r2, [r3, #0]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	330c      	adds	r3, #12
 800c270:	404a      	eors	r2, r1
 800c272:	b2d2      	uxtb	r2, r2
 800c274:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	330d      	adds	r3, #13
 800c27a:	7819      	ldrb	r1, [r3, #0]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	330d      	adds	r3, #13
 800c280:	781a      	ldrb	r2, [r3, #0]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	330d      	adds	r3, #13
 800c286:	404a      	eors	r2, r1
 800c288:	b2d2      	uxtb	r2, r2
 800c28a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	330e      	adds	r3, #14
 800c290:	7819      	ldrb	r1, [r3, #0]
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	330e      	adds	r3, #14
 800c296:	781a      	ldrb	r2, [r3, #0]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	330e      	adds	r3, #14
 800c29c:	404a      	eors	r2, r1
 800c29e:	b2d2      	uxtb	r2, r2
 800c2a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	330f      	adds	r3, #15
 800c2a6:	7819      	ldrb	r1, [r3, #0]
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	330f      	adds	r3, #15
 800c2ac:	781a      	ldrb	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	330f      	adds	r3, #15
 800c2b2:	404a      	eors	r2, r1
 800c2b4:	b2d2      	uxtb	r2, r2
 800c2b6:	701a      	strb	r2, [r3, #0]
#endif
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bc80      	pop	{r7}
 800c2c0:	4770      	bx	lr

0800c2c2 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c2c2:	b480      	push	{r7}
 800c2c4:	b085      	sub	sp, #20
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	60f8      	str	r0, [r7, #12]
 800c2ca:	60b9      	str	r1, [r7, #8]
 800c2cc:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	781a      	ldrb	r2, [r3, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	4053      	eors	r3, r2
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	7819      	ldrb	r1, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	781a      	ldrb	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	404a      	eors	r2, r1
 800c2f0:	b2d2      	uxtb	r2, r2
 800c2f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	3302      	adds	r3, #2
 800c2f8:	7819      	ldrb	r1, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	3302      	adds	r3, #2
 800c2fe:	781a      	ldrb	r2, [r3, #0]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	3302      	adds	r3, #2
 800c304:	404a      	eors	r2, r1
 800c306:	b2d2      	uxtb	r2, r2
 800c308:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	3303      	adds	r3, #3
 800c30e:	7819      	ldrb	r1, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3303      	adds	r3, #3
 800c314:	781a      	ldrb	r2, [r3, #0]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	3303      	adds	r3, #3
 800c31a:	404a      	eors	r2, r1
 800c31c:	b2d2      	uxtb	r2, r2
 800c31e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	3304      	adds	r3, #4
 800c324:	7819      	ldrb	r1, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	3304      	adds	r3, #4
 800c32a:	781a      	ldrb	r2, [r3, #0]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3304      	adds	r3, #4
 800c330:	404a      	eors	r2, r1
 800c332:	b2d2      	uxtb	r2, r2
 800c334:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	3305      	adds	r3, #5
 800c33a:	7819      	ldrb	r1, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	3305      	adds	r3, #5
 800c340:	781a      	ldrb	r2, [r3, #0]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	3305      	adds	r3, #5
 800c346:	404a      	eors	r2, r1
 800c348:	b2d2      	uxtb	r2, r2
 800c34a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	3306      	adds	r3, #6
 800c350:	7819      	ldrb	r1, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	3306      	adds	r3, #6
 800c356:	781a      	ldrb	r2, [r3, #0]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3306      	adds	r3, #6
 800c35c:	404a      	eors	r2, r1
 800c35e:	b2d2      	uxtb	r2, r2
 800c360:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	3307      	adds	r3, #7
 800c366:	7819      	ldrb	r1, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	3307      	adds	r3, #7
 800c36c:	781a      	ldrb	r2, [r3, #0]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3307      	adds	r3, #7
 800c372:	404a      	eors	r2, r1
 800c374:	b2d2      	uxtb	r2, r2
 800c376:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	3308      	adds	r3, #8
 800c37c:	7819      	ldrb	r1, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	3308      	adds	r3, #8
 800c382:	781a      	ldrb	r2, [r3, #0]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	3308      	adds	r3, #8
 800c388:	404a      	eors	r2, r1
 800c38a:	b2d2      	uxtb	r2, r2
 800c38c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	3309      	adds	r3, #9
 800c392:	7819      	ldrb	r1, [r3, #0]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	3309      	adds	r3, #9
 800c398:	781a      	ldrb	r2, [r3, #0]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	3309      	adds	r3, #9
 800c39e:	404a      	eors	r2, r1
 800c3a0:	b2d2      	uxtb	r2, r2
 800c3a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	330a      	adds	r3, #10
 800c3a8:	7819      	ldrb	r1, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	330a      	adds	r3, #10
 800c3ae:	781a      	ldrb	r2, [r3, #0]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	330a      	adds	r3, #10
 800c3b4:	404a      	eors	r2, r1
 800c3b6:	b2d2      	uxtb	r2, r2
 800c3b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	330b      	adds	r3, #11
 800c3be:	7819      	ldrb	r1, [r3, #0]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	330b      	adds	r3, #11
 800c3c4:	781a      	ldrb	r2, [r3, #0]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	330b      	adds	r3, #11
 800c3ca:	404a      	eors	r2, r1
 800c3cc:	b2d2      	uxtb	r2, r2
 800c3ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	330c      	adds	r3, #12
 800c3d4:	7819      	ldrb	r1, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	330c      	adds	r3, #12
 800c3da:	781a      	ldrb	r2, [r3, #0]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	330c      	adds	r3, #12
 800c3e0:	404a      	eors	r2, r1
 800c3e2:	b2d2      	uxtb	r2, r2
 800c3e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	330d      	adds	r3, #13
 800c3ea:	7819      	ldrb	r1, [r3, #0]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	330d      	adds	r3, #13
 800c3f0:	781a      	ldrb	r2, [r3, #0]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	330d      	adds	r3, #13
 800c3f6:	404a      	eors	r2, r1
 800c3f8:	b2d2      	uxtb	r2, r2
 800c3fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	330e      	adds	r3, #14
 800c400:	7819      	ldrb	r1, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	330e      	adds	r3, #14
 800c406:	781a      	ldrb	r2, [r3, #0]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	330e      	adds	r3, #14
 800c40c:	404a      	eors	r2, r1
 800c40e:	b2d2      	uxtb	r2, r2
 800c410:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	330f      	adds	r3, #15
 800c416:	7819      	ldrb	r1, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	330f      	adds	r3, #15
 800c41c:	781a      	ldrb	r2, [r3, #0]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	330f      	adds	r3, #15
 800c422:	404a      	eors	r2, r1
 800c424:	b2d2      	uxtb	r2, r2
 800c426:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c428:	bf00      	nop
 800c42a:	3714      	adds	r7, #20
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bc80      	pop	{r7}
 800c430:	4770      	bx	lr

0800c432 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b082      	sub	sp, #8
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
 800c43a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff fe88 	bl	800c154 <xor_block>
}
 800c444:	bf00      	nop
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	461a      	mov	r2, r3
 800c45a:	4b48      	ldr	r3, [pc, #288]	@ (800c57c <shift_sub_rows+0x130>)
 800c45c:	5c9a      	ldrb	r2, [r3, r2]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	701a      	strb	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	3304      	adds	r3, #4
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	4619      	mov	r1, r3
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	3304      	adds	r3, #4
 800c46e:	4a43      	ldr	r2, [pc, #268]	@ (800c57c <shift_sub_rows+0x130>)
 800c470:	5c52      	ldrb	r2, [r2, r1]
 800c472:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	3308      	adds	r3, #8
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	4619      	mov	r1, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	3308      	adds	r3, #8
 800c480:	4a3e      	ldr	r2, [pc, #248]	@ (800c57c <shift_sub_rows+0x130>)
 800c482:	5c52      	ldrb	r2, [r2, r1]
 800c484:	701a      	strb	r2, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	330c      	adds	r3, #12
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	4619      	mov	r1, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	330c      	adds	r3, #12
 800c492:	4a3a      	ldr	r2, [pc, #232]	@ (800c57c <shift_sub_rows+0x130>)
 800c494:	5c52      	ldrb	r2, [r2, r1]
 800c496:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	785b      	ldrb	r3, [r3, #1]
 800c49c:	73fb      	strb	r3, [r7, #15]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	3305      	adds	r3, #5
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	4a34      	ldr	r2, [pc, #208]	@ (800c57c <shift_sub_rows+0x130>)
 800c4ac:	5c52      	ldrb	r2, [r2, r1]
 800c4ae:	701a      	strb	r2, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	3309      	adds	r3, #9
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3305      	adds	r3, #5
 800c4bc:	4a2f      	ldr	r2, [pc, #188]	@ (800c57c <shift_sub_rows+0x130>)
 800c4be:	5c52      	ldrb	r2, [r2, r1]
 800c4c0:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	330d      	adds	r3, #13
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	3309      	adds	r3, #9
 800c4ce:	4a2b      	ldr	r2, [pc, #172]	@ (800c57c <shift_sub_rows+0x130>)
 800c4d0:	5c52      	ldrb	r2, [r2, r1]
 800c4d2:	701a      	strb	r2, [r3, #0]
 800c4d4:	7bfa      	ldrb	r2, [r7, #15]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	330d      	adds	r3, #13
 800c4da:	4928      	ldr	r1, [pc, #160]	@ (800c57c <shift_sub_rows+0x130>)
 800c4dc:	5c8a      	ldrb	r2, [r1, r2]
 800c4de:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	789b      	ldrb	r3, [r3, #2]
 800c4e4:	73fb      	strb	r3, [r7, #15]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	330a      	adds	r3, #10
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	3302      	adds	r3, #2
 800c4f2:	4a22      	ldr	r2, [pc, #136]	@ (800c57c <shift_sub_rows+0x130>)
 800c4f4:	5c52      	ldrb	r2, [r2, r1]
 800c4f6:	701a      	strb	r2, [r3, #0]
 800c4f8:	7bfa      	ldrb	r2, [r7, #15]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	330a      	adds	r3, #10
 800c4fe:	491f      	ldr	r1, [pc, #124]	@ (800c57c <shift_sub_rows+0x130>)
 800c500:	5c8a      	ldrb	r2, [r1, r2]
 800c502:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	799b      	ldrb	r3, [r3, #6]
 800c508:	73fb      	strb	r3, [r7, #15]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	330e      	adds	r3, #14
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	4619      	mov	r1, r3
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	3306      	adds	r3, #6
 800c516:	4a19      	ldr	r2, [pc, #100]	@ (800c57c <shift_sub_rows+0x130>)
 800c518:	5c52      	ldrb	r2, [r2, r1]
 800c51a:	701a      	strb	r2, [r3, #0]
 800c51c:	7bfa      	ldrb	r2, [r7, #15]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	330e      	adds	r3, #14
 800c522:	4916      	ldr	r1, [pc, #88]	@ (800c57c <shift_sub_rows+0x130>)
 800c524:	5c8a      	ldrb	r2, [r1, r2]
 800c526:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	7bdb      	ldrb	r3, [r3, #15]
 800c52c:	73fb      	strb	r3, [r7, #15]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	330b      	adds	r3, #11
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	4619      	mov	r1, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	330f      	adds	r3, #15
 800c53a:	4a10      	ldr	r2, [pc, #64]	@ (800c57c <shift_sub_rows+0x130>)
 800c53c:	5c52      	ldrb	r2, [r2, r1]
 800c53e:	701a      	strb	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	3307      	adds	r3, #7
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	4619      	mov	r1, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	330b      	adds	r3, #11
 800c54c:	4a0b      	ldr	r2, [pc, #44]	@ (800c57c <shift_sub_rows+0x130>)
 800c54e:	5c52      	ldrb	r2, [r2, r1]
 800c550:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	3303      	adds	r3, #3
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	4619      	mov	r1, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	3307      	adds	r3, #7
 800c55e:	4a07      	ldr	r2, [pc, #28]	@ (800c57c <shift_sub_rows+0x130>)
 800c560:	5c52      	ldrb	r2, [r2, r1]
 800c562:	701a      	strb	r2, [r3, #0]
 800c564:	7bfa      	ldrb	r2, [r7, #15]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	3303      	adds	r3, #3
 800c56a:	4904      	ldr	r1, [pc, #16]	@ (800c57c <shift_sub_rows+0x130>)
 800c56c:	5c8a      	ldrb	r2, [r1, r2]
 800c56e:	701a      	strb	r2, [r3, #0]
}
 800c570:	bf00      	nop
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	bc80      	pop	{r7}
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	0801dc78 	.word	0x0801dc78

0800c580 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c588:	f107 0308 	add.w	r3, r7, #8
 800c58c:	6879      	ldr	r1, [r7, #4]
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff fd6c 	bl	800c06c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c594:	7a3b      	ldrb	r3, [r7, #8]
 800c596:	461a      	mov	r2, r3
 800c598:	4b9a      	ldr	r3, [pc, #616]	@ (800c804 <mix_sub_columns+0x284>)
 800c59a:	5c9a      	ldrb	r2, [r3, r2]
 800c59c:	7b7b      	ldrb	r3, [r7, #13]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4b99      	ldr	r3, [pc, #612]	@ (800c808 <mix_sub_columns+0x288>)
 800c5a2:	5c5b      	ldrb	r3, [r3, r1]
 800c5a4:	4053      	eors	r3, r2
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	7cbb      	ldrb	r3, [r7, #18]
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4b97      	ldr	r3, [pc, #604]	@ (800c80c <mix_sub_columns+0x28c>)
 800c5ae:	5c5b      	ldrb	r3, [r3, r1]
 800c5b0:	4053      	eors	r3, r2
 800c5b2:	b2da      	uxtb	r2, r3
 800c5b4:	7dfb      	ldrb	r3, [r7, #23]
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	4b94      	ldr	r3, [pc, #592]	@ (800c80c <mix_sub_columns+0x28c>)
 800c5ba:	5c5b      	ldrb	r3, [r3, r1]
 800c5bc:	4053      	eors	r3, r2
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c5c4:	7a3b      	ldrb	r3, [r7, #8]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	4b90      	ldr	r3, [pc, #576]	@ (800c80c <mix_sub_columns+0x28c>)
 800c5ca:	5c9a      	ldrb	r2, [r3, r2]
 800c5cc:	7b7b      	ldrb	r3, [r7, #13]
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	4b8c      	ldr	r3, [pc, #560]	@ (800c804 <mix_sub_columns+0x284>)
 800c5d2:	5c5b      	ldrb	r3, [r3, r1]
 800c5d4:	4053      	eors	r3, r2
 800c5d6:	b2da      	uxtb	r2, r3
 800c5d8:	7cbb      	ldrb	r3, [r7, #18]
 800c5da:	4619      	mov	r1, r3
 800c5dc:	4b8a      	ldr	r3, [pc, #552]	@ (800c808 <mix_sub_columns+0x288>)
 800c5de:	5c5b      	ldrb	r3, [r3, r1]
 800c5e0:	4053      	eors	r3, r2
 800c5e2:	b2d9      	uxtb	r1, r3
 800c5e4:	7dfb      	ldrb	r3, [r7, #23]
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	4b88      	ldr	r3, [pc, #544]	@ (800c80c <mix_sub_columns+0x28c>)
 800c5ea:	5c9a      	ldrb	r2, [r3, r2]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	404a      	eors	r2, r1
 800c5f2:	b2d2      	uxtb	r2, r2
 800c5f4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c5f6:	7a3b      	ldrb	r3, [r7, #8]
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	4b84      	ldr	r3, [pc, #528]	@ (800c80c <mix_sub_columns+0x28c>)
 800c5fc:	5c9a      	ldrb	r2, [r3, r2]
 800c5fe:	7b7b      	ldrb	r3, [r7, #13]
 800c600:	4619      	mov	r1, r3
 800c602:	4b82      	ldr	r3, [pc, #520]	@ (800c80c <mix_sub_columns+0x28c>)
 800c604:	5c5b      	ldrb	r3, [r3, r1]
 800c606:	4053      	eors	r3, r2
 800c608:	b2da      	uxtb	r2, r3
 800c60a:	7cbb      	ldrb	r3, [r7, #18]
 800c60c:	4619      	mov	r1, r3
 800c60e:	4b7d      	ldr	r3, [pc, #500]	@ (800c804 <mix_sub_columns+0x284>)
 800c610:	5c5b      	ldrb	r3, [r3, r1]
 800c612:	4053      	eors	r3, r2
 800c614:	b2d9      	uxtb	r1, r3
 800c616:	7dfb      	ldrb	r3, [r7, #23]
 800c618:	461a      	mov	r2, r3
 800c61a:	4b7b      	ldr	r3, [pc, #492]	@ (800c808 <mix_sub_columns+0x288>)
 800c61c:	5c9a      	ldrb	r2, [r3, r2]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	3302      	adds	r3, #2
 800c622:	404a      	eors	r2, r1
 800c624:	b2d2      	uxtb	r2, r2
 800c626:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c628:	7a3b      	ldrb	r3, [r7, #8]
 800c62a:	461a      	mov	r2, r3
 800c62c:	4b76      	ldr	r3, [pc, #472]	@ (800c808 <mix_sub_columns+0x288>)
 800c62e:	5c9a      	ldrb	r2, [r3, r2]
 800c630:	7b7b      	ldrb	r3, [r7, #13]
 800c632:	4619      	mov	r1, r3
 800c634:	4b75      	ldr	r3, [pc, #468]	@ (800c80c <mix_sub_columns+0x28c>)
 800c636:	5c5b      	ldrb	r3, [r3, r1]
 800c638:	4053      	eors	r3, r2
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	7cbb      	ldrb	r3, [r7, #18]
 800c63e:	4619      	mov	r1, r3
 800c640:	4b72      	ldr	r3, [pc, #456]	@ (800c80c <mix_sub_columns+0x28c>)
 800c642:	5c5b      	ldrb	r3, [r3, r1]
 800c644:	4053      	eors	r3, r2
 800c646:	b2d9      	uxtb	r1, r3
 800c648:	7dfb      	ldrb	r3, [r7, #23]
 800c64a:	461a      	mov	r2, r3
 800c64c:	4b6d      	ldr	r3, [pc, #436]	@ (800c804 <mix_sub_columns+0x284>)
 800c64e:	5c9a      	ldrb	r2, [r3, r2]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	3303      	adds	r3, #3
 800c654:	404a      	eors	r2, r1
 800c656:	b2d2      	uxtb	r2, r2
 800c658:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c65a:	7b3b      	ldrb	r3, [r7, #12]
 800c65c:	461a      	mov	r2, r3
 800c65e:	4b69      	ldr	r3, [pc, #420]	@ (800c804 <mix_sub_columns+0x284>)
 800c660:	5c9a      	ldrb	r2, [r3, r2]
 800c662:	7c7b      	ldrb	r3, [r7, #17]
 800c664:	4619      	mov	r1, r3
 800c666:	4b68      	ldr	r3, [pc, #416]	@ (800c808 <mix_sub_columns+0x288>)
 800c668:	5c5b      	ldrb	r3, [r3, r1]
 800c66a:	4053      	eors	r3, r2
 800c66c:	b2da      	uxtb	r2, r3
 800c66e:	7dbb      	ldrb	r3, [r7, #22]
 800c670:	4619      	mov	r1, r3
 800c672:	4b66      	ldr	r3, [pc, #408]	@ (800c80c <mix_sub_columns+0x28c>)
 800c674:	5c5b      	ldrb	r3, [r3, r1]
 800c676:	4053      	eors	r3, r2
 800c678:	b2d9      	uxtb	r1, r3
 800c67a:	7afb      	ldrb	r3, [r7, #11]
 800c67c:	461a      	mov	r2, r3
 800c67e:	4b63      	ldr	r3, [pc, #396]	@ (800c80c <mix_sub_columns+0x28c>)
 800c680:	5c9a      	ldrb	r2, [r3, r2]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	3304      	adds	r3, #4
 800c686:	404a      	eors	r2, r1
 800c688:	b2d2      	uxtb	r2, r2
 800c68a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c68c:	7b3b      	ldrb	r3, [r7, #12]
 800c68e:	461a      	mov	r2, r3
 800c690:	4b5e      	ldr	r3, [pc, #376]	@ (800c80c <mix_sub_columns+0x28c>)
 800c692:	5c9a      	ldrb	r2, [r3, r2]
 800c694:	7c7b      	ldrb	r3, [r7, #17]
 800c696:	4619      	mov	r1, r3
 800c698:	4b5a      	ldr	r3, [pc, #360]	@ (800c804 <mix_sub_columns+0x284>)
 800c69a:	5c5b      	ldrb	r3, [r3, r1]
 800c69c:	4053      	eors	r3, r2
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	7dbb      	ldrb	r3, [r7, #22]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	4b58      	ldr	r3, [pc, #352]	@ (800c808 <mix_sub_columns+0x288>)
 800c6a6:	5c5b      	ldrb	r3, [r3, r1]
 800c6a8:	4053      	eors	r3, r2
 800c6aa:	b2d9      	uxtb	r1, r3
 800c6ac:	7afb      	ldrb	r3, [r7, #11]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	4b56      	ldr	r3, [pc, #344]	@ (800c80c <mix_sub_columns+0x28c>)
 800c6b2:	5c9a      	ldrb	r2, [r3, r2]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3305      	adds	r3, #5
 800c6b8:	404a      	eors	r2, r1
 800c6ba:	b2d2      	uxtb	r2, r2
 800c6bc:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c6be:	7b3b      	ldrb	r3, [r7, #12]
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	4b52      	ldr	r3, [pc, #328]	@ (800c80c <mix_sub_columns+0x28c>)
 800c6c4:	5c9a      	ldrb	r2, [r3, r2]
 800c6c6:	7c7b      	ldrb	r3, [r7, #17]
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	4b50      	ldr	r3, [pc, #320]	@ (800c80c <mix_sub_columns+0x28c>)
 800c6cc:	5c5b      	ldrb	r3, [r3, r1]
 800c6ce:	4053      	eors	r3, r2
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	7dbb      	ldrb	r3, [r7, #22]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	4b4b      	ldr	r3, [pc, #300]	@ (800c804 <mix_sub_columns+0x284>)
 800c6d8:	5c5b      	ldrb	r3, [r3, r1]
 800c6da:	4053      	eors	r3, r2
 800c6dc:	b2d9      	uxtb	r1, r3
 800c6de:	7afb      	ldrb	r3, [r7, #11]
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	4b49      	ldr	r3, [pc, #292]	@ (800c808 <mix_sub_columns+0x288>)
 800c6e4:	5c9a      	ldrb	r2, [r3, r2]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	3306      	adds	r3, #6
 800c6ea:	404a      	eors	r2, r1
 800c6ec:	b2d2      	uxtb	r2, r2
 800c6ee:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c6f0:	7b3b      	ldrb	r3, [r7, #12]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	4b44      	ldr	r3, [pc, #272]	@ (800c808 <mix_sub_columns+0x288>)
 800c6f6:	5c9a      	ldrb	r2, [r3, r2]
 800c6f8:	7c7b      	ldrb	r3, [r7, #17]
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	4b43      	ldr	r3, [pc, #268]	@ (800c80c <mix_sub_columns+0x28c>)
 800c6fe:	5c5b      	ldrb	r3, [r3, r1]
 800c700:	4053      	eors	r3, r2
 800c702:	b2da      	uxtb	r2, r3
 800c704:	7dbb      	ldrb	r3, [r7, #22]
 800c706:	4619      	mov	r1, r3
 800c708:	4b40      	ldr	r3, [pc, #256]	@ (800c80c <mix_sub_columns+0x28c>)
 800c70a:	5c5b      	ldrb	r3, [r3, r1]
 800c70c:	4053      	eors	r3, r2
 800c70e:	b2d9      	uxtb	r1, r3
 800c710:	7afb      	ldrb	r3, [r7, #11]
 800c712:	461a      	mov	r2, r3
 800c714:	4b3b      	ldr	r3, [pc, #236]	@ (800c804 <mix_sub_columns+0x284>)
 800c716:	5c9a      	ldrb	r2, [r3, r2]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	3307      	adds	r3, #7
 800c71c:	404a      	eors	r2, r1
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c722:	7c3b      	ldrb	r3, [r7, #16]
 800c724:	461a      	mov	r2, r3
 800c726:	4b37      	ldr	r3, [pc, #220]	@ (800c804 <mix_sub_columns+0x284>)
 800c728:	5c9a      	ldrb	r2, [r3, r2]
 800c72a:	7d7b      	ldrb	r3, [r7, #21]
 800c72c:	4619      	mov	r1, r3
 800c72e:	4b36      	ldr	r3, [pc, #216]	@ (800c808 <mix_sub_columns+0x288>)
 800c730:	5c5b      	ldrb	r3, [r3, r1]
 800c732:	4053      	eors	r3, r2
 800c734:	b2da      	uxtb	r2, r3
 800c736:	7abb      	ldrb	r3, [r7, #10]
 800c738:	4619      	mov	r1, r3
 800c73a:	4b34      	ldr	r3, [pc, #208]	@ (800c80c <mix_sub_columns+0x28c>)
 800c73c:	5c5b      	ldrb	r3, [r3, r1]
 800c73e:	4053      	eors	r3, r2
 800c740:	b2d9      	uxtb	r1, r3
 800c742:	7bfb      	ldrb	r3, [r7, #15]
 800c744:	461a      	mov	r2, r3
 800c746:	4b31      	ldr	r3, [pc, #196]	@ (800c80c <mix_sub_columns+0x28c>)
 800c748:	5c9a      	ldrb	r2, [r3, r2]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3308      	adds	r3, #8
 800c74e:	404a      	eors	r2, r1
 800c750:	b2d2      	uxtb	r2, r2
 800c752:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c754:	7c3b      	ldrb	r3, [r7, #16]
 800c756:	461a      	mov	r2, r3
 800c758:	4b2c      	ldr	r3, [pc, #176]	@ (800c80c <mix_sub_columns+0x28c>)
 800c75a:	5c9a      	ldrb	r2, [r3, r2]
 800c75c:	7d7b      	ldrb	r3, [r7, #21]
 800c75e:	4619      	mov	r1, r3
 800c760:	4b28      	ldr	r3, [pc, #160]	@ (800c804 <mix_sub_columns+0x284>)
 800c762:	5c5b      	ldrb	r3, [r3, r1]
 800c764:	4053      	eors	r3, r2
 800c766:	b2da      	uxtb	r2, r3
 800c768:	7abb      	ldrb	r3, [r7, #10]
 800c76a:	4619      	mov	r1, r3
 800c76c:	4b26      	ldr	r3, [pc, #152]	@ (800c808 <mix_sub_columns+0x288>)
 800c76e:	5c5b      	ldrb	r3, [r3, r1]
 800c770:	4053      	eors	r3, r2
 800c772:	b2d9      	uxtb	r1, r3
 800c774:	7bfb      	ldrb	r3, [r7, #15]
 800c776:	461a      	mov	r2, r3
 800c778:	4b24      	ldr	r3, [pc, #144]	@ (800c80c <mix_sub_columns+0x28c>)
 800c77a:	5c9a      	ldrb	r2, [r3, r2]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	3309      	adds	r3, #9
 800c780:	404a      	eors	r2, r1
 800c782:	b2d2      	uxtb	r2, r2
 800c784:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c786:	7c3b      	ldrb	r3, [r7, #16]
 800c788:	461a      	mov	r2, r3
 800c78a:	4b20      	ldr	r3, [pc, #128]	@ (800c80c <mix_sub_columns+0x28c>)
 800c78c:	5c9a      	ldrb	r2, [r3, r2]
 800c78e:	7d7b      	ldrb	r3, [r7, #21]
 800c790:	4619      	mov	r1, r3
 800c792:	4b1e      	ldr	r3, [pc, #120]	@ (800c80c <mix_sub_columns+0x28c>)
 800c794:	5c5b      	ldrb	r3, [r3, r1]
 800c796:	4053      	eors	r3, r2
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	7abb      	ldrb	r3, [r7, #10]
 800c79c:	4619      	mov	r1, r3
 800c79e:	4b19      	ldr	r3, [pc, #100]	@ (800c804 <mix_sub_columns+0x284>)
 800c7a0:	5c5b      	ldrb	r3, [r3, r1]
 800c7a2:	4053      	eors	r3, r2
 800c7a4:	b2d9      	uxtb	r1, r3
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	4b17      	ldr	r3, [pc, #92]	@ (800c808 <mix_sub_columns+0x288>)
 800c7ac:	5c9a      	ldrb	r2, [r3, r2]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	330a      	adds	r3, #10
 800c7b2:	404a      	eors	r2, r1
 800c7b4:	b2d2      	uxtb	r2, r2
 800c7b6:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c7b8:	7c3b      	ldrb	r3, [r7, #16]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	4b12      	ldr	r3, [pc, #72]	@ (800c808 <mix_sub_columns+0x288>)
 800c7be:	5c9a      	ldrb	r2, [r3, r2]
 800c7c0:	7d7b      	ldrb	r3, [r7, #21]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4b11      	ldr	r3, [pc, #68]	@ (800c80c <mix_sub_columns+0x28c>)
 800c7c6:	5c5b      	ldrb	r3, [r3, r1]
 800c7c8:	4053      	eors	r3, r2
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	7abb      	ldrb	r3, [r7, #10]
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	4b0e      	ldr	r3, [pc, #56]	@ (800c80c <mix_sub_columns+0x28c>)
 800c7d2:	5c5b      	ldrb	r3, [r3, r1]
 800c7d4:	4053      	eors	r3, r2
 800c7d6:	b2d9      	uxtb	r1, r3
 800c7d8:	7bfb      	ldrb	r3, [r7, #15]
 800c7da:	461a      	mov	r2, r3
 800c7dc:	4b09      	ldr	r3, [pc, #36]	@ (800c804 <mix_sub_columns+0x284>)
 800c7de:	5c9a      	ldrb	r2, [r3, r2]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	330b      	adds	r3, #11
 800c7e4:	404a      	eors	r2, r1
 800c7e6:	b2d2      	uxtb	r2, r2
 800c7e8:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c7ea:	7d3b      	ldrb	r3, [r7, #20]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	4b05      	ldr	r3, [pc, #20]	@ (800c804 <mix_sub_columns+0x284>)
 800c7f0:	5c9a      	ldrb	r2, [r3, r2]
 800c7f2:	7a7b      	ldrb	r3, [r7, #9]
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	4b04      	ldr	r3, [pc, #16]	@ (800c808 <mix_sub_columns+0x288>)
 800c7f8:	5c5b      	ldrb	r3, [r3, r1]
 800c7fa:	4053      	eors	r3, r2
 800c7fc:	b2da      	uxtb	r2, r3
 800c7fe:	7bbb      	ldrb	r3, [r7, #14]
 800c800:	4619      	mov	r1, r3
 800c802:	e005      	b.n	800c810 <mix_sub_columns+0x290>
 800c804:	0801dd78 	.word	0x0801dd78
 800c808:	0801de78 	.word	0x0801de78
 800c80c:	0801dc78 	.word	0x0801dc78
 800c810:	4b2d      	ldr	r3, [pc, #180]	@ (800c8c8 <mix_sub_columns+0x348>)
 800c812:	5c5b      	ldrb	r3, [r3, r1]
 800c814:	4053      	eors	r3, r2
 800c816:	b2d9      	uxtb	r1, r3
 800c818:	7cfb      	ldrb	r3, [r7, #19]
 800c81a:	461a      	mov	r2, r3
 800c81c:	4b2a      	ldr	r3, [pc, #168]	@ (800c8c8 <mix_sub_columns+0x348>)
 800c81e:	5c9a      	ldrb	r2, [r3, r2]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	330c      	adds	r3, #12
 800c824:	404a      	eors	r2, r1
 800c826:	b2d2      	uxtb	r2, r2
 800c828:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c82a:	7d3b      	ldrb	r3, [r7, #20]
 800c82c:	461a      	mov	r2, r3
 800c82e:	4b26      	ldr	r3, [pc, #152]	@ (800c8c8 <mix_sub_columns+0x348>)
 800c830:	5c9a      	ldrb	r2, [r3, r2]
 800c832:	7a7b      	ldrb	r3, [r7, #9]
 800c834:	4619      	mov	r1, r3
 800c836:	4b25      	ldr	r3, [pc, #148]	@ (800c8cc <mix_sub_columns+0x34c>)
 800c838:	5c5b      	ldrb	r3, [r3, r1]
 800c83a:	4053      	eors	r3, r2
 800c83c:	b2da      	uxtb	r2, r3
 800c83e:	7bbb      	ldrb	r3, [r7, #14]
 800c840:	4619      	mov	r1, r3
 800c842:	4b23      	ldr	r3, [pc, #140]	@ (800c8d0 <mix_sub_columns+0x350>)
 800c844:	5c5b      	ldrb	r3, [r3, r1]
 800c846:	4053      	eors	r3, r2
 800c848:	b2d9      	uxtb	r1, r3
 800c84a:	7cfb      	ldrb	r3, [r7, #19]
 800c84c:	461a      	mov	r2, r3
 800c84e:	4b1e      	ldr	r3, [pc, #120]	@ (800c8c8 <mix_sub_columns+0x348>)
 800c850:	5c9a      	ldrb	r2, [r3, r2]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	330d      	adds	r3, #13
 800c856:	404a      	eors	r2, r1
 800c858:	b2d2      	uxtb	r2, r2
 800c85a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c85c:	7d3b      	ldrb	r3, [r7, #20]
 800c85e:	461a      	mov	r2, r3
 800c860:	4b19      	ldr	r3, [pc, #100]	@ (800c8c8 <mix_sub_columns+0x348>)
 800c862:	5c9a      	ldrb	r2, [r3, r2]
 800c864:	7a7b      	ldrb	r3, [r7, #9]
 800c866:	4619      	mov	r1, r3
 800c868:	4b17      	ldr	r3, [pc, #92]	@ (800c8c8 <mix_sub_columns+0x348>)
 800c86a:	5c5b      	ldrb	r3, [r3, r1]
 800c86c:	4053      	eors	r3, r2
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	7bbb      	ldrb	r3, [r7, #14]
 800c872:	4619      	mov	r1, r3
 800c874:	4b15      	ldr	r3, [pc, #84]	@ (800c8cc <mix_sub_columns+0x34c>)
 800c876:	5c5b      	ldrb	r3, [r3, r1]
 800c878:	4053      	eors	r3, r2
 800c87a:	b2d9      	uxtb	r1, r3
 800c87c:	7cfb      	ldrb	r3, [r7, #19]
 800c87e:	461a      	mov	r2, r3
 800c880:	4b13      	ldr	r3, [pc, #76]	@ (800c8d0 <mix_sub_columns+0x350>)
 800c882:	5c9a      	ldrb	r2, [r3, r2]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	330e      	adds	r3, #14
 800c888:	404a      	eors	r2, r1
 800c88a:	b2d2      	uxtb	r2, r2
 800c88c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c88e:	7d3b      	ldrb	r3, [r7, #20]
 800c890:	461a      	mov	r2, r3
 800c892:	4b0f      	ldr	r3, [pc, #60]	@ (800c8d0 <mix_sub_columns+0x350>)
 800c894:	5c9a      	ldrb	r2, [r3, r2]
 800c896:	7a7b      	ldrb	r3, [r7, #9]
 800c898:	4619      	mov	r1, r3
 800c89a:	4b0b      	ldr	r3, [pc, #44]	@ (800c8c8 <mix_sub_columns+0x348>)
 800c89c:	5c5b      	ldrb	r3, [r3, r1]
 800c89e:	4053      	eors	r3, r2
 800c8a0:	b2da      	uxtb	r2, r3
 800c8a2:	7bbb      	ldrb	r3, [r7, #14]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4b08      	ldr	r3, [pc, #32]	@ (800c8c8 <mix_sub_columns+0x348>)
 800c8a8:	5c5b      	ldrb	r3, [r3, r1]
 800c8aa:	4053      	eors	r3, r2
 800c8ac:	b2d9      	uxtb	r1, r3
 800c8ae:	7cfb      	ldrb	r3, [r7, #19]
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	4b06      	ldr	r3, [pc, #24]	@ (800c8cc <mix_sub_columns+0x34c>)
 800c8b4:	5c9a      	ldrb	r2, [r3, r2]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	330f      	adds	r3, #15
 800c8ba:	404a      	eors	r2, r1
 800c8bc:	b2d2      	uxtb	r2, r2
 800c8be:	701a      	strb	r2, [r3, #0]
  }
 800c8c0:	bf00      	nop
 800c8c2:	3718      	adds	r7, #24
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	0801dc78 	.word	0x0801dc78
 800c8cc:	0801dd78 	.word	0x0801dd78
 800c8d0:	0801de78 	.word	0x0801de78

0800c8d4 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c8e2:	7afb      	ldrb	r3, [r7, #11]
 800c8e4:	3b10      	subs	r3, #16
 800c8e6:	2b10      	cmp	r3, #16
 800c8e8:	bf8c      	ite	hi
 800c8ea:	2201      	movhi	r2, #1
 800c8ec:	2200      	movls	r2, #0
 800c8ee:	b2d2      	uxtb	r2, r2
 800c8f0:	2a00      	cmp	r2, #0
 800c8f2:	d10b      	bne.n	800c90c <lorawan_aes_set_key+0x38>
 800c8f4:	4a64      	ldr	r2, [pc, #400]	@ (800ca88 <lorawan_aes_set_key+0x1b4>)
 800c8f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	bf14      	ite	ne
 800c902:	2301      	movne	r3, #1
 800c904:	2300      	moveq	r3, #0
 800c906:	b2db      	uxtb	r3, r3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d105      	bne.n	800c918 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800c914:	23ff      	movs	r3, #255	@ 0xff
 800c916:	e0b3      	b.n	800ca80 <lorawan_aes_set_key+0x1ac>
        break;
 800c918:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	7afa      	ldrb	r2, [r7, #11]
 800c91e:	68f9      	ldr	r1, [r7, #12]
 800c920:	4618      	mov	r0, r3
 800c922:	f7ff fbfc 	bl	800c11e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c926:	7afb      	ldrb	r3, [r7, #11]
 800c928:	331c      	adds	r3, #28
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800c930:	7c7b      	ldrb	r3, [r7, #17]
 800c932:	091b      	lsrs	r3, r3, #4
 800c934:	b2db      	uxtb	r3, r3
 800c936:	3b01      	subs	r3, #1
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c940:	7afb      	ldrb	r3, [r7, #11]
 800c942:	75fb      	strb	r3, [r7, #23]
 800c944:	2301      	movs	r3, #1
 800c946:	75bb      	strb	r3, [r7, #22]
 800c948:	e094      	b.n	800ca74 <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c94a:	7dfb      	ldrb	r3, [r7, #23]
 800c94c:	3b04      	subs	r3, #4
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	5cd3      	ldrb	r3, [r2, r3]
 800c952:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800c954:	7dfb      	ldrb	r3, [r7, #23]
 800c956:	3b03      	subs	r3, #3
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	5cd3      	ldrb	r3, [r2, r3]
 800c95c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	3b02      	subs	r3, #2
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	5cd3      	ldrb	r3, [r2, r3]
 800c966:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800c968:	7dfb      	ldrb	r3, [r7, #23]
 800c96a:	3b01      	subs	r3, #1
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	5cd3      	ldrb	r3, [r2, r3]
 800c970:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800c972:	7dfb      	ldrb	r3, [r7, #23]
 800c974:	7afa      	ldrb	r2, [r7, #11]
 800c976:	fbb3 f1f2 	udiv	r1, r3, r2
 800c97a:	fb01 f202 	mul.w	r2, r1, r2
 800c97e:	1a9b      	subs	r3, r3, r2
 800c980:	b2db      	uxtb	r3, r3
 800c982:	2b00      	cmp	r3, #0
 800c984:	d128      	bne.n	800c9d8 <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 800c986:	7d7b      	ldrb	r3, [r7, #21]
 800c988:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800c98a:	7d3b      	ldrb	r3, [r7, #20]
 800c98c:	4a3f      	ldr	r2, [pc, #252]	@ (800ca8c <lorawan_aes_set_key+0x1b8>)
 800c98e:	5cd2      	ldrb	r2, [r2, r3]
 800c990:	7dbb      	ldrb	r3, [r7, #22]
 800c992:	4053      	eors	r3, r2
 800c994:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800c996:	7cfb      	ldrb	r3, [r7, #19]
 800c998:	4a3c      	ldr	r2, [pc, #240]	@ (800ca8c <lorawan_aes_set_key+0x1b8>)
 800c99a:	5cd3      	ldrb	r3, [r2, r3]
 800c99c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800c99e:	7cbb      	ldrb	r3, [r7, #18]
 800c9a0:	4a3a      	ldr	r2, [pc, #232]	@ (800ca8c <lorawan_aes_set_key+0x1b8>)
 800c9a2:	5cd3      	ldrb	r3, [r2, r3]
 800c9a4:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800c9a6:	7c3b      	ldrb	r3, [r7, #16]
 800c9a8:	4a38      	ldr	r2, [pc, #224]	@ (800ca8c <lorawan_aes_set_key+0x1b8>)
 800c9aa:	5cd3      	ldrb	r3, [r2, r3]
 800c9ac:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800c9ae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800c9b2:	005b      	lsls	r3, r3, #1
 800c9b4:	b25a      	sxtb	r2, r3
 800c9b6:	7dbb      	ldrb	r3, [r7, #22]
 800c9b8:	09db      	lsrs	r3, r3, #7
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	b25b      	sxtb	r3, r3
 800c9be:	4619      	mov	r1, r3
 800c9c0:	0049      	lsls	r1, r1, #1
 800c9c2:	440b      	add	r3, r1
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	00c8      	lsls	r0, r1, #3
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	440b      	add	r3, r1
 800c9ce:	b25b      	sxtb	r3, r3
 800c9d0:	4053      	eors	r3, r2
 800c9d2:	b25b      	sxtb	r3, r3
 800c9d4:	75bb      	strb	r3, [r7, #22]
 800c9d6:	e01c      	b.n	800ca12 <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c9d8:	7afb      	ldrb	r3, [r7, #11]
 800c9da:	2b18      	cmp	r3, #24
 800c9dc:	d919      	bls.n	800ca12 <lorawan_aes_set_key+0x13e>
 800c9de:	7dfb      	ldrb	r3, [r7, #23]
 800c9e0:	7afa      	ldrb	r2, [r7, #11]
 800c9e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9e6:	fb01 f202 	mul.w	r2, r1, r2
 800c9ea:	1a9b      	subs	r3, r3, r2
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	2b10      	cmp	r3, #16
 800c9f0:	d10f      	bne.n	800ca12 <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 800c9f2:	7d7b      	ldrb	r3, [r7, #21]
 800c9f4:	4a25      	ldr	r2, [pc, #148]	@ (800ca8c <lorawan_aes_set_key+0x1b8>)
 800c9f6:	5cd3      	ldrb	r3, [r2, r3]
 800c9f8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800c9fa:	7d3b      	ldrb	r3, [r7, #20]
 800c9fc:	4a23      	ldr	r2, [pc, #140]	@ (800ca8c <lorawan_aes_set_key+0x1b8>)
 800c9fe:	5cd3      	ldrb	r3, [r2, r3]
 800ca00:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ca02:	7cfb      	ldrb	r3, [r7, #19]
 800ca04:	4a21      	ldr	r2, [pc, #132]	@ (800ca8c <lorawan_aes_set_key+0x1b8>)
 800ca06:	5cd3      	ldrb	r3, [r2, r3]
 800ca08:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ca0a:	7cbb      	ldrb	r3, [r7, #18]
 800ca0c:	4a1f      	ldr	r2, [pc, #124]	@ (800ca8c <lorawan_aes_set_key+0x1b8>)
 800ca0e:	5cd3      	ldrb	r3, [r2, r3]
 800ca10:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ca12:	7dfa      	ldrb	r2, [r7, #23]
 800ca14:	7afb      	ldrb	r3, [r7, #11]
 800ca16:	1ad3      	subs	r3, r2, r3
 800ca18:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ca1a:	7c3b      	ldrb	r3, [r7, #16]
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	5cd1      	ldrb	r1, [r2, r3]
 800ca20:	7dfb      	ldrb	r3, [r7, #23]
 800ca22:	7d7a      	ldrb	r2, [r7, #21]
 800ca24:	404a      	eors	r2, r1
 800ca26:	b2d1      	uxtb	r1, r2
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ca2c:	7c3b      	ldrb	r3, [r7, #16]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	5cd1      	ldrb	r1, [r2, r3]
 800ca34:	7dfb      	ldrb	r3, [r7, #23]
 800ca36:	3301      	adds	r3, #1
 800ca38:	7d3a      	ldrb	r2, [r7, #20]
 800ca3a:	404a      	eors	r2, r1
 800ca3c:	b2d1      	uxtb	r1, r2
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ca42:	7c3b      	ldrb	r3, [r7, #16]
 800ca44:	3302      	adds	r3, #2
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	5cd1      	ldrb	r1, [r2, r3]
 800ca4a:	7dfb      	ldrb	r3, [r7, #23]
 800ca4c:	3302      	adds	r3, #2
 800ca4e:	7cfa      	ldrb	r2, [r7, #19]
 800ca50:	404a      	eors	r2, r1
 800ca52:	b2d1      	uxtb	r1, r2
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ca58:	7c3b      	ldrb	r3, [r7, #16]
 800ca5a:	3303      	adds	r3, #3
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	5cd1      	ldrb	r1, [r2, r3]
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
 800ca62:	3303      	adds	r3, #3
 800ca64:	7cba      	ldrb	r2, [r7, #18]
 800ca66:	404a      	eors	r2, r1
 800ca68:	b2d1      	uxtb	r1, r2
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	3304      	adds	r3, #4
 800ca72:	75fb      	strb	r3, [r7, #23]
 800ca74:	7dfa      	ldrb	r2, [r7, #23]
 800ca76:	7c7b      	ldrb	r3, [r7, #17]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	f4ff af66 	bcc.w	800c94a <lorawan_aes_set_key+0x76>
    }
    return 0;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3718      	adds	r7, #24
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	00010101 	.word	0x00010101
 800ca8c:	0801dc78 	.word	0x0801dc78

0800ca90 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b08a      	sub	sp, #40	@ 0x28
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d038      	beq.n	800cb18 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	f107 0314 	add.w	r3, r7, #20
 800caac:	68f9      	ldr	r1, [r7, #12]
 800caae:	4618      	mov	r0, r3
 800cab0:	f7ff fc07 	bl	800c2c2 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800cab4:	2301      	movs	r3, #1
 800cab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800caba:	e014      	b.n	800cae6 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800cabc:	f107 0314 	add.w	r3, r7, #20
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7ff fd5d 	bl	800c580 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cacc:	0112      	lsls	r2, r2, #4
 800cace:	441a      	add	r2, r3
 800cad0:	f107 0314 	add.w	r3, r7, #20
 800cad4:	4611      	mov	r1, r2
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7ff fcab 	bl	800c432 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800cadc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cae0:	3301      	adds	r3, #1
 800cae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800caec:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d3e3      	bcc.n	800cabc <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800caf4:	f107 0314 	add.w	r3, r7, #20
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7ff fca7 	bl	800c44c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cb04:	0112      	lsls	r2, r2, #4
 800cb06:	441a      	add	r2, r3
 800cb08:	f107 0314 	add.w	r3, r7, #20
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	68b8      	ldr	r0, [r7, #8]
 800cb10:	f7ff fbd7 	bl	800c2c2 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	e000      	b.n	800cb1a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800cb18:	23ff      	movs	r3, #255	@ 0xff
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3728      	adds	r7, #40	@ 0x28
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
	...

0800cb24 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800cb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb26:	b0a1      	sub	sp, #132	@ 0x84
 800cb28:	af12      	add	r7, sp, #72	@ 0x48
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800cb30:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800cb34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb38:	4611      	mov	r1, r2
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 fa12 	bl	800cf64 <SecureElementGetKeyByID>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d174      	bne.n	800cc30 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cb46:	2300      	movs	r3, #0
 800cb48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cb4c:	e06c      	b.n	800cc28 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800cb4e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800cb52:	4939      	ldr	r1, [pc, #228]	@ (800cc38 <PrintKey+0x114>)
 800cb54:	4613      	mov	r3, r2
 800cb56:	005b      	lsls	r3, r3, #1
 800cb58:	4413      	add	r3, r2
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	440b      	add	r3, r1
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d15a      	bne.n	800cc1e <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800cb68:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800cb6c:	4932      	ldr	r1, [pc, #200]	@ (800cc38 <PrintKey+0x114>)
 800cb6e:	4613      	mov	r3, r2
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	4413      	add	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	440b      	add	r3, r1
 800cb78:	3308      	adds	r3, #8
 800cb7a:	6819      	ldr	r1, [r3, #0]
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7e:	785b      	ldrb	r3, [r3, #1]
 800cb80:	461d      	mov	r5, r3
 800cb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb84:	789b      	ldrb	r3, [r3, #2]
 800cb86:	461e      	mov	r6, r3
 800cb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8a:	78db      	ldrb	r3, [r3, #3]
 800cb8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb90:	791b      	ldrb	r3, [r3, #4]
 800cb92:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb96:	795b      	ldrb	r3, [r3, #5]
 800cb98:	623b      	str	r3, [r7, #32]
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb9c:	799b      	ldrb	r3, [r3, #6]
 800cb9e:	61fb      	str	r3, [r7, #28]
 800cba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba2:	79db      	ldrb	r3, [r3, #7]
 800cba4:	61bb      	str	r3, [r7, #24]
 800cba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba8:	7a1b      	ldrb	r3, [r3, #8]
 800cbaa:	617b      	str	r3, [r7, #20]
 800cbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbae:	7a5b      	ldrb	r3, [r3, #9]
 800cbb0:	613b      	str	r3, [r7, #16]
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb4:	7a9b      	ldrb	r3, [r3, #10]
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbba:	7adb      	ldrb	r3, [r3, #11]
 800cbbc:	60bb      	str	r3, [r7, #8]
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc0:	7b1b      	ldrb	r3, [r3, #12]
 800cbc2:	607b      	str	r3, [r7, #4]
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc6:	7b5b      	ldrb	r3, [r3, #13]
 800cbc8:	461c      	mov	r4, r3
 800cbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbcc:	7b9b      	ldrb	r3, [r3, #14]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd2:	7bdb      	ldrb	r3, [r3, #15]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd8:	7c1b      	ldrb	r3, [r3, #16]
 800cbda:	9310      	str	r3, [sp, #64]	@ 0x40
 800cbdc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cbde:	900e      	str	r0, [sp, #56]	@ 0x38
 800cbe0:	940d      	str	r4, [sp, #52]	@ 0x34
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	920c      	str	r2, [sp, #48]	@ 0x30
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	920a      	str	r2, [sp, #40]	@ 0x28
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	9208      	str	r2, [sp, #32]
 800cbf6:	69ba      	ldr	r2, [r7, #24]
 800cbf8:	9207      	str	r2, [sp, #28]
 800cbfa:	69fa      	ldr	r2, [r7, #28]
 800cbfc:	9206      	str	r2, [sp, #24]
 800cbfe:	6a3a      	ldr	r2, [r7, #32]
 800cc00:	9205      	str	r2, [sp, #20]
 800cc02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc04:	9204      	str	r2, [sp, #16]
 800cc06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc08:	9303      	str	r3, [sp, #12]
 800cc0a:	9602      	str	r6, [sp, #8]
 800cc0c:	9501      	str	r5, [sp, #4]
 800cc0e:	9100      	str	r1, [sp, #0]
 800cc10:	4b0a      	ldr	r3, [pc, #40]	@ (800cc3c <PrintKey+0x118>)
 800cc12:	2200      	movs	r2, #0
 800cc14:	2100      	movs	r1, #0
 800cc16:	2002      	movs	r0, #2
 800cc18:	f00f ffde 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
 800cc1c:	e008      	b.n	800cc30 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cc1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cc22:	3301      	adds	r3, #1
 800cc24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cc28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cc2c:	2b0a      	cmp	r3, #10
 800cc2e:	d98e      	bls.n	800cb4e <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800cc30:	373c      	adds	r7, #60	@ 0x3c
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc36:	bf00      	nop
 800cc38:	0801df78 	.word	0x0801df78
 800cc3c:	0801d7f8 	.word	0x0801d7f8

0800cc40 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800cc40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc42:	b091      	sub	sp, #68	@ 0x44
 800cc44:	af08      	add	r7, sp, #32
 800cc46:	4603      	mov	r3, r0
 800cc48:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800cc4e:	f107 0310 	add.w	r3, r7, #16
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 fbd8 	bl	800d408 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800cc58:	7c3b      	ldrb	r3, [r7, #16]
 800cc5a:	7c7a      	ldrb	r2, [r7, #17]
 800cc5c:	7cb9      	ldrb	r1, [r7, #18]
 800cc5e:	7cf8      	ldrb	r0, [r7, #19]
 800cc60:	7d3c      	ldrb	r4, [r7, #20]
 800cc62:	7d7d      	ldrb	r5, [r7, #21]
 800cc64:	7dbe      	ldrb	r6, [r7, #22]
 800cc66:	f897 c017 	ldrb.w	ip, [r7, #23]
 800cc6a:	f8cd c01c 	str.w	ip, [sp, #28]
 800cc6e:	9606      	str	r6, [sp, #24]
 800cc70:	9505      	str	r5, [sp, #20]
 800cc72:	9404      	str	r4, [sp, #16]
 800cc74:	9003      	str	r0, [sp, #12]
 800cc76:	9102      	str	r1, [sp, #8]
 800cc78:	9201      	str	r2, [sp, #4]
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	4b24      	ldr	r3, [pc, #144]	@ (800cd10 <PrintIds+0xd0>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	2100      	movs	r1, #0
 800cc82:	2002      	movs	r0, #2
 800cc84:	f00f ffa8 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800cc88:	f107 0318 	add.w	r3, r7, #24
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f000 fbeb 	bl	800d468 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800cc92:	7e3b      	ldrb	r3, [r7, #24]
 800cc94:	7e7a      	ldrb	r2, [r7, #25]
 800cc96:	7eb9      	ldrb	r1, [r7, #26]
 800cc98:	7ef8      	ldrb	r0, [r7, #27]
 800cc9a:	7f3c      	ldrb	r4, [r7, #28]
 800cc9c:	7f7d      	ldrb	r5, [r7, #29]
 800cc9e:	7fbe      	ldrb	r6, [r7, #30]
 800cca0:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800cca4:	f8cd c01c 	str.w	ip, [sp, #28]
 800cca8:	9606      	str	r6, [sp, #24]
 800ccaa:	9505      	str	r5, [sp, #20]
 800ccac:	9404      	str	r4, [sp, #16]
 800ccae:	9003      	str	r0, [sp, #12]
 800ccb0:	9102      	str	r1, [sp, #8]
 800ccb2:	9201      	str	r2, [sp, #4]
 800ccb4:	9300      	str	r3, [sp, #0]
 800ccb6:	4b17      	ldr	r3, [pc, #92]	@ (800cd14 <PrintIds+0xd4>)
 800ccb8:	2200      	movs	r2, #0
 800ccba:	2100      	movs	r1, #0
 800ccbc:	2002      	movs	r0, #2
 800ccbe:	f00f ff8b 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800ccc2:	f107 020c 	add.w	r2, r7, #12
 800ccc6:	79fb      	ldrb	r3, [r7, #7]
 800ccc8:	4611      	mov	r1, r2
 800ccca:	4618      	mov	r0, r3
 800cccc:	f000 fbfe 	bl	800d4cc <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800ccd0:	f107 030c 	add.w	r3, r7, #12
 800ccd4:	3303      	adds	r3, #3
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	461a      	mov	r2, r3
 800ccda:	f107 030c 	add.w	r3, r7, #12
 800ccde:	3302      	adds	r3, #2
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	4619      	mov	r1, r3
 800cce4:	f107 030c 	add.w	r3, r7, #12
 800cce8:	3301      	adds	r3, #1
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f107 030c 	add.w	r3, r7, #12
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	9303      	str	r3, [sp, #12]
 800ccf6:	9002      	str	r0, [sp, #8]
 800ccf8:	9101      	str	r1, [sp, #4]
 800ccfa:	9200      	str	r2, [sp, #0]
 800ccfc:	4b06      	ldr	r3, [pc, #24]	@ (800cd18 <PrintIds+0xd8>)
 800ccfe:	2200      	movs	r2, #0
 800cd00:	2100      	movs	r1, #0
 800cd02:	2002      	movs	r0, #2
 800cd04:	f00f ff68 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800cd08:	bf00      	nop
 800cd0a:	3724      	adds	r7, #36	@ 0x24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd10:	0801d854 	.word	0x0801d854
 800cd14:	0801d894 	.word	0x0801d894
 800cd18:	0801d8d4 	.word	0x0801d8d4

0800cd1c <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	4603      	mov	r3, r0
 800cd24:	6039      	str	r1, [r7, #0]
 800cd26:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cd28:	2300      	movs	r3, #0
 800cd2a:	73fb      	strb	r3, [r7, #15]
 800cd2c:	e01a      	b.n	800cd64 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cd2e:	4b12      	ldr	r3, [pc, #72]	@ (800cd78 <GetKeyByID+0x5c>)
 800cd30:	6819      	ldr	r1, [r3, #0]
 800cd32:	7bfa      	ldrb	r2, [r7, #15]
 800cd34:	4613      	mov	r3, r2
 800cd36:	011b      	lsls	r3, r3, #4
 800cd38:	4413      	add	r3, r2
 800cd3a:	440b      	add	r3, r1
 800cd3c:	3318      	adds	r3, #24
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	79fa      	ldrb	r2, [r7, #7]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d10b      	bne.n	800cd5e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800cd46:	4b0c      	ldr	r3, [pc, #48]	@ (800cd78 <GetKeyByID+0x5c>)
 800cd48:	6819      	ldr	r1, [r3, #0]
 800cd4a:	7bfa      	ldrb	r2, [r7, #15]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	011b      	lsls	r3, r3, #4
 800cd50:	4413      	add	r3, r2
 800cd52:	3318      	adds	r3, #24
 800cd54:	18ca      	adds	r2, r1, r3
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	e006      	b.n	800cd6c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cd5e:	7bfb      	ldrb	r3, [r7, #15]
 800cd60:	3301      	adds	r3, #1
 800cd62:	73fb      	strb	r3, [r7, #15]
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
 800cd66:	2b0a      	cmp	r3, #10
 800cd68:	d9e1      	bls.n	800cd2e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cd6a:	2303      	movs	r3, #3
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3714      	adds	r7, #20
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bc80      	pop	{r7}
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	200006b8 	.word	0x200006b8

0800cd7c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800cd7c:	b590      	push	{r4, r7, lr}
 800cd7e:	b0d1      	sub	sp, #324	@ 0x144
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800cd86:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800cd8a:	6020      	str	r0, [r4, #0]
 800cd8c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800cd90:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800cd94:	6001      	str	r1, [r0, #0]
 800cd96:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800cd9a:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800cd9e:	600a      	str	r2, [r1, #0]
 800cda0:	461a      	mov	r2, r3
 800cda2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cda6:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800cdaa:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800cdac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cdb0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <ComputeCmac+0x46>
 800cdba:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d101      	bne.n	800cdc6 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cdc2:	2302      	movs	r3, #2
 800cdc4:	e05d      	b.n	800ce82 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800cdc6:	f107 0314 	add.w	r3, r7, #20
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fe fefe 	bl	800bbcc <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800cdd0:	f107 0210 	add.w	r2, r7, #16
 800cdd4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cdd8:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	4611      	mov	r1, r2
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff ff9b 	bl	800cd1c <GetKeyByID>
 800cde6:	4603      	mov	r3, r0
 800cde8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800cdec:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d144      	bne.n	800ce7e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800cdf4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cdf8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	1c5a      	adds	r2, r3, #1
 800ce00:	f107 0314 	add.w	r3, r7, #20
 800ce04:	4611      	mov	r1, r2
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fe fef9 	bl	800bbfe <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ce0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ce10:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d009      	beq.n	800ce2e <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800ce1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ce1e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ce22:	f107 0014 	add.w	r0, r7, #20
 800ce26:	2210      	movs	r2, #16
 800ce28:	6819      	ldr	r1, [r3, #0]
 800ce2a:	f7fe fef7 	bl	800bc1c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ce2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ce32:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800ce36:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ce3a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ce3e:	f107 0014 	add.w	r0, r7, #20
 800ce42:	6812      	ldr	r2, [r2, #0]
 800ce44:	6819      	ldr	r1, [r3, #0]
 800ce46:	f7fe fee9 	bl	800bc1c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ce4a:	f107 0214 	add.w	r2, r7, #20
 800ce4e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800ce52:	4611      	mov	r1, r2
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fe ffa3 	bl	800bda0 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800ce5a:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800ce5e:	461a      	mov	r2, r3
 800ce60:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800ce64:	021b      	lsls	r3, r3, #8
 800ce66:	431a      	orrs	r2, r3
 800ce68:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800ce6c:	041b      	lsls	r3, r3, #16
 800ce6e:	431a      	orrs	r2, r3
 800ce70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ce74:	061b      	lsls	r3, r3, #24
 800ce76:	431a      	orrs	r2, r3
 800ce78:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800ce7c:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ce7e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd90      	pop	{r4, r7, pc}

0800ce8c <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d101      	bne.n	800ce9e <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ce9a:	2302      	movs	r3, #2
 800ce9c:	e00a      	b.n	800ceb4 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800ce9e:	4a07      	ldr	r2, [pc, #28]	@ (800cebc <SecureElementInit+0x30>)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800cea4:	4b05      	ldr	r3, [pc, #20]	@ (800cebc <SecureElementInit+0x30>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	22d8      	movs	r2, #216	@ 0xd8
 800ceaa:	4905      	ldr	r1, [pc, #20]	@ (800cec0 <SecureElementInit+0x34>)
 800ceac:	4618      	mov	r0, r3
 800ceae:	f00b fb36 	bl	801851e <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	200006b8 	.word	0x200006b8
 800cec0:	0801e194 	.word	0x0801e194

0800cec4 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800cece:	2300      	movs	r3, #0
 800ced0:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800ced2:	f107 030c 	add.w	r3, r7, #12
 800ced6:	4618      	mov	r0, r3
 800ced8:	f000 fa96 	bl	800d408 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800cedc:	f107 0308 	add.w	r3, r7, #8
 800cee0:	4619      	mov	r1, r3
 800cee2:	2001      	movs	r0, #1
 800cee4:	f000 faf2 	bl	800d4cc <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d024      	beq.n	800cf38 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800ceee:	2300      	movs	r3, #0
 800cef0:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800cef2:	2300      	movs	r3, #0
 800cef4:	75bb      	strb	r3, [r7, #22]
 800cef6:	e00c      	b.n	800cf12 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800cef8:	7dbb      	ldrb	r3, [r7, #22]
 800cefa:	3318      	adds	r3, #24
 800cefc:	443b      	add	r3, r7
 800cefe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d002      	beq.n	800cf0c <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800cf06:	2301      	movs	r3, #1
 800cf08:	75fb      	strb	r3, [r7, #23]
                break;
 800cf0a:	e005      	b.n	800cf18 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800cf0c:	7dbb      	ldrb	r3, [r7, #22]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	75bb      	strb	r3, [r7, #22]
 800cf12:	7dbb      	ldrb	r3, [r7, #22]
 800cf14:	2b07      	cmp	r3, #7
 800cf16:	d9ef      	bls.n	800cef8 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800cf18:	7dfb      	ldrb	r3, [r7, #23]
 800cf1a:	f083 0301 	eor.w	r3, r3, #1
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d009      	beq.n	800cf38 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800cf24:	f107 020c 	add.w	r2, r7, #12
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4610      	mov	r0, r2
 800cf2c:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800cf2e:	f107 030c 	add.w	r3, r7, #12
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 fa50 	bl	800d3d8 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00c      	beq.n	800cf58 <SecureElementInitMcuID+0x94>
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d109      	bne.n	800cf58 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800cf44:	f107 0208 	add.w	r2, r7, #8
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	4610      	mov	r0, r2
 800cf4c:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	4619      	mov	r1, r3
 800cf52:	2001      	movs	r0, #1
 800cf54:	f000 faa0 	bl	800d498 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3718      	adds	r7, #24
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
	...

0800cf64 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	6039      	str	r1, [r7, #0]
 800cf6e:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cf70:	2300      	movs	r3, #0
 800cf72:	73fb      	strb	r3, [r7, #15]
 800cf74:	e01a      	b.n	800cfac <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cf76:	4b12      	ldr	r3, [pc, #72]	@ (800cfc0 <SecureElementGetKeyByID+0x5c>)
 800cf78:	6819      	ldr	r1, [r3, #0]
 800cf7a:	7bfa      	ldrb	r2, [r7, #15]
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	011b      	lsls	r3, r3, #4
 800cf80:	4413      	add	r3, r2
 800cf82:	440b      	add	r3, r1
 800cf84:	3318      	adds	r3, #24
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	79fa      	ldrb	r2, [r7, #7]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d10b      	bne.n	800cfa6 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800cf8e:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc0 <SecureElementGetKeyByID+0x5c>)
 800cf90:	6819      	ldr	r1, [r3, #0]
 800cf92:	7bfa      	ldrb	r2, [r7, #15]
 800cf94:	4613      	mov	r3, r2
 800cf96:	011b      	lsls	r3, r3, #4
 800cf98:	4413      	add	r3, r2
 800cf9a:	3318      	adds	r3, #24
 800cf9c:	18ca      	adds	r2, r1, r3
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	e006      	b.n	800cfb4 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cfa6:	7bfb      	ldrb	r3, [r7, #15]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	73fb      	strb	r3, [r7, #15]
 800cfac:	7bfb      	ldrb	r3, [r7, #15]
 800cfae:	2b0a      	cmp	r3, #10
 800cfb0:	d9e1      	bls.n	800cf76 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cfb2:	2303      	movs	r3, #3
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3714      	adds	r7, #20
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bc80      	pop	{r7}
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	200006b8 	.word	0x200006b8

0800cfc4 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800cfc8:	2000      	movs	r0, #0
 800cfca:	f7ff fdab 	bl	800cb24 <PrintKey>
    PrintKey( NWK_KEY );
 800cfce:	2001      	movs	r0, #1
 800cfd0:	f7ff fda8 	bl	800cb24 <PrintKey>
    PrintKey( APP_S_KEY );
 800cfd4:	2009      	movs	r0, #9
 800cfd6:	f7ff fda5 	bl	800cb24 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800cfda:	2008      	movs	r0, #8
 800cfdc:	f7ff fda2 	bl	800cb24 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	f7ff fe2d 	bl	800cc40 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	4603      	mov	r3, r0
 800cff4:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800cff6:	200b      	movs	r0, #11
 800cff8:	f7ff fd94 	bl	800cb24 <PrintKey>
    PrintKey( MC_KE_KEY );
 800cffc:	200c      	movs	r0, #12
 800cffe:	f7ff fd91 	bl	800cb24 <PrintKey>
    PrintKey( APP_S_KEY );
 800d002:	2009      	movs	r0, #9
 800d004:	f7ff fd8e 	bl	800cb24 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d008:	2008      	movs	r0, #8
 800d00a:	f7ff fd8b 	bl	800cb24 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800d00e:	200a      	movs	r0, #10
 800d010:	f7ff fd88 	bl	800cb24 <PrintKey>
    PrintIds( mode );
 800d014:	79fb      	ldrb	r3, [r7, #7]
 800d016:	4618      	mov	r0, r3
 800d018:	f7ff fe12 	bl	800cc40 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
	...

0800d028 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b088      	sub	sp, #32
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	4603      	mov	r3, r0
 800d030:	6039      	str	r1, [r7, #0]
 800d032:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d101      	bne.n	800d03e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d03a:	2302      	movs	r3, #2
 800d03c:	e04b      	b.n	800d0d6 <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d03e:	2300      	movs	r3, #0
 800d040:	77fb      	strb	r3, [r7, #31]
 800d042:	e044      	b.n	800d0ce <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d044:	4b26      	ldr	r3, [pc, #152]	@ (800d0e0 <SecureElementSetKey+0xb8>)
 800d046:	6819      	ldr	r1, [r3, #0]
 800d048:	7ffa      	ldrb	r2, [r7, #31]
 800d04a:	4613      	mov	r3, r2
 800d04c:	011b      	lsls	r3, r3, #4
 800d04e:	4413      	add	r3, r2
 800d050:	440b      	add	r3, r1
 800d052:	3318      	adds	r3, #24
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	79fa      	ldrb	r2, [r7, #7]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d135      	bne.n	800d0c8 <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800d05c:	79fb      	ldrb	r3, [r7, #7]
 800d05e:	2b0d      	cmp	r3, #13
 800d060:	d122      	bne.n	800d0a8 <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d062:	2306      	movs	r3, #6
 800d064:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800d066:	f107 030c 	add.w	r3, r7, #12
 800d06a:	2200      	movs	r2, #0
 800d06c:	601a      	str	r2, [r3, #0]
 800d06e:	605a      	str	r2, [r3, #4]
 800d070:	609a      	str	r2, [r3, #8]
 800d072:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800d074:	f107 030c 	add.w	r3, r7, #12
 800d078:	220c      	movs	r2, #12
 800d07a:	2110      	movs	r1, #16
 800d07c:	6838      	ldr	r0, [r7, #0]
 800d07e:	f000 f877 	bl	800d170 <SecureElementAesEncrypt>
 800d082:	4603      	mov	r3, r0
 800d084:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d086:	4b16      	ldr	r3, [pc, #88]	@ (800d0e0 <SecureElementSetKey+0xb8>)
 800d088:	6819      	ldr	r1, [r3, #0]
 800d08a:	7ffa      	ldrb	r2, [r7, #31]
 800d08c:	4613      	mov	r3, r2
 800d08e:	011b      	lsls	r3, r3, #4
 800d090:	4413      	add	r3, r2
 800d092:	3318      	adds	r3, #24
 800d094:	440b      	add	r3, r1
 800d096:	3301      	adds	r3, #1
 800d098:	f107 010c 	add.w	r1, r7, #12
 800d09c:	2210      	movs	r2, #16
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f00b fa3d 	bl	801851e <memcpy1>
                return retval;
 800d0a4:	7fbb      	ldrb	r3, [r7, #30]
 800d0a6:	e016      	b.n	800d0d6 <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d0a8:	4b0d      	ldr	r3, [pc, #52]	@ (800d0e0 <SecureElementSetKey+0xb8>)
 800d0aa:	6819      	ldr	r1, [r3, #0]
 800d0ac:	7ffa      	ldrb	r2, [r7, #31]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	011b      	lsls	r3, r3, #4
 800d0b2:	4413      	add	r3, r2
 800d0b4:	3318      	adds	r3, #24
 800d0b6:	440b      	add	r3, r1
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	2210      	movs	r2, #16
 800d0bc:	6839      	ldr	r1, [r7, #0]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f00b fa2d 	bl	801851e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	e006      	b.n	800d0d6 <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d0c8:	7ffb      	ldrb	r3, [r7, #31]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	77fb      	strb	r3, [r7, #31]
 800d0ce:	7ffb      	ldrb	r3, [r7, #31]
 800d0d0:	2b0a      	cmp	r3, #10
 800d0d2:	d9b7      	bls.n	800d044 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d0d4:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3720      	adds	r7, #32
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	200006b8 	.word	0x200006b8

0800d0e4 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b086      	sub	sp, #24
 800d0e8:	af02      	add	r7, sp, #8
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800d0f2:	78fb      	ldrb	r3, [r7, #3]
 800d0f4:	2b0b      	cmp	r3, #11
 800d0f6:	d901      	bls.n	800d0fc <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d0f8:	2303      	movs	r3, #3
 800d0fa:	e009      	b.n	800d110 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d0fc:	78fa      	ldrb	r2, [r7, #3]
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	4613      	mov	r3, r2
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	68b9      	ldr	r1, [r7, #8]
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f7ff fe37 	bl	800cd7c <ComputeCmac>
 800d10e:	4603      	mov	r3, r0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3710      	adds	r7, #16
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b088      	sub	sp, #32
 800d11c:	af02      	add	r7, sp, #8
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
 800d124:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d101      	bne.n	800d130 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d12c:	2302      	movs	r3, #2
 800d12e:	e01b      	b.n	800d168 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d130:	2306      	movs	r3, #6
 800d132:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800d134:	2300      	movs	r3, #0
 800d136:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d138:	78fa      	ldrb	r2, [r7, #3]
 800d13a:	f107 0310 	add.w	r3, r7, #16
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	4613      	mov	r3, r2
 800d142:	68ba      	ldr	r2, [r7, #8]
 800d144:	68f9      	ldr	r1, [r7, #12]
 800d146:	2000      	movs	r0, #0
 800d148:	f7ff fe18 	bl	800cd7c <ComputeCmac>
 800d14c:	4603      	mov	r3, r0
 800d14e:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d150:	7dfb      	ldrb	r3, [r7, #23]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d001      	beq.n	800d15a <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800d156:	7dfb      	ldrb	r3, [r7, #23]
 800d158:	e006      	b.n	800d168 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d001      	beq.n	800d166 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d162:	2301      	movs	r3, #1
 800d164:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d166:	7dfb      	ldrb	r3, [r7, #23]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3718      	adds	r7, #24
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b0c2      	sub	sp, #264	@ 0x108
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d17c:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800d180:	6001      	str	r1, [r0, #0]
 800d182:	4611      	mov	r1, r2
 800d184:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d188:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800d18c:	6013      	str	r3, [r2, #0]
 800d18e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d192:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800d196:	460a      	mov	r2, r1
 800d198:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d006      	beq.n	800d1ae <SecureElementAesEncrypt+0x3e>
 800d1a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d101      	bne.n	800d1b2 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d1ae:	2302      	movs	r3, #2
 800d1b0:	e059      	b.n	800d266 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800d1b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1b6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f003 030f 	and.w	r3, r3, #15
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d1c4:	2305      	movs	r3, #5
 800d1c6:	e04e      	b.n	800d266 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d1c8:	f107 0314 	add.w	r3, r7, #20
 800d1cc:	22f0      	movs	r2, #240	@ 0xf0
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f00b f9df 	bl	8018594 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d1d6:	f107 0210 	add.w	r2, r7, #16
 800d1da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1de:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	4611      	mov	r1, r2
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7ff fd98 	bl	800cd1c <GetKeyByID>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d1f2:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d133      	bne.n	800d262 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	f107 0214 	add.w	r2, r7, #20
 800d202:	2110      	movs	r1, #16
 800d204:	4618      	mov	r0, r3
 800d206:	f7ff fb65 	bl	800c8d4 <lorawan_aes_set_key>

        uint8_t block = 0;
 800d20a:	2300      	movs	r3, #0
 800d20c:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800d210:	e020      	b.n	800d254 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800d212:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d216:	68fa      	ldr	r2, [r7, #12]
 800d218:	18d0      	adds	r0, r2, r3
 800d21a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d21e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d222:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800d226:	6812      	ldr	r2, [r2, #0]
 800d228:	4413      	add	r3, r2
 800d22a:	f107 0214 	add.w	r2, r7, #20
 800d22e:	4619      	mov	r1, r3
 800d230:	f7ff fc2e 	bl	800ca90 <lorawan_aes_encrypt>
            block = block + 16;
 800d234:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d238:	3310      	adds	r3, #16
 800d23a:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800d23e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d242:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d246:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d24a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800d24e:	6812      	ldr	r2, [r2, #0]
 800d250:	3a10      	subs	r2, #16
 800d252:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800d254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d258:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1d7      	bne.n	800d212 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d262:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800d266:	4618      	mov	r0, r3
 800d268:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b088      	sub	sp, #32
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	460b      	mov	r3, r1
 800d27a:	70fb      	strb	r3, [r7, #3]
 800d27c:	4613      	mov	r3, r2
 800d27e:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d101      	bne.n	800d28a <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d286:	2302      	movs	r3, #2
 800d288:	e02d      	b.n	800d2e6 <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d28a:	2306      	movs	r3, #6
 800d28c:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800d28e:	78bb      	ldrb	r3, [r7, #2]
 800d290:	2b0c      	cmp	r3, #12
 800d292:	d104      	bne.n	800d29e <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d294:	78fb      	ldrb	r3, [r7, #3]
 800d296:	2b0b      	cmp	r3, #11
 800d298:	d001      	beq.n	800d29e <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d29a:	2303      	movs	r3, #3
 800d29c:	e023      	b.n	800d2e6 <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800d29e:	f107 030c 	add.w	r3, r7, #12
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	605a      	str	r2, [r3, #4]
 800d2a8:	609a      	str	r2, [r3, #8]
 800d2aa:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800d2ac:	f107 030c 	add.w	r3, r7, #12
 800d2b0:	78fa      	ldrb	r2, [r7, #3]
 800d2b2:	2110      	movs	r1, #16
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f7ff ff5b 	bl	800d170 <SecureElementAesEncrypt>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d2be:	7ffb      	ldrb	r3, [r7, #31]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d001      	beq.n	800d2c8 <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 800d2c4:	7ffb      	ldrb	r3, [r7, #31]
 800d2c6:	e00e      	b.n	800d2e6 <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800d2c8:	f107 020c 	add.w	r2, r7, #12
 800d2cc:	78bb      	ldrb	r3, [r7, #2]
 800d2ce:	4611      	mov	r1, r2
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff fea9 	bl	800d028 <SecureElementSetKey>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d2da:	7ffb      	ldrb	r3, [r7, #31]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 800d2e0:	7ffb      	ldrb	r3, [r7, #31]
 800d2e2:	e000      	b.n	800d2e6 <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d2e4:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3720      	adds	r7, #32
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b086      	sub	sp, #24
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607b      	str	r3, [r7, #4]
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	73fb      	strb	r3, [r7, #15]
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <SecureElementProcessJoinAccept+0x24>
 800d306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d002      	beq.n	800d312 <SecureElementProcessJoinAccept+0x24>
 800d30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d101      	bne.n	800d316 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d312:	2302      	movs	r3, #2
 800d314:	e05c      	b.n	800d3d0 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d316:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d31a:	2b21      	cmp	r3, #33	@ 0x21
 800d31c:	d901      	bls.n	800d322 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d31e:	2305      	movs	r3, #5
 800d320:	e056      	b.n	800d3d0 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d322:	2301      	movs	r3, #1
 800d324:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	461a      	mov	r2, r3
 800d32e:	6879      	ldr	r1, [r7, #4]
 800d330:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d332:	f00b f8f4 	bl	801851e <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	1c58      	adds	r0, r3, #1
 800d33a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d33e:	3b01      	subs	r3, #1
 800d340:	4619      	mov	r1, r3
 800d342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d344:	3301      	adds	r3, #1
 800d346:	7dfa      	ldrb	r2, [r7, #23]
 800d348:	f7ff ff12 	bl	800d170 <SecureElementAesEncrypt>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d352:	2307      	movs	r3, #7
 800d354:	e03c      	b.n	800d3d0 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d358:	330b      	adds	r3, #11
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	09db      	lsrs	r3, r3, #7
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d362:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800d364:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d368:	3b04      	subs	r3, #4
 800d36a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d36c:	4413      	add	r3, r2
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	4619      	mov	r1, r3
 800d372:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d376:	3b03      	subs	r3, #3
 800d378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d37a:	4413      	add	r3, r2
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	021b      	lsls	r3, r3, #8
 800d380:	ea41 0203 	orr.w	r2, r1, r3
 800d384:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d388:	3b02      	subs	r3, #2
 800d38a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d38c:	440b      	add	r3, r1
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	041b      	lsls	r3, r3, #16
 800d392:	431a      	orrs	r2, r3
 800d394:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d398:	3b01      	subs	r3, #1
 800d39a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d39c:	440b      	add	r3, r1
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	061b      	lsls	r3, r3, #24
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800d3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10d      	bne.n	800d3ca <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d3ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3b2:	3b04      	subs	r3, #4
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	693a      	ldr	r2, [r7, #16]
 800d3ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3bc:	f7ff feac 	bl	800d118 <SecureElementVerifyAesCmac>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d003      	beq.n	800d3ce <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e002      	b.n	800d3d0 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d3ca:	2304      	movs	r3, #4
 800d3cc:	e000      	b.n	800d3d0 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d3ce:	2300      	movs	r3, #0
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3718      	adds	r7, #24
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d101      	bne.n	800d3ea <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d3e6:	2302      	movs	r3, #2
 800d3e8:	e007      	b.n	800d3fa <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800d3ea:	4b06      	ldr	r3, [pc, #24]	@ (800d404 <SecureElementSetDevEui+0x2c>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2208      	movs	r2, #8
 800d3f0:	6879      	ldr	r1, [r7, #4]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f00b f893 	bl	801851e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d3f8:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3708      	adds	r7, #8
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	200006b8 	.word	0x200006b8

0800d408 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d101      	bne.n	800d41a <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d416:	2302      	movs	r3, #2
 800d418:	e007      	b.n	800d42a <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800d41a:	4b06      	ldr	r3, [pc, #24]	@ (800d434 <SecureElementGetDevEui+0x2c>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2208      	movs	r2, #8
 800d420:	4619      	mov	r1, r3
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f00b f87b 	bl	801851e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d428:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	200006b8 	.word	0x200006b8

0800d438 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d101      	bne.n	800d44a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d446:	2302      	movs	r3, #2
 800d448:	e008      	b.n	800d45c <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800d44a:	4b06      	ldr	r3, [pc, #24]	@ (800d464 <SecureElementSetJoinEui+0x2c>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	3308      	adds	r3, #8
 800d450:	2208      	movs	r2, #8
 800d452:	6879      	ldr	r1, [r7, #4]
 800d454:	4618      	mov	r0, r3
 800d456:	f00b f862 	bl	801851e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d45a:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	200006b8 	.word	0x200006b8

0800d468 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d476:	2302      	movs	r3, #2
 800d478:	e008      	b.n	800d48c <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800d47a:	4b06      	ldr	r3, [pc, #24]	@ (800d494 <SecureElementGetJoinEui+0x2c>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	3308      	adds	r3, #8
 800d480:	2208      	movs	r2, #8
 800d482:	4619      	mov	r1, r3
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f00b f84a 	bl	801851e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d48a:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	200006b8 	.word	0x200006b8

0800d498 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	4603      	mov	r3, r0
 800d4a0:	6039      	str	r1, [r7, #0]
 800d4a2:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800d4a4:	79fb      	ldrb	r3, [r7, #7]
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d104      	bne.n	800d4b4 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800d4aa:	4b07      	ldr	r3, [pc, #28]	@ (800d4c8 <SecureElementSetDevAddr+0x30>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	611a      	str	r2, [r3, #16]
 800d4b2:	e003      	b.n	800d4bc <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800d4b4:	4b04      	ldr	r3, [pc, #16]	@ (800d4c8 <SecureElementSetDevAddr+0x30>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	683a      	ldr	r2, [r7, #0]
 800d4ba:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800d4bc:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	370c      	adds	r7, #12
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bc80      	pop	{r7}
 800d4c6:	4770      	bx	lr
 800d4c8:	200006b8 	.word	0x200006b8

0800d4cc <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	6039      	str	r1, [r7, #0]
 800d4d6:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d101      	bne.n	800d4e2 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d4de:	2302      	movs	r3, #2
 800d4e0:	e00e      	b.n	800d500 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800d4e2:	79fb      	ldrb	r3, [r7, #7]
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	d105      	bne.n	800d4f4 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800d4e8:	4b08      	ldr	r3, [pc, #32]	@ (800d50c <SecureElementGetDevAddr+0x40>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	691a      	ldr	r2, [r3, #16]
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	601a      	str	r2, [r3, #0]
 800d4f2:	e004      	b.n	800d4fe <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800d4f4:	4b05      	ldr	r3, [pc, #20]	@ (800d50c <SecureElementGetDevAddr+0x40>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	695a      	ldr	r2, [r3, #20]
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800d4fe:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800d500:	4618      	mov	r0, r3
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	bc80      	pop	{r7}
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	200006b8 	.word	0x200006b8

0800d510 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800d51a:	4a29      	ldr	r2, [pc, #164]	@ (800d5c0 <LmHandlerInit+0xb0>)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d520:	4b28      	ldr	r3, [pc, #160]	@ (800d5c4 <LmHandlerInit+0xb4>)
 800d522:	4a29      	ldr	r2, [pc, #164]	@ (800d5c8 <LmHandlerInit+0xb8>)
 800d524:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d526:	4b27      	ldr	r3, [pc, #156]	@ (800d5c4 <LmHandlerInit+0xb4>)
 800d528:	4a28      	ldr	r2, [pc, #160]	@ (800d5cc <LmHandlerInit+0xbc>)
 800d52a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d52c:	4b25      	ldr	r3, [pc, #148]	@ (800d5c4 <LmHandlerInit+0xb4>)
 800d52e:	4a28      	ldr	r2, [pc, #160]	@ (800d5d0 <LmHandlerInit+0xc0>)
 800d530:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d532:	4b24      	ldr	r3, [pc, #144]	@ (800d5c4 <LmHandlerInit+0xb4>)
 800d534:	4a27      	ldr	r2, [pc, #156]	@ (800d5d4 <LmHandlerInit+0xc4>)
 800d536:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d538:	4b21      	ldr	r3, [pc, #132]	@ (800d5c0 <LmHandlerInit+0xb0>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4a26      	ldr	r2, [pc, #152]	@ (800d5d8 <LmHandlerInit+0xc8>)
 800d540:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d542:	4b1f      	ldr	r3, [pc, #124]	@ (800d5c0 <LmHandlerInit+0xb0>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	4a23      	ldr	r2, [pc, #140]	@ (800d5d8 <LmHandlerInit+0xc8>)
 800d54a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d54c:	4b1c      	ldr	r3, [pc, #112]	@ (800d5c0 <LmHandlerInit+0xb0>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	4a21      	ldr	r2, [pc, #132]	@ (800d5d8 <LmHandlerInit+0xc8>)
 800d554:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800d556:	4b1a      	ldr	r3, [pc, #104]	@ (800d5c0 <LmHandlerInit+0xb0>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	4a1e      	ldr	r2, [pc, #120]	@ (800d5d8 <LmHandlerInit+0xc8>)
 800d55e:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d560:	4b1d      	ldr	r3, [pc, #116]	@ (800d5d8 <LmHandlerInit+0xc8>)
 800d562:	4a1e      	ldr	r2, [pc, #120]	@ (800d5dc <LmHandlerInit+0xcc>)
 800d564:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d566:	4b16      	ldr	r3, [pc, #88]	@ (800d5c0 <LmHandlerInit+0xb0>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	699b      	ldr	r3, [r3, #24]
 800d56c:	4a1a      	ldr	r2, [pc, #104]	@ (800d5d8 <LmHandlerInit+0xc8>)
 800d56e:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	4a1b      	ldr	r2, [pc, #108]	@ (800d5e0 <LmHandlerInit+0xd0>)
 800d574:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800d576:	4b12      	ldr	r3, [pc, #72]	@ (800d5c0 <LmHandlerInit+0xb0>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d57c:	4a18      	ldr	r2, [pc, #96]	@ (800d5e0 <LmHandlerInit+0xd0>)
 800d57e:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800d580:	4b17      	ldr	r3, [pc, #92]	@ (800d5e0 <LmHandlerInit+0xd0>)
 800d582:	4a18      	ldr	r2, [pc, #96]	@ (800d5e4 <LmHandlerInit+0xd4>)
 800d584:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800d586:	4b16      	ldr	r3, [pc, #88]	@ (800d5e0 <LmHandlerInit+0xd0>)
 800d588:	4a17      	ldr	r2, [pc, #92]	@ (800d5e8 <LmHandlerInit+0xd8>)
 800d58a:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800d58c:	4914      	ldr	r1, [pc, #80]	@ (800d5e0 <LmHandlerInit+0xd0>)
 800d58e:	2000      	movs	r0, #0
 800d590:	f000 fdc0 	bl	800e114 <LmHandlerPackageRegister>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d002      	beq.n	800d5a0 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800d59a:	f04f 33ff 	mov.w	r3, #4294967295
 800d59e:	e00a      	b.n	800d5b6 <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800d5a0:	463b      	mov	r3, r7
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f001 fd36 	bl	800f014 <LmhpPackagesRegistrationInit>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d002      	beq.n	800d5b4 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800d5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d5b2:	e000      	b.n	800d5b6 <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	20000710 	.word	0x20000710
 800d5c4:	20000714 	.word	0x20000714
 800d5c8:	0800dded 	.word	0x0800dded
 800d5cc:	0800de61 	.word	0x0800de61
 800d5d0:	0800df31 	.word	0x0800df31
 800d5d4:	0800e081 	.word	0x0800e081
 800d5d8:	20000724 	.word	0x20000724
 800d5dc:	0800e5c1 	.word	0x0800e5c1
 800d5e0:	200006d4 	.word	0x200006d4
 800d5e4:	0800e3d5 	.word	0x0800e3d5
 800d5e8:	0800e40d 	.word	0x0800e40d

0800d5ec <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b092      	sub	sp, #72	@ 0x48
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800d5f4:	2218      	movs	r2, #24
 800d5f6:	6879      	ldr	r1, [r7, #4]
 800d5f8:	488a      	ldr	r0, [pc, #552]	@ (800d824 <LmHandlerConfigure+0x238>)
 800d5fa:	f00a ff90 	bl	801851e <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800d5fe:	4b8a      	ldr	r3, [pc, #552]	@ (800d828 <LmHandlerConfigure+0x23c>)
 800d600:	2200      	movs	r2, #0
 800d602:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800d604:	f7fe faa0 	bl	800bb48 <LoraInfo_GetPtr>
 800d608:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800d60a:	4b86      	ldr	r3, [pc, #536]	@ (800d824 <LmHandlerConfigure+0x238>)
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	461a      	mov	r2, r3
 800d610:	2301      	movs	r3, #1
 800d612:	4093      	lsls	r3, r2
 800d614:	461a      	mov	r2, r3
 800d616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	4013      	ands	r3, r2
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d107      	bne.n	800d630 <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800d620:	4b82      	ldr	r3, [pc, #520]	@ (800d82c <LmHandlerConfigure+0x240>)
 800d622:	2201      	movs	r2, #1
 800d624:	2100      	movs	r1, #0
 800d626:	2000      	movs	r0, #0
 800d628:	f00f fad6 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800d62c:	bf00      	nop
 800d62e:	e7fd      	b.n	800d62c <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800d630:	4b7c      	ldr	r3, [pc, #496]	@ (800d824 <LmHandlerConfigure+0x238>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	461a      	mov	r2, r3
 800d636:	497e      	ldr	r1, [pc, #504]	@ (800d830 <LmHandlerConfigure+0x244>)
 800d638:	487e      	ldr	r0, [pc, #504]	@ (800d834 <LmHandlerConfigure+0x248>)
 800d63a:	f005 f80d 	bl	8012658 <LoRaMacInitialization>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d002      	beq.n	800d64a <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d644:	f04f 33ff 	mov.w	r3, #4294967295
 800d648:	e0e8      	b.n	800d81c <LmHandlerConfigure+0x230>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800d64a:	2327      	movs	r3, #39	@ 0x27
 800d64c:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d64e:	f107 0318 	add.w	r3, r7, #24
 800d652:	4618      	mov	r0, r3
 800d654:	f005 fd8c 	bl	8013170 <LoRaMacMibSetRequestConfirm>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d103      	bne.n	800d666 <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800d65e:	4b76      	ldr	r3, [pc, #472]	@ (800d838 <LmHandlerConfigure+0x24c>)
 800d660:	2201      	movs	r2, #1
 800d662:	701a      	strb	r2, [r3, #0]
 800d664:	e02a      	b.n	800d6bc <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800d666:	2328      	movs	r3, #40	@ 0x28
 800d668:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800d66a:	4b74      	ldr	r3, [pc, #464]	@ (800d83c <LmHandlerConfigure+0x250>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	691b      	ldr	r3, [r3, #16]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00c      	beq.n	800d68e <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d674:	f107 0318 	add.w	r3, r7, #24
 800d678:	4618      	mov	r0, r3
 800d67a:	f005 fba1 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800d67e:	4b6f      	ldr	r3, [pc, #444]	@ (800d83c <LmHandlerConfigure+0x250>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	691b      	ldr	r3, [r3, #16]
 800d684:	69fa      	ldr	r2, [r7, #28]
 800d686:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800d68a:	4610      	mov	r0, r2
 800d68c:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800d68e:	2327      	movs	r3, #39	@ 0x27
 800d690:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d692:	f107 0318 	add.w	r3, r7, #24
 800d696:	4618      	mov	r0, r3
 800d698:	f005 fd6a 	bl	8013170 <LoRaMacMibSetRequestConfirm>
 800d69c:	4603      	mov	r3, r0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d10c      	bne.n	800d6bc <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d6a6:	f107 0318 	add.w	r3, r7, #24
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f005 fb88 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d6b0:	7f3b      	ldrb	r3, [r7, #28]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d002      	beq.n	800d6bc <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800d6b6:	4b60      	ldr	r3, [pc, #384]	@ (800d838 <LmHandlerConfigure+0x24c>)
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800d6bc:	4b5e      	ldr	r3, [pc, #376]	@ (800d838 <LmHandlerConfigure+0x24c>)
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d02e      	beq.n	800d722 <LmHandlerConfigure+0x136>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800d6c4:	4b5d      	ldr	r3, [pc, #372]	@ (800d83c <LmHandlerConfigure+0x250>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	69db      	ldr	r3, [r3, #28]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d004      	beq.n	800d6d8 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800d6ce:	4b5b      	ldr	r3, [pc, #364]	@ (800d83c <LmHandlerConfigure+0x250>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	69db      	ldr	r3, [r3, #28]
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	4798      	blx	r3
        }

        //BZ #156695
        if(( LmHandlerJoinStatus() == LORAMAC_HANDLER_SET) && LoRaMacIsStopped())
 800d6d8:	f000 f98e 	bl	800d9f8 <LmHandlerJoinStatus>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d106      	bne.n	800d6f0 <LmHandlerConfigure+0x104>
 800d6e2:	f002 fc99 	bl	8010018 <LoRaMacIsStopped>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d001      	beq.n	800d6f0 <LmHandlerConfigure+0x104>
        { 
            LoRaMacStart();
 800d6ec:	f005 fa6a 	bl	8012bc4 <LoRaMacStart>
        }

        mibReq.Type = MIB_NVM_CTXS;
 800d6f0:	2327      	movs	r3, #39	@ 0x27
 800d6f2:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d6f4:	f107 0318 	add.w	r3, r7, #24
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f005 fb61 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800d702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d704:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800d708:	4b46      	ldr	r3, [pc, #280]	@ (800d824 <LmHandlerConfigure+0x238>)
 800d70a:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800d70c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d70e:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800d712:	4b44      	ldr	r3, [pc, #272]	@ (800d824 <LmHandlerConfigure+0x238>)
 800d714:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800d716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d718:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800d71c:	4b41      	ldr	r3, [pc, #260]	@ (800d824 <LmHandlerConfigure+0x238>)
 800d71e:	709a      	strb	r2, [r3, #2]
 800d720:	e008      	b.n	800d734 <LmHandlerConfigure+0x148>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800d722:	2305      	movs	r3, #5
 800d724:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d726:	2300      	movs	r3, #0
 800d728:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d72a:	f107 0318 	add.w	r3, r7, #24
 800d72e:	4618      	mov	r0, r3
 800d730:	f005 fd1e 	bl	8013170 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800d734:	4b3e      	ldr	r3, [pc, #248]	@ (800d830 <LmHandlerConfigure+0x244>)
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	4a3d      	ldr	r2, [pc, #244]	@ (800d830 <LmHandlerConfigure+0x244>)
 800d73a:	68d2      	ldr	r2, [r2, #12]
 800d73c:	4611      	mov	r1, r2
 800d73e:	4618      	mov	r0, r3
 800d740:	f7ff fbc0 	bl	800cec4 <SecureElementInitMcuID>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d002      	beq.n	800d750 <LmHandlerConfigure+0x164>
    {
        return LORAMAC_HANDLER_ERROR;
 800d74a:	f04f 33ff 	mov.w	r3, #4294967295
 800d74e:	e065      	b.n	800d81c <LmHandlerConfigure+0x230>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800d750:	2306      	movs	r3, #6
 800d752:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d754:	f107 0318 	add.w	r3, r7, #24
 800d758:	4618      	mov	r0, r3
 800d75a:	f005 fb31 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	4a37      	ldr	r2, [pc, #220]	@ (800d840 <LmHandlerConfigure+0x254>)
 800d762:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d764:	f107 0318 	add.w	r3, r7, #24
 800d768:	4618      	mov	r0, r3
 800d76a:	f005 fd01 	bl	8013170 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800d76e:	2302      	movs	r3, #2
 800d770:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800d772:	4b33      	ldr	r3, [pc, #204]	@ (800d840 <LmHandlerConfigure+0x254>)
 800d774:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d776:	f107 0318 	add.w	r3, r7, #24
 800d77a:	4618      	mov	r0, r3
 800d77c:	f005 fb20 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800d780:	2303      	movs	r3, #3
 800d782:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800d784:	4b2f      	ldr	r3, [pc, #188]	@ (800d844 <LmHandlerConfigure+0x258>)
 800d786:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d788:	f107 0318 	add.w	r3, r7, #24
 800d78c:	4618      	mov	r0, r3
 800d78e:	f005 fb17 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800d792:	f7ff fc17 	bl	800cfc4 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d796:	230f      	movs	r3, #15
 800d798:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d79a:	2301      	movs	r3, #1
 800d79c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d79e:	f107 0318 	add.w	r3, r7, #24
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f005 fce4 	bl	8013170 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d7a8:	2310      	movs	r3, #16
 800d7aa:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d7b0:	f107 0318 	add.w	r3, r7, #24
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f005 fcdb 	bl	8013170 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d7ba:	2304      	movs	r3, #4
 800d7bc:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d7be:	4b19      	ldr	r3, [pc, #100]	@ (800d824 <LmHandlerConfigure+0x238>)
 800d7c0:	789b      	ldrb	r3, [r3, #2]
 800d7c2:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d7c4:	f107 0318 	add.w	r3, r7, #24
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f005 fcd1 	bl	8013170 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800d7ce:	233a      	movs	r3, #58	@ 0x3a
 800d7d0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800d7d2:	4b14      	ldr	r3, [pc, #80]	@ (800d824 <LmHandlerConfigure+0x238>)
 800d7d4:	695b      	ldr	r3, [r3, #20]
 800d7d6:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d7d8:	f107 0318 	add.w	r3, r7, #24
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f005 fcc7 	bl	8013170 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d7e2:	230f      	movs	r3, #15
 800d7e4:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d7e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d824 <LmHandlerConfigure+0x238>)
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	f107 0210 	add.w	r2, r7, #16
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f008 fc69 	bl	80160c8 <RegionGetPhyParam>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	bf14      	ite	ne
 800d800:	2301      	movne	r3, #1
 800d802:	2300      	moveq	r3, #0
 800d804:	b2da      	uxtb	r2, r3
 800d806:	4b07      	ldr	r3, [pc, #28]	@ (800d824 <LmHandlerConfigure+0x238>)
 800d808:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800d80a:	2014      	movs	r0, #20
 800d80c:	f000 fad6 	bl	800ddbc <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d810:	4b04      	ldr	r3, [pc, #16]	@ (800d824 <LmHandlerConfigure+0x238>)
 800d812:	79db      	ldrb	r3, [r3, #7]
 800d814:	4618      	mov	r0, r3
 800d816:	f006 fb89 	bl	8013f2c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3748      	adds	r7, #72	@ 0x48
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	200006f8 	.word	0x200006f8
 800d828:	20000740 	.word	0x20000740
 800d82c:	0801d900 	.word	0x0801d900
 800d830:	20000724 	.word	0x20000724
 800d834:	20000714 	.word	0x20000714
 800d838:	20000836 	.word	0x20000836
 800d83c:	20000710 	.word	0x20000710
 800d840:	200006bc 	.word	0x200006bc
 800d844:	200006c4 	.word	0x200006c4

0800d848 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800d84e:	f002 fe61 	bl	8010514 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800d852:	f000 fd8b 	bl	800e36c <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800d856:	f000 fd5f 	bl	800e318 <LmHandlerPackageIsTxPending>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d117      	bne.n	800d890 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800d860:	4b0d      	ldr	r3, [pc, #52]	@ (800d898 <LmHandlerProcess+0x50>)
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d014      	beq.n	800d892 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800d868:	2300      	movs	r3, #0
 800d86a:	703b      	strb	r3, [r7, #0]
 800d86c:	2300      	movs	r3, #0
 800d86e:	707b      	strb	r3, [r7, #1]
 800d870:	2300      	movs	r3, #0
 800d872:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800d874:	4b09      	ldr	r3, [pc, #36]	@ (800d89c <LmHandlerProcess+0x54>)
 800d876:	78d9      	ldrb	r1, [r3, #3]
 800d878:	463b      	mov	r3, r7
 800d87a:	2200      	movs	r2, #0
 800d87c:	4618      	mov	r0, r3
 800d87e:	f000 f8d7 	bl	800da30 <LmHandlerSend>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d104      	bne.n	800d892 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800d888:	4b03      	ldr	r3, [pc, #12]	@ (800d898 <LmHandlerProcess+0x50>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	701a      	strb	r2, [r3, #0]
 800d88e:	e000      	b.n	800d892 <LmHandlerProcess+0x4a>
        return;
 800d890:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	20000740 	.word	0x20000740
 800d89c:	200006f8 	.word	0x200006f8

0800d8a0 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800d8a4:	4b02      	ldr	r3, [pc, #8]	@ (800d8b0 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bc80      	pop	{r7}
 800d8ae:	4770      	bx	lr
 800d8b0:	2000073c 	.word	0x2000073c

0800d8b4 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b092      	sub	sp, #72	@ 0x48
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	460a      	mov	r2, r1
 800d8be:	71fb      	strb	r3, [r7, #7]
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d8ca:	4b46      	ldr	r3, [pc, #280]	@ (800d9e4 <LmHandlerJoin+0x130>)
 800d8cc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800d8d6:	4b43      	ldr	r3, [pc, #268]	@ (800d9e4 <LmHandlerJoin+0x130>)
 800d8d8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d8dc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800d8e0:	79fb      	ldrb	r3, [r7, #7]
 800d8e2:	2b02      	cmp	r3, #2
 800d8e4:	d10b      	bne.n	800d8fe <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d8e6:	2302      	movs	r3, #2
 800d8e8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d8ec:	4b3e      	ldr	r3, [pc, #248]	@ (800d9e8 <LmHandlerJoin+0x134>)
 800d8ee:	2202      	movs	r2, #2
 800d8f0:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800d8f2:	4a3d      	ldr	r2, [pc, #244]	@ (800d9e8 <LmHandlerJoin+0x134>)
 800d8f4:	79bb      	ldrb	r3, [r7, #6]
 800d8f6:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800d8f8:	f005 f964 	bl	8012bc4 <LoRaMacStart>
 800d8fc:	e05c      	b.n	800d9b8 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d8fe:	2301      	movs	r3, #1
 800d900:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d904:	4b38      	ldr	r3, [pc, #224]	@ (800d9e8 <LmHandlerJoin+0x134>)
 800d906:	2201      	movs	r2, #1
 800d908:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d90a:	4b36      	ldr	r3, [pc, #216]	@ (800d9e4 <LmHandlerJoin+0x130>)
 800d90c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d910:	4b35      	ldr	r3, [pc, #212]	@ (800d9e8 <LmHandlerJoin+0x134>)
 800d912:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800d914:	4b33      	ldr	r3, [pc, #204]	@ (800d9e4 <LmHandlerJoin+0x130>)
 800d916:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800d91a:	4b33      	ldr	r3, [pc, #204]	@ (800d9e8 <LmHandlerJoin+0x134>)
 800d91c:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d91e:	4b32      	ldr	r3, [pc, #200]	@ (800d9e8 <LmHandlerJoin+0x134>)
 800d920:	2200      	movs	r2, #0
 800d922:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800d924:	4a30      	ldr	r2, [pc, #192]	@ (800d9e8 <LmHandlerJoin+0x134>)
 800d926:	79bb      	ldrb	r3, [r7, #6]
 800d928:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800d92a:	4b30      	ldr	r3, [pc, #192]	@ (800d9ec <LmHandlerJoin+0x138>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	f083 0301 	eor.w	r3, r3, #1
 800d932:	b2db      	uxtb	r3, r3
 800d934:	2b00      	cmp	r3, #0
 800d936:	d034      	beq.n	800d9a2 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800d938:	231f      	movs	r3, #31
 800d93a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800d93c:	4b29      	ldr	r3, [pc, #164]	@ (800d9e4 <LmHandlerJoin+0x130>)
 800d93e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d942:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d944:	f107 030c 	add.w	r3, r7, #12
 800d948:	4618      	mov	r0, r3
 800d94a:	f005 fc11 	bl	8013170 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800d94e:	2320      	movs	r3, #32
 800d950:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800d952:	4b24      	ldr	r3, [pc, #144]	@ (800d9e4 <LmHandlerJoin+0x130>)
 800d954:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d958:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d95a:	f107 030c 	add.w	r3, r7, #12
 800d95e:	4618      	mov	r0, r3
 800d960:	f005 fc06 	bl	8013170 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800d964:	2322      	movs	r3, #34	@ 0x22
 800d966:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800d968:	4b1e      	ldr	r3, [pc, #120]	@ (800d9e4 <LmHandlerJoin+0x130>)
 800d96a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d96e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d970:	f107 030c 	add.w	r3, r7, #12
 800d974:	4618      	mov	r0, r3
 800d976:	f005 fbfb 	bl	8013170 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800d97a:	2321      	movs	r3, #33	@ 0x21
 800d97c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800d97e:	4b19      	ldr	r3, [pc, #100]	@ (800d9e4 <LmHandlerJoin+0x130>)
 800d980:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d984:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d986:	f107 030c 	add.w	r3, r7, #12
 800d98a:	4618      	mov	r0, r3
 800d98c:	f005 fbf0 	bl	8013170 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d990:	2329      	movs	r3, #41	@ 0x29
 800d992:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d994:	4b16      	ldr	r3, [pc, #88]	@ (800d9f0 <LmHandlerJoin+0x13c>)
 800d996:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d998:	f107 030c 	add.w	r3, r7, #12
 800d99c:	4618      	mov	r0, r3
 800d99e:	f005 fbe7 	bl	8013170 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800d9a2:	f005 f90f 	bl	8012bc4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d9ae:	f107 030c 	add.w	r3, r7, #12
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f005 fbdc 	bl	8013170 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800d9b8:	4b0c      	ldr	r3, [pc, #48]	@ (800d9ec <LmHandlerJoin+0x138>)
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	f083 0301 	eor.w	r3, r3, #1
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d102      	bne.n	800d9cc <LmHandlerJoin+0x118>
 800d9c6:	79bb      	ldrb	r3, [r7, #6]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d004      	beq.n	800d9d6 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800d9cc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f005 ffcf 	bl	8013974 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d9d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9d8:	4a06      	ldr	r2, [pc, #24]	@ (800d9f4 <LmHandlerJoin+0x140>)
 800d9da:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800d9dc:	bf00      	nop
 800d9de:	3748      	adds	r7, #72	@ 0x48
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	200006f8 	.word	0x200006f8
 800d9e8:	20000094 	.word	0x20000094
 800d9ec:	20000836 	.word	0x20000836
 800d9f0:	01000400 	.word	0x01000400
 800d9f4:	2000073c 	.word	0x2000073c

0800d9f8 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08c      	sub	sp, #48	@ 0x30
 800d9fc:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d9fe:	2301      	movs	r3, #1
 800da00:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800da02:	1d3b      	adds	r3, r7, #4
 800da04:	4618      	mov	r0, r3
 800da06:	f005 f9db 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>
 800da0a:	4603      	mov	r3, r0
 800da0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800da10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da14:	2b00      	cmp	r3, #0
 800da16:	d106      	bne.n	800da26 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800da18:	7a3b      	ldrb	r3, [r7, #8]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d101      	bne.n	800da22 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800da1e:	2300      	movs	r3, #0
 800da20:	e002      	b.n	800da28 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800da22:	2301      	movs	r3, #1
 800da24:	e000      	b.n	800da28 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800da26:	2300      	movs	r3, #0
    }
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3730      	adds	r7, #48	@ 0x30
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b08a      	sub	sp, #40	@ 0x28
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	460b      	mov	r3, r1
 800da3a:	70fb      	strb	r3, [r7, #3]
 800da3c:	4613      	mov	r3, r2
 800da3e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800da40:	23ff      	movs	r3, #255	@ 0xff
 800da42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800da46:	f002 fabf 	bl	800ffc8 <LoRaMacIsBusy>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800da50:	f06f 0301 	mvn.w	r3, #1
 800da54:	e0ab      	b.n	800dbae <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800da56:	f002 fadf 	bl	8010018 <LoRaMacIsStopped>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d002      	beq.n	800da66 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800da60:	f06f 0302 	mvn.w	r3, #2
 800da64:	e0a3      	b.n	800dbae <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800da66:	f7ff ffc7 	bl	800d9f8 <LmHandlerJoinStatus>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d00a      	beq.n	800da86 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800da70:	4b51      	ldr	r3, [pc, #324]	@ (800dbb8 <LmHandlerSend+0x188>)
 800da72:	79db      	ldrb	r3, [r3, #7]
 800da74:	4a50      	ldr	r2, [pc, #320]	@ (800dbb8 <LmHandlerSend+0x188>)
 800da76:	7a12      	ldrb	r2, [r2, #8]
 800da78:	4611      	mov	r1, r2
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7ff ff1a 	bl	800d8b4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800da80:	f06f 0302 	mvn.w	r3, #2
 800da84:	e093      	b.n	800dbae <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800da86:	4a4d      	ldr	r2, [pc, #308]	@ (800dbbc <LmHandlerSend+0x18c>)
 800da88:	78fb      	ldrb	r3, [r7, #3]
 800da8a:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800da8c:	78fb      	ldrb	r3, [r7, #3]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	bf14      	ite	ne
 800da92:	2301      	movne	r3, #1
 800da94:	2300      	moveq	r3, #0
 800da96:	b2db      	uxtb	r3, r3
 800da98:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800da9a:	4b49      	ldr	r3, [pc, #292]	@ (800dbc0 <LmHandlerSend+0x190>)
 800da9c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800daa0:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	785b      	ldrb	r3, [r3, #1]
 800daa6:	f107 020c 	add.w	r2, r7, #12
 800daaa:	4611      	mov	r1, r2
 800daac:	4618      	mov	r0, r3
 800daae:	f005 f8f7 	bl	8012ca0 <LoRaMacQueryTxPossible>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d009      	beq.n	800dacc <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800dab8:	2300      	movs	r3, #0
 800daba:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800dabc:	2300      	movs	r3, #0
 800dabe:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800dac0:	2300      	movs	r3, #0
 800dac2:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800dac4:	23f9      	movs	r3, #249	@ 0xf9
 800dac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800daca:	e008      	b.n	800dade <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	785b      	ldrb	r3, [r3, #1]
 800dad6:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800dade:	4b37      	ldr	r3, [pc, #220]	@ (800dbbc <LmHandlerSend+0x18c>)
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	3310      	adds	r3, #16
 800dae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dae8:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800daec:	4b34      	ldr	r3, [pc, #208]	@ (800dbc0 <LmHandlerSend+0x190>)
 800daee:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800daf2:	4b32      	ldr	r3, [pc, #200]	@ (800dbbc <LmHandlerSend+0x18c>)
 800daf4:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800daf6:	78ba      	ldrb	r2, [r7, #2]
 800daf8:	f107 0310 	add.w	r3, r7, #16
 800dafc:	4611      	mov	r1, r2
 800dafe:	4618      	mov	r0, r3
 800db00:	f006 f8dc 	bl	8013cbc <LoRaMacMcpsRequest>
 800db04:	4603      	mov	r3, r0
 800db06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	4a2d      	ldr	r2, [pc, #180]	@ (800dbc4 <LmHandlerSend+0x194>)
 800db0e:	6013      	str	r3, [r2, #0]

    switch( status )
 800db10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800db14:	2b11      	cmp	r3, #17
 800db16:	d843      	bhi.n	800dba0 <LmHandlerSend+0x170>
 800db18:	a201      	add	r2, pc, #4	@ (adr r2, 800db20 <LmHandlerSend+0xf0>)
 800db1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db1e:	bf00      	nop
 800db20:	0800db69 	.word	0x0800db69
 800db24:	0800db81 	.word	0x0800db81
 800db28:	0800dba1 	.word	0x0800dba1
 800db2c:	0800dba1 	.word	0x0800dba1
 800db30:	0800dba1 	.word	0x0800dba1
 800db34:	0800dba1 	.word	0x0800dba1
 800db38:	0800dba1 	.word	0x0800dba1
 800db3c:	0800db89 	.word	0x0800db89
 800db40:	0800dba1 	.word	0x0800dba1
 800db44:	0800dba1 	.word	0x0800dba1
 800db48:	0800dba1 	.word	0x0800dba1
 800db4c:	0800db99 	.word	0x0800db99
 800db50:	0800dba1 	.word	0x0800dba1
 800db54:	0800dba1 	.word	0x0800dba1
 800db58:	0800db81 	.word	0x0800db81
 800db5c:	0800db81 	.word	0x0800db81
 800db60:	0800db81 	.word	0x0800db81
 800db64:	0800db91 	.word	0x0800db91
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800db68:	4b17      	ldr	r3, [pc, #92]	@ (800dbc8 <LmHandlerSend+0x198>)
 800db6a:	2200      	movs	r2, #0
 800db6c:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800db6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800db72:	f113 0f07 	cmn.w	r3, #7
 800db76:	d017      	beq.n	800dba8 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800db78:	2300      	movs	r3, #0
 800db7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800db7e:	e013      	b.n	800dba8 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800db80:	23fe      	movs	r3, #254	@ 0xfe
 800db82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800db86:	e010      	b.n	800dbaa <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800db88:	23fd      	movs	r3, #253	@ 0xfd
 800db8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800db8e:	e00c      	b.n	800dbaa <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800db90:	23fb      	movs	r3, #251	@ 0xfb
 800db92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800db96:	e008      	b.n	800dbaa <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800db98:	23fa      	movs	r3, #250	@ 0xfa
 800db9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800db9e:	e004      	b.n	800dbaa <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800dba0:	23ff      	movs	r3, #255	@ 0xff
 800dba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800dba6:	e000      	b.n	800dbaa <LmHandlerSend+0x17a>
            break;
 800dba8:	bf00      	nop
    }

    return lmhStatus;
 800dbaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3728      	adds	r7, #40	@ 0x28
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	20000094 	.word	0x20000094
 800dbbc:	200000a0 	.word	0x200000a0
 800dbc0:	200006f8 	.word	0x200006f8
 800dbc4:	2000073c 	.word	0x2000073c
 800dbc8:	20000740 	.word	0x20000740

0800dbcc <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b086      	sub	sp, #24
 800dbd0:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800dbd2:	2309      	movs	r3, #9
 800dbd4:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800dbd6:	463b      	mov	r3, r7
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f005 fecb 	bl	8013974 <LoRaMacMlmeRequest>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	4a06      	ldr	r2, [pc, #24]	@ (800dc00 <LmHandlerDeviceTimeReq+0x34>)
 800dbe6:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800dbe8:	7dfb      	ldrb	r3, [r7, #23]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d101      	bne.n	800dbf2 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	e001      	b.n	800dbf6 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800dbf2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	2000073c 	.word	0x2000073c

0800dc04 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800dc0e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	370c      	adds	r7, #12
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bc80      	pop	{r7}
 800dc1a:	4770      	bx	lr

0800dc1c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08e      	sub	sp, #56	@ 0x38
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	4603      	mov	r3, r0
 800dc24:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800dc26:	2300      	movs	r3, #0
 800dc28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800dc2c:	f002 f9cc 	bl	800ffc8 <LoRaMacIsBusy>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d002      	beq.n	800dc3c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800dc36:	f06f 0301 	mvn.w	r3, #1
 800dc3a:	e071      	b.n	800dd20 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800dc3c:	f7ff fedc 	bl	800d9f8 <LmHandlerJoinStatus>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d002      	beq.n	800dc4c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800dc46:	f06f 0302 	mvn.w	r3, #2
 800dc4a:	e069      	b.n	800dd20 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800dc50:	f107 030c 	add.w	r3, r7, #12
 800dc54:	4618      	mov	r0, r3
 800dc56:	f005 f8b3 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc60:	f04f 33ff 	mov.w	r3, #4294967295
 800dc64:	e05c      	b.n	800dd20 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800dc66:	7c3b      	ldrb	r3, [r7, #16]
 800dc68:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800dc6c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800dc70:	79fb      	ldrb	r3, [r7, #7]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d052      	beq.n	800dd1c <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	2b02      	cmp	r3, #2
 800dc7a:	d028      	beq.n	800dcce <LmHandlerRequestClass+0xb2>
 800dc7c:	2b02      	cmp	r3, #2
 800dc7e:	dc48      	bgt.n	800dd12 <LmHandlerRequestClass+0xf6>
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <LmHandlerRequestClass+0x6e>
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d01e      	beq.n	800dcc6 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800dc88:	e043      	b.n	800dd12 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800dc8a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d041      	beq.n	800dd16 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800dc92:	79fb      	ldrb	r3, [r7, #7]
 800dc94:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800dc96:	f107 030c 	add.w	r3, r7, #12
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f005 fa68 	bl	8013170 <LoRaMacMibSetRequestConfirm>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10b      	bne.n	800dcbe <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800dca6:	4b20      	ldr	r3, [pc, #128]	@ (800dd28 <LmHandlerRequestClass+0x10c>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d032      	beq.n	800dd16 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800dcb0:	4b1d      	ldr	r3, [pc, #116]	@ (800dd28 <LmHandlerRequestClass+0x10c>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcb6:	79fa      	ldrb	r2, [r7, #7]
 800dcb8:	4610      	mov	r0, r2
 800dcba:	4798      	blx	r3
                break;
 800dcbc:	e02b      	b.n	800dd16 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800dcbe:	23ff      	movs	r3, #255	@ 0xff
 800dcc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800dcc4:	e027      	b.n	800dd16 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800dcc6:	23ff      	movs	r3, #255	@ 0xff
 800dcc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800dccc:	e026      	b.n	800dd1c <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800dcce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d003      	beq.n	800dcde <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800dcd6:	23ff      	movs	r3, #255	@ 0xff
 800dcd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800dcdc:	e01d      	b.n	800dd1a <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800dcde:	79fb      	ldrb	r3, [r7, #7]
 800dce0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800dce2:	f107 030c 	add.w	r3, r7, #12
 800dce6:	4618      	mov	r0, r3
 800dce8:	f005 fa42 	bl	8013170 <LoRaMacMibSetRequestConfirm>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10b      	bne.n	800dd0a <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800dcf2:	4b0d      	ldr	r3, [pc, #52]	@ (800dd28 <LmHandlerRequestClass+0x10c>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00e      	beq.n	800dd1a <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800dcfc:	4b0a      	ldr	r3, [pc, #40]	@ (800dd28 <LmHandlerRequestClass+0x10c>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd02:	79fa      	ldrb	r2, [r7, #7]
 800dd04:	4610      	mov	r0, r2
 800dd06:	4798      	blx	r3
                break;
 800dd08:	e007      	b.n	800dd1a <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800dd0a:	23ff      	movs	r3, #255	@ 0xff
 800dd0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800dd10:	e003      	b.n	800dd1a <LmHandlerRequestClass+0xfe>
                break;
 800dd12:	bf00      	nop
 800dd14:	e002      	b.n	800dd1c <LmHandlerRequestClass+0x100>
                break;
 800dd16:	bf00      	nop
 800dd18:	e000      	b.n	800dd1c <LmHandlerRequestClass+0x100>
                break;
 800dd1a:	bf00      	nop
        }
    }
    return errorStatus;
 800dd1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3738      	adds	r7, #56	@ 0x38
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	20000710 	.word	0x20000710

0800dd2c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b08c      	sub	sp, #48	@ 0x30
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d102      	bne.n	800dd40 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd3e:	e010      	b.n	800dd62 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800dd40:	2300      	movs	r3, #0
 800dd42:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800dd44:	f107 0308 	add.w	r3, r7, #8
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f005 f839 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d002      	beq.n	800dd5a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd54:	f04f 33ff 	mov.w	r3, #4294967295
 800dd58:	e003      	b.n	800dd62 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800dd5a:	7b3a      	ldrb	r2, [r7, #12]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800dd60:	2300      	movs	r3, #0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3730      	adds	r7, #48	@ 0x30
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
	...

0800dd6c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b08c      	sub	sp, #48	@ 0x30
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d102      	bne.n	800dd80 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd7a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd7e:	e016      	b.n	800ddae <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800dd80:	2320      	movs	r3, #32
 800dd82:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800dd84:	f107 0308 	add.w	r3, r7, #8
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f005 f819 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d002      	beq.n	800dd9a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd94:	f04f 33ff 	mov.w	r3, #4294967295
 800dd98:	e009      	b.n	800ddae <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800dd9a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f993 2000 	ldrsb.w	r2, [r3]
 800dda8:	4b03      	ldr	r3, [pc, #12]	@ (800ddb8 <LmHandlerGetTxDatarate+0x4c>)
 800ddaa:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3730      	adds	r7, #48	@ 0x30
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	200006f8 	.word	0x200006f8

0800ddbc <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b08c      	sub	sp, #48	@ 0x30
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ddc4:	2323      	movs	r3, #35	@ 0x23
 800ddc6:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ddcc:	f107 0308 	add.w	r3, r7, #8
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f005 f9cd 	bl	8013170 <LoRaMacMibSetRequestConfirm>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d002      	beq.n	800dde2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800dddc:	f04f 33ff 	mov.w	r3, #4294967295
 800dde0:	e000      	b.n	800dde4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800dde2:	2300      	movs	r3, #0
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3730      	adds	r7, #48	@ 0x30
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800ddf4:	4b18      	ldr	r3, [pc, #96]	@ (800de58 <McpsConfirm+0x6c>)
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	785a      	ldrb	r2, [r3, #1]
 800ddfe:	4b16      	ldr	r3, [pc, #88]	@ (800de58 <McpsConfirm+0x6c>)
 800de00:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	789b      	ldrb	r3, [r3, #2]
 800de06:	b25a      	sxtb	r2, r3
 800de08:	4b13      	ldr	r3, [pc, #76]	@ (800de58 <McpsConfirm+0x6c>)
 800de0a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	4a11      	ldr	r2, [pc, #68]	@ (800de58 <McpsConfirm+0x6c>)
 800de12:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800de1a:	4b0f      	ldr	r3, [pc, #60]	@ (800de58 <McpsConfirm+0x6c>)
 800de1c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	b2da      	uxtb	r2, r3
 800de24:	4b0c      	ldr	r3, [pc, #48]	@ (800de58 <McpsConfirm+0x6c>)
 800de26:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	791b      	ldrb	r3, [r3, #4]
 800de2c:	461a      	mov	r2, r3
 800de2e:	4b0a      	ldr	r3, [pc, #40]	@ (800de58 <McpsConfirm+0x6c>)
 800de30:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800de32:	4b0a      	ldr	r3, [pc, #40]	@ (800de5c <McpsConfirm+0x70>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d004      	beq.n	800de46 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800de3c:	4b07      	ldr	r3, [pc, #28]	@ (800de5c <McpsConfirm+0x70>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de42:	4805      	ldr	r0, [pc, #20]	@ (800de58 <McpsConfirm+0x6c>)
 800de44:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800de46:	6879      	ldr	r1, [r7, #4]
 800de48:	2000      	movs	r0, #0
 800de4a:	f000 f9e9 	bl	800e220 <LmHandlerPackagesNotify>
}
 800de4e:	bf00      	nop
 800de50:	3708      	adds	r7, #8
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	200000a0 	.word	0x200000a0
 800de5c:	20000710 	.word	0x20000710

0800de60 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800de6a:	2300      	movs	r3, #0
 800de6c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800de6e:	4b2d      	ldr	r3, [pc, #180]	@ (800df24 <McpsIndication+0xc4>)
 800de70:	2201      	movs	r2, #1
 800de72:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	785a      	ldrb	r2, [r3, #1]
 800de78:	4b2a      	ldr	r3, [pc, #168]	@ (800df24 <McpsIndication+0xc4>)
 800de7a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800de7c:	4b29      	ldr	r3, [pc, #164]	@ (800df24 <McpsIndication+0xc4>)
 800de7e:	785b      	ldrb	r3, [r3, #1]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d14b      	bne.n	800df1c <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	791b      	ldrb	r3, [r3, #4]
 800de88:	b25a      	sxtb	r2, r3
 800de8a:	4b26      	ldr	r3, [pc, #152]	@ (800df24 <McpsIndication+0xc4>)
 800de8c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de94:	b25a      	sxtb	r2, r3
 800de96:	4b23      	ldr	r3, [pc, #140]	@ (800df24 <McpsIndication+0xc4>)
 800de98:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800dea0:	4b20      	ldr	r3, [pc, #128]	@ (800df24 <McpsIndication+0xc4>)
 800dea2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	78da      	ldrb	r2, [r3, #3]
 800dea8:	4b1e      	ldr	r3, [pc, #120]	@ (800df24 <McpsIndication+0xc4>)
 800deaa:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	691b      	ldr	r3, [r3, #16]
 800deb0:	4a1c      	ldr	r2, [pc, #112]	@ (800df24 <McpsIndication+0xc4>)
 800deb2:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	78db      	ldrb	r3, [r3, #3]
 800deb8:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	7b1b      	ldrb	r3, [r3, #12]
 800debe:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800dec6:	4b18      	ldr	r3, [pc, #96]	@ (800df28 <McpsIndication+0xc8>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800decc:	2b00      	cmp	r3, #0
 800dece:	d007      	beq.n	800dee0 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ded0:	4b15      	ldr	r3, [pc, #84]	@ (800df28 <McpsIndication+0xc8>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded6:	f107 0210 	add.w	r2, r7, #16
 800deda:	4912      	ldr	r1, [pc, #72]	@ (800df24 <McpsIndication+0xc4>)
 800dedc:	4610      	mov	r0, r2
 800dede:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800dee0:	4b11      	ldr	r3, [pc, #68]	@ (800df28 <McpsIndication+0xc8>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d007      	beq.n	800defa <McpsIndication+0x9a>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	7e1b      	ldrb	r3, [r3, #24]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d003      	beq.n	800defa <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800def2:	4b0d      	ldr	r3, [pc, #52]	@ (800df28 <McpsIndication+0xc8>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800def8:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800defa:	6879      	ldr	r1, [r7, #4]
 800defc:	2001      	movs	r0, #1
 800defe:	f000 f98f 	bl	800e220 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800df02:	f107 030f 	add.w	r3, r7, #15
 800df06:	4618      	mov	r0, r3
 800df08:	f7ff ff10 	bl	800dd2c <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	795b      	ldrb	r3, [r3, #5]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d004      	beq.n	800df1e <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800df14:	4b05      	ldr	r3, [pc, #20]	@ (800df2c <McpsIndication+0xcc>)
 800df16:	2201      	movs	r2, #1
 800df18:	701a      	strb	r2, [r3, #0]
 800df1a:	e000      	b.n	800df1e <McpsIndication+0xbe>
        return;
 800df1c:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800df1e:	3718      	adds	r7, #24
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}
 800df24:	200000bc 	.word	0x200000bc
 800df28:	20000710 	.word	0x20000710
 800df2c:	20000740 	.word	0x20000740

0800df30 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b08c      	sub	sp, #48	@ 0x30
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800df38:	4b49      	ldr	r3, [pc, #292]	@ (800e060 <MlmeConfirm+0x130>)
 800df3a:	2200      	movs	r2, #0
 800df3c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	785a      	ldrb	r2, [r3, #1]
 800df42:	4b47      	ldr	r3, [pc, #284]	@ (800e060 <MlmeConfirm+0x130>)
 800df44:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800df46:	4b47      	ldr	r3, [pc, #284]	@ (800e064 <MlmeConfirm+0x134>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d004      	beq.n	800df5a <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800df50:	4b44      	ldr	r3, [pc, #272]	@ (800e064 <MlmeConfirm+0x134>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df56:	4842      	ldr	r0, [pc, #264]	@ (800e060 <MlmeConfirm+0x130>)
 800df58:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800df5a:	6879      	ldr	r1, [r7, #4]
 800df5c:	2002      	movs	r0, #2
 800df5e:	f000 f95f 	bl	800e220 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	3b01      	subs	r3, #1
 800df68:	2b0b      	cmp	r3, #11
 800df6a:	d872      	bhi.n	800e052 <MlmeConfirm+0x122>
 800df6c:	a201      	add	r2, pc, #4	@ (adr r2, 800df74 <MlmeConfirm+0x44>)
 800df6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df72:	bf00      	nop
 800df74:	0800dfa5 	.word	0x0800dfa5
 800df78:	0800e053 	.word	0x0800e053
 800df7c:	0800e053 	.word	0x0800e053
 800df80:	0800e053 	.word	0x0800e053
 800df84:	0800e021 	.word	0x0800e021
 800df88:	0800e053 	.word	0x0800e053
 800df8c:	0800e053 	.word	0x0800e053
 800df90:	0800e053 	.word	0x0800e053
 800df94:	0800e053 	.word	0x0800e053
 800df98:	0800e053 	.word	0x0800e053
 800df9c:	0800e039 	.word	0x0800e039
 800dfa0:	0800e053 	.word	0x0800e053
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800dfa4:	2306      	movs	r3, #6
 800dfa6:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800dfa8:	f107 0308 	add.w	r3, r7, #8
 800dfac:	4618      	mov	r0, r3
 800dfae:	f004 ff07 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800dfb2:	4b2d      	ldr	r3, [pc, #180]	@ (800e068 <MlmeConfirm+0x138>)
 800dfb4:	79db      	ldrb	r3, [r3, #7]
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	4611      	mov	r1, r2
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7ff fa6c 	bl	800d498 <SecureElementSetDevAddr>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d102      	bne.n	800dfcc <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	4a28      	ldr	r2, [pc, #160]	@ (800e06c <MlmeConfirm+0x13c>)
 800dfca:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800dfcc:	4828      	ldr	r0, [pc, #160]	@ (800e070 <MlmeConfirm+0x140>)
 800dfce:	f7ff fecd 	bl	800dd6c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800dfd2:	4828      	ldr	r0, [pc, #160]	@ (800e074 <MlmeConfirm+0x144>)
 800dfd4:	f000 fa74 	bl	800e4c0 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800dfd8:	4b21      	ldr	r3, [pc, #132]	@ (800e060 <MlmeConfirm+0x130>)
 800dfda:	785b      	ldrb	r3, [r3, #1]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d108      	bne.n	800dff2 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800dfe0:	4b21      	ldr	r3, [pc, #132]	@ (800e068 <MlmeConfirm+0x138>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800dfe6:	4b24      	ldr	r3, [pc, #144]	@ (800e078 <MlmeConfirm+0x148>)
 800dfe8:	785b      	ldrb	r3, [r3, #1]
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7ff fe16 	bl	800dc1c <LmHandlerRequestClass>
 800dff0:	e002      	b.n	800dff8 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800dff2:	4b1d      	ldr	r3, [pc, #116]	@ (800e068 <MlmeConfirm+0x138>)
 800dff4:	22ff      	movs	r2, #255	@ 0xff
 800dff6:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800dff8:	4b1a      	ldr	r3, [pc, #104]	@ (800e064 <MlmeConfirm+0x134>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d004      	beq.n	800e00c <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e002:	4b18      	ldr	r3, [pc, #96]	@ (800e064 <MlmeConfirm+0x134>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e008:	4817      	ldr	r0, [pc, #92]	@ (800e068 <MlmeConfirm+0x138>)
 800e00a:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e00c:	4b14      	ldr	r3, [pc, #80]	@ (800e060 <MlmeConfirm+0x130>)
 800e00e:	785b      	ldrb	r3, [r3, #1]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d120      	bne.n	800e056 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800e014:	4b14      	ldr	r3, [pc, #80]	@ (800e068 <MlmeConfirm+0x138>)
 800e016:	79db      	ldrb	r3, [r3, #7]
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fe ffe7 	bl	800cfec <SecureElementPrintSessionKeys>
                }
            }
            break;
 800e01e:	e01a      	b.n	800e056 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800e020:	4b16      	ldr	r3, [pc, #88]	@ (800e07c <MlmeConfirm+0x14c>)
 800e022:	2201      	movs	r2, #1
 800e024:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	7a1a      	ldrb	r2, [r3, #8]
 800e02a:	4b14      	ldr	r3, [pc, #80]	@ (800e07c <MlmeConfirm+0x14c>)
 800e02c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	7a5a      	ldrb	r2, [r3, #9]
 800e032:	4b12      	ldr	r3, [pc, #72]	@ (800e07c <MlmeConfirm+0x14c>)
 800e034:	74da      	strb	r2, [r3, #19]
            }
            break;
 800e036:	e00f      	b.n	800e058 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	785b      	ldrb	r3, [r3, #1]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d105      	bne.n	800e04c <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800e040:	4b0d      	ldr	r3, [pc, #52]	@ (800e078 <MlmeConfirm+0x148>)
 800e042:	7c1b      	ldrb	r3, [r3, #16]
 800e044:	4618      	mov	r0, r3
 800e046:	f7ff fddd 	bl	800dc04 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800e04a:	e005      	b.n	800e058 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800e04c:	f7ff fdbe 	bl	800dbcc <LmHandlerDeviceTimeReq>
            break;
 800e050:	e002      	b.n	800e058 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e052:	bf00      	nop
 800e054:	e000      	b.n	800e058 <MlmeConfirm+0x128>
            break;
 800e056:	bf00      	nop
    }
}
 800e058:	bf00      	nop
 800e05a:	3730      	adds	r7, #48	@ 0x30
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	200000a0 	.word	0x200000a0
 800e064:	20000710 	.word	0x20000710
 800e068:	20000094 	.word	0x20000094
 800e06c:	200006bc 	.word	0x200006bc
 800e070:	20000098 	.word	0x20000098
 800e074:	20000099 	.word	0x20000099
 800e078:	200006f8 	.word	0x200006f8
 800e07c:	200000bc 	.word	0x200000bc

0800e080 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800e08a:	4b20      	ldr	r3, [pc, #128]	@ (800e10c <MlmeIndication+0x8c>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	785a      	ldrb	r2, [r3, #1]
 800e094:	4b1d      	ldr	r3, [pc, #116]	@ (800e10c <MlmeIndication+0x8c>)
 800e096:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	789b      	ldrb	r3, [r3, #2]
 800e09c:	b25a      	sxtb	r2, r3
 800e09e:	4b1b      	ldr	r3, [pc, #108]	@ (800e10c <MlmeIndication+0x8c>)
 800e0a0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0a8:	b25a      	sxtb	r2, r3
 800e0aa:	4b18      	ldr	r3, [pc, #96]	@ (800e10c <MlmeIndication+0x8c>)
 800e0ac:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e0b4:	4b15      	ldr	r3, [pc, #84]	@ (800e10c <MlmeIndication+0x8c>)
 800e0b6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	78da      	ldrb	r2, [r3, #3]
 800e0bc:	4b13      	ldr	r3, [pc, #76]	@ (800e10c <MlmeIndication+0x8c>)
 800e0be:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	4a11      	ldr	r2, [pc, #68]	@ (800e10c <MlmeIndication+0x8c>)
 800e0c6:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800e0c8:	4b11      	ldr	r3, [pc, #68]	@ (800e110 <MlmeIndication+0x90>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00d      	beq.n	800e0ee <MlmeIndication+0x6e>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	2b0a      	cmp	r3, #10
 800e0d8:	d009      	beq.n	800e0ee <MlmeIndication+0x6e>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	2b0e      	cmp	r3, #14
 800e0e0:	d005      	beq.n	800e0ee <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800e0e2:	4b0b      	ldr	r3, [pc, #44]	@ (800e110 <MlmeIndication+0x90>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e8:	4908      	ldr	r1, [pc, #32]	@ (800e10c <MlmeIndication+0x8c>)
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800e0ee:	6879      	ldr	r1, [r7, #4]
 800e0f0:	2003      	movs	r0, #3
 800e0f2:	f000 f895 	bl	800e220 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	2b0a      	cmp	r3, #10
 800e0fc:	d001      	beq.n	800e102 <MlmeIndication+0x82>
 800e0fe:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e100:	e000      	b.n	800e104 <MlmeIndication+0x84>
            break;
 800e102:	bf00      	nop
    }
}
 800e104:	bf00      	nop
 800e106:	3708      	adds	r7, #8
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	200000bc 	.word	0x200000bc
 800e110:	20000710 	.word	0x20000710

0800e114 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	4603      	mov	r3, r0
 800e11c:	6039      	str	r1, [r7, #0]
 800e11e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800e120:	2300      	movs	r3, #0
 800e122:	60fb      	str	r3, [r7, #12]
    switch( id )
 800e124:	79fb      	ldrb	r3, [r7, #7]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d104      	bne.n	800e134 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800e12a:	f000 fa8b 	bl	800e644 <LmhpCompliancePackageFactory>
 800e12e:	4603      	mov	r3, r0
 800e130:	60fb      	str	r3, [r7, #12]
                break;
 800e132:	e00d      	b.n	800e150 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800e134:	f107 020c 	add.w	r2, r7, #12
 800e138:	79fb      	ldrb	r3, [r7, #7]
 800e13a:	4611      	mov	r1, r2
 800e13c:	4618      	mov	r0, r3
 800e13e:	f000 ff73 	bl	800f028 <LmhpPackagesRegister>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d002      	beq.n	800e14e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800e148:	f04f 33ff 	mov.w	r3, #4294967295
 800e14c:	e03b      	b.n	800e1c6 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800e14e:	bf00      	nop
            }
    }
    if( package != NULL )
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d035      	beq.n	800e1c2 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800e156:	79fb      	ldrb	r3, [r7, #7]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	491d      	ldr	r1, [pc, #116]	@ (800e1d0 <LmHandlerPackageRegister+0xbc>)
 800e15c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e160:	79fb      	ldrb	r3, [r7, #7]
 800e162:	4a1b      	ldr	r2, [pc, #108]	@ (800e1d0 <LmHandlerPackageRegister+0xbc>)
 800e164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e168:	4a1a      	ldr	r2, [pc, #104]	@ (800e1d4 <LmHandlerPackageRegister+0xc0>)
 800e16a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800e16c:	4b1a      	ldr	r3, [pc, #104]	@ (800e1d8 <LmHandlerPackageRegister+0xc4>)
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	79fb      	ldrb	r3, [r7, #7]
 800e172:	4917      	ldr	r1, [pc, #92]	@ (800e1d0 <LmHandlerPackageRegister+0xbc>)
 800e174:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e178:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800e17a:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800e17c:	4b16      	ldr	r3, [pc, #88]	@ (800e1d8 <LmHandlerPackageRegister+0xc4>)
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	79fb      	ldrb	r3, [r7, #7]
 800e182:	4913      	ldr	r1, [pc, #76]	@ (800e1d0 <LmHandlerPackageRegister+0xbc>)
 800e184:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e188:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e18a:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e18c:	79fb      	ldrb	r3, [r7, #7]
 800e18e:	4a10      	ldr	r2, [pc, #64]	@ (800e1d0 <LmHandlerPackageRegister+0xbc>)
 800e190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e194:	4a11      	ldr	r2, [pc, #68]	@ (800e1dc <LmHandlerPackageRegister+0xc8>)
 800e196:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800e198:	4b0f      	ldr	r3, [pc, #60]	@ (800e1d8 <LmHandlerPackageRegister+0xc4>)
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	79fb      	ldrb	r3, [r7, #7]
 800e19e:	490c      	ldr	r1, [pc, #48]	@ (800e1d0 <LmHandlerPackageRegister+0xbc>)
 800e1a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e1a4:	6992      	ldr	r2, [r2, #24]
 800e1a6:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800e1a8:	79fb      	ldrb	r3, [r7, #7]
 800e1aa:	4a09      	ldr	r2, [pc, #36]	@ (800e1d0 <LmHandlerPackageRegister+0xbc>)
 800e1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	4a0b      	ldr	r2, [pc, #44]	@ (800e1e0 <LmHandlerPackageRegister+0xcc>)
 800e1b4:	6851      	ldr	r1, [r2, #4]
 800e1b6:	4a0a      	ldr	r2, [pc, #40]	@ (800e1e0 <LmHandlerPackageRegister+0xcc>)
 800e1b8:	7852      	ldrb	r2, [r2, #1]
 800e1ba:	6838      	ldr	r0, [r7, #0]
 800e1bc:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e001      	b.n	800e1c6 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e1c2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	200006e4 	.word	0x200006e4
 800e1d4:	0800d8b5 	.word	0x0800d8b5
 800e1d8:	20000710 	.word	0x20000710
 800e1dc:	0800dbcd 	.word	0x0800dbcd
 800e1e0:	200000d0 	.word	0x200000d0

0800e1e4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800e1ee:	79fb      	ldrb	r3, [r7, #7]
 800e1f0:	2b04      	cmp	r3, #4
 800e1f2:	d80e      	bhi.n	800e212 <LmHandlerPackageIsInitialized+0x2e>
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	4a09      	ldr	r2, [pc, #36]	@ (800e21c <LmHandlerPackageIsInitialized+0x38>)
 800e1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d007      	beq.n	800e212 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800e202:	79fb      	ldrb	r3, [r7, #7]
 800e204:	4a05      	ldr	r2, [pc, #20]	@ (800e21c <LmHandlerPackageIsInitialized+0x38>)
 800e206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e20a:	689b      	ldr	r3, [r3, #8]
 800e20c:	4798      	blx	r3
 800e20e:	4603      	mov	r3, r0
 800e210:	e000      	b.n	800e214 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800e212:	2300      	movs	r3, #0
    }
}
 800e214:	4618      	mov	r0, r3
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	200006e4 	.word	0x200006e4

0800e220 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	4603      	mov	r3, r0
 800e228:	6039      	str	r1, [r7, #0]
 800e22a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e22c:	2300      	movs	r3, #0
 800e22e:	73fb      	strb	r3, [r7, #15]
 800e230:	e067      	b.n	800e302 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800e232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e236:	4a37      	ldr	r2, [pc, #220]	@ (800e314 <LmHandlerPackagesNotify+0xf4>)
 800e238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d05a      	beq.n	800e2f6 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800e240:	79fb      	ldrb	r3, [r7, #7]
 800e242:	2b03      	cmp	r3, #3
 800e244:	d84e      	bhi.n	800e2e4 <LmHandlerPackagesNotify+0xc4>
 800e246:	a201      	add	r2, pc, #4	@ (adr r2, 800e24c <LmHandlerPackagesNotify+0x2c>)
 800e248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24c:	0800e25d 	.word	0x0800e25d
 800e250:	0800e27f 	.word	0x0800e27f
 800e254:	0800e2a1 	.word	0x0800e2a1
 800e258:	0800e2c3 	.word	0x0800e2c3
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e25c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e260:	4a2c      	ldr	r2, [pc, #176]	@ (800e314 <LmHandlerPackagesNotify+0xf4>)
 800e262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e266:	699b      	ldr	r3, [r3, #24]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d03d      	beq.n	800e2e8 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800e26c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e270:	4a28      	ldr	r2, [pc, #160]	@ (800e314 <LmHandlerPackagesNotify+0xf4>)
 800e272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e276:	699b      	ldr	r3, [r3, #24]
 800e278:	6838      	ldr	r0, [r7, #0]
 800e27a:	4798      	blx	r3
                        }
                        break;
 800e27c:	e034      	b.n	800e2e8 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800e27e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e282:	4a24      	ldr	r2, [pc, #144]	@ (800e314 <LmHandlerPackagesNotify+0xf4>)
 800e284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e288:	69db      	ldr	r3, [r3, #28]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d02e      	beq.n	800e2ec <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800e28e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e292:	4a20      	ldr	r2, [pc, #128]	@ (800e314 <LmHandlerPackagesNotify+0xf4>)
 800e294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e298:	69db      	ldr	r3, [r3, #28]
 800e29a:	6838      	ldr	r0, [r7, #0]
 800e29c:	4798      	blx	r3
                        }
                        break;
 800e29e:	e025      	b.n	800e2ec <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2a4:	4a1b      	ldr	r2, [pc, #108]	@ (800e314 <LmHandlerPackagesNotify+0xf4>)
 800e2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2aa:	6a1b      	ldr	r3, [r3, #32]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d01f      	beq.n	800e2f0 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800e2b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2b4:	4a17      	ldr	r2, [pc, #92]	@ (800e314 <LmHandlerPackagesNotify+0xf4>)
 800e2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2ba:	6a1b      	ldr	r3, [r3, #32]
 800e2bc:	6838      	ldr	r0, [r7, #0]
 800e2be:	4798      	blx	r3
                        }
                        break;
 800e2c0:	e016      	b.n	800e2f0 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800e2c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2c6:	4a13      	ldr	r2, [pc, #76]	@ (800e314 <LmHandlerPackagesNotify+0xf4>)
 800e2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d010      	beq.n	800e2f4 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800e2d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2d6:	4a0f      	ldr	r2, [pc, #60]	@ (800e314 <LmHandlerPackagesNotify+0xf4>)
 800e2d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2de:	6838      	ldr	r0, [r7, #0]
 800e2e0:	4798      	blx	r3
                        }
                        break;
 800e2e2:	e007      	b.n	800e2f4 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800e2e4:	bf00      	nop
 800e2e6:	e006      	b.n	800e2f6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e2e8:	bf00      	nop
 800e2ea:	e004      	b.n	800e2f6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e2ec:	bf00      	nop
 800e2ee:	e002      	b.n	800e2f6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e2f0:	bf00      	nop
 800e2f2:	e000      	b.n	800e2f6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e2f4:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e2f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	73fb      	strb	r3, [r7, #15]
 800e302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e306:	2b04      	cmp	r3, #4
 800e308:	dd93      	ble.n	800e232 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800e30a:	bf00      	nop
 800e30c:	bf00      	nop
 800e30e:	3710      	adds	r7, #16
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	200006e4 	.word	0x200006e4

0800e318 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e31e:	2300      	movs	r3, #0
 800e320:	71fb      	strb	r3, [r7, #7]
 800e322:	e018      	b.n	800e356 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800e324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e328:	4a0f      	ldr	r2, [pc, #60]	@ (800e368 <LmHandlerPackageIsTxPending+0x50>)
 800e32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00b      	beq.n	800e34a <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800e332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e336:	4a0c      	ldr	r2, [pc, #48]	@ (800e368 <LmHandlerPackageIsTxPending+0x50>)
 800e338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	4798      	blx	r3
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d001      	beq.n	800e34a <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800e346:	2301      	movs	r3, #1
 800e348:	e00a      	b.n	800e360 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e34a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	3301      	adds	r3, #1
 800e352:	b2db      	uxtb	r3, r3
 800e354:	71fb      	strb	r3, [r7, #7]
 800e356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e35a:	2b04      	cmp	r3, #4
 800e35c:	dde2      	ble.n	800e324 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800e35e:	2300      	movs	r3, #0
}
 800e360:	4618      	mov	r0, r3
 800e362:	3708      	adds	r7, #8
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	200006e4 	.word	0x200006e4

0800e36c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e372:	2300      	movs	r3, #0
 800e374:	71fb      	strb	r3, [r7, #7]
 800e376:	e022      	b.n	800e3be <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e37c:	4a14      	ldr	r2, [pc, #80]	@ (800e3d0 <LmHandlerPackagesProcess+0x64>)
 800e37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d015      	beq.n	800e3b2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e38a:	4a11      	ldr	r2, [pc, #68]	@ (800e3d0 <LmHandlerPackagesProcess+0x64>)
 800e38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e390:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e392:	2b00      	cmp	r3, #0
 800e394:	d00d      	beq.n	800e3b2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e396:	79fb      	ldrb	r3, [r7, #7]
 800e398:	4618      	mov	r0, r3
 800e39a:	f7ff ff23 	bl	800e1e4 <LmHandlerPackageIsInitialized>
 800e39e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d006      	beq.n	800e3b2 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e3a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3a8:	4a09      	ldr	r2, [pc, #36]	@ (800e3d0 <LmHandlerPackagesProcess+0x64>)
 800e3aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3ae:	691b      	ldr	r3, [r3, #16]
 800e3b0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e3b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	71fb      	strb	r3, [r7, #7]
 800e3be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3c2:	2b04      	cmp	r3, #4
 800e3c4:	ddd8      	ble.n	800e378 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e3c6:	bf00      	nop
 800e3c8:	bf00      	nop
 800e3ca:	3708      	adds	r7, #8
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	200006e4 	.word	0x200006e4

0800e3d4 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	4603      	mov	r3, r0
 800e3dc:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800e3de:	4a09      	ldr	r2, [pc, #36]	@ (800e404 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800e3e0:	79fb      	ldrb	r3, [r7, #7]
 800e3e2:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800e3e4:	4b08      	ldr	r3, [pc, #32]	@ (800e408 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d005      	beq.n	800e3fa <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800e3ee:	4b06      	ldr	r3, [pc, #24]	@ (800e408 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3f4:	79fa      	ldrb	r2, [r7, #7]
 800e3f6:	4610      	mov	r0, r2
 800e3f8:	4798      	blx	r3
    }
}
 800e3fa:	bf00      	nop
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	200006f8 	.word	0x200006f8
 800e408:	20000710 	.word	0x20000710

0800e40c <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	4603      	mov	r3, r0
 800e414:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800e416:	4a09      	ldr	r2, [pc, #36]	@ (800e43c <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800e418:	79fb      	ldrb	r3, [r7, #7]
 800e41a:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800e41c:	4b08      	ldr	r3, [pc, #32]	@ (800e440 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e422:	2b00      	cmp	r3, #0
 800e424:	d005      	beq.n	800e432 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800e426:	4b06      	ldr	r3, [pc, #24]	@ (800e440 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e42c:	79fa      	ldrb	r2, [r7, #7]
 800e42e:	4610      	mov	r0, r2
 800e430:	4798      	blx	r3
    }
}
 800e432:	bf00      	nop
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	200006f8 	.word	0x200006f8
 800e440:	20000710 	.word	0x20000710

0800e444 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	4603      	mov	r3, r0
 800e44c:	6039      	str	r1, [r7, #0]
 800e44e:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d102      	bne.n	800e45c <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800e456:	f04f 33ff 	mov.w	r3, #4294967295
 800e45a:	e00e      	b.n	800e47a <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800e45c:	79fb      	ldrb	r3, [r7, #7]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d002      	beq.n	800e468 <LmHandlerGetVersion+0x24>
 800e462:	2b01      	cmp	r3, #1
 800e464:	d004      	beq.n	800e470 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800e466:	e007      	b.n	800e478 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	4a06      	ldr	r2, [pc, #24]	@ (800e484 <LmHandlerGetVersion+0x40>)
 800e46c:	601a      	str	r2, [r3, #0]
            break;
 800e46e:	e003      	b.n	800e478 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	4a05      	ldr	r2, [pc, #20]	@ (800e488 <LmHandlerGetVersion+0x44>)
 800e474:	601a      	str	r2, [r3, #0]
            break;
 800e476:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e478:	2300      	movs	r3, #0
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	370c      	adds	r7, #12
 800e47e:	46bd      	mov	sp, r7
 800e480:	bc80      	pop	{r7}
 800e482:	4770      	bx	lr
 800e484:	01000400 	.word	0x01000400
 800e488:	02010003 	.word	0x02010003

0800e48c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800e490:	f005 fd72 	bl	8013f78 <LoRaMacDeInitialization>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d101      	bne.n	800e49e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e49a:	2300      	movs	r3, #0
 800e49c:	e001      	b.n	800e4a2 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e49e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800e4aa:	f004 fbc1 	bl	8012c30 <LoRaMacHalt>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d101      	bne.n	800e4b8 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	e001      	b.n	800e4bc <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e4b8:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b08c      	sub	sp, #48	@ 0x30
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d102      	bne.n	800e4d4 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e4d2:	e016      	b.n	800e502 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800e4d4:	2321      	movs	r3, #33	@ 0x21
 800e4d6:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e4d8:	f107 0308 	add.w	r3, r7, #8
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f004 fc6f 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d002      	beq.n	800e4ee <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ec:	e009      	b.n	800e502 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800e4ee:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f993 2000 	ldrsb.w	r2, [r3]
 800e4fc:	4b03      	ldr	r3, [pc, #12]	@ (800e50c <LmHandlerGetTxPower+0x4c>)
 800e4fe:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	3730      	adds	r7, #48	@ 0x30
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	200006f8 	.word	0x200006f8

0800e510 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b08e      	sub	sp, #56	@ 0x38
 800e514:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e516:	2300      	movs	r3, #0
 800e518:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800e51c:	2300      	movs	r3, #0
 800e51e:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800e520:	f7ff ffc1 	bl	800e4a6 <LmHandlerHalt>
 800e524:	4603      	mov	r3, r0
 800e526:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800e52a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d12f      	bne.n	800e592 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800e532:	f000 f859 	bl	800e5e8 <NvmDataMgmtStoreBegin>
 800e536:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800e538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e53a:	f113 0f02 	cmn.w	r3, #2
 800e53e:	d103      	bne.n	800e548 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800e540:	23f8      	movs	r3, #248	@ 0xf8
 800e542:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e546:	e01c      	b.n	800e582 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800e548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d104      	bne.n	800e558 <LmHandlerNvmDataStore+0x48>
 800e54e:	4b1b      	ldr	r3, [pc, #108]	@ (800e5bc <LmHandlerNvmDataStore+0xac>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	695b      	ldr	r3, [r3, #20]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d103      	bne.n	800e560 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e558:	23ff      	movs	r3, #255	@ 0xff
 800e55a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e55e:	e010      	b.n	800e582 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800e560:	2327      	movs	r3, #39	@ 0x27
 800e562:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e564:	463b      	mov	r3, r7
 800e566:	4618      	mov	r0, r3
 800e568:	f004 fc2a 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800e570:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800e574:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800e576:	4b11      	ldr	r3, [pc, #68]	@ (800e5bc <LmHandlerNvmDataStore+0xac>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	695b      	ldr	r3, [r3, #20]
 800e57c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e57e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e580:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800e582:	f000 f847 	bl	800e614 <NvmDataMgmtStoreEnd>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e58c:	23ff      	movs	r3, #255	@ 0xff
 800e58e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800e592:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e596:	2b00      	cmp	r3, #0
 800e598:	d109      	bne.n	800e5ae <LmHandlerNvmDataStore+0x9e>
 800e59a:	4b08      	ldr	r3, [pc, #32]	@ (800e5bc <LmHandlerNvmDataStore+0xac>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	69db      	ldr	r3, [r3, #28]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d004      	beq.n	800e5ae <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800e5a4:	4b05      	ldr	r3, [pc, #20]	@ (800e5bc <LmHandlerNvmDataStore+0xac>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	69db      	ldr	r3, [r3, #28]
 800e5aa:	2001      	movs	r0, #1
 800e5ac:	4798      	blx	r3
    }

    return lmhStatus;
 800e5ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3738      	adds	r7, #56	@ 0x38
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	20000710 	.word	0x20000710

0800e5c0 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800e5ca:	4b06      	ldr	r3, [pc, #24]	@ (800e5e4 <NvmDataMgmtEvent+0x24>)
 800e5cc:	881a      	ldrh	r2, [r3, #0]
 800e5ce:	88fb      	ldrh	r3, [r7, #6]
 800e5d0:	4313      	orrs	r3, r2
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	4b03      	ldr	r3, [pc, #12]	@ (800e5e4 <NvmDataMgmtEvent+0x24>)
 800e5d6:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e5d8:	bf00      	nop
 800e5da:	370c      	adds	r7, #12
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bc80      	pop	{r7}
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	20000838 	.word	0x20000838

0800e5e8 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800e5ec:	4b08      	ldr	r3, [pc, #32]	@ (800e610 <NvmDataMgmtStoreBegin+0x28>)
 800e5ee:	881b      	ldrh	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d102      	bne.n	800e5fa <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800e5f4:	f06f 0301 	mvn.w	r3, #1
 800e5f8:	e008      	b.n	800e60c <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800e5fa:	f004 faf1 	bl	8012be0 <LoRaMacStop>
 800e5fe:	4603      	mov	r3, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800e604:	f06f 0302 	mvn.w	r3, #2
 800e608:	e000      	b.n	800e60c <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800e60a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	20000838 	.word	0x20000838

0800e614 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800e614:	b580      	push	{r7, lr}
 800e616:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e618:	4b03      	ldr	r3, [pc, #12]	@ (800e628 <NvmDataMgmtStoreEnd+0x14>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800e61e:	f004 fad1 	bl	8012bc4 <LoRaMacStart>
    return NVM_DATA_OK;
 800e622:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e624:	4618      	mov	r0, r3
 800e626:	bd80      	pop	{r7, pc}
 800e628:	20000838 	.word	0x20000838

0800e62c <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800e630:	2220      	movs	r2, #32
 800e632:	2100      	movs	r1, #0
 800e634:	4802      	ldr	r0, [pc, #8]	@ (800e640 <ClassBStatusReset+0x14>)
 800e636:	f009 ffad 	bl	8018594 <memset1>
}
 800e63a:	bf00      	nop
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	20000850 	.word	0x20000850

0800e644 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800e644:	b480      	push	{r7}
 800e646:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800e648:	4b02      	ldr	r3, [pc, #8]	@ (800e654 <LmhpCompliancePackageFactory+0x10>)
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bc80      	pop	{r7}
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	200000d8 	.word	0x200000d8

0800e658 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af02      	add	r7, sp, #8
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	4613      	mov	r3, r2
 800e664:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d018      	beq.n	800e69e <LmhpComplianceInit+0x46>
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d015      	beq.n	800e69e <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800e672:	4a19      	ldr	r2, [pc, #100]	@ (800e6d8 <LmhpComplianceInit+0x80>)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800e678:	4a18      	ldr	r2, [pc, #96]	@ (800e6dc <LmhpComplianceInit+0x84>)
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e67e:	4a17      	ldr	r2, [pc, #92]	@ (800e6dc <LmhpComplianceInit+0x84>)
 800e680:	79fb      	ldrb	r3, [r7, #7]
 800e682:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800e684:	4b15      	ldr	r3, [pc, #84]	@ (800e6dc <LmhpComplianceInit+0x84>)
 800e686:	2201      	movs	r2, #1
 800e688:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800e68a:	2300      	movs	r3, #0
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	4b14      	ldr	r3, [pc, #80]	@ (800e6e0 <LmhpComplianceInit+0x88>)
 800e690:	2200      	movs	r2, #0
 800e692:	f04f 31ff 	mov.w	r1, #4294967295
 800e696:	4813      	ldr	r0, [pc, #76]	@ (800e6e4 <LmhpComplianceInit+0x8c>)
 800e698:	f00d fff0 	bl	801c67c <UTIL_TIMER_Create>
 800e69c:	e005      	b.n	800e6aa <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800e69e:	4b0e      	ldr	r3, [pc, #56]	@ (800e6d8 <LmhpComplianceInit+0x80>)
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800e6a4:	4b0d      	ldr	r3, [pc, #52]	@ (800e6dc <LmhpComplianceInit+0x84>)
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800e6aa:	4b0c      	ldr	r3, [pc, #48]	@ (800e6dc <LmhpComplianceInit+0x84>)
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800e6b0:	f7ff ffbc 	bl	800e62c <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800e6b4:	4b09      	ldr	r3, [pc, #36]	@ (800e6dc <LmhpComplianceInit+0x84>)
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800e6ba:	4b08      	ldr	r3, [pc, #32]	@ (800e6dc <LmhpComplianceInit+0x84>)
 800e6bc:	2200      	movs	r2, #0
 800e6be:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800e6c0:	4b06      	ldr	r3, [pc, #24]	@ (800e6dc <LmhpComplianceInit+0x84>)
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800e6c8:	4b04      	ldr	r3, [pc, #16]	@ (800e6dc <LmhpComplianceInit+0x84>)
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800e6d0:	bf00      	nop
 800e6d2:	3710      	adds	r7, #16
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	20000874 	.word	0x20000874
 800e6dc:	2000083c 	.word	0x2000083c
 800e6e0:	0800efe1 	.word	0x0800efe1
 800e6e4:	20000878 	.word	0x20000878

0800e6e8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800e6ec:	4b02      	ldr	r3, [pc, #8]	@ (800e6f8 <LmhpComplianceIsInitialized+0x10>)
 800e6ee:	781b      	ldrb	r3, [r3, #0]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bc80      	pop	{r7}
 800e6f6:	4770      	bx	lr
 800e6f8:	2000083c 	.word	0x2000083c

0800e6fc <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800e700:	4b02      	ldr	r3, [pc, #8]	@ (800e70c <LmhpComplianceIsTxPending+0x10>)
 800e702:	785b      	ldrb	r3, [r3, #1]
}
 800e704:	4618      	mov	r0, r3
 800e706:	46bd      	mov	sp, r7
 800e708:	bc80      	pop	{r7}
 800e70a:	4770      	bx	lr
 800e70c:	2000083c 	.word	0x2000083c

0800e710 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800e710:	b590      	push	{r4, r7, lr}
 800e712:	b085      	sub	sp, #20
 800e714:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800e716:	4b33      	ldr	r3, [pc, #204]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e718:	785b      	ldrb	r3, [r3, #1]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d03e      	beq.n	800e79c <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800e71e:	f00e f96b 	bl	801c9f8 <UTIL_TIMER_GetCurrentTime>
 800e722:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800e724:	4b2f      	ldr	r3, [pc, #188]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e726:	685c      	ldr	r4, [r3, #4]
 800e728:	f7ff f8ba 	bl	800d8a0 <LmHandlerGetDutyCycleWaitTime>
 800e72c:	4603      	mov	r3, r0
 800e72e:	4423      	add	r3, r4
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	429a      	cmp	r2, r3
 800e734:	d941      	bls.n	800e7ba <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800e736:	4b2b      	ldr	r3, [pc, #172]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e738:	7a9b      	ldrb	r3, [r3, #10]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d03d      	beq.n	800e7ba <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800e73e:	23e0      	movs	r3, #224	@ 0xe0
 800e740:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800e742:	4b28      	ldr	r3, [pc, #160]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e744:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800e746:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800e748:	4b26      	ldr	r3, [pc, #152]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e74a:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800e74c:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e74e:	23ff      	movs	r3, #255	@ 0xff
 800e750:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800e752:	4b24      	ldr	r3, [pc, #144]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e754:	7a19      	ldrb	r1, [r3, #8]
 800e756:	463b      	mov	r3, r7
 800e758:	2201      	movs	r2, #1
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7ff f968 	bl	800da30 <LmHandlerSend>
 800e760:	4603      	mov	r3, r0
 800e762:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800e764:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d004      	beq.n	800e776 <LmhpComplianceProcess+0x66>
 800e76c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e770:	f113 0f07 	cmn.w	r3, #7
 800e774:	d106      	bne.n	800e784 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800e776:	4b1b      	ldr	r3, [pc, #108]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e778:	2200      	movs	r2, #0
 800e77a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800e77c:	4b19      	ldr	r3, [pc, #100]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e77e:	2200      	movs	r2, #0
 800e780:	729a      	strb	r2, [r3, #10]
 800e782:	e007      	b.n	800e794 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800e784:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800e788:	4817      	ldr	r0, [pc, #92]	@ (800e7e8 <LmhpComplianceProcess+0xd8>)
 800e78a:	f00e f88b 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800e78e:	4816      	ldr	r0, [pc, #88]	@ (800e7e8 <LmhpComplianceProcess+0xd8>)
 800e790:	f00d ffaa 	bl	801c6e8 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800e794:	4a13      	ldr	r2, [pc, #76]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	6053      	str	r3, [r2, #4]
 800e79a:	e00e      	b.n	800e7ba <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800e79c:	4b11      	ldr	r3, [pc, #68]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e79e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d009      	beq.n	800e7ba <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800e7a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800e7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e7b0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7ff fa31 	bl	800dc1c <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800e7ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e7bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d00a      	beq.n	800e7da <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800e7c4:	4b07      	ldr	r3, [pc, #28]	@ (800e7e4 <LmhpComplianceProcess+0xd4>)
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800e7cc:	4b07      	ldr	r3, [pc, #28]	@ (800e7ec <LmhpComplianceProcess+0xdc>)
 800e7ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d002      	beq.n	800e7da <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800e7d4:	4b05      	ldr	r3, [pc, #20]	@ (800e7ec <LmhpComplianceProcess+0xdc>)
 800e7d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7d8:	4798      	blx	r3
        }
    }
}
 800e7da:	bf00      	nop
 800e7dc:	3714      	adds	r7, #20
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd90      	pop	{r4, r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	2000083c 	.word	0x2000083c
 800e7e8:	20000878 	.word	0x20000878
 800e7ec:	200000d8 	.word	0x200000d8

0800e7f0 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800e7f0:	b5b0      	push	{r4, r5, r7, lr}
 800e7f2:	b0a4      	sub	sp, #144	@ 0x90
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800e7fe:	4bd0      	ldr	r3, [pc, #832]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	f083 0301 	eor.w	r3, r3, #1
 800e806:	b2db      	uxtb	r3, r3
 800e808:	2b00      	cmp	r3, #0
 800e80a:	f040 83bf 	bne.w	800ef8c <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	78db      	ldrb	r3, [r3, #3]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d103      	bne.n	800e81e <LmhpComplianceOnMcpsIndication+0x2e>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	7b9b      	ldrb	r3, [r3, #14]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d005      	beq.n	800e82a <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800e81e:	4bc8      	ldr	r3, [pc, #800]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800e820:	8a1b      	ldrh	r3, [r3, #16]
 800e822:	3301      	adds	r3, #1
 800e824:	b29a      	uxth	r2, r3
 800e826:	4bc6      	ldr	r3, [pc, #792]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800e828:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	7b5b      	ldrb	r3, [r3, #13]
 800e82e:	f083 0301 	eor.w	r3, r3, #1
 800e832:	b2db      	uxtb	r3, r3
 800e834:	2b00      	cmp	r3, #0
 800e836:	f040 83ab 	bne.w	800ef90 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	78db      	ldrb	r3, [r3, #3]
 800e83e:	2be0      	cmp	r3, #224	@ 0xe0
 800e840:	f040 83a8 	bne.w	800ef94 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800e844:	4bbe      	ldr	r3, [pc, #760]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800e846:	2200      	movs	r2, #0
 800e848:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	689a      	ldr	r2, [r3, #8]
 800e84e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e852:	1c59      	adds	r1, r3, #1
 800e854:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e858:	4413      	add	r3, r2
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	2b7f      	cmp	r3, #127	@ 0x7f
 800e85e:	f200 8372 	bhi.w	800ef46 <LmhpComplianceOnMcpsIndication+0x756>
 800e862:	a201      	add	r2, pc, #4	@ (adr r2, 800e868 <LmhpComplianceOnMcpsIndication+0x78>)
 800e864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e868:	0800ea69 	.word	0x0800ea69
 800e86c:	0800eaad 	.word	0x0800eaad
 800e870:	0800eab7 	.word	0x0800eab7
 800e874:	0800eacd 	.word	0x0800eacd
 800e878:	0800eaef 	.word	0x0800eaef
 800e87c:	0800eb1d 	.word	0x0800eb1d
 800e880:	0800eb49 	.word	0x0800eb49
 800e884:	0800eba7 	.word	0x0800eba7
 800e888:	0800ebff 	.word	0x0800ebff
 800e88c:	0800ec6b 	.word	0x0800ec6b
 800e890:	0800ecbb 	.word	0x0800ecbb
 800e894:	0800ef47 	.word	0x0800ef47
 800e898:	0800ef47 	.word	0x0800ef47
 800e89c:	0800ef47 	.word	0x0800ef47
 800e8a0:	0800ef47 	.word	0x0800ef47
 800e8a4:	0800ef47 	.word	0x0800ef47
 800e8a8:	0800ef47 	.word	0x0800ef47
 800e8ac:	0800ef47 	.word	0x0800ef47
 800e8b0:	0800ef47 	.word	0x0800ef47
 800e8b4:	0800ef47 	.word	0x0800ef47
 800e8b8:	0800ef47 	.word	0x0800ef47
 800e8bc:	0800ef47 	.word	0x0800ef47
 800e8c0:	0800ef47 	.word	0x0800ef47
 800e8c4:	0800ef47 	.word	0x0800ef47
 800e8c8:	0800ef47 	.word	0x0800ef47
 800e8cc:	0800ef47 	.word	0x0800ef47
 800e8d0:	0800ef47 	.word	0x0800ef47
 800e8d4:	0800ef47 	.word	0x0800ef47
 800e8d8:	0800ef47 	.word	0x0800ef47
 800e8dc:	0800ef47 	.word	0x0800ef47
 800e8e0:	0800ef47 	.word	0x0800ef47
 800e8e4:	0800ef47 	.word	0x0800ef47
 800e8e8:	0800ecc3 	.word	0x0800ecc3
 800e8ec:	0800ecd5 	.word	0x0800ecd5
 800e8f0:	0800ecdd 	.word	0x0800ecdd
 800e8f4:	0800ef47 	.word	0x0800ef47
 800e8f8:	0800ef47 	.word	0x0800ef47
 800e8fc:	0800ef47 	.word	0x0800ef47
 800e900:	0800ef47 	.word	0x0800ef47
 800e904:	0800ef47 	.word	0x0800ef47
 800e908:	0800ef47 	.word	0x0800ef47
 800e90c:	0800ef47 	.word	0x0800ef47
 800e910:	0800ef47 	.word	0x0800ef47
 800e914:	0800ef47 	.word	0x0800ef47
 800e918:	0800ef47 	.word	0x0800ef47
 800e91c:	0800ef47 	.word	0x0800ef47
 800e920:	0800ef47 	.word	0x0800ef47
 800e924:	0800ef47 	.word	0x0800ef47
 800e928:	0800ef47 	.word	0x0800ef47
 800e92c:	0800ef47 	.word	0x0800ef47
 800e930:	0800ef47 	.word	0x0800ef47
 800e934:	0800ef47 	.word	0x0800ef47
 800e938:	0800ef47 	.word	0x0800ef47
 800e93c:	0800ef47 	.word	0x0800ef47
 800e940:	0800ef47 	.word	0x0800ef47
 800e944:	0800ef47 	.word	0x0800ef47
 800e948:	0800ef47 	.word	0x0800ef47
 800e94c:	0800ef47 	.word	0x0800ef47
 800e950:	0800ef47 	.word	0x0800ef47
 800e954:	0800ef47 	.word	0x0800ef47
 800e958:	0800ef47 	.word	0x0800ef47
 800e95c:	0800ef47 	.word	0x0800ef47
 800e960:	0800ef47 	.word	0x0800ef47
 800e964:	0800ef47 	.word	0x0800ef47
 800e968:	0800ef47 	.word	0x0800ef47
 800e96c:	0800ef47 	.word	0x0800ef47
 800e970:	0800ef47 	.word	0x0800ef47
 800e974:	0800ef47 	.word	0x0800ef47
 800e978:	0800ef47 	.word	0x0800ef47
 800e97c:	0800ef47 	.word	0x0800ef47
 800e980:	0800ef47 	.word	0x0800ef47
 800e984:	0800ef47 	.word	0x0800ef47
 800e988:	0800ef47 	.word	0x0800ef47
 800e98c:	0800ef47 	.word	0x0800ef47
 800e990:	0800ef47 	.word	0x0800ef47
 800e994:	0800ef47 	.word	0x0800ef47
 800e998:	0800ef47 	.word	0x0800ef47
 800e99c:	0800ef47 	.word	0x0800ef47
 800e9a0:	0800ef47 	.word	0x0800ef47
 800e9a4:	0800ef47 	.word	0x0800ef47
 800e9a8:	0800ef47 	.word	0x0800ef47
 800e9ac:	0800ef47 	.word	0x0800ef47
 800e9b0:	0800ef47 	.word	0x0800ef47
 800e9b4:	0800ef47 	.word	0x0800ef47
 800e9b8:	0800ef47 	.word	0x0800ef47
 800e9bc:	0800ef47 	.word	0x0800ef47
 800e9c0:	0800ef47 	.word	0x0800ef47
 800e9c4:	0800ef47 	.word	0x0800ef47
 800e9c8:	0800ef47 	.word	0x0800ef47
 800e9cc:	0800ef47 	.word	0x0800ef47
 800e9d0:	0800ef47 	.word	0x0800ef47
 800e9d4:	0800ef47 	.word	0x0800ef47
 800e9d8:	0800ef47 	.word	0x0800ef47
 800e9dc:	0800ef47 	.word	0x0800ef47
 800e9e0:	0800ef47 	.word	0x0800ef47
 800e9e4:	0800ef47 	.word	0x0800ef47
 800e9e8:	0800ef47 	.word	0x0800ef47
 800e9ec:	0800ef47 	.word	0x0800ef47
 800e9f0:	0800ef47 	.word	0x0800ef47
 800e9f4:	0800ef47 	.word	0x0800ef47
 800e9f8:	0800ef47 	.word	0x0800ef47
 800e9fc:	0800ef47 	.word	0x0800ef47
 800ea00:	0800ef47 	.word	0x0800ef47
 800ea04:	0800ef47 	.word	0x0800ef47
 800ea08:	0800ef47 	.word	0x0800ef47
 800ea0c:	0800ef47 	.word	0x0800ef47
 800ea10:	0800ef47 	.word	0x0800ef47
 800ea14:	0800ef47 	.word	0x0800ef47
 800ea18:	0800ef47 	.word	0x0800ef47
 800ea1c:	0800ef47 	.word	0x0800ef47
 800ea20:	0800ef47 	.word	0x0800ef47
 800ea24:	0800ef47 	.word	0x0800ef47
 800ea28:	0800ef47 	.word	0x0800ef47
 800ea2c:	0800ef47 	.word	0x0800ef47
 800ea30:	0800ef47 	.word	0x0800ef47
 800ea34:	0800ef47 	.word	0x0800ef47
 800ea38:	0800ef47 	.word	0x0800ef47
 800ea3c:	0800ef47 	.word	0x0800ef47
 800ea40:	0800ef47 	.word	0x0800ef47
 800ea44:	0800ef47 	.word	0x0800ef47
 800ea48:	0800ef47 	.word	0x0800ef47
 800ea4c:	0800ef47 	.word	0x0800ef47
 800ea50:	0800ef47 	.word	0x0800ef47
 800ea54:	0800ef47 	.word	0x0800ef47
 800ea58:	0800ef47 	.word	0x0800ef47
 800ea5c:	0800ed0f 	.word	0x0800ed0f
 800ea60:	0800edc1 	.word	0x0800edc1
 800ea64:	0800edf1 	.word	0x0800edf1
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800ea68:	4b35      	ldr	r3, [pc, #212]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800ea6a:	68da      	ldr	r2, [r3, #12]
 800ea6c:	4b34      	ldr	r3, [pc, #208]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800ea6e:	7a9b      	ldrb	r3, [r3, #10]
 800ea70:	1c59      	adds	r1, r3, #1
 800ea72:	b2c8      	uxtb	r0, r1
 800ea74:	4932      	ldr	r1, [pc, #200]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800ea76:	7288      	strb	r0, [r1, #10]
 800ea78:	4413      	add	r3, r2
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800ea7e:	4b30      	ldr	r3, [pc, #192]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800ea80:	68da      	ldr	r2, [r3, #12]
 800ea82:	4b2f      	ldr	r3, [pc, #188]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800ea84:	7a9b      	ldrb	r3, [r3, #10]
 800ea86:	1c59      	adds	r1, r3, #1
 800ea88:	b2c8      	uxtb	r0, r1
 800ea8a:	492d      	ldr	r1, [pc, #180]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800ea8c:	7288      	strb	r0, [r1, #10]
 800ea8e:	4413      	add	r3, r2
 800ea90:	2206      	movs	r2, #6
 800ea92:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800ea94:	4b2a      	ldr	r3, [pc, #168]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800ea96:	68da      	ldr	r2, [r3, #12]
 800ea98:	4b29      	ldr	r3, [pc, #164]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800ea9a:	7a9b      	ldrb	r3, [r3, #10]
 800ea9c:	1c59      	adds	r1, r3, #1
 800ea9e:	b2c8      	uxtb	r0, r1
 800eaa0:	4927      	ldr	r1, [pc, #156]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800eaa2:	7288      	strb	r0, [r1, #10]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	701a      	strb	r2, [r3, #0]
                break;
 800eaaa:	e257      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800eaac:	4b24      	ldr	r3, [pc, #144]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800eaae:	2201      	movs	r2, #1
 800eab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800eab4:	e252      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800eab6:	4b23      	ldr	r3, [pc, #140]	@ (800eb44 <LmhpComplianceOnMcpsIndication+0x354>)
 800eab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	f000 8245 	beq.w	800ef4a <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800eac0:	4b20      	ldr	r3, [pc, #128]	@ (800eb44 <LmhpComplianceOnMcpsIndication+0x354>)
 800eac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eac4:	2101      	movs	r1, #1
 800eac6:	2002      	movs	r0, #2
 800eac8:	4798      	blx	r3
                }
                break;
 800eaca:	e23e      	b.n	800ef4a <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	689a      	ldr	r2, [r3, #8]
 800ead0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ead4:	1c59      	adds	r1, r3, #1
 800ead6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800eada:	4413      	add	r3, r2
 800eadc:	781a      	ldrb	r2, [r3, #0]
 800eade:	4b18      	ldr	r3, [pc, #96]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800eae0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800eae4:	4b16      	ldr	r3, [pc, #88]	@ (800eb40 <LmhpComplianceOnMcpsIndication+0x350>)
 800eae6:	2201      	movs	r2, #1
 800eae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 800eaec:	e236      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800eaee:	2304      	movs	r3, #4
 800eaf0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	689a      	ldr	r2, [r3, #8]
 800eaf6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eafa:	1c59      	adds	r1, r3, #1
 800eafc:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800eb00:	4413      	add	r3, r2
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	bf14      	ite	ne
 800eb08:	2301      	movne	r3, #1
 800eb0a:	2300      	moveq	r3, #0
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800eb10:	f107 0308 	add.w	r3, r7, #8
 800eb14:	4618      	mov	r0, r3
 800eb16:	f004 fb2b 	bl	8013170 <LoRaMacMibSetRequestConfirm>
                break;
 800eb1a:	e21f      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	689a      	ldr	r2, [r3, #8]
 800eb20:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eb24:	1c59      	adds	r1, r3, #1
 800eb26:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800eb2a:	4413      	add	r3, r2
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	bf14      	ite	ne
 800eb32:	2301      	movne	r3, #1
 800eb34:	2300      	moveq	r3, #0
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f005 f9f7 	bl	8013f2c <LoRaMacTestSetDutyCycleOn>
                break;
 800eb3e:	e20d      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
 800eb40:	2000083c 	.word	0x2000083c
 800eb44:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800eb48:	4ba5      	ldr	r3, [pc, #660]	@ (800ede0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb4a:	f107 0408 	add.w	r4, r7, #8
 800eb4e:	461d      	mov	r5, r3
 800eb50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eb5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	689a      	ldr	r2, [r3, #8]
 800eb64:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eb68:	1c59      	adds	r1, r3, #1
 800eb6a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800eb6e:	4413      	add	r3, r2
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800eb76:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800eb7a:	2b0a      	cmp	r3, #10
 800eb7c:	f200 81e7 	bhi.w	800ef4e <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800eb80:	4b98      	ldr	r3, [pc, #608]	@ (800ede4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	f000 81e1 	beq.w	800ef4e <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800eb8c:	4b95      	ldr	r3, [pc, #596]	@ (800ede4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	685a      	ldr	r2, [r3, #4]
 800eb92:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	3390      	adds	r3, #144	@ 0x90
 800eb9a:	443b      	add	r3, r7
 800eb9c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800eba0:	4618      	mov	r0, r3
 800eba2:	4790      	blx	r2
                    }
                }
                break;
 800eba4:	e1d3      	b.n	800ef4e <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	689a      	ldr	r2, [r3, #8]
 800ebaa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ebae:	1c59      	adds	r1, r3, #1
 800ebb0:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ebb4:	4413      	add	r3, r2
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800ebbc:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	d004      	beq.n	800ebce <LmhpComplianceOnMcpsIndication+0x3de>
 800ebc4:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800ebc8:	2b02      	cmp	r3, #2
 800ebca:	f040 81c2 	bne.w	800ef52 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800ebce:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	bf14      	ite	ne
 800ebd6:	2301      	movne	r3, #1
 800ebd8:	2300      	moveq	r3, #0
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	461a      	mov	r2, r3
 800ebde:	4b82      	ldr	r3, [pc, #520]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ebe0:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800ebe2:	4b80      	ldr	r3, [pc, #512]	@ (800ede4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	689b      	ldr	r3, [r3, #8]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	f000 81b2 	beq.w	800ef52 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800ebee:	4b7d      	ldr	r3, [pc, #500]	@ (800ede4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	689b      	ldr	r3, [r3, #8]
 800ebf4:	4a7c      	ldr	r2, [pc, #496]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ebf6:	7a12      	ldrb	r2, [r2, #8]
 800ebf8:	4610      	mov	r0, r2
 800ebfa:	4798      	blx	r3
                    }
                }
                break;
 800ebfc:	e1a9      	b.n	800ef52 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800ebfe:	4b7a      	ldr	r3, [pc, #488]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec00:	68da      	ldr	r2, [r3, #12]
 800ec02:	4b79      	ldr	r3, [pc, #484]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec04:	7a9b      	ldrb	r3, [r3, #10]
 800ec06:	1c59      	adds	r1, r3, #1
 800ec08:	b2c8      	uxtb	r0, r1
 800ec0a:	4977      	ldr	r1, [pc, #476]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec0c:	7288      	strb	r0, [r1, #10]
 800ec0e:	4413      	add	r3, r2
 800ec10:	2208      	movs	r2, #8
 800ec12:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800ec14:	2301      	movs	r3, #1
 800ec16:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800ec1a:	e019      	b.n	800ec50 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	689a      	ldr	r2, [r3, #8]
 800ec20:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ec24:	1c59      	adds	r1, r3, #1
 800ec26:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ec2a:	4413      	add	r3, r2
 800ec2c:	781a      	ldrb	r2, [r3, #0]
 800ec2e:	4b6e      	ldr	r3, [pc, #440]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec30:	68d9      	ldr	r1, [r3, #12]
 800ec32:	4b6d      	ldr	r3, [pc, #436]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec34:	7a9b      	ldrb	r3, [r3, #10]
 800ec36:	1c58      	adds	r0, r3, #1
 800ec38:	b2c4      	uxtb	r4, r0
 800ec3a:	486b      	ldr	r0, [pc, #428]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec3c:	7284      	strb	r4, [r0, #10]
 800ec3e:	440b      	add	r3, r1
 800ec40:	3201      	adds	r2, #1
 800ec42:	b2d2      	uxtb	r2, r2
 800ec44:	701a      	strb	r2, [r3, #0]
                     i++ )
 800ec46:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800ec50:	4b65      	ldr	r3, [pc, #404]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec52:	7a5a      	ldrb	r2, [r3, #9]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	7b1b      	ldrb	r3, [r3, #12]
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	bf28      	it	cs
 800ec5c:	4613      	movcs	r3, r2
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d3d9      	bcc.n	800ec1c <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800ec68:	e178      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800ec6a:	4b5f      	ldr	r3, [pc, #380]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec6c:	68da      	ldr	r2, [r3, #12]
 800ec6e:	4b5e      	ldr	r3, [pc, #376]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec70:	7a9b      	ldrb	r3, [r3, #10]
 800ec72:	1c59      	adds	r1, r3, #1
 800ec74:	b2c8      	uxtb	r0, r1
 800ec76:	495c      	ldr	r1, [pc, #368]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec78:	7288      	strb	r0, [r1, #10]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	2209      	movs	r2, #9
 800ec7e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800ec80:	4b59      	ldr	r3, [pc, #356]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec82:	8a18      	ldrh	r0, [r3, #16]
 800ec84:	4b58      	ldr	r3, [pc, #352]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec86:	68da      	ldr	r2, [r3, #12]
 800ec88:	4b57      	ldr	r3, [pc, #348]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec8a:	7a9b      	ldrb	r3, [r3, #10]
 800ec8c:	1c59      	adds	r1, r3, #1
 800ec8e:	b2cc      	uxtb	r4, r1
 800ec90:	4955      	ldr	r1, [pc, #340]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec92:	728c      	strb	r4, [r1, #10]
 800ec94:	4413      	add	r3, r2
 800ec96:	b2c2      	uxtb	r2, r0
 800ec98:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800ec9a:	4b53      	ldr	r3, [pc, #332]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ec9c:	8a1b      	ldrh	r3, [r3, #16]
 800ec9e:	0a1b      	lsrs	r3, r3, #8
 800eca0:	b298      	uxth	r0, r3
 800eca2:	4b51      	ldr	r3, [pc, #324]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eca4:	68da      	ldr	r2, [r3, #12]
 800eca6:	4b50      	ldr	r3, [pc, #320]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800eca8:	7a9b      	ldrb	r3, [r3, #10]
 800ecaa:	1c59      	adds	r1, r3, #1
 800ecac:	b2cc      	uxtb	r4, r1
 800ecae:	494e      	ldr	r1, [pc, #312]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ecb0:	728c      	strb	r4, [r1, #10]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	b2c2      	uxtb	r2, r0
 800ecb6:	701a      	strb	r2, [r3, #0]
                break;
 800ecb8:	e150      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800ecba:	4b4b      	ldr	r3, [pc, #300]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	821a      	strh	r2, [r3, #16]
                break;
 800ecc0:	e14c      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800ecc2:	2305      	movs	r3, #5
 800ecc4:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800ecc8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800eccc:	4618      	mov	r0, r3
 800ecce:	f004 fe51 	bl	8013974 <LoRaMacMlmeRequest>
                break;
 800ecd2:	e143      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800ecd4:	4b45      	ldr	r3, [pc, #276]	@ (800edec <LmhpComplianceOnMcpsIndication+0x5fc>)
 800ecd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecd8:	4798      	blx	r3
                break;
 800ecda:	e13f      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	689a      	ldr	r2, [r3, #8]
 800ece0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ece4:	1c59      	adds	r1, r3, #1
 800ece6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ecea:	4413      	add	r3, r2
 800ecec:	781a      	ldrb	r2, [r3, #0]
 800ecee:	4b3e      	ldr	r3, [pc, #248]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ecf0:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800ecf2:	4b3c      	ldr	r3, [pc, #240]	@ (800ede4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	f000 812c 	beq.w	800ef56 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800ecfe:	4b39      	ldr	r3, [pc, #228]	@ (800ede4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	68db      	ldr	r3, [r3, #12]
 800ed04:	4a38      	ldr	r2, [pc, #224]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ed06:	7d52      	ldrb	r2, [r2, #21]
 800ed08:	4610      	mov	r0, r2
 800ed0a:	4798      	blx	r3
                }
                break;
 800ed0c:	e123      	b.n	800ef56 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	7b1b      	ldrb	r3, [r3, #12]
 800ed12:	2b07      	cmp	r3, #7
 800ed14:	f040 8121 	bne.w	800ef5a <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800ed18:	2306      	movs	r3, #6
 800ed1a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	689a      	ldr	r2, [r3, #8]
 800ed22:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ed26:	4413      	add	r3, r2
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	b21a      	sxth	r2, r3
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6899      	ldr	r1, [r3, #8]
 800ed30:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ed34:	3301      	adds	r3, #1
 800ed36:	440b      	add	r3, r1
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	b21b      	sxth	r3, r3
 800ed3c:	021b      	lsls	r3, r3, #8
 800ed3e:	b21b      	sxth	r3, r3
 800ed40:	4313      	orrs	r3, r2
 800ed42:	b21b      	sxth	r3, r3
 800ed44:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800ed46:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                    cmdIndex += 2;
 800ed4a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ed4e:	3302      	adds	r3, #2
 800ed50:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	689a      	ldr	r2, [r3, #8]
 800ed58:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ed5c:	4413      	add	r3, r2
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	4619      	mov	r1, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	689a      	ldr	r2, [r3, #8]
 800ed66:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	4413      	add	r3, r2
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	021b      	lsls	r3, r3, #8
 800ed72:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6899      	ldr	r1, [r3, #8]
 800ed7a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ed7e:	3302      	adds	r3, #2
 800ed80:	440b      	add	r3, r1
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800ed86:	4313      	orrs	r3, r2
 800ed88:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800ed8a:	2364      	movs	r3, #100	@ 0x64
 800ed8c:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800ed90:	647b      	str	r3, [r7, #68]	@ 0x44
                        100;
                    cmdIndex += 3;
 800ed92:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ed96:	3303      	adds	r3, #3
 800ed98:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	689a      	ldr	r2, [r3, #8]
 800eda0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eda4:	1c59      	adds	r1, r3, #1
 800eda6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800edaa:	4413      	add	r3, r2
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	b25b      	sxtb	r3, r3
 800edb0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800edb4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800edb8:	4618      	mov	r0, r3
 800edba:	f004 fddb 	bl	8013974 <LoRaMacMlmeRequest>
                }
                break;
 800edbe:	e0cc      	b.n	800ef5a <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800edc0:	233b      	movs	r3, #59	@ 0x3b
 800edc2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                mibReq.Param.IsCertPortOn = false;
 800edc6:	2300      	movs	r3, #0
 800edc8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800edcc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800edd0:	4618      	mov	r0, r3
 800edd2:	f004 f9cd 	bl	8013170 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800edd6:	4b04      	ldr	r3, [pc, #16]	@ (800ede8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800edd8:	2201      	movs	r2, #1
 800edda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800edde:	e0bd      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
 800ede0:	0801d94c 	.word	0x0801d94c
 800ede4:	20000874 	.word	0x20000874
 800ede8:	2000083c 	.word	0x2000083c
 800edec:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800edf0:	232a      	movs	r3, #42	@ 0x2a
 800edf2:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800edf4:	f107 0308 	add.w	r3, r7, #8
 800edf8:	4618      	mov	r0, r3
 800edfa:	f003 ffe1 	bl	8012dc0 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	63bb      	str	r3, [r7, #56]	@ 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	637b      	str	r3, [r7, #52]	@ 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800ee06:	4b65      	ldr	r3, [pc, #404]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee08:	68da      	ldr	r2, [r3, #12]
 800ee0a:	4b64      	ldr	r3, [pc, #400]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee0c:	7a9b      	ldrb	r3, [r3, #10]
 800ee0e:	1c59      	adds	r1, r3, #1
 800ee10:	b2c8      	uxtb	r0, r1
 800ee12:	4962      	ldr	r1, [pc, #392]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee14:	7288      	strb	r0, [r1, #10]
 800ee16:	4413      	add	r3, r2
 800ee18:	227f      	movs	r2, #127	@ 0x7f
 800ee1a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800ee1c:	4b60      	ldr	r3, [pc, #384]	@ (800efa0 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	4b5e      	ldr	r3, [pc, #376]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee22:	68d9      	ldr	r1, [r3, #12]
 800ee24:	4b5d      	ldr	r3, [pc, #372]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee26:	7a9b      	ldrb	r3, [r3, #10]
 800ee28:	1c58      	adds	r0, r3, #1
 800ee2a:	b2c4      	uxtb	r4, r0
 800ee2c:	485b      	ldr	r0, [pc, #364]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee2e:	7284      	strb	r4, [r0, #10]
 800ee30:	440b      	add	r3, r1
 800ee32:	78d2      	ldrb	r2, [r2, #3]
 800ee34:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800ee36:	4b5a      	ldr	r3, [pc, #360]	@ (800efa0 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	4b58      	ldr	r3, [pc, #352]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee3c:	68d9      	ldr	r1, [r3, #12]
 800ee3e:	4b57      	ldr	r3, [pc, #348]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee40:	7a9b      	ldrb	r3, [r3, #10]
 800ee42:	1c58      	adds	r0, r3, #1
 800ee44:	b2c4      	uxtb	r4, r0
 800ee46:	4855      	ldr	r0, [pc, #340]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee48:	7284      	strb	r4, [r0, #10]
 800ee4a:	440b      	add	r3, r1
 800ee4c:	7892      	ldrb	r2, [r2, #2]
 800ee4e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800ee50:	4b53      	ldr	r3, [pc, #332]	@ (800efa0 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800ee52:	681a      	ldr	r2, [r3, #0]
 800ee54:	4b51      	ldr	r3, [pc, #324]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee56:	68d9      	ldr	r1, [r3, #12]
 800ee58:	4b50      	ldr	r3, [pc, #320]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee5a:	7a9b      	ldrb	r3, [r3, #10]
 800ee5c:	1c58      	adds	r0, r3, #1
 800ee5e:	b2c4      	uxtb	r4, r0
 800ee60:	484e      	ldr	r0, [pc, #312]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee62:	7284      	strb	r4, [r0, #10]
 800ee64:	440b      	add	r3, r1
 800ee66:	7852      	ldrb	r2, [r2, #1]
 800ee68:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800ee6a:	4b4d      	ldr	r3, [pc, #308]	@ (800efa0 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	4b4b      	ldr	r3, [pc, #300]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee70:	68d9      	ldr	r1, [r3, #12]
 800ee72:	4b4a      	ldr	r3, [pc, #296]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee74:	7a9b      	ldrb	r3, [r3, #10]
 800ee76:	1c58      	adds	r0, r3, #1
 800ee78:	b2c4      	uxtb	r4, r0
 800ee7a:	4848      	ldr	r0, [pc, #288]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee7c:	7284      	strb	r4, [r0, #10]
 800ee7e:	440b      	add	r3, r1
 800ee80:	7812      	ldrb	r2, [r2, #0]
 800ee82:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800ee84:	4b45      	ldr	r3, [pc, #276]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee86:	68da      	ldr	r2, [r3, #12]
 800ee88:	4b44      	ldr	r3, [pc, #272]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee8a:	7a9b      	ldrb	r3, [r3, #10]
 800ee8c:	1c59      	adds	r1, r3, #1
 800ee8e:	b2c8      	uxtb	r0, r1
 800ee90:	4942      	ldr	r1, [pc, #264]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee92:	7288      	strb	r0, [r1, #10]
 800ee94:	4413      	add	r3, r2
 800ee96:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800ee9a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800ee9c:	4b3f      	ldr	r3, [pc, #252]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ee9e:	68da      	ldr	r2, [r3, #12]
 800eea0:	4b3e      	ldr	r3, [pc, #248]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eea2:	7a9b      	ldrb	r3, [r3, #10]
 800eea4:	1c59      	adds	r1, r3, #1
 800eea6:	b2c8      	uxtb	r0, r1
 800eea8:	493c      	ldr	r1, [pc, #240]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eeaa:	7288      	strb	r0, [r1, #10]
 800eeac:	4413      	add	r3, r2
 800eeae:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800eeb2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800eeb4:	4b39      	ldr	r3, [pc, #228]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eeb6:	68da      	ldr	r2, [r3, #12]
 800eeb8:	4b38      	ldr	r3, [pc, #224]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eeba:	7a9b      	ldrb	r3, [r3, #10]
 800eebc:	1c59      	adds	r1, r3, #1
 800eebe:	b2c8      	uxtb	r0, r1
 800eec0:	4936      	ldr	r1, [pc, #216]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eec2:	7288      	strb	r0, [r1, #10]
 800eec4:	4413      	add	r3, r2
 800eec6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800eeca:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800eecc:	4b33      	ldr	r3, [pc, #204]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eece:	68da      	ldr	r2, [r3, #12]
 800eed0:	4b32      	ldr	r3, [pc, #200]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eed2:	7a9b      	ldrb	r3, [r3, #10]
 800eed4:	1c59      	adds	r1, r3, #1
 800eed6:	b2c8      	uxtb	r0, r1
 800eed8:	4930      	ldr	r1, [pc, #192]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eeda:	7288      	strb	r0, [r1, #10]
 800eedc:	4413      	add	r3, r2
 800eede:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800eee2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800eee4:	4b2d      	ldr	r3, [pc, #180]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eee6:	68da      	ldr	r2, [r3, #12]
 800eee8:	4b2c      	ldr	r3, [pc, #176]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eeea:	7a9b      	ldrb	r3, [r3, #10]
 800eeec:	1c59      	adds	r1, r3, #1
 800eeee:	b2c8      	uxtb	r0, r1
 800eef0:	492a      	ldr	r1, [pc, #168]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eef2:	7288      	strb	r0, [r1, #10]
 800eef4:	4413      	add	r3, r2
 800eef6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800eefa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800eefc:	4b27      	ldr	r3, [pc, #156]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800eefe:	68da      	ldr	r2, [r3, #12]
 800ef00:	4b26      	ldr	r3, [pc, #152]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ef02:	7a9b      	ldrb	r3, [r3, #10]
 800ef04:	1c59      	adds	r1, r3, #1
 800ef06:	b2c8      	uxtb	r0, r1
 800ef08:	4924      	ldr	r1, [pc, #144]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ef0a:	7288      	strb	r0, [r1, #10]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800ef12:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800ef14:	4b21      	ldr	r3, [pc, #132]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ef16:	68da      	ldr	r2, [r3, #12]
 800ef18:	4b20      	ldr	r3, [pc, #128]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ef1a:	7a9b      	ldrb	r3, [r3, #10]
 800ef1c:	1c59      	adds	r1, r3, #1
 800ef1e:	b2c8      	uxtb	r0, r1
 800ef20:	491e      	ldr	r1, [pc, #120]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ef22:	7288      	strb	r0, [r1, #10]
 800ef24:	4413      	add	r3, r2
 800ef26:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800ef2a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800ef2c:	4b1b      	ldr	r3, [pc, #108]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ef2e:	68da      	ldr	r2, [r3, #12]
 800ef30:	4b1a      	ldr	r3, [pc, #104]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ef32:	7a9b      	ldrb	r3, [r3, #10]
 800ef34:	1c59      	adds	r1, r3, #1
 800ef36:	b2c8      	uxtb	r0, r1
 800ef38:	4918      	ldr	r1, [pc, #96]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ef3a:	7288      	strb	r0, [r1, #10]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800ef42:	701a      	strb	r2, [r3, #0]
                break;
 800ef44:	e00a      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800ef46:	bf00      	nop
 800ef48:	e008      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800ef4a:	bf00      	nop
 800ef4c:	e006      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800ef4e:	bf00      	nop
 800ef50:	e004      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800ef52:	bf00      	nop
 800ef54:	e002      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800ef56:	bf00      	nop
 800ef58:	e000      	b.n	800ef5c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800ef5a:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800ef5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ef5e:	7a9b      	ldrb	r3, [r3, #10]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00c      	beq.n	800ef7e <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800ef64:	4b0f      	ldr	r3, [pc, #60]	@ (800efa4 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800ef66:	7a5b      	ldrb	r3, [r3, #9]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d114      	bne.n	800ef96 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800ef6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ef70:	480c      	ldr	r0, [pc, #48]	@ (800efa4 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800ef72:	f00d fc97 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800ef76:	480b      	ldr	r0, [pc, #44]	@ (800efa4 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800ef78:	f00d fbb6 	bl	801c6e8 <UTIL_TIMER_Start>
 800ef7c:	e00b      	b.n	800ef96 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800ef7e:	4809      	ldr	r0, [pc, #36]	@ (800efa4 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800ef80:	f00d fc20 	bl	801c7c4 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800ef84:	4b05      	ldr	r3, [pc, #20]	@ (800ef9c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ef86:	2200      	movs	r2, #0
 800ef88:	705a      	strb	r2, [r3, #1]
 800ef8a:	e004      	b.n	800ef96 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800ef8c:	bf00      	nop
 800ef8e:	e002      	b.n	800ef96 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800ef90:	bf00      	nop
 800ef92:	e000      	b.n	800ef96 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800ef94:	bf00      	nop
    }
}
 800ef96:	3790      	adds	r7, #144	@ 0x90
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bdb0      	pop	{r4, r5, r7, pc}
 800ef9c:	2000083c 	.word	0x2000083c
 800efa0:	20000874 	.word	0x20000874
 800efa4:	20000878 	.word	0x20000878

0800efa8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800efb0:	bf00      	nop
    }
}
 800efb2:	bf00      	nop
 800efb4:	370c      	adds	r7, #12
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bc80      	pop	{r7}
 800efba:	4770      	bx	lr

0800efbc <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800efc4:	4b05      	ldr	r3, [pc, #20]	@ (800efdc <LmhpComplianceOnMlmeIndication+0x20>)
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	f083 0301 	eor.w	r3, r3, #1
 800efcc:	b2db      	uxtb	r3, r3
 800efce:	2b00      	cmp	r3, #0
    {
        return;
 800efd0:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bc80      	pop	{r7}
 800efd8:	4770      	bx	lr
 800efda:	bf00      	nop
 800efdc:	2000083c 	.word	0x2000083c

0800efe0 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800efe8:	4b08      	ldr	r3, [pc, #32]	@ (800f00c <OnProcessTimer+0x2c>)
 800efea:	7a9b      	ldrb	r3, [r3, #10]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d002      	beq.n	800eff6 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800eff0:	4b06      	ldr	r3, [pc, #24]	@ (800f00c <OnProcessTimer+0x2c>)
 800eff2:	2201      	movs	r2, #1
 800eff4:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800eff6:	4b06      	ldr	r3, [pc, #24]	@ (800f010 <OnProcessTimer+0x30>)
 800eff8:	695b      	ldr	r3, [r3, #20]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d002      	beq.n	800f004 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800effe:	4b04      	ldr	r3, [pc, #16]	@ (800f010 <OnProcessTimer+0x30>)
 800f000:	695b      	ldr	r3, [r3, #20]
 800f002:	4798      	blx	r3
    }
}
 800f004:	bf00      	nop
 800f006:	3708      	adds	r7, #8
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	2000083c 	.word	0x2000083c
 800f010:	200000d8 	.word	0x200000d8

0800f014 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800f01c:	2300      	movs	r3, #0
}
 800f01e:	4618      	mov	r0, r3
 800f020:	370c      	adds	r7, #12
 800f022:	46bd      	mov	sp, r7
 800f024:	bc80      	pop	{r7}
 800f026:	4770      	bx	lr

0800f028 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800f028:	b480      	push	{r7}
 800f02a:	b083      	sub	sp, #12
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	4603      	mov	r3, r0
 800f030:	6039      	str	r1, [r7, #0]
 800f032:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800f034:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800f038:	4618      	mov	r0, r3
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bc80      	pop	{r7}
 800f040:	4770      	bx	lr
	...

0800f044 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800f044:	b590      	push	{r4, r7, lr}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f04a:	f00d fcd5 	bl	801c9f8 <UTIL_TIMER_GetCurrentTime>
 800f04e:	4603      	mov	r3, r0
 800f050:	4a0f      	ldr	r2, [pc, #60]	@ (800f090 <OnRadioTxDone+0x4c>)
 800f052:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f054:	4c0f      	ldr	r4, [pc, #60]	@ (800f094 <OnRadioTxDone+0x50>)
 800f056:	463b      	mov	r3, r7
 800f058:	4618      	mov	r0, r3
 800f05a:	f00c feb3 	bl	801bdc4 <SysTimeGet>
 800f05e:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800f062:	463a      	mov	r2, r7
 800f064:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f068:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f06c:	4a0a      	ldr	r2, [pc, #40]	@ (800f098 <OnRadioTxDone+0x54>)
 800f06e:	7813      	ldrb	r3, [r2, #0]
 800f070:	f043 0320 	orr.w	r3, r3, #32
 800f074:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f076:	f003 fa9f 	bl	80125b8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800f07a:	4b08      	ldr	r3, [pc, #32]	@ (800f09c <OnRadioTxDone+0x58>)
 800f07c:	2201      	movs	r2, #1
 800f07e:	2100      	movs	r1, #0
 800f080:	2002      	movs	r0, #2
 800f082:	f00d fda9 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f086:	bf00      	nop
 800f088:	370c      	adds	r7, #12
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd90      	pop	{r4, r7, pc}
 800f08e:	bf00      	nop
 800f090:	200019d0 	.word	0x200019d0
 800f094:	20000890 	.word	0x20000890
 800f098:	200019cc 	.word	0x200019cc
 800f09c:	0801d978 	.word	0x0801d978

0800f0a0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b084      	sub	sp, #16
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	4608      	mov	r0, r1
 800f0aa:	4611      	mov	r1, r2
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	817b      	strh	r3, [r7, #10]
 800f0b2:	460b      	mov	r3, r1
 800f0b4:	813b      	strh	r3, [r7, #8]
 800f0b6:	4613      	mov	r3, r2
 800f0b8:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f0ba:	f00d fc9d 	bl	801c9f8 <UTIL_TIMER_GetCurrentTime>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	4a11      	ldr	r2, [pc, #68]	@ (800f108 <OnRadioRxDone+0x68>)
 800f0c2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800f0c4:	4a10      	ldr	r2, [pc, #64]	@ (800f108 <OnRadioRxDone+0x68>)
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800f0ca:	4a0f      	ldr	r2, [pc, #60]	@ (800f108 <OnRadioRxDone+0x68>)
 800f0cc:	897b      	ldrh	r3, [r7, #10]
 800f0ce:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800f0d0:	4a0d      	ldr	r2, [pc, #52]	@ (800f108 <OnRadioRxDone+0x68>)
 800f0d2:	893b      	ldrh	r3, [r7, #8]
 800f0d4:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800f0d6:	4a0c      	ldr	r2, [pc, #48]	@ (800f108 <OnRadioRxDone+0x68>)
 800f0d8:	79fb      	ldrb	r3, [r7, #7]
 800f0da:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f0dc:	4a0b      	ldr	r2, [pc, #44]	@ (800f10c <OnRadioRxDone+0x6c>)
 800f0de:	7813      	ldrb	r3, [r2, #0]
 800f0e0:	f043 0310 	orr.w	r3, r3, #16
 800f0e4:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800f0e6:	4a09      	ldr	r2, [pc, #36]	@ (800f10c <OnRadioRxDone+0x6c>)
 800f0e8:	7813      	ldrb	r3, [r2, #0]
 800f0ea:	f043 0301 	orr.w	r3, r3, #1
 800f0ee:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800f0f0:	f003 fa62 	bl	80125b8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f0f4:	4b06      	ldr	r3, [pc, #24]	@ (800f110 <OnRadioRxDone+0x70>)
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	2002      	movs	r0, #2
 800f0fc:	f00d fd6c 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f100:	bf00      	nop
 800f102:	3710      	adds	r7, #16
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}
 800f108:	200019d4 	.word	0x200019d4
 800f10c:	200019cc 	.word	0x200019cc
 800f110:	0801d988 	.word	0x0801d988

0800f114 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f114:	b580      	push	{r7, lr}
 800f116:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f118:	4a07      	ldr	r2, [pc, #28]	@ (800f138 <OnRadioTxTimeout+0x24>)
 800f11a:	7813      	ldrb	r3, [r2, #0]
 800f11c:	f043 0308 	orr.w	r3, r3, #8
 800f120:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f122:	f003 fa49 	bl	80125b8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f126:	4b05      	ldr	r3, [pc, #20]	@ (800f13c <OnRadioTxTimeout+0x28>)
 800f128:	2201      	movs	r2, #1
 800f12a:	2100      	movs	r1, #0
 800f12c:	2002      	movs	r0, #2
 800f12e:	f00d fd53 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f132:	bf00      	nop
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	200019cc 	.word	0x200019cc
 800f13c:	0801d998 	.word	0x0801d998

0800f140 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f140:	b580      	push	{r7, lr}
 800f142:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f144:	4a04      	ldr	r2, [pc, #16]	@ (800f158 <OnRadioRxError+0x18>)
 800f146:	7813      	ldrb	r3, [r2, #0]
 800f148:	f043 0304 	orr.w	r3, r3, #4
 800f14c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f14e:	f003 fa33 	bl	80125b8 <OnMacProcessNotify>
}
 800f152:	bf00      	nop
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	200019cc 	.word	0x200019cc

0800f15c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f160:	4a07      	ldr	r2, [pc, #28]	@ (800f180 <OnRadioRxTimeout+0x24>)
 800f162:	7813      	ldrb	r3, [r2, #0]
 800f164:	f043 0302 	orr.w	r3, r3, #2
 800f168:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f16a:	f003 fa25 	bl	80125b8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f16e:	4b05      	ldr	r3, [pc, #20]	@ (800f184 <OnRadioRxTimeout+0x28>)
 800f170:	2201      	movs	r2, #1
 800f172:	2100      	movs	r1, #0
 800f174:	2002      	movs	r0, #2
 800f176:	f00d fd2f 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f17a:	bf00      	nop
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	200019cc 	.word	0x200019cc
 800f184:	0801d9a8 	.word	0x0801d9a8

0800f188 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f188:	b480      	push	{r7}
 800f18a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f18c:	4b08      	ldr	r3, [pc, #32]	@ (800f1b0 <UpdateRxSlotIdleState+0x28>)
 800f18e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f192:	2b02      	cmp	r3, #2
 800f194:	d004      	beq.n	800f1a0 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f196:	4b07      	ldr	r3, [pc, #28]	@ (800f1b4 <UpdateRxSlotIdleState+0x2c>)
 800f198:	2206      	movs	r2, #6
 800f19a:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f19e:	e003      	b.n	800f1a8 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f1a0:	4b04      	ldr	r3, [pc, #16]	@ (800f1b4 <UpdateRxSlotIdleState+0x2c>)
 800f1a2:	2202      	movs	r2, #2
 800f1a4:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800f1a8:	bf00      	nop
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bc80      	pop	{r7}
 800f1ae:	4770      	bx	lr
 800f1b0:	20000dc4 	.word	0x20000dc4
 800f1b4:	20000890 	.word	0x20000890

0800f1b8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b092      	sub	sp, #72	@ 0x48
 800f1bc:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f1be:	4b4a      	ldr	r3, [pc, #296]	@ (800f2e8 <ProcessRadioTxDone+0x130>)
 800f1c0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f1c4:	2b02      	cmp	r3, #2
 800f1c6:	d002      	beq.n	800f1ce <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f1c8:	4b48      	ldr	r3, [pc, #288]	@ (800f2ec <ProcessRadioTxDone+0x134>)
 800f1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1cc:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1ce:	f3ef 8310 	mrs	r3, PRIMASK
 800f1d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800f1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800f1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800f1d8:	b672      	cpsid	i
}
 800f1da:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800f1dc:	f00d fc0c 	bl	801c9f8 <UTIL_TIMER_GetCurrentTime>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	4b43      	ldr	r3, [pc, #268]	@ (800f2f0 <ProcessRadioTxDone+0x138>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800f1ea:	4b42      	ldr	r3, [pc, #264]	@ (800f2f4 <ProcessRadioTxDone+0x13c>)
 800f1ec:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f2:	1ad3      	subs	r3, r2, r3
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	4840      	ldr	r0, [pc, #256]	@ (800f2f8 <ProcessRadioTxDone+0x140>)
 800f1f8:	f00d fb54 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f1fc:	483e      	ldr	r0, [pc, #248]	@ (800f2f8 <ProcessRadioTxDone+0x140>)
 800f1fe:	f00d fa73 	bl	801c6e8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800f202:	4b3c      	ldr	r3, [pc, #240]	@ (800f2f4 <ProcessRadioTxDone+0x13c>)
 800f204:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	4619      	mov	r1, r3
 800f20e:	483b      	ldr	r0, [pc, #236]	@ (800f2fc <ProcessRadioTxDone+0x144>)
 800f210:	f00d fb48 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f214:	4839      	ldr	r0, [pc, #228]	@ (800f2fc <ProcessRadioTxDone+0x144>)
 800f216:	f00d fa67 	bl	801c6e8 <UTIL_TIMER_Start>
 800f21a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f21c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f21e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f220:	f383 8810 	msr	PRIMASK, r3
}
 800f224:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800f226:	4b33      	ldr	r3, [pc, #204]	@ (800f2f4 <ProcessRadioTxDone+0x13c>)
 800f228:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d01a      	beq.n	800f266 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800f230:	2315      	movs	r3, #21
 800f232:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f236:	4b2c      	ldr	r3, [pc, #176]	@ (800f2e8 <ProcessRadioTxDone+0x130>)
 800f238:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f23c:	f107 0220 	add.w	r2, r7, #32
 800f240:	4611      	mov	r1, r2
 800f242:	4618      	mov	r0, r3
 800f244:	f006 ff40 	bl	80160c8 <RegionGetPhyParam>
 800f248:	4603      	mov	r3, r0
 800f24a:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f24c:	4b29      	ldr	r3, [pc, #164]	@ (800f2f4 <ProcessRadioTxDone+0x13c>)
 800f24e:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	4413      	add	r3, r2
 800f256:	4619      	mov	r1, r3
 800f258:	4829      	ldr	r0, [pc, #164]	@ (800f300 <ProcessRadioTxDone+0x148>)
 800f25a:	f00d fb23 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800f25e:	4828      	ldr	r0, [pc, #160]	@ (800f300 <ProcessRadioTxDone+0x148>)
 800f260:	f00d fa42 	bl	801c6e8 <UTIL_TIMER_Start>
 800f264:	e003      	b.n	800f26e <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f266:	4b23      	ldr	r3, [pc, #140]	@ (800f2f4 <ProcessRadioTxDone+0x13c>)
 800f268:	2200      	movs	r2, #0
 800f26a:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f26e:	4b20      	ldr	r3, [pc, #128]	@ (800f2f0 <ProcessRadioTxDone+0x138>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	4a1d      	ldr	r2, [pc, #116]	@ (800f2e8 <ProcessRadioTxDone+0x130>)
 800f274:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f276:	4b1f      	ldr	r3, [pc, #124]	@ (800f2f4 <ProcessRadioTxDone+0x13c>)
 800f278:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800f27c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f27e:	4b1c      	ldr	r3, [pc, #112]	@ (800f2f0 <ProcessRadioTxDone+0x138>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f284:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f288:	4618      	mov	r0, r3
 800f28a:	f00c fdd3 	bl	801be34 <SysTimeGetMcuTime>
 800f28e:	4638      	mov	r0, r7
 800f290:	4b15      	ldr	r3, [pc, #84]	@ (800f2e8 <ProcessRadioTxDone+0x130>)
 800f292:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800f296:	9200      	str	r2, [sp, #0]
 800f298:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800f29c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f2a0:	ca06      	ldmia	r2, {r1, r2}
 800f2a2:	f00c fd28 	bl	801bcf6 <SysTimeSub>
 800f2a6:	f107 0314 	add.w	r3, r7, #20
 800f2aa:	463a      	mov	r2, r7
 800f2ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2b0:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f2b4:	4b0f      	ldr	r3, [pc, #60]	@ (800f2f4 <ProcessRadioTxDone+0x13c>)
 800f2b6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800f2ba:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800f2bc:	2301      	movs	r3, #1
 800f2be:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f2c0:	4b09      	ldr	r3, [pc, #36]	@ (800f2e8 <ProcessRadioTxDone+0x130>)
 800f2c2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d101      	bne.n	800f2ce <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800f2ce:	4b06      	ldr	r3, [pc, #24]	@ (800f2e8 <ProcessRadioTxDone+0x130>)
 800f2d0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f2d4:	f107 0208 	add.w	r2, r7, #8
 800f2d8:	4611      	mov	r1, r2
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f006 ff0c 	bl	80160f8 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800f2e0:	bf00      	nop
 800f2e2:	3740      	adds	r7, #64	@ 0x40
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	20000dc4 	.word	0x20000dc4
 800f2ec:	0801e044 	.word	0x0801e044
 800f2f0:	200019d0 	.word	0x200019d0
 800f2f4:	20000890 	.word	0x20000890
 800f2f8:	20000c10 	.word	0x20000c10
 800f2fc:	20000c28 	.word	0x20000c28
 800f300:	20000c90 	.word	0x20000c90

0800f304 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f304:	b580      	push	{r7, lr}
 800f306:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f308:	4b10      	ldr	r3, [pc, #64]	@ (800f34c <PrepareRxDoneAbort+0x48>)
 800f30a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f30e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f312:	4a0e      	ldr	r2, [pc, #56]	@ (800f34c <PrepareRxDoneAbort+0x48>)
 800f314:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800f318:	4b0c      	ldr	r3, [pc, #48]	@ (800f34c <PrepareRxDoneAbort+0x48>)
 800f31a:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d002      	beq.n	800f328 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800f322:	2000      	movs	r0, #0
 800f324:	f001 fa12 	bl	801074c <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f328:	4a08      	ldr	r2, [pc, #32]	@ (800f34c <PrepareRxDoneAbort+0x48>)
 800f32a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f32e:	f043 0302 	orr.w	r3, r3, #2
 800f332:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f336:	4a05      	ldr	r2, [pc, #20]	@ (800f34c <PrepareRxDoneAbort+0x48>)
 800f338:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f33c:	f043 0310 	orr.w	r3, r3, #16
 800f340:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800f344:	f7ff ff20 	bl	800f188 <UpdateRxSlotIdleState>
}
 800f348:	bf00      	nop
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	20000890 	.word	0x20000890

0800f350 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f350:	b590      	push	{r4, r7, lr}
 800f352:	b0a9      	sub	sp, #164	@ 0xa4
 800f354:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f356:	2312      	movs	r3, #18
 800f358:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f35c:	4ba1      	ldr	r3, [pc, #644]	@ (800f5e4 <ProcessRadioRxDone+0x294>)
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800f364:	4b9f      	ldr	r3, [pc, #636]	@ (800f5e4 <ProcessRadioRxDone+0x294>)
 800f366:	891b      	ldrh	r3, [r3, #8]
 800f368:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800f36c:	4b9d      	ldr	r3, [pc, #628]	@ (800f5e4 <ProcessRadioRxDone+0x294>)
 800f36e:	895b      	ldrh	r3, [r3, #10]
 800f370:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800f374:	4b9b      	ldr	r3, [pc, #620]	@ (800f5e4 <ProcessRadioRxDone+0x294>)
 800f376:	7b1b      	ldrb	r3, [r3, #12]
 800f378:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800f37c:	2300      	movs	r3, #0
 800f37e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800f382:	2300      	movs	r3, #0
 800f384:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f386:	4b98      	ldr	r3, [pc, #608]	@ (800f5e8 <ProcessRadioRxDone+0x298>)
 800f388:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f38c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800f390:	2300      	movs	r3, #0
 800f392:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f396:	2301      	movs	r3, #1
 800f398:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800f39c:	2301      	movs	r3, #1
 800f39e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800f3a2:	4a92      	ldr	r2, [pc, #584]	@ (800f5ec <ProcessRadioRxDone+0x29c>)
 800f3a4:	7813      	ldrb	r3, [r2, #0]
 800f3a6:	f023 0301 	bic.w	r3, r3, #1
 800f3aa:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f3ac:	4b90      	ldr	r3, [pc, #576]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800f3b4:	4a8e      	ldr	r2, [pc, #568]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f3b6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800f3ba:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800f3be:	4a8c      	ldr	r2, [pc, #560]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f3c0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f3c4:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f3c8:	4b89      	ldr	r3, [pc, #548]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f3ca:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800f3ce:	4b88      	ldr	r3, [pc, #544]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f3d0:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800f3d4:	4b86      	ldr	r3, [pc, #536]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800f3dc:	4b84      	ldr	r3, [pc, #528]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800f3e4:	4b82      	ldr	r3, [pc, #520]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800f3ec:	4b80      	ldr	r3, [pc, #512]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800f3f4:	4b7e      	ldr	r3, [pc, #504]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800f3fc:	4b7c      	ldr	r3, [pc, #496]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f3fe:	2200      	movs	r2, #0
 800f400:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800f404:	4b7a      	ldr	r3, [pc, #488]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f406:	2200      	movs	r2, #0
 800f408:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f40c:	4b78      	ldr	r3, [pc, #480]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f40e:	2200      	movs	r2, #0
 800f410:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f414:	4b76      	ldr	r3, [pc, #472]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f416:	2200      	movs	r2, #0
 800f418:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800f41c:	4b74      	ldr	r3, [pc, #464]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f41e:	2200      	movs	r2, #0
 800f420:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f424:	4b72      	ldr	r3, [pc, #456]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f426:	2200      	movs	r2, #0
 800f428:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800f42c:	4b70      	ldr	r3, [pc, #448]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f42e:	2200      	movs	r2, #0
 800f430:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800f434:	4b6f      	ldr	r3, [pc, #444]	@ (800f5f4 <ProcessRadioRxDone+0x2a4>)
 800f436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f438:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800f43a:	4b6d      	ldr	r3, [pc, #436]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f43c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800f440:	2b00      	cmp	r3, #0
 800f442:	d102      	bne.n	800f44a <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800f444:	486c      	ldr	r0, [pc, #432]	@ (800f5f8 <ProcessRadioRxDone+0x2a8>)
 800f446:	f00d f9bd 	bl	801c7c4 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f44a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f44e:	4619      	mov	r1, r3
 800f450:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800f454:	f004 feba 	bl	80141cc <LoRaMacClassBRxBeacon>
 800f458:	4603      	mov	r3, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00b      	beq.n	800f476 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f45e:	4a64      	ldr	r2, [pc, #400]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f460:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800f464:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f468:	4a61      	ldr	r2, [pc, #388]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f46a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f46e:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800f472:	f000 bc8d 	b.w	800fd90 <ProcessRadioRxDone+0xa40>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f476:	4b5c      	ldr	r3, [pc, #368]	@ (800f5e8 <ProcessRadioRxDone+0x298>)
 800f478:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d11e      	bne.n	800f4be <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f480:	f004 feb7 	bl	80141f2 <LoRaMacClassBIsPingExpected>
 800f484:	4603      	mov	r3, r0
 800f486:	2b00      	cmp	r3, #0
 800f488:	d00a      	beq.n	800f4a0 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f48a:	2000      	movs	r0, #0
 800f48c:	f004 fe68 	bl	8014160 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f490:	2000      	movs	r0, #0
 800f492:	f004 fe89 	bl	80141a8 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f496:	4b56      	ldr	r3, [pc, #344]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f498:	2204      	movs	r2, #4
 800f49a:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800f49e:	e00e      	b.n	800f4be <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f4a0:	f004 feae 	bl	8014200 <LoRaMacClassBIsMulticastExpected>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d009      	beq.n	800f4be <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f4aa:	2000      	movs	r0, #0
 800f4ac:	f004 fe62 	bl	8014174 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f4b0:	2000      	movs	r0, #0
 800f4b2:	f004 fe82 	bl	80141ba <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f4b6:	4b4e      	ldr	r3, [pc, #312]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f4b8:	2205      	movs	r2, #5
 800f4ba:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800f4be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d107      	bne.n	800f4d6 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f4c6:	4b4a      	ldr	r3, [pc, #296]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800f4ce:	f7ff ff19 	bl	800f304 <PrepareRxDoneAbort>
        return;
 800f4d2:	f000 bc5d 	b.w	800fd90 <ProcessRadioRxDone+0xa40>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f4d6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f4da:	1c5a      	adds	r2, r3, #1
 800f4dc:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f4e6:	4413      	add	r3, r2
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800f4ee:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f4f2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	2b06      	cmp	r3, #6
 800f4fc:	f200 8419 	bhi.w	800fd32 <ProcessRadioRxDone+0x9e2>
 800f500:	a201      	add	r2, pc, #4	@ (adr r2, 800f508 <ProcessRadioRxDone+0x1b8>)
 800f502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f506:	bf00      	nop
 800f508:	0800f525 	.word	0x0800f525
 800f50c:	0800fd33 	.word	0x0800fd33
 800f510:	0800f743 	.word	0x0800f743
 800f514:	0800fd33 	.word	0x0800fd33
 800f518:	0800f73b 	.word	0x0800f73b
 800f51c:	0800fd33 	.word	0x0800fd33
 800f520:	0800fcd7 	.word	0x0800fcd7
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f524:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f528:	2b10      	cmp	r3, #16
 800f52a:	d807      	bhi.n	800f53c <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f52c:	4b30      	ldr	r3, [pc, #192]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f52e:	2201      	movs	r2, #1
 800f530:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800f534:	f7ff fee6 	bl	800f304 <PrepareRxDoneAbort>
                return;
 800f538:	f000 bc2a 	b.w	800fd90 <ProcessRadioRxDone+0xa40>
            }
            macMsgJoinAccept.Buffer = payload;
 800f53c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f540:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800f542:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f546:	b2db      	uxtb	r3, r3
 800f548:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f54a:	4b27      	ldr	r3, [pc, #156]	@ (800f5e8 <ProcessRadioRxDone+0x298>)
 800f54c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800f550:	2b00      	cmp	r3, #0
 800f552:	d007      	beq.n	800f564 <ProcessRadioRxDone+0x214>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f554:	4b26      	ldr	r3, [pc, #152]	@ (800f5f0 <ProcessRadioRxDone+0x2a0>)
 800f556:	2201      	movs	r2, #1
 800f558:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800f55c:	f7ff fed2 	bl	800f304 <PrepareRxDoneAbort>
                return;
 800f560:	f000 bc16 	b.w	800fd90 <ProcessRadioRxDone+0xa40>
            }

            SecureElementGetJoinEui( joinEui );
 800f564:	1d3b      	adds	r3, r7, #4
 800f566:	4618      	mov	r0, r3
 800f568:	f7fd ff7e 	bl	800d468 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800f56c:	f107 0214 	add.w	r2, r7, #20
 800f570:	1d3b      	adds	r3, r7, #4
 800f572:	4619      	mov	r1, r3
 800f574:	20ff      	movs	r0, #255	@ 0xff
 800f576:	f006 f831 	bl	80155dc <LoRaMacCryptoHandleJoinAccept>
 800f57a:	4603      	mov	r3, r0
 800f57c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                macCryptoStatus = LoRaMacCryptoHandleJoinAccept( REJOIN_REQ_2, joinEui, &macMsgJoinAccept );
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800f580:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f584:	2b00      	cmp	r3, #0
 800f586:	f040 80cc 	bne.w	800f722 <ProcessRadioRxDone+0x3d2>
            {
                VerifyParams_t verifyRxDr;

                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800f58a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f58e:	f003 030f 	and.w	r3, r3, #15
 800f592:	b2db      	uxtb	r3, r3
 800f594:	2b0f      	cmp	r3, #15
 800f596:	d031      	beq.n	800f5fc <ProcessRadioRxDone+0x2ac>
                {
                    verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f598:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f59c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f5a0:	b2db      	uxtb	r3, r3
 800f5a2:	b25b      	sxtb	r3, r3
 800f5a4:	703b      	strb	r3, [r7, #0]
                    verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f5a6:	4b10      	ldr	r3, [pc, #64]	@ (800f5e8 <ProcessRadioRxDone+0x298>)
 800f5a8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f5ac:	707b      	strb	r3, [r7, #1]
                    if( RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR ) == false )
 800f5ae:	4b0e      	ldr	r3, [pc, #56]	@ (800f5e8 <ProcessRadioRxDone+0x298>)
 800f5b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f5b4:	4639      	mov	r1, r7
 800f5b6:	2207      	movs	r2, #7
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f006 fdc0 	bl	801613e <RegionVerify>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	f083 0301 	eor.w	r3, r3, #1
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d018      	beq.n	800f5fc <ProcessRadioRxDone+0x2ac>
                    {
                        // MLME handling
                        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f5ca:	2001      	movs	r0, #1
 800f5cc:	f005 fb14 	bl	8014bf8 <LoRaMacConfirmQueueIsCmdActive>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	f000 83b4 	beq.w	800fd40 <ProcessRadioRxDone+0x9f0>
                        {
                            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f5d8:	2101      	movs	r1, #1
 800f5da:	2007      	movs	r0, #7
 800f5dc:	f005 fa80 	bl	8014ae0 <LoRaMacConfirmQueueSetStatus>
 800f5e0:	e3b1      	b.n	800fd46 <ProcessRadioRxDone+0x9f6>
 800f5e2:	bf00      	nop
 800f5e4:	200019d4 	.word	0x200019d4
 800f5e8:	20000dc4 	.word	0x20000dc4
 800f5ec:	200019cc 	.word	0x200019cc
 800f5f0:	20000890 	.word	0x20000890
 800f5f4:	0801e044 	.word	0x0801e044
 800f5f8:	20000c28 	.word	0x20000c28
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
            {
#endif

                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f5fc:	7f7b      	ldrb	r3, [r7, #29]
 800f5fe:	461a      	mov	r2, r3
 800f600:	4ba5      	ldr	r3, [pc, #660]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f602:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f606:	4ba4      	ldr	r3, [pc, #656]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f608:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800f60c:	7fbb      	ldrb	r3, [r7, #30]
 800f60e:	021b      	lsls	r3, r3, #8
 800f610:	4313      	orrs	r3, r2
 800f612:	4aa1      	ldr	r2, [pc, #644]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f614:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f618:	4b9f      	ldr	r3, [pc, #636]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f61a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800f61e:	7ffb      	ldrb	r3, [r7, #31]
 800f620:	041b      	lsls	r3, r3, #16
 800f622:	4313      	orrs	r3, r2
 800f624:	4a9c      	ldr	r2, [pc, #624]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800f62a:	6a3b      	ldr	r3, [r7, #32]
 800f62c:	4a9a      	ldr	r2, [pc, #616]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f62e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800f632:	4b99      	ldr	r3, [pc, #612]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f634:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f638:	4619      	mov	r1, r3
 800f63a:	2002      	movs	r0, #2
 800f63c:	f7fd ff2c 	bl	800d498 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f640:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f644:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	461a      	mov	r2, r3
 800f64c:	4b92      	ldr	r3, [pc, #584]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f64e:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Verify if we shall assign the new datarate
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800f652:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f656:	f003 030f 	and.w	r3, r3, #15
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	2b0f      	cmp	r3, #15
 800f65e:	d011      	beq.n	800f684 <ProcessRadioRxDone+0x334>
                {
#endif

                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f660:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f664:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f668:	b2db      	uxtb	r3, r3
 800f66a:	461a      	mov	r2, r3
 800f66c:	4b8a      	ldr	r3, [pc, #552]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f66e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f672:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f676:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f67a:	b2db      	uxtb	r3, r3
 800f67c:	461a      	mov	r2, r3
 800f67e:	4b86      	ldr	r3, [pc, #536]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f680:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
				}
#endif

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f684:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f688:	461a      	mov	r2, r3
 800f68a:	4b83      	ldr	r3, [pc, #524]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f68c:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800f68e:	4b82      	ldr	r3, [pc, #520]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f692:	2b00      	cmp	r3, #0
 800f694:	d102      	bne.n	800f69c <ProcessRadioRxDone+0x34c>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800f696:	4b80      	ldr	r3, [pc, #512]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f698:	2201      	movs	r2, #1
 800f69a:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800f69c:	4b7e      	ldr	r3, [pc, #504]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f69e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f6a4:	fb02 f303 	mul.w	r3, r2, r3
 800f6a8:	4a7b      	ldr	r2, [pc, #492]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f6aa:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f6ac:	4b7a      	ldr	r3, [pc, #488]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f6ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6b0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f6b4:	4a78      	ldr	r2, [pc, #480]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f6b6:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800f6b8:	4b77      	ldr	r3, [pc, #476]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800f6c0:	4b75      	ldr	r3, [pc, #468]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f6c8:	f107 0314 	add.w	r3, r7, #20
 800f6cc:	3312      	adds	r3, #18
 800f6ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f6d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	3b11      	subs	r3, #17
 800f6d8:	b2db      	uxtb	r3, r3
 800f6da:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800f6de:	4b6f      	ldr	r3, [pc, #444]	@ (800f89c <ProcessRadioRxDone+0x54c>)
 800f6e0:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800f6e4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800f6e8:	4b6b      	ldr	r3, [pc, #428]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f6ea:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f6ee:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800f6f2:	4611      	mov	r1, r2
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f006 fd39 	bl	801616c <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f6fa:	4b67      	ldr	r3, [pc, #412]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f6fc:	2202      	movs	r2, #2
 800f6fe:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800f702:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800f706:	4618      	mov	r0, r3
 800f708:	f005 fa76 	bl	8014bf8 <LoRaMacConfirmQueueIsCmdActive>
 800f70c:	4603      	mov	r3, r0
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f000 8318 	beq.w	800fd44 <ProcessRadioRxDone+0x9f4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800f714:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800f718:	4619      	mov	r1, r3
 800f71a:	2000      	movs	r0, #0
 800f71c:	f005 f9e0 	bl	8014ae0 <LoRaMacConfirmQueueSetStatus>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }

            break;
 800f720:	e310      	b.n	800fd44 <ProcessRadioRxDone+0x9f4>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f722:	2001      	movs	r0, #1
 800f724:	f005 fa68 	bl	8014bf8 <LoRaMacConfirmQueueIsCmdActive>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f000 830a 	beq.w	800fd44 <ProcessRadioRxDone+0x9f4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f730:	2101      	movs	r1, #1
 800f732:	2007      	movs	r0, #7
 800f734:	f005 f9d4 	bl	8014ae0 <LoRaMacConfirmQueueSetStatus>
            break;
 800f738:	e304      	b.n	800fd44 <ProcessRadioRxDone+0x9f4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f73a:	4b58      	ldr	r3, [pc, #352]	@ (800f89c <ProcessRadioRxDone+0x54c>)
 800f73c:	2201      	movs	r2, #1
 800f73e:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f742:	4b55      	ldr	r3, [pc, #340]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f744:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f748:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f74c:	4b53      	ldr	r3, [pc, #332]	@ (800f89c <ProcessRadioRxDone+0x54c>)
 800f74e:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800f752:	b25b      	sxtb	r3, r3
 800f754:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f758:	230d      	movs	r3, #13
 800f75a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f75e:	4b4e      	ldr	r3, [pc, #312]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f760:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800f764:	2b00      	cmp	r3, #0
 800f766:	d002      	beq.n	800f76e <ProcessRadioRxDone+0x41e>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f768:	230e      	movs	r3, #14
 800f76a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f76e:	4b4a      	ldr	r3, [pc, #296]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f770:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f774:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f778:	4611      	mov	r1, r2
 800f77a:	4618      	mov	r0, r3
 800f77c:	f006 fca4 	bl	80160c8 <RegionGetPhyParam>
 800f780:	4603      	mov	r3, r0
 800f782:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f784:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f788:	3b0d      	subs	r3, #13
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	b21b      	sxth	r3, r3
 800f78e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f792:	b21a      	sxth	r2, r3
 800f794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f796:	b21b      	sxth	r3, r3
 800f798:	429a      	cmp	r2, r3
 800f79a:	dc03      	bgt.n	800f7a4 <ProcessRadioRxDone+0x454>
 800f79c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f7a0:	2b0b      	cmp	r3, #11
 800f7a2:	d806      	bhi.n	800f7b2 <ProcessRadioRxDone+0x462>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f7a4:	4b3d      	ldr	r3, [pc, #244]	@ (800f89c <ProcessRadioRxDone+0x54c>)
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800f7ac:	f7ff fdaa 	bl	800f304 <PrepareRxDoneAbort>
                return;
 800f7b0:	e2ee      	b.n	800fd90 <ProcessRadioRxDone+0xa40>
            }
            macMsgData.Buffer = payload;
 800f7b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800f7b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f7c2:	4b37      	ldr	r3, [pc, #220]	@ (800f8a0 <ProcessRadioRxDone+0x550>)
 800f7c4:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f7c6:	23ff      	movs	r3, #255	@ 0xff
 800f7c8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f7cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f006 fa00 	bl	8015bd6 <LoRaMacParserData>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d006      	beq.n	800f7ea <ProcessRadioRxDone+0x49a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f7dc:	4b2f      	ldr	r3, [pc, #188]	@ (800f89c <ProcessRadioRxDone+0x54c>)
 800f7de:	2201      	movs	r2, #1
 800f7e0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800f7e4:	f7ff fd8e 	bl	800f304 <PrepareRxDoneAbort>
                return;
 800f7e8:	e2d2      	b.n	800fd90 <ProcessRadioRxDone+0xa40>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f7ea:	4b2b      	ldr	r3, [pc, #172]	@ (800f898 <ProcessRadioRxDone+0x548>)
 800f7ec:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d132      	bne.n	800f85a <ProcessRadioRxDone+0x50a>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800f7f4:	f004 fcfd 	bl	80141f2 <LoRaMacClassBIsPingExpected>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d014      	beq.n	800f828 <ProcessRadioRxDone+0x4d8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f7fe:	2000      	movs	r0, #0
 800f800:	f004 fcae 	bl	8014160 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800f804:	2000      	movs	r0, #0
 800f806:	f004 fccf 	bl	80141a8 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f80a:	4b24      	ldr	r3, [pc, #144]	@ (800f89c <ProcessRadioRxDone+0x54c>)
 800f80c:	2204      	movs	r2, #4
 800f80e:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800f812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f814:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f818:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	4619      	mov	r1, r3
 800f820:	4610      	mov	r0, r2
 800f822:	f004 fd6f 	bl	8014304 <LoRaMacClassBSetFPendingBit>
 800f826:	e018      	b.n	800f85a <ProcessRadioRxDone+0x50a>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f828:	f004 fcea 	bl	8014200 <LoRaMacClassBIsMulticastExpected>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d013      	beq.n	800f85a <ProcessRadioRxDone+0x50a>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f832:	2000      	movs	r0, #0
 800f834:	f004 fc9e 	bl	8014174 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f838:	2000      	movs	r0, #0
 800f83a:	f004 fcbe 	bl	80141ba <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f83e:	4b17      	ldr	r3, [pc, #92]	@ (800f89c <ProcessRadioRxDone+0x54c>)
 800f840:	2205      	movs	r2, #5
 800f842:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800f846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f848:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f84c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f850:	b2db      	uxtb	r3, r3
 800f852:	4619      	mov	r1, r3
 800f854:	4610      	mov	r0, r2
 800f856:	f004 fd55 	bl	8014304 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f85a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f85c:	4a0f      	ldr	r2, [pc, #60]	@ (800f89c <ProcessRadioRxDone+0x54c>)
 800f85e:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f862:	f107 020e 	add.w	r2, r7, #14
 800f866:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f86a:	4611      	mov	r1, r2
 800f86c:	4618      	mov	r0, r3
 800f86e:	f002 fd9f 	bl	80123b0 <DetermineFrameType>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d006      	beq.n	800f886 <ProcessRadioRxDone+0x536>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f878:	4b08      	ldr	r3, [pc, #32]	@ (800f89c <ProcessRadioRxDone+0x54c>)
 800f87a:	2201      	movs	r2, #1
 800f87c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800f880:	f7ff fd40 	bl	800f304 <PrepareRxDoneAbort>
                return;
 800f884:	e284      	b.n	800fd90 <ProcessRadioRxDone+0xa40>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f886:	2300      	movs	r3, #0
 800f888:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800f88c:	2300      	movs	r3, #0
 800f88e:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f890:	2300      	movs	r3, #0
 800f892:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800f896:	e055      	b.n	800f944 <ProcessRadioRxDone+0x5f4>
 800f898:	20000dc4 	.word	0x20000dc4
 800f89c:	20000890 	.word	0x20000890
 800f8a0:	20000ac8 	.word	0x20000ac8
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f8a4:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f8a8:	499f      	ldr	r1, [pc, #636]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800f8aa:	4613      	mov	r3, r2
 800f8ac:	005b      	lsls	r3, r3, #1
 800f8ae:	4413      	add	r3, r2
 800f8b0:	011b      	lsls	r3, r3, #4
 800f8b2:	440b      	add	r3, r1
 800f8b4:	33ec      	adds	r3, #236	@ 0xec
 800f8b6:	681a      	ldr	r2, [r3, #0]
 800f8b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d13d      	bne.n	800f93a <ProcessRadioRxDone+0x5ea>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f8be:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f8c2:	4999      	ldr	r1, [pc, #612]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	005b      	lsls	r3, r3, #1
 800f8c8:	4413      	add	r3, r2
 800f8ca:	011b      	lsls	r3, r3, #4
 800f8cc:	440b      	add	r3, r1
 800f8ce:	33e9      	adds	r3, #233	@ 0xe9
 800f8d0:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d031      	beq.n	800f93a <ProcessRadioRxDone+0x5ea>
                {
                    multicast = 1;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800f8dc:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f8e0:	4991      	ldr	r1, [pc, #580]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	005b      	lsls	r3, r3, #1
 800f8e6:	4413      	add	r3, r2
 800f8e8:	011b      	lsls	r3, r3, #4
 800f8ea:	440b      	add	r3, r1
 800f8ec:	33ea      	adds	r3, #234	@ 0xea
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800f8f4:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f8f8:	498b      	ldr	r1, [pc, #556]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	005b      	lsls	r3, r3, #1
 800f8fe:	4413      	add	r3, r2
 800f900:	011b      	lsls	r3, r3, #4
 800f902:	440b      	add	r3, r1
 800f904:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800f90e:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f912:	4985      	ldr	r1, [pc, #532]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800f914:	4613      	mov	r3, r2
 800f916:	005b      	lsls	r3, r3, #1
 800f918:	4413      	add	r3, r2
 800f91a:	011b      	lsls	r3, r3, #4
 800f91c:	440b      	add	r3, r1
 800f91e:	33ec      	adds	r3, #236	@ 0xec
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f926:	4b80      	ldr	r3, [pc, #512]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800f928:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f92c:	2b02      	cmp	r3, #2
 800f92e:	d10e      	bne.n	800f94e <ProcessRadioRxDone+0x5fe>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f930:	4b7e      	ldr	r3, [pc, #504]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800f932:	2203      	movs	r2, #3
 800f934:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800f938:	e009      	b.n	800f94e <ProcessRadioRxDone+0x5fe>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f93a:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800f93e:	3301      	adds	r3, #1
 800f940:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800f944:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d0ab      	beq.n	800f8a4 <ProcessRadioRxDone+0x554>
 800f94c:	e000      	b.n	800f950 <ProcessRadioRxDone+0x600>
                    break;
 800f94e:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f950:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800f954:	2b01      	cmp	r3, #1
 800f956:	d117      	bne.n	800f988 <ProcessRadioRxDone+0x638>
 800f958:	7bbb      	ldrb	r3, [r7, #14]
 800f95a:	2b03      	cmp	r3, #3
 800f95c:	d10d      	bne.n	800f97a <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f95e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f962:	f003 0320 	and.w	r3, r3, #32
 800f966:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d106      	bne.n	800f97a <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f96c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f974:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f976:	2b00      	cmp	r3, #0
 800f978:	d006      	beq.n	800f988 <ProcessRadioRxDone+0x638>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f97a:	4b6c      	ldr	r3, [pc, #432]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800f97c:	2201      	movs	r2, #1
 800f97e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800f982:	f7ff fcbf 	bl	800f304 <PrepareRxDoneAbort>
                return;
 800f986:	e203      	b.n	800fd90 <ProcessRadioRxDone+0xa40>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800f988:	7bb9      	ldrb	r1, [r7, #14]
 800f98a:	4c67      	ldr	r4, [pc, #412]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800f98c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800f990:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800f994:	f107 0310 	add.w	r3, r7, #16
 800f998:	9301      	str	r3, [sp, #4]
 800f99a:	f107 030f 	add.w	r3, r7, #15
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800f9a4:	f000 feec 	bl	8010780 <GetFCntDown>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f9ae:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d017      	beq.n	800f9e6 <ProcessRadioRxDone+0x696>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f9b6:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f9ba:	2b07      	cmp	r3, #7
 800f9bc:	d104      	bne.n	800f9c8 <ProcessRadioRxDone+0x678>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f9be:	4b5b      	ldr	r3, [pc, #364]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800f9c0:	2208      	movs	r2, #8
 800f9c2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800f9c6:	e003      	b.n	800f9d0 <ProcessRadioRxDone+0x680>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f9c8:	4b58      	ldr	r3, [pc, #352]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	4a56      	ldr	r2, [pc, #344]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800f9d4:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	4a54      	ldr	r2, [pc, #336]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800f9dc:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800f9e0:	f7ff fc90 	bl	800f304 <PrepareRxDoneAbort>
                return;
 800f9e4:	e1d4      	b.n	800fd90 <ProcessRadioRxDone+0xa40>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f9e6:	7bfa      	ldrb	r2, [r7, #15]
 800f9e8:	6939      	ldr	r1, [r7, #16]
 800f9ea:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800f9ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f9f2:	9300      	str	r3, [sp, #0]
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800f9fa:	f005 ff4f 	bl	801589c <LoRaMacCryptoUnsecureMessage>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fa04:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00f      	beq.n	800fa2c <ProcessRadioRxDone+0x6dc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800fa0c:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800fa10:	2b02      	cmp	r3, #2
 800fa12:	d104      	bne.n	800fa1e <ProcessRadioRxDone+0x6ce>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800fa14:	4b45      	ldr	r3, [pc, #276]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fa16:	220a      	movs	r2, #10
 800fa18:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800fa1c:	e003      	b.n	800fa26 <ProcessRadioRxDone+0x6d6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800fa1e:	4b43      	ldr	r3, [pc, #268]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fa20:	220b      	movs	r2, #11
 800fa22:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 800fa26:	f7ff fc6d 	bl	800f304 <PrepareRxDoneAbort>
                return;
 800fa2a:	e1b1      	b.n	800fd90 <ProcessRadioRxDone+0xa40>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fa2c:	4b3f      	ldr	r3, [pc, #252]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800fa34:	4a3d      	ldr	r2, [pc, #244]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fa36:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800fa3a:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800fa3e:	4b3b      	ldr	r3, [pc, #236]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fa40:	2200      	movs	r2, #0
 800fa42:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800fa46:	4b39      	ldr	r3, [pc, #228]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fa48:	2200      	movs	r2, #0
 800fa4a:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	4a36      	ldr	r2, [pc, #216]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fa52:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	4a34      	ldr	r2, [pc, #208]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fa5a:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800fa5e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fa62:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	bf14      	ite	ne
 800fa6c:	2301      	movne	r3, #1
 800fa6e:	2300      	moveq	r3, #0
 800fa70:	b2da      	uxtb	r2, r3
 800fa72:	4b2e      	ldr	r3, [pc, #184]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fa74:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fa78:	4b2c      	ldr	r3, [pc, #176]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800fa80:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fa84:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	bf14      	ite	ne
 800fa8e:	2301      	movne	r3, #1
 800fa90:	2300      	moveq	r3, #0
 800fa92:	b2da      	uxtb	r2, r3
 800fa94:	4b25      	ldr	r3, [pc, #148]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fa96:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800fa9a:	4b24      	ldr	r3, [pc, #144]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fa9c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d004      	beq.n	800faae <ProcessRadioRxDone+0x75e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800faa4:	4b21      	ldr	r3, [pc, #132]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800faa6:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800faaa:	2b01      	cmp	r3, #1
 800faac:	d106      	bne.n	800fabc <ProcessRadioRxDone+0x76c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800faae:	4b1e      	ldr	r3, [pc, #120]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800fab0:	2200      	movs	r2, #0
 800fab2:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800fab4:	4b1c      	ldr	r3, [pc, #112]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800fab6:	2201      	movs	r2, #1
 800fab8:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800fabc:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d104      	bne.n	800face <ProcessRadioRxDone+0x77e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800fac4:	4b19      	ldr	r3, [pc, #100]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fac6:	2202      	movs	r2, #2
 800fac8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800facc:	e03a      	b.n	800fb44 <ProcessRadioRxDone+0x7f4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800face:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fad2:	f023 031f 	bic.w	r3, r3, #31
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	2ba0      	cmp	r3, #160	@ 0xa0
 800fada:	d12b      	bne.n	800fb34 <ProcessRadioRxDone+0x7e4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800fadc:	4b12      	ldr	r3, [pc, #72]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800fae4:	4b10      	ldr	r3, [pc, #64]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800fae6:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800faea:	2b00      	cmp	r3, #0
 800faec:	d102      	bne.n	800faf4 <ProcessRadioRxDone+0x7a4>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800faee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800faf0:	4a0d      	ldr	r2, [pc, #52]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800faf2:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800faf4:	4b0d      	ldr	r3, [pc, #52]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800faf6:	2201      	movs	r2, #1
 800faf8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800fafc:	4b0b      	ldr	r3, [pc, #44]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fafe:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d01e      	beq.n	800fb44 <ProcessRadioRxDone+0x7f4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800fb06:	4b09      	ldr	r3, [pc, #36]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fb08:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800fb0c:	2b01      	cmp	r3, #1
 800fb0e:	d019      	beq.n	800fb44 <ProcessRadioRxDone+0x7f4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800fb10:	4b05      	ldr	r3, [pc, #20]	@ (800fb28 <ProcessRadioRxDone+0x7d8>)
 800fb12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb16:	4a05      	ldr	r2, [pc, #20]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fb18:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800fb1c:	4b04      	ldr	r3, [pc, #16]	@ (800fb30 <ProcessRadioRxDone+0x7e0>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	4a02      	ldr	r2, [pc, #8]	@ (800fb2c <ProcessRadioRxDone+0x7dc>)
 800fb22:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 800fb26:	e00d      	b.n	800fb44 <ProcessRadioRxDone+0x7f4>
 800fb28:	20000dc4 	.word	0x20000dc4
 800fb2c:	20000890 	.word	0x20000890
 800fb30:	200019d4 	.word	0x200019d4
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800fb34:	4b98      	ldr	r3, [pc, #608]	@ (800fd98 <ProcessRadioRxDone+0xa48>)
 800fb36:	2200      	movs	r2, #0
 800fb38:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fb3c:	4b97      	ldr	r3, [pc, #604]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                }
            }

            // Set the pending status
			// Fix for Class C Certification test. Re-enabled part of if condition previously removed.
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 800fb44:	4b94      	ldr	r3, [pc, #592]	@ (800fd98 <ProcessRadioRxDone+0xa48>)
 800fb46:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d106      	bne.n	800fb5c <ProcessRadioRxDone+0x80c>
 800fb4e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fb52:	f003 0310 	and.w	r3, r3, #16
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d004      	beq.n	800fb66 <ProcessRadioRxDone+0x816>
 800fb5c:	4b8e      	ldr	r3, [pc, #568]	@ (800fd98 <ProcessRadioRxDone+0xa48>)
 800fb5e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d004      	beq.n	800fb70 <ProcessRadioRxDone+0x820>
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) 
 800fb66:	4b8d      	ldr	r3, [pc, #564]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fb68:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d003      	beq.n	800fb78 <ProcessRadioRxDone+0x828>
            //if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800fb70:	4b8a      	ldr	r3, [pc, #552]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fb72:	2201      	movs	r2, #1
 800fb74:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800fb78:	4b88      	ldr	r3, [pc, #544]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fb7a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fb7e:	4a87      	ldr	r2, [pc, #540]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fb80:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 800fb84:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f001 ffa5 	bl	8011ad8 <RemoveMacCommands>

            switch( fType )
 800fb8e:	7bbb      	ldrb	r3, [r7, #14]
 800fb90:	2b03      	cmp	r3, #3
 800fb92:	d874      	bhi.n	800fc7e <ProcessRadioRxDone+0x92e>
 800fb94:	a201      	add	r2, pc, #4	@ (adr r2, 800fb9c <ProcessRadioRxDone+0x84c>)
 800fb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb9a:	bf00      	nop
 800fb9c:	0800fbad 	.word	0x0800fbad
 800fba0:	0800fbfd 	.word	0x0800fbfd
 800fba4:	0800fc33 	.word	0x0800fc33
 800fba8:	0800fc59 	.word	0x0800fc59
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800fbac:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fbb0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	461c      	mov	r4, r3
 800fbb8:	4b78      	ldr	r3, [pc, #480]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fbba:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fbbe:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800fbc2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800fbc6:	f102 0010 	add.w	r0, r2, #16
 800fbca:	9300      	str	r3, [sp, #0]
 800fbcc:	460b      	mov	r3, r1
 800fbce:	4622      	mov	r2, r4
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	f000 ff51 	bl	8010a78 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fbd6:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fbda:	4b70      	ldr	r3, [pc, #448]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fbdc:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fbe0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fbe2:	4a6e      	ldr	r2, [pc, #440]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fbe4:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fbe8:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800fbec:	4b6b      	ldr	r3, [pc, #428]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fbee:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800fbf2:	4b6a      	ldr	r3, [pc, #424]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800fbfa:	e047      	b.n	800fc8c <ProcessRadioRxDone+0x93c>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800fbfc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fc00:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	461c      	mov	r4, r3
 800fc08:	4b64      	ldr	r3, [pc, #400]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fc0a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fc0e:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800fc12:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800fc16:	f102 0010 	add.w	r0, r2, #16
 800fc1a:	9300      	str	r3, [sp, #0]
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	4622      	mov	r2, r4
 800fc20:	2100      	movs	r1, #0
 800fc22:	f000 ff29 	bl	8010a78 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fc26:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fc2a:	4b5c      	ldr	r3, [pc, #368]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fc2c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800fc30:	e02c      	b.n	800fc8c <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800fc32:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800fc34:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800fc38:	4b58      	ldr	r3, [pc, #352]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fc3a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fc3e:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800fc42:	9300      	str	r3, [sp, #0]
 800fc44:	460b      	mov	r3, r1
 800fc46:	2100      	movs	r1, #0
 800fc48:	f000 ff16 	bl	8010a78 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fc4c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fc50:	4b52      	ldr	r3, [pc, #328]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fc52:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800fc56:	e019      	b.n	800fc8c <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fc58:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fc5c:	4b4f      	ldr	r3, [pc, #316]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fc5e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fc62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc64:	4a4d      	ldr	r2, [pc, #308]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fc66:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fc6a:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800fc6e:	4b4b      	ldr	r3, [pc, #300]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fc70:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800fc74:	4b49      	ldr	r3, [pc, #292]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fc76:	2201      	movs	r2, #1
 800fc78:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800fc7c:	e006      	b.n	800fc8c <ProcessRadioRxDone+0x93c>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc7e:	4b47      	ldr	r3, [pc, #284]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fc80:	2201      	movs	r2, #1
 800fc82:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 800fc86:	f7ff fb3d 	bl	800f304 <PrepareRxDoneAbort>
                    break;
 800fc8a:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800fc8c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800fc90:	2be0      	cmp	r3, #224	@ 0xe0
 800fc92:	d118      	bne.n	800fcc6 <ProcessRadioRxDone+0x976>
 800fc94:	4b40      	ldr	r3, [pc, #256]	@ (800fd98 <ProcessRadioRxDone+0xa48>)
 800fc96:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800fc9a:	f083 0301 	eor.w	r3, r3, #1
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d010      	beq.n	800fcc6 <ProcessRadioRxDone+0x976>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fca4:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fca8:	4b3c      	ldr	r3, [pc, #240]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fcaa:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800fcae:	4b3b      	ldr	r3, [pc, #236]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800fcb6:	4b39      	ldr	r3, [pc, #228]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fcb8:	2200      	movs	r2, #0
 800fcba:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 800fcbe:	4b37      	ldr	r3, [pc, #220]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fcc6:	4a35      	ldr	r2, [pc, #212]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fcc8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fccc:	f043 0302 	orr.w	r3, r3, #2
 800fcd0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 800fcd4:	e037      	b.n	800fd46 <ProcessRadioRxDone+0x9f6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800fcd6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fcda:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fcde:	18d1      	adds	r1, r2, r3
 800fce0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800fcea:	1ad3      	subs	r3, r2, r3
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	461a      	mov	r2, r3
 800fcf0:	482b      	ldr	r0, [pc, #172]	@ (800fda0 <ProcessRadioRxDone+0xa50>)
 800fcf2:	f008 fc14 	bl	801851e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800fcf6:	4b29      	ldr	r3, [pc, #164]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fcf8:	2203      	movs	r2, #3
 800fcfa:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fcfe:	4b27      	ldr	r3, [pc, #156]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fd00:	2200      	movs	r2, #0
 800fd02:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800fd06:	4b25      	ldr	r3, [pc, #148]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fd08:	4a25      	ldr	r2, [pc, #148]	@ (800fda0 <ProcessRadioRxDone+0xa50>)
 800fd0a:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800fd0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fd12:	b2da      	uxtb	r2, r3
 800fd14:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fd18:	1ad3      	subs	r3, r2, r3
 800fd1a:	b2da      	uxtb	r2, r3
 800fd1c:	4b1f      	ldr	r3, [pc, #124]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fd1e:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fd22:	4a1e      	ldr	r2, [pc, #120]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fd24:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fd28:	f043 0302 	orr.w	r3, r3, #2
 800fd2c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 800fd30:	e009      	b.n	800fd46 <ProcessRadioRxDone+0x9f6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd32:	4b1a      	ldr	r3, [pc, #104]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fd34:	2201      	movs	r2, #1
 800fd36:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 800fd3a:	f7ff fae3 	bl	800f304 <PrepareRxDoneAbort>
            break;
 800fd3e:	e002      	b.n	800fd46 <ProcessRadioRxDone+0x9f6>
                        break;
 800fd40:	bf00      	nop
 800fd42:	e000      	b.n	800fd46 <ProcessRadioRxDone+0x9f6>
            break;
 800fd44:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800fd46:	4b15      	ldr	r3, [pc, #84]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fd48:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d004      	beq.n	800fd5a <ProcessRadioRxDone+0xa0a>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800fd50:	4b12      	ldr	r3, [pc, #72]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fd52:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800fd56:	2b01      	cmp	r3, #1
 800fd58:	d10c      	bne.n	800fd74 <ProcessRadioRxDone+0xa24>
    {
        if( MacCtx.NodeAckRequested == true )
 800fd5a:	4b10      	ldr	r3, [pc, #64]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fd5c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d007      	beq.n	800fd74 <ProcessRadioRxDone+0xa24>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800fd64:	4b0d      	ldr	r3, [pc, #52]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fd66:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d002      	beq.n	800fd74 <ProcessRadioRxDone+0xa24>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800fd6e:	2000      	movs	r0, #0
 800fd70:	f000 fcec 	bl	801074c <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800fd74:	4b09      	ldr	r3, [pc, #36]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fd76:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fd7a:	2b02      	cmp	r3, #2
 800fd7c:	d006      	beq.n	800fd8c <ProcessRadioRxDone+0xa3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800fd7e:	4a07      	ldr	r2, [pc, #28]	@ (800fd9c <ProcessRadioRxDone+0xa4c>)
 800fd80:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fd84:	f043 0310 	orr.w	r3, r3, #16
 800fd88:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800fd8c:	f7ff f9fc 	bl	800f188 <UpdateRxSlotIdleState>
}
 800fd90:	379c      	adds	r7, #156	@ 0x9c
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd90      	pop	{r4, r7, pc}
 800fd96:	bf00      	nop
 800fd98:	20000dc4 	.word	0x20000dc4
 800fd9c:	20000890 	.word	0x20000890
 800fda0:	20000ac8 	.word	0x20000ac8

0800fda4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fda8:	4b11      	ldr	r3, [pc, #68]	@ (800fdf0 <ProcessRadioTxTimeout+0x4c>)
 800fdaa:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fdae:	2b02      	cmp	r3, #2
 800fdb0:	d002      	beq.n	800fdb8 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800fdb2:	4b10      	ldr	r3, [pc, #64]	@ (800fdf4 <ProcessRadioTxTimeout+0x50>)
 800fdb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdb6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800fdb8:	f7ff f9e6 	bl	800f188 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800fdbc:	4b0e      	ldr	r3, [pc, #56]	@ (800fdf8 <ProcessRadioTxTimeout+0x54>)
 800fdbe:	2202      	movs	r2, #2
 800fdc0:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800fdc4:	2002      	movs	r0, #2
 800fdc6:	f004 fee3 	bl	8014b90 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800fdca:	4b0b      	ldr	r3, [pc, #44]	@ (800fdf8 <ProcessRadioTxTimeout+0x54>)
 800fdcc:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d003      	beq.n	800fddc <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800fdd4:	4b08      	ldr	r3, [pc, #32]	@ (800fdf8 <ProcessRadioTxTimeout+0x54>)
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fddc:	4a06      	ldr	r2, [pc, #24]	@ (800fdf8 <ProcessRadioTxTimeout+0x54>)
 800fdde:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fde2:	f043 0310 	orr.w	r3, r3, #16
 800fde6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800fdea:	bf00      	nop
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	20000dc4 	.word	0x20000dc4
 800fdf4:	0801e044 	.word	0x0801e044
 800fdf8:	20000890 	.word	0x20000890

0800fdfc <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	4603      	mov	r3, r0
 800fe04:	460a      	mov	r2, r1
 800fe06:	71fb      	strb	r3, [r7, #7]
 800fe08:	4613      	mov	r3, r2
 800fe0a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fe10:	4b3d      	ldr	r3, [pc, #244]	@ (800ff08 <HandleRadioRxErrorTimeout+0x10c>)
 800fe12:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fe16:	2b02      	cmp	r3, #2
 800fe18:	d002      	beq.n	800fe20 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800fe1a:	4b3c      	ldr	r3, [pc, #240]	@ (800ff0c <HandleRadioRxErrorTimeout+0x110>)
 800fe1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe1e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fe20:	f004 f9e0 	bl	80141e4 <LoRaMacClassBIsBeaconExpected>
 800fe24:	4603      	mov	r3, r0
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d007      	beq.n	800fe3a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800fe2a:	2002      	movs	r0, #2
 800fe2c:	f004 f98e 	bl	801414c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800fe30:	2000      	movs	r0, #0
 800fe32:	f004 f9b0 	bl	8014196 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800fe36:	2301      	movs	r3, #1
 800fe38:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fe3a:	4b33      	ldr	r3, [pc, #204]	@ (800ff08 <HandleRadioRxErrorTimeout+0x10c>)
 800fe3c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	d119      	bne.n	800fe78 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fe44:	f004 f9d5 	bl	80141f2 <LoRaMacClassBIsPingExpected>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d007      	beq.n	800fe5e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fe4e:	2000      	movs	r0, #0
 800fe50:	f004 f986 	bl	8014160 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fe54:	2000      	movs	r0, #0
 800fe56:	f004 f9a7 	bl	80141a8 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fe5e:	f004 f9cf 	bl	8014200 <LoRaMacClassBIsMulticastExpected>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d007      	beq.n	800fe78 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fe68:	2000      	movs	r0, #0
 800fe6a:	f004 f983 	bl	8014174 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fe6e:	2000      	movs	r0, #0
 800fe70:	f004 f9a3 	bl	80141ba <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800fe74:	2301      	movs	r3, #1
 800fe76:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800fe78:	7bfb      	ldrb	r3, [r7, #15]
 800fe7a:	f083 0301 	eor.w	r3, r3, #1
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d03b      	beq.n	800fefc <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fe84:	4b22      	ldr	r3, [pc, #136]	@ (800ff10 <HandleRadioRxErrorTimeout+0x114>)
 800fe86:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d122      	bne.n	800fed4 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800fe8e:	4b20      	ldr	r3, [pc, #128]	@ (800ff10 <HandleRadioRxErrorTimeout+0x114>)
 800fe90:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d003      	beq.n	800fea0 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800fe98:	4a1d      	ldr	r2, [pc, #116]	@ (800ff10 <HandleRadioRxErrorTimeout+0x114>)
 800fe9a:	79fb      	ldrb	r3, [r7, #7]
 800fe9c:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800fea0:	79fb      	ldrb	r3, [r7, #7]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f004 fe74 	bl	8014b90 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800fea8:	4b17      	ldr	r3, [pc, #92]	@ (800ff08 <HandleRadioRxErrorTimeout+0x10c>)
 800feaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feac:	4618      	mov	r0, r3
 800feae:	f00c fdb5 	bl	801ca1c <UTIL_TIMER_GetElapsedTime>
 800feb2:	4602      	mov	r2, r0
 800feb4:	4b16      	ldr	r3, [pc, #88]	@ (800ff10 <HandleRadioRxErrorTimeout+0x114>)
 800feb6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800feba:	429a      	cmp	r2, r3
 800febc:	d31e      	bcc.n	800fefc <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800febe:	4815      	ldr	r0, [pc, #84]	@ (800ff14 <HandleRadioRxErrorTimeout+0x118>)
 800fec0:	f00c fc80 	bl	801c7c4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fec4:	4a12      	ldr	r2, [pc, #72]	@ (800ff10 <HandleRadioRxErrorTimeout+0x114>)
 800fec6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800feca:	f043 0310 	orr.w	r3, r3, #16
 800fece:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800fed2:	e013      	b.n	800fefc <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800fed4:	4b0e      	ldr	r3, [pc, #56]	@ (800ff10 <HandleRadioRxErrorTimeout+0x114>)
 800fed6:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d003      	beq.n	800fee6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800fede:	4a0c      	ldr	r2, [pc, #48]	@ (800ff10 <HandleRadioRxErrorTimeout+0x114>)
 800fee0:	79bb      	ldrb	r3, [r7, #6]
 800fee2:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800fee6:	79bb      	ldrb	r3, [r7, #6]
 800fee8:	4618      	mov	r0, r3
 800feea:	f004 fe51 	bl	8014b90 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800feee:	4a08      	ldr	r2, [pc, #32]	@ (800ff10 <HandleRadioRxErrorTimeout+0x114>)
 800fef0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fef4:	f043 0310 	orr.w	r3, r3, #16
 800fef8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800fefc:	f7ff f944 	bl	800f188 <UpdateRxSlotIdleState>
}
 800ff00:	bf00      	nop
 800ff02:	3710      	adds	r7, #16
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	20000dc4 	.word	0x20000dc4
 800ff0c:	0801e044 	.word	0x0801e044
 800ff10:	20000890 	.word	0x20000890
 800ff14:	20000c28 	.word	0x20000c28

0800ff18 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800ff1c:	2106      	movs	r1, #6
 800ff1e:	2005      	movs	r0, #5
 800ff20:	f7ff ff6c 	bl	800fdfc <HandleRadioRxErrorTimeout>
}
 800ff24:	bf00      	nop
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800ff2c:	2104      	movs	r1, #4
 800ff2e:	2003      	movs	r0, #3
 800ff30:	f7ff ff64 	bl	800fdfc <HandleRadioRxErrorTimeout>
}
 800ff34:	bf00      	nop
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff3e:	f3ef 8310 	mrs	r3, PRIMASK
 800ff42:	607b      	str	r3, [r7, #4]
  return(result);
 800ff44:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800ff46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff48:	b672      	cpsid	i
}
 800ff4a:	bf00      	nop
    events = LoRaMacRadioEvents;
 800ff4c:	4b1d      	ldr	r3, [pc, #116]	@ (800ffc4 <LoRaMacHandleIrqEvents+0x8c>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800ff52:	4b1c      	ldr	r3, [pc, #112]	@ (800ffc4 <LoRaMacHandleIrqEvents+0x8c>)
 800ff54:	2200      	movs	r2, #0
 800ff56:	601a      	str	r2, [r3, #0]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	f383 8810 	msr	PRIMASK, r3
}
 800ff62:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d027      	beq.n	800ffba <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800ff6a:	783b      	ldrb	r3, [r7, #0]
 800ff6c:	f003 0320 	and.w	r3, r3, #32
 800ff70:	b2db      	uxtb	r3, r3
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d001      	beq.n	800ff7a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800ff76:	f7ff f91f 	bl	800f1b8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800ff7a:	783b      	ldrb	r3, [r7, #0]
 800ff7c:	f003 0310 	and.w	r3, r3, #16
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d001      	beq.n	800ff8a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800ff86:	f7ff f9e3 	bl	800f350 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800ff8a:	783b      	ldrb	r3, [r7, #0]
 800ff8c:	f003 0308 	and.w	r3, r3, #8
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d001      	beq.n	800ff9a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800ff96:	f7ff ff05 	bl	800fda4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800ff9a:	783b      	ldrb	r3, [r7, #0]
 800ff9c:	f003 0304 	and.w	r3, r3, #4
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d001      	beq.n	800ffaa <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800ffa6:	f7ff ffb7 	bl	800ff18 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800ffaa:	783b      	ldrb	r3, [r7, #0]
 800ffac:	f003 0302 	and.w	r3, r3, #2
 800ffb0:	b2db      	uxtb	r3, r3
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d001      	beq.n	800ffba <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800ffb6:	f7ff ffb7 	bl	800ff28 <ProcessRadioRxTimeout>
        }
    }
}
 800ffba:	bf00      	nop
 800ffbc:	3710      	adds	r7, #16
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	200019cc 	.word	0x200019cc

0800ffc8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800ffc8:	b480      	push	{r7}
 800ffca:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800ffcc:	4b10      	ldr	r3, [pc, #64]	@ (8010010 <LoRaMacIsBusy+0x48>)
 800ffce:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d101      	bne.n	800ffda <LoRaMacIsBusy+0x12>
    {
        return false;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	e015      	b.n	8010006 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800ffda:	4b0e      	ldr	r3, [pc, #56]	@ (8010014 <LoRaMacIsBusy+0x4c>)
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	f003 0301 	and.w	r3, r3, #1
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d001      	beq.n	800ffec <LoRaMacIsBusy+0x24>
    {
        return true;
 800ffe8:	2301      	movs	r3, #1
 800ffea:	e00c      	b.n	8010006 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ffec:	4b08      	ldr	r3, [pc, #32]	@ (8010010 <LoRaMacIsBusy+0x48>)
 800ffee:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d106      	bne.n	8010004 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800fff6:	4b06      	ldr	r3, [pc, #24]	@ (8010010 <LoRaMacIsBusy+0x48>)
 800fff8:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d101      	bne.n	8010004 <LoRaMacIsBusy+0x3c>
    {
        return false;
 8010000:	2300      	movs	r3, #0
 8010002:	e000      	b.n	8010006 <LoRaMacIsBusy+0x3e>
    }
    return true;
 8010004:	2301      	movs	r3, #1
}
 8010006:	4618      	mov	r0, r3
 8010008:	46bd      	mov	sp, r7
 801000a:	bc80      	pop	{r7}
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	20000890 	.word	0x20000890
 8010014:	200019cc 	.word	0x200019cc

08010018 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8010018:	b480      	push	{r7}
 801001a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 801001c:	4b05      	ldr	r3, [pc, #20]	@ (8010034 <LoRaMacIsStopped+0x1c>)
 801001e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010022:	2b01      	cmp	r3, #1
 8010024:	d101      	bne.n	801002a <LoRaMacIsStopped+0x12>
    {
        return true;
 8010026:	2301      	movs	r3, #1
 8010028:	e000      	b.n	801002c <LoRaMacIsStopped+0x14>
    }
    return false;
 801002a:	2300      	movs	r3, #0
}
 801002c:	4618      	mov	r0, r3
 801002e:	46bd      	mov	sp, r7
 8010030:	bc80      	pop	{r7}
 8010032:	4770      	bx	lr
 8010034:	20000890 	.word	0x20000890

08010038 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	4603      	mov	r3, r0
 8010040:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8010042:	4a04      	ldr	r2, [pc, #16]	@ (8010054 <LoRaMacEnableRequests+0x1c>)
 8010044:	79fb      	ldrb	r3, [r7, #7]
 8010046:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 801004a:	bf00      	nop
 801004c:	370c      	adds	r7, #12
 801004e:	46bd      	mov	sp, r7
 8010050:	bc80      	pop	{r7}
 8010052:	4770      	bx	lr
 8010054:	20000890 	.word	0x20000890

08010058 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 801005e:	4b2c      	ldr	r3, [pc, #176]	@ (8010110 <LoRaMacHandleRequestEvents+0xb8>)
 8010060:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010064:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8010066:	4b2a      	ldr	r3, [pc, #168]	@ (8010110 <LoRaMacHandleRequestEvents+0xb8>)
 8010068:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801006c:	2b00      	cmp	r3, #0
 801006e:	d14a      	bne.n	8010106 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010070:	4b27      	ldr	r3, [pc, #156]	@ (8010110 <LoRaMacHandleRequestEvents+0xb8>)
 8010072:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010076:	f003 0301 	and.w	r3, r3, #1
 801007a:	b2db      	uxtb	r3, r3
 801007c:	2b00      	cmp	r3, #0
 801007e:	d006      	beq.n	801008e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010080:	4a23      	ldr	r2, [pc, #140]	@ (8010110 <LoRaMacHandleRequestEvents+0xb8>)
 8010082:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010086:	f023 0301 	bic.w	r3, r3, #1
 801008a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801008e:	4b20      	ldr	r3, [pc, #128]	@ (8010110 <LoRaMacHandleRequestEvents+0xb8>)
 8010090:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010094:	f003 0304 	and.w	r3, r3, #4
 8010098:	b2db      	uxtb	r3, r3
 801009a:	2b00      	cmp	r3, #0
 801009c:	d006      	beq.n	80100ac <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801009e:	4a1c      	ldr	r2, [pc, #112]	@ (8010110 <LoRaMacHandleRequestEvents+0xb8>)
 80100a0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80100a4:	f023 0304 	bic.w	r3, r3, #4
 80100a8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80100ac:	2001      	movs	r0, #1
 80100ae:	f7ff ffc3 	bl	8010038 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 80100b2:	793b      	ldrb	r3, [r7, #4]
 80100b4:	f003 0301 	and.w	r3, r3, #1
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d005      	beq.n	80100ca <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80100be:	4b14      	ldr	r3, [pc, #80]	@ (8010110 <LoRaMacHandleRequestEvents+0xb8>)
 80100c0:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4813      	ldr	r0, [pc, #76]	@ (8010114 <LoRaMacHandleRequestEvents+0xbc>)
 80100c8:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 80100ca:	793b      	ldrb	r3, [r7, #4]
 80100cc:	f003 0304 	and.w	r3, r3, #4
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d00e      	beq.n	80100f4 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80100d6:	4810      	ldr	r0, [pc, #64]	@ (8010118 <LoRaMacHandleRequestEvents+0xc0>)
 80100d8:	f004 fda8 	bl	8014c2c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80100dc:	f004 fdf8 	bl	8014cd0 <LoRaMacConfirmQueueGetCnt>
 80100e0:	4603      	mov	r3, r0
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d006      	beq.n	80100f4 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80100e6:	4a0a      	ldr	r2, [pc, #40]	@ (8010110 <LoRaMacHandleRequestEvents+0xb8>)
 80100e8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80100ec:	f043 0304 	orr.w	r3, r3, #4
 80100f0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80100f4:	f004 f8a2 	bl	801423c <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80100f8:	4a05      	ldr	r2, [pc, #20]	@ (8010110 <LoRaMacHandleRequestEvents+0xb8>)
 80100fa:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80100fe:	f023 0310 	bic.w	r3, r3, #16
 8010102:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8010106:	bf00      	nop
 8010108:	3708      	adds	r7, #8
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	20000890 	.word	0x20000890
 8010114:	20000cd0 	.word	0x20000cd0
 8010118:	20000ce4 	.word	0x20000ce4

0801011c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 801011c:	b580      	push	{r7, lr}
 801011e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010120:	4b16      	ldr	r3, [pc, #88]	@ (801017c <LoRaMacHandleIndicationEvents+0x60>)
 8010122:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010126:	f003 0308 	and.w	r3, r3, #8
 801012a:	b2db      	uxtb	r3, r3
 801012c:	2b00      	cmp	r3, #0
 801012e:	d00d      	beq.n	801014c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010130:	4a12      	ldr	r2, [pc, #72]	@ (801017c <LoRaMacHandleIndicationEvents+0x60>)
 8010132:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010136:	f023 0308 	bic.w	r3, r3, #8
 801013a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 801013e:	4b0f      	ldr	r3, [pc, #60]	@ (801017c <LoRaMacHandleIndicationEvents+0x60>)
 8010140:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010144:	68db      	ldr	r3, [r3, #12]
 8010146:	490e      	ldr	r1, [pc, #56]	@ (8010180 <LoRaMacHandleIndicationEvents+0x64>)
 8010148:	480e      	ldr	r0, [pc, #56]	@ (8010184 <LoRaMacHandleIndicationEvents+0x68>)
 801014a:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801014c:	4b0b      	ldr	r3, [pc, #44]	@ (801017c <LoRaMacHandleIndicationEvents+0x60>)
 801014e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010152:	f003 0302 	and.w	r3, r3, #2
 8010156:	b2db      	uxtb	r3, r3
 8010158:	2b00      	cmp	r3, #0
 801015a:	d00d      	beq.n	8010178 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 801015c:	4a07      	ldr	r2, [pc, #28]	@ (801017c <LoRaMacHandleIndicationEvents+0x60>)
 801015e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010162:	f023 0302 	bic.w	r3, r3, #2
 8010166:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 801016a:	4b04      	ldr	r3, [pc, #16]	@ (801017c <LoRaMacHandleIndicationEvents+0x60>)
 801016c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	4903      	ldr	r1, [pc, #12]	@ (8010180 <LoRaMacHandleIndicationEvents+0x64>)
 8010174:	4804      	ldr	r0, [pc, #16]	@ (8010188 <LoRaMacHandleIndicationEvents+0x6c>)
 8010176:	4798      	blx	r3
    }
}
 8010178:	bf00      	nop
 801017a:	bd80      	pop	{r7, pc}
 801017c:	20000890 	.word	0x20000890
 8010180:	20000d1c 	.word	0x20000d1c
 8010184:	20000cf8 	.word	0x20000cf8
 8010188:	20000cb0 	.word	0x20000cb0

0801018c <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010192:	4b2a      	ldr	r3, [pc, #168]	@ (801023c <LoRaMacHandleMcpsRequest+0xb0>)
 8010194:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010198:	f003 0301 	and.w	r3, r3, #1
 801019c:	b2db      	uxtb	r3, r3
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d048      	beq.n	8010234 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 80101a2:	2300      	movs	r3, #0
 80101a4:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 80101a6:	2300      	movs	r3, #0
 80101a8:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80101aa:	4b24      	ldr	r3, [pc, #144]	@ (801023c <LoRaMacHandleMcpsRequest+0xb0>)
 80101ac:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d004      	beq.n	80101be <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 80101b4:	4b21      	ldr	r3, [pc, #132]	@ (801023c <LoRaMacHandleMcpsRequest+0xb0>)
 80101b6:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80101ba:	2b03      	cmp	r3, #3
 80101bc:	d104      	bne.n	80101c8 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80101be:	f002 f959 	bl	8012474 <CheckRetransUnconfirmedUplink>
 80101c2:	4603      	mov	r3, r0
 80101c4:	71fb      	strb	r3, [r7, #7]
 80101c6:	e010      	b.n	80101ea <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80101c8:	4b1c      	ldr	r3, [pc, #112]	@ (801023c <LoRaMacHandleMcpsRequest+0xb0>)
 80101ca:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d10b      	bne.n	80101ea <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 80101d2:	4b1a      	ldr	r3, [pc, #104]	@ (801023c <LoRaMacHandleMcpsRequest+0xb0>)
 80101d4:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d004      	beq.n	80101e6 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80101dc:	f002 f976 	bl	80124cc <CheckRetransConfirmedUplink>
 80101e0:	4603      	mov	r3, r0
 80101e2:	71fb      	strb	r3, [r7, #7]
 80101e4:	e001      	b.n	80101ea <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 80101e6:	2301      	movs	r3, #1
 80101e8:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 80101ea:	79fb      	ldrb	r3, [r7, #7]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d00d      	beq.n	801020c <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80101f0:	4813      	ldr	r0, [pc, #76]	@ (8010240 <LoRaMacHandleMcpsRequest+0xb4>)
 80101f2:	f00c fae7 	bl	801c7c4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80101f6:	4b11      	ldr	r3, [pc, #68]	@ (801023c <LoRaMacHandleMcpsRequest+0xb0>)
 80101f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80101fc:	f023 0320 	bic.w	r3, r3, #32
 8010200:	4a0e      	ldr	r2, [pc, #56]	@ (801023c <LoRaMacHandleMcpsRequest+0xb0>)
 8010202:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 8010206:	f002 f99b 	bl	8012540 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 801020a:	e013      	b.n	8010234 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 801020c:	79bb      	ldrb	r3, [r7, #6]
 801020e:	f083 0301 	eor.w	r3, r3, #1
 8010212:	b2db      	uxtb	r3, r3
 8010214:	2b00      	cmp	r3, #0
 8010216:	d00d      	beq.n	8010234 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010218:	4a08      	ldr	r2, [pc, #32]	@ (801023c <LoRaMacHandleMcpsRequest+0xb0>)
 801021a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801021e:	f023 0310 	bic.w	r3, r3, #16
 8010222:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8010226:	4b05      	ldr	r3, [pc, #20]	@ (801023c <LoRaMacHandleMcpsRequest+0xb0>)
 8010228:	2200      	movs	r2, #0
 801022a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 801022e:	2000      	movs	r0, #0
 8010230:	f000 f9c8 	bl	80105c4 <OnTxDelayedTimerEvent>
}
 8010234:	bf00      	nop
 8010236:	3708      	adds	r7, #8
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	20000890 	.word	0x20000890
 8010240:	20000bf8 	.word	0x20000bf8

08010244 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010244:	b580      	push	{r7, lr}
 8010246:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010248:	4b18      	ldr	r3, [pc, #96]	@ (80102ac <LoRaMacHandleMlmeRequest+0x68>)
 801024a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801024e:	f003 0304 	and.w	r3, r3, #4
 8010252:	b2db      	uxtb	r3, r3
 8010254:	2b00      	cmp	r3, #0
 8010256:	d026      	beq.n	80102a6 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010258:	2001      	movs	r0, #1
 801025a:	f004 fccd 	bl	8014bf8 <LoRaMacConfirmQueueIsCmdActive>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d012      	beq.n	801028a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010264:	2001      	movs	r0, #1
 8010266:	f004 fc69 	bl	8014b3c <LoRaMacConfirmQueueGetStatus>
 801026a:	4603      	mov	r3, r0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d103      	bne.n	8010278 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010270:	4b0e      	ldr	r3, [pc, #56]	@ (80102ac <LoRaMacHandleMlmeRequest+0x68>)
 8010272:	2200      	movs	r2, #0
 8010274:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010278:	4b0c      	ldr	r3, [pc, #48]	@ (80102ac <LoRaMacHandleMlmeRequest+0x68>)
 801027a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801027e:	f023 0302 	bic.w	r3, r3, #2
 8010282:	4a0a      	ldr	r2, [pc, #40]	@ (80102ac <LoRaMacHandleMlmeRequest+0x68>)
 8010284:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010288:	e00d      	b.n	80102a6 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 801028a:	2006      	movs	r0, #6
 801028c:	f004 fcb4 	bl	8014bf8 <LoRaMacConfirmQueueIsCmdActive>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d007      	beq.n	80102a6 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010296:	4b05      	ldr	r3, [pc, #20]	@ (80102ac <LoRaMacHandleMlmeRequest+0x68>)
 8010298:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801029c:	f023 0302 	bic.w	r3, r3, #2
 80102a0:	4a02      	ldr	r2, [pc, #8]	@ (80102ac <LoRaMacHandleMlmeRequest+0x68>)
 80102a2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 80102a6:	bf00      	nop
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	20000890 	.word	0x20000890

080102b0 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80102b4:	200b      	movs	r0, #11
 80102b6:	f004 fc9f 	bl	8014bf8 <LoRaMacConfirmQueueIsCmdActive>
 80102ba:	4603      	mov	r3, r0
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d019      	beq.n	80102f4 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80102c0:	4b0e      	ldr	r3, [pc, #56]	@ (80102fc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80102c2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80102c6:	f003 0301 	and.w	r3, r3, #1
 80102ca:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d111      	bne.n	80102f4 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80102d0:	4b0a      	ldr	r3, [pc, #40]	@ (80102fc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80102d2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80102d6:	f003 0304 	and.w	r3, r3, #4
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d009      	beq.n	80102f4 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80102e0:	4b06      	ldr	r3, [pc, #24]	@ (80102fc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80102e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80102e6:	f023 0302 	bic.w	r3, r3, #2
 80102ea:	4a04      	ldr	r2, [pc, #16]	@ (80102fc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80102ec:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 80102f0:	2301      	movs	r3, #1
 80102f2:	e000      	b.n	80102f6 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	bd80      	pop	{r7, pc}
 80102fa:	bf00      	nop
 80102fc:	20000890 	.word	0x20000890

08010300 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 8010300:	b480      	push	{r7}
 8010302:	b083      	sub	sp, #12
 8010304:	af00      	add	r7, sp, #0
 8010306:	4603      	mov	r3, r0
 8010308:	71fb      	strb	r3, [r7, #7]
 801030a:	460b      	mov	r3, r1
 801030c:	71bb      	strb	r3, [r7, #6]
 801030e:	4613      	mov	r3, r2
 8010310:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 8010312:	79fb      	ldrb	r3, [r7, #7]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d00a      	beq.n	801032e <CheckForMinimumAbpDatarate+0x2e>
 8010318:	79bb      	ldrb	r3, [r7, #6]
 801031a:	2b01      	cmp	r3, #1
 801031c:	d107      	bne.n	801032e <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 801031e:	797b      	ldrb	r3, [r7, #5]
 8010320:	f083 0301 	eor.w	r3, r3, #1
 8010324:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8010326:	2b00      	cmp	r3, #0
 8010328:	d001      	beq.n	801032e <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 801032a:	2301      	movs	r3, #1
 801032c:	e000      	b.n	8010330 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 801032e:	2300      	movs	r3, #0
}
 8010330:	4618      	mov	r0, r3
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	bc80      	pop	{r7}
 8010338:	4770      	bx	lr
	...

0801033c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 801033c:	b480      	push	{r7}
 801033e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8010340:	4b0d      	ldr	r3, [pc, #52]	@ (8010378 <LoRaMacCheckForRxAbort+0x3c>)
 8010342:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801034a:	2b00      	cmp	r3, #0
 801034c:	d00f      	beq.n	801036e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801034e:	4b0a      	ldr	r3, [pc, #40]	@ (8010378 <LoRaMacCheckForRxAbort+0x3c>)
 8010350:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010354:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010358:	4a07      	ldr	r2, [pc, #28]	@ (8010378 <LoRaMacCheckForRxAbort+0x3c>)
 801035a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801035e:	4b06      	ldr	r3, [pc, #24]	@ (8010378 <LoRaMacCheckForRxAbort+0x3c>)
 8010360:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010364:	f023 0302 	bic.w	r3, r3, #2
 8010368:	4a03      	ldr	r2, [pc, #12]	@ (8010378 <LoRaMacCheckForRxAbort+0x3c>)
 801036a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 801036e:	bf00      	nop
 8010370:	46bd      	mov	sp, r7
 8010372:	bc80      	pop	{r7}
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop
 8010378:	20000890 	.word	0x20000890

0801037c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010384:	2300      	movs	r3, #0
 8010386:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010388:	2300      	movs	r3, #0
 801038a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 801038c:	4b51      	ldr	r3, [pc, #324]	@ (80104d4 <LoRaMacHandleNvm+0x158>)
 801038e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010392:	2b00      	cmp	r3, #0
 8010394:	f040 8099 	bne.w	80104ca <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2124      	movs	r1, #36	@ 0x24
 801039c:	4618      	mov	r0, r3
 801039e:	f008 f913 	bl	80185c8 <Crc32>
 80103a2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103a8:	68ba      	ldr	r2, [r7, #8]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d006      	beq.n	80103bc <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80103b4:	89fb      	ldrh	r3, [r7, #14]
 80103b6:	f043 0301 	orr.w	r3, r3, #1
 80103ba:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	3328      	adds	r3, #40	@ 0x28
 80103c0:	211c      	movs	r1, #28
 80103c2:	4618      	mov	r0, r3
 80103c4:	f008 f900 	bl	80185c8 <Crc32>
 80103c8:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103ce:	68ba      	ldr	r2, [r7, #8]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d006      	beq.n	80103e2 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	68ba      	ldr	r2, [r7, #8]
 80103d8:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80103da:	89fb      	ldrh	r3, [r7, #14]
 80103dc:	f043 0302 	orr.w	r3, r3, #2
 80103e0:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	3348      	adds	r3, #72	@ 0x48
 80103e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80103ea:	4618      	mov	r0, r3
 80103ec:	f008 f8ec 	bl	80185c8 <Crc32>
 80103f0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80103f8:	68ba      	ldr	r2, [r7, #8]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d007      	beq.n	801040e <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	68ba      	ldr	r2, [r7, #8]
 8010402:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8010406:	89fb      	ldrh	r3, [r7, #14]
 8010408:	f043 0304 	orr.w	r3, r3, #4
 801040c:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8010414:	21d4      	movs	r1, #212	@ 0xd4
 8010416:	4618      	mov	r0, r3
 8010418:	f008 f8d6 	bl	80185c8 <Crc32>
 801041c:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8010424:	68ba      	ldr	r2, [r7, #8]
 8010426:	429a      	cmp	r2, r3
 8010428:	d007      	beq.n	801043a <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	68ba      	ldr	r2, [r7, #8]
 801042e:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8010432:	89fb      	ldrh	r3, [r7, #14]
 8010434:	f043 0308 	orr.w	r3, r3, #8
 8010438:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8010440:	2100      	movs	r1, #0
 8010442:	4618      	mov	r0, r3
 8010444:	f008 f8c0 	bl	80185c8 <Crc32>
 8010448:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8010450:	68ba      	ldr	r2, [r7, #8]
 8010452:	429a      	cmp	r2, r3
 8010454:	d007      	beq.n	8010466 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	68ba      	ldr	r2, [r7, #8]
 801045a:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 801045e:	89fb      	ldrh	r3, [r7, #14]
 8010460:	f043 0310 	orr.w	r3, r3, #16
 8010464:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 801046c:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8010470:	4618      	mov	r0, r3
 8010472:	f008 f8a9 	bl	80185c8 <Crc32>
 8010476:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 801047e:	68ba      	ldr	r2, [r7, #8]
 8010480:	429a      	cmp	r2, r3
 8010482:	d007      	beq.n	8010494 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	68ba      	ldr	r2, [r7, #8]
 8010488:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801048c:	89fb      	ldrh	r3, [r7, #14]
 801048e:	f043 0320 	orr.w	r3, r3, #32
 8010492:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f203 53a4 	addw	r3, r3, #1444	@ 0x5a4
 801049a:	2114      	movs	r1, #20
 801049c:	4618      	mov	r0, r3
 801049e:	f008 f893 	bl	80185c8 <Crc32>
 80104a2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 80104aa:	68ba      	ldr	r2, [r7, #8]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d007      	beq.n	80104c0 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	68ba      	ldr	r2, [r7, #8]
 80104b4:	f8c3 25b8 	str.w	r2, [r3, #1464]	@ 0x5b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80104b8:	89fb      	ldrh	r3, [r7, #14]
 80104ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104be:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 80104c0:	89fb      	ldrh	r3, [r7, #14]
 80104c2:	4618      	mov	r0, r3
 80104c4:	f002 f88e 	bl	80125e4 <CallNvmDataChangeCallback>
 80104c8:	e000      	b.n	80104cc <LoRaMacHandleNvm+0x150>
        return;
 80104ca:	bf00      	nop
}
 80104cc:	3710      	adds	r7, #16
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	20000890 	.word	0x20000890

080104d8 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d00d      	beq.n	8010504 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 80104e8:	6838      	ldr	r0, [r7, #0]
 80104ea:	f00c fa97 	bl	801ca1c <UTIL_TIMER_GetElapsedTime>
 80104ee:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d905      	bls.n	8010504 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 80104f8:	4b05      	ldr	r3, [pc, #20]	@ (8010510 <LoRaMacHandleResponseTimeout+0x38>)
 80104fa:	2200      	movs	r2, #0
 80104fc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 8010500:	2301      	movs	r3, #1
 8010502:	e000      	b.n	8010506 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8010504:	2300      	movs	r3, #0
}
 8010506:	4618      	mov	r0, r3
 8010508:	3710      	adds	r7, #16
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	20000dc4 	.word	0x20000dc4

08010514 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 801051a:	2300      	movs	r3, #0
 801051c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 801051e:	f7ff fd0b 	bl	800ff38 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8010522:	f003 fefa 	bl	801431a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8010526:	4b25      	ldr	r3, [pc, #148]	@ (80105bc <LoRaMacProcess+0xa8>)
 8010528:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801052c:	f003 0310 	and.w	r3, r3, #16
 8010530:	b2db      	uxtb	r3, r3
 8010532:	2b00      	cmp	r3, #0
 8010534:	d023      	beq.n	801057e <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8010536:	2000      	movs	r0, #0
 8010538:	f7ff fd7e 	bl	8010038 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 801053c:	f7ff fefe 	bl	801033c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8010540:	f002 f86e 	bl	8012620 <IsRequestPending>
 8010544:	4603      	mov	r3, r0
 8010546:	2b00      	cmp	r3, #0
 8010548:	d006      	beq.n	8010558 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 801054a:	f7ff feb1 	bl	80102b0 <LoRaMacCheckForBeaconAcquisition>
 801054e:	4603      	mov	r3, r0
 8010550:	461a      	mov	r2, r3
 8010552:	79fb      	ldrb	r3, [r7, #7]
 8010554:	4313      	orrs	r3, r2
 8010556:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8010558:	79fb      	ldrb	r3, [r7, #7]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d103      	bne.n	8010566 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 801055e:	f7ff fe71 	bl	8010244 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010562:	f7ff fe13 	bl	801018c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8010566:	f7ff fd77 	bl	8010058 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801056a:	2001      	movs	r0, #1
 801056c:	f7ff fd64 	bl	8010038 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010570:	4a12      	ldr	r2, [pc, #72]	@ (80105bc <LoRaMacProcess+0xa8>)
 8010572:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010576:	f043 0320 	orr.w	r3, r3, #32
 801057a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 801057e:	f7ff fdcd 	bl	801011c <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010582:	4b0e      	ldr	r3, [pc, #56]	@ (80105bc <LoRaMacProcess+0xa8>)
 8010584:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010588:	2b02      	cmp	r3, #2
 801058a:	d101      	bne.n	8010590 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 801058c:	f001 fc32 	bl	8011df4 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010590:	4b0a      	ldr	r3, [pc, #40]	@ (80105bc <LoRaMacProcess+0xa8>)
 8010592:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010596:	f003 0320 	and.w	r3, r3, #32
 801059a:	b2db      	uxtb	r3, r3
 801059c:	2b00      	cmp	r3, #0
 801059e:	d009      	beq.n	80105b4 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 80105a0:	4a06      	ldr	r2, [pc, #24]	@ (80105bc <LoRaMacProcess+0xa8>)
 80105a2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80105a6:	f023 0320 	bic.w	r3, r3, #32
 80105aa:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 80105ae:	4804      	ldr	r0, [pc, #16]	@ (80105c0 <LoRaMacProcess+0xac>)
 80105b0:	f7ff fee4 	bl	801037c <LoRaMacHandleNvm>
    }
}
 80105b4:	bf00      	nop
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	20000890 	.word	0x20000890
 80105c0:	20000dc4 	.word	0x20000dc4

080105c4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 80105cc:	481e      	ldr	r0, [pc, #120]	@ (8010648 <OnTxDelayedTimerEvent+0x84>)
 80105ce:	f00c f8f9 	bl	801c7c4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80105d2:	4b1e      	ldr	r3, [pc, #120]	@ (801064c <OnTxDelayedTimerEvent+0x88>)
 80105d4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80105d8:	f023 0320 	bic.w	r3, r3, #32
 80105dc:	4a1b      	ldr	r2, [pc, #108]	@ (801064c <OnTxDelayedTimerEvent+0x88>)
 80105de:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80105e2:	4b1b      	ldr	r3, [pc, #108]	@ (8010650 <OnTxDelayedTimerEvent+0x8c>)
 80105e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80105e8:	4a18      	ldr	r2, [pc, #96]	@ (801064c <OnTxDelayedTimerEvent+0x88>)
 80105ea:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 80105ee:	4611      	mov	r1, r2
 80105f0:	4618      	mov	r0, r3
 80105f2:	f7ff ff71 	bl	80104d8 <LoRaMacHandleResponseTimeout>
 80105f6:	4603      	mov	r3, r0
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d11e      	bne.n	801063a <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 80105fc:	2001      	movs	r0, #1
 80105fe:	f001 f943 	bl	8011888 <ScheduleTx>
 8010602:	4603      	mov	r3, r0
 8010604:	2b00      	cmp	r3, #0
 8010606:	d01a      	beq.n	801063e <OnTxDelayedTimerEvent+0x7a>
 8010608:	2b0b      	cmp	r3, #11
 801060a:	d018      	beq.n	801063e <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801060c:	4b10      	ldr	r3, [pc, #64]	@ (8010650 <OnTxDelayedTimerEvent+0x8c>)
 801060e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010612:	b2da      	uxtb	r2, r3
 8010614:	4b0d      	ldr	r3, [pc, #52]	@ (801064c <OnTxDelayedTimerEvent+0x88>)
 8010616:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 801061a:	4b0c      	ldr	r3, [pc, #48]	@ (801064c <OnTxDelayedTimerEvent+0x88>)
 801061c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010620:	4b0a      	ldr	r3, [pc, #40]	@ (801064c <OnTxDelayedTimerEvent+0x88>)
 8010622:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010626:	4b09      	ldr	r3, [pc, #36]	@ (801064c <OnTxDelayedTimerEvent+0x88>)
 8010628:	2209      	movs	r2, #9
 801062a:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 801062e:	2009      	movs	r0, #9
 8010630:	f004 faae 	bl	8014b90 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010634:	f001 ff84 	bl	8012540 <StopRetransmission>
            break;
 8010638:	e002      	b.n	8010640 <OnTxDelayedTimerEvent+0x7c>
        return;
 801063a:	bf00      	nop
 801063c:	e000      	b.n	8010640 <OnTxDelayedTimerEvent+0x7c>
            break;
 801063e:	bf00      	nop
        }
    }
}
 8010640:	3708      	adds	r7, #8
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	20000bf8 	.word	0x20000bf8
 801064c:	20000890 	.word	0x20000890
 8010650:	20000dc4 	.word	0x20000dc4

08010654 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 801065c:	4b17      	ldr	r3, [pc, #92]	@ (80106bc <OnRxWindow1TimerEvent+0x68>)
 801065e:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010662:	4b16      	ldr	r3, [pc, #88]	@ (80106bc <OnRxWindow1TimerEvent+0x68>)
 8010664:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010668:	4b15      	ldr	r3, [pc, #84]	@ (80106c0 <OnRxWindow1TimerEvent+0x6c>)
 801066a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801066e:	b25a      	sxtb	r2, r3
 8010670:	4b12      	ldr	r3, [pc, #72]	@ (80106bc <OnRxWindow1TimerEvent+0x68>)
 8010672:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010676:	4b12      	ldr	r3, [pc, #72]	@ (80106c0 <OnRxWindow1TimerEvent+0x6c>)
 8010678:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 801067c:	4b0f      	ldr	r3, [pc, #60]	@ (80106bc <OnRxWindow1TimerEvent+0x68>)
 801067e:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010682:	4b0f      	ldr	r3, [pc, #60]	@ (80106c0 <OnRxWindow1TimerEvent+0x6c>)
 8010684:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010688:	4b0c      	ldr	r3, [pc, #48]	@ (80106bc <OnRxWindow1TimerEvent+0x68>)
 801068a:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 801068e:	4b0b      	ldr	r3, [pc, #44]	@ (80106bc <OnRxWindow1TimerEvent+0x68>)
 8010690:	2200      	movs	r2, #0
 8010692:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010696:	4b09      	ldr	r3, [pc, #36]	@ (80106bc <OnRxWindow1TimerEvent+0x68>)
 8010698:	2200      	movs	r2, #0
 801069a:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801069e:	4b08      	ldr	r3, [pc, #32]	@ (80106c0 <OnRxWindow1TimerEvent+0x6c>)
 80106a0:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80106a4:	4b05      	ldr	r3, [pc, #20]	@ (80106bc <OnRxWindow1TimerEvent+0x68>)
 80106a6:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80106aa:	4906      	ldr	r1, [pc, #24]	@ (80106c4 <OnRxWindow1TimerEvent+0x70>)
 80106ac:	4806      	ldr	r0, [pc, #24]	@ (80106c8 <OnRxWindow1TimerEvent+0x74>)
 80106ae:	f001 fb6d 	bl	8011d8c <RxWindowSetup>
}
 80106b2:	bf00      	nop
 80106b4:	3708      	adds	r7, #8
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	20000890 	.word	0x20000890
 80106c0:	20000dc4 	.word	0x20000dc4
 80106c4:	20000c48 	.word	0x20000c48
 80106c8:	20000c10 	.word	0x20000c10

080106cc <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80106d4:	4b19      	ldr	r3, [pc, #100]	@ (801073c <OnRxWindow2TimerEvent+0x70>)
 80106d6:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d029      	beq.n	8010732 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80106de:	4b17      	ldr	r3, [pc, #92]	@ (801073c <OnRxWindow2TimerEvent+0x70>)
 80106e0:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 80106e4:	4b15      	ldr	r3, [pc, #84]	@ (801073c <OnRxWindow2TimerEvent+0x70>)
 80106e6:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80106ea:	4b15      	ldr	r3, [pc, #84]	@ (8010740 <OnRxWindow2TimerEvent+0x74>)
 80106ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106ee:	4a13      	ldr	r2, [pc, #76]	@ (801073c <OnRxWindow2TimerEvent+0x70>)
 80106f0:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80106f4:	4b12      	ldr	r3, [pc, #72]	@ (8010740 <OnRxWindow2TimerEvent+0x74>)
 80106f6:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80106fa:	4b10      	ldr	r3, [pc, #64]	@ (801073c <OnRxWindow2TimerEvent+0x70>)
 80106fc:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010700:	4b0f      	ldr	r3, [pc, #60]	@ (8010740 <OnRxWindow2TimerEvent+0x74>)
 8010702:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010706:	4b0d      	ldr	r3, [pc, #52]	@ (801073c <OnRxWindow2TimerEvent+0x70>)
 8010708:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 801070c:	4b0b      	ldr	r3, [pc, #44]	@ (801073c <OnRxWindow2TimerEvent+0x70>)
 801070e:	2200      	movs	r2, #0
 8010710:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010714:	4b09      	ldr	r3, [pc, #36]	@ (801073c <OnRxWindow2TimerEvent+0x70>)
 8010716:	2201      	movs	r2, #1
 8010718:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801071c:	4b08      	ldr	r3, [pc, #32]	@ (8010740 <OnRxWindow2TimerEvent+0x74>)
 801071e:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8010722:	4b06      	ldr	r3, [pc, #24]	@ (801073c <OnRxWindow2TimerEvent+0x70>)
 8010724:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010728:	4906      	ldr	r1, [pc, #24]	@ (8010744 <OnRxWindow2TimerEvent+0x78>)
 801072a:	4807      	ldr	r0, [pc, #28]	@ (8010748 <OnRxWindow2TimerEvent+0x7c>)
 801072c:	f001 fb2e 	bl	8011d8c <RxWindowSetup>
 8010730:	e000      	b.n	8010734 <OnRxWindow2TimerEvent+0x68>
        return;
 8010732:	bf00      	nop
}
 8010734:	3708      	adds	r7, #8
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	20000890 	.word	0x20000890
 8010740:	20000dc4 	.word	0x20000dc4
 8010744:	20000c60 	.word	0x20000c60
 8010748:	20000c28 	.word	0x20000c28

0801074c <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8010754:	4808      	ldr	r0, [pc, #32]	@ (8010778 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8010756:	f00c f835 	bl	801c7c4 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 801075a:	4b08      	ldr	r3, [pc, #32]	@ (801077c <OnRetransmitTimeoutTimerEvent+0x30>)
 801075c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010760:	2b00      	cmp	r3, #0
 8010762:	d003      	beq.n	801076c <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8010764:	4b05      	ldr	r3, [pc, #20]	@ (801077c <OnRetransmitTimeoutTimerEvent+0x30>)
 8010766:	2201      	movs	r2, #1
 8010768:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 801076c:	f001 ff24 	bl	80125b8 <OnMacProcessNotify>
}
 8010770:	bf00      	nop
 8010772:	3708      	adds	r7, #8
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	20000c90 	.word	0x20000c90
 801077c:	20000890 	.word	0x20000890

08010780 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b084      	sub	sp, #16
 8010784:	af00      	add	r7, sp, #0
 8010786:	60ba      	str	r2, [r7, #8]
 8010788:	607b      	str	r3, [r7, #4]
 801078a:	4603      	mov	r3, r0
 801078c:	73fb      	strb	r3, [r7, #15]
 801078e:	460b      	mov	r3, r1
 8010790:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d005      	beq.n	80107a4 <GetFCntDown+0x24>
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d002      	beq.n	80107a4 <GetFCntDown+0x24>
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d101      	bne.n	80107a8 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80107a4:	2309      	movs	r3, #9
 80107a6:	e028      	b.n	80107fa <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 80107a8:	7bfb      	ldrb	r3, [r7, #15]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d016      	beq.n	80107dc <GetFCntDown+0x5c>
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d118      	bne.n	80107e4 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 80107b2:	79bb      	ldrb	r3, [r7, #6]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d10d      	bne.n	80107d4 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80107b8:	7bbb      	ldrb	r3, [r7, #14]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d002      	beq.n	80107c4 <GetFCntDown+0x44>
 80107be:	7bbb      	ldrb	r3, [r7, #14]
 80107c0:	2b03      	cmp	r3, #3
 80107c2:	d103      	bne.n	80107cc <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	2202      	movs	r2, #2
 80107c8:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 80107ca:	e00d      	b.n	80107e8 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 80107cc:	69bb      	ldr	r3, [r7, #24]
 80107ce:	2201      	movs	r2, #1
 80107d0:	701a      	strb	r2, [r3, #0]
            break;
 80107d2:	e009      	b.n	80107e8 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 80107d4:	69bb      	ldr	r3, [r7, #24]
 80107d6:	2203      	movs	r2, #3
 80107d8:	701a      	strb	r2, [r3, #0]
            break;
 80107da:	e005      	b.n	80107e8 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80107dc:	69bb      	ldr	r3, [r7, #24]
 80107de:	2204      	movs	r2, #4
 80107e0:	701a      	strb	r2, [r3, #0]
            break;
 80107e2:	e001      	b.n	80107e8 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80107e4:	2305      	movs	r3, #5
 80107e6:	e008      	b.n	80107fa <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	7818      	ldrb	r0, [r3, #0]
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	89db      	ldrh	r3, [r3, #14]
 80107f0:	69fa      	ldr	r2, [r7, #28]
 80107f2:	4619      	mov	r1, r3
 80107f4:	f004 fe06 	bl	8015404 <LoRaMacCryptoGetFCntDown>
 80107f8:	4603      	mov	r3, r0
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
	...

08010804 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010804:	b5b0      	push	{r4, r5, r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	4603      	mov	r3, r0
 801080c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801080e:	2303      	movs	r3, #3
 8010810:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8010812:	4b6e      	ldr	r3, [pc, #440]	@ (80109cc <SwitchClass+0x1c8>)
 8010814:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010818:	2b02      	cmp	r3, #2
 801081a:	f000 80bb 	beq.w	8010994 <SwitchClass+0x190>
 801081e:	2b02      	cmp	r3, #2
 8010820:	f300 80ce 	bgt.w	80109c0 <SwitchClass+0x1bc>
 8010824:	2b00      	cmp	r3, #0
 8010826:	d003      	beq.n	8010830 <SwitchClass+0x2c>
 8010828:	2b01      	cmp	r3, #1
 801082a:	f000 80a5 	beq.w	8010978 <SwitchClass+0x174>
 801082e:	e0c7      	b.n	80109c0 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010830:	79fb      	ldrb	r3, [r7, #7]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d109      	bne.n	801084a <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010836:	4b65      	ldr	r3, [pc, #404]	@ (80109cc <SwitchClass+0x1c8>)
 8010838:	4a64      	ldr	r2, [pc, #400]	@ (80109cc <SwitchClass+0x1c8>)
 801083a:	3374      	adds	r3, #116	@ 0x74
 801083c:	326c      	adds	r2, #108	@ 0x6c
 801083e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010842:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 801084a:	79fb      	ldrb	r3, [r7, #7]
 801084c:	2b01      	cmp	r3, #1
 801084e:	d10c      	bne.n	801086a <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010850:	79fb      	ldrb	r3, [r7, #7]
 8010852:	4618      	mov	r0, r3
 8010854:	f003 fcf8 	bl	8014248 <LoRaMacClassBSwitchClass>
 8010858:	4603      	mov	r3, r0
 801085a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 801085c:	7bfb      	ldrb	r3, [r7, #15]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d103      	bne.n	801086a <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8010862:	4a5a      	ldr	r2, [pc, #360]	@ (80109cc <SwitchClass+0x1c8>)
 8010864:	79fb      	ldrb	r3, [r7, #7]
 8010866:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 801086a:	79fb      	ldrb	r3, [r7, #7]
 801086c:	2b02      	cmp	r3, #2
 801086e:	f040 80a2 	bne.w	80109b6 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010872:	4a56      	ldr	r2, [pc, #344]	@ (80109cc <SwitchClass+0x1c8>)
 8010874:	79fb      	ldrb	r3, [r7, #7]
 8010876:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801087a:	4a55      	ldr	r2, [pc, #340]	@ (80109d0 <SwitchClass+0x1cc>)
 801087c:	4b54      	ldr	r3, [pc, #336]	@ (80109d0 <SwitchClass+0x1cc>)
 801087e:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8010882:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8010886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801088a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801088e:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010892:	4b4f      	ldr	r3, [pc, #316]	@ (80109d0 <SwitchClass+0x1cc>)
 8010894:	2202      	movs	r2, #2
 8010896:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801089a:	2300      	movs	r3, #0
 801089c:	73bb      	strb	r3, [r7, #14]
 801089e:	e05b      	b.n	8010958 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80108a0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80108a4:	4949      	ldr	r1, [pc, #292]	@ (80109cc <SwitchClass+0x1c8>)
 80108a6:	4613      	mov	r3, r2
 80108a8:	005b      	lsls	r3, r3, #1
 80108aa:	4413      	add	r3, r2
 80108ac:	011b      	lsls	r3, r3, #4
 80108ae:	440b      	add	r3, r1
 80108b0:	33e9      	adds	r3, #233	@ 0xe9
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d049      	beq.n	801094c <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 80108b8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80108bc:	4943      	ldr	r1, [pc, #268]	@ (80109cc <SwitchClass+0x1c8>)
 80108be:	4613      	mov	r3, r2
 80108c0:	005b      	lsls	r3, r3, #1
 80108c2:	4413      	add	r3, r2
 80108c4:	011b      	lsls	r3, r3, #4
 80108c6:	440b      	add	r3, r1
 80108c8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80108cc:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80108ce:	2b02      	cmp	r3, #2
 80108d0:	d13c      	bne.n	801094c <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 80108d2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80108d6:	493d      	ldr	r1, [pc, #244]	@ (80109cc <SwitchClass+0x1c8>)
 80108d8:	4613      	mov	r3, r2
 80108da:	005b      	lsls	r3, r3, #1
 80108dc:	4413      	add	r3, r2
 80108de:	011b      	lsls	r3, r3, #4
 80108e0:	440b      	add	r3, r1
 80108e2:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	4a38      	ldr	r2, [pc, #224]	@ (80109cc <SwitchClass+0x1c8>)
 80108ea:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 80108ec:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80108f0:	4936      	ldr	r1, [pc, #216]	@ (80109cc <SwitchClass+0x1c8>)
 80108f2:	4613      	mov	r3, r2
 80108f4:	005b      	lsls	r3, r3, #1
 80108f6:	4413      	add	r3, r2
 80108f8:	011b      	lsls	r3, r3, #4
 80108fa:	440b      	add	r3, r1
 80108fc:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8010900:	f993 3000 	ldrsb.w	r3, [r3]
 8010904:	b2da      	uxtb	r2, r3
 8010906:	4b31      	ldr	r3, [pc, #196]	@ (80109cc <SwitchClass+0x1c8>)
 8010908:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801090c:	4b30      	ldr	r3, [pc, #192]	@ (80109d0 <SwitchClass+0x1cc>)
 801090e:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010912:	4b2f      	ldr	r3, [pc, #188]	@ (80109d0 <SwitchClass+0x1cc>)
 8010914:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010918:	4b2c      	ldr	r3, [pc, #176]	@ (80109cc <SwitchClass+0x1c8>)
 801091a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801091c:	4a2c      	ldr	r2, [pc, #176]	@ (80109d0 <SwitchClass+0x1cc>)
 801091e:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010922:	4b2a      	ldr	r3, [pc, #168]	@ (80109cc <SwitchClass+0x1c8>)
 8010924:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010928:	4b29      	ldr	r3, [pc, #164]	@ (80109d0 <SwitchClass+0x1cc>)
 801092a:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801092e:	4b27      	ldr	r3, [pc, #156]	@ (80109cc <SwitchClass+0x1c8>)
 8010930:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010934:	4b26      	ldr	r3, [pc, #152]	@ (80109d0 <SwitchClass+0x1cc>)
 8010936:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801093a:	4b25      	ldr	r3, [pc, #148]	@ (80109d0 <SwitchClass+0x1cc>)
 801093c:	2203      	movs	r2, #3
 801093e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010942:	4b23      	ldr	r3, [pc, #140]	@ (80109d0 <SwitchClass+0x1cc>)
 8010944:	2201      	movs	r2, #1
 8010946:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 801094a:	e009      	b.n	8010960 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801094c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010950:	b2db      	uxtb	r3, r3
 8010952:	3301      	adds	r3, #1
 8010954:	b2db      	uxtb	r3, r3
 8010956:	73bb      	strb	r3, [r7, #14]
 8010958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801095c:	2b00      	cmp	r3, #0
 801095e:	dd9f      	ble.n	80108a0 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010960:	4b1b      	ldr	r3, [pc, #108]	@ (80109d0 <SwitchClass+0x1cc>)
 8010962:	2200      	movs	r2, #0
 8010964:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010968:	4b1a      	ldr	r3, [pc, #104]	@ (80109d4 <SwitchClass+0x1d0>)
 801096a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801096c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 801096e:	f001 fa41 	bl	8011df4 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8010972:	2300      	movs	r3, #0
 8010974:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010976:	e01e      	b.n	80109b6 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010978:	79fb      	ldrb	r3, [r7, #7]
 801097a:	4618      	mov	r0, r3
 801097c:	f003 fc64 	bl	8014248 <LoRaMacClassBSwitchClass>
 8010980:	4603      	mov	r3, r0
 8010982:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010984:	7bfb      	ldrb	r3, [r7, #15]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d117      	bne.n	80109ba <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801098a:	4a10      	ldr	r2, [pc, #64]	@ (80109cc <SwitchClass+0x1c8>)
 801098c:	79fb      	ldrb	r3, [r7, #7]
 801098e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 8010992:	e012      	b.n	80109ba <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010994:	79fb      	ldrb	r3, [r7, #7]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d111      	bne.n	80109be <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 801099a:	4b0d      	ldr	r3, [pc, #52]	@ (80109d0 <SwitchClass+0x1cc>)
 801099c:	2206      	movs	r2, #6
 801099e:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 80109a2:	4a0a      	ldr	r2, [pc, #40]	@ (80109cc <SwitchClass+0x1c8>)
 80109a4:	79fb      	ldrb	r3, [r7, #7]
 80109a6:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80109aa:	4b0a      	ldr	r3, [pc, #40]	@ (80109d4 <SwitchClass+0x1d0>)
 80109ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ae:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80109b0:	2300      	movs	r3, #0
 80109b2:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 80109b4:	e003      	b.n	80109be <SwitchClass+0x1ba>
            break;
 80109b6:	bf00      	nop
 80109b8:	e002      	b.n	80109c0 <SwitchClass+0x1bc>
            break;
 80109ba:	bf00      	nop
 80109bc:	e000      	b.n	80109c0 <SwitchClass+0x1bc>
            break;
 80109be:	bf00      	nop
        }
    }

    return status;
 80109c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3710      	adds	r7, #16
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bdb0      	pop	{r4, r5, r7, pc}
 80109ca:	bf00      	nop
 80109cc:	20000dc4 	.word	0x20000dc4
 80109d0:	20000890 	.word	0x20000890
 80109d4:	0801e044 	.word	0x0801e044

080109d8 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b086      	sub	sp, #24
 80109dc:	af00      	add	r7, sp, #0
 80109de:	4603      	mov	r3, r0
 80109e0:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80109e2:	4b10      	ldr	r3, [pc, #64]	@ (8010a24 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80109e4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80109e8:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 80109ea:	79fb      	ldrb	r3, [r7, #7]
 80109ec:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80109ee:	230d      	movs	r3, #13
 80109f0:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80109f2:	4b0c      	ldr	r3, [pc, #48]	@ (8010a24 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80109f4:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d001      	beq.n	8010a00 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80109fc:	230e      	movs	r3, #14
 80109fe:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a00:	4b08      	ldr	r3, [pc, #32]	@ (8010a24 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010a02:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010a06:	f107 0210 	add.w	r2, r7, #16
 8010a0a:	4611      	mov	r1, r2
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f005 fb5b 	bl	80160c8 <RegionGetPhyParam>
 8010a12:	4603      	mov	r3, r0
 8010a14:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	b2db      	uxtb	r3, r3
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3718      	adds	r7, #24
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	20000dc4 	.word	0x20000dc4

08010a28 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b084      	sub	sp, #16
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4603      	mov	r3, r0
 8010a30:	71fb      	strb	r3, [r7, #7]
 8010a32:	460b      	mov	r3, r1
 8010a34:	71bb      	strb	r3, [r7, #6]
 8010a36:	4613      	mov	r3, r2
 8010a38:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010a42:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7ff ffc6 	bl	80109d8 <GetMaxAppPayloadWithoutFOptsLength>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010a50:	79fb      	ldrb	r3, [r7, #7]
 8010a52:	b29a      	uxth	r2, r3
 8010a54:	797b      	ldrb	r3, [r7, #5]
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	4413      	add	r3, r2
 8010a5a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010a5c:	89ba      	ldrh	r2, [r7, #12]
 8010a5e:	89fb      	ldrh	r3, [r7, #14]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d804      	bhi.n	8010a6e <ValidatePayloadLength+0x46>
 8010a64:	89bb      	ldrh	r3, [r7, #12]
 8010a66:	2bff      	cmp	r3, #255	@ 0xff
 8010a68:	d801      	bhi.n	8010a6e <ValidatePayloadLength+0x46>
    {
        return true;
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	e000      	b.n	8010a70 <ValidatePayloadLength+0x48>
    }
    return false;
 8010a6e:	2300      	movs	r3, #0
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3710      	adds	r7, #16
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010a78:	b590      	push	{r4, r7, lr}
 8010a7a:	b0a5      	sub	sp, #148	@ 0x94
 8010a7c:	af02      	add	r7, sp, #8
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	4608      	mov	r0, r1
 8010a82:	4611      	mov	r1, r2
 8010a84:	461a      	mov	r2, r3
 8010a86:	4603      	mov	r3, r0
 8010a88:	70fb      	strb	r3, [r7, #3]
 8010a8a:	460b      	mov	r3, r1
 8010a8c:	70bb      	strb	r3, [r7, #2]
 8010a8e:	4613      	mov	r3, r2
 8010a90:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8010a92:	2300      	movs	r3, #0
 8010a94:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8010aa4:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	f000 84c3 	beq.w	8011434 <ProcessMacCommands+0x9bc>
 8010aae:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8010ab2:	2b01      	cmp	r3, #1
 8010ab4:	f040 84c4 	bne.w	8011440 <ProcessMacCommands+0x9c8>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8010ab8:	f000 bcbc 	b.w	8011434 <ProcessMacCommands+0x9bc>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010abc:	78fb      	ldrb	r3, [r7, #3]
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	4413      	add	r3, r2
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f003 febf 	bl	8014848 <LoRaMacCommandsGetCmdSize>
 8010aca:	4603      	mov	r3, r0
 8010acc:	461a      	mov	r2, r3
 8010ace:	78fb      	ldrb	r3, [r7, #3]
 8010ad0:	441a      	add	r2, r3
 8010ad2:	78bb      	ldrb	r3, [r7, #2]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	f300 84b5 	bgt.w	8011444 <ProcessMacCommands+0x9cc>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010ada:	78fb      	ldrb	r3, [r7, #3]
 8010adc:	1c5a      	adds	r2, r3, #1
 8010ade:	70fa      	strb	r2, [r7, #3]
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4413      	add	r3, r2
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	3b02      	subs	r3, #2
 8010aea:	2b11      	cmp	r3, #17
 8010aec:	f200 84ac 	bhi.w	8011448 <ProcessMacCommands+0x9d0>
 8010af0:	a201      	add	r2, pc, #4	@ (adr r2, 8010af8 <ProcessMacCommands+0x80>)
 8010af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010af6:	bf00      	nop
 8010af8:	08010b41 	.word	0x08010b41
 8010afc:	08010b83 	.word	0x08010b83
 8010b00:	08010cff 	.word	0x08010cff
 8010b04:	08010d3d 	.word	0x08010d3d
 8010b08:	08010e49 	.word	0x08010e49
 8010b0c:	08010e99 	.word	0x08010e99
 8010b10:	08010f55 	.word	0x08010f55
 8010b14:	08010fab 	.word	0x08010fab
 8010b18:	08011091 	.word	0x08011091
 8010b1c:	08011449 	.word	0x08011449
 8010b20:	08011449 	.word	0x08011449
 8010b24:	08011139 	.word	0x08011139
 8010b28:	08011449 	.word	0x08011449
 8010b2c:	08011449 	.word	0x08011449
 8010b30:	08011259 	.word	0x08011259
 8010b34:	0801128d 	.word	0x0801128d
 8010b38:	0801131d 	.word	0x0801131d
 8010b3c:	08011395 	.word	0x08011395
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010b40:	2005      	movs	r0, #5
 8010b42:	f004 f859 	bl	8014bf8 <LoRaMacConfirmQueueIsCmdActive>
 8010b46:	4603      	mov	r3, r0
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f000 8466 	beq.w	801141a <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010b4e:	2105      	movs	r1, #5
 8010b50:	2000      	movs	r0, #0
 8010b52:	f003 ffc5 	bl	8014ae0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010b56:	78fb      	ldrb	r3, [r7, #3]
 8010b58:	1c5a      	adds	r2, r3, #1
 8010b5a:	70fa      	strb	r2, [r7, #3]
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	4413      	add	r3, r2
 8010b62:	781a      	ldrb	r2, [r3, #0]
 8010b64:	4bb5      	ldr	r3, [pc, #724]	@ (8010e3c <ProcessMacCommands+0x3c4>)
 8010b66:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010b6a:	78fb      	ldrb	r3, [r7, #3]
 8010b6c:	1c5a      	adds	r2, r3, #1
 8010b6e:	70fa      	strb	r2, [r7, #3]
 8010b70:	461a      	mov	r2, r3
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	4413      	add	r3, r2
 8010b76:	781a      	ldrb	r2, [r3, #0]
 8010b78:	4bb0      	ldr	r3, [pc, #704]	@ (8010e3c <ProcessMacCommands+0x3c4>)
 8010b7a:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 8010b7e:	f000 bc4c 	b.w	801141a <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010b82:	2300      	movs	r3, #0
 8010b84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8010b94:	2300      	movs	r3, #0
 8010b96:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 8010b9a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8010b9e:	f083 0301 	eor.w	r3, r3, #1
 8010ba2:	b2db      	uxtb	r3, r3
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	f000 80a6 	beq.w	8010cf6 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 8010baa:	2301      	movs	r3, #1
 8010bac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8010bb0:	78fb      	ldrb	r3, [r7, #3]
 8010bb2:	3b01      	subs	r3, #1
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	4413      	add	r3, r2
 8010bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010bba:	4ba1      	ldr	r3, [pc, #644]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010bbc:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8010bc0:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010bc4:	4b9e      	ldr	r3, [pc, #632]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010bc6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010bca:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010bce:	4b9c      	ldr	r3, [pc, #624]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010bd0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010bd4:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010bd8:	4b99      	ldr	r3, [pc, #612]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010bda:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010bde:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010be2:	4b97      	ldr	r3, [pc, #604]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010be4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010be8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8010bec:	4b94      	ldr	r3, [pc, #592]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010bee:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8010bf2:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010bf4:	4b92      	ldr	r3, [pc, #584]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010bf6:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d008      	beq.n	8010c10 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010bfe:	78ba      	ldrb	r2, [r7, #2]
 8010c00:	78fb      	ldrb	r3, [r7, #3]
 8010c02:	1ad3      	subs	r3, r2, r3
 8010c04:	b2db      	uxtb	r3, r3
 8010c06:	3301      	adds	r3, #1
 8010c08:	b2db      	uxtb	r3, r3
 8010c0a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 8010c0e:	e002      	b.n	8010c16 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8010c10:	2305      	movs	r3, #5
 8010c12:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8010c16:	4b8a      	ldr	r3, [pc, #552]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010c18:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8010c1c:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 8010c20:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 8010c24:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8010c28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8010c2c:	9301      	str	r3, [sp, #4]
 8010c2e:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 8010c32:	9300      	str	r3, [sp, #0]
 8010c34:	4623      	mov	r3, r4
 8010c36:	f005 fb04 	bl	8016242 <RegionLinkAdrReq>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8010c40:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010c44:	f003 0307 	and.w	r3, r3, #7
 8010c48:	2b07      	cmp	r3, #7
 8010c4a:	d119      	bne.n	8010c80 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8010c4c:	4b7c      	ldr	r3, [pc, #496]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010c4e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8010c52:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8010c56:	429a      	cmp	r2, r3
 8010c58:	da03      	bge.n	8010c62 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8010c5a:	4b79      	ldr	r3, [pc, #484]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8010c62:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 8010c66:	4b76      	ldr	r3, [pc, #472]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010c68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8010c6c:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 8010c70:	4b73      	ldr	r3, [pc, #460]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010c72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010c76:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8010c7a:	4b71      	ldr	r3, [pc, #452]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010c7c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010c80:	2300      	movs	r3, #0
 8010c82:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8010c86:	e00b      	b.n	8010ca0 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010c88:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	4619      	mov	r1, r3
 8010c90:	2003      	movs	r0, #3
 8010c92:	f003 fc79 	bl	8014588 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010c96:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8010ca0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8010ca4:	4a67      	ldr	r2, [pc, #412]	@ (8010e44 <ProcessMacCommands+0x3cc>)
 8010ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8010caa:	089b      	lsrs	r3, r3, #2
 8010cac:	b2db      	uxtb	r3, r3
 8010cae:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d3e8      	bcc.n	8010c88 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8010cb6:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8010cba:	78fb      	ldrb	r3, [r7, #3]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	b2db      	uxtb	r3, r3
 8010cc0:	3b01      	subs	r3, #1
 8010cc2:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8010cc4:	78fa      	ldrb	r2, [r7, #3]
 8010cc6:	78bb      	ldrb	r3, [r7, #2]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d20a      	bcs.n	8010ce2 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8010ccc:	78fb      	ldrb	r3, [r7, #3]
 8010cce:	1c5a      	adds	r2, r3, #1
 8010cd0:	70fa      	strb	r2, [r7, #3]
 8010cd2:	461a      	mov	r2, r3
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	4413      	add	r3, r2
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	2b03      	cmp	r3, #3
 8010cdc:	f43f af68 	beq.w	8010bb0 <ProcessMacCommands+0x138>
 8010ce0:	e000      	b.n	8010ce4 <ProcessMacCommands+0x26c>
                            break;
 8010ce2:	bf00      	nop

                    if( macIndex < commandsSize )
 8010ce4:	78fa      	ldrb	r2, [r7, #3]
 8010ce6:	78bb      	ldrb	r3, [r7, #2]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	f080 8398 	bcs.w	801141e <ProcessMacCommands+0x9a6>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8010cee:	78fb      	ldrb	r3, [r7, #3]
 8010cf0:	3b01      	subs	r3, #1
 8010cf2:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8010cf4:	e393      	b.n	801141e <ProcessMacCommands+0x9a6>
                    macIndex += 4;
 8010cf6:	78fb      	ldrb	r3, [r7, #3]
 8010cf8:	3304      	adds	r3, #4
 8010cfa:	70fb      	strb	r3, [r7, #3]
                break;
 8010cfc:	e38f      	b.n	801141e <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8010cfe:	78fb      	ldrb	r3, [r7, #3]
 8010d00:	1c5a      	adds	r2, r3, #1
 8010d02:	70fa      	strb	r2, [r7, #3]
 8010d04:	461a      	mov	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	4413      	add	r3, r2
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	f003 030f 	and.w	r3, r3, #15
 8010d10:	b2da      	uxtb	r2, r3
 8010d12:	4b4b      	ldr	r3, [pc, #300]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010d14:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010d18:	4b49      	ldr	r3, [pc, #292]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010d1a:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8010d1e:	461a      	mov	r2, r3
 8010d20:	2301      	movs	r3, #1
 8010d22:	4093      	lsls	r3, r2
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	4b46      	ldr	r3, [pc, #280]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010d28:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010d2c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010d30:	2200      	movs	r2, #0
 8010d32:	4619      	mov	r1, r3
 8010d34:	2004      	movs	r0, #4
 8010d36:	f003 fc27 	bl	8014588 <LoRaMacCommandsAddCmd>
                break;
 8010d3a:	e37b      	b.n	8011434 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010d3c:	2307      	movs	r3, #7
 8010d3e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010d42:	78fb      	ldrb	r3, [r7, #3]
 8010d44:	687a      	ldr	r2, [r7, #4]
 8010d46:	4413      	add	r3, r2
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	091b      	lsrs	r3, r3, #4
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	b25b      	sxtb	r3, r3
 8010d50:	f003 0307 	and.w	r3, r3, #7
 8010d54:	b25b      	sxtb	r3, r3
 8010d56:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010d5a:	78fb      	ldrb	r3, [r7, #3]
 8010d5c:	687a      	ldr	r2, [r7, #4]
 8010d5e:	4413      	add	r3, r2
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	b25b      	sxtb	r3, r3
 8010d64:	f003 030f 	and.w	r3, r3, #15
 8010d68:	b25b      	sxtb	r3, r3
 8010d6a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 8010d6e:	78fb      	ldrb	r3, [r7, #3]
 8010d70:	3301      	adds	r3, #1
 8010d72:	70fb      	strb	r3, [r7, #3]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( rxParamSetupReq.Datarate == 0x0F )
 8010d74:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8010d78:	2b0f      	cmp	r3, #15
 8010d7a:	d105      	bne.n	8010d88 <ProcessMacCommands+0x310>
                {
                    // Keep the current datarate
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
 8010d7c:	4b30      	ldr	r3, [pc, #192]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010d7e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8010d82:	b25b      	sxtb	r3, r3
 8010d84:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                }
#endif

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010d88:	78fb      	ldrb	r3, [r7, #3]
 8010d8a:	1c5a      	adds	r2, r3, #1
 8010d8c:	70fa      	strb	r2, [r7, #3]
 8010d8e:	461a      	mov	r2, r3
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4413      	add	r3, r2
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010d98:	78fb      	ldrb	r3, [r7, #3]
 8010d9a:	1c5a      	adds	r2, r3, #1
 8010d9c:	70fa      	strb	r2, [r7, #3]
 8010d9e:	461a      	mov	r2, r3
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4413      	add	r3, r2
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	021a      	lsls	r2, r3, #8
 8010da8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010daa:	4313      	orrs	r3, r2
 8010dac:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010dae:	78fb      	ldrb	r3, [r7, #3]
 8010db0:	1c5a      	adds	r2, r3, #1
 8010db2:	70fa      	strb	r2, [r7, #3]
 8010db4:	461a      	mov	r2, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	4413      	add	r3, r2
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	041a      	lsls	r2, r3, #16
 8010dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 8010dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010dc6:	2264      	movs	r2, #100	@ 0x64
 8010dc8:	fb02 f303 	mul.w	r3, r2, r3
 8010dcc:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8010dce:	4b1c      	ldr	r3, [pc, #112]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010dd0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010dd4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8010dd8:	4611      	mov	r1, r2
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f005 fa4b 	bl	8016276 <RegionRxParamSetupReq>
 8010de0:	4603      	mov	r3, r0
 8010de2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8010de6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010dea:	f003 0307 	and.w	r3, r3, #7
 8010dee:	2b07      	cmp	r3, #7
 8010df0:	d117      	bne.n	8010e22 <ProcessMacCommands+0x3aa>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010df2:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8010df6:	b2da      	uxtb	r2, r3
 8010df8:	4b11      	ldr	r3, [pc, #68]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010dfa:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010dfe:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8010e02:	b2da      	uxtb	r2, r3
 8010e04:	4b0e      	ldr	r3, [pc, #56]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010e06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010e0e:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e12:	4a0b      	ldr	r2, [pc, #44]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010e14:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010e16:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8010e1a:	b2da      	uxtb	r2, r3
 8010e1c:	4b08      	ldr	r3, [pc, #32]	@ (8010e40 <ProcessMacCommands+0x3c8>)
 8010e1e:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 8010e22:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010e26:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010e2a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010e2e:	2201      	movs	r2, #1
 8010e30:	4619      	mov	r1, r3
 8010e32:	2005      	movs	r0, #5
 8010e34:	f003 fba8 	bl	8014588 <LoRaMacCommandsAddCmd>
                break;
 8010e38:	e2fc      	b.n	8011434 <ProcessMacCommands+0x9bc>
 8010e3a:	bf00      	nop
 8010e3c:	20000890 	.word	0x20000890
 8010e40:	20000dc4 	.word	0x20000dc4
 8010e44:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010e48:	23ff      	movs	r3, #255	@ 0xff
 8010e4a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010e4e:	4bb7      	ldr	r3, [pc, #732]	@ (801112c <ProcessMacCommands+0x6b4>)
 8010e50:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d00d      	beq.n	8010e74 <ProcessMacCommands+0x3fc>
 8010e58:	4bb4      	ldr	r3, [pc, #720]	@ (801112c <ProcessMacCommands+0x6b4>)
 8010e5a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d007      	beq.n	8010e74 <ProcessMacCommands+0x3fc>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010e64:	4bb1      	ldr	r3, [pc, #708]	@ (801112c <ProcessMacCommands+0x6b4>)
 8010e66:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	4798      	blx	r3
 8010e6e:	4603      	mov	r3, r0
 8010e70:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8010e74:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8010e78:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010e7c:	787b      	ldrb	r3, [r7, #1]
 8010e7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010e88:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010e8c:	2202      	movs	r2, #2
 8010e8e:	4619      	mov	r1, r3
 8010e90:	2006      	movs	r0, #6
 8010e92:	f003 fb79 	bl	8014588 <LoRaMacCommandsAddCmd>
                break;
 8010e96:	e2cd      	b.n	8011434 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010e98:	2303      	movs	r3, #3
 8010e9a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8010e9e:	78fb      	ldrb	r3, [r7, #3]
 8010ea0:	1c5a      	adds	r2, r3, #1
 8010ea2:	70fa      	strb	r2, [r7, #3]
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	4413      	add	r3, r2
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	b25b      	sxtb	r3, r3
 8010eae:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 8010eb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010eb6:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010eb8:	78fb      	ldrb	r3, [r7, #3]
 8010eba:	1c5a      	adds	r2, r3, #1
 8010ebc:	70fa      	strb	r2, [r7, #3]
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010ec8:	78fb      	ldrb	r3, [r7, #3]
 8010eca:	1c5a      	adds	r2, r3, #1
 8010ecc:	70fa      	strb	r2, [r7, #3]
 8010ece:	461a      	mov	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	021a      	lsls	r2, r3, #8
 8010ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eda:	4313      	orrs	r3, r2
 8010edc:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010ede:	78fb      	ldrb	r3, [r7, #3]
 8010ee0:	1c5a      	adds	r2, r3, #1
 8010ee2:	70fa      	strb	r2, [r7, #3]
 8010ee4:	461a      	mov	r2, r3
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	4413      	add	r3, r2
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	041a      	lsls	r2, r3, #16
 8010eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ef0:	4313      	orrs	r3, r2
 8010ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 8010ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ef6:	2264      	movs	r2, #100	@ 0x64
 8010ef8:	fb02 f303 	mul.w	r3, r2, r3
 8010efc:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 8010efe:	2300      	movs	r3, #0
 8010f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8010f02:	78fb      	ldrb	r3, [r7, #3]
 8010f04:	1c5a      	adds	r2, r3, #1
 8010f06:	70fa      	strb	r2, [r7, #3]
 8010f08:	461a      	mov	r2, r3
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	4413      	add	r3, r2
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	b25b      	sxtb	r3, r3
 8010f12:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8010f16:	4b86      	ldr	r3, [pc, #536]	@ (8011130 <ProcessMacCommands+0x6b8>)
 8010f18:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010f1c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8010f20:	4611      	mov	r1, r2
 8010f22:	4618      	mov	r0, r3
 8010f24:	f005 f9ba 	bl	801629c <RegionNewChannelReq>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8010f30:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010f34:	b25b      	sxtb	r3, r3
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	f2c0 8273 	blt.w	8011422 <ProcessMacCommands+0x9aa>
                {
                    macCmdPayload[0] = status;
 8010f3c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010f40:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010f44:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010f48:	2201      	movs	r2, #1
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	2007      	movs	r0, #7
 8010f4e:	f003 fb1b 	bl	8014588 <LoRaMacCommandsAddCmd>
                }
                break;
 8010f52:	e266      	b.n	8011422 <ProcessMacCommands+0x9aa>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010f54:	78fb      	ldrb	r3, [r7, #3]
 8010f56:	1c5a      	adds	r2, r3, #1
 8010f58:	70fa      	strb	r2, [r7, #3]
 8010f5a:	461a      	mov	r2, r3
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	4413      	add	r3, r2
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	f003 030f 	and.w	r3, r3, #15
 8010f66:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 8010f6a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d104      	bne.n	8010f7c <ProcessMacCommands+0x504>
                {
                    delay++;
 8010f72:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010f76:	3301      	adds	r3, #1
 8010f78:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010f7c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010f80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010f84:	fb02 f303 	mul.w	r3, r2, r3
 8010f88:	461a      	mov	r2, r3
 8010f8a:	4b69      	ldr	r3, [pc, #420]	@ (8011130 <ProcessMacCommands+0x6b8>)
 8010f8c:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010f8e:	4b68      	ldr	r3, [pc, #416]	@ (8011130 <ProcessMacCommands+0x6b8>)
 8010f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f92:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8010f96:	4a66      	ldr	r2, [pc, #408]	@ (8011130 <ProcessMacCommands+0x6b8>)
 8010f98:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010f9a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	2008      	movs	r0, #8
 8010fa4:	f003 faf0 	bl	8014588 <LoRaMacCommandsAddCmd>
                break;
 8010fa8:	e244      	b.n	8011434 <ProcessMacCommands+0x9bc>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010faa:	78fb      	ldrb	r3, [r7, #3]
 8010fac:	1c5a      	adds	r2, r3, #1
 8010fae:	70fa      	strb	r2, [r7, #3]
 8010fb0:	461a      	mov	r2, r3
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	4413      	add	r3, r2
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010fc8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010fcc:	f003 0320 	and.w	r3, r3, #32
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d002      	beq.n	8010fda <ProcessMacCommands+0x562>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010fda:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010fde:	f003 0310 	and.w	r3, r3, #16
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d002      	beq.n	8010fec <ProcessMacCommands+0x574>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010fec:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010ff0:	f003 030f 	and.w	r3, r3, #15
 8010ff4:	b2db      	uxtb	r3, r3
 8010ff6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8010ffa:	4b4d      	ldr	r3, [pc, #308]	@ (8011130 <ProcessMacCommands+0x6b8>)
 8010ffc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011000:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8011004:	4611      	mov	r1, r2
 8011006:	4618      	mov	r0, r3
 8011008:	f005 f95b 	bl	80162c2 <RegionTxParamSetupReq>
 801100c:	4603      	mov	r3, r0
 801100e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011012:	f000 8208 	beq.w	8011426 <ProcessMacCommands+0x9ae>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8011016:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 801101a:	4b45      	ldr	r3, [pc, #276]	@ (8011130 <ProcessMacCommands+0x6b8>)
 801101c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8011020:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8011024:	4b42      	ldr	r3, [pc, #264]	@ (8011130 <ProcessMacCommands+0x6b8>)
 8011026:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 801102a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801102e:	461a      	mov	r2, r3
 8011030:	4b40      	ldr	r3, [pc, #256]	@ (8011134 <ProcessMacCommands+0x6bc>)
 8011032:	5c9b      	ldrb	r3, [r3, r2]
 8011034:	4618      	mov	r0, r3
 8011036:	f7ef fbc9 	bl	80007cc <__aeabi_ui2f>
 801103a:	4603      	mov	r3, r0
 801103c:	4a3c      	ldr	r2, [pc, #240]	@ (8011130 <ProcessMacCommands+0x6b8>)
 801103e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8011042:	2302      	movs	r3, #2
 8011044:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011048:	4b39      	ldr	r3, [pc, #228]	@ (8011130 <ProcessMacCommands+0x6b8>)
 801104a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801104e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011052:	4b37      	ldr	r3, [pc, #220]	@ (8011130 <ProcessMacCommands+0x6b8>)
 8011054:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011058:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801105c:	4611      	mov	r1, r2
 801105e:	4618      	mov	r0, r3
 8011060:	f005 f832 	bl	80160c8 <RegionGetPhyParam>
 8011064:	4603      	mov	r3, r0
 8011066:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8011068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801106a:	b25a      	sxtb	r2, r3
 801106c:	4b30      	ldr	r3, [pc, #192]	@ (8011130 <ProcessMacCommands+0x6b8>)
 801106e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011072:	4293      	cmp	r3, r2
 8011074:	bfb8      	it	lt
 8011076:	4613      	movlt	r3, r2
 8011078:	b25a      	sxtb	r2, r3
 801107a:	4b2d      	ldr	r3, [pc, #180]	@ (8011130 <ProcessMacCommands+0x6b8>)
 801107c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8011080:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011084:	2200      	movs	r2, #0
 8011086:	4619      	mov	r1, r3
 8011088:	2009      	movs	r0, #9
 801108a:	f003 fa7d 	bl	8014588 <LoRaMacCommandsAddCmd>
                }
                break;
 801108e:	e1ca      	b.n	8011426 <ProcessMacCommands+0x9ae>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8011090:	2303      	movs	r3, #3
 8011092:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8011096:	78fb      	ldrb	r3, [r7, #3]
 8011098:	1c5a      	adds	r2, r3, #1
 801109a:	70fa      	strb	r2, [r7, #3]
 801109c:	461a      	mov	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	4413      	add	r3, r2
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80110a8:	78fb      	ldrb	r3, [r7, #3]
 80110aa:	1c5a      	adds	r2, r3, #1
 80110ac:	70fa      	strb	r2, [r7, #3]
 80110ae:	461a      	mov	r2, r3
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	4413      	add	r3, r2
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80110b8:	78fb      	ldrb	r3, [r7, #3]
 80110ba:	1c5a      	adds	r2, r3, #1
 80110bc:	70fa      	strb	r2, [r7, #3]
 80110be:	461a      	mov	r2, r3
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	4413      	add	r3, r2
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	021a      	lsls	r2, r3, #8
 80110c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ca:	4313      	orrs	r3, r2
 80110cc:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80110ce:	78fb      	ldrb	r3, [r7, #3]
 80110d0:	1c5a      	adds	r2, r3, #1
 80110d2:	70fa      	strb	r2, [r7, #3]
 80110d4:	461a      	mov	r2, r3
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	4413      	add	r3, r2
 80110da:	781b      	ldrb	r3, [r3, #0]
 80110dc:	041a      	lsls	r2, r3, #16
 80110de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e0:	4313      	orrs	r3, r2
 80110e2:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80110e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e6:	2264      	movs	r2, #100	@ 0x64
 80110e8:	fb02 f303 	mul.w	r3, r2, r3
 80110ec:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80110ee:	4b10      	ldr	r3, [pc, #64]	@ (8011130 <ProcessMacCommands+0x6b8>)
 80110f0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80110f4:	f107 0220 	add.w	r2, r7, #32
 80110f8:	4611      	mov	r1, r2
 80110fa:	4618      	mov	r0, r3
 80110fc:	f005 f8f4 	bl	80162e8 <RegionDlChannelReq>
 8011100:	4603      	mov	r3, r0
 8011102:	b2db      	uxtb	r3, r3
 8011104:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8011108:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 801110c:	b25b      	sxtb	r3, r3
 801110e:	2b00      	cmp	r3, #0
 8011110:	f2c0 818b 	blt.w	801142a <ProcessMacCommands+0x9b2>
                {
                    macCmdPayload[0] = status;
 8011114:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011118:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 801111c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011120:	2201      	movs	r2, #1
 8011122:	4619      	mov	r1, r3
 8011124:	200a      	movs	r0, #10
 8011126:	f003 fa2f 	bl	8014588 <LoRaMacCommandsAddCmd>
                }
                break;
 801112a:	e17e      	b.n	801142a <ProcessMacCommands+0x9b2>
 801112c:	20000890 	.word	0x20000890
 8011130:	20000dc4 	.word	0x20000dc4
 8011134:	0801dffc 	.word	0x0801dffc
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8011138:	2009      	movs	r0, #9
 801113a:	f003 fd5d 	bl	8014bf8 <LoRaMacConfirmQueueIsCmdActive>
 801113e:	4603      	mov	r3, r0
 8011140:	2b00      	cmp	r3, #0
 8011142:	f000 8084 	beq.w	801124e <ProcessMacCommands+0x7d6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8011146:	2109      	movs	r1, #9
 8011148:	2000      	movs	r0, #0
 801114a:	f003 fcc9 	bl	8014ae0 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801114e:	f107 0318 	add.w	r3, r7, #24
 8011152:	2200      	movs	r2, #0
 8011154:	601a      	str	r2, [r3, #0]
 8011156:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8011158:	f107 0310 	add.w	r3, r7, #16
 801115c:	2200      	movs	r2, #0
 801115e:	601a      	str	r2, [r3, #0]
 8011160:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8011162:	f107 0308 	add.w	r3, r7, #8
 8011166:	2200      	movs	r2, #0
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 801116c:	78fb      	ldrb	r3, [r7, #3]
 801116e:	1c5a      	adds	r2, r3, #1
 8011170:	70fa      	strb	r2, [r7, #3]
 8011172:	461a      	mov	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	4413      	add	r3, r2
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 801117c:	78fb      	ldrb	r3, [r7, #3]
 801117e:	1c5a      	adds	r2, r3, #1
 8011180:	70fa      	strb	r2, [r7, #3]
 8011182:	461a      	mov	r2, r3
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4413      	add	r3, r2
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	021a      	lsls	r2, r3, #8
 801118c:	69bb      	ldr	r3, [r7, #24]
 801118e:	4313      	orrs	r3, r2
 8011190:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011192:	78fb      	ldrb	r3, [r7, #3]
 8011194:	1c5a      	adds	r2, r3, #1
 8011196:	70fa      	strb	r2, [r7, #3]
 8011198:	461a      	mov	r2, r3
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4413      	add	r3, r2
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	041a      	lsls	r2, r3, #16
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	4313      	orrs	r3, r2
 80111a6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80111a8:	78fb      	ldrb	r3, [r7, #3]
 80111aa:	1c5a      	adds	r2, r3, #1
 80111ac:	70fa      	strb	r2, [r7, #3]
 80111ae:	461a      	mov	r2, r3
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	4413      	add	r3, r2
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	061a      	lsls	r2, r3, #24
 80111b8:	69bb      	ldr	r3, [r7, #24]
 80111ba:	4313      	orrs	r3, r2
 80111bc:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80111be:	78fb      	ldrb	r3, [r7, #3]
 80111c0:	1c5a      	adds	r2, r3, #1
 80111c2:	70fa      	strb	r2, [r7, #3]
 80111c4:	461a      	mov	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	4413      	add	r3, r2
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	b21b      	sxth	r3, r3
 80111ce:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80111d0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80111d4:	461a      	mov	r2, r3
 80111d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80111da:	fb02 f303 	mul.w	r3, r2, r3
 80111de:	121b      	asrs	r3, r3, #8
 80111e0:	b21b      	sxth	r3, r3
 80111e2:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80111e4:	f107 0310 	add.w	r3, r7, #16
 80111e8:	f107 0218 	add.w	r2, r7, #24
 80111ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80111f0:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80111f4:	693a      	ldr	r2, [r7, #16]
 80111f6:	4b96      	ldr	r3, [pc, #600]	@ (8011450 <ProcessMacCommands+0x9d8>)
 80111f8:	4413      	add	r3, r2
 80111fa:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80111fc:	f107 0308 	add.w	r3, r7, #8
 8011200:	4618      	mov	r0, r3
 8011202:	f00a fddf 	bl	801bdc4 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8011206:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 801120a:	4b92      	ldr	r3, [pc, #584]	@ (8011454 <ProcessMacCommands+0x9dc>)
 801120c:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8011210:	9200      	str	r2, [sp, #0]
 8011212:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 8011216:	f107 0210 	add.w	r2, r7, #16
 801121a:	ca06      	ldmia	r2, {r1, r2}
 801121c:	f00a fd6b 	bl	801bcf6 <SysTimeSub>
 8011220:	f107 0010 	add.w	r0, r7, #16
 8011224:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011226:	9300      	str	r3, [sp, #0]
 8011228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801122a:	f107 0208 	add.w	r2, r7, #8
 801122e:	ca06      	ldmia	r2, {r1, r2}
 8011230:	f00a fd28 	bl	801bc84 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011234:	f107 0310 	add.w	r3, r7, #16
 8011238:	e893 0003 	ldmia.w	r3, {r0, r1}
 801123c:	f00a fd94 	bl	801bd68 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011240:	f003 f840 	bl	80142c4 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011244:	4b83      	ldr	r3, [pc, #524]	@ (8011454 <ProcessMacCommands+0x9dc>)
 8011246:	2201      	movs	r2, #1
 8011248:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 801124c:	e0f2      	b.n	8011434 <ProcessMacCommands+0x9bc>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 801124e:	4b81      	ldr	r3, [pc, #516]	@ (8011454 <ProcessMacCommands+0x9dc>)
 8011250:	2200      	movs	r2, #0
 8011252:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 8011256:	e0ed      	b.n	8011434 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011258:	200c      	movs	r0, #12
 801125a:	f003 fccd 	bl	8014bf8 <LoRaMacConfirmQueueIsCmdActive>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	f000 80e4 	beq.w	801142e <ProcessMacCommands+0x9b6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011266:	210c      	movs	r1, #12
 8011268:	2000      	movs	r0, #0
 801126a:	f003 fc39 	bl	8014ae0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801126e:	4b79      	ldr	r3, [pc, #484]	@ (8011454 <ProcessMacCommands+0x9dc>)
 8011270:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011274:	2b04      	cmp	r3, #4
 8011276:	f000 80da 	beq.w	801142e <ProcessMacCommands+0x9b6>
 801127a:	4b76      	ldr	r3, [pc, #472]	@ (8011454 <ProcessMacCommands+0x9dc>)
 801127c:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011280:	2b05      	cmp	r3, #5
 8011282:	f000 80d4 	beq.w	801142e <ProcessMacCommands+0x9b6>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011286:	f002 fffe 	bl	8014286 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801128a:	e0d0      	b.n	801142e <ProcessMacCommands+0x9b6>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801128c:	2303      	movs	r3, #3
 801128e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 8011292:	2300      	movs	r3, #0
 8011294:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011296:	78fb      	ldrb	r3, [r7, #3]
 8011298:	1c5a      	adds	r2, r3, #1
 801129a:	70fa      	strb	r2, [r7, #3]
 801129c:	461a      	mov	r2, r3
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	4413      	add	r3, r2
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80112a6:	78fb      	ldrb	r3, [r7, #3]
 80112a8:	1c5a      	adds	r2, r3, #1
 80112aa:	70fa      	strb	r2, [r7, #3]
 80112ac:	461a      	mov	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	4413      	add	r3, r2
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	021b      	lsls	r3, r3, #8
 80112b6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80112b8:	4313      	orrs	r3, r2
 80112ba:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80112bc:	78fb      	ldrb	r3, [r7, #3]
 80112be:	1c5a      	adds	r2, r3, #1
 80112c0:	70fa      	strb	r2, [r7, #3]
 80112c2:	461a      	mov	r2, r3
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	4413      	add	r3, r2
 80112c8:	781b      	ldrb	r3, [r3, #0]
 80112ca:	041b      	lsls	r3, r3, #16
 80112cc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80112ce:	4313      	orrs	r3, r2
 80112d0:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 80112d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112d4:	2264      	movs	r2, #100	@ 0x64
 80112d6:	fb02 f303 	mul.w	r3, r2, r3
 80112da:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 80112dc:	78fb      	ldrb	r3, [r7, #3]
 80112de:	1c5a      	adds	r2, r3, #1
 80112e0:	70fa      	strb	r2, [r7, #3]
 80112e2:	461a      	mov	r2, r3
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	4413      	add	r3, r2
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	f003 030f 	and.w	r3, r3, #15
 80112ee:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80112f2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80112f6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80112f8:	4618      	mov	r0, r3
 80112fa:	f002 ffca 	bl	8014292 <LoRaMacClassBPingSlotChannelReq>
 80112fe:	4603      	mov	r3, r0
 8011300:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 8011304:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8011308:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 801130c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011310:	2201      	movs	r2, #1
 8011312:	4619      	mov	r1, r3
 8011314:	2011      	movs	r0, #17
 8011316:	f003 f937 	bl	8014588 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 801131a:	e08b      	b.n	8011434 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801131c:	200d      	movs	r0, #13
 801131e:	f003 fc6b 	bl	8014bf8 <LoRaMacConfirmQueueIsCmdActive>
 8011322:	4603      	mov	r3, r0
 8011324:	2b00      	cmp	r3, #0
 8011326:	f000 8084 	beq.w	8011432 <ProcessMacCommands+0x9ba>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801132a:	210d      	movs	r1, #13
 801132c:	2000      	movs	r0, #0
 801132e:	f003 fbd7 	bl	8014ae0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011332:	2300      	movs	r3, #0
 8011334:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 8011338:	2300      	movs	r3, #0
 801133a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801133e:	78fb      	ldrb	r3, [r7, #3]
 8011340:	1c5a      	adds	r2, r3, #1
 8011342:	70fa      	strb	r2, [r7, #3]
 8011344:	461a      	mov	r2, r3
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4413      	add	r3, r2
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011350:	78fb      	ldrb	r3, [r7, #3]
 8011352:	1c5a      	adds	r2, r3, #1
 8011354:	70fa      	strb	r2, [r7, #3]
 8011356:	461a      	mov	r2, r3
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	4413      	add	r3, r2
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	021b      	lsls	r3, r3, #8
 8011360:	b21a      	sxth	r2, r3
 8011362:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8011366:	4313      	orrs	r3, r2
 8011368:	b21b      	sxth	r3, r3
 801136a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 801136e:	78fb      	ldrb	r3, [r7, #3]
 8011370:	1c5a      	adds	r2, r3, #1
 8011372:	70fa      	strb	r2, [r7, #3]
 8011374:	461a      	mov	r2, r3
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	4413      	add	r3, r2
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011380:	4b35      	ldr	r3, [pc, #212]	@ (8011458 <ProcessMacCommands+0x9e0>)
 8011382:	681a      	ldr	r2, [r3, #0]
 8011384:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8011388:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 801138c:	4618      	mov	r0, r3
 801138e:	f002 ff8c 	bl	80142aa <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011392:	e04e      	b.n	8011432 <ProcessMacCommands+0x9ba>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011394:	2300      	movs	r3, #0
 8011396:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801139a:	78fb      	ldrb	r3, [r7, #3]
 801139c:	1c5a      	adds	r2, r3, #1
 801139e:	70fa      	strb	r2, [r7, #3]
 80113a0:	461a      	mov	r2, r3
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	4413      	add	r3, r2
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80113ac:	78fb      	ldrb	r3, [r7, #3]
 80113ae:	1c5a      	adds	r2, r3, #1
 80113b0:	70fa      	strb	r2, [r7, #3]
 80113b2:	461a      	mov	r2, r3
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	4413      	add	r3, r2
 80113b8:	781b      	ldrb	r3, [r3, #0]
 80113ba:	021b      	lsls	r3, r3, #8
 80113bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80113c0:	4313      	orrs	r3, r2
 80113c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80113c6:	78fb      	ldrb	r3, [r7, #3]
 80113c8:	1c5a      	adds	r2, r3, #1
 80113ca:	70fa      	strb	r2, [r7, #3]
 80113cc:	461a      	mov	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	4413      	add	r3, r2
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	041b      	lsls	r3, r3, #16
 80113d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80113da:	4313      	orrs	r3, r2
 80113dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 80113e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80113e4:	2264      	movs	r2, #100	@ 0x64
 80113e6:	fb02 f303 	mul.w	r3, r2, r3
 80113ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80113ee:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80113f2:	f002 ff6d 	bl	80142d0 <LoRaMacClassBBeaconFreqReq>
 80113f6:	4603      	mov	r3, r0
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d003      	beq.n	8011404 <ProcessMacCommands+0x98c>
                    {
                        macCmdPayload[0] = 1;
 80113fc:	2301      	movs	r3, #1
 80113fe:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8011402:	e002      	b.n	801140a <ProcessMacCommands+0x992>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8011404:	2300      	movs	r3, #0
 8011406:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 801140a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801140e:	2201      	movs	r2, #1
 8011410:	4619      	mov	r1, r3
 8011412:	2013      	movs	r0, #19
 8011414:	f003 f8b8 	bl	8014588 <LoRaMacCommandsAddCmd>
                }
                break;
 8011418:	e00c      	b.n	8011434 <ProcessMacCommands+0x9bc>
                break;
 801141a:	bf00      	nop
 801141c:	e00a      	b.n	8011434 <ProcessMacCommands+0x9bc>
                break;
 801141e:	bf00      	nop
 8011420:	e008      	b.n	8011434 <ProcessMacCommands+0x9bc>
                break;
 8011422:	bf00      	nop
 8011424:	e006      	b.n	8011434 <ProcessMacCommands+0x9bc>
                break;
 8011426:	bf00      	nop
 8011428:	e004      	b.n	8011434 <ProcessMacCommands+0x9bc>
                break;
 801142a:	bf00      	nop
 801142c:	e002      	b.n	8011434 <ProcessMacCommands+0x9bc>
                break;
 801142e:	bf00      	nop
 8011430:	e000      	b.n	8011434 <ProcessMacCommands+0x9bc>
                break;
 8011432:	bf00      	nop
    while( macIndex < commandsSize )
 8011434:	78fa      	ldrb	r2, [r7, #3]
 8011436:	78bb      	ldrb	r3, [r7, #2]
 8011438:	429a      	cmp	r2, r3
 801143a:	f4ff ab3f 	bcc.w	8010abc <ProcessMacCommands+0x44>
 801143e:	e004      	b.n	801144a <ProcessMacCommands+0x9d2>
        return;
 8011440:	bf00      	nop
 8011442:	e002      	b.n	801144a <ProcessMacCommands+0x9d2>
            return;
 8011444:	bf00      	nop
 8011446:	e000      	b.n	801144a <ProcessMacCommands+0x9d2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011448:	bf00      	nop
        }
    }
}
 801144a:	378c      	adds	r7, #140	@ 0x8c
 801144c:	46bd      	mov	sp, r7
 801144e:	bd90      	pop	{r4, r7, pc}
 8011450:	12d53d80 	.word	0x12d53d80
 8011454:	20000890 	.word	0x20000890
 8011458:	200019d4 	.word	0x200019d4

0801145c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b08e      	sub	sp, #56	@ 0x38
 8011460:	af02      	add	r7, sp, #8
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	607a      	str	r2, [r7, #4]
 8011466:	461a      	mov	r2, r3
 8011468:	460b      	mov	r3, r1
 801146a:	72fb      	strb	r3, [r7, #11]
 801146c:	4613      	mov	r3, r2
 801146e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011470:	2303      	movs	r3, #3
 8011472:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011476:	4b66      	ldr	r3, [pc, #408]	@ (8011610 <Send+0x1b4>)
 8011478:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801147c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8011480:	4b63      	ldr	r3, [pc, #396]	@ (8011610 <Send+0x1b4>)
 8011482:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011486:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801148a:	4b61      	ldr	r3, [pc, #388]	@ (8011610 <Send+0x1b4>)
 801148c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801148e:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011490:	4b5f      	ldr	r3, [pc, #380]	@ (8011610 <Send+0x1b4>)
 8011492:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011496:	2b00      	cmp	r3, #0
 8011498:	d101      	bne.n	801149e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801149a:	2307      	movs	r3, #7
 801149c:	e0b4      	b.n	8011608 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801149e:	4b5c      	ldr	r3, [pc, #368]	@ (8011610 <Send+0x1b4>)
 80114a0:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d102      	bne.n	80114ae <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80114a8:	4b59      	ldr	r3, [pc, #356]	@ (8011610 <Send+0x1b4>)
 80114aa:	2200      	movs	r2, #0
 80114ac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 80114ae:	2300      	movs	r3, #0
 80114b0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80114b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80114b8:	f023 030f 	bic.w	r3, r3, #15
 80114bc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80114c0:	4b53      	ldr	r3, [pc, #332]	@ (8011610 <Send+0x1b4>)
 80114c2:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 80114c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80114ca:	f362 13c7 	bfi	r3, r2, #7, #1
 80114ce:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80114d2:	4b4f      	ldr	r3, [pc, #316]	@ (8011610 <Send+0x1b4>)
 80114d4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d106      	bne.n	80114ea <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80114dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80114e0:	f043 0310 	orr.w	r3, r3, #16
 80114e4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80114e8:	e005      	b.n	80114f6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80114ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80114ee:	f023 0310 	bic.w	r3, r3, #16
 80114f2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80114f6:	4b46      	ldr	r3, [pc, #280]	@ (8011610 <Send+0x1b4>)
 80114f8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d005      	beq.n	801150c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8011500:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011504:	f043 0320 	orr.w	r3, r3, #32
 8011508:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 801150c:	2301      	movs	r3, #1
 801150e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011510:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011514:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011518:	b2db      	uxtb	r3, r3
 801151a:	2b00      	cmp	r3, #0
 801151c:	bf14      	ite	ne
 801151e:	2301      	movne	r3, #1
 8011520:	2300      	moveq	r3, #0
 8011522:	b2db      	uxtb	r3, r3
 8011524:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011526:	4b3a      	ldr	r3, [pc, #232]	@ (8011610 <Send+0x1b4>)
 8011528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801152a:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801152c:	4b38      	ldr	r3, [pc, #224]	@ (8011610 <Send+0x1b4>)
 801152e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8011532:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011534:	4b36      	ldr	r3, [pc, #216]	@ (8011610 <Send+0x1b4>)
 8011536:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 801153a:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801153c:	4b34      	ldr	r3, [pc, #208]	@ (8011610 <Send+0x1b4>)
 801153e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011542:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011546:	4b32      	ldr	r3, [pc, #200]	@ (8011610 <Send+0x1b4>)
 8011548:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801154c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011550:	4b2f      	ldr	r3, [pc, #188]	@ (8011610 <Send+0x1b4>)
 8011552:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801155a:	4b2d      	ldr	r3, [pc, #180]	@ (8011610 <Send+0x1b4>)
 801155c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011560:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011564:	4b2a      	ldr	r3, [pc, #168]	@ (8011610 <Send+0x1b4>)
 8011566:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801156a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801156e:	f107 0014 	add.w	r0, r7, #20
 8011572:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011576:	9300      	str	r3, [sp, #0]
 8011578:	4b26      	ldr	r3, [pc, #152]	@ (8011614 <Send+0x1b8>)
 801157a:	4a27      	ldr	r2, [pc, #156]	@ (8011618 <Send+0x1bc>)
 801157c:	4927      	ldr	r1, [pc, #156]	@ (801161c <Send+0x1c0>)
 801157e:	f002 fd21 	bl	8013fc4 <LoRaMacAdrCalcNext>
 8011582:	4603      	mov	r3, r0
 8011584:	461a      	mov	r2, r3
 8011586:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801158a:	f362 1386 	bfi	r3, r2, #6, #1
 801158e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011592:	7afa      	ldrb	r2, [r7, #11]
 8011594:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8011598:	893b      	ldrh	r3, [r7, #8]
 801159a:	9300      	str	r3, [sp, #0]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	68f8      	ldr	r0, [r7, #12]
 80115a0:	f000 fc72 	bl	8011e88 <PrepareFrame>
 80115a4:	4603      	mov	r3, r0
 80115a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80115aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d003      	beq.n	80115ba <Send+0x15e>
 80115b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80115b6:	2b0a      	cmp	r3, #10
 80115b8:	d107      	bne.n	80115ca <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 80115ba:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80115be:	4618      	mov	r0, r3
 80115c0:	f000 f962 	bl	8011888 <ScheduleTx>
 80115c4:	4603      	mov	r3, r0
 80115c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80115ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d00a      	beq.n	80115e8 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 80115d2:	4a0f      	ldr	r2, [pc, #60]	@ (8011610 <Send+0x1b4>)
 80115d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80115d8:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80115dc:	4a0c      	ldr	r2, [pc, #48]	@ (8011610 <Send+0x1b4>)
 80115de:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80115e2:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 80115e6:	e00d      	b.n	8011604 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80115e8:	4b09      	ldr	r3, [pc, #36]	@ (8011610 <Send+0x1b4>)
 80115ea:	2200      	movs	r2, #0
 80115ec:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80115f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115f2:	4a07      	ldr	r2, [pc, #28]	@ (8011610 <Send+0x1b4>)
 80115f4:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80115f6:	f003 f86d 	bl	80146d4 <LoRaMacCommandsRemoveNoneStickyCmds>
 80115fa:	4603      	mov	r3, r0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d001      	beq.n	8011604 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011600:	2313      	movs	r3, #19
 8011602:	e001      	b.n	8011608 <Send+0x1ac>
        }
    }
    return status;
 8011604:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011608:	4618      	mov	r0, r3
 801160a:	3730      	adds	r7, #48	@ 0x30
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}
 8011610:	20000dc4 	.word	0x20000dc4
 8011614:	20000e2c 	.word	0x20000e2c
 8011618:	20000dfc 	.word	0x20000dfc
 801161c:	20000dfd 	.word	0x20000dfd

08011620 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b084      	sub	sp, #16
 8011624:	af00      	add	r7, sp, #0
 8011626:	4603      	mov	r3, r0
 8011628:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801162a:	2300      	movs	r3, #0
 801162c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801162e:	2300      	movs	r3, #0
 8011630:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8011632:	2301      	movs	r3, #1
 8011634:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011636:	79fb      	ldrb	r3, [r7, #7]
 8011638:	2bff      	cmp	r3, #255	@ 0xff
 801163a:	d11f      	bne.n	801167c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 801163c:	2000      	movs	r0, #0
 801163e:	f7ff f8e1 	bl	8010804 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011642:	4b15      	ldr	r3, [pc, #84]	@ (8011698 <SendReJoinReq+0x78>)
 8011644:	2200      	movs	r2, #0
 8011646:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 801164a:	4b13      	ldr	r3, [pc, #76]	@ (8011698 <SendReJoinReq+0x78>)
 801164c:	4a13      	ldr	r2, [pc, #76]	@ (801169c <SendReJoinReq+0x7c>)
 801164e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011652:	4b11      	ldr	r3, [pc, #68]	@ (8011698 <SendReJoinReq+0x78>)
 8011654:	22ff      	movs	r2, #255	@ 0xff
 8011656:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801165a:	7b3b      	ldrb	r3, [r7, #12]
 801165c:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8011660:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011662:	7b3a      	ldrb	r2, [r7, #12]
 8011664:	4b0c      	ldr	r3, [pc, #48]	@ (8011698 <SendReJoinReq+0x78>)
 8011666:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 801166a:	480d      	ldr	r0, [pc, #52]	@ (80116a0 <SendReJoinReq+0x80>)
 801166c:	f7fb fefc 	bl	800d468 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8011670:	480c      	ldr	r0, [pc, #48]	@ (80116a4 <SendReJoinReq+0x84>)
 8011672:	f7fb fec9 	bl	800d408 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8011676:	2300      	movs	r3, #0
 8011678:	73fb      	strb	r3, [r7, #15]

            break;
 801167a:	e002      	b.n	8011682 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801167c:	2302      	movs	r3, #2
 801167e:	73bb      	strb	r3, [r7, #14]
            break;
 8011680:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011682:	7bfb      	ldrb	r3, [r7, #15]
 8011684:	4618      	mov	r0, r3
 8011686:	f000 f8ff 	bl	8011888 <ScheduleTx>
 801168a:	4603      	mov	r3, r0
 801168c:	73bb      	strb	r3, [r7, #14]
    return status;
 801168e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011690:	4618      	mov	r0, r3
 8011692:	3710      	adds	r7, #16
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}
 8011698:	20000890 	.word	0x20000890
 801169c:	20000892 	.word	0x20000892
 80116a0:	2000099e 	.word	0x2000099e
 80116a4:	200009a6 	.word	0x200009a6

080116a8 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80116ac:	f002 fd9a 	bl	80141e4 <LoRaMacClassBIsBeaconExpected>
 80116b0:	4603      	mov	r3, r0
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d001      	beq.n	80116ba <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80116b6:	230e      	movs	r3, #14
 80116b8:	e013      	b.n	80116e2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80116ba:	4b0b      	ldr	r3, [pc, #44]	@ (80116e8 <CheckForClassBCollision+0x40>)
 80116bc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	d10d      	bne.n	80116e0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80116c4:	f002 fd95 	bl	80141f2 <LoRaMacClassBIsPingExpected>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d001      	beq.n	80116d2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80116ce:	230f      	movs	r3, #15
 80116d0:	e007      	b.n	80116e2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80116d2:	f002 fd95 	bl	8014200 <LoRaMacClassBIsMulticastExpected>
 80116d6:	4603      	mov	r3, r0
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d001      	beq.n	80116e0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80116dc:	230f      	movs	r3, #15
 80116de:	e000      	b.n	80116e2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80116e0:	2300      	movs	r3, #0
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	20000dc4 	.word	0x20000dc4

080116ec <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80116ec:	b590      	push	{r4, r7, lr}
 80116ee:	b083      	sub	sp, #12
 80116f0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80116f2:	4b2d      	ldr	r3, [pc, #180]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 80116f4:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80116f8:	4b2b      	ldr	r3, [pc, #172]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 80116fa:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80116fe:	4b2a      	ldr	r3, [pc, #168]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 8011700:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 8011704:	4b28      	ldr	r3, [pc, #160]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 8011706:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801170a:	4b27      	ldr	r3, [pc, #156]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 801170c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011710:	b25b      	sxtb	r3, r3
 8011712:	f004 fe2e 	bl	8016372 <RegionApplyDrOffset>
 8011716:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011718:	b259      	sxtb	r1, r3
 801171a:	4b23      	ldr	r3, [pc, #140]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 801171c:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011720:	4b21      	ldr	r3, [pc, #132]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 8011722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011724:	4821      	ldr	r0, [pc, #132]	@ (80117ac <ComputeRxWindowParameters+0xc0>)
 8011726:	9000      	str	r0, [sp, #0]
 8011728:	4620      	mov	r0, r4
 801172a:	f004 fd44 	bl	80161b6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801172e:	4b1e      	ldr	r3, [pc, #120]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 8011730:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011734:	4b1c      	ldr	r3, [pc, #112]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 8011736:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801173a:	b259      	sxtb	r1, r3
 801173c:	4b1a      	ldr	r3, [pc, #104]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 801173e:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011742:	4b19      	ldr	r3, [pc, #100]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 8011744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011746:	4c1a      	ldr	r4, [pc, #104]	@ (80117b0 <ComputeRxWindowParameters+0xc4>)
 8011748:	9400      	str	r4, [sp, #0]
 801174a:	f004 fd34 	bl	80161b6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801174e:	4b16      	ldr	r3, [pc, #88]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 8011750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011752:	4a18      	ldr	r2, [pc, #96]	@ (80117b4 <ComputeRxWindowParameters+0xc8>)
 8011754:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011758:	4413      	add	r3, r2
 801175a:	4a16      	ldr	r2, [pc, #88]	@ (80117b4 <ComputeRxWindowParameters+0xc8>)
 801175c:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011760:	4b11      	ldr	r3, [pc, #68]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 8011762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011764:	4a13      	ldr	r2, [pc, #76]	@ (80117b4 <ComputeRxWindowParameters+0xc8>)
 8011766:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 801176a:	4413      	add	r3, r2
 801176c:	4a11      	ldr	r2, [pc, #68]	@ (80117b4 <ComputeRxWindowParameters+0xc8>)
 801176e:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8011772:	4b10      	ldr	r3, [pc, #64]	@ (80117b4 <ComputeRxWindowParameters+0xc8>)
 8011774:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011778:	2b04      	cmp	r3, #4
 801177a:	d011      	beq.n	80117a0 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801177c:	4b0a      	ldr	r3, [pc, #40]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 801177e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011780:	4a0c      	ldr	r2, [pc, #48]	@ (80117b4 <ComputeRxWindowParameters+0xc8>)
 8011782:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011786:	4413      	add	r3, r2
 8011788:	4a0a      	ldr	r2, [pc, #40]	@ (80117b4 <ComputeRxWindowParameters+0xc8>)
 801178a:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801178e:	4b06      	ldr	r3, [pc, #24]	@ (80117a8 <ComputeRxWindowParameters+0xbc>)
 8011790:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011792:	4a08      	ldr	r2, [pc, #32]	@ (80117b4 <ComputeRxWindowParameters+0xc8>)
 8011794:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8011798:	4413      	add	r3, r2
 801179a:	4a06      	ldr	r2, [pc, #24]	@ (80117b4 <ComputeRxWindowParameters+0xc8>)
 801179c:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 80117a0:	bf00      	nop
 80117a2:	3704      	adds	r7, #4
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd90      	pop	{r4, r7, pc}
 80117a8:	20000dc4 	.word	0x20000dc4
 80117ac:	20000c48 	.word	0x20000c48
 80117b0:	20000c60 	.word	0x20000c60
 80117b4:	20000890 	.word	0x20000890

080117b8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 80117be:	2300      	movs	r3, #0
 80117c0:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80117c2:	4b13      	ldr	r3, [pc, #76]	@ (8011810 <VerifyTxFrame+0x58>)
 80117c4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d01b      	beq.n	8011804 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80117cc:	1d3b      	adds	r3, r7, #4
 80117ce:	4618      	mov	r0, r3
 80117d0:	f002 ffd0 	bl	8014774 <LoRaMacCommandsGetSizeSerializedCmds>
 80117d4:	4603      	mov	r3, r0
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d001      	beq.n	80117de <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80117da:	2313      	movs	r3, #19
 80117dc:	e013      	b.n	8011806 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80117de:	4b0d      	ldr	r3, [pc, #52]	@ (8011814 <VerifyTxFrame+0x5c>)
 80117e0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80117e4:	4a0a      	ldr	r2, [pc, #40]	@ (8011810 <VerifyTxFrame+0x58>)
 80117e6:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 80117ea:	687a      	ldr	r2, [r7, #4]
 80117ec:	b2d2      	uxtb	r2, r2
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7ff f91a 	bl	8010a28 <ValidatePayloadLength>
 80117f4:	4603      	mov	r3, r0
 80117f6:	f083 0301 	eor.w	r3, r3, #1
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d001      	beq.n	8011804 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011800:	2308      	movs	r3, #8
 8011802:	e000      	b.n	8011806 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011804:	2300      	movs	r3, #0
}
 8011806:	4618      	mov	r0, r3
 8011808:	3708      	adds	r7, #8
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	20000dc4 	.word	0x20000dc4
 8011814:	20000890 	.word	0x20000890

08011818 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801181e:	4b18      	ldr	r3, [pc, #96]	@ (8011880 <SerializeTxFrame+0x68>)
 8011820:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011824:	2b00      	cmp	r3, #0
 8011826:	d002      	beq.n	801182e <SerializeTxFrame+0x16>
 8011828:	2b04      	cmp	r3, #4
 801182a:	d011      	beq.n	8011850 <SerializeTxFrame+0x38>
 801182c:	e021      	b.n	8011872 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801182e:	4815      	ldr	r0, [pc, #84]	@ (8011884 <SerializeTxFrame+0x6c>)
 8011830:	f004 fac3 	bl	8015dba <LoRaMacSerializerJoinRequest>
 8011834:	4603      	mov	r3, r0
 8011836:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011838:	79fb      	ldrb	r3, [r7, #7]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d001      	beq.n	8011842 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801183e:	2311      	movs	r3, #17
 8011840:	e01a      	b.n	8011878 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011842:	4b0f      	ldr	r3, [pc, #60]	@ (8011880 <SerializeTxFrame+0x68>)
 8011844:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011848:	461a      	mov	r2, r3
 801184a:	4b0d      	ldr	r3, [pc, #52]	@ (8011880 <SerializeTxFrame+0x68>)
 801184c:	801a      	strh	r2, [r3, #0]
            break;
 801184e:	e012      	b.n	8011876 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011850:	480c      	ldr	r0, [pc, #48]	@ (8011884 <SerializeTxFrame+0x6c>)
 8011852:	f004 fb34 	bl	8015ebe <LoRaMacSerializerData>
 8011856:	4603      	mov	r3, r0
 8011858:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801185a:	79fb      	ldrb	r3, [r7, #7]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d001      	beq.n	8011864 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011860:	2311      	movs	r3, #17
 8011862:	e009      	b.n	8011878 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011864:	4b06      	ldr	r3, [pc, #24]	@ (8011880 <SerializeTxFrame+0x68>)
 8011866:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801186a:	461a      	mov	r2, r3
 801186c:	4b04      	ldr	r3, [pc, #16]	@ (8011880 <SerializeTxFrame+0x68>)
 801186e:	801a      	strh	r2, [r3, #0]
            break;
 8011870:	e001      	b.n	8011876 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011872:	2303      	movs	r3, #3
 8011874:	e000      	b.n	8011878 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011876:	2300      	movs	r3, #0
}
 8011878:	4618      	mov	r0, r3
 801187a:	3708      	adds	r7, #8
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}
 8011880:	20000890 	.word	0x20000890
 8011884:	20000998 	.word	0x20000998

08011888 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b090      	sub	sp, #64	@ 0x40
 801188c:	af02      	add	r7, sp, #8
 801188e:	4603      	mov	r3, r0
 8011890:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011892:	2303      	movs	r3, #3
 8011894:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011898:	f7ff ff06 	bl	80116a8 <CheckForClassBCollision>
 801189c:	4603      	mov	r3, r0
 801189e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 80118a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d002      	beq.n	80118b0 <ScheduleTx+0x28>
    {
        return status;
 80118aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80118ae:	e092      	b.n	80119d6 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 80118b0:	f000 f8f8 	bl	8011aa4 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80118b4:	f7ff ffb0 	bl	8011818 <SerializeTxFrame>
 80118b8:	4603      	mov	r3, r0
 80118ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 80118be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d002      	beq.n	80118cc <ScheduleTx+0x44>
    {
        return status;
 80118c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80118ca:	e084      	b.n	80119d6 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80118cc:	4b44      	ldr	r3, [pc, #272]	@ (80119e0 <ScheduleTx+0x158>)
 80118ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118d0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80118d2:	4b43      	ldr	r3, [pc, #268]	@ (80119e0 <ScheduleTx+0x158>)
 80118d4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80118d8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80118da:	4b41      	ldr	r3, [pc, #260]	@ (80119e0 <ScheduleTx+0x158>)
 80118dc:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80118e0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80118e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80118e6:	4618      	mov	r0, r3
 80118e8:	f00a faa4 	bl	801be34 <SysTimeGetMcuTime>
 80118ec:	4638      	mov	r0, r7
 80118ee:	4b3c      	ldr	r3, [pc, #240]	@ (80119e0 <ScheduleTx+0x158>)
 80118f0:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 80118f4:	9200      	str	r2, [sp, #0]
 80118f6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80118fa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80118fe:	ca06      	ldmia	r2, {r1, r2}
 8011900:	f00a f9f9 	bl	801bcf6 <SysTimeSub>
 8011904:	f107 0320 	add.w	r3, r7, #32
 8011908:	463a      	mov	r2, r7
 801190a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801190e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8011912:	4b33      	ldr	r3, [pc, #204]	@ (80119e0 <ScheduleTx+0x158>)
 8011914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011916:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8011918:	2300      	movs	r3, #0
 801191a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 801191e:	2301      	movs	r3, #1
 8011920:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011922:	4b30      	ldr	r3, [pc, #192]	@ (80119e4 <ScheduleTx+0x15c>)
 8011924:	881b      	ldrh	r3, [r3, #0]
 8011926:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011928:	4b2d      	ldr	r3, [pc, #180]	@ (80119e0 <ScheduleTx+0x158>)
 801192a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 801192e:	2b00      	cmp	r3, #0
 8011930:	d104      	bne.n	801193c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011932:	2301      	movs	r3, #1
 8011934:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8011938:	2300      	movs	r3, #0
 801193a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 801193c:	4b28      	ldr	r3, [pc, #160]	@ (80119e0 <ScheduleTx+0x158>)
 801193e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011942:	f107 0114 	add.w	r1, r7, #20
 8011946:	4b28      	ldr	r3, [pc, #160]	@ (80119e8 <ScheduleTx+0x160>)
 8011948:	9300      	str	r3, [sp, #0]
 801194a:	4b28      	ldr	r3, [pc, #160]	@ (80119ec <ScheduleTx+0x164>)
 801194c:	4a28      	ldr	r2, [pc, #160]	@ (80119f0 <ScheduleTx+0x168>)
 801194e:	f004 fcf8 	bl	8016342 <RegionNextChannel>
 8011952:	4603      	mov	r3, r0
 8011954:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8011958:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801195c:	2b00      	cmp	r3, #0
 801195e:	d025      	beq.n	80119ac <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8011960:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011964:	2b0b      	cmp	r3, #11
 8011966:	d11e      	bne.n	80119a6 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011968:	4b1e      	ldr	r3, [pc, #120]	@ (80119e4 <ScheduleTx+0x15c>)
 801196a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 801196e:	2b00      	cmp	r3, #0
 8011970:	d01c      	beq.n	80119ac <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8011972:	7bfb      	ldrb	r3, [r7, #15]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d013      	beq.n	80119a0 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011978:	4b1a      	ldr	r3, [pc, #104]	@ (80119e4 <ScheduleTx+0x15c>)
 801197a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801197e:	f043 0320 	orr.w	r3, r3, #32
 8011982:	4a18      	ldr	r2, [pc, #96]	@ (80119e4 <ScheduleTx+0x15c>)
 8011984:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011988:	4b16      	ldr	r3, [pc, #88]	@ (80119e4 <ScheduleTx+0x15c>)
 801198a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 801198e:	4619      	mov	r1, r3
 8011990:	4818      	ldr	r0, [pc, #96]	@ (80119f4 <ScheduleTx+0x16c>)
 8011992:	f00a ff87 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8011996:	4817      	ldr	r0, [pc, #92]	@ (80119f4 <ScheduleTx+0x16c>)
 8011998:	f00a fea6 	bl	801c6e8 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 801199c:	2300      	movs	r3, #0
 801199e:	e01a      	b.n	80119d6 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 80119a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119a4:	e017      	b.n	80119d6 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80119a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119aa:	e014      	b.n	80119d6 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80119ac:	f7ff fe9e 	bl	80116ec <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80119b0:	f7ff ff02 	bl	80117b8 <VerifyTxFrame>
 80119b4:	4603      	mov	r3, r0
 80119b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 80119ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d002      	beq.n	80119c8 <ScheduleTx+0x140>
    {
        return status;
 80119c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119c6:	e006      	b.n	80119d6 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 80119c8:	4b06      	ldr	r3, [pc, #24]	@ (80119e4 <ScheduleTx+0x15c>)
 80119ca:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 80119ce:	4618      	mov	r0, r3
 80119d0:	f000 fb74 	bl	80120bc <SendFrameOnChannel>
 80119d4:	4603      	mov	r3, r0
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	3738      	adds	r7, #56	@ 0x38
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}
 80119de:	bf00      	nop
 80119e0:	20000dc4 	.word	0x20000dc4
 80119e4:	20000890 	.word	0x20000890
 80119e8:	20000df4 	.word	0x20000df4
 80119ec:	20000d24 	.word	0x20000d24
 80119f0:	20000cab 	.word	0x20000cab
 80119f4:	20000bf8 	.word	0x20000bf8

080119f8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b084      	sub	sp, #16
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	4603      	mov	r3, r0
 8011a00:	460a      	mov	r2, r1
 8011a02:	71fb      	strb	r3, [r7, #7]
 8011a04:	4613      	mov	r3, r2
 8011a06:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011a08:	2312      	movs	r3, #18
 8011a0a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011a10:	4b22      	ldr	r3, [pc, #136]	@ (8011a9c <SecureFrame+0xa4>)
 8011a12:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d002      	beq.n	8011a20 <SecureFrame+0x28>
 8011a1a:	2b04      	cmp	r3, #4
 8011a1c:	d011      	beq.n	8011a42 <SecureFrame+0x4a>
 8011a1e:	e036      	b.n	8011a8e <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011a20:	481f      	ldr	r0, [pc, #124]	@ (8011aa0 <SecureFrame+0xa8>)
 8011a22:	f003 fd9d 	bl	8015560 <LoRaMacCryptoPrepareJoinRequest>
 8011a26:	4603      	mov	r3, r0
 8011a28:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011a2a:	7bfb      	ldrb	r3, [r7, #15]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d001      	beq.n	8011a34 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a30:	2311      	movs	r3, #17
 8011a32:	e02f      	b.n	8011a94 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011a34:	4b19      	ldr	r3, [pc, #100]	@ (8011a9c <SecureFrame+0xa4>)
 8011a36:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011a3a:	461a      	mov	r2, r3
 8011a3c:	4b17      	ldr	r3, [pc, #92]	@ (8011a9c <SecureFrame+0xa4>)
 8011a3e:	801a      	strh	r2, [r3, #0]
            break;
 8011a40:	e027      	b.n	8011a92 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011a42:	f107 0308 	add.w	r3, r7, #8
 8011a46:	4618      	mov	r0, r3
 8011a48:	f003 fcc4 	bl	80153d4 <LoRaMacCryptoGetFCntUp>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d001      	beq.n	8011a56 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011a52:	2312      	movs	r3, #18
 8011a54:	e01e      	b.n	8011a94 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8011a56:	4b11      	ldr	r3, [pc, #68]	@ (8011a9c <SecureFrame+0xa4>)
 8011a58:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d002      	beq.n	8011a66 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	3b01      	subs	r3, #1
 8011a64:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011a66:	68b8      	ldr	r0, [r7, #8]
 8011a68:	79ba      	ldrb	r2, [r7, #6]
 8011a6a:	79f9      	ldrb	r1, [r7, #7]
 8011a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8011aa0 <SecureFrame+0xa8>)
 8011a6e:	f003 fe9d 	bl	80157ac <LoRaMacCryptoSecureMessage>
 8011a72:	4603      	mov	r3, r0
 8011a74:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011a76:	7bfb      	ldrb	r3, [r7, #15]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d001      	beq.n	8011a80 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a7c:	2311      	movs	r3, #17
 8011a7e:	e009      	b.n	8011a94 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011a80:	4b06      	ldr	r3, [pc, #24]	@ (8011a9c <SecureFrame+0xa4>)
 8011a82:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011a86:	461a      	mov	r2, r3
 8011a88:	4b04      	ldr	r3, [pc, #16]	@ (8011a9c <SecureFrame+0xa4>)
 8011a8a:	801a      	strh	r2, [r3, #0]
            break;
 8011a8c:	e001      	b.n	8011a92 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011a8e:	2303      	movs	r3, #3
 8011a90:	e000      	b.n	8011a94 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8011a92:	2300      	movs	r3, #0
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3710      	adds	r7, #16
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}
 8011a9c:	20000890 	.word	0x20000890
 8011aa0:	20000998 	.word	0x20000998

08011aa4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011aa8:	4b09      	ldr	r3, [pc, #36]	@ (8011ad0 <CalculateBackOff+0x2c>)
 8011aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d10a      	bne.n	8011ac6 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011ab0:	4b07      	ldr	r3, [pc, #28]	@ (8011ad0 <CalculateBackOff+0x2c>)
 8011ab2:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8011ab6:	3b01      	subs	r3, #1
 8011ab8:	4a06      	ldr	r2, [pc, #24]	@ (8011ad4 <CalculateBackOff+0x30>)
 8011aba:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 8011abe:	fb02 f303 	mul.w	r3, r2, r3
 8011ac2:	4a03      	ldr	r2, [pc, #12]	@ (8011ad0 <CalculateBackOff+0x2c>)
 8011ac4:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8011ac6:	bf00      	nop
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bc80      	pop	{r7}
 8011acc:	4770      	bx	lr
 8011ace:	bf00      	nop
 8011ad0:	20000dc4 	.word	0x20000dc4
 8011ad4:	20000890 	.word	0x20000890

08011ad8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	4603      	mov	r3, r0
 8011ae0:	7139      	strb	r1, [r7, #4]
 8011ae2:	71fb      	strb	r3, [r7, #7]
 8011ae4:	4613      	mov	r3, r2
 8011ae6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011ae8:	79fb      	ldrb	r3, [r7, #7]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d002      	beq.n	8011af4 <RemoveMacCommands+0x1c>
 8011aee:	79fb      	ldrb	r3, [r7, #7]
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d10d      	bne.n	8011b10 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011af4:	79bb      	ldrb	r3, [r7, #6]
 8011af6:	2b01      	cmp	r3, #1
 8011af8:	d108      	bne.n	8011b0c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011afa:	793b      	ldrb	r3, [r7, #4]
 8011afc:	f003 0320 	and.w	r3, r3, #32
 8011b00:	b2db      	uxtb	r3, r3
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d004      	beq.n	8011b10 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011b06:	f002 fe09 	bl	801471c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011b0a:	e001      	b.n	8011b10 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011b0c:	f002 fe06 	bl	801471c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011b10:	bf00      	nop
 8011b12:	3708      	adds	r7, #8
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}

08011b18 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8011b18:	b5b0      	push	{r4, r5, r7, lr}
 8011b1a:	b092      	sub	sp, #72	@ 0x48
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	4603      	mov	r3, r0
 8011b20:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8011b22:	79fb      	ldrb	r3, [r7, #7]
 8011b24:	f083 0301 	eor.w	r3, r3, #1
 8011b28:	b2db      	uxtb	r3, r3
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d003      	beq.n	8011b36 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8011b2e:	4b88      	ldr	r3, [pc, #544]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b30:	2200      	movs	r2, #0
 8011b32:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8011b36:	4b86      	ldr	r3, [pc, #536]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b38:	2200      	movs	r2, #0
 8011b3a:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8011b3c:	4b85      	ldr	r3, [pc, #532]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011b3e:	2200      	movs	r2, #0
 8011b40:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8011b44:	4b83      	ldr	r3, [pc, #524]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011b46:	2200      	movs	r2, #0
 8011b48:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8011b4c:	4b81      	ldr	r3, [pc, #516]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011b4e:	2200      	movs	r2, #0
 8011b50:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8011b54:	4b7e      	ldr	r3, [pc, #504]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b56:	2200      	movs	r2, #0
 8011b58:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011b5c:	4b7c      	ldr	r3, [pc, #496]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b5e:	2201      	movs	r2, #1
 8011b60:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011b64:	4b7a      	ldr	r3, [pc, #488]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b66:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8011b6a:	4b79      	ldr	r3, [pc, #484]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011b70:	4b77      	ldr	r3, [pc, #476]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b72:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8011b76:	4b76      	ldr	r3, [pc, #472]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8011b7c:	4b74      	ldr	r3, [pc, #464]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b7e:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 8011b82:	4b73      	ldr	r3, [pc, #460]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b84:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011b88:	4b71      	ldr	r3, [pc, #452]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b8a:	4a71      	ldr	r2, [pc, #452]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b8c:	336c      	adds	r3, #108	@ 0x6c
 8011b8e:	32b4      	adds	r2, #180	@ 0xb4
 8011b90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b94:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011b98:	4b6d      	ldr	r3, [pc, #436]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b9a:	4a6d      	ldr	r2, [pc, #436]	@ (8011d50 <ResetMacParameters+0x238>)
 8011b9c:	3374      	adds	r3, #116	@ 0x74
 8011b9e:	32bc      	adds	r2, #188	@ 0xbc
 8011ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ba4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8011ba8:	4b69      	ldr	r3, [pc, #420]	@ (8011d50 <ResetMacParameters+0x238>)
 8011baa:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 8011bae:	4b68      	ldr	r3, [pc, #416]	@ (8011d50 <ResetMacParameters+0x238>)
 8011bb0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8011bb4:	4b66      	ldr	r3, [pc, #408]	@ (8011d50 <ResetMacParameters+0x238>)
 8011bb6:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 8011bba:	4b65      	ldr	r3, [pc, #404]	@ (8011d50 <ResetMacParameters+0x238>)
 8011bbc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8011bc0:	4b63      	ldr	r3, [pc, #396]	@ (8011d50 <ResetMacParameters+0x238>)
 8011bc2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011bc6:	4a62      	ldr	r2, [pc, #392]	@ (8011d50 <ResetMacParameters+0x238>)
 8011bc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011bcc:	4b60      	ldr	r3, [pc, #384]	@ (8011d50 <ResetMacParameters+0x238>)
 8011bce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8011bd2:	4a5f      	ldr	r2, [pc, #380]	@ (8011d50 <ResetMacParameters+0x238>)
 8011bd4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8011bd8:	4b5d      	ldr	r3, [pc, #372]	@ (8011d50 <ResetMacParameters+0x238>)
 8011bda:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8011bde:	4b5c      	ldr	r3, [pc, #368]	@ (8011d50 <ResetMacParameters+0x238>)
 8011be0:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8011be4:	4b5a      	ldr	r3, [pc, #360]	@ (8011d50 <ResetMacParameters+0x238>)
 8011be6:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8011bea:	4b59      	ldr	r3, [pc, #356]	@ (8011d50 <ResetMacParameters+0x238>)
 8011bec:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 8011bf0:	4b58      	ldr	r3, [pc, #352]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8011bf8:	4b55      	ldr	r3, [pc, #340]	@ (8011d50 <ResetMacParameters+0x238>)
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8011c00:	4b53      	ldr	r3, [pc, #332]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c02:	2200      	movs	r2, #0
 8011c04:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8011c08:	4b51      	ldr	r3, [pc, #324]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8011c10:	4b4f      	ldr	r3, [pc, #316]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c12:	2200      	movs	r2, #0
 8011c14:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8011c18:	4b4d      	ldr	r3, [pc, #308]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8011c20:	4b4b      	ldr	r3, [pc, #300]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c22:	2200      	movs	r2, #0
 8011c24:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8011c28:	4b49      	ldr	r3, [pc, #292]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8011c30:	4b47      	ldr	r3, [pc, #284]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c32:	2200      	movs	r2, #0
 8011c34:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8011c38:	4b45      	ldr	r3, [pc, #276]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8011c40:	4b43      	ldr	r3, [pc, #268]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c42:	2200      	movs	r2, #0
 8011c44:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8011c48:	4b41      	ldr	r3, [pc, #260]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011c50:	2301      	movs	r3, #1
 8011c52:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011c54:	4b40      	ldr	r3, [pc, #256]	@ (8011d58 <ResetMacParameters+0x240>)
 8011c56:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011c58:	4b40      	ldr	r3, [pc, #256]	@ (8011d5c <ResetMacParameters+0x244>)
 8011c5a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8011c5c:	4b40      	ldr	r3, [pc, #256]	@ (8011d60 <ResetMacParameters+0x248>)
 8011c5e:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011c60:	4b3b      	ldr	r3, [pc, #236]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c62:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011c66:	f107 020c 	add.w	r2, r7, #12
 8011c6a:	4611      	mov	r1, r2
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f004 fa54 	bl	801611a <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011c72:	4b38      	ldr	r3, [pc, #224]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011c74:	2200      	movs	r2, #0
 8011c76:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011c7a:	4b36      	ldr	r3, [pc, #216]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011c7c:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8011c80:	4b34      	ldr	r3, [pc, #208]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011c82:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011c86:	4b32      	ldr	r3, [pc, #200]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c8a:	4a32      	ldr	r2, [pc, #200]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011c8c:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011c90:	4b2f      	ldr	r3, [pc, #188]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c92:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8011c96:	4b2f      	ldr	r3, [pc, #188]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011c98:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8011d50 <ResetMacParameters+0x238>)
 8011c9e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011ca4:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011caa:	2200      	movs	r2, #0
 8011cac:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011cb0:	4b28      	ldr	r3, [pc, #160]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011cb2:	2201      	movs	r2, #1
 8011cb4:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011cb8:	4b25      	ldr	r3, [pc, #148]	@ (8011d50 <ResetMacParameters+0x238>)
 8011cba:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8011cbe:	4b25      	ldr	r3, [pc, #148]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011cc0:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011cc4:	4a23      	ldr	r2, [pc, #140]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011cc6:	4b23      	ldr	r3, [pc, #140]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011cc8:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8011ccc:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8011cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011cd8:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011cde:	2201      	movs	r2, #1
 8011ce0:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011ce6:	2202      	movs	r2, #2
 8011ce8:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8011cec:	2300      	movs	r3, #0
 8011cee:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 8011cf4:	4b17      	ldr	r3, [pc, #92]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011cf6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d009      	beq.n	8011d12 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8011cfe:	4b15      	ldr	r3, [pc, #84]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011d00:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8011d08:	4b12      	ldr	r3, [pc, #72]	@ (8011d54 <ResetMacParameters+0x23c>)
 8011d0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011d0e:	695b      	ldr	r3, [r3, #20]
 8011d10:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011d12:	4b14      	ldr	r3, [pc, #80]	@ (8011d64 <ResetMacParameters+0x24c>)
 8011d14:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011d16:	4b14      	ldr	r3, [pc, #80]	@ (8011d68 <ResetMacParameters+0x250>)
 8011d18:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011d1a:	4b14      	ldr	r3, [pc, #80]	@ (8011d6c <ResetMacParameters+0x254>)
 8011d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011d1e:	4b14      	ldr	r3, [pc, #80]	@ (8011d70 <ResetMacParameters+0x258>)
 8011d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011d22:	4b14      	ldr	r3, [pc, #80]	@ (8011d74 <ResetMacParameters+0x25c>)
 8011d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011d26:	4b14      	ldr	r3, [pc, #80]	@ (8011d78 <ResetMacParameters+0x260>)
 8011d28:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8011d2a:	4b14      	ldr	r3, [pc, #80]	@ (8011d7c <ResetMacParameters+0x264>)
 8011d2c:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8011d2e:	4b14      	ldr	r3, [pc, #80]	@ (8011d80 <ResetMacParameters+0x268>)
 8011d30:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8011d32:	4b14      	ldr	r3, [pc, #80]	@ (8011d84 <ResetMacParameters+0x26c>)
 8011d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011d36:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8011d3a:	f107 031c 	add.w	r3, r7, #28
 8011d3e:	4a12      	ldr	r2, [pc, #72]	@ (8011d88 <ResetMacParameters+0x270>)
 8011d40:	4618      	mov	r0, r3
 8011d42:	f002 f9f8 	bl	8014136 <LoRaMacClassBInit>
}
 8011d46:	bf00      	nop
 8011d48:	3748      	adds	r7, #72	@ 0x48
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	20000dc4 	.word	0x20000dc4
 8011d54:	20000890 	.word	0x20000890
 8011d58:	20000fe8 	.word	0x20000fe8
 8011d5c:	20000fec 	.word	0x20000fec
 8011d60:	2000193c 	.word	0x2000193c
 8011d64:	20000cf8 	.word	0x20000cf8
 8011d68:	20000cb0 	.word	0x20000cb0
 8011d6c:	20000ce4 	.word	0x20000ce4
 8011d70:	20000d21 	.word	0x20000d21
 8011d74:	20000ea8 	.word	0x20000ea8
 8011d78:	20000e0c 	.word	0x20000e0c
 8011d7c:	20000e10 	.word	0x20000e10
 8011d80:	20000eac 	.word	0x20000eac
 8011d84:	20000ef4 	.word	0x20000ef4
 8011d88:	20001368 	.word	0x20001368

08011d8c <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b082      	sub	sp, #8
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f00a fd14 	bl	801c7c4 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011d9c:	4b11      	ldr	r3, [pc, #68]	@ (8011de4 <RxWindowSetup+0x58>)
 8011d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011da0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011da2:	4b11      	ldr	r3, [pc, #68]	@ (8011de8 <RxWindowSetup+0x5c>)
 8011da4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011da8:	4a10      	ldr	r2, [pc, #64]	@ (8011dec <RxWindowSetup+0x60>)
 8011daa:	6839      	ldr	r1, [r7, #0]
 8011dac:	4618      	mov	r0, r3
 8011dae:	f004 fa1c 	bl	80161ea <RegionRxConfig>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d010      	beq.n	8011dda <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011db8:	4b0d      	ldr	r3, [pc, #52]	@ (8011df0 <RxWindowSetup+0x64>)
 8011dba:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8011dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8011df0 <RxWindowSetup+0x64>)
 8011dc0:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8011dc4:	4b07      	ldr	r3, [pc, #28]	@ (8011de4 <RxWindowSetup+0x58>)
 8011dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dc8:	4a07      	ldr	r2, [pc, #28]	@ (8011de8 <RxWindowSetup+0x5c>)
 8011dca:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8011dcc:	4610      	mov	r0, r2
 8011dce:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	7cda      	ldrb	r2, [r3, #19]
 8011dd4:	4b06      	ldr	r3, [pc, #24]	@ (8011df0 <RxWindowSetup+0x64>)
 8011dd6:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8011dda:	bf00      	nop
 8011ddc:	3708      	adds	r7, #8
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
 8011de2:	bf00      	nop
 8011de4:	0801e044 	.word	0x0801e044
 8011de8:	20000dc4 	.word	0x20000dc4
 8011dec:	20000cb4 	.word	0x20000cb4
 8011df0:	20000890 	.word	0x20000890

08011df4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011df4:	b590      	push	{r4, r7, lr}
 8011df6:	b083      	sub	sp, #12
 8011df8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8011e74 <OpenContinuousRxCWindow+0x80>)
 8011dfc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011e00:	4b1c      	ldr	r3, [pc, #112]	@ (8011e74 <OpenContinuousRxCWindow+0x80>)
 8011e02:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011e06:	b259      	sxtb	r1, r3
 8011e08:	4b1a      	ldr	r3, [pc, #104]	@ (8011e74 <OpenContinuousRxCWindow+0x80>)
 8011e0a:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011e0e:	4b19      	ldr	r3, [pc, #100]	@ (8011e74 <OpenContinuousRxCWindow+0x80>)
 8011e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011e12:	4c19      	ldr	r4, [pc, #100]	@ (8011e78 <OpenContinuousRxCWindow+0x84>)
 8011e14:	9400      	str	r4, [sp, #0]
 8011e16:	f004 f9ce 	bl	80161b6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011e1a:	4b18      	ldr	r3, [pc, #96]	@ (8011e7c <OpenContinuousRxCWindow+0x88>)
 8011e1c:	2202      	movs	r2, #2
 8011e1e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011e22:	4b14      	ldr	r3, [pc, #80]	@ (8011e74 <OpenContinuousRxCWindow+0x80>)
 8011e24:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8011e28:	4b14      	ldr	r3, [pc, #80]	@ (8011e7c <OpenContinuousRxCWindow+0x88>)
 8011e2a:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011e2e:	4b13      	ldr	r3, [pc, #76]	@ (8011e7c <OpenContinuousRxCWindow+0x88>)
 8011e30:	2201      	movs	r2, #1
 8011e32:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011e36:	4b0f      	ldr	r3, [pc, #60]	@ (8011e74 <OpenContinuousRxCWindow+0x80>)
 8011e38:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011e3c:	4a10      	ldr	r2, [pc, #64]	@ (8011e80 <OpenContinuousRxCWindow+0x8c>)
 8011e3e:	490e      	ldr	r1, [pc, #56]	@ (8011e78 <OpenContinuousRxCWindow+0x84>)
 8011e40:	4618      	mov	r0, r3
 8011e42:	f004 f9d2 	bl	80161ea <RegionRxConfig>
 8011e46:	4603      	mov	r3, r0
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d00f      	beq.n	8011e6c <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8011e7c <OpenContinuousRxCWindow+0x88>)
 8011e4e:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8011e52:	4b0a      	ldr	r3, [pc, #40]	@ (8011e7c <OpenContinuousRxCWindow+0x88>)
 8011e54:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8011e58:	4b0a      	ldr	r3, [pc, #40]	@ (8011e84 <OpenContinuousRxCWindow+0x90>)
 8011e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011e60:	4b06      	ldr	r3, [pc, #24]	@ (8011e7c <OpenContinuousRxCWindow+0x88>)
 8011e62:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8011e66:	4b05      	ldr	r3, [pc, #20]	@ (8011e7c <OpenContinuousRxCWindow+0x88>)
 8011e68:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8011e6c:	bf00      	nop
 8011e6e:	3704      	adds	r7, #4
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd90      	pop	{r4, r7, pc}
 8011e74:	20000dc4 	.word	0x20000dc4
 8011e78:	20000c78 	.word	0x20000c78
 8011e7c:	20000890 	.word	0x20000890
 8011e80:	20000cb4 	.word	0x20000cb4
 8011e84:	0801e044 	.word	0x0801e044

08011e88 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b088      	sub	sp, #32
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	603b      	str	r3, [r7, #0]
 8011e94:	4613      	mov	r3, r2
 8011e96:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8011e98:	4b81      	ldr	r3, [pc, #516]	@ (80120a0 <PrepareFrame+0x218>)
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8011e9e:	4b80      	ldr	r3, [pc, #512]	@ (80120a0 <PrepareFrame+0x218>)
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d101      	bne.n	8011ebc <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011ebc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011ebe:	461a      	mov	r2, r3
 8011ec0:	6839      	ldr	r1, [r7, #0]
 8011ec2:	4878      	ldr	r0, [pc, #480]	@ (80120a4 <PrepareFrame+0x21c>)
 8011ec4:	f006 fb2b 	bl	801851e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011ec8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011eca:	b2da      	uxtb	r2, r3
 8011ecc:	4b74      	ldr	r3, [pc, #464]	@ (80120a0 <PrepareFrame+0x218>)
 8011ece:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	781a      	ldrb	r2, [r3, #0]
 8011ed6:	4b72      	ldr	r3, [pc, #456]	@ (80120a0 <PrepareFrame+0x218>)
 8011ed8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011ee2:	b2db      	uxtb	r3, r3
 8011ee4:	2b07      	cmp	r3, #7
 8011ee6:	f000 80b9 	beq.w	801205c <PrepareFrame+0x1d4>
 8011eea:	2b07      	cmp	r3, #7
 8011eec:	f300 80ce 	bgt.w	801208c <PrepareFrame+0x204>
 8011ef0:	2b02      	cmp	r3, #2
 8011ef2:	d006      	beq.n	8011f02 <PrepareFrame+0x7a>
 8011ef4:	2b04      	cmp	r3, #4
 8011ef6:	f040 80c9 	bne.w	801208c <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011efa:	4b69      	ldr	r3, [pc, #420]	@ (80120a0 <PrepareFrame+0x218>)
 8011efc:	2201      	movs	r2, #1
 8011efe:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011f02:	4b67      	ldr	r3, [pc, #412]	@ (80120a0 <PrepareFrame+0x218>)
 8011f04:	2204      	movs	r2, #4
 8011f06:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011f0a:	4b65      	ldr	r3, [pc, #404]	@ (80120a0 <PrepareFrame+0x218>)
 8011f0c:	4a66      	ldr	r2, [pc, #408]	@ (80120a8 <PrepareFrame+0x220>)
 8011f0e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011f12:	4b63      	ldr	r3, [pc, #396]	@ (80120a0 <PrepareFrame+0x218>)
 8011f14:	22ff      	movs	r2, #255	@ 0xff
 8011f16:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	781a      	ldrb	r2, [r3, #0]
 8011f1e:	4b60      	ldr	r3, [pc, #384]	@ (80120a0 <PrepareFrame+0x218>)
 8011f20:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011f24:	4a5e      	ldr	r2, [pc, #376]	@ (80120a0 <PrepareFrame+0x218>)
 8011f26:	79fb      	ldrb	r3, [r7, #7]
 8011f28:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011f2c:	4b5f      	ldr	r3, [pc, #380]	@ (80120ac <PrepareFrame+0x224>)
 8011f2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8011f32:	4a5b      	ldr	r2, [pc, #364]	@ (80120a0 <PrepareFrame+0x218>)
 8011f34:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	781a      	ldrb	r2, [r3, #0]
 8011f3c:	4b58      	ldr	r3, [pc, #352]	@ (80120a0 <PrepareFrame+0x218>)
 8011f3e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011f42:	4b57      	ldr	r3, [pc, #348]	@ (80120a0 <PrepareFrame+0x218>)
 8011f44:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8011f48:	4b55      	ldr	r3, [pc, #340]	@ (80120a0 <PrepareFrame+0x218>)
 8011f4a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8011f4e:	4b54      	ldr	r3, [pc, #336]	@ (80120a0 <PrepareFrame+0x218>)
 8011f50:	4a54      	ldr	r2, [pc, #336]	@ (80120a4 <PrepareFrame+0x21c>)
 8011f52:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011f56:	f107 0318 	add.w	r3, r7, #24
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f003 fa3a 	bl	80153d4 <LoRaMacCryptoGetFCntUp>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d001      	beq.n	8011f6a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011f66:	2312      	movs	r3, #18
 8011f68:	e096      	b.n	8012098 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8011f6a:	69bb      	ldr	r3, [r7, #24]
 8011f6c:	b29a      	uxth	r2, r3
 8011f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80120a0 <PrepareFrame+0x218>)
 8011f70:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8011f74:	4b4a      	ldr	r3, [pc, #296]	@ (80120a0 <PrepareFrame+0x218>)
 8011f76:	2200      	movs	r2, #0
 8011f78:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8011f7c:	4b48      	ldr	r3, [pc, #288]	@ (80120a0 <PrepareFrame+0x218>)
 8011f7e:	2200      	movs	r2, #0
 8011f80:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011f84:	69bb      	ldr	r3, [r7, #24]
 8011f86:	4a46      	ldr	r2, [pc, #280]	@ (80120a0 <PrepareFrame+0x218>)
 8011f88:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011f8c:	f107 0314 	add.w	r3, r7, #20
 8011f90:	4618      	mov	r0, r3
 8011f92:	f002 fbef 	bl	8014774 <LoRaMacCommandsGetSizeSerializedCmds>
 8011f96:	4603      	mov	r3, r0
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d001      	beq.n	8011fa0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011f9c:	2313      	movs	r3, #19
 8011f9e:	e07b      	b.n	8012098 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d074      	beq.n	8012090 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8011fa6:	4b41      	ldr	r3, [pc, #260]	@ (80120ac <PrepareFrame+0x224>)
 8011fa8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011fac:	4618      	mov	r0, r3
 8011fae:	f7fe fd13 	bl	80109d8 <GetMaxAppPayloadWithoutFOptsLength>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80120a0 <PrepareFrame+0x218>)
 8011fb8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d01d      	beq.n	8011ffc <PrepareFrame+0x174>
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	2b0f      	cmp	r3, #15
 8011fc4:	d81a      	bhi.n	8011ffc <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011fc6:	f107 0314 	add.w	r3, r7, #20
 8011fca:	4a39      	ldr	r2, [pc, #228]	@ (80120b0 <PrepareFrame+0x228>)
 8011fcc:	4619      	mov	r1, r3
 8011fce:	200f      	movs	r0, #15
 8011fd0:	f002 fbe6 	bl	80147a0 <LoRaMacCommandsSerializeCmds>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d001      	beq.n	8011fde <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011fda:	2313      	movs	r3, #19
 8011fdc:	e05c      	b.n	8012098 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	f003 030f 	and.w	r3, r3, #15
 8011fe4:	b2d9      	uxtb	r1, r3
 8011fe6:	68ba      	ldr	r2, [r7, #8]
 8011fe8:	7813      	ldrb	r3, [r2, #0]
 8011fea:	f361 0303 	bfi	r3, r1, #0, #4
 8011fee:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	781a      	ldrb	r2, [r3, #0]
 8011ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80120a0 <PrepareFrame+0x218>)
 8011ff6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011ffa:	e049      	b.n	8012090 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011ffc:	4b28      	ldr	r3, [pc, #160]	@ (80120a0 <PrepareFrame+0x218>)
 8011ffe:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012002:	2b00      	cmp	r3, #0
 8012004:	d010      	beq.n	8012028 <PrepareFrame+0x1a0>
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	2b0f      	cmp	r3, #15
 801200a:	d90d      	bls.n	8012028 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801200c:	7ffb      	ldrb	r3, [r7, #31]
 801200e:	f107 0114 	add.w	r1, r7, #20
 8012012:	4a28      	ldr	r2, [pc, #160]	@ (80120b4 <PrepareFrame+0x22c>)
 8012014:	4618      	mov	r0, r3
 8012016:	f002 fbc3 	bl	80147a0 <LoRaMacCommandsSerializeCmds>
 801201a:	4603      	mov	r3, r0
 801201c:	2b00      	cmp	r3, #0
 801201e:	d001      	beq.n	8012024 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012020:	2313      	movs	r3, #19
 8012022:	e039      	b.n	8012098 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012024:	230a      	movs	r3, #10
 8012026:	e037      	b.n	8012098 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012028:	7ffb      	ldrb	r3, [r7, #31]
 801202a:	f107 0114 	add.w	r1, r7, #20
 801202e:	4a21      	ldr	r2, [pc, #132]	@ (80120b4 <PrepareFrame+0x22c>)
 8012030:	4618      	mov	r0, r3
 8012032:	f002 fbb5 	bl	80147a0 <LoRaMacCommandsSerializeCmds>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d001      	beq.n	8012040 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801203c:	2313      	movs	r3, #19
 801203e:	e02b      	b.n	8012098 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8012040:	4b17      	ldr	r3, [pc, #92]	@ (80120a0 <PrepareFrame+0x218>)
 8012042:	2200      	movs	r2, #0
 8012044:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8012048:	4b15      	ldr	r3, [pc, #84]	@ (80120a0 <PrepareFrame+0x218>)
 801204a:	4a1a      	ldr	r2, [pc, #104]	@ (80120b4 <PrepareFrame+0x22c>)
 801204c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	b2da      	uxtb	r2, r3
 8012054:	4b12      	ldr	r3, [pc, #72]	@ (80120a0 <PrepareFrame+0x218>)
 8012056:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 801205a:	e019      	b.n	8012090 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d018      	beq.n	8012094 <PrepareFrame+0x20c>
 8012062:	4b0f      	ldr	r3, [pc, #60]	@ (80120a0 <PrepareFrame+0x218>)
 8012064:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012068:	2b00      	cmp	r3, #0
 801206a:	d013      	beq.n	8012094 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801206c:	4812      	ldr	r0, [pc, #72]	@ (80120b8 <PrepareFrame+0x230>)
 801206e:	4b0c      	ldr	r3, [pc, #48]	@ (80120a0 <PrepareFrame+0x218>)
 8012070:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012074:	461a      	mov	r2, r3
 8012076:	6839      	ldr	r1, [r7, #0]
 8012078:	f006 fa51 	bl	801851e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801207c:	4b08      	ldr	r3, [pc, #32]	@ (80120a0 <PrepareFrame+0x218>)
 801207e:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012082:	3301      	adds	r3, #1
 8012084:	b29a      	uxth	r2, r3
 8012086:	4b06      	ldr	r3, [pc, #24]	@ (80120a0 <PrepareFrame+0x218>)
 8012088:	801a      	strh	r2, [r3, #0]
            }
            break;
 801208a:	e003      	b.n	8012094 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801208c:	2302      	movs	r3, #2
 801208e:	e003      	b.n	8012098 <PrepareFrame+0x210>
            break;
 8012090:	bf00      	nop
 8012092:	e000      	b.n	8012096 <PrepareFrame+0x20e>
            break;
 8012094:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8012096:	2300      	movs	r3, #0
}
 8012098:	4618      	mov	r0, r3
 801209a:	3720      	adds	r7, #32
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}
 80120a0:	20000890 	.word	0x20000890
 80120a4:	200009c8 	.word	0x200009c8
 80120a8:	20000892 	.word	0x20000892
 80120ac:	20000dc4 	.word	0x20000dc4
 80120b0:	200009a8 	.word	0x200009a8
 80120b4:	20000d44 	.word	0x20000d44
 80120b8:	20000893 	.word	0x20000893

080120bc <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b08a      	sub	sp, #40	@ 0x28
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	4603      	mov	r3, r0
 80120c4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120c6:	2303      	movs	r3, #3
 80120c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80120cc:	2300      	movs	r3, #0
 80120ce:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80120d0:	79fb      	ldrb	r3, [r7, #7]
 80120d2:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80120d4:	4b4b      	ldr	r3, [pc, #300]	@ (8012204 <SendFrameOnChannel+0x148>)
 80120d6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80120da:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80120dc:	4b49      	ldr	r3, [pc, #292]	@ (8012204 <SendFrameOnChannel+0x148>)
 80120de:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80120e2:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80120e4:	4b47      	ldr	r3, [pc, #284]	@ (8012204 <SendFrameOnChannel+0x148>)
 80120e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80120ea:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80120ec:	4b45      	ldr	r3, [pc, #276]	@ (8012204 <SendFrameOnChannel+0x148>)
 80120ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80120f2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80120f4:	4b44      	ldr	r3, [pc, #272]	@ (8012208 <SendFrameOnChannel+0x14c>)
 80120f6:	881b      	ldrh	r3, [r3, #0]
 80120f8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80120fa:	4b42      	ldr	r3, [pc, #264]	@ (8012204 <SendFrameOnChannel+0x148>)
 80120fc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8012100:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8012102:	4b40      	ldr	r3, [pc, #256]	@ (8012204 <SendFrameOnChannel+0x148>)
 8012104:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8012108:	f107 020f 	add.w	r2, r7, #15
 801210c:	f107 0110 	add.w	r1, r7, #16
 8012110:	4b3e      	ldr	r3, [pc, #248]	@ (801220c <SendFrameOnChannel+0x150>)
 8012112:	f004 f87f 	bl	8016214 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012116:	4b3c      	ldr	r3, [pc, #240]	@ (8012208 <SendFrameOnChannel+0x14c>)
 8012118:	2201      	movs	r2, #1
 801211a:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801211e:	4b39      	ldr	r3, [pc, #228]	@ (8012204 <SendFrameOnChannel+0x148>)
 8012120:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012124:	b2da      	uxtb	r2, r3
 8012126:	4b38      	ldr	r3, [pc, #224]	@ (8012208 <SendFrameOnChannel+0x14c>)
 8012128:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 801212c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012130:	4b35      	ldr	r3, [pc, #212]	@ (8012208 <SendFrameOnChannel+0x14c>)
 8012132:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8012136:	79fb      	ldrb	r3, [r7, #7]
 8012138:	4a33      	ldr	r2, [pc, #204]	@ (8012208 <SendFrameOnChannel+0x14c>)
 801213a:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801213e:	4b32      	ldr	r3, [pc, #200]	@ (8012208 <SendFrameOnChannel+0x14c>)
 8012140:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012144:	4a30      	ldr	r2, [pc, #192]	@ (8012208 <SendFrameOnChannel+0x14c>)
 8012146:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801214a:	4b2f      	ldr	r3, [pc, #188]	@ (8012208 <SendFrameOnChannel+0x14c>)
 801214c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012150:	4a2d      	ldr	r2, [pc, #180]	@ (8012208 <SendFrameOnChannel+0x14c>)
 8012152:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012156:	f002 f85a 	bl	801420e <LoRaMacClassBIsBeaconModeActive>
 801215a:	4603      	mov	r3, r0
 801215c:	2b00      	cmp	r3, #0
 801215e:	d00b      	beq.n	8012178 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8012160:	4b29      	ldr	r3, [pc, #164]	@ (8012208 <SendFrameOnChannel+0x14c>)
 8012162:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012166:	4618      	mov	r0, r3
 8012168:	f002 f8bc 	bl	80142e4 <LoRaMacClassBIsUplinkCollision>
 801216c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801216e:	6a3b      	ldr	r3, [r7, #32]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d001      	beq.n	8012178 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012174:	2310      	movs	r3, #16
 8012176:	e040      	b.n	80121fa <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012178:	4b22      	ldr	r3, [pc, #136]	@ (8012204 <SendFrameOnChannel+0x148>)
 801217a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801217e:	2b01      	cmp	r3, #1
 8012180:	d101      	bne.n	8012186 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8012182:	f002 f8b9 	bl	80142f8 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8012186:	f002 f853 	bl	8014230 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801218a:	4b1e      	ldr	r3, [pc, #120]	@ (8012204 <SendFrameOnChannel+0x148>)
 801218c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012190:	b2db      	uxtb	r3, r3
 8012192:	4a1d      	ldr	r2, [pc, #116]	@ (8012208 <SendFrameOnChannel+0x14c>)
 8012194:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 8012198:	4611      	mov	r1, r2
 801219a:	4618      	mov	r0, r3
 801219c:	f7ff fc2c 	bl	80119f8 <SecureFrame>
 80121a0:	4603      	mov	r3, r0
 80121a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 80121a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d002      	beq.n	80121b4 <SendFrameOnChannel+0xf8>
    {
        return status;
 80121ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80121b2:	e022      	b.n	80121fa <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80121b4:	4b14      	ldr	r3, [pc, #80]	@ (8012208 <SendFrameOnChannel+0x14c>)
 80121b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80121ba:	f043 0302 	orr.w	r3, r3, #2
 80121be:	4a12      	ldr	r2, [pc, #72]	@ (8012208 <SendFrameOnChannel+0x14c>)
 80121c0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 80121c4:	4b10      	ldr	r3, [pc, #64]	@ (8012208 <SendFrameOnChannel+0x14c>)
 80121c6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80121ca:	3301      	adds	r3, #1
 80121cc:	b2da      	uxtb	r2, r3
 80121ce:	4b0e      	ldr	r3, [pc, #56]	@ (8012208 <SendFrameOnChannel+0x14c>)
 80121d0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80121d4:	4b0c      	ldr	r3, [pc, #48]	@ (8012208 <SendFrameOnChannel+0x14c>)
 80121d6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80121da:	4b0b      	ldr	r3, [pc, #44]	@ (8012208 <SendFrameOnChannel+0x14c>)
 80121dc:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 80121e0:	4b09      	ldr	r3, [pc, #36]	@ (8012208 <SendFrameOnChannel+0x14c>)
 80121e2:	2200      	movs	r2, #0
 80121e4:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80121e8:	4b09      	ldr	r3, [pc, #36]	@ (8012210 <SendFrameOnChannel+0x154>)
 80121ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121ec:	4a06      	ldr	r2, [pc, #24]	@ (8012208 <SendFrameOnChannel+0x14c>)
 80121ee:	8812      	ldrh	r2, [r2, #0]
 80121f0:	b2d2      	uxtb	r2, r2
 80121f2:	4611      	mov	r1, r2
 80121f4:	4807      	ldr	r0, [pc, #28]	@ (8012214 <SendFrameOnChannel+0x158>)
 80121f6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80121f8:	2300      	movs	r3, #0
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3728      	adds	r7, #40	@ 0x28
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	20000dc4 	.word	0x20000dc4
 8012208:	20000890 	.word	0x20000890
 801220c:	20000cac 	.word	0x20000cac
 8012210:	0801e044 	.word	0x0801e044
 8012214:	20000892 	.word	0x20000892

08012218 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
 801221e:	4603      	mov	r3, r0
 8012220:	6039      	str	r1, [r7, #0]
 8012222:	80fb      	strh	r3, [r7, #6]
 8012224:	4613      	mov	r3, r2
 8012226:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012228:	4b09      	ldr	r3, [pc, #36]	@ (8012250 <SetTxContinuousWave+0x38>)
 801222a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801222c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012230:	88fa      	ldrh	r2, [r7, #6]
 8012232:	6838      	ldr	r0, [r7, #0]
 8012234:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012236:	4b07      	ldr	r3, [pc, #28]	@ (8012254 <SetTxContinuousWave+0x3c>)
 8012238:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801223c:	f043 0302 	orr.w	r3, r3, #2
 8012240:	4a04      	ldr	r2, [pc, #16]	@ (8012254 <SetTxContinuousWave+0x3c>)
 8012242:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8012246:	2300      	movs	r3, #0
}
 8012248:	4618      	mov	r0, r3
 801224a:	3708      	adds	r7, #8
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}
 8012250:	0801e044 	.word	0x0801e044
 8012254:	20000890 	.word	0x20000890

08012258 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 801225e:	2300      	movs	r3, #0
 8012260:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8012262:	4b49      	ldr	r3, [pc, #292]	@ (8012388 <RestoreNvmData+0x130>)
 8012264:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012268:	2b01      	cmp	r3, #1
 801226a:	d001      	beq.n	8012270 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 801226c:	2301      	movs	r3, #1
 801226e:	e087      	b.n	8012380 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8012270:	2124      	movs	r1, #36	@ 0x24
 8012272:	4846      	ldr	r0, [pc, #280]	@ (801238c <RestoreNvmData+0x134>)
 8012274:	f006 f9a8 	bl	80185c8 <Crc32>
 8012278:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801227a:	4b44      	ldr	r3, [pc, #272]	@ (801238c <RestoreNvmData+0x134>)
 801227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	429a      	cmp	r2, r3
 8012282:	d001      	beq.n	8012288 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012284:	2317      	movs	r3, #23
 8012286:	e07b      	b.n	8012380 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8012288:	211c      	movs	r1, #28
 801228a:	4841      	ldr	r0, [pc, #260]	@ (8012390 <RestoreNvmData+0x138>)
 801228c:	f006 f99c 	bl	80185c8 <Crc32>
 8012290:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8012292:	4b3e      	ldr	r3, [pc, #248]	@ (801238c <RestoreNvmData+0x134>)
 8012294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012296:	687a      	ldr	r2, [r7, #4]
 8012298:	429a      	cmp	r2, r3
 801229a:	d001      	beq.n	80122a0 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801229c:	2317      	movs	r3, #23
 801229e:	e06f      	b.n	8012380 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80122a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80122a4:	483b      	ldr	r0, [pc, #236]	@ (8012394 <RestoreNvmData+0x13c>)
 80122a6:	f006 f98f 	bl	80185c8 <Crc32>
 80122aa:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80122ac:	4b37      	ldr	r3, [pc, #220]	@ (801238c <RestoreNvmData+0x134>)
 80122ae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80122b2:	687a      	ldr	r2, [r7, #4]
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d001      	beq.n	80122bc <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80122b8:	2317      	movs	r3, #23
 80122ba:	e061      	b.n	8012380 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80122bc:	21d4      	movs	r1, #212	@ 0xd4
 80122be:	4836      	ldr	r0, [pc, #216]	@ (8012398 <RestoreNvmData+0x140>)
 80122c0:	f006 f982 	bl	80185c8 <Crc32>
 80122c4:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80122c6:	4b31      	ldr	r3, [pc, #196]	@ (801238c <RestoreNvmData+0x134>)
 80122c8:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80122cc:	687a      	ldr	r2, [r7, #4]
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d001      	beq.n	80122d6 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80122d2:	2317      	movs	r3, #23
 80122d4:	e054      	b.n	8012380 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80122d6:	2100      	movs	r1, #0
 80122d8:	4830      	ldr	r0, [pc, #192]	@ (801239c <RestoreNvmData+0x144>)
 80122da:	f006 f975 	bl	80185c8 <Crc32>
 80122de:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80122e0:	4b2a      	ldr	r3, [pc, #168]	@ (801238c <RestoreNvmData+0x134>)
 80122e2:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d001      	beq.n	80122f0 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80122ec:	2317      	movs	r3, #23
 80122ee:	e047      	b.n	8012380 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 80122f0:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80122f4:	482a      	ldr	r0, [pc, #168]	@ (80123a0 <RestoreNvmData+0x148>)
 80122f6:	f006 f967 	bl	80185c8 <Crc32>
 80122fa:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 80122fc:	4b23      	ldr	r3, [pc, #140]	@ (801238c <RestoreNvmData+0x134>)
 80122fe:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 8012302:	687a      	ldr	r2, [r7, #4]
 8012304:	429a      	cmp	r2, r3
 8012306:	d001      	beq.n	801230c <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012308:	2317      	movs	r3, #23
 801230a:	e039      	b.n	8012380 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 801230c:	2114      	movs	r1, #20
 801230e:	4825      	ldr	r0, [pc, #148]	@ (80123a4 <RestoreNvmData+0x14c>)
 8012310:	f006 f95a 	bl	80185c8 <Crc32>
 8012314:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8012316:	4b1d      	ldr	r3, [pc, #116]	@ (801238c <RestoreNvmData+0x134>)
 8012318:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 801231c:	687a      	ldr	r2, [r7, #4]
 801231e:	429a      	cmp	r2, r3
 8012320:	d001      	beq.n	8012326 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012322:	2317      	movs	r3, #23
 8012324:	e02c      	b.n	8012380 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8012326:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 801232a:	4918      	ldr	r1, [pc, #96]	@ (801238c <RestoreNvmData+0x134>)
 801232c:	481e      	ldr	r0, [pc, #120]	@ (80123a8 <RestoreNvmData+0x150>)
 801232e:	f006 f8f6 	bl	801851e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8012332:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012336:	2100      	movs	r1, #0
 8012338:	4814      	ldr	r0, [pc, #80]	@ (801238c <RestoreNvmData+0x134>)
 801233a:	f006 f92b 	bl	8018594 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801233e:	4b12      	ldr	r3, [pc, #72]	@ (8012388 <RestoreNvmData+0x130>)
 8012340:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8012344:	4b10      	ldr	r3, [pc, #64]	@ (8012388 <RestoreNvmData+0x130>)
 8012346:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801234a:	4b17      	ldr	r3, [pc, #92]	@ (80123a8 <RestoreNvmData+0x150>)
 801234c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801234e:	4a0e      	ldr	r2, [pc, #56]	@ (8012388 <RestoreNvmData+0x130>)
 8012350:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012354:	4b14      	ldr	r3, [pc, #80]	@ (80123a8 <RestoreNvmData+0x150>)
 8012356:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 801235a:	4b0b      	ldr	r3, [pc, #44]	@ (8012388 <RestoreNvmData+0x130>)
 801235c:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012360:	4b09      	ldr	r3, [pc, #36]	@ (8012388 <RestoreNvmData+0x130>)
 8012362:	2201      	movs	r2, #1
 8012364:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012368:	4b07      	ldr	r3, [pc, #28]	@ (8012388 <RestoreNvmData+0x130>)
 801236a:	2202      	movs	r2, #2
 801236c:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012370:	4b0e      	ldr	r3, [pc, #56]	@ (80123ac <RestoreNvmData+0x154>)
 8012372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012374:	4a0c      	ldr	r2, [pc, #48]	@ (80123a8 <RestoreNvmData+0x150>)
 8012376:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 801237a:	4610      	mov	r0, r2
 801237c:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 801237e:	2300      	movs	r3, #0
}
 8012380:	4618      	mov	r0, r3
 8012382:	3708      	adds	r7, #8
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}
 8012388:	20000890 	.word	0x20000890
 801238c:	20001380 	.word	0x20001380
 8012390:	200013a8 	.word	0x200013a8
 8012394:	200013c8 	.word	0x200013c8
 8012398:	200014cc 	.word	0x200014cc
 801239c:	200015a4 	.word	0x200015a4
 80123a0:	200015a8 	.word	0x200015a8
 80123a4:	20001924 	.word	0x20001924
 80123a8:	20000dc4 	.word	0x20000dc4
 80123ac:	0801e044 	.word	0x0801e044

080123b0 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80123b0:	b480      	push	{r7}
 80123b2:	b083      	sub	sp, #12
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d002      	beq.n	80123c6 <DetermineFrameType+0x16>
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d101      	bne.n	80123ca <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80123c6:	2303      	movs	r3, #3
 80123c8:	e03b      	b.n	8012442 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	7b1b      	ldrb	r3, [r3, #12]
 80123ce:	f003 030f 	and.w	r3, r3, #15
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d008      	beq.n	80123ea <DetermineFrameType+0x3a>
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d003      	beq.n	80123ea <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	2200      	movs	r2, #0
 80123e6:	701a      	strb	r2, [r3, #0]
 80123e8:	e02a      	b.n	8012440 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d103      	bne.n	80123fc <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	2201      	movs	r2, #1
 80123f8:	701a      	strb	r2, [r3, #0]
 80123fa:	e021      	b.n	8012440 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	7b1b      	ldrb	r3, [r3, #12]
 8012400:	f003 030f 	and.w	r3, r3, #15
 8012404:	b2db      	uxtb	r3, r3
 8012406:	2b00      	cmp	r3, #0
 8012408:	d108      	bne.n	801241c <DetermineFrameType+0x6c>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d103      	bne.n	801241c <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	2202      	movs	r2, #2
 8012418:	701a      	strb	r2, [r3, #0]
 801241a:	e011      	b.n	8012440 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	7b1b      	ldrb	r3, [r3, #12]
 8012420:	f003 030f 	and.w	r3, r3, #15
 8012424:	b2db      	uxtb	r3, r3
 8012426:	2b00      	cmp	r3, #0
 8012428:	d108      	bne.n	801243c <DetermineFrameType+0x8c>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d003      	beq.n	801243c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	2203      	movs	r2, #3
 8012438:	701a      	strb	r2, [r3, #0]
 801243a:	e001      	b.n	8012440 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 801243c:	2318      	movs	r3, #24
 801243e:	e000      	b.n	8012442 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012440:	2300      	movs	r3, #0
}
 8012442:	4618      	mov	r0, r3
 8012444:	370c      	adds	r7, #12
 8012446:	46bd      	mov	sp, r7
 8012448:	bc80      	pop	{r7}
 801244a:	4770      	bx	lr

0801244c <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 801244c:	b480      	push	{r7}
 801244e:	b083      	sub	sp, #12
 8012450:	af00      	add	r7, sp, #0
 8012452:	4603      	mov	r3, r0
 8012454:	460a      	mov	r2, r1
 8012456:	71fb      	strb	r3, [r7, #7]
 8012458:	4613      	mov	r3, r2
 801245a:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 801245c:	79fa      	ldrb	r2, [r7, #7]
 801245e:	79bb      	ldrb	r3, [r7, #6]
 8012460:	429a      	cmp	r2, r3
 8012462:	d301      	bcc.n	8012468 <CheckRetrans+0x1c>
    {
        return true;
 8012464:	2301      	movs	r3, #1
 8012466:	e000      	b.n	801246a <CheckRetrans+0x1e>
    }
    return false;
 8012468:	2300      	movs	r3, #0
}
 801246a:	4618      	mov	r0, r3
 801246c:	370c      	adds	r7, #12
 801246e:	46bd      	mov	sp, r7
 8012470:	bc80      	pop	{r7}
 8012472:	4770      	bx	lr

08012474 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012474:	b580      	push	{r7, lr}
 8012476:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012478:	4b12      	ldr	r3, [pc, #72]	@ (80124c4 <CheckRetransUnconfirmedUplink+0x50>)
 801247a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 801247e:	4a12      	ldr	r2, [pc, #72]	@ (80124c8 <CheckRetransUnconfirmedUplink+0x54>)
 8012480:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8012484:	4611      	mov	r1, r2
 8012486:	4618      	mov	r0, r3
 8012488:	f7ff ffe0 	bl	801244c <CheckRetrans>
 801248c:	4603      	mov	r3, r0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d001      	beq.n	8012496 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8012492:	2301      	movs	r3, #1
 8012494:	e014      	b.n	80124c0 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012496:	4b0b      	ldr	r3, [pc, #44]	@ (80124c4 <CheckRetransUnconfirmedUplink+0x50>)
 8012498:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801249c:	f003 0302 	and.w	r3, r3, #2
 80124a0:	b2db      	uxtb	r3, r3
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d00b      	beq.n	80124be <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80124a6:	4b07      	ldr	r3, [pc, #28]	@ (80124c4 <CheckRetransUnconfirmedUplink+0x50>)
 80124a8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d004      	beq.n	80124ba <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80124b0:	4b04      	ldr	r3, [pc, #16]	@ (80124c4 <CheckRetransUnconfirmedUplink+0x50>)
 80124b2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80124b6:	2b01      	cmp	r3, #1
 80124b8:	d101      	bne.n	80124be <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 80124ba:	2301      	movs	r3, #1
 80124bc:	e000      	b.n	80124c0 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 80124be:	2300      	movs	r3, #0
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	20000890 	.word	0x20000890
 80124c8:	20000dc4 	.word	0x20000dc4

080124cc <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80124d0:	4b10      	ldr	r3, [pc, #64]	@ (8012514 <CheckRetransConfirmedUplink+0x48>)
 80124d2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80124d6:	4a10      	ldr	r2, [pc, #64]	@ (8012518 <CheckRetransConfirmedUplink+0x4c>)
 80124d8:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 80124dc:	4611      	mov	r1, r2
 80124de:	4618      	mov	r0, r3
 80124e0:	f7ff ffb4 	bl	801244c <CheckRetrans>
 80124e4:	4603      	mov	r3, r0
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d001      	beq.n	80124ee <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80124ea:	2301      	movs	r3, #1
 80124ec:	e00f      	b.n	801250e <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80124ee:	4b09      	ldr	r3, [pc, #36]	@ (8012514 <CheckRetransConfirmedUplink+0x48>)
 80124f0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80124f4:	f003 0302 	and.w	r3, r3, #2
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d006      	beq.n	801250c <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80124fe:	4b05      	ldr	r3, [pc, #20]	@ (8012514 <CheckRetransConfirmedUplink+0x48>)
 8012500:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8012504:	2b00      	cmp	r3, #0
 8012506:	d001      	beq.n	801250c <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8012508:	2301      	movs	r3, #1
 801250a:	e000      	b.n	801250e <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 801250c:	2300      	movs	r3, #0
}
 801250e:	4618      	mov	r0, r3
 8012510:	bd80      	pop	{r7, pc}
 8012512:	bf00      	nop
 8012514:	20000890 	.word	0x20000890
 8012518:	20000dc4 	.word	0x20000dc4

0801251c <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 801251c:	b480      	push	{r7}
 801251e:	b083      	sub	sp, #12
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801252a:	d002      	beq.n	8012532 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	3301      	adds	r3, #1
 8012530:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8012532:	687b      	ldr	r3, [r7, #4]
}
 8012534:	4618      	mov	r0, r3
 8012536:	370c      	adds	r7, #12
 8012538:	46bd      	mov	sp, r7
 801253a:	bc80      	pop	{r7}
 801253c:	4770      	bx	lr
	...

08012540 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8012540:	b580      	push	{r7, lr}
 8012542:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012544:	4b1a      	ldr	r3, [pc, #104]	@ (80125b0 <StopRetransmission+0x70>)
 8012546:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801254a:	f003 0302 	and.w	r3, r3, #2
 801254e:	b2db      	uxtb	r3, r3
 8012550:	2b00      	cmp	r3, #0
 8012552:	d009      	beq.n	8012568 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012554:	4b16      	ldr	r3, [pc, #88]	@ (80125b0 <StopRetransmission+0x70>)
 8012556:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801255a:	2b00      	cmp	r3, #0
 801255c:	d011      	beq.n	8012582 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801255e:	4b14      	ldr	r3, [pc, #80]	@ (80125b0 <StopRetransmission+0x70>)
 8012560:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012564:	2b01      	cmp	r3, #1
 8012566:	d00c      	beq.n	8012582 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012568:	4b12      	ldr	r3, [pc, #72]	@ (80125b4 <StopRetransmission+0x74>)
 801256a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801256e:	2b00      	cmp	r3, #0
 8012570:	d007      	beq.n	8012582 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8012572:	4b10      	ldr	r3, [pc, #64]	@ (80125b4 <StopRetransmission+0x74>)
 8012574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012576:	4618      	mov	r0, r3
 8012578:	f7ff ffd0 	bl	801251c <IncreaseAdrAckCounter>
 801257c:	4603      	mov	r3, r0
 801257e:	4a0d      	ldr	r2, [pc, #52]	@ (80125b4 <StopRetransmission+0x74>)
 8012580:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012582:	4b0b      	ldr	r3, [pc, #44]	@ (80125b0 <StopRetransmission+0x70>)
 8012584:	2200      	movs	r2, #0
 8012586:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 801258a:	4b09      	ldr	r3, [pc, #36]	@ (80125b0 <StopRetransmission+0x70>)
 801258c:	2200      	movs	r2, #0
 801258e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8012592:	4b07      	ldr	r3, [pc, #28]	@ (80125b0 <StopRetransmission+0x70>)
 8012594:	2200      	movs	r2, #0
 8012596:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801259a:	4b05      	ldr	r3, [pc, #20]	@ (80125b0 <StopRetransmission+0x70>)
 801259c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80125a0:	f023 0302 	bic.w	r3, r3, #2
 80125a4:	4a02      	ldr	r2, [pc, #8]	@ (80125b0 <StopRetransmission+0x70>)
 80125a6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 80125aa:	2301      	movs	r3, #1
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	bd80      	pop	{r7, pc}
 80125b0:	20000890 	.word	0x20000890
 80125b4:	20000dc4 	.word	0x20000dc4

080125b8 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80125bc:	4b08      	ldr	r3, [pc, #32]	@ (80125e0 <OnMacProcessNotify+0x28>)
 80125be:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d00a      	beq.n	80125dc <OnMacProcessNotify+0x24>
 80125c6:	4b06      	ldr	r3, [pc, #24]	@ (80125e0 <OnMacProcessNotify+0x28>)
 80125c8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80125cc:	695b      	ldr	r3, [r3, #20]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d004      	beq.n	80125dc <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80125d2:	4b03      	ldr	r3, [pc, #12]	@ (80125e0 <OnMacProcessNotify+0x28>)
 80125d4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80125d8:	695b      	ldr	r3, [r3, #20]
 80125da:	4798      	blx	r3
    }
}
 80125dc:	bf00      	nop
 80125de:	bd80      	pop	{r7, pc}
 80125e0:	20000890 	.word	0x20000890

080125e4 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b082      	sub	sp, #8
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	4603      	mov	r3, r0
 80125ec:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80125ee:	4b0b      	ldr	r3, [pc, #44]	@ (801261c <CallNvmDataChangeCallback+0x38>)
 80125f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d00c      	beq.n	8012612 <CallNvmDataChangeCallback+0x2e>
 80125f8:	4b08      	ldr	r3, [pc, #32]	@ (801261c <CallNvmDataChangeCallback+0x38>)
 80125fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80125fe:	691b      	ldr	r3, [r3, #16]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d006      	beq.n	8012612 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8012604:	4b05      	ldr	r3, [pc, #20]	@ (801261c <CallNvmDataChangeCallback+0x38>)
 8012606:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801260a:	691b      	ldr	r3, [r3, #16]
 801260c:	88fa      	ldrh	r2, [r7, #6]
 801260e:	4610      	mov	r0, r2
 8012610:	4798      	blx	r3
    }
}
 8012612:	bf00      	nop
 8012614:	3708      	adds	r7, #8
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	20000890 	.word	0x20000890

08012620 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8012620:	b480      	push	{r7}
 8012622:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012624:	4b0b      	ldr	r3, [pc, #44]	@ (8012654 <IsRequestPending+0x34>)
 8012626:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801262a:	f003 0304 	and.w	r3, r3, #4
 801262e:	b2db      	uxtb	r3, r3
 8012630:	2b00      	cmp	r3, #0
 8012632:	d107      	bne.n	8012644 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012634:	4b07      	ldr	r3, [pc, #28]	@ (8012654 <IsRequestPending+0x34>)
 8012636:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 801263a:	f003 0301 	and.w	r3, r3, #1
 801263e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012640:	2b00      	cmp	r3, #0
 8012642:	d001      	beq.n	8012648 <IsRequestPending+0x28>
    {
        return 1;
 8012644:	2301      	movs	r3, #1
 8012646:	e000      	b.n	801264a <IsRequestPending+0x2a>
    }
    return 0;
 8012648:	2300      	movs	r3, #0
}
 801264a:	4618      	mov	r0, r3
 801264c:	46bd      	mov	sp, r7
 801264e:	bc80      	pop	{r7}
 8012650:	4770      	bx	lr
 8012652:	bf00      	nop
 8012654:	20000890 	.word	0x20000890

08012658 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012658:	b590      	push	{r4, r7, lr}
 801265a:	b091      	sub	sp, #68	@ 0x44
 801265c:	af02      	add	r7, sp, #8
 801265e:	6178      	str	r0, [r7, #20]
 8012660:	6139      	str	r1, [r7, #16]
 8012662:	4613      	mov	r3, r2
 8012664:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d002      	beq.n	8012672 <LoRaMacInitialization+0x1a>
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d101      	bne.n	8012676 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012672:	2303      	movs	r3, #3
 8012674:	e27a      	b.n	8012b6c <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d00b      	beq.n	8012696 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012682:	2b00      	cmp	r3, #0
 8012684:	d007      	beq.n	8012696 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801268a:	2b00      	cmp	r3, #0
 801268c:	d003      	beq.n	8012696 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012692:	2b00      	cmp	r3, #0
 8012694:	d101      	bne.n	801269a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012696:	2303      	movs	r3, #3
 8012698:	e268      	b.n	8012b6c <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801269a:	7bfb      	ldrb	r3, [r7, #15]
 801269c:	4618      	mov	r0, r3
 801269e:	f003 fd03 	bl	80160a8 <RegionIsActive>
 80126a2:	4603      	mov	r3, r0
 80126a4:	f083 0301 	eor.w	r3, r3, #1
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d001      	beq.n	80126b2 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80126ae:	2309      	movs	r3, #9
 80126b0:	e25c      	b.n	8012b6c <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80126b2:	6978      	ldr	r0, [r7, #20]
 80126b4:	f002 f996 	bl	80149e4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80126b8:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 80126bc:	2100      	movs	r1, #0
 80126be:	48c7      	ldr	r0, [pc, #796]	@ (80129dc <LoRaMacInitialization+0x384>)
 80126c0:	f005 ff68 	bl	8018594 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80126c4:	f240 5234 	movw	r2, #1332	@ 0x534
 80126c8:	2100      	movs	r1, #0
 80126ca:	48c5      	ldr	r0, [pc, #788]	@ (80129e0 <LoRaMacInitialization+0x388>)
 80126cc:	f005 ff62 	bl	8018594 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80126d0:	4ac2      	ldr	r2, [pc, #776]	@ (80129dc <LoRaMacInitialization+0x384>)
 80126d2:	7bfb      	ldrb	r3, [r7, #15]
 80126d4:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80126d8:	4bc0      	ldr	r3, [pc, #768]	@ (80129dc <LoRaMacInitialization+0x384>)
 80126da:	2200      	movs	r2, #0
 80126dc:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 80126e0:	4bbe      	ldr	r3, [pc, #760]	@ (80129dc <LoRaMacInitialization+0x384>)
 80126e2:	2200      	movs	r2, #0
 80126e4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80126e8:	4bbc      	ldr	r3, [pc, #752]	@ (80129dc <LoRaMacInitialization+0x384>)
 80126ea:	4abe      	ldr	r2, [pc, #760]	@ (80129e4 <LoRaMacInitialization+0x38c>)
 80126ec:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80126f0:	2300      	movs	r3, #0
 80126f2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80126f6:	4bbc      	ldr	r3, [pc, #752]	@ (80129e8 <LoRaMacInitialization+0x390>)
 80126f8:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80126fa:	4bbc      	ldr	r3, [pc, #752]	@ (80129ec <LoRaMacInitialization+0x394>)
 80126fc:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80126fe:	4bbc      	ldr	r3, [pc, #752]	@ (80129f0 <LoRaMacInitialization+0x398>)
 8012700:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012702:	4bb6      	ldr	r3, [pc, #728]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012704:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012708:	f107 021c 	add.w	r2, r7, #28
 801270c:	4611      	mov	r1, r2
 801270e:	4618      	mov	r0, r3
 8012710:	f003 fd03 	bl	801611a <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012714:	230f      	movs	r3, #15
 8012716:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801271a:	4bb0      	ldr	r3, [pc, #704]	@ (80129dc <LoRaMacInitialization+0x384>)
 801271c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012720:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012724:	4611      	mov	r1, r2
 8012726:	4618      	mov	r0, r3
 8012728:	f003 fcce 	bl	80160c8 <RegionGetPhyParam>
 801272c:	4603      	mov	r3, r0
 801272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8012730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012732:	2b00      	cmp	r3, #0
 8012734:	bf14      	ite	ne
 8012736:	2301      	movne	r3, #1
 8012738:	2300      	moveq	r3, #0
 801273a:	b2da      	uxtb	r2, r3
 801273c:	4ba7      	ldr	r3, [pc, #668]	@ (80129dc <LoRaMacInitialization+0x384>)
 801273e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012742:	230a      	movs	r3, #10
 8012744:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012748:	4ba4      	ldr	r3, [pc, #656]	@ (80129dc <LoRaMacInitialization+0x384>)
 801274a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801274e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012752:	4611      	mov	r1, r2
 8012754:	4618      	mov	r0, r3
 8012756:	f003 fcb7 	bl	80160c8 <RegionGetPhyParam>
 801275a:	4603      	mov	r3, r0
 801275c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801275e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012760:	b25a      	sxtb	r2, r3
 8012762:	4b9e      	ldr	r3, [pc, #632]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012764:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012768:	2306      	movs	r3, #6
 801276a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801276e:	4b9b      	ldr	r3, [pc, #620]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012770:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012774:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012778:	4611      	mov	r1, r2
 801277a:	4618      	mov	r0, r3
 801277c:	f003 fca4 	bl	80160c8 <RegionGetPhyParam>
 8012780:	4603      	mov	r3, r0
 8012782:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012786:	b25a      	sxtb	r2, r3
 8012788:	4b94      	ldr	r3, [pc, #592]	@ (80129dc <LoRaMacInitialization+0x384>)
 801278a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801278e:	2310      	movs	r3, #16
 8012790:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012794:	4b91      	ldr	r3, [pc, #580]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012796:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801279a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801279e:	4611      	mov	r1, r2
 80127a0:	4618      	mov	r0, r3
 80127a2:	f003 fc91 	bl	80160c8 <RegionGetPhyParam>
 80127a6:	4603      	mov	r3, r0
 80127a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80127aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ac:	4a8b      	ldr	r2, [pc, #556]	@ (80129dc <LoRaMacInitialization+0x384>)
 80127ae:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80127b2:	2311      	movs	r3, #17
 80127b4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80127b8:	4b88      	ldr	r3, [pc, #544]	@ (80129dc <LoRaMacInitialization+0x384>)
 80127ba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80127be:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80127c2:	4611      	mov	r1, r2
 80127c4:	4618      	mov	r0, r3
 80127c6:	f003 fc7f 	bl	80160c8 <RegionGetPhyParam>
 80127ca:	4603      	mov	r3, r0
 80127cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80127ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127d0:	4a82      	ldr	r2, [pc, #520]	@ (80129dc <LoRaMacInitialization+0x384>)
 80127d2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80127d6:	2312      	movs	r3, #18
 80127d8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80127dc:	4b7f      	ldr	r3, [pc, #508]	@ (80129dc <LoRaMacInitialization+0x384>)
 80127de:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80127e2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80127e6:	4611      	mov	r1, r2
 80127e8:	4618      	mov	r0, r3
 80127ea:	f003 fc6d 	bl	80160c8 <RegionGetPhyParam>
 80127ee:	4603      	mov	r3, r0
 80127f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80127f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127f4:	4a79      	ldr	r2, [pc, #484]	@ (80129dc <LoRaMacInitialization+0x384>)
 80127f6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80127fa:	2313      	movs	r3, #19
 80127fc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012800:	4b76      	ldr	r3, [pc, #472]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012802:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012806:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801280a:	4611      	mov	r1, r2
 801280c:	4618      	mov	r0, r3
 801280e:	f003 fc5b 	bl	80160c8 <RegionGetPhyParam>
 8012812:	4603      	mov	r3, r0
 8012814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012818:	4a70      	ldr	r2, [pc, #448]	@ (80129dc <LoRaMacInitialization+0x384>)
 801281a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801281e:	2314      	movs	r3, #20
 8012820:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012824:	4b6d      	ldr	r3, [pc, #436]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012826:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801282a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801282e:	4611      	mov	r1, r2
 8012830:	4618      	mov	r0, r3
 8012832:	f003 fc49 	bl	80160c8 <RegionGetPhyParam>
 8012836:	4603      	mov	r3, r0
 8012838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801283a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801283c:	4a67      	ldr	r2, [pc, #412]	@ (80129dc <LoRaMacInitialization+0x384>)
 801283e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8012842:	2316      	movs	r3, #22
 8012844:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012848:	4b64      	ldr	r3, [pc, #400]	@ (80129dc <LoRaMacInitialization+0x384>)
 801284a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801284e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012852:	4611      	mov	r1, r2
 8012854:	4618      	mov	r0, r3
 8012856:	f003 fc37 	bl	80160c8 <RegionGetPhyParam>
 801285a:	4603      	mov	r3, r0
 801285c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012860:	b2da      	uxtb	r2, r3
 8012862:	4b5e      	ldr	r3, [pc, #376]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012864:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012868:	2317      	movs	r3, #23
 801286a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801286e:	4b5b      	ldr	r3, [pc, #364]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012870:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012874:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012878:	4611      	mov	r1, r2
 801287a:	4618      	mov	r0, r3
 801287c:	f003 fc24 	bl	80160c8 <RegionGetPhyParam>
 8012880:	4603      	mov	r3, r0
 8012882:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012886:	4a55      	ldr	r2, [pc, #340]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012888:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 801288c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801288e:	4a53      	ldr	r2, [pc, #332]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012890:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012894:	2318      	movs	r3, #24
 8012896:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801289a:	4b50      	ldr	r3, [pc, #320]	@ (80129dc <LoRaMacInitialization+0x384>)
 801289c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80128a0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80128a4:	4611      	mov	r1, r2
 80128a6:	4618      	mov	r0, r3
 80128a8:	f003 fc0e 	bl	80160c8 <RegionGetPhyParam>
 80128ac:	4603      	mov	r3, r0
 80128ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80128b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128b2:	b2da      	uxtb	r2, r3
 80128b4:	4b49      	ldr	r3, [pc, #292]	@ (80129dc <LoRaMacInitialization+0x384>)
 80128b6:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80128ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128bc:	b2da      	uxtb	r2, r3
 80128be:	4b47      	ldr	r3, [pc, #284]	@ (80129dc <LoRaMacInitialization+0x384>)
 80128c0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80128c4:	231d      	movs	r3, #29
 80128c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80128ca:	4b44      	ldr	r3, [pc, #272]	@ (80129dc <LoRaMacInitialization+0x384>)
 80128cc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80128d0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80128d4:	4611      	mov	r1, r2
 80128d6:	4618      	mov	r0, r3
 80128d8:	f003 fbf6 	bl	80160c8 <RegionGetPhyParam>
 80128dc:	4603      	mov	r3, r0
 80128de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80128e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128e2:	b2da      	uxtb	r2, r3
 80128e4:	4b3d      	ldr	r3, [pc, #244]	@ (80129dc <LoRaMacInitialization+0x384>)
 80128e6:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80128ea:	231e      	movs	r3, #30
 80128ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80128f0:	4b3a      	ldr	r3, [pc, #232]	@ (80129dc <LoRaMacInitialization+0x384>)
 80128f2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80128f6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80128fa:	4611      	mov	r1, r2
 80128fc:	4618      	mov	r0, r3
 80128fe:	f003 fbe3 	bl	80160c8 <RegionGetPhyParam>
 8012902:	4603      	mov	r3, r0
 8012904:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012908:	b2da      	uxtb	r2, r3
 801290a:	4b34      	ldr	r3, [pc, #208]	@ (80129dc <LoRaMacInitialization+0x384>)
 801290c:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012910:	231f      	movs	r3, #31
 8012912:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012916:	4b31      	ldr	r3, [pc, #196]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012918:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801291c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012920:	4611      	mov	r1, r2
 8012922:	4618      	mov	r0, r3
 8012924:	f003 fbd0 	bl	80160c8 <RegionGetPhyParam>
 8012928:	4603      	mov	r3, r0
 801292a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 801292c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801292e:	4a2b      	ldr	r2, [pc, #172]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012930:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012934:	2320      	movs	r3, #32
 8012936:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801293a:	4b28      	ldr	r3, [pc, #160]	@ (80129dc <LoRaMacInitialization+0x384>)
 801293c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012940:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012944:	4611      	mov	r1, r2
 8012946:	4618      	mov	r0, r3
 8012948:	f003 fbbe 	bl	80160c8 <RegionGetPhyParam>
 801294c:	4603      	mov	r3, r0
 801294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012952:	4a22      	ldr	r2, [pc, #136]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012954:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012958:	230b      	movs	r3, #11
 801295a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801295e:	4b1f      	ldr	r3, [pc, #124]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012960:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012964:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012968:	4611      	mov	r1, r2
 801296a:	4618      	mov	r0, r3
 801296c:	f003 fbac 	bl	80160c8 <RegionGetPhyParam>
 8012970:	4603      	mov	r3, r0
 8012972:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8012974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012976:	b29a      	uxth	r2, r3
 8012978:	4b18      	ldr	r3, [pc, #96]	@ (80129dc <LoRaMacInitialization+0x384>)
 801297a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801297e:	230c      	movs	r3, #12
 8012980:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012984:	4b15      	ldr	r3, [pc, #84]	@ (80129dc <LoRaMacInitialization+0x384>)
 8012986:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801298a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801298e:	4611      	mov	r1, r2
 8012990:	4618      	mov	r0, r3
 8012992:	f003 fb99 	bl	80160c8 <RegionGetPhyParam>
 8012996:	4603      	mov	r3, r0
 8012998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 801299a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801299c:	b29a      	uxth	r2, r3
 801299e:	4b0f      	ldr	r3, [pc, #60]	@ (80129dc <LoRaMacInitialization+0x384>)
 80129a0:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80129a4:	4b0d      	ldr	r3, [pc, #52]	@ (80129dc <LoRaMacInitialization+0x384>)
 80129a6:	2201      	movs	r2, #1
 80129a8:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80129ac:	4b0b      	ldr	r3, [pc, #44]	@ (80129dc <LoRaMacInitialization+0x384>)
 80129ae:	220a      	movs	r2, #10
 80129b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80129b4:	4b09      	ldr	r3, [pc, #36]	@ (80129dc <LoRaMacInitialization+0x384>)
 80129b6:	2206      	movs	r2, #6
 80129b8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80129bc:	4b07      	ldr	r3, [pc, #28]	@ (80129dc <LoRaMacInitialization+0x384>)
 80129be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80129c2:	4a06      	ldr	r2, [pc, #24]	@ (80129dc <LoRaMacInitialization+0x384>)
 80129c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80129c6:	4b05      	ldr	r3, [pc, #20]	@ (80129dc <LoRaMacInitialization+0x384>)
 80129c8:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 80129cc:	4b03      	ldr	r3, [pc, #12]	@ (80129dc <LoRaMacInitialization+0x384>)
 80129ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80129d2:	4b02      	ldr	r3, [pc, #8]	@ (80129dc <LoRaMacInitialization+0x384>)
 80129d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80129d8:	e00c      	b.n	80129f4 <LoRaMacInitialization+0x39c>
 80129da:	bf00      	nop
 80129dc:	20000dc4 	.word	0x20000dc4
 80129e0:	20000890 	.word	0x20000890
 80129e4:	01000400 	.word	0x01000400
 80129e8:	20000fe8 	.word	0x20000fe8
 80129ec:	20000fec 	.word	0x20000fec
 80129f0:	2000193c 	.word	0x2000193c
 80129f4:	4a5f      	ldr	r2, [pc, #380]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 80129f6:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80129f8:	4b5e      	ldr	r3, [pc, #376]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 80129fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80129fe:	4a5d      	ldr	r2, [pc, #372]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a00:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8012a02:	4b5c      	ldr	r3, [pc, #368]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012a08:	4a5a      	ldr	r2, [pc, #360]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a0a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012a0c:	4b59      	ldr	r3, [pc, #356]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012a12:	4a58      	ldr	r2, [pc, #352]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a14:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8012a16:	4b57      	ldr	r3, [pc, #348]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012a1c:	4a55      	ldr	r2, [pc, #340]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a1e:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8012a20:	4b54      	ldr	r3, [pc, #336]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a22:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8012a26:	4b53      	ldr	r3, [pc, #332]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a28:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8012a2c:	4b51      	ldr	r3, [pc, #324]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a2e:	2201      	movs	r2, #1
 8012a30:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8012a34:	4a50      	ldr	r2, [pc, #320]	@ (8012b78 <LoRaMacInitialization+0x520>)
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 8012a3c:	2000      	movs	r0, #0
 8012a3e:	f7ff f86b 	bl	8011b18 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8012a42:	4b4c      	ldr	r3, [pc, #304]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a44:	2201      	movs	r2, #1
 8012a46:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 8012a4a:	4a4b      	ldr	r2, [pc, #300]	@ (8012b78 <LoRaMacInitialization+0x520>)
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8012a52:	4b49      	ldr	r3, [pc, #292]	@ (8012b78 <LoRaMacInitialization+0x520>)
 8012a54:	2200      	movs	r2, #0
 8012a56:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8012a5a:	4b47      	ldr	r3, [pc, #284]	@ (8012b78 <LoRaMacInitialization+0x520>)
 8012a5c:	2201      	movs	r2, #1
 8012a5e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012a62:	4b44      	ldr	r3, [pc, #272]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a64:	2200      	movs	r2, #0
 8012a66:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012a68:	4b42      	ldr	r3, [pc, #264]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012a6e:	2300      	movs	r3, #0
 8012a70:	9300      	str	r3, [sp, #0]
 8012a72:	4b42      	ldr	r3, [pc, #264]	@ (8012b7c <LoRaMacInitialization+0x524>)
 8012a74:	2200      	movs	r2, #0
 8012a76:	f04f 31ff 	mov.w	r1, #4294967295
 8012a7a:	4841      	ldr	r0, [pc, #260]	@ (8012b80 <LoRaMacInitialization+0x528>)
 8012a7c:	f009 fdfe 	bl	801c67c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012a80:	2300      	movs	r3, #0
 8012a82:	9300      	str	r3, [sp, #0]
 8012a84:	4b3f      	ldr	r3, [pc, #252]	@ (8012b84 <LoRaMacInitialization+0x52c>)
 8012a86:	2200      	movs	r2, #0
 8012a88:	f04f 31ff 	mov.w	r1, #4294967295
 8012a8c:	483e      	ldr	r0, [pc, #248]	@ (8012b88 <LoRaMacInitialization+0x530>)
 8012a8e:	f009 fdf5 	bl	801c67c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012a92:	2300      	movs	r3, #0
 8012a94:	9300      	str	r3, [sp, #0]
 8012a96:	4b3d      	ldr	r3, [pc, #244]	@ (8012b8c <LoRaMacInitialization+0x534>)
 8012a98:	2200      	movs	r2, #0
 8012a9a:	f04f 31ff 	mov.w	r1, #4294967295
 8012a9e:	483c      	ldr	r0, [pc, #240]	@ (8012b90 <LoRaMacInitialization+0x538>)
 8012aa0:	f009 fdec 	bl	801c67c <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	9300      	str	r3, [sp, #0]
 8012aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8012b94 <LoRaMacInitialization+0x53c>)
 8012aaa:	2200      	movs	r2, #0
 8012aac:	f04f 31ff 	mov.w	r1, #4294967295
 8012ab0:	4839      	ldr	r0, [pc, #228]	@ (8012b98 <LoRaMacInitialization+0x540>)
 8012ab2:	f009 fde3 	bl	801c67c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8012ab6:	4c2f      	ldr	r4, [pc, #188]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012ab8:	463b      	mov	r3, r7
 8012aba:	4618      	mov	r0, r3
 8012abc:	f009 f9ba 	bl	801be34 <SysTimeGetMcuTime>
 8012ac0:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 8012ac4:	463a      	mov	r2, r7
 8012ac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012aca:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8012ace:	4b33      	ldr	r3, [pc, #204]	@ (8012b9c <LoRaMacInitialization+0x544>)
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012ad4:	4b28      	ldr	r3, [pc, #160]	@ (8012b78 <LoRaMacInitialization+0x520>)
 8012ad6:	4a32      	ldr	r2, [pc, #200]	@ (8012ba0 <LoRaMacInitialization+0x548>)
 8012ad8:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012adc:	4b26      	ldr	r3, [pc, #152]	@ (8012b78 <LoRaMacInitialization+0x520>)
 8012ade:	4a31      	ldr	r2, [pc, #196]	@ (8012ba4 <LoRaMacInitialization+0x54c>)
 8012ae0:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8012ae4:	4b24      	ldr	r3, [pc, #144]	@ (8012b78 <LoRaMacInitialization+0x520>)
 8012ae6:	4a30      	ldr	r2, [pc, #192]	@ (8012ba8 <LoRaMacInitialization+0x550>)
 8012ae8:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012aec:	4b22      	ldr	r3, [pc, #136]	@ (8012b78 <LoRaMacInitialization+0x520>)
 8012aee:	4a2f      	ldr	r2, [pc, #188]	@ (8012bac <LoRaMacInitialization+0x554>)
 8012af0:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8012af4:	4b20      	ldr	r3, [pc, #128]	@ (8012b78 <LoRaMacInitialization+0x520>)
 8012af6:	4a2e      	ldr	r2, [pc, #184]	@ (8012bb0 <LoRaMacInitialization+0x558>)
 8012af8:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8012afc:	4b2d      	ldr	r3, [pc, #180]	@ (8012bb4 <LoRaMacInitialization+0x55c>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	482d      	ldr	r0, [pc, #180]	@ (8012bb8 <LoRaMacInitialization+0x560>)
 8012b02:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8012b04:	482d      	ldr	r0, [pc, #180]	@ (8012bbc <LoRaMacInitialization+0x564>)
 8012b06:	f7fa f9c1 	bl	800ce8c <SecureElementInit>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d001      	beq.n	8012b14 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012b10:	2311      	movs	r3, #17
 8012b12:	e02b      	b.n	8012b6c <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012b14:	4817      	ldr	r0, [pc, #92]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012b16:	f002 fc21 	bl	801535c <LoRaMacCryptoInit>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d001      	beq.n	8012b24 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012b20:	2311      	movs	r3, #17
 8012b22:	e023      	b.n	8012b6c <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012b24:	f001 fd20 	bl	8014568 <LoRaMacCommandsInit>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d001      	beq.n	8012b32 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012b2e:	2313      	movs	r3, #19
 8012b30:	e01c      	b.n	8012b6c <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012b32:	4823      	ldr	r0, [pc, #140]	@ (8012bc0 <LoRaMacInitialization+0x568>)
 8012b34:	f002 fcb2 	bl	801549c <LoRaMacCryptoSetMulticastReference>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d001      	beq.n	8012b42 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012b3e:	2311      	movs	r3, #17
 8012b40:	e014      	b.n	8012b6c <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012b42:	4b1c      	ldr	r3, [pc, #112]	@ (8012bb4 <LoRaMacInitialization+0x55c>)
 8012b44:	695b      	ldr	r3, [r3, #20]
 8012b46:	4798      	blx	r3
 8012b48:	4603      	mov	r3, r0
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f005 fcc2 	bl	80184d4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012b50:	4b18      	ldr	r3, [pc, #96]	@ (8012bb4 <LoRaMacInitialization+0x55c>)
 8012b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b54:	4a07      	ldr	r2, [pc, #28]	@ (8012b74 <LoRaMacInitialization+0x51c>)
 8012b56:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8012b5a:	4610      	mov	r0, r2
 8012b5c:	4798      	blx	r3
    Radio.Sleep( );
 8012b5e:	4b15      	ldr	r3, [pc, #84]	@ (8012bb4 <LoRaMacInitialization+0x55c>)
 8012b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b62:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012b64:	2001      	movs	r0, #1
 8012b66:	f7fd fa67 	bl	8010038 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012b6a:	2300      	movs	r3, #0
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	373c      	adds	r7, #60	@ 0x3c
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd90      	pop	{r4, r7, pc}
 8012b74:	20000dc4 	.word	0x20000dc4
 8012b78:	20000890 	.word	0x20000890
 8012b7c:	080105c5 	.word	0x080105c5
 8012b80:	20000bf8 	.word	0x20000bf8
 8012b84:	08010655 	.word	0x08010655
 8012b88:	20000c10 	.word	0x20000c10
 8012b8c:	080106cd 	.word	0x080106cd
 8012b90:	20000c28 	.word	0x20000c28
 8012b94:	0801074d 	.word	0x0801074d
 8012b98:	20000c90 	.word	0x20000c90
 8012b9c:	200019cc 	.word	0x200019cc
 8012ba0:	0800f045 	.word	0x0800f045
 8012ba4:	0800f0a1 	.word	0x0800f0a1
 8012ba8:	0800f141 	.word	0x0800f141
 8012bac:	0800f115 	.word	0x0800f115
 8012bb0:	0800f15d 	.word	0x0800f15d
 8012bb4:	0801e044 	.word	0x0801e044
 8012bb8:	20000bdc 	.word	0x20000bdc
 8012bbc:	20000f10 	.word	0x20000f10
 8012bc0:	20000eac 	.word	0x20000eac

08012bc4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8012bc8:	4b04      	ldr	r3, [pc, #16]	@ (8012bdc <LoRaMacStart+0x18>)
 8012bca:	2200      	movs	r2, #0
 8012bcc:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 8012bd0:	f7fc fada 	bl	800f188 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8012bd4:	2300      	movs	r3, #0
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	bd80      	pop	{r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	20000890 	.word	0x20000890

08012be0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8012be4:	f7fd f9f0 	bl	800ffc8 <LoRaMacIsBusy>
 8012be8:	4603      	mov	r3, r0
 8012bea:	f083 0301 	eor.w	r3, r3, #1
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d00d      	beq.n	8012c10 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8012bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8012c24 <LoRaMacStop+0x44>)
 8012bf6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8012bfa:	2b02      	cmp	r3, #2
 8012bfc:	d102      	bne.n	8012c04 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8012bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8012c28 <LoRaMacStop+0x48>)
 8012c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c02:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8012c04:	4b09      	ldr	r3, [pc, #36]	@ (8012c2c <LoRaMacStop+0x4c>)
 8012c06:	2201      	movs	r2, #1
 8012c08:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	e007      	b.n	8012c20 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8012c10:	4b06      	ldr	r3, [pc, #24]	@ (8012c2c <LoRaMacStop+0x4c>)
 8012c12:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012c16:	2b01      	cmp	r3, #1
 8012c18:	d101      	bne.n	8012c1e <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	e000      	b.n	8012c20 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8012c1e:	2301      	movs	r3, #1
}
 8012c20:	4618      	mov	r0, r3
 8012c22:	bd80      	pop	{r7, pc}
 8012c24:	20000dc4 	.word	0x20000dc4
 8012c28:	0801e044 	.word	0x0801e044
 8012c2c:	20000890 	.word	0x20000890

08012c30 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8012c34:	4812      	ldr	r0, [pc, #72]	@ (8012c80 <LoRaMacHalt+0x50>)
 8012c36:	f009 fdc5 	bl	801c7c4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8012c3a:	4812      	ldr	r0, [pc, #72]	@ (8012c84 <LoRaMacHalt+0x54>)
 8012c3c:	f009 fdc2 	bl	801c7c4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8012c40:	4811      	ldr	r0, [pc, #68]	@ (8012c88 <LoRaMacHalt+0x58>)
 8012c42:	f009 fdbf 	bl	801c7c4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8012c46:	4811      	ldr	r0, [pc, #68]	@ (8012c8c <LoRaMacHalt+0x5c>)
 8012c48:	f009 fdbc 	bl	801c7c4 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8012c4c:	f001 faf0 	bl	8014230 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8012c50:	4b0f      	ldr	r3, [pc, #60]	@ (8012c90 <LoRaMacHalt+0x60>)
 8012c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c54:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8012c56:	4b0f      	ldr	r3, [pc, #60]	@ (8012c94 <LoRaMacHalt+0x64>)
 8012c58:	2200      	movs	r2, #0
 8012c5a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8012c5e:	480e      	ldr	r0, [pc, #56]	@ (8012c98 <LoRaMacHalt+0x68>)
 8012c60:	f7fd fb8c 	bl	801037c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8012c64:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012c68:	490b      	ldr	r1, [pc, #44]	@ (8012c98 <LoRaMacHalt+0x68>)
 8012c6a:	480c      	ldr	r0, [pc, #48]	@ (8012c9c <LoRaMacHalt+0x6c>)
 8012c6c:	f005 fc57 	bl	801851e <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8012c70:	4b08      	ldr	r3, [pc, #32]	@ (8012c94 <LoRaMacHalt+0x64>)
 8012c72:	2201      	movs	r2, #1
 8012c74:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8012c78:	2300      	movs	r3, #0
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	bd80      	pop	{r7, pc}
 8012c7e:	bf00      	nop
 8012c80:	20000bf8 	.word	0x20000bf8
 8012c84:	20000c10 	.word	0x20000c10
 8012c88:	20000c28 	.word	0x20000c28
 8012c8c:	20000c90 	.word	0x20000c90
 8012c90:	0801e044 	.word	0x0801e044
 8012c94:	20000890 	.word	0x20000890
 8012c98:	20000dc4 	.word	0x20000dc4
 8012c9c:	20001380 	.word	0x20001380

08012ca0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012ca0:	b590      	push	{r4, r7, lr}
 8012ca2:	b08d      	sub	sp, #52	@ 0x34
 8012ca4:	af02      	add	r7, sp, #8
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	6039      	str	r1, [r7, #0]
 8012caa:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012cac:	4b42      	ldr	r3, [pc, #264]	@ (8012db8 <LoRaMacQueryTxPossible+0x118>)
 8012cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cb0:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012cb2:	4b41      	ldr	r3, [pc, #260]	@ (8012db8 <LoRaMacQueryTxPossible+0x118>)
 8012cb4:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8012cb8:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012cba:	4b3f      	ldr	r3, [pc, #252]	@ (8012db8 <LoRaMacQueryTxPossible+0x118>)
 8012cbc:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 8012cc0:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8012cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8012dbc <LoRaMacQueryTxPossible+0x11c>)
 8012cc4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012cc8:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d101      	bne.n	8012cd8 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012cd4:	2303      	movs	r3, #3
 8012cd6:	e06b      	b.n	8012db0 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012cdc:	4b36      	ldr	r3, [pc, #216]	@ (8012db8 <LoRaMacQueryTxPossible+0x118>)
 8012cde:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8012ce2:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012ce4:	4b34      	ldr	r3, [pc, #208]	@ (8012db8 <LoRaMacQueryTxPossible+0x118>)
 8012ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ce8:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012cea:	4b33      	ldr	r3, [pc, #204]	@ (8012db8 <LoRaMacQueryTxPossible+0x118>)
 8012cec:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8012cf0:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012cf2:	4b31      	ldr	r3, [pc, #196]	@ (8012db8 <LoRaMacQueryTxPossible+0x118>)
 8012cf4:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8012cf8:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8012db8 <LoRaMacQueryTxPossible+0x118>)
 8012cfc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012d00:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012d04:	4b2c      	ldr	r3, [pc, #176]	@ (8012db8 <LoRaMacQueryTxPossible+0x118>)
 8012d06:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8012d0a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8012d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8012dbc <LoRaMacQueryTxPossible+0x11c>)
 8012d10:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012d14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012d18:	4b27      	ldr	r3, [pc, #156]	@ (8012db8 <LoRaMacQueryTxPossible+0x118>)
 8012d1a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8012d22:	4b25      	ldr	r3, [pc, #148]	@ (8012db8 <LoRaMacQueryTxPossible+0x118>)
 8012d24:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d28:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8012d2c:	f107 040d 	add.w	r4, r7, #13
 8012d30:	f107 020e 	add.w	r2, r7, #14
 8012d34:	f107 010f 	add.w	r1, r7, #15
 8012d38:	f107 0014 	add.w	r0, r7, #20
 8012d3c:	f107 0310 	add.w	r3, r7, #16
 8012d40:	9300      	str	r3, [sp, #0]
 8012d42:	4623      	mov	r3, r4
 8012d44:	f001 f93e 	bl	8013fc4 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7fd fe43 	bl	80109d8 <GetMaxAppPayloadWithoutFOptsLength>
 8012d52:	4603      	mov	r3, r0
 8012d54:	461a      	mov	r2, r3
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012d5a:	f107 0308 	add.w	r3, r7, #8
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f001 fd08 	bl	8014774 <LoRaMacCommandsGetSizeSerializedCmds>
 8012d64:	4603      	mov	r3, r0
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d001      	beq.n	8012d6e <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d6a:	2313      	movs	r3, #19
 8012d6c:	e020      	b.n	8012db0 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	2b0f      	cmp	r3, #15
 8012d72:	d819      	bhi.n	8012da8 <LoRaMacQueryTxPossible+0x108>
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	785b      	ldrb	r3, [r3, #1]
 8012d78:	461a      	mov	r2, r3
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d313      	bcc.n	8012da8 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	785a      	ldrb	r2, [r3, #1]
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	b2db      	uxtb	r3, r3
 8012d88:	1ad3      	subs	r3, r2, r3
 8012d8a:	b2da      	uxtb	r2, r3
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	785b      	ldrb	r3, [r3, #1]
 8012d94:	4619      	mov	r1, r3
 8012d96:	79fa      	ldrb	r2, [r7, #7]
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	4413      	add	r3, r2
 8012d9c:	4299      	cmp	r1, r3
 8012d9e:	d301      	bcc.n	8012da4 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8012da0:	2300      	movs	r3, #0
 8012da2:	e005      	b.n	8012db0 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012da4:	2308      	movs	r3, #8
 8012da6:	e003      	b.n	8012db0 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	2200      	movs	r2, #0
 8012dac:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012dae:	2308      	movs	r3, #8
    }
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	372c      	adds	r7, #44	@ 0x2c
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd90      	pop	{r4, r7, pc}
 8012db8:	20000dc4 	.word	0x20000dc4
 8012dbc:	20000890 	.word	0x20000890

08012dc0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012dc0:	b590      	push	{r4, r7, lr}
 8012dc2:	b087      	sub	sp, #28
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d101      	bne.n	8012dd6 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012dd2:	2303      	movs	r3, #3
 8012dd4:	e1c4      	b.n	8013160 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	2b41      	cmp	r3, #65	@ 0x41
 8012ddc:	f200 81b9 	bhi.w	8013152 <LoRaMacMibGetRequestConfirm+0x392>
 8012de0:	a201      	add	r2, pc, #4	@ (adr r2, 8012de8 <LoRaMacMibGetRequestConfirm+0x28>)
 8012de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012de6:	bf00      	nop
 8012de8:	08012ef1 	.word	0x08012ef1
 8012dec:	08012efd 	.word	0x08012efd
 8012df0:	08012f09 	.word	0x08012f09
 8012df4:	08012f15 	.word	0x08012f15
 8012df8:	08012f21 	.word	0x08012f21
 8012dfc:	08012f2d 	.word	0x08012f2d
 8012e00:	08012f39 	.word	0x08012f39
 8012e04:	08013153 	.word	0x08013153
 8012e08:	08013153 	.word	0x08013153
 8012e0c:	08013153 	.word	0x08013153
 8012e10:	08013153 	.word	0x08013153
 8012e14:	08013153 	.word	0x08013153
 8012e18:	08013153 	.word	0x08013153
 8012e1c:	08013153 	.word	0x08013153
 8012e20:	08013153 	.word	0x08013153
 8012e24:	08012f4d 	.word	0x08012f4d
 8012e28:	08012f59 	.word	0x08012f59
 8012e2c:	08012f65 	.word	0x08012f65
 8012e30:	08012f87 	.word	0x08012f87
 8012e34:	08012f99 	.word	0x08012f99
 8012e38:	08012fab 	.word	0x08012fab
 8012e3c:	08012fbd 	.word	0x08012fbd
 8012e40:	08012ff1 	.word	0x08012ff1
 8012e44:	08012fcf 	.word	0x08012fcf
 8012e48:	08013013 	.word	0x08013013
 8012e4c:	0801301f 	.word	0x0801301f
 8012e50:	08013029 	.word	0x08013029
 8012e54:	08013033 	.word	0x08013033
 8012e58:	0801303d 	.word	0x0801303d
 8012e5c:	08013047 	.word	0x08013047
 8012e60:	08013051 	.word	0x08013051
 8012e64:	0801307d 	.word	0x0801307d
 8012e68:	08013089 	.word	0x08013089
 8012e6c:	080130a1 	.word	0x080130a1
 8012e70:	08013095 	.word	0x08013095
 8012e74:	080130ad 	.word	0x080130ad
 8012e78:	080130b7 	.word	0x080130b7
 8012e7c:	080130c3 	.word	0x080130c3
 8012e80:	080130df 	.word	0x080130df
 8012e84:	080130cf 	.word	0x080130cf
 8012e88:	080130d7 	.word	0x080130d7
 8012e8c:	08013153 	.word	0x08013153
 8012e90:	080130eb 	.word	0x080130eb
 8012e94:	08013153 	.word	0x08013153
 8012e98:	08013153 	.word	0x08013153
 8012e9c:	08013153 	.word	0x08013153
 8012ea0:	08013153 	.word	0x08013153
 8012ea4:	08013153 	.word	0x08013153
 8012ea8:	08013153 	.word	0x08013153
 8012eac:	08013153 	.word	0x08013153
 8012eb0:	08013153 	.word	0x08013153
 8012eb4:	08013153 	.word	0x08013153
 8012eb8:	08013153 	.word	0x08013153
 8012ebc:	08013153 	.word	0x08013153
 8012ec0:	08013153 	.word	0x08013153
 8012ec4:	08013153 	.word	0x08013153
 8012ec8:	08013153 	.word	0x08013153
 8012ecc:	08013153 	.word	0x08013153
 8012ed0:	080130ff 	.word	0x080130ff
 8012ed4:	0801310b 	.word	0x0801310b
 8012ed8:	08013117 	.word	0x08013117
 8012edc:	08013123 	.word	0x08013123
 8012ee0:	0801312f 	.word	0x0801312f
 8012ee4:	0801313b 	.word	0x0801313b
 8012ee8:	08013147 	.word	0x08013147
 8012eec:	0801314d 	.word	0x0801314d
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8012ef0:	4b9d      	ldr	r3, [pc, #628]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012ef2:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	711a      	strb	r2, [r3, #4]
            break;
 8012efa:	e130      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012efc:	4b9a      	ldr	r3, [pc, #616]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012efe:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	711a      	strb	r2, [r3, #4]
            break;
 8012f06:	e12a      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7fa fa7b 	bl	800d408 <SecureElementGetDevEui>
            break;
 8012f12:	e124      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	685b      	ldr	r3, [r3, #4]
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7fa faa5 	bl	800d468 <SecureElementGetJoinEui>
            break;
 8012f1e:	e11e      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8012f20:	4b91      	ldr	r3, [pc, #580]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f22:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	711a      	strb	r2, [r3, #4]
            break;
 8012f2a:	e118      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8012f2c:	4b8e      	ldr	r3, [pc, #568]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	605a      	str	r2, [r3, #4]
            break;
 8012f36:	e112      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8012f38:	4b8b      	ldr	r3, [pc, #556]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f3a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	3304      	adds	r3, #4
 8012f42:	4619      	mov	r1, r3
 8012f44:	4610      	mov	r0, r2
 8012f46:	f7fa fac1 	bl	800d4cc <SecureElementGetDevAddr>
            break;
 8012f4a:	e108      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012f4c:	4b86      	ldr	r3, [pc, #536]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f4e:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	711a      	strb	r2, [r3, #4]
            break;
 8012f56:	e102      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012f58:	4b83      	ldr	r3, [pc, #524]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f5a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	711a      	strb	r2, [r3, #4]
            break;
 8012f62:	e0fc      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012f64:	231c      	movs	r3, #28
 8012f66:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f68:	4b7f      	ldr	r3, [pc, #508]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f6a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012f6e:	f107 0210 	add.w	r2, r7, #16
 8012f72:	4611      	mov	r1, r2
 8012f74:	4618      	mov	r0, r3
 8012f76:	f003 f8a7 	bl	80160c8 <RegionGetPhyParam>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012f7e:	68fa      	ldr	r2, [r7, #12]
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	605a      	str	r2, [r3, #4]
            break;
 8012f84:	e0eb      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	4a77      	ldr	r2, [pc, #476]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f8a:	3304      	adds	r3, #4
 8012f8c:	326c      	adds	r2, #108	@ 0x6c
 8012f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f92:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012f96:	e0e2      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	4a73      	ldr	r2, [pc, #460]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012f9c:	3304      	adds	r3, #4
 8012f9e:	32b4      	adds	r2, #180	@ 0xb4
 8012fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fa4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012fa8:	e0d9      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	4a6e      	ldr	r2, [pc, #440]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012fae:	3304      	adds	r3, #4
 8012fb0:	3274      	adds	r2, #116	@ 0x74
 8012fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fb6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012fba:	e0d0      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	4a6a      	ldr	r2, [pc, #424]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012fc0:	3304      	adds	r3, #4
 8012fc2:	32bc      	adds	r2, #188	@ 0xbc
 8012fc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fc8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012fcc:	e0c7      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012fce:	231a      	movs	r3, #26
 8012fd0:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012fd2:	4b65      	ldr	r3, [pc, #404]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012fd4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012fd8:	f107 0210 	add.w	r2, r7, #16
 8012fdc:	4611      	mov	r1, r2
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f003 f872 	bl	80160c8 <RegionGetPhyParam>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012fe8:	68fa      	ldr	r2, [r7, #12]
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	605a      	str	r2, [r3, #4]
            break;
 8012fee:	e0b6      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012ff0:	2319      	movs	r3, #25
 8012ff2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ff4:	4b5c      	ldr	r3, [pc, #368]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012ff6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012ffa:	f107 0210 	add.w	r2, r7, #16
 8012ffe:	4611      	mov	r1, r2
 8013000:	4618      	mov	r0, r3
 8013002:	f003 f861 	bl	80160c8 <RegionGetPhyParam>
 8013006:	4603      	mov	r3, r0
 8013008:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801300a:	68fa      	ldr	r2, [r7, #12]
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	605a      	str	r2, [r3, #4]
            break;
 8013010:	e0a5      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8013012:	4b55      	ldr	r3, [pc, #340]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013014:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	711a      	strb	r2, [r3, #4]
            break;
 801301c:	e09f      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801301e:	4b52      	ldr	r3, [pc, #328]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013020:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	605a      	str	r2, [r3, #4]
            break;
 8013026:	e09a      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8013028:	4b4f      	ldr	r3, [pc, #316]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801302a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	605a      	str	r2, [r3, #4]
            break;
 8013030:	e095      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8013032:	4b4d      	ldr	r3, [pc, #308]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013034:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	605a      	str	r2, [r3, #4]
            break;
 801303a:	e090      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801303c:	4b4a      	ldr	r3, [pc, #296]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801303e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	605a      	str	r2, [r3, #4]
            break;
 8013044:	e08b      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8013046:	4b48      	ldr	r3, [pc, #288]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013048:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	605a      	str	r2, [r3, #4]
            break;
 801304e:	e086      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8013050:	2302      	movs	r3, #2
 8013052:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013054:	4b44      	ldr	r3, [pc, #272]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013056:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801305a:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801305c:	4b42      	ldr	r3, [pc, #264]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801305e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013062:	f107 0210 	add.w	r2, r7, #16
 8013066:	4611      	mov	r1, r2
 8013068:	4618      	mov	r0, r3
 801306a:	f003 f82d 	bl	80160c8 <RegionGetPhyParam>
 801306e:	4603      	mov	r3, r0
 8013070:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	b25a      	sxtb	r2, r3
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	711a      	strb	r2, [r3, #4]
            break;
 801307a:	e070      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801307c:	4b3a      	ldr	r3, [pc, #232]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801307e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	711a      	strb	r2, [r3, #4]
            break;
 8013086:	e06a      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013088:	4b37      	ldr	r3, [pc, #220]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801308a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	711a      	strb	r2, [r3, #4]
            break;
 8013092:	e064      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013094:	4b34      	ldr	r3, [pc, #208]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013096:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	711a      	strb	r2, [r3, #4]
            break;
 801309e:	e05e      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80130a0:	4b31      	ldr	r3, [pc, #196]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80130a2:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	711a      	strb	r2, [r3, #4]
            break;
 80130aa:	e058      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80130ac:	4b2e      	ldr	r3, [pc, #184]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80130ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	605a      	str	r2, [r3, #4]
            break;
 80130b4:	e053      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80130b6:	4b2c      	ldr	r3, [pc, #176]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80130b8:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	711a      	strb	r2, [r3, #4]
            break;
 80130c0:	e04d      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80130c2:	4b29      	ldr	r3, [pc, #164]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80130c4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	605a      	str	r2, [r3, #4]
            break;
 80130cc:	e047      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	4a25      	ldr	r2, [pc, #148]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80130d2:	605a      	str	r2, [r3, #4]
            break;
 80130d4:	e043      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	4a24      	ldr	r2, [pc, #144]	@ (801316c <LoRaMacMibGetRequestConfirm+0x3ac>)
 80130da:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 80130dc:	e03f      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80130de:	4b22      	ldr	r3, [pc, #136]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80130e0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	605a      	str	r2, [r3, #4]
            break;
 80130e8:	e039      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	4a1e      	ldr	r2, [pc, #120]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80130ee:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 80130f2:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80130f4:	687c      	ldr	r4, [r7, #4]
 80130f6:	f003 f95d 	bl	80163b4 <RegionGetVersion>
 80130fa:	60a0      	str	r0, [r4, #8]
            break;
 80130fc:	e02f      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80130fe:	4b1a      	ldr	r3, [pc, #104]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013100:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	605a      	str	r2, [r3, #4]
            break;
 8013108:	e029      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 801310a:	4b17      	ldr	r3, [pc, #92]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801310c:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	711a      	strb	r2, [r3, #4]
            break;
 8013114:	e023      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8013116:	4b14      	ldr	r3, [pc, #80]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013118:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	809a      	strh	r2, [r3, #4]
            break;
 8013120:	e01d      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8013122:	4b11      	ldr	r3, [pc, #68]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013124:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	809a      	strh	r2, [r3, #4]
            break;
 801312c:	e017      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801312e:	4b0e      	ldr	r3, [pc, #56]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013130:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	809a      	strh	r2, [r3, #4]
            break;
 8013138:	e011      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801313a:	4b0b      	ldr	r3, [pc, #44]	@ (8013168 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801313c:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	809a      	strh	r2, [r3, #4]
            break;
 8013144:	e00b      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013146:	2318      	movs	r3, #24
 8013148:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801314a:	e008      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801314c:	2318      	movs	r3, #24
 801314e:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013150:	e005      	b.n	801315e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f001 f883 	bl	801425e <LoRaMacClassBMibGetRequestConfirm>
 8013158:	4603      	mov	r3, r0
 801315a:	75fb      	strb	r3, [r7, #23]
            break;
 801315c:	bf00      	nop
        }
    }
    return status;
 801315e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013160:	4618      	mov	r0, r3
 8013162:	371c      	adds	r7, #28
 8013164:	46bd      	mov	sp, r7
 8013166:	bd90      	pop	{r4, r7, pc}
 8013168:	20000dc4 	.word	0x20000dc4
 801316c:	20001380 	.word	0x20001380

08013170 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b086      	sub	sp, #24
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013178:	2300      	movs	r3, #0
 801317a:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d101      	bne.n	8013186 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013182:	2303      	movs	r3, #3
 8013184:	e39e      	b.n	80138c4 <LoRaMacMibSetRequestConfirm+0x754>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013186:	4bbd      	ldr	r3, [pc, #756]	@ (801347c <LoRaMacMibSetRequestConfirm+0x30c>)
 8013188:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801318c:	f003 0302 	and.w	r3, r3, #2
 8013190:	2b00      	cmp	r3, #0
 8013192:	d001      	beq.n	8013198 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013194:	2301      	movs	r3, #1
 8013196:	e395      	b.n	80138c4 <LoRaMacMibSetRequestConfirm+0x754>
    }

    switch( mibSet->Type )
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	2b41      	cmp	r3, #65	@ 0x41
 801319e:	f200 8365 	bhi.w	801386c <LoRaMacMibSetRequestConfirm+0x6fc>
 80131a2:	a201      	add	r2, pc, #4	@ (adr r2, 80131a8 <LoRaMacMibSetRequestConfirm+0x38>)
 80131a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a8:	080132b1 	.word	0x080132b1
 80131ac:	080132c1 	.word	0x080132c1
 80131b0:	080132db 	.word	0x080132db
 80131b4:	080132f3 	.word	0x080132f3
 80131b8:	0801330b 	.word	0x0801330b
 80131bc:	08013317 	.word	0x08013317
 80131c0:	08013323 	.word	0x08013323
 80131c4:	0801334d 	.word	0x0801334d
 80131c8:	08013373 	.word	0x08013373
 80131cc:	08013399 	.word	0x08013399
 80131d0:	080133bf 	.word	0x080133bf
 80131d4:	080133e5 	.word	0x080133e5
 80131d8:	0801340b 	.word	0x0801340b
 80131dc:	08013431 	.word	0x08013431
 80131e0:	08013457 	.word	0x08013457
 80131e4:	08013485 	.word	0x08013485
 80131e8:	080134a5 	.word	0x080134a5
 80131ec:	0801386d 	.word	0x0801386d
 80131f0:	080134b1 	.word	0x080134b1
 80131f4:	08013521 	.word	0x08013521
 80131f8:	08013561 	.word	0x08013561
 80131fc:	080135c3 	.word	0x080135c3
 8013200:	08013633 	.word	0x08013633
 8013204:	08013603 	.word	0x08013603
 8013208:	08013663 	.word	0x08013663
 801320c:	08013685 	.word	0x08013685
 8013210:	0801368f 	.word	0x0801368f
 8013214:	08013699 	.word	0x08013699
 8013218:	080136a3 	.word	0x080136a3
 801321c:	080136ad 	.word	0x080136ad
 8013220:	0801386d 	.word	0x0801386d
 8013224:	080136b7 	.word	0x080136b7
 8013228:	080136e9 	.word	0x080136e9
 801322c:	0801375d 	.word	0x0801375d
 8013230:	08013723 	.word	0x08013723
 8013234:	0801378f 	.word	0x0801378f
 8013238:	080137b5 	.word	0x080137b5
 801323c:	080137cd 	.word	0x080137cd
 8013240:	080137d9 	.word	0x080137d9
 8013244:	080137e5 	.word	0x080137e5
 8013248:	0801386d 	.word	0x0801386d
 801324c:	080137ef 	.word	0x080137ef
 8013250:	0801386d 	.word	0x0801386d
 8013254:	0801386d 	.word	0x0801386d
 8013258:	0801386d 	.word	0x0801386d
 801325c:	0801386d 	.word	0x0801386d
 8013260:	0801386d 	.word	0x0801386d
 8013264:	0801386d 	.word	0x0801386d
 8013268:	0801386d 	.word	0x0801386d
 801326c:	0801386d 	.word	0x0801386d
 8013270:	0801386d 	.word	0x0801386d
 8013274:	0801386d 	.word	0x0801386d
 8013278:	0801386d 	.word	0x0801386d
 801327c:	0801386d 	.word	0x0801386d
 8013280:	0801386d 	.word	0x0801386d
 8013284:	0801386d 	.word	0x0801386d
 8013288:	0801386d 	.word	0x0801386d
 801328c:	0801386d 	.word	0x0801386d
 8013290:	08013819 	.word	0x08013819
 8013294:	08013825 	.word	0x08013825
 8013298:	08013831 	.word	0x08013831
 801329c:	0801383d 	.word	0x0801383d
 80132a0:	08013849 	.word	0x08013849
 80132a4:	08013855 	.word	0x08013855
 80132a8:	08013861 	.word	0x08013861
 80132ac:	08013867 	.word	0x08013867
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	791b      	ldrb	r3, [r3, #4]
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7fd faa5 	bl	8010804 <SwitchClass>
 80132ba:	4603      	mov	r3, r0
 80132bc:	75fb      	strb	r3, [r7, #23]
            break;
 80132be:	e2f6      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	791b      	ldrb	r3, [r3, #4]
 80132c4:	2b02      	cmp	r3, #2
 80132c6:	d005      	beq.n	80132d4 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	791a      	ldrb	r2, [r3, #4]
 80132cc:	4b6c      	ldr	r3, [pc, #432]	@ (8013480 <LoRaMacMibSetRequestConfirm+0x310>)
 80132ce:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80132d2:	e2ec      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132d4:	2303      	movs	r3, #3
 80132d6:	75fb      	strb	r3, [r7, #23]
            break;
 80132d8:	e2e9      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	4618      	mov	r0, r3
 80132e0:	f7fa f87a 	bl	800d3d8 <SecureElementSetDevEui>
 80132e4:	4603      	mov	r3, r0
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	f000 82c6 	beq.w	8013878 <LoRaMacMibSetRequestConfirm+0x708>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132ec:	2303      	movs	r3, #3
 80132ee:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80132f0:	e2c2      	b.n	8013878 <LoRaMacMibSetRequestConfirm+0x708>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	685b      	ldr	r3, [r3, #4]
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7fa f89e 	bl	800d438 <SecureElementSetJoinEui>
 80132fc:	4603      	mov	r3, r0
 80132fe:	2b00      	cmp	r3, #0
 8013300:	f000 82bc 	beq.w	801387c <LoRaMacMibSetRequestConfirm+0x70c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013304:	2303      	movs	r3, #3
 8013306:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013308:	e2b8      	b.n	801387c <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	791a      	ldrb	r2, [r3, #4]
 801330e:	4b5c      	ldr	r3, [pc, #368]	@ (8013480 <LoRaMacMibSetRequestConfirm+0x310>)
 8013310:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8013314:	e2cb      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	4a59      	ldr	r2, [pc, #356]	@ (8013480 <LoRaMacMibSetRequestConfirm+0x310>)
 801331c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8013320:	e2c5      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8013322:	4b57      	ldr	r3, [pc, #348]	@ (8013480 <LoRaMacMibSetRequestConfirm+0x310>)
 8013324:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	685b      	ldr	r3, [r3, #4]
 801332c:	4619      	mov	r1, r3
 801332e:	4610      	mov	r0, r2
 8013330:	f7fa f8b2 	bl	800d498 <SecureElementSetDevAddr>
 8013334:	4603      	mov	r3, r0
 8013336:	2b00      	cmp	r3, #0
 8013338:	d002      	beq.n	8013340 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801333a:	2303      	movs	r3, #3
 801333c:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 801333e:	e2b6      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	685b      	ldr	r3, [r3, #4]
 8013344:	4a4e      	ldr	r2, [pc, #312]	@ (8013480 <LoRaMacMibSetRequestConfirm+0x310>)
 8013346:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 801334a:	e2b0      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d00b      	beq.n	801336c <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	4619      	mov	r1, r3
 801335a:	2000      	movs	r0, #0
 801335c:	f002 f8c8 	bl	80154f0 <LoRaMacCryptoSetKey>
 8013360:	4603      	mov	r3, r0
 8013362:	2b00      	cmp	r3, #0
 8013364:	f000 828c 	beq.w	8013880 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013368:	2311      	movs	r3, #17
 801336a:	e2ab      	b.n	80138c4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801336c:	2303      	movs	r3, #3
 801336e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013370:	e286      	b.n	8013880 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	685b      	ldr	r3, [r3, #4]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d00b      	beq.n	8013392 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	4619      	mov	r1, r3
 8013380:	2001      	movs	r0, #1
 8013382:	f002 f8b5 	bl	80154f0 <LoRaMacCryptoSetKey>
 8013386:	4603      	mov	r3, r0
 8013388:	2b00      	cmp	r3, #0
 801338a:	f000 827b 	beq.w	8013884 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801338e:	2311      	movs	r3, #17
 8013390:	e298      	b.n	80138c4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013392:	2303      	movs	r3, #3
 8013394:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013396:	e275      	b.n	8013884 <LoRaMacMibSetRequestConfirm+0x714>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	685b      	ldr	r3, [r3, #4]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d00b      	beq.n	80133b8 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	4619      	mov	r1, r3
 80133a6:	2008      	movs	r0, #8
 80133a8:	f002 f8a2 	bl	80154f0 <LoRaMacCryptoSetKey>
 80133ac:	4603      	mov	r3, r0
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	f000 826a 	beq.w	8013888 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80133b4:	2311      	movs	r3, #17
 80133b6:	e285      	b.n	80138c4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133b8:	2303      	movs	r3, #3
 80133ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80133bc:	e264      	b.n	8013888 <LoRaMacMibSetRequestConfirm+0x718>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d00b      	beq.n	80133de <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	685b      	ldr	r3, [r3, #4]
 80133ca:	4619      	mov	r1, r3
 80133cc:	2009      	movs	r0, #9
 80133ce:	f002 f88f 	bl	80154f0 <LoRaMacCryptoSetKey>
 80133d2:	4603      	mov	r3, r0
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	f000 8259 	beq.w	801388c <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80133da:	2311      	movs	r3, #17
 80133dc:	e272      	b.n	80138c4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133de:	2303      	movs	r3, #3
 80133e0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80133e2:	e253      	b.n	801388c <LoRaMacMibSetRequestConfirm+0x71c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d00b      	beq.n	8013404 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	685b      	ldr	r3, [r3, #4]
 80133f0:	4619      	mov	r1, r3
 80133f2:	200c      	movs	r0, #12
 80133f4:	f002 f87c 	bl	80154f0 <LoRaMacCryptoSetKey>
 80133f8:	4603      	mov	r3, r0
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	f000 8248 	beq.w	8013890 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013400:	2311      	movs	r3, #17
 8013402:	e25f      	b.n	80138c4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013404:	2303      	movs	r3, #3
 8013406:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013408:	e242      	b.n	8013890 <LoRaMacMibSetRequestConfirm+0x720>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	685b      	ldr	r3, [r3, #4]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d00b      	beq.n	801342a <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	4619      	mov	r1, r3
 8013418:	200d      	movs	r0, #13
 801341a:	f002 f869 	bl	80154f0 <LoRaMacCryptoSetKey>
 801341e:	4603      	mov	r3, r0
 8013420:	2b00      	cmp	r3, #0
 8013422:	f000 8237 	beq.w	8013894 <LoRaMacMibSetRequestConfirm+0x724>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013426:	2311      	movs	r3, #17
 8013428:	e24c      	b.n	80138c4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801342a:	2303      	movs	r3, #3
 801342c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801342e:	e231      	b.n	8013894 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d00b      	beq.n	8013450 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	4619      	mov	r1, r3
 801343e:	200e      	movs	r0, #14
 8013440:	f002 f856 	bl	80154f0 <LoRaMacCryptoSetKey>
 8013444:	4603      	mov	r3, r0
 8013446:	2b00      	cmp	r3, #0
 8013448:	f000 8226 	beq.w	8013898 <LoRaMacMibSetRequestConfirm+0x728>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801344c:	2311      	movs	r3, #17
 801344e:	e239      	b.n	80138c4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013450:	2303      	movs	r3, #3
 8013452:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013454:	e220      	b.n	8013898 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	685b      	ldr	r3, [r3, #4]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d00b      	beq.n	8013476 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	685b      	ldr	r3, [r3, #4]
 8013462:	4619      	mov	r1, r3
 8013464:	200f      	movs	r0, #15
 8013466:	f002 f843 	bl	80154f0 <LoRaMacCryptoSetKey>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	f000 8215 	beq.w	801389c <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013472:	2311      	movs	r3, #17
 8013474:	e226      	b.n	80138c4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013476:	2303      	movs	r3, #3
 8013478:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801347a:	e20f      	b.n	801389c <LoRaMacMibSetRequestConfirm+0x72c>
 801347c:	20000890 	.word	0x20000890
 8013480:	20000dc4 	.word	0x20000dc4
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	791a      	ldrb	r2, [r3, #4]
 8013488:	4bb2      	ldr	r3, [pc, #712]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801348a:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801348e:	4bb2      	ldr	r3, [pc, #712]	@ (8013758 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013492:	4ab0      	ldr	r2, [pc, #704]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013494:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8013498:	4610      	mov	r0, r2
 801349a:	4798      	blx	r3
            Radio.Sleep( );
 801349c:	4bae      	ldr	r3, [pc, #696]	@ (8013758 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134a0:	4798      	blx	r3
            break;
 80134a2:	e204      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	791a      	ldrb	r2, [r3, #4]
 80134a8:	4baa      	ldr	r3, [pc, #680]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80134aa:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 80134ae:	e1fe      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	7a1b      	ldrb	r3, [r3, #8]
 80134b4:	b25b      	sxtb	r3, r3
 80134b6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80134b8:	4ba6      	ldr	r3, [pc, #664]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80134ba:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80134be:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80134c0:	4ba4      	ldr	r3, [pc, #656]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80134c2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80134c6:	f107 0108 	add.w	r1, r7, #8
 80134ca:	2207      	movs	r2, #7
 80134cc:	4618      	mov	r0, r3
 80134ce:	f002 fe36 	bl	801613e <RegionVerify>
 80134d2:	4603      	mov	r3, r0
 80134d4:	f083 0301 	eor.w	r3, r3, #1
 80134d8:	b2db      	uxtb	r3, r3
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d002      	beq.n	80134e4 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134de:	2303      	movs	r3, #3
 80134e0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 80134e2:	e1e4      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80134ea:	4b9a      	ldr	r3, [pc, #616]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80134ec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80134f0:	f107 0108 	add.w	r1, r7, #8
 80134f4:	2200      	movs	r2, #0
 80134f6:	4618      	mov	r0, r3
 80134f8:	f002 fe21 	bl	801613e <RegionVerify>
 80134fc:	4603      	mov	r3, r0
 80134fe:	f083 0301 	eor.w	r3, r3, #1
 8013502:	b2db      	uxtb	r3, r3
 8013504:	2b00      	cmp	r3, #0
 8013506:	d002      	beq.n	801350e <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013508:	2303      	movs	r3, #3
 801350a:	75fb      	strb	r3, [r7, #23]
            break;
 801350c:	e1cf      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801350e:	4b91      	ldr	r3, [pc, #580]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013510:	687a      	ldr	r2, [r7, #4]
 8013512:	336c      	adds	r3, #108	@ 0x6c
 8013514:	3204      	adds	r2, #4
 8013516:	e892 0003 	ldmia.w	r2, {r0, r1}
 801351a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801351e:	e1c6      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	7a1b      	ldrb	r3, [r3, #8]
 8013524:	b25b      	sxtb	r3, r3
 8013526:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013528:	4b8a      	ldr	r3, [pc, #552]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801352a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801352e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013530:	4b88      	ldr	r3, [pc, #544]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013532:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013536:	f107 0108 	add.w	r1, r7, #8
 801353a:	2207      	movs	r2, #7
 801353c:	4618      	mov	r0, r3
 801353e:	f002 fdfe 	bl	801613e <RegionVerify>
 8013542:	4603      	mov	r3, r0
 8013544:	2b00      	cmp	r3, #0
 8013546:	d008      	beq.n	801355a <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013548:	4b82      	ldr	r3, [pc, #520]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801354a:	687a      	ldr	r2, [r7, #4]
 801354c:	33b4      	adds	r3, #180	@ 0xb4
 801354e:	3204      	adds	r2, #4
 8013550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013554:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013558:	e1a9      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801355a:	2303      	movs	r3, #3
 801355c:	75fb      	strb	r3, [r7, #23]
            break;
 801355e:	e1a6      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	7a1b      	ldrb	r3, [r3, #8]
 8013564:	b25b      	sxtb	r3, r3
 8013566:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013568:	4b7a      	ldr	r3, [pc, #488]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801356a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801356e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013570:	4b78      	ldr	r3, [pc, #480]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013572:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013576:	f107 0108 	add.w	r1, r7, #8
 801357a:	2207      	movs	r2, #7
 801357c:	4618      	mov	r0, r3
 801357e:	f002 fdde 	bl	801613e <RegionVerify>
 8013582:	4603      	mov	r3, r0
 8013584:	2b00      	cmp	r3, #0
 8013586:	d019      	beq.n	80135bc <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013588:	4b72      	ldr	r3, [pc, #456]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801358a:	687a      	ldr	r2, [r7, #4]
 801358c:	3374      	adds	r3, #116	@ 0x74
 801358e:	3204      	adds	r2, #4
 8013590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013594:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013598:	4b6e      	ldr	r3, [pc, #440]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801359a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801359e:	2b02      	cmp	r3, #2
 80135a0:	f040 817e 	bne.w	80138a0 <LoRaMacMibSetRequestConfirm+0x730>
 80135a4:	4b6b      	ldr	r3, [pc, #428]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80135a6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	f000 8178 	beq.w	80138a0 <LoRaMacMibSetRequestConfirm+0x730>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80135b0:	4b69      	ldr	r3, [pc, #420]	@ (8013758 <LoRaMacMibSetRequestConfirm+0x5e8>)
 80135b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135b4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80135b6:	f7fe fc1d 	bl	8011df4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80135ba:	e171      	b.n	80138a0 <LoRaMacMibSetRequestConfirm+0x730>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135bc:	2303      	movs	r3, #3
 80135be:	75fb      	strb	r3, [r7, #23]
            break;
 80135c0:	e16e      	b.n	80138a0 <LoRaMacMibSetRequestConfirm+0x730>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	7a1b      	ldrb	r3, [r3, #8]
 80135c6:	b25b      	sxtb	r3, r3
 80135c8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80135ca:	4b62      	ldr	r3, [pc, #392]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80135cc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80135d0:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80135d2:	4b60      	ldr	r3, [pc, #384]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80135d4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80135d8:	f107 0108 	add.w	r1, r7, #8
 80135dc:	2207      	movs	r2, #7
 80135de:	4618      	mov	r0, r3
 80135e0:	f002 fdad 	bl	801613e <RegionVerify>
 80135e4:	4603      	mov	r3, r0
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d008      	beq.n	80135fc <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80135ea:	4b5a      	ldr	r3, [pc, #360]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	33bc      	adds	r3, #188	@ 0xbc
 80135f0:	3204      	adds	r2, #4
 80135f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80135f6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80135fa:	e158      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135fc:	2303      	movs	r3, #3
 80135fe:	75fb      	strb	r3, [r7, #23]
            break;
 8013600:	e155      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013608:	2301      	movs	r3, #1
 801360a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801360c:	4b51      	ldr	r3, [pc, #324]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801360e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013612:	f107 020c 	add.w	r2, r7, #12
 8013616:	4611      	mov	r1, r2
 8013618:	4618      	mov	r0, r3
 801361a:	f002 fdb9 	bl	8016190 <RegionChanMaskSet>
 801361e:	4603      	mov	r3, r0
 8013620:	f083 0301 	eor.w	r3, r3, #1
 8013624:	b2db      	uxtb	r3, r3
 8013626:	2b00      	cmp	r3, #0
 8013628:	f000 813c 	beq.w	80138a4 <LoRaMacMibSetRequestConfirm+0x734>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801362c:	2303      	movs	r3, #3
 801362e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013630:	e138      	b.n	80138a4 <LoRaMacMibSetRequestConfirm+0x734>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	685b      	ldr	r3, [r3, #4]
 8013636:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013638:	2300      	movs	r3, #0
 801363a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801363c:	4b45      	ldr	r3, [pc, #276]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801363e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013642:	f107 020c 	add.w	r2, r7, #12
 8013646:	4611      	mov	r1, r2
 8013648:	4618      	mov	r0, r3
 801364a:	f002 fda1 	bl	8016190 <RegionChanMaskSet>
 801364e:	4603      	mov	r3, r0
 8013650:	f083 0301 	eor.w	r3, r3, #1
 8013654:	b2db      	uxtb	r3, r3
 8013656:	2b00      	cmp	r3, #0
 8013658:	f000 8126 	beq.w	80138a8 <LoRaMacMibSetRequestConfirm+0x738>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801365c:	2303      	movs	r3, #3
 801365e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013660:	e122      	b.n	80138a8 <LoRaMacMibSetRequestConfirm+0x738>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	791b      	ldrb	r3, [r3, #4]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d009      	beq.n	801367e <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801366e:	2b0f      	cmp	r3, #15
 8013670:	d805      	bhi.n	801367e <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	791a      	ldrb	r2, [r3, #4]
 8013676:	4b37      	ldr	r3, [pc, #220]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013678:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801367c:	e117      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801367e:	2303      	movs	r3, #3
 8013680:	75fb      	strb	r3, [r7, #23]
            break;
 8013682:	e114      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	685b      	ldr	r3, [r3, #4]
 8013688:	4a32      	ldr	r2, [pc, #200]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801368a:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 801368c:	e10f      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	4a30      	ldr	r2, [pc, #192]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013694:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8013696:	e10a      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	685b      	ldr	r3, [r3, #4]
 801369c:	4a2d      	ldr	r2, [pc, #180]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801369e:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 80136a0:	e105      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	685b      	ldr	r3, [r3, #4]
 80136a6:	4a2b      	ldr	r2, [pc, #172]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80136a8:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 80136aa:	e100      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	4a28      	ldr	r2, [pc, #160]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80136b2:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 80136b4:	e0fb      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80136bc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80136be:	4b25      	ldr	r3, [pc, #148]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80136c0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80136c4:	f107 0108 	add.w	r1, r7, #8
 80136c8:	2206      	movs	r2, #6
 80136ca:	4618      	mov	r0, r3
 80136cc:	f002 fd37 	bl	801613e <RegionVerify>
 80136d0:	4603      	mov	r3, r0
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d005      	beq.n	80136e2 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80136d6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80136da:	4b1e      	ldr	r3, [pc, #120]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80136dc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80136e0:	e0e5      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80136e2:	2303      	movs	r3, #3
 80136e4:	75fb      	strb	r3, [r7, #23]
            break;
 80136e6:	e0e2      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80136ee:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80136f0:	4b18      	ldr	r3, [pc, #96]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80136f2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80136f6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80136f8:	4b16      	ldr	r3, [pc, #88]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80136fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80136fe:	f107 0108 	add.w	r1, r7, #8
 8013702:	2205      	movs	r2, #5
 8013704:	4618      	mov	r0, r3
 8013706:	f002 fd1a 	bl	801613e <RegionVerify>
 801370a:	4603      	mov	r3, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	d005      	beq.n	801371c <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013710:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013714:	4b0f      	ldr	r3, [pc, #60]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013716:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801371a:	e0c8      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801371c:	2303      	movs	r3, #3
 801371e:	75fb      	strb	r3, [r7, #23]
            break;
 8013720:	e0c5      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013728:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 801372a:	4b0a      	ldr	r3, [pc, #40]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801372c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013730:	f107 0108 	add.w	r1, r7, #8
 8013734:	220a      	movs	r2, #10
 8013736:	4618      	mov	r0, r3
 8013738:	f002 fd01 	bl	801613e <RegionVerify>
 801373c:	4603      	mov	r3, r0
 801373e:	2b00      	cmp	r3, #0
 8013740:	d005      	beq.n	801374e <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8013742:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013746:	4b03      	ldr	r3, [pc, #12]	@ (8013754 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013748:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801374c:	e0af      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801374e:	2303      	movs	r3, #3
 8013750:	75fb      	strb	r3, [r7, #23]
            break;
 8013752:	e0ac      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
 8013754:	20000dc4 	.word	0x20000dc4
 8013758:	0801e044 	.word	0x0801e044
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013762:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013764:	4b59      	ldr	r3, [pc, #356]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 8013766:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801376a:	f107 0108 	add.w	r1, r7, #8
 801376e:	2209      	movs	r2, #9
 8013770:	4618      	mov	r0, r3
 8013772:	f002 fce4 	bl	801613e <RegionVerify>
 8013776:	4603      	mov	r3, r0
 8013778:	2b00      	cmp	r3, #0
 801377a:	d005      	beq.n	8013788 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801377c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013780:	4b52      	ldr	r3, [pc, #328]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 8013782:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013786:	e092      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013788:	2303      	movs	r3, #3
 801378a:	75fb      	strb	r3, [r7, #23]
            break;
 801378c:	e08f      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mibSet->Param.SystemMaxRxError <= 500 )
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	685b      	ldr	r3, [r3, #4]
 8013792:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8013796:	d80a      	bhi.n	80137ae <LoRaMacMibSetRequestConfirm+0x63e>
            { // Only apply the new value if in range 0..500 ms else keep current value.
                Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	685b      	ldr	r3, [r3, #4]
 801379c:	4a4b      	ldr	r2, [pc, #300]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 801379e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80137a2:	4b4a      	ldr	r3, [pc, #296]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 80137a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80137a8:	4a48      	ldr	r2, [pc, #288]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 80137aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
#else
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
#endif
            break;
 80137ac:	e07f      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137ae:	2303      	movs	r3, #3
 80137b0:	75fb      	strb	r3, [r7, #23]
            break;
 80137b2:	e07c      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	791a      	ldrb	r2, [r3, #4]
 80137b8:	4b44      	ldr	r3, [pc, #272]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 80137ba:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 80137be:	4b43      	ldr	r3, [pc, #268]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 80137c0:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 80137c4:	4b41      	ldr	r3, [pc, #260]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 80137c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 80137ca:	e070      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	685b      	ldr	r3, [r3, #4]
 80137d0:	4a3e      	ldr	r2, [pc, #248]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 80137d2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 80137d6:	e06a      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	685b      	ldr	r3, [r3, #4]
 80137dc:	4a3b      	ldr	r2, [pc, #236]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 80137de:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 80137e2:	e064      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80137e4:	f7fe fd38 	bl	8012258 <RestoreNvmData>
 80137e8:	4603      	mov	r3, r0
 80137ea:	75fb      	strb	r3, [r7, #23]
            break;
 80137ec:	e05f      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	799b      	ldrb	r3, [r3, #6]
 80137f2:	2b01      	cmp	r3, #1
 80137f4:	d80d      	bhi.n	8013812 <LoRaMacMibSetRequestConfirm+0x6a2>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80137f6:	4a35      	ldr	r2, [pc, #212]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	685b      	ldr	r3, [r3, #4]
 80137fc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6858      	ldr	r0, [r3, #4]
 8013804:	f001 fdd6 	bl	80153b4 <LoRaMacCryptoSetLrWanVersion>
 8013808:	4603      	mov	r3, r0
 801380a:	2b00      	cmp	r3, #0
 801380c:	d04e      	beq.n	80138ac <LoRaMacMibSetRequestConfirm+0x73c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801380e:	2311      	movs	r3, #17
 8013810:	e058      	b.n	80138c4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013812:	2303      	movs	r3, #3
 8013814:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013816:	e049      	b.n	80138ac <LoRaMacMibSetRequestConfirm+0x73c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	4a2b      	ldr	r2, [pc, #172]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 801381e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 8013822:	e044      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	791a      	ldrb	r2, [r3, #4]
 8013828:	4b28      	ldr	r3, [pc, #160]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 801382a:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 801382e:	e03e      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	889a      	ldrh	r2, [r3, #4]
 8013834:	4b25      	ldr	r3, [pc, #148]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 8013836:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 801383a:	e038      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	889a      	ldrh	r2, [r3, #4]
 8013840:	4b22      	ldr	r3, [pc, #136]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 8013842:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 8013846:	e032      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	889a      	ldrh	r2, [r3, #4]
 801384c:	4b1f      	ldr	r3, [pc, #124]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 801384e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 8013852:	e02c      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	889a      	ldrh	r2, [r3, #4]
 8013858:	4b1c      	ldr	r3, [pc, #112]	@ (80138cc <LoRaMacMibSetRequestConfirm+0x75c>)
 801385a:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 801385e:	e026      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013860:	2318      	movs	r3, #24
 8013862:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013864:	e023      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013866:	2318      	movs	r3, #24
 8013868:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801386a:	e020      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801386c:	6878      	ldr	r0, [r7, #4]
 801386e:	f000 fd00 	bl	8014272 <LoRaMacMibClassBSetRequestConfirm>
 8013872:	4603      	mov	r3, r0
 8013874:	75fb      	strb	r3, [r7, #23]
            break;
 8013876:	e01a      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013878:	bf00      	nop
 801387a:	e018      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801387c:	bf00      	nop
 801387e:	e016      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013880:	bf00      	nop
 8013882:	e014      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013884:	bf00      	nop
 8013886:	e012      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013888:	bf00      	nop
 801388a:	e010      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801388c:	bf00      	nop
 801388e:	e00e      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013890:	bf00      	nop
 8013892:	e00c      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013894:	bf00      	nop
 8013896:	e00a      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8013898:	bf00      	nop
 801389a:	e008      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801389c:	bf00      	nop
 801389e:	e006      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80138a0:	bf00      	nop
 80138a2:	e004      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80138a4:	bf00      	nop
 80138a6:	e002      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80138a8:	bf00      	nop
 80138aa:	e000      	b.n	80138ae <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 80138ac:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 80138ae:	7dfb      	ldrb	r3, [r7, #23]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d106      	bne.n	80138c2 <LoRaMacMibSetRequestConfirm+0x752>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80138b4:	4a06      	ldr	r2, [pc, #24]	@ (80138d0 <LoRaMacMibSetRequestConfirm+0x760>)
 80138b6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80138ba:	f043 0320 	orr.w	r3, r3, #32
 80138be:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 80138c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3718      	adds	r7, #24
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	20000dc4 	.word	0x20000dc4
 80138d0:	20000890 	.word	0x20000890

080138d4 <OnAbpJoinPendingTimerEvent>:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
/*!
 * \brief Function executed on AbpJoinPendingTimer timer event
 */
static void OnAbpJoinPendingTimerEvent( void *context )
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b082      	sub	sp, #8
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
    MacCtx.MacState &= ~LORAMAC_ABP_JOIN_PENDING;
 80138dc:	4b0a      	ldr	r3, [pc, #40]	@ (8013908 <OnAbpJoinPendingTimerEvent+0x34>)
 80138de:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80138e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80138e6:	4a08      	ldr	r2, [pc, #32]	@ (8013908 <OnAbpJoinPendingTimerEvent+0x34>)
 80138e8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    MacCtx.MacFlags.Bits.MacDone = 1;
 80138ec:	4a06      	ldr	r2, [pc, #24]	@ (8013908 <OnAbpJoinPendingTimerEvent+0x34>)
 80138ee:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80138f2:	f043 0310 	orr.w	r3, r3, #16
 80138f6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    OnMacProcessNotify( );
 80138fa:	f7fe fe5d 	bl	80125b8 <OnMacProcessNotify>
}
 80138fe:	bf00      	nop
 8013900:	3708      	adds	r7, #8
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}
 8013906:	bf00      	nop
 8013908:	20000890 	.word	0x20000890

0801390c <AbpJoinPendingStart>:

/*!
 * \brief Start ABP join simulation
 */
static void AbpJoinPendingStart( void )
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b082      	sub	sp, #8
 8013910:	af02      	add	r7, sp, #8
    static bool initialized = false;

    if( initialized == false )
 8013912:	4b14      	ldr	r3, [pc, #80]	@ (8013964 <AbpJoinPendingStart+0x58>)
 8013914:	781b      	ldrb	r3, [r3, #0]
 8013916:	f083 0301 	eor.w	r3, r3, #1
 801391a:	b2db      	uxtb	r3, r3
 801391c:	2b00      	cmp	r3, #0
 801391e:	d00b      	beq.n	8013938 <AbpJoinPendingStart+0x2c>
    {
        initialized = true;
 8013920:	4b10      	ldr	r3, [pc, #64]	@ (8013964 <AbpJoinPendingStart+0x58>)
 8013922:	2201      	movs	r2, #1
 8013924:	701a      	strb	r2, [r3, #0]
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
 8013926:	2300      	movs	r3, #0
 8013928:	9300      	str	r3, [sp, #0]
 801392a:	4b0f      	ldr	r3, [pc, #60]	@ (8013968 <AbpJoinPendingStart+0x5c>)
 801392c:	2200      	movs	r2, #0
 801392e:	f04f 31ff 	mov.w	r1, #4294967295
 8013932:	480e      	ldr	r0, [pc, #56]	@ (801396c <AbpJoinPendingStart+0x60>)
 8013934:	f008 fea2 	bl	801c67c <UTIL_TIMER_Create>
    }

    MacCtx.MacState |= LORAMAC_ABP_JOIN_PENDING;
 8013938:	4b0d      	ldr	r3, [pc, #52]	@ (8013970 <AbpJoinPendingStart+0x64>)
 801393a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801393e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013942:	4a0b      	ldr	r2, [pc, #44]	@ (8013970 <AbpJoinPendingStart+0x64>)
 8013944:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    TimerStop( &MacCtx.AbpJoinPendingTimer );
 8013948:	4808      	ldr	r0, [pc, #32]	@ (801396c <AbpJoinPendingStart+0x60>)
 801394a:	f008 ff3b 	bl	801c7c4 <UTIL_TIMER_Stop>
    TimerSetValue( &MacCtx.AbpJoinPendingTimer, ABP_JOIN_PENDING_DELAY_MS );
 801394e:	210a      	movs	r1, #10
 8013950:	4806      	ldr	r0, [pc, #24]	@ (801396c <AbpJoinPendingStart+0x60>)
 8013952:	f008 ffa7 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.AbpJoinPendingTimer );
 8013956:	4805      	ldr	r0, [pc, #20]	@ (801396c <AbpJoinPendingStart+0x60>)
 8013958:	f008 fec6 	bl	801c6e8 <UTIL_TIMER_Start>
}
 801395c:	bf00      	nop
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
 8013962:	bf00      	nop
 8013964:	200019e4 	.word	0x200019e4
 8013968:	080138d5 	.word	0x080138d5
 801396c:	20000d2c 	.word	0x20000d2c
 8013970:	20000890 	.word	0x20000890

08013974 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b08a      	sub	sp, #40	@ 0x28
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801397c:	2302      	movs	r3, #2
 801397e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
 8013982:	2300      	movs	r3, #0
 8013984:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013988:	2300      	movs	r3, #0
 801398a:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d101      	bne.n	8013996 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013992:	2303      	movs	r3, #3
 8013994:	e188      	b.n	8013ca8 <LoRaMacMlmeRequest+0x334>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2200      	movs	r2, #0
 801399a:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801399c:	f7fc fb14 	bl	800ffc8 <LoRaMacIsBusy>
 80139a0:	4603      	mov	r3, r0
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d001      	beq.n	80139aa <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80139a6:	2301      	movs	r3, #1
 80139a8:	e17e      	b.n	8013ca8 <LoRaMacMlmeRequest+0x334>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80139aa:	f001 f99d 	bl	8014ce8 <LoRaMacConfirmQueueIsFull>
 80139ae:	4603      	mov	r3, r0
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d001      	beq.n	80139b8 <LoRaMacMlmeRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 80139b4:	2301      	movs	r3, #1
 80139b6:	e177      	b.n	8013ca8 <LoRaMacMlmeRequest+0x334>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80139b8:	f001 f98a 	bl	8014cd0 <LoRaMacConfirmQueueGetCnt>
 80139bc:	4603      	mov	r3, r0
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d104      	bne.n	80139cc <LoRaMacMlmeRequest+0x58>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80139c2:	2214      	movs	r2, #20
 80139c4:	2100      	movs	r1, #0
 80139c6:	48ba      	ldr	r0, [pc, #744]	@ (8013cb0 <LoRaMacMlmeRequest+0x33c>)
 80139c8:	f004 fde4 	bl	8018594 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80139cc:	4bb9      	ldr	r3, [pc, #740]	@ (8013cb4 <LoRaMacMlmeRequest+0x340>)
 80139ce:	2201      	movs	r2, #1
 80139d0:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80139d4:	4ab7      	ldr	r2, [pc, #732]	@ (8013cb4 <LoRaMacMlmeRequest+0x340>)
 80139d6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80139da:	f043 0304 	orr.w	r3, r3, #4
 80139de:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80139ea:	2301      	movs	r3, #1
 80139ec:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 80139f0:	2300      	movs	r3, #0
 80139f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 80139f6:	2300      	movs	r3, #0
 80139f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	781b      	ldrb	r3, [r3, #0]
 8013a00:	3b01      	subs	r3, #1
 8013a02:	2b0c      	cmp	r3, #12
 8013a04:	f200 811e 	bhi.w	8013c44 <LoRaMacMlmeRequest+0x2d0>
 8013a08:	a201      	add	r2, pc, #4	@ (adr r2, 8013a10 <LoRaMacMlmeRequest+0x9c>)
 8013a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a0e:	bf00      	nop
 8013a10:	08013a45 	.word	0x08013a45
 8013a14:	08013c45 	.word	0x08013c45
 8013a18:	08013c45 	.word	0x08013c45
 8013a1c:	08013c45 	.word	0x08013c45
 8013a20:	08013b29 	.word	0x08013b29
 8013a24:	08013b4d 	.word	0x08013b4d
 8013a28:	08013c45 	.word	0x08013c45
 8013a2c:	08013c45 	.word	0x08013c45
 8013a30:	08013b6b 	.word	0x08013b6b
 8013a34:	08013c45 	.word	0x08013c45
 8013a38:	08013c13 	.word	0x08013c13
 8013a3c:	08013ba7 	.word	0x08013ba7
 8013a40:	08013bf1 	.word	0x08013bf1
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013a44:	4b9b      	ldr	r3, [pc, #620]	@ (8013cb4 <LoRaMacMlmeRequest+0x340>)
 8013a46:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013a4a:	f003 0320 	and.w	r3, r3, #32
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d001      	beq.n	8013a56 <LoRaMacMlmeRequest+0xe2>
            {
                return LORAMAC_STATUS_BUSY;
 8013a52:	2301      	movs	r3, #1
 8013a54:	e128      	b.n	8013ca8 <LoRaMacMlmeRequest+0x334>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	791b      	ldrb	r3, [r3, #4]
 8013a5a:	2b02      	cmp	r3, #2
 8013a5c:	d135      	bne.n	8013aca <LoRaMacMlmeRequest+0x156>
            {
                ResetMacParameters( false );
 8013a5e:	2000      	movs	r0, #0
 8013a60:	f7fe f85a 	bl	8011b18 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013a64:	4b94      	ldr	r3, [pc, #592]	@ (8013cb8 <LoRaMacMlmeRequest+0x344>)
 8013a66:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	795b      	ldrb	r3, [r3, #5]
 8013a6e:	b25b      	sxtb	r3, r3
 8013a70:	2200      	movs	r2, #0
 8013a72:	4619      	mov	r1, r3
 8013a74:	f002 fc4b 	bl	801630e <RegionAlternateDr>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	4b8e      	ldr	r3, [pc, #568]	@ (8013cb8 <LoRaMacMlmeRequest+0x344>)
 8013a7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8013a88:	4b8b      	ldr	r3, [pc, #556]	@ (8013cb8 <LoRaMacMlmeRequest+0x344>)
 8013a8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013a8e:	2307      	movs	r3, #7
 8013a90:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8013a94:	20ff      	movs	r0, #255	@ 0xff
 8013a96:	f7fd fdc3 	bl	8011620 <SendReJoinReq>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8013aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	f000 80cf 	beq.w	8013c48 <LoRaMacMlmeRequest+0x2d4>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013aaa:	4b83      	ldr	r3, [pc, #524]	@ (8013cb8 <LoRaMacMlmeRequest+0x344>)
 8013aac:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	795b      	ldrb	r3, [r3, #5]
 8013ab4:	b25b      	sxtb	r3, r3
 8013ab6:	2201      	movs	r2, #1
 8013ab8:	4619      	mov	r1, r3
 8013aba:	f002 fc28 	bl	801630e <RegionAlternateDr>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	461a      	mov	r2, r3
 8013ac2:	4b7d      	ldr	r3, [pc, #500]	@ (8013cb8 <LoRaMacMlmeRequest+0x344>)
 8013ac4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                isAbpJoinPending = true;
#endif
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8013ac8:	e0be      	b.n	8013c48 <LoRaMacMlmeRequest+0x2d4>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	791b      	ldrb	r3, [r3, #4]
 8013ace:	2b01      	cmp	r3, #1
 8013ad0:	f040 80ba 	bne.w	8013c48 <LoRaMacMlmeRequest+0x2d4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8013ad4:	4b78      	ldr	r3, [pc, #480]	@ (8013cb8 <LoRaMacMlmeRequest+0x344>)
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013adc:	2302      	movs	r3, #2
 8013ade:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013ae0:	4b75      	ldr	r3, [pc, #468]	@ (8013cb8 <LoRaMacMlmeRequest+0x344>)
 8013ae2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013ae6:	f107 020c 	add.w	r2, r7, #12
 8013aea:	4611      	mov	r1, r2
 8013aec:	4618      	mov	r0, r3
 8013aee:	f002 fb14 	bl	801611a <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	791a      	ldrb	r2, [r3, #4]
 8013af6:	4b70      	ldr	r3, [pc, #448]	@ (8013cb8 <LoRaMacMlmeRequest+0x344>)
 8013af8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8013afc:	2300      	movs	r3, #0
 8013afe:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 8013b02:	2301      	movs	r3, #1
 8013b04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 8013b08:	f7fe fd56 	bl	80125b8 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8013b0c:	4a69      	ldr	r2, [pc, #420]	@ (8013cb4 <LoRaMacMlmeRequest+0x340>)
 8013b0e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013b12:	f043 0310 	orr.w	r3, r3, #16
 8013b16:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                isAbpJoinPending = true;
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                status = LORAMAC_STATUS_OK;
 8013b20:	2300      	movs	r3, #0
 8013b22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013b26:	e08f      	b.n	8013c48 <LoRaMacMlmeRequest+0x2d4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013b2e:	f107 031c 	add.w	r3, r7, #28
 8013b32:	2200      	movs	r2, #0
 8013b34:	4619      	mov	r1, r3
 8013b36:	2002      	movs	r0, #2
 8013b38:	f000 fd26 	bl	8014588 <LoRaMacCommandsAddCmd>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	f000 8084 	beq.w	8013c4c <LoRaMacMlmeRequest+0x2d8>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b44:	2313      	movs	r3, #19
 8013b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8013b4a:	e07f      	b.n	8013c4c <LoRaMacMlmeRequest+0x2d8>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	8898      	ldrh	r0, [r3, #4]
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	6899      	ldr	r1, [r3, #8]
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8013b5a:	b2db      	uxtb	r3, r3
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	f7fe fb5b 	bl	8012218 <SetTxContinuousWave>
 8013b62:	4603      	mov	r3, r0
 8013b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013b68:	e077      	b.n	8013c5a <LoRaMacMlmeRequest+0x2e6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8013b70:	f107 0308 	add.w	r3, r7, #8
 8013b74:	4619      	mov	r1, r3
 8013b76:	200d      	movs	r0, #13
 8013b78:	f000 fd86 	bl	8014688 <LoRaMacCommandsGetCmd>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d103      	bne.n	8013b8a <LoRaMacMlmeRequest+0x216>
            {
                status = LORAMAC_STATUS_OK;
 8013b82:	2300      	movs	r3, #0
 8013b84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8013b88:	e062      	b.n	8013c50 <LoRaMacMlmeRequest+0x2dc>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013b8a:	f107 031c 	add.w	r3, r7, #28
 8013b8e:	2200      	movs	r2, #0
 8013b90:	4619      	mov	r1, r3
 8013b92:	200d      	movs	r0, #13
 8013b94:	f000 fcf8 	bl	8014588 <LoRaMacCommandsAddCmd>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d058      	beq.n	8013c50 <LoRaMacMlmeRequest+0x2dc>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b9e:	2313      	movs	r3, #19
 8013ba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013ba4:	e054      	b.n	8013c50 <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013ba6:	4b44      	ldr	r3, [pc, #272]	@ (8013cb8 <LoRaMacMlmeRequest+0x344>)
 8013ba8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d151      	bne.n	8013c54 <LoRaMacMlmeRequest+0x2e0>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	791b      	ldrb	r3, [r3, #4]
 8013bb4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	791b      	ldrb	r3, [r3, #4]
 8013bbc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013bc0:	b2db      	uxtb	r3, r3
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f000 fb2a 	bl	801421c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8013bc8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013bcc:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8013bd4:	f107 031c 	add.w	r3, r7, #28
 8013bd8:	2201      	movs	r2, #1
 8013bda:	4619      	mov	r1, r3
 8013bdc:	2010      	movs	r0, #16
 8013bde:	f000 fcd3 	bl	8014588 <LoRaMacCommandsAddCmd>
 8013be2:	4603      	mov	r3, r0
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d035      	beq.n	8013c54 <LoRaMacMlmeRequest+0x2e0>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013be8:	2313      	movs	r3, #19
 8013bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 8013bee:	e031      	b.n	8013c54 <LoRaMacMlmeRequest+0x2e0>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013bf6:	f107 031c 	add.w	r3, r7, #28
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	4619      	mov	r1, r3
 8013bfe:	2012      	movs	r0, #18
 8013c00:	f000 fcc2 	bl	8014588 <LoRaMacCommandsAddCmd>
 8013c04:	4603      	mov	r3, r0
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d026      	beq.n	8013c58 <LoRaMacMlmeRequest+0x2e4>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013c0a:	2313      	movs	r3, #19
 8013c0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8013c10:	e022      	b.n	8013c58 <LoRaMacMlmeRequest+0x2e4>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8013c12:	2301      	movs	r3, #1
 8013c14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013c18:	f000 fab6 	bl	8014188 <LoRaMacClassBIsAcquisitionInProgress>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	f083 0301 	eor.w	r3, r3, #1
 8013c22:	b2db      	uxtb	r3, r3
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d009      	beq.n	8013c3c <LoRaMacMlmeRequest+0x2c8>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013c28:	2000      	movs	r0, #0
 8013c2a:	f000 fa8f 	bl	801414c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013c2e:	2000      	movs	r0, #0
 8013c30:	f000 fab1 	bl	8014196 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013c34:	2300      	movs	r3, #0
 8013c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013c3a:	e00e      	b.n	8013c5a <LoRaMacMlmeRequest+0x2e6>
                status = LORAMAC_STATUS_BUSY;
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013c42:	e00a      	b.n	8013c5a <LoRaMacMlmeRequest+0x2e6>
        }
        default:
            break;
 8013c44:	bf00      	nop
 8013c46:	e008      	b.n	8013c5a <LoRaMacMlmeRequest+0x2e6>
            break;
 8013c48:	bf00      	nop
 8013c4a:	e006      	b.n	8013c5a <LoRaMacMlmeRequest+0x2e6>
            break;
 8013c4c:	bf00      	nop
 8013c4e:	e004      	b.n	8013c5a <LoRaMacMlmeRequest+0x2e6>
            break;
 8013c50:	bf00      	nop
 8013c52:	e002      	b.n	8013c5a <LoRaMacMlmeRequest+0x2e6>
            break;
 8013c54:	bf00      	nop
 8013c56:	e000      	b.n	8013c5a <LoRaMacMlmeRequest+0x2e6>
            break;
 8013c58:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013c5a:	4b16      	ldr	r3, [pc, #88]	@ (8013cb4 <LoRaMacMlmeRequest+0x340>)
 8013c5c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8013c64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d010      	beq.n	8013c8e <LoRaMacMlmeRequest+0x31a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013c6c:	f001 f830 	bl	8014cd0 <LoRaMacConfirmQueueGetCnt>
 8013c70:	4603      	mov	r3, r0
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d116      	bne.n	8013ca4 <LoRaMacMlmeRequest+0x330>
        {
            MacCtx.NodeAckRequested = false;
 8013c76:	4b0f      	ldr	r3, [pc, #60]	@ (8013cb4 <LoRaMacMlmeRequest+0x340>)
 8013c78:	2200      	movs	r2, #0
 8013c7a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8013cb4 <LoRaMacMlmeRequest+0x340>)
 8013c80:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013c84:	f023 0304 	bic.w	r3, r3, #4
 8013c88:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8013c8c:	e00a      	b.n	8013ca4 <LoRaMacMlmeRequest+0x330>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8013c8e:	f107 0320 	add.w	r3, r7, #32
 8013c92:	4618      	mov	r0, r3
 8013c94:	f000 fec8 	bl	8014a28 <LoRaMacConfirmQueueAdd>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        if( isAbpJoinPending == true )
 8013c98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d001      	beq.n	8013ca4 <LoRaMacMlmeRequest+0x330>
        {
            AbpJoinPendingStart( );
 8013ca0:	f7ff fe34 	bl	801390c <AbpJoinPendingStart>
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
 8013ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8013ca8:	4618      	mov	r0, r3
 8013caa:	3728      	adds	r7, #40	@ 0x28
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}
 8013cb0:	20000ce4 	.word	0x20000ce4
 8013cb4:	20000890 	.word	0x20000890
 8013cb8:	20000dc4 	.word	0x20000dc4

08013cbc <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8013cbc:	b5b0      	push	{r4, r5, r7, lr}
 8013cbe:	b092      	sub	sp, #72	@ 0x48
 8013cc0:	af02      	add	r7, sp, #8
 8013cc2:	6078      	str	r0, [r7, #4]
 8013cc4:	460b      	mov	r3, r1
 8013cc6:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013cc8:	2302      	movs	r3, #2
 8013cca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d101      	bne.n	8013cee <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013cea:	2303      	movs	r3, #3
 8013cec:	e113      	b.n	8013f16 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8013cf4:	f7fc f968 	bl	800ffc8 <LoRaMacIsBusy>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d001      	beq.n	8013d02 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8013cfe:	2301      	movs	r3, #1
 8013d00:	e109      	b.n	8013f16 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f107 040c 	add.w	r4, r7, #12
 8013d08:	461d      	mov	r5, r3
 8013d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d0e:	682b      	ldr	r3, [r5, #0]
 8013d10:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8013d12:	2300      	movs	r3, #0
 8013d14:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8013d18:	2214      	movs	r2, #20
 8013d1a:	2100      	movs	r1, #0
 8013d1c:	4880      	ldr	r0, [pc, #512]	@ (8013f20 <LoRaMacMcpsRequest+0x264>)
 8013d1e:	f004 fc39 	bl	8018594 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013d22:	4b80      	ldr	r3, [pc, #512]	@ (8013f24 <LoRaMacMcpsRequest+0x268>)
 8013d24:	2201      	movs	r2, #1
 8013d26:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8013d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013d2c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8013d30:	2b02      	cmp	r3, #2
 8013d32:	d111      	bne.n	8013d58 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013d34:	4b7c      	ldr	r3, [pc, #496]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013d36:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8013d3a:	2b02      	cmp	r3, #2
 8013d3c:	d10c      	bne.n	8013d58 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013d3e:	4b7a      	ldr	r3, [pc, #488]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013d40:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8013d44:	f083 0301 	eor.w	r3, r3, #1
 8013d48:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d004      	beq.n	8013d58 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8013d4e:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d101      	bne.n	8013d58 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8013d54:	2301      	movs	r3, #1
 8013d56:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8013d58:	7b3b      	ldrb	r3, [r7, #12]
 8013d5a:	2b03      	cmp	r3, #3
 8013d5c:	d030      	beq.n	8013dc0 <LoRaMacMcpsRequest+0x104>
 8013d5e:	2b03      	cmp	r3, #3
 8013d60:	dc3f      	bgt.n	8013de2 <LoRaMacMcpsRequest+0x126>
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d002      	beq.n	8013d6c <LoRaMacMcpsRequest+0xb0>
 8013d66:	2b01      	cmp	r3, #1
 8013d68:	d015      	beq.n	8013d96 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8013d6a:	e03a      	b.n	8013de2 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013d72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013d76:	2202      	movs	r2, #2
 8013d78:	f362 1347 	bfi	r3, r2, #5, #3
 8013d7c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8013d80:	7c3b      	ldrb	r3, [r7, #16]
 8013d82:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8013d8a:	8b3b      	ldrh	r3, [r7, #24]
 8013d8c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8013d8e:	7ebb      	ldrb	r3, [r7, #26]
 8013d90:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8013d94:	e026      	b.n	8013de4 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8013d96:	2301      	movs	r3, #1
 8013d98:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8013d9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013da0:	2204      	movs	r2, #4
 8013da2:	f362 1347 	bfi	r3, r2, #5, #3
 8013da6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8013daa:	7c3b      	ldrb	r3, [r7, #16]
 8013dac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8013db0:	697b      	ldr	r3, [r7, #20]
 8013db2:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8013db4:	8b3b      	ldrh	r3, [r7, #24]
 8013db6:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8013db8:	7ebb      	ldrb	r3, [r7, #26]
 8013dba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8013dbe:	e011      	b.n	8013de4 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8013dc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013dca:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8013dce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8013dd6:	8abb      	ldrh	r3, [r7, #20]
 8013dd8:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 8013dda:	7dbb      	ldrb	r3, [r7, #22]
 8013ddc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8013de0:	e000      	b.n	8013de4 <LoRaMacMcpsRequest+0x128>
            break;
 8013de2:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013de4:	2302      	movs	r3, #2
 8013de6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013dea:	4b4f      	ldr	r3, [pc, #316]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013dec:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8013df0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013df4:	4b4c      	ldr	r3, [pc, #304]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013df6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013dfa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013dfe:	4611      	mov	r1, r2
 8013e00:	4618      	mov	r0, r3
 8013e02:	f002 f961 	bl	80160c8 <RegionGetPhyParam>
 8013e06:	4603      	mov	r3, r0
 8013e08:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8013e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e0c:	b25b      	sxtb	r3, r3
 8013e0e:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 8013e12:	4293      	cmp	r3, r2
 8013e14:	bfb8      	it	lt
 8013e16:	4613      	movlt	r3, r2
 8013e18:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013e1c:	4b42      	ldr	r3, [pc, #264]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013e1e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8013e22:	4a41      	ldr	r2, [pc, #260]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013e24:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8013e28:	4a3f      	ldr	r2, [pc, #252]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013e2a:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7fc fa66 	bl	8010300 <CheckForMinimumAbpDatarate>
 8013e34:	4603      	mov	r3, r0
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d002      	beq.n	8013e40 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8013e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e3c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8013e40:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d05f      	beq.n	8013f08 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013e48:	4b37      	ldr	r3, [pc, #220]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013e4a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8013e4e:	f083 0301 	eor.w	r3, r3, #1
 8013e52:	b2db      	uxtb	r3, r3
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d10e      	bne.n	8013e76 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013e58:	4b33      	ldr	r3, [pc, #204]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013e5a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8013e5e:	4a32      	ldr	r2, [pc, #200]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013e60:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8013e64:	4a30      	ldr	r2, [pc, #192]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013e66:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7fc fa48 	bl	8010300 <CheckForMinimumAbpDatarate>
 8013e70:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d01c      	beq.n	8013eb0 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8013e76:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013e7a:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013e80:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8013e84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013e88:	4b27      	ldr	r3, [pc, #156]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013e8a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013e8e:	f107 0120 	add.w	r1, r7, #32
 8013e92:	2205      	movs	r2, #5
 8013e94:	4618      	mov	r0, r3
 8013e96:	f002 f952 	bl	801613e <RegionVerify>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d005      	beq.n	8013eac <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013ea0:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8013ea4:	4b20      	ldr	r3, [pc, #128]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013ea6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8013eaa:	e001      	b.n	8013eb0 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013eac:	2303      	movs	r3, #3
 8013eae:	e032      	b.n	8013f16 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8013eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8013f28 <LoRaMacMcpsRequest+0x26c>)
 8013eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8013f24 <LoRaMacMcpsRequest+0x268>)
 8013eb8:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8013ebc:	4611      	mov	r1, r2
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fc fb0a 	bl	80104d8 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8013ec4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013ec6:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8013eca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8013ece:	78fb      	ldrb	r3, [r7, #3]
 8013ed0:	9300      	str	r3, [sp, #0]
 8013ed2:	4613      	mov	r3, r2
 8013ed4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013ed6:	f7fd fac1 	bl	801145c <Send>
 8013eda:	4603      	mov	r3, r0
 8013edc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 8013ee0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d10b      	bne.n	8013f00 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8013ee8:	7b3a      	ldrb	r2, [r7, #12]
 8013eea:	4b0e      	ldr	r3, [pc, #56]	@ (8013f24 <LoRaMacMcpsRequest+0x268>)
 8013eec:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8013f24 <LoRaMacMcpsRequest+0x268>)
 8013ef2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013ef6:	f043 0301 	orr.w	r3, r3, #1
 8013efa:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8013efe:	e003      	b.n	8013f08 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013f00:	4b08      	ldr	r3, [pc, #32]	@ (8013f24 <LoRaMacMcpsRequest+0x268>)
 8013f02:	2200      	movs	r2, #0
 8013f04:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013f08:	4b06      	ldr	r3, [pc, #24]	@ (8013f24 <LoRaMacMcpsRequest+0x268>)
 8013f0a:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	611a      	str	r2, [r3, #16]

    return status;
 8013f12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	3740      	adds	r7, #64	@ 0x40
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	20000cd0 	.word	0x20000cd0
 8013f24:	20000890 	.word	0x20000890
 8013f28:	20000dc4 	.word	0x20000dc4

08013f2c <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b084      	sub	sp, #16
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	4603      	mov	r3, r0
 8013f34:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013f36:	79fb      	ldrb	r3, [r7, #7]
 8013f38:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8013f70 <LoRaMacTestSetDutyCycleOn+0x44>)
 8013f3c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013f40:	f107 010c 	add.w	r1, r7, #12
 8013f44:	220f      	movs	r2, #15
 8013f46:	4618      	mov	r0, r3
 8013f48:	f002 f8f9 	bl	801613e <RegionVerify>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d00a      	beq.n	8013f68 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013f52:	4a07      	ldr	r2, [pc, #28]	@ (8013f70 <LoRaMacTestSetDutyCycleOn+0x44>)
 8013f54:	79fb      	ldrb	r3, [r7, #7]
 8013f56:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013f5a:	4a06      	ldr	r2, [pc, #24]	@ (8013f74 <LoRaMacTestSetDutyCycleOn+0x48>)
 8013f5c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013f60:	f043 0320 	orr.w	r3, r3, #32
 8013f64:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8013f68:	bf00      	nop
 8013f6a:	3710      	adds	r7, #16
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}
 8013f70:	20000dc4 	.word	0x20000dc4
 8013f74:	20000890 	.word	0x20000890

08013f78 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013f7c:	f7fe fe30 	bl	8012be0 <LoRaMacStop>
 8013f80:	4603      	mov	r3, r0
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d112      	bne.n	8013fac <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8013f86:	480b      	ldr	r0, [pc, #44]	@ (8013fb4 <LoRaMacDeInitialization+0x3c>)
 8013f88:	f008 fc1c 	bl	801c7c4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013f8c:	480a      	ldr	r0, [pc, #40]	@ (8013fb8 <LoRaMacDeInitialization+0x40>)
 8013f8e:	f008 fc19 	bl	801c7c4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8013f92:	480a      	ldr	r0, [pc, #40]	@ (8013fbc <LoRaMacDeInitialization+0x44>)
 8013f94:	f008 fc16 	bl	801c7c4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8013f98:	f000 f94a 	bl	8014230 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8013f9c:	2000      	movs	r0, #0
 8013f9e:	f7fd fdbb 	bl	8011b18 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8013fa2:	4b07      	ldr	r3, [pc, #28]	@ (8013fc0 <LoRaMacDeInitialization+0x48>)
 8013fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fa6:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8013fa8:	2300      	movs	r3, #0
 8013faa:	e000      	b.n	8013fae <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8013fac:	2301      	movs	r3, #1
    }
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	bd80      	pop	{r7, pc}
 8013fb2:	bf00      	nop
 8013fb4:	20000bf8 	.word	0x20000bf8
 8013fb8:	20000c10 	.word	0x20000c10
 8013fbc:	20000c28 	.word	0x20000c28
 8013fc0:	0801e044 	.word	0x0801e044

08013fc4 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b08c      	sub	sp, #48	@ 0x30
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	607a      	str	r2, [r7, #4]
 8013fd0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	7b1b      	ldrb	r3, [r3, #12]
 8013fdc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	7b5b      	ldrb	r3, [r3, #13]
 8013fe4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	7b9b      	ldrb	r3, [r3, #14]
 8013fec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	685a      	ldr	r2, [r3, #4]
 8013ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ff6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	785b      	ldrb	r3, [r3, #1]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	f000 8088 	beq.w	8014112 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8014002:	2302      	movs	r3, #2
 8014004:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	7bdb      	ldrb	r3, [r3, #15]
 801400c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	7c1b      	ldrb	r3, [r3, #16]
 8014014:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014018:	4611      	mov	r1, r2
 801401a:	4618      	mov	r0, r3
 801401c:	f002 f854 	bl	80160c8 <RegionGetPhyParam>
 8014020:	4603      	mov	r3, r0
 8014022:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8014024:	6a3b      	ldr	r3, [r7, #32]
 8014026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 801402a:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 801402e:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8014032:	4293      	cmp	r3, r2
 8014034:	bfb8      	it	lt
 8014036:	4613      	movlt	r3, r2
 8014038:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	685b      	ldr	r3, [r3, #4]
 8014040:	68fa      	ldr	r2, [r7, #12]
 8014042:	8912      	ldrh	r2, [r2, #8]
 8014044:	4293      	cmp	r3, r2
 8014046:	d302      	bcc.n	801404e <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8014048:	2301      	movs	r3, #1
 801404a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	685b      	ldr	r3, [r3, #4]
 8014052:	68fa      	ldr	r2, [r7, #12]
 8014054:	8912      	ldrh	r2, [r2, #8]
 8014056:	4611      	mov	r1, r2
 8014058:	68fa      	ldr	r2, [r7, #12]
 801405a:	8952      	ldrh	r2, [r2, #10]
 801405c:	440a      	add	r2, r1
 801405e:	4293      	cmp	r3, r2
 8014060:	d30f      	bcc.n	8014082 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8014062:	230a      	movs	r3, #10
 8014064:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	7c1b      	ldrb	r3, [r3, #16]
 801406c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014070:	4611      	mov	r1, r2
 8014072:	4618      	mov	r0, r3
 8014074:	f002 f828 	bl	80160c8 <RegionGetPhyParam>
 8014078:	4603      	mov	r3, r0
 801407a:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 801407c:	6a3b      	ldr	r3, [r7, #32]
 801407e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	685b      	ldr	r3, [r3, #4]
 8014086:	68fa      	ldr	r2, [r7, #12]
 8014088:	8912      	ldrh	r2, [r2, #8]
 801408a:	4611      	mov	r1, r2
 801408c:	68fa      	ldr	r2, [r7, #12]
 801408e:	8952      	ldrh	r2, [r2, #10]
 8014090:	0052      	lsls	r2, r2, #1
 8014092:	440a      	add	r2, r1
 8014094:	4293      	cmp	r3, r2
 8014096:	d33c      	bcc.n	8014112 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	685b      	ldr	r3, [r3, #4]
 801409c:	68fa      	ldr	r2, [r7, #12]
 801409e:	8912      	ldrh	r2, [r2, #8]
 80140a0:	1a9b      	subs	r3, r3, r2
 80140a2:	68fa      	ldr	r2, [r7, #12]
 80140a4:	8952      	ldrh	r2, [r2, #10]
 80140a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80140aa:	fb01 f202 	mul.w	r2, r1, r2
 80140ae:	1a9b      	subs	r3, r3, r2
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d12e      	bne.n	8014112 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 80140b4:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 80140b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80140bc:	429a      	cmp	r2, r3
 80140be:	d110      	bne.n	80140e2 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d009      	beq.n	80140dc <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80140c8:	2302      	movs	r3, #2
 80140ca:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	7c1b      	ldrb	r3, [r3, #16]
 80140d0:	f107 0210 	add.w	r2, r7, #16
 80140d4:	4611      	mov	r1, r2
 80140d6:	4618      	mov	r0, r3
 80140d8:	f002 f81f 	bl	801611a <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 80140dc:	2301      	movs	r3, #1
 80140de:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80140e2:	2321      	movs	r3, #33	@ 0x21
 80140e4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 80140e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80140ec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	7bdb      	ldrb	r3, [r3, #15]
 80140f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	7c1b      	ldrb	r3, [r3, #16]
 80140fc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014100:	4611      	mov	r1, r2
 8014102:	4618      	mov	r0, r3
 8014104:	f001 ffe0 	bl	80160c8 <RegionGetPhyParam>
 8014108:	4603      	mov	r3, r0
 801410a:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 801410c:	6a3b      	ldr	r3, [r7, #32]
 801410e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8014118:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8014120:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014128:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801412a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801412e:	4618      	mov	r0, r3
 8014130:	3730      	adds	r7, #48	@ 0x30
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}

08014136 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8014136:	b480      	push	{r7}
 8014138:	b085      	sub	sp, #20
 801413a:	af00      	add	r7, sp, #0
 801413c:	60f8      	str	r0, [r7, #12]
 801413e:	60b9      	str	r1, [r7, #8]
 8014140:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014142:	bf00      	nop
 8014144:	3714      	adds	r7, #20
 8014146:	46bd      	mov	sp, r7
 8014148:	bc80      	pop	{r7}
 801414a:	4770      	bx	lr

0801414c <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801414c:	b480      	push	{r7}
 801414e:	b083      	sub	sp, #12
 8014150:	af00      	add	r7, sp, #0
 8014152:	4603      	mov	r3, r0
 8014154:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014156:	bf00      	nop
 8014158:	370c      	adds	r7, #12
 801415a:	46bd      	mov	sp, r7
 801415c:	bc80      	pop	{r7}
 801415e:	4770      	bx	lr

08014160 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014160:	b480      	push	{r7}
 8014162:	b083      	sub	sp, #12
 8014164:	af00      	add	r7, sp, #0
 8014166:	4603      	mov	r3, r0
 8014168:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801416a:	bf00      	nop
 801416c:	370c      	adds	r7, #12
 801416e:	46bd      	mov	sp, r7
 8014170:	bc80      	pop	{r7}
 8014172:	4770      	bx	lr

08014174 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014174:	b480      	push	{r7}
 8014176:	b083      	sub	sp, #12
 8014178:	af00      	add	r7, sp, #0
 801417a:	4603      	mov	r3, r0
 801417c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801417e:	bf00      	nop
 8014180:	370c      	adds	r7, #12
 8014182:	46bd      	mov	sp, r7
 8014184:	bc80      	pop	{r7}
 8014186:	4770      	bx	lr

08014188 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014188:	b480      	push	{r7}
 801418a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801418c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801418e:	4618      	mov	r0, r3
 8014190:	46bd      	mov	sp, r7
 8014192:	bc80      	pop	{r7}
 8014194:	4770      	bx	lr

08014196 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014196:	b480      	push	{r7}
 8014198:	b083      	sub	sp, #12
 801419a:	af00      	add	r7, sp, #0
 801419c:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801419e:	bf00      	nop
 80141a0:	370c      	adds	r7, #12
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bc80      	pop	{r7}
 80141a6:	4770      	bx	lr

080141a8 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80141a8:	b480      	push	{r7}
 80141aa:	b083      	sub	sp, #12
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141b0:	bf00      	nop
 80141b2:	370c      	adds	r7, #12
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bc80      	pop	{r7}
 80141b8:	4770      	bx	lr

080141ba <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80141ba:	b480      	push	{r7}
 80141bc:	b083      	sub	sp, #12
 80141be:	af00      	add	r7, sp, #0
 80141c0:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141c2:	bf00      	nop
 80141c4:	370c      	adds	r7, #12
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bc80      	pop	{r7}
 80141ca:	4770      	bx	lr

080141cc <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80141cc:	b480      	push	{r7}
 80141ce:	b083      	sub	sp, #12
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
 80141d4:	460b      	mov	r3, r1
 80141d6:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80141d8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141da:	4618      	mov	r0, r3
 80141dc:	370c      	adds	r7, #12
 80141de:	46bd      	mov	sp, r7
 80141e0:	bc80      	pop	{r7}
 80141e2:	4770      	bx	lr

080141e4 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80141e4:	b480      	push	{r7}
 80141e6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80141e8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bc80      	pop	{r7}
 80141f0:	4770      	bx	lr

080141f2 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80141f2:	b480      	push	{r7}
 80141f4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80141f6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80141f8:	4618      	mov	r0, r3
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bc80      	pop	{r7}
 80141fe:	4770      	bx	lr

08014200 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8014200:	b480      	push	{r7}
 8014202:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014204:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014206:	4618      	mov	r0, r3
 8014208:	46bd      	mov	sp, r7
 801420a:	bc80      	pop	{r7}
 801420c:	4770      	bx	lr

0801420e <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801420e:	b480      	push	{r7}
 8014210:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014212:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014214:	4618      	mov	r0, r3
 8014216:	46bd      	mov	sp, r7
 8014218:	bc80      	pop	{r7}
 801421a:	4770      	bx	lr

0801421c <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801421c:	b480      	push	{r7}
 801421e:	b083      	sub	sp, #12
 8014220:	af00      	add	r7, sp, #0
 8014222:	4603      	mov	r3, r0
 8014224:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014226:	bf00      	nop
 8014228:	370c      	adds	r7, #12
 801422a:	46bd      	mov	sp, r7
 801422c:	bc80      	pop	{r7}
 801422e:	4770      	bx	lr

08014230 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8014230:	b480      	push	{r7}
 8014232:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014234:	bf00      	nop
 8014236:	46bd      	mov	sp, r7
 8014238:	bc80      	pop	{r7}
 801423a:	4770      	bx	lr

0801423c <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801423c:	b480      	push	{r7}
 801423e:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014240:	bf00      	nop
 8014242:	46bd      	mov	sp, r7
 8014244:	bc80      	pop	{r7}
 8014246:	4770      	bx	lr

08014248 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014248:	b480      	push	{r7}
 801424a:	b083      	sub	sp, #12
 801424c:	af00      	add	r7, sp, #0
 801424e:	4603      	mov	r3, r0
 8014250:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014252:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014254:	4618      	mov	r0, r3
 8014256:	370c      	adds	r7, #12
 8014258:	46bd      	mov	sp, r7
 801425a:	bc80      	pop	{r7}
 801425c:	4770      	bx	lr

0801425e <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801425e:	b480      	push	{r7}
 8014260:	b083      	sub	sp, #12
 8014262:	af00      	add	r7, sp, #0
 8014264:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014266:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014268:	4618      	mov	r0, r3
 801426a:	370c      	adds	r7, #12
 801426c:	46bd      	mov	sp, r7
 801426e:	bc80      	pop	{r7}
 8014270:	4770      	bx	lr

08014272 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014272:	b480      	push	{r7}
 8014274:	b083      	sub	sp, #12
 8014276:	af00      	add	r7, sp, #0
 8014278:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801427a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801427c:	4618      	mov	r0, r3
 801427e:	370c      	adds	r7, #12
 8014280:	46bd      	mov	sp, r7
 8014282:	bc80      	pop	{r7}
 8014284:	4770      	bx	lr

08014286 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014286:	b480      	push	{r7}
 8014288:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801428a:	bf00      	nop
 801428c:	46bd      	mov	sp, r7
 801428e:	bc80      	pop	{r7}
 8014290:	4770      	bx	lr

08014292 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014292:	b480      	push	{r7}
 8014294:	b083      	sub	sp, #12
 8014296:	af00      	add	r7, sp, #0
 8014298:	4603      	mov	r3, r0
 801429a:	6039      	str	r1, [r7, #0]
 801429c:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801429e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	370c      	adds	r7, #12
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bc80      	pop	{r7}
 80142a8:	4770      	bx	lr

080142aa <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80142aa:	b480      	push	{r7}
 80142ac:	b083      	sub	sp, #12
 80142ae:	af00      	add	r7, sp, #0
 80142b0:	4603      	mov	r3, r0
 80142b2:	603a      	str	r2, [r7, #0]
 80142b4:	80fb      	strh	r3, [r7, #6]
 80142b6:	460b      	mov	r3, r1
 80142b8:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80142ba:	bf00      	nop
 80142bc:	370c      	adds	r7, #12
 80142be:	46bd      	mov	sp, r7
 80142c0:	bc80      	pop	{r7}
 80142c2:	4770      	bx	lr

080142c4 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80142c4:	b480      	push	{r7}
 80142c6:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80142c8:	bf00      	nop
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bc80      	pop	{r7}
 80142ce:	4770      	bx	lr

080142d0 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80142d0:	b480      	push	{r7}
 80142d2:	b083      	sub	sp, #12
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80142d8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80142da:	4618      	mov	r0, r3
 80142dc:	370c      	adds	r7, #12
 80142de:	46bd      	mov	sp, r7
 80142e0:	bc80      	pop	{r7}
 80142e2:	4770      	bx	lr

080142e4 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80142e4:	b480      	push	{r7}
 80142e6:	b083      	sub	sp, #12
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80142ec:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	370c      	adds	r7, #12
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bc80      	pop	{r7}
 80142f6:	4770      	bx	lr

080142f8 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80142f8:	b480      	push	{r7}
 80142fa:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80142fc:	bf00      	nop
 80142fe:	46bd      	mov	sp, r7
 8014300:	bc80      	pop	{r7}
 8014302:	4770      	bx	lr

08014304 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8014304:	b480      	push	{r7}
 8014306:	b083      	sub	sp, #12
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	460b      	mov	r3, r1
 801430e:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014310:	bf00      	nop
 8014312:	370c      	adds	r7, #12
 8014314:	46bd      	mov	sp, r7
 8014316:	bc80      	pop	{r7}
 8014318:	4770      	bx	lr

0801431a <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801431a:	b480      	push	{r7}
 801431c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801431e:	bf00      	nop
 8014320:	46bd      	mov	sp, r7
 8014322:	bc80      	pop	{r7}
 8014324:	4770      	bx	lr

08014326 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8014326:	b480      	push	{r7}
 8014328:	b085      	sub	sp, #20
 801432a:	af00      	add	r7, sp, #0
 801432c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014332:	2300      	movs	r3, #0
 8014334:	81fb      	strh	r3, [r7, #14]
 8014336:	e00a      	b.n	801434e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8014338:	89fb      	ldrh	r3, [r7, #14]
 801433a:	68ba      	ldr	r2, [r7, #8]
 801433c:	4413      	add	r3, r2
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d001      	beq.n	8014348 <IsSlotFree+0x22>
        {
            return false;
 8014344:	2300      	movs	r3, #0
 8014346:	e006      	b.n	8014356 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014348:	89fb      	ldrh	r3, [r7, #14]
 801434a:	3301      	adds	r3, #1
 801434c:	81fb      	strh	r3, [r7, #14]
 801434e:	89fb      	ldrh	r3, [r7, #14]
 8014350:	2b0f      	cmp	r3, #15
 8014352:	d9f1      	bls.n	8014338 <IsSlotFree+0x12>
        }
    }
    return true;
 8014354:	2301      	movs	r3, #1
}
 8014356:	4618      	mov	r0, r3
 8014358:	3714      	adds	r7, #20
 801435a:	46bd      	mov	sp, r7
 801435c:	bc80      	pop	{r7}
 801435e:	4770      	bx	lr

08014360 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8014366:	2300      	movs	r3, #0
 8014368:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801436a:	e007      	b.n	801437c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801436c:	79fb      	ldrb	r3, [r7, #7]
 801436e:	3301      	adds	r3, #1
 8014370:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8014372:	79fb      	ldrb	r3, [r7, #7]
 8014374:	2b20      	cmp	r3, #32
 8014376:	d101      	bne.n	801437c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8014378:	2300      	movs	r3, #0
 801437a:	e012      	b.n	80143a2 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801437c:	79fb      	ldrb	r3, [r7, #7]
 801437e:	011b      	lsls	r3, r3, #4
 8014380:	3308      	adds	r3, #8
 8014382:	4a0a      	ldr	r2, [pc, #40]	@ (80143ac <MallocNewMacCommandSlot+0x4c>)
 8014384:	4413      	add	r3, r2
 8014386:	4618      	mov	r0, r3
 8014388:	f7ff ffcd 	bl	8014326 <IsSlotFree>
 801438c:	4603      	mov	r3, r0
 801438e:	f083 0301 	eor.w	r3, r3, #1
 8014392:	b2db      	uxtb	r3, r3
 8014394:	2b00      	cmp	r3, #0
 8014396:	d1e9      	bne.n	801436c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8014398:	79fb      	ldrb	r3, [r7, #7]
 801439a:	011b      	lsls	r3, r3, #4
 801439c:	3308      	adds	r3, #8
 801439e:	4a03      	ldr	r2, [pc, #12]	@ (80143ac <MallocNewMacCommandSlot+0x4c>)
 80143a0:	4413      	add	r3, r2
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3708      	adds	r7, #8
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}
 80143aa:	bf00      	nop
 80143ac:	200019e8 	.word	0x200019e8

080143b0 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b082      	sub	sp, #8
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d101      	bne.n	80143c2 <FreeMacCommandSlot+0x12>
    {
        return false;
 80143be:	2300      	movs	r3, #0
 80143c0:	e005      	b.n	80143ce <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80143c2:	2210      	movs	r2, #16
 80143c4:	2100      	movs	r1, #0
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f004 f8e4 	bl	8018594 <memset1>

    return true;
 80143cc:	2301      	movs	r3, #1
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	3708      	adds	r7, #8
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}

080143d6 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80143d6:	b480      	push	{r7}
 80143d8:	b083      	sub	sp, #12
 80143da:	af00      	add	r7, sp, #0
 80143dc:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d101      	bne.n	80143e8 <LinkedListInit+0x12>
    {
        return false;
 80143e4:	2300      	movs	r3, #0
 80143e6:	e006      	b.n	80143f6 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2200      	movs	r2, #0
 80143ec:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	2200      	movs	r2, #0
 80143f2:	605a      	str	r2, [r3, #4]

    return true;
 80143f4:	2301      	movs	r3, #1
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	370c      	adds	r7, #12
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bc80      	pop	{r7}
 80143fe:	4770      	bx	lr

08014400 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8014400:	b480      	push	{r7}
 8014402:	b083      	sub	sp, #12
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
 8014408:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d002      	beq.n	8014416 <LinkedListAdd+0x16>
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d101      	bne.n	801441a <LinkedListAdd+0x1a>
    {
        return false;
 8014416:	2300      	movs	r3, #0
 8014418:	e015      	b.n	8014446 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d102      	bne.n	8014428 <LinkedListAdd+0x28>
    {
        list->First = element;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	683a      	ldr	r2, [r7, #0]
 8014426:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	685b      	ldr	r3, [r3, #4]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d003      	beq.n	8014438 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	683a      	ldr	r2, [r7, #0]
 8014436:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8014438:	683b      	ldr	r3, [r7, #0]
 801443a:	2200      	movs	r2, #0
 801443c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	683a      	ldr	r2, [r7, #0]
 8014442:	605a      	str	r2, [r3, #4]

    return true;
 8014444:	2301      	movs	r3, #1
}
 8014446:	4618      	mov	r0, r3
 8014448:	370c      	adds	r7, #12
 801444a:	46bd      	mov	sp, r7
 801444c:	bc80      	pop	{r7}
 801444e:	4770      	bx	lr

08014450 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014450:	b480      	push	{r7}
 8014452:	b085      	sub	sp, #20
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d002      	beq.n	8014466 <LinkedListGetPrevious+0x16>
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d101      	bne.n	801446a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8014466:	2300      	movs	r3, #0
 8014468:	e016      	b.n	8014498 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014470:	683a      	ldr	r2, [r7, #0]
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	429a      	cmp	r2, r3
 8014476:	d00c      	beq.n	8014492 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014478:	e002      	b.n	8014480 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d007      	beq.n	8014496 <LinkedListGetPrevious+0x46>
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	683a      	ldr	r2, [r7, #0]
 801448c:	429a      	cmp	r2, r3
 801448e:	d1f4      	bne.n	801447a <LinkedListGetPrevious+0x2a>
 8014490:	e001      	b.n	8014496 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014492:	2300      	movs	r3, #0
 8014494:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014496:	68fb      	ldr	r3, [r7, #12]
}
 8014498:	4618      	mov	r0, r3
 801449a:	3714      	adds	r7, #20
 801449c:	46bd      	mov	sp, r7
 801449e:	bc80      	pop	{r7}
 80144a0:	4770      	bx	lr

080144a2 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b084      	sub	sp, #16
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
 80144aa:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d002      	beq.n	80144b8 <LinkedListRemove+0x16>
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d101      	bne.n	80144bc <LinkedListRemove+0x1a>
    {
        return false;
 80144b8:	2300      	movs	r3, #0
 80144ba:	e020      	b.n	80144fe <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80144bc:	6839      	ldr	r1, [r7, #0]
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f7ff ffc6 	bl	8014450 <LinkedListGetPrevious>
 80144c4:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	683a      	ldr	r2, [r7, #0]
 80144cc:	429a      	cmp	r2, r3
 80144ce:	d103      	bne.n	80144d8 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	681a      	ldr	r2, [r3, #0]
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	685b      	ldr	r3, [r3, #4]
 80144dc:	683a      	ldr	r2, [r7, #0]
 80144de:	429a      	cmp	r2, r3
 80144e0:	d102      	bne.n	80144e8 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	68fa      	ldr	r2, [r7, #12]
 80144e6:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d003      	beq.n	80144f6 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	681a      	ldr	r2, [r3, #0]
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80144f6:	683b      	ldr	r3, [r7, #0]
 80144f8:	2200      	movs	r2, #0
 80144fa:	601a      	str	r2, [r3, #0]

    return true;
 80144fc:	2301      	movs	r3, #1
}
 80144fe:	4618      	mov	r0, r3
 8014500:	3710      	adds	r7, #16
 8014502:	46bd      	mov	sp, r7
 8014504:	bd80      	pop	{r7, pc}
	...

08014508 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014508:	b480      	push	{r7}
 801450a:	b083      	sub	sp, #12
 801450c:	af00      	add	r7, sp, #0
 801450e:	4603      	mov	r3, r0
 8014510:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8014512:	79fb      	ldrb	r3, [r7, #7]
 8014514:	2b11      	cmp	r3, #17
 8014516:	bf8c      	ite	hi
 8014518:	2201      	movhi	r2, #1
 801451a:	2200      	movls	r2, #0
 801451c:	b2d2      	uxtb	r2, r2
 801451e:	2a00      	cmp	r2, #0
 8014520:	d10d      	bne.n	801453e <IsSticky+0x36>
 8014522:	4a0a      	ldr	r2, [pc, #40]	@ (801454c <IsSticky+0x44>)
 8014524:	fa22 f303 	lsr.w	r3, r2, r3
 8014528:	f003 0301 	and.w	r3, r3, #1
 801452c:	2b00      	cmp	r3, #0
 801452e:	bf14      	ite	ne
 8014530:	2301      	movne	r3, #1
 8014532:	2300      	moveq	r3, #0
 8014534:	b2db      	uxtb	r3, r3
 8014536:	2b00      	cmp	r3, #0
 8014538:	d001      	beq.n	801453e <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 801453a:	2301      	movs	r3, #1
 801453c:	e000      	b.n	8014540 <IsSticky+0x38>
        default:
            return false;
 801453e:	2300      	movs	r3, #0
    }
}
 8014540:	4618      	mov	r0, r3
 8014542:	370c      	adds	r7, #12
 8014544:	46bd      	mov	sp, r7
 8014546:	bc80      	pop	{r7}
 8014548:	4770      	bx	lr
 801454a:	bf00      	nop
 801454c:	00020720 	.word	0x00020720

08014550 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8014550:	b480      	push	{r7}
 8014552:	b083      	sub	sp, #12
 8014554:	af00      	add	r7, sp, #0
 8014556:	4603      	mov	r3, r0
 8014558:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 801455a:	2300      	movs	r3, #0
    }
}
 801455c:	4618      	mov	r0, r3
 801455e:	370c      	adds	r7, #12
 8014560:	46bd      	mov	sp, r7
 8014562:	bc80      	pop	{r7}
 8014564:	4770      	bx	lr
	...

08014568 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8014568:	b580      	push	{r7, lr}
 801456a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 801456c:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8014570:	2100      	movs	r1, #0
 8014572:	4804      	ldr	r0, [pc, #16]	@ (8014584 <LoRaMacCommandsInit+0x1c>)
 8014574:	f004 f80e 	bl	8018594 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8014578:	4802      	ldr	r0, [pc, #8]	@ (8014584 <LoRaMacCommandsInit+0x1c>)
 801457a:	f7ff ff2c 	bl	80143d6 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801457e:	2300      	movs	r3, #0
}
 8014580:	4618      	mov	r0, r3
 8014582:	bd80      	pop	{r7, pc}
 8014584:	200019e8 	.word	0x200019e8

08014588 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b086      	sub	sp, #24
 801458c:	af00      	add	r7, sp, #0
 801458e:	4603      	mov	r3, r0
 8014590:	60b9      	str	r1, [r7, #8]
 8014592:	607a      	str	r2, [r7, #4]
 8014594:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d101      	bne.n	80145a0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801459c:	2301      	movs	r3, #1
 801459e:	e03b      	b.n	8014618 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80145a0:	f7ff fede 	bl	8014360 <MallocNewMacCommandSlot>
 80145a4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d101      	bne.n	80145b0 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80145ac:	2302      	movs	r3, #2
 80145ae:	e033      	b.n	8014618 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80145b0:	6979      	ldr	r1, [r7, #20]
 80145b2:	481b      	ldr	r0, [pc, #108]	@ (8014620 <LoRaMacCommandsAddCmd+0x98>)
 80145b4:	f7ff ff24 	bl	8014400 <LinkedListAdd>
 80145b8:	4603      	mov	r3, r0
 80145ba:	f083 0301 	eor.w	r3, r3, #1
 80145be:	b2db      	uxtb	r3, r3
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d001      	beq.n	80145c8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80145c4:	2305      	movs	r3, #5
 80145c6:	e027      	b.n	8014618 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 80145c8:	697b      	ldr	r3, [r7, #20]
 80145ca:	7bfa      	ldrb	r2, [r7, #15]
 80145cc:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80145ce:	697b      	ldr	r3, [r7, #20]
 80145d0:	687a      	ldr	r2, [r7, #4]
 80145d2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80145d4:	697b      	ldr	r3, [r7, #20]
 80145d6:	3305      	adds	r3, #5
 80145d8:	687a      	ldr	r2, [r7, #4]
 80145da:	b292      	uxth	r2, r2
 80145dc:	68b9      	ldr	r1, [r7, #8]
 80145de:	4618      	mov	r0, r3
 80145e0:	f003 ff9d 	bl	801851e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80145e4:	7bfb      	ldrb	r3, [r7, #15]
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7ff ff8e 	bl	8014508 <IsSticky>
 80145ec:	4603      	mov	r3, r0
 80145ee:	461a      	mov	r2, r3
 80145f0:	697b      	ldr	r3, [r7, #20]
 80145f2:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80145f4:	7bfb      	ldrb	r3, [r7, #15]
 80145f6:	4618      	mov	r0, r3
 80145f8:	f7ff ffaa 	bl	8014550 <IsConfirmationRequired>
 80145fc:	4603      	mov	r3, r0
 80145fe:	461a      	mov	r2, r3
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014604:	4b06      	ldr	r3, [pc, #24]	@ (8014620 <LoRaMacCommandsAddCmd+0x98>)
 8014606:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	4413      	add	r3, r2
 801460e:	3301      	adds	r3, #1
 8014610:	4a03      	ldr	r2, [pc, #12]	@ (8014620 <LoRaMacCommandsAddCmd+0x98>)
 8014612:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8014616:	2300      	movs	r3, #0
}
 8014618:	4618      	mov	r0, r3
 801461a:	3718      	adds	r7, #24
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}
 8014620:	200019e8 	.word	0x200019e8

08014624 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d101      	bne.n	8014636 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014632:	2301      	movs	r3, #1
 8014634:	e021      	b.n	801467a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8014636:	6879      	ldr	r1, [r7, #4]
 8014638:	4812      	ldr	r0, [pc, #72]	@ (8014684 <LoRaMacCommandsRemoveCmd+0x60>)
 801463a:	f7ff ff32 	bl	80144a2 <LinkedListRemove>
 801463e:	4603      	mov	r3, r0
 8014640:	f083 0301 	eor.w	r3, r3, #1
 8014644:	b2db      	uxtb	r3, r3
 8014646:	2b00      	cmp	r3, #0
 8014648:	d001      	beq.n	801464e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801464a:	2303      	movs	r3, #3
 801464c:	e015      	b.n	801467a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801464e:	4b0d      	ldr	r3, [pc, #52]	@ (8014684 <LoRaMacCommandsRemoveCmd+0x60>)
 8014650:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	689b      	ldr	r3, [r3, #8]
 8014658:	1ad3      	subs	r3, r2, r3
 801465a:	3b01      	subs	r3, #1
 801465c:	4a09      	ldr	r2, [pc, #36]	@ (8014684 <LoRaMacCommandsRemoveCmd+0x60>)
 801465e:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f7ff fea4 	bl	80143b0 <FreeMacCommandSlot>
 8014668:	4603      	mov	r3, r0
 801466a:	f083 0301 	eor.w	r3, r3, #1
 801466e:	b2db      	uxtb	r3, r3
 8014670:	2b00      	cmp	r3, #0
 8014672:	d001      	beq.n	8014678 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014674:	2305      	movs	r3, #5
 8014676:	e000      	b.n	801467a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014678:	2300      	movs	r3, #0
}
 801467a:	4618      	mov	r0, r3
 801467c:	3708      	adds	r7, #8
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}
 8014682:	bf00      	nop
 8014684:	200019e8 	.word	0x200019e8

08014688 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8014688:	b480      	push	{r7}
 801468a:	b085      	sub	sp, #20
 801468c:	af00      	add	r7, sp, #0
 801468e:	4603      	mov	r3, r0
 8014690:	6039      	str	r1, [r7, #0]
 8014692:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014694:	4b0e      	ldr	r3, [pc, #56]	@ (80146d0 <LoRaMacCommandsGetCmd+0x48>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801469a:	e002      	b.n	80146a2 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d004      	beq.n	80146b2 <LoRaMacCommandsGetCmd+0x2a>
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	791b      	ldrb	r3, [r3, #4]
 80146ac:	79fa      	ldrb	r2, [r7, #7]
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d1f4      	bne.n	801469c <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	68fa      	ldr	r2, [r7, #12]
 80146b6:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d101      	bne.n	80146c2 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80146be:	2303      	movs	r3, #3
 80146c0:	e000      	b.n	80146c4 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 80146c2:	2300      	movs	r3, #0
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3714      	adds	r7, #20
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bc80      	pop	{r7}
 80146cc:	4770      	bx	lr
 80146ce:	bf00      	nop
 80146d0:	200019e8 	.word	0x200019e8

080146d4 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80146da:	4b0f      	ldr	r3, [pc, #60]	@ (8014718 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80146e0:	e012      	b.n	8014708 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	7b1b      	ldrb	r3, [r3, #12]
 80146e6:	f083 0301 	eor.w	r3, r3, #1
 80146ea:	b2db      	uxtb	r3, r3
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d008      	beq.n	8014702 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f7ff ff94 	bl	8014624 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	607b      	str	r3, [r7, #4]
 8014700:	e002      	b.n	8014708 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d1e9      	bne.n	80146e2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801470e:	2300      	movs	r3, #0
}
 8014710:	4618      	mov	r0, r3
 8014712:	3708      	adds	r7, #8
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}
 8014718:	200019e8 	.word	0x200019e8

0801471c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b082      	sub	sp, #8
 8014720:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014722:	4b13      	ldr	r3, [pc, #76]	@ (8014770 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014728:	e01a      	b.n	8014760 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	791b      	ldrb	r3, [r3, #4]
 8014734:	4618      	mov	r0, r3
 8014736:	f7ff fee7 	bl	8014508 <IsSticky>
 801473a:	4603      	mov	r3, r0
 801473c:	2b00      	cmp	r3, #0
 801473e:	d00d      	beq.n	801475c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	791b      	ldrb	r3, [r3, #4]
 8014744:	4618      	mov	r0, r3
 8014746:	f7ff ff03 	bl	8014550 <IsConfirmationRequired>
 801474a:	4603      	mov	r3, r0
 801474c:	f083 0301 	eor.w	r3, r3, #1
 8014750:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8014752:	2b00      	cmp	r3, #0
 8014754:	d002      	beq.n	801475c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f7ff ff64 	bl	8014624 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801475c:	683b      	ldr	r3, [r7, #0]
 801475e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d1e1      	bne.n	801472a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014766:	2300      	movs	r3, #0
}
 8014768:	4618      	mov	r0, r3
 801476a:	3708      	adds	r7, #8
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	200019e8 	.word	0x200019e8

08014774 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d101      	bne.n	8014786 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014782:	2301      	movs	r3, #1
 8014784:	e005      	b.n	8014792 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8014786:	4b05      	ldr	r3, [pc, #20]	@ (801479c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014788:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014790:	2300      	movs	r3, #0
}
 8014792:	4618      	mov	r0, r3
 8014794:	370c      	adds	r7, #12
 8014796:	46bd      	mov	sp, r7
 8014798:	bc80      	pop	{r7}
 801479a:	4770      	bx	lr
 801479c:	200019e8 	.word	0x200019e8

080147a0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b088      	sub	sp, #32
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	60f8      	str	r0, [r7, #12]
 80147a8:	60b9      	str	r1, [r7, #8]
 80147aa:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80147ac:	4b25      	ldr	r3, [pc, #148]	@ (8014844 <LoRaMacCommandsSerializeCmds+0xa4>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80147b2:	2300      	movs	r3, #0
 80147b4:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d002      	beq.n	80147c2 <LoRaMacCommandsSerializeCmds+0x22>
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d126      	bne.n	8014810 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80147c2:	2301      	movs	r3, #1
 80147c4:	e039      	b.n	801483a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80147c6:	7efb      	ldrb	r3, [r7, #27]
 80147c8:	68fa      	ldr	r2, [r7, #12]
 80147ca:	1ad2      	subs	r2, r2, r3
 80147cc:	69fb      	ldr	r3, [r7, #28]
 80147ce:	689b      	ldr	r3, [r3, #8]
 80147d0:	3301      	adds	r3, #1
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d320      	bcc.n	8014818 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80147d6:	7efb      	ldrb	r3, [r7, #27]
 80147d8:	1c5a      	adds	r2, r3, #1
 80147da:	76fa      	strb	r2, [r7, #27]
 80147dc:	461a      	mov	r2, r3
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	4413      	add	r3, r2
 80147e2:	69fa      	ldr	r2, [r7, #28]
 80147e4:	7912      	ldrb	r2, [r2, #4]
 80147e6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80147e8:	7efb      	ldrb	r3, [r7, #27]
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	18d0      	adds	r0, r2, r3
 80147ee:	69fb      	ldr	r3, [r7, #28]
 80147f0:	1d59      	adds	r1, r3, #5
 80147f2:	69fb      	ldr	r3, [r7, #28]
 80147f4:	689b      	ldr	r3, [r3, #8]
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	461a      	mov	r2, r3
 80147fa:	f003 fe90 	bl	801851e <memcpy1>
            itr += curElement->PayloadSize;
 80147fe:	69fb      	ldr	r3, [r7, #28]
 8014800:	689b      	ldr	r3, [r3, #8]
 8014802:	b2da      	uxtb	r2, r3
 8014804:	7efb      	ldrb	r3, [r7, #27]
 8014806:	4413      	add	r3, r2
 8014808:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801480a:	69fb      	ldr	r3, [r7, #28]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014810:	69fb      	ldr	r3, [r7, #28]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d1d7      	bne.n	80147c6 <LoRaMacCommandsSerializeCmds+0x26>
 8014816:	e009      	b.n	801482c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8014818:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801481a:	e007      	b.n	801482c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 801481c:	69fb      	ldr	r3, [r7, #28]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014822:	69f8      	ldr	r0, [r7, #28]
 8014824:	f7ff fefe 	bl	8014624 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014828:	697b      	ldr	r3, [r7, #20]
 801482a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801482c:	69fb      	ldr	r3, [r7, #28]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d1f4      	bne.n	801481c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014832:	68b8      	ldr	r0, [r7, #8]
 8014834:	f7ff ff9e 	bl	8014774 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014838:	2300      	movs	r3, #0
}
 801483a:	4618      	mov	r0, r3
 801483c:	3720      	adds	r7, #32
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}
 8014842:	bf00      	nop
 8014844:	200019e8 	.word	0x200019e8

08014848 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014848:	b480      	push	{r7}
 801484a:	b085      	sub	sp, #20
 801484c:	af00      	add	r7, sp, #0
 801484e:	4603      	mov	r3, r0
 8014850:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8014852:	2300      	movs	r3, #0
 8014854:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8014856:	79fb      	ldrb	r3, [r7, #7]
 8014858:	3b02      	subs	r3, #2
 801485a:	2b11      	cmp	r3, #17
 801485c:	d850      	bhi.n	8014900 <LoRaMacCommandsGetCmdSize+0xb8>
 801485e:	a201      	add	r2, pc, #4	@ (adr r2, 8014864 <LoRaMacCommandsGetCmdSize+0x1c>)
 8014860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014864:	080148ad 	.word	0x080148ad
 8014868:	080148b3 	.word	0x080148b3
 801486c:	080148b9 	.word	0x080148b9
 8014870:	080148bf 	.word	0x080148bf
 8014874:	080148c5 	.word	0x080148c5
 8014878:	080148cb 	.word	0x080148cb
 801487c:	080148d1 	.word	0x080148d1
 8014880:	080148d7 	.word	0x080148d7
 8014884:	080148dd 	.word	0x080148dd
 8014888:	08014901 	.word	0x08014901
 801488c:	08014901 	.word	0x08014901
 8014890:	080148e3 	.word	0x080148e3
 8014894:	08014901 	.word	0x08014901
 8014898:	08014901 	.word	0x08014901
 801489c:	080148e9 	.word	0x080148e9
 80148a0:	080148ef 	.word	0x080148ef
 80148a4:	080148f5 	.word	0x080148f5
 80148a8:	080148fb 	.word	0x080148fb
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80148ac:	2303      	movs	r3, #3
 80148ae:	73fb      	strb	r3, [r7, #15]
            break;
 80148b0:	e027      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80148b2:	2305      	movs	r3, #5
 80148b4:	73fb      	strb	r3, [r7, #15]
            break;
 80148b6:	e024      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80148b8:	2302      	movs	r3, #2
 80148ba:	73fb      	strb	r3, [r7, #15]
            break;
 80148bc:	e021      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80148be:	2305      	movs	r3, #5
 80148c0:	73fb      	strb	r3, [r7, #15]
            break;
 80148c2:	e01e      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80148c4:	2301      	movs	r3, #1
 80148c6:	73fb      	strb	r3, [r7, #15]
            break;
 80148c8:	e01b      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80148ca:	2306      	movs	r3, #6
 80148cc:	73fb      	strb	r3, [r7, #15]
            break;
 80148ce:	e018      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80148d0:	2302      	movs	r3, #2
 80148d2:	73fb      	strb	r3, [r7, #15]
            break;
 80148d4:	e015      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80148d6:	2302      	movs	r3, #2
 80148d8:	73fb      	strb	r3, [r7, #15]
            break;
 80148da:	e012      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80148dc:	2305      	movs	r3, #5
 80148de:	73fb      	strb	r3, [r7, #15]
            break;
 80148e0:	e00f      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80148e2:	2306      	movs	r3, #6
 80148e4:	73fb      	strb	r3, [r7, #15]
            break;
 80148e6:	e00c      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80148e8:	2301      	movs	r3, #1
 80148ea:	73fb      	strb	r3, [r7, #15]
            break;
 80148ec:	e009      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80148ee:	2305      	movs	r3, #5
 80148f0:	73fb      	strb	r3, [r7, #15]
            break;
 80148f2:	e006      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80148f4:	2304      	movs	r3, #4
 80148f6:	73fb      	strb	r3, [r7, #15]
            break;
 80148f8:	e003      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80148fa:	2304      	movs	r3, #4
 80148fc:	73fb      	strb	r3, [r7, #15]
            break;
 80148fe:	e000      	b.n	8014902 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014900:	bf00      	nop
        }
    }
    return cidSize;
 8014902:	7bfb      	ldrb	r3, [r7, #15]
}
 8014904:	4618      	mov	r0, r3
 8014906:	3714      	adds	r7, #20
 8014908:	46bd      	mov	sp, r7
 801490a:	bc80      	pop	{r7}
 801490c:	4770      	bx	lr
 801490e:	bf00      	nop

08014910 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014910:	b480      	push	{r7}
 8014912:	b083      	sub	sp, #12
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	4a07      	ldr	r2, [pc, #28]	@ (8014938 <IncreaseBufferPointer+0x28>)
 801491c:	4293      	cmp	r3, r2
 801491e:	d102      	bne.n	8014926 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014920:	4b06      	ldr	r3, [pc, #24]	@ (801493c <IncreaseBufferPointer+0x2c>)
 8014922:	607b      	str	r3, [r7, #4]
 8014924:	e002      	b.n	801492c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	3304      	adds	r3, #4
 801492a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801492c:	687b      	ldr	r3, [r7, #4]
}
 801492e:	4618      	mov	r0, r3
 8014930:	370c      	adds	r7, #12
 8014932:	46bd      	mov	sp, r7
 8014934:	bc80      	pop	{r7}
 8014936:	4770      	bx	lr
 8014938:	20001c10 	.word	0x20001c10
 801493c:	20001c00 	.word	0x20001c00

08014940 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014940:	b480      	push	{r7}
 8014942:	b083      	sub	sp, #12
 8014944:	af00      	add	r7, sp, #0
 8014946:	4603      	mov	r3, r0
 8014948:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801494a:	79fb      	ldrb	r3, [r7, #7]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d101      	bne.n	8014954 <IsListEmpty+0x14>
    {
        return true;
 8014950:	2301      	movs	r3, #1
 8014952:	e000      	b.n	8014956 <IsListEmpty+0x16>
    }
    return false;
 8014954:	2300      	movs	r3, #0
}
 8014956:	4618      	mov	r0, r3
 8014958:	370c      	adds	r7, #12
 801495a:	46bd      	mov	sp, r7
 801495c:	bc80      	pop	{r7}
 801495e:	4770      	bx	lr

08014960 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014960:	b480      	push	{r7}
 8014962:	b083      	sub	sp, #12
 8014964:	af00      	add	r7, sp, #0
 8014966:	4603      	mov	r3, r0
 8014968:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801496a:	79fb      	ldrb	r3, [r7, #7]
 801496c:	2b04      	cmp	r3, #4
 801496e:	d901      	bls.n	8014974 <IsListFull+0x14>
    {
        return true;
 8014970:	2301      	movs	r3, #1
 8014972:	e000      	b.n	8014976 <IsListFull+0x16>
    }
    return false;
 8014974:	2300      	movs	r3, #0
}
 8014976:	4618      	mov	r0, r3
 8014978:	370c      	adds	r7, #12
 801497a:	46bd      	mov	sp, r7
 801497c:	bc80      	pop	{r7}
 801497e:	4770      	bx	lr

08014980 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b086      	sub	sp, #24
 8014984:	af00      	add	r7, sp, #0
 8014986:	4603      	mov	r3, r0
 8014988:	60b9      	str	r1, [r7, #8]
 801498a:	607a      	str	r2, [r7, #4]
 801498c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014992:	4b13      	ldr	r3, [pc, #76]	@ (80149e0 <GetElement+0x60>)
 8014994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014998:	4618      	mov	r0, r3
 801499a:	f7ff ffd1 	bl	8014940 <IsListEmpty>
 801499e:	4603      	mov	r3, r0
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d001      	beq.n	80149a8 <GetElement+0x28>
    {
        return NULL;
 80149a4:	2300      	movs	r3, #0
 80149a6:	e017      	b.n	80149d8 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80149a8:	2300      	movs	r3, #0
 80149aa:	74fb      	strb	r3, [r7, #19]
 80149ac:	e00d      	b.n	80149ca <GetElement+0x4a>
    {
        if( element->Request == request )
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	7bfa      	ldrb	r2, [r7, #15]
 80149b4:	429a      	cmp	r2, r3
 80149b6:	d101      	bne.n	80149bc <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80149b8:	697b      	ldr	r3, [r7, #20]
 80149ba:	e00d      	b.n	80149d8 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80149bc:	6978      	ldr	r0, [r7, #20]
 80149be:	f7ff ffa7 	bl	8014910 <IncreaseBufferPointer>
 80149c2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80149c4:	7cfb      	ldrb	r3, [r7, #19]
 80149c6:	3301      	adds	r3, #1
 80149c8:	74fb      	strb	r3, [r7, #19]
 80149ca:	4b05      	ldr	r3, [pc, #20]	@ (80149e0 <GetElement+0x60>)
 80149cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80149d0:	7cfa      	ldrb	r2, [r7, #19]
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d3eb      	bcc.n	80149ae <GetElement+0x2e>
    }

    return NULL;
 80149d6:	2300      	movs	r3, #0
}
 80149d8:	4618      	mov	r0, r3
 80149da:	3718      	adds	r7, #24
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}
 80149e0:	20001bf4 	.word	0x20001bf4

080149e4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b082      	sub	sp, #8
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80149ec:	4a0c      	ldr	r2, [pc, #48]	@ (8014a20 <LoRaMacConfirmQueueInit+0x3c>)
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80149f2:	4b0b      	ldr	r3, [pc, #44]	@ (8014a20 <LoRaMacConfirmQueueInit+0x3c>)
 80149f4:	2200      	movs	r2, #0
 80149f6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80149fa:	4b09      	ldr	r3, [pc, #36]	@ (8014a20 <LoRaMacConfirmQueueInit+0x3c>)
 80149fc:	4a09      	ldr	r2, [pc, #36]	@ (8014a24 <LoRaMacConfirmQueueInit+0x40>)
 80149fe:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014a00:	4b07      	ldr	r3, [pc, #28]	@ (8014a20 <LoRaMacConfirmQueueInit+0x3c>)
 8014a02:	4a08      	ldr	r2, [pc, #32]	@ (8014a24 <LoRaMacConfirmQueueInit+0x40>)
 8014a04:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8014a06:	2214      	movs	r2, #20
 8014a08:	21ff      	movs	r1, #255	@ 0xff
 8014a0a:	4806      	ldr	r0, [pc, #24]	@ (8014a24 <LoRaMacConfirmQueueInit+0x40>)
 8014a0c:	f003 fdc2 	bl	8018594 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014a10:	4b03      	ldr	r3, [pc, #12]	@ (8014a20 <LoRaMacConfirmQueueInit+0x3c>)
 8014a12:	2201      	movs	r2, #1
 8014a14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8014a18:	bf00      	nop
 8014a1a:	3708      	adds	r7, #8
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}
 8014a20:	20001bf4 	.word	0x20001bf4
 8014a24:	20001c00 	.word	0x20001c00

08014a28 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b082      	sub	sp, #8
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014a30:	4b19      	ldr	r3, [pc, #100]	@ (8014a98 <LoRaMacConfirmQueueAdd+0x70>)
 8014a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7ff ff92 	bl	8014960 <IsListFull>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d001      	beq.n	8014a46 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8014a42:	2300      	movs	r3, #0
 8014a44:	e024      	b.n	8014a90 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014a46:	4b14      	ldr	r3, [pc, #80]	@ (8014a98 <LoRaMacConfirmQueueAdd+0x70>)
 8014a48:	689b      	ldr	r3, [r3, #8]
 8014a4a:	687a      	ldr	r2, [r7, #4]
 8014a4c:	7812      	ldrb	r2, [r2, #0]
 8014a4e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014a50:	4b11      	ldr	r3, [pc, #68]	@ (8014a98 <LoRaMacConfirmQueueAdd+0x70>)
 8014a52:	689b      	ldr	r3, [r3, #8]
 8014a54:	687a      	ldr	r2, [r7, #4]
 8014a56:	7852      	ldrb	r2, [r2, #1]
 8014a58:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8014a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8014a98 <LoRaMacConfirmQueueAdd+0x70>)
 8014a5c:	689b      	ldr	r3, [r3, #8]
 8014a5e:	687a      	ldr	r2, [r7, #4]
 8014a60:	78d2      	ldrb	r2, [r2, #3]
 8014a62:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8014a64:	4b0c      	ldr	r3, [pc, #48]	@ (8014a98 <LoRaMacConfirmQueueAdd+0x70>)
 8014a66:	689b      	ldr	r3, [r3, #8]
 8014a68:	687a      	ldr	r2, [r7, #4]
 8014a6a:	7892      	ldrb	r2, [r2, #2]
 8014a6c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8014a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8014a98 <LoRaMacConfirmQueueAdd+0x70>)
 8014a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a74:	3301      	adds	r3, #1
 8014a76:	b2da      	uxtb	r2, r3
 8014a78:	4b07      	ldr	r3, [pc, #28]	@ (8014a98 <LoRaMacConfirmQueueAdd+0x70>)
 8014a7a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8014a7e:	4b06      	ldr	r3, [pc, #24]	@ (8014a98 <LoRaMacConfirmQueueAdd+0x70>)
 8014a80:	689b      	ldr	r3, [r3, #8]
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7ff ff44 	bl	8014910 <IncreaseBufferPointer>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	4a03      	ldr	r2, [pc, #12]	@ (8014a98 <LoRaMacConfirmQueueAdd+0x70>)
 8014a8c:	6093      	str	r3, [r2, #8]

    return true;
 8014a8e:	2301      	movs	r3, #1
}
 8014a90:	4618      	mov	r0, r3
 8014a92:	3708      	adds	r7, #8
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}
 8014a98:	20001bf4 	.word	0x20001bf4

08014a9c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8014adc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7ff ff4a 	bl	8014940 <IsListEmpty>
 8014aac:	4603      	mov	r3, r0
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d001      	beq.n	8014ab6 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	e010      	b.n	8014ad8 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8014ab6:	4b09      	ldr	r3, [pc, #36]	@ (8014adc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014abc:	3b01      	subs	r3, #1
 8014abe:	b2da      	uxtb	r2, r3
 8014ac0:	4b06      	ldr	r3, [pc, #24]	@ (8014adc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014ac2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014ac6:	4b05      	ldr	r3, [pc, #20]	@ (8014adc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014ac8:	685b      	ldr	r3, [r3, #4]
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7ff ff20 	bl	8014910 <IncreaseBufferPointer>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	4a02      	ldr	r2, [pc, #8]	@ (8014adc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014ad4:	6053      	str	r3, [r2, #4]

    return true;
 8014ad6:	2301      	movs	r3, #1
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	bd80      	pop	{r7, pc}
 8014adc:	20001bf4 	.word	0x20001bf4

08014ae0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b084      	sub	sp, #16
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	460a      	mov	r2, r1
 8014aea:	71fb      	strb	r3, [r7, #7]
 8014aec:	4613      	mov	r3, r2
 8014aee:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8014af0:	2300      	movs	r3, #0
 8014af2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014af4:	4b10      	ldr	r3, [pc, #64]	@ (8014b38 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7ff ff20 	bl	8014940 <IsListEmpty>
 8014b00:	4603      	mov	r3, r0
 8014b02:	f083 0301 	eor.w	r3, r3, #1
 8014b06:	b2db      	uxtb	r3, r3
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d011      	beq.n	8014b30 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8014b38 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014b0e:	6859      	ldr	r1, [r3, #4]
 8014b10:	4b09      	ldr	r3, [pc, #36]	@ (8014b38 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014b12:	689a      	ldr	r2, [r3, #8]
 8014b14:	79bb      	ldrb	r3, [r7, #6]
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7ff ff32 	bl	8014980 <GetElement>
 8014b1c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d005      	beq.n	8014b30 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	79fa      	ldrb	r2, [r7, #7]
 8014b28:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	2201      	movs	r2, #1
 8014b2e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8014b30:	bf00      	nop
 8014b32:	3710      	adds	r7, #16
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}
 8014b38:	20001bf4 	.word	0x20001bf4

08014b3c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b084      	sub	sp, #16
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	4603      	mov	r3, r0
 8014b44:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8014b46:	2300      	movs	r3, #0
 8014b48:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014b4a:	4b10      	ldr	r3, [pc, #64]	@ (8014b8c <LoRaMacConfirmQueueGetStatus+0x50>)
 8014b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b50:	4618      	mov	r0, r3
 8014b52:	f7ff fef5 	bl	8014940 <IsListEmpty>
 8014b56:	4603      	mov	r3, r0
 8014b58:	f083 0301 	eor.w	r3, r3, #1
 8014b5c:	b2db      	uxtb	r3, r3
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d00e      	beq.n	8014b80 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014b62:	4b0a      	ldr	r3, [pc, #40]	@ (8014b8c <LoRaMacConfirmQueueGetStatus+0x50>)
 8014b64:	6859      	ldr	r1, [r3, #4]
 8014b66:	4b09      	ldr	r3, [pc, #36]	@ (8014b8c <LoRaMacConfirmQueueGetStatus+0x50>)
 8014b68:	689a      	ldr	r2, [r3, #8]
 8014b6a:	79fb      	ldrb	r3, [r7, #7]
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7ff ff07 	bl	8014980 <GetElement>
 8014b72:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d002      	beq.n	8014b80 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	785b      	ldrb	r3, [r3, #1]
 8014b7e:	e000      	b.n	8014b82 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014b80:	2301      	movs	r3, #1
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3710      	adds	r7, #16
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	20001bf4 	.word	0x20001bf4

08014b90 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b084      	sub	sp, #16
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	4603      	mov	r3, r0
 8014b98:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8014b9a:	4b16      	ldr	r3, [pc, #88]	@ (8014bf4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014ba0:	4a14      	ldr	r2, [pc, #80]	@ (8014bf4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014ba2:	79fb      	ldrb	r3, [r7, #7]
 8014ba4:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014ba8:	4b12      	ldr	r3, [pc, #72]	@ (8014bf4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014baa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7ff fec6 	bl	8014940 <IsListEmpty>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	f083 0301 	eor.w	r3, r3, #1
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d015      	beq.n	8014bec <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	79fa      	ldrb	r2, [r7, #7]
 8014bc4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	78db      	ldrb	r3, [r3, #3]
 8014bca:	f083 0301 	eor.w	r3, r3, #1
 8014bce:	b2db      	uxtb	r3, r3
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d002      	beq.n	8014bda <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	2201      	movs	r2, #1
 8014bd8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8014bda:	68f8      	ldr	r0, [r7, #12]
 8014bdc:	f7ff fe98 	bl	8014910 <IncreaseBufferPointer>
 8014be0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8014be2:	4b04      	ldr	r3, [pc, #16]	@ (8014bf4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014be4:	689b      	ldr	r3, [r3, #8]
 8014be6:	68fa      	ldr	r2, [r7, #12]
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d1e9      	bne.n	8014bc0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8014bec:	bf00      	nop
 8014bee:	3710      	adds	r7, #16
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bd80      	pop	{r7, pc}
 8014bf4:	20001bf4 	.word	0x20001bf4

08014bf8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b082      	sub	sp, #8
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	4603      	mov	r3, r0
 8014c00:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014c02:	4b09      	ldr	r3, [pc, #36]	@ (8014c28 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014c04:	6859      	ldr	r1, [r3, #4]
 8014c06:	4b08      	ldr	r3, [pc, #32]	@ (8014c28 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014c08:	689a      	ldr	r2, [r3, #8]
 8014c0a:	79fb      	ldrb	r3, [r7, #7]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7ff feb7 	bl	8014980 <GetElement>
 8014c12:	4603      	mov	r3, r0
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d001      	beq.n	8014c1c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8014c18:	2301      	movs	r3, #1
 8014c1a:	e000      	b.n	8014c1e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8014c1c:	2300      	movs	r3, #0
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	3708      	adds	r7, #8
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}
 8014c26:	bf00      	nop
 8014c28:	20001bf4 	.word	0x20001bf4

08014c2c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b084      	sub	sp, #16
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014c34:	4b25      	ldr	r3, [pc, #148]	@ (8014ccc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c3a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8014c40:	f107 0308 	add.w	r3, r7, #8
 8014c44:	2204      	movs	r2, #4
 8014c46:	2100      	movs	r1, #0
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f003 fca3 	bl	8018594 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8014c4e:	2300      	movs	r3, #0
 8014c50:	73fb      	strb	r3, [r7, #15]
 8014c52:	e032      	b.n	8014cba <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8014c54:	4b1d      	ldr	r3, [pc, #116]	@ (8014ccc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014c56:	685b      	ldr	r3, [r3, #4]
 8014c58:	781a      	ldrb	r2, [r3, #0]
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8014ccc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014c60:	685b      	ldr	r3, [r3, #4]
 8014c62:	785a      	ldrb	r2, [r3, #1]
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8014c68:	4b18      	ldr	r3, [pc, #96]	@ (8014ccc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014c6a:	685b      	ldr	r3, [r3, #4]
 8014c6c:	789b      	ldrb	r3, [r3, #2]
 8014c6e:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8014c70:	7b7b      	ldrb	r3, [r7, #13]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d005      	beq.n	8014c82 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8014c76:	4b15      	ldr	r3, [pc, #84]	@ (8014ccc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	689b      	ldr	r3, [r3, #8]
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	4798      	blx	r3
 8014c80:	e00b      	b.n	8014c9a <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8014c82:	4b12      	ldr	r3, [pc, #72]	@ (8014ccc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8014c8a:	4b10      	ldr	r3, [pc, #64]	@ (8014ccc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014c8c:	685b      	ldr	r3, [r3, #4]
 8014c8e:	785b      	ldrb	r3, [r3, #1]
 8014c90:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8014c92:	4b0e      	ldr	r3, [pc, #56]	@ (8014ccc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014c94:	685b      	ldr	r3, [r3, #4]
 8014c96:	78db      	ldrb	r3, [r3, #3]
 8014c98:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8014c9a:	f7ff feff 	bl	8014a9c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014c9e:	7b7b      	ldrb	r3, [r7, #13]
 8014ca0:	f083 0301 	eor.w	r3, r3, #1
 8014ca4:	b2db      	uxtb	r3, r3
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d004      	beq.n	8014cb4 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8014caa:	f107 0308 	add.w	r3, r7, #8
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7ff feba 	bl	8014a28 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8014cb4:	7bfb      	ldrb	r3, [r7, #15]
 8014cb6:	3301      	adds	r3, #1
 8014cb8:	73fb      	strb	r3, [r7, #15]
 8014cba:	7bfa      	ldrb	r2, [r7, #15]
 8014cbc:	7bbb      	ldrb	r3, [r7, #14]
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d3c8      	bcc.n	8014c54 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8014cc2:	bf00      	nop
 8014cc4:	bf00      	nop
 8014cc6:	3710      	adds	r7, #16
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}
 8014ccc:	20001bf4 	.word	0x20001bf4

08014cd0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8014cd0:	b480      	push	{r7}
 8014cd2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014cd4:	4b03      	ldr	r3, [pc, #12]	@ (8014ce4 <LoRaMacConfirmQueueGetCnt+0x14>)
 8014cd6:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bc80      	pop	{r7}
 8014ce0:	4770      	bx	lr
 8014ce2:	bf00      	nop
 8014ce4:	20001bf4 	.word	0x20001bf4

08014ce8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014cec:	4b06      	ldr	r3, [pc, #24]	@ (8014d08 <LoRaMacConfirmQueueIsFull+0x20>)
 8014cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f7ff fe34 	bl	8014960 <IsListFull>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d001      	beq.n	8014d02 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8014cfe:	2301      	movs	r3, #1
 8014d00:	e000      	b.n	8014d04 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8014d02:	2300      	movs	r3, #0
    }
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	bd80      	pop	{r7, pc}
 8014d08:	20001bf4 	.word	0x20001bf4

08014d0c <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b08e      	sub	sp, #56	@ 0x38
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	60f8      	str	r0, [r7, #12]
 8014d14:	607b      	str	r3, [r7, #4]
 8014d16:	460b      	mov	r3, r1
 8014d18:	817b      	strh	r3, [r7, #10]
 8014d1a:	4613      	mov	r3, r2
 8014d1c:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d101      	bne.n	8014d28 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014d24:	2309      	movs	r3, #9
 8014d26:	e084      	b.n	8014e32 <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8014d2e:	2301      	movs	r3, #1
 8014d30:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8014d32:	f107 0320 	add.w	r3, r7, #32
 8014d36:	2200      	movs	r2, #0
 8014d38:	601a      	str	r2, [r3, #0]
 8014d3a:	605a      	str	r2, [r3, #4]
 8014d3c:	609a      	str	r2, [r3, #8]
 8014d3e:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 8014d40:	f107 0310 	add.w	r3, r7, #16
 8014d44:	2200      	movs	r2, #0
 8014d46:	601a      	str	r2, [r3, #0]
 8014d48:	605a      	str	r2, [r3, #4]
 8014d4a:	609a      	str	r2, [r3, #8]
 8014d4c:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 8014d4e:	2301      	movs	r3, #1
 8014d50:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8014d52:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8014d56:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	0a1b      	lsrs	r3, r3, #8
 8014d62:	b2db      	uxtb	r3, r3
 8014d64:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	0c1b      	lsrs	r3, r3, #16
 8014d6a:	b2db      	uxtb	r3, r3
 8014d6c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	0e1b      	lsrs	r3, r3, #24
 8014d72:	b2db      	uxtb	r3, r3
 8014d74:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8014d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8014d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d7e:	0a1b      	lsrs	r3, r3, #8
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8014d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d86:	0c1b      	lsrs	r3, r3, #16
 8014d88:	b2db      	uxtb	r3, r3
 8014d8a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d8e:	0e1b      	lsrs	r3, r3, #24
 8014d90:	b2db      	uxtb	r3, r3
 8014d92:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8014d94:	e048      	b.n	8014e28 <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 8014d96:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014d98:	b2db      	uxtb	r3, r3
 8014d9a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8014d9c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014d9e:	3301      	adds	r3, #1
 8014da0:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014da2:	f107 0320 	add.w	r3, r7, #32
 8014da6:	7a7a      	ldrb	r2, [r7, #9]
 8014da8:	f107 0010 	add.w	r0, r7, #16
 8014dac:	2110      	movs	r1, #16
 8014dae:	f7f8 f9df 	bl	800d170 <SecureElementAesEncrypt>
 8014db2:	4603      	mov	r3, r0
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d001      	beq.n	8014dbc <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014db8:	230e      	movs	r3, #14
 8014dba:	e03a      	b.n	8014e32 <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8014dc2:	e01e      	b.n	8014e02 <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014dc4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8014dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014dcc:	4413      	add	r3, r2
 8014dce:	461a      	mov	r2, r3
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	4413      	add	r3, r2
 8014dd4:	7819      	ldrb	r1, [r3, #0]
 8014dd6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014dda:	3338      	adds	r3, #56	@ 0x38
 8014ddc:	443b      	add	r3, r7
 8014dde:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8014de2:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8014de6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014dea:	4403      	add	r3, r0
 8014dec:	4618      	mov	r0, r3
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	4403      	add	r3, r0
 8014df2:	404a      	eors	r2, r1
 8014df4:	b2d2      	uxtb	r2, r2
 8014df6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014df8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8014e02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014e06:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014e0a:	2a10      	cmp	r2, #16
 8014e0c:	bfa8      	it	ge
 8014e0e:	2210      	movge	r2, #16
 8014e10:	b212      	sxth	r2, r2
 8014e12:	4293      	cmp	r3, r2
 8014e14:	dbd6      	blt.n	8014dc4 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 8014e16:	897b      	ldrh	r3, [r7, #10]
 8014e18:	3b10      	subs	r3, #16
 8014e1a:	b29b      	uxth	r3, r3
 8014e1c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8014e1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014e22:	3310      	adds	r3, #16
 8014e24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8014e28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	dcb2      	bgt.n	8014d96 <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014e30:	2300      	movs	r3, #0
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	3738      	adds	r7, #56	@ 0x38
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}

08014e3a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8014e3a:	b490      	push	{r4, r7}
 8014e3c:	b082      	sub	sp, #8
 8014e3e:	af00      	add	r7, sp, #0
 8014e40:	4604      	mov	r4, r0
 8014e42:	4608      	mov	r0, r1
 8014e44:	4611      	mov	r1, r2
 8014e46:	461a      	mov	r2, r3
 8014e48:	4623      	mov	r3, r4
 8014e4a:	80fb      	strh	r3, [r7, #6]
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	717b      	strb	r3, [r7, #5]
 8014e50:	460b      	mov	r3, r1
 8014e52:	713b      	strb	r3, [r7, #4]
 8014e54:	4613      	mov	r3, r2
 8014e56:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8014e58:	69bb      	ldr	r3, [r7, #24]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d101      	bne.n	8014e62 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014e5e:	2309      	movs	r3, #9
 8014e60:	e04e      	b.n	8014f00 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8014e62:	69bb      	ldr	r3, [r7, #24]
 8014e64:	2249      	movs	r2, #73	@ 0x49
 8014e66:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8014e68:	69bb      	ldr	r3, [r7, #24]
 8014e6a:	3301      	adds	r3, #1
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014e70:	69bb      	ldr	r3, [r7, #24]
 8014e72:	3302      	adds	r3, #2
 8014e74:	2200      	movs	r2, #0
 8014e76:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014e78:	69bb      	ldr	r3, [r7, #24]
 8014e7a:	3303      	adds	r3, #3
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014e80:	69bb      	ldr	r3, [r7, #24]
 8014e82:	3304      	adds	r3, #4
 8014e84:	2200      	movs	r2, #0
 8014e86:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014e88:	69bb      	ldr	r3, [r7, #24]
 8014e8a:	3305      	adds	r3, #5
 8014e8c:	78fa      	ldrb	r2, [r7, #3]
 8014e8e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014e90:	69bb      	ldr	r3, [r7, #24]
 8014e92:	3306      	adds	r3, #6
 8014e94:	693a      	ldr	r2, [r7, #16]
 8014e96:	b2d2      	uxtb	r2, r2
 8014e98:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014e9a:	693b      	ldr	r3, [r7, #16]
 8014e9c:	0a1a      	lsrs	r2, r3, #8
 8014e9e:	69bb      	ldr	r3, [r7, #24]
 8014ea0:	3307      	adds	r3, #7
 8014ea2:	b2d2      	uxtb	r2, r2
 8014ea4:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	0c1a      	lsrs	r2, r3, #16
 8014eaa:	69bb      	ldr	r3, [r7, #24]
 8014eac:	3308      	adds	r3, #8
 8014eae:	b2d2      	uxtb	r2, r2
 8014eb0:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	0e1a      	lsrs	r2, r3, #24
 8014eb6:	69bb      	ldr	r3, [r7, #24]
 8014eb8:	3309      	adds	r3, #9
 8014eba:	b2d2      	uxtb	r2, r2
 8014ebc:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014ebe:	69bb      	ldr	r3, [r7, #24]
 8014ec0:	330a      	adds	r3, #10
 8014ec2:	697a      	ldr	r2, [r7, #20]
 8014ec4:	b2d2      	uxtb	r2, r2
 8014ec6:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	0a1a      	lsrs	r2, r3, #8
 8014ecc:	69bb      	ldr	r3, [r7, #24]
 8014ece:	330b      	adds	r3, #11
 8014ed0:	b2d2      	uxtb	r2, r2
 8014ed2:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	0c1a      	lsrs	r2, r3, #16
 8014ed8:	69bb      	ldr	r3, [r7, #24]
 8014eda:	330c      	adds	r3, #12
 8014edc:	b2d2      	uxtb	r2, r2
 8014ede:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	0e1a      	lsrs	r2, r3, #24
 8014ee4:	69bb      	ldr	r3, [r7, #24]
 8014ee6:	330d      	adds	r3, #13
 8014ee8:	b2d2      	uxtb	r2, r2
 8014eea:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8014eec:	69bb      	ldr	r3, [r7, #24]
 8014eee:	330e      	adds	r3, #14
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8014ef4:	69bb      	ldr	r3, [r7, #24]
 8014ef6:	330f      	adds	r3, #15
 8014ef8:	88fa      	ldrh	r2, [r7, #6]
 8014efa:	b2d2      	uxtb	r2, r2
 8014efc:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014efe:	2300      	movs	r3, #0
}
 8014f00:	4618      	mov	r0, r3
 8014f02:	3708      	adds	r7, #8
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bc90      	pop	{r4, r7}
 8014f08:	4770      	bx	lr

08014f0a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8014f0a:	b590      	push	{r4, r7, lr}
 8014f0c:	b08b      	sub	sp, #44	@ 0x2c
 8014f0e:	af04      	add	r7, sp, #16
 8014f10:	6078      	str	r0, [r7, #4]
 8014f12:	4608      	mov	r0, r1
 8014f14:	4611      	mov	r1, r2
 8014f16:	461a      	mov	r2, r3
 8014f18:	4603      	mov	r3, r0
 8014f1a:	807b      	strh	r3, [r7, #2]
 8014f1c:	460b      	mov	r3, r1
 8014f1e:	707b      	strb	r3, [r7, #1]
 8014f20:	4613      	mov	r3, r2
 8014f22:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d002      	beq.n	8014f30 <ComputeCmacB0+0x26>
 8014f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d101      	bne.n	8014f34 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014f30:	2309      	movs	r3, #9
 8014f32:	e024      	b.n	8014f7e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014f34:	887b      	ldrh	r3, [r7, #2]
 8014f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014f3a:	d901      	bls.n	8014f40 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014f3c:	230d      	movs	r3, #13
 8014f3e:	e01e      	b.n	8014f7e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014f40:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8014f44:	783a      	ldrb	r2, [r7, #0]
 8014f46:	7879      	ldrb	r1, [r7, #1]
 8014f48:	8878      	ldrh	r0, [r7, #2]
 8014f4a:	f107 0308 	add.w	r3, r7, #8
 8014f4e:	9302      	str	r3, [sp, #8]
 8014f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f52:	9301      	str	r3, [sp, #4]
 8014f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f56:	9300      	str	r3, [sp, #0]
 8014f58:	4623      	mov	r3, r4
 8014f5a:	f7ff ff6e 	bl	8014e3a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014f5e:	887a      	ldrh	r2, [r7, #2]
 8014f60:	7879      	ldrb	r1, [r7, #1]
 8014f62:	f107 0008 	add.w	r0, r7, #8
 8014f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f68:	9300      	str	r3, [sp, #0]
 8014f6a:	460b      	mov	r3, r1
 8014f6c:	6879      	ldr	r1, [r7, #4]
 8014f6e:	f7f8 f8b9 	bl	800d0e4 <SecureElementComputeAesCmac>
 8014f72:	4603      	mov	r3, r0
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d001      	beq.n	8014f7c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014f78:	230e      	movs	r3, #14
 8014f7a:	e000      	b.n	8014f7e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014f7c:	2300      	movs	r3, #0
}
 8014f7e:	4618      	mov	r0, r3
 8014f80:	371c      	adds	r7, #28
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd90      	pop	{r4, r7, pc}

08014f86 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014f86:	b590      	push	{r4, r7, lr}
 8014f88:	b0cd      	sub	sp, #308	@ 0x134
 8014f8a:	af04      	add	r7, sp, #16
 8014f8c:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8014f90:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8014f94:	6020      	str	r0, [r4, #0]
 8014f96:	460c      	mov	r4, r1
 8014f98:	4610      	mov	r0, r2
 8014f9a:	4619      	mov	r1, r3
 8014f9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014fa0:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014fa4:	4622      	mov	r2, r4
 8014fa6:	801a      	strh	r2, [r3, #0]
 8014fa8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014fac:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014fb0:	4602      	mov	r2, r0
 8014fb2:	701a      	strb	r2, [r3, #0]
 8014fb4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014fb8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014fbc:	460a      	mov	r2, r1
 8014fbe:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014fc0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014fc4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d101      	bne.n	8014fd2 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014fce:	2309      	movs	r3, #9
 8014fd0:	e063      	b.n	801509a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014fd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014fd6:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014fda:	881b      	ldrh	r3, [r3, #0]
 8014fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014fe0:	d901      	bls.n	8014fe6 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014fe2:	230d      	movs	r3, #13
 8014fe4:	e059      	b.n	801509a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014fe6:	f107 030c 	add.w	r3, r7, #12
 8014fea:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8014fee:	2100      	movs	r1, #0
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f003 facf 	bl	8018594 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014ff6:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8014ffa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014ffe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015002:	781a      	ldrb	r2, [r3, #0]
 8015004:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015008:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801500c:	7819      	ldrb	r1, [r3, #0]
 801500e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015012:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8015016:	8818      	ldrh	r0, [r3, #0]
 8015018:	f107 030c 	add.w	r3, r7, #12
 801501c:	9302      	str	r3, [sp, #8]
 801501e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015022:	9301      	str	r3, [sp, #4]
 8015024:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015028:	9300      	str	r3, [sp, #0]
 801502a:	4623      	mov	r3, r4
 801502c:	f7ff ff05 	bl	8014e3a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8015030:	f107 030c 	add.w	r3, r7, #12
 8015034:	3310      	adds	r3, #16
 8015036:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801503a:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 801503e:	8812      	ldrh	r2, [r2, #0]
 8015040:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8015044:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8015048:	6809      	ldr	r1, [r1, #0]
 801504a:	4618      	mov	r0, r3
 801504c:	f003 fa67 	bl	801851e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8015050:	2306      	movs	r3, #6
 8015052:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8015056:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801505a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801505e:	881b      	ldrh	r3, [r3, #0]
 8015060:	3310      	adds	r3, #16
 8015062:	4619      	mov	r1, r3
 8015064:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015068:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801506c:	781b      	ldrb	r3, [r3, #0]
 801506e:	f107 000c 	add.w	r0, r7, #12
 8015072:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8015076:	f7f8 f84f 	bl	800d118 <SecureElementVerifyAesCmac>
 801507a:	4603      	mov	r3, r0
 801507c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015080:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8015084:	2b00      	cmp	r3, #0
 8015086:	d101      	bne.n	801508c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8015088:	2300      	movs	r3, #0
 801508a:	e006      	b.n	801509a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801508c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8015090:	2b01      	cmp	r3, #1
 8015092:	d101      	bne.n	8015098 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015094:	2301      	movs	r3, #1
 8015096:	e000      	b.n	801509a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015098:	230e      	movs	r3, #14
}
 801509a:	4618      	mov	r0, r3
 801509c:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd90      	pop	{r4, r7, pc}

080150a4 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80150a4:	b480      	push	{r7}
 80150a6:	b085      	sub	sp, #20
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	4603      	mov	r3, r0
 80150ac:	6039      	str	r1, [r7, #0]
 80150ae:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80150b0:	2300      	movs	r3, #0
 80150b2:	73fb      	strb	r3, [r7, #15]
 80150b4:	e011      	b.n	80150da <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80150b6:	7bfb      	ldrb	r3, [r7, #15]
 80150b8:	4a0c      	ldr	r2, [pc, #48]	@ (80150ec <GetKeyAddrItem+0x48>)
 80150ba:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80150be:	79fa      	ldrb	r2, [r7, #7]
 80150c0:	429a      	cmp	r2, r3
 80150c2:	d107      	bne.n	80150d4 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80150c4:	7bfb      	ldrb	r3, [r7, #15]
 80150c6:	009b      	lsls	r3, r3, #2
 80150c8:	4a08      	ldr	r2, [pc, #32]	@ (80150ec <GetKeyAddrItem+0x48>)
 80150ca:	441a      	add	r2, r3
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80150d0:	2300      	movs	r3, #0
 80150d2:	e006      	b.n	80150e2 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80150d4:	7bfb      	ldrb	r3, [r7, #15]
 80150d6:	3301      	adds	r3, #1
 80150d8:	73fb      	strb	r3, [r7, #15]
 80150da:	7bfb      	ldrb	r3, [r7, #15]
 80150dc:	2b01      	cmp	r3, #1
 80150de:	d9ea      	bls.n	80150b6 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80150e0:	230b      	movs	r3, #11
}
 80150e2:	4618      	mov	r0, r3
 80150e4:	3714      	adds	r7, #20
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bc80      	pop	{r7}
 80150ea:	4770      	bx	lr
 80150ec:	20000110 	.word	0x20000110

080150f0 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b088      	sub	sp, #32
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	60b9      	str	r1, [r7, #8]
 80150f8:	607a      	str	r2, [r7, #4]
 80150fa:	461a      	mov	r2, r3
 80150fc:	4603      	mov	r3, r0
 80150fe:	73fb      	strb	r3, [r7, #15]
 8015100:	4613      	mov	r3, r2
 8015102:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8015104:	f107 0310 	add.w	r3, r7, #16
 8015108:	2200      	movs	r2, #0
 801510a:	601a      	str	r2, [r3, #0]
 801510c:	605a      	str	r2, [r3, #4]
 801510e:	609a      	str	r2, [r3, #8]
 8015110:	60da      	str	r2, [r3, #12]

    switch( keyID )
 8015112:	7bfb      	ldrb	r3, [r7, #15]
 8015114:	2b08      	cmp	r3, #8
 8015116:	d002      	beq.n	801511e <DeriveSessionKey10x+0x2e>
 8015118:	2b09      	cmp	r3, #9
 801511a:	d003      	beq.n	8015124 <DeriveSessionKey10x+0x34>
 801511c:	e005      	b.n	801512a <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 801511e:	2301      	movs	r3, #1
 8015120:	743b      	strb	r3, [r7, #16]
            break;
 8015122:	e004      	b.n	801512e <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8015124:	2302      	movs	r3, #2
 8015126:	743b      	strb	r3, [r7, #16]
            break;
 8015128:	e001      	b.n	801512e <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801512a:	230a      	movs	r3, #10
 801512c:	e02a      	b.n	8015184 <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	b2db      	uxtb	r3, r3
 8015132:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8015134:	68bb      	ldr	r3, [r7, #8]
 8015136:	0a1b      	lsrs	r3, r3, #8
 8015138:	b2db      	uxtb	r3, r3
 801513a:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	0c1b      	lsrs	r3, r3, #16
 8015140:	b2db      	uxtb	r3, r3
 8015142:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	b2db      	uxtb	r3, r3
 8015148:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	0a1b      	lsrs	r3, r3, #8
 801514e:	b2db      	uxtb	r3, r3
 8015150:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	0c1b      	lsrs	r3, r3, #16
 8015156:	b2db      	uxtb	r3, r3
 8015158:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801515a:	89bb      	ldrh	r3, [r7, #12]
 801515c:	b2db      	uxtb	r3, r3
 801515e:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8015160:	89bb      	ldrh	r3, [r7, #12]
 8015162:	0a1b      	lsrs	r3, r3, #8
 8015164:	b29b      	uxth	r3, r3
 8015166:	b2db      	uxtb	r3, r3
 8015168:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801516a:	7bfa      	ldrb	r2, [r7, #15]
 801516c:	f107 0310 	add.w	r3, r7, #16
 8015170:	2101      	movs	r1, #1
 8015172:	4618      	mov	r0, r3
 8015174:	f7f8 f87c 	bl	800d270 <SecureElementDeriveAndStoreKey>
 8015178:	4603      	mov	r3, r0
 801517a:	2b00      	cmp	r3, #0
 801517c:	d001      	beq.n	8015182 <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801517e:	230e      	movs	r3, #14
 8015180:	e000      	b.n	8015184 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015182:	2300      	movs	r3, #0
}
 8015184:	4618      	mov	r0, r3
 8015186:	3720      	adds	r7, #32
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}

0801518c <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801518c:	b480      	push	{r7}
 801518e:	b083      	sub	sp, #12
 8015190:	af00      	add	r7, sp, #0
 8015192:	4603      	mov	r3, r0
 8015194:	6039      	str	r1, [r7, #0]
 8015196:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8015198:	683b      	ldr	r3, [r7, #0]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d101      	bne.n	80151a2 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801519e:	2309      	movs	r3, #9
 80151a0:	e029      	b.n	80151f6 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 80151a2:	79fb      	ldrb	r3, [r7, #7]
 80151a4:	3b01      	subs	r3, #1
 80151a6:	2b03      	cmp	r3, #3
 80151a8:	d822      	bhi.n	80151f0 <GetLastFcntDown+0x64>
 80151aa:	a201      	add	r2, pc, #4	@ (adr r2, 80151b0 <GetLastFcntDown+0x24>)
 80151ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151b0:	080151c1 	.word	0x080151c1
 80151b4:	080151cd 	.word	0x080151cd
 80151b8:	080151d9 	.word	0x080151d9
 80151bc:	080151e5 	.word	0x080151e5
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80151c0:	4b0f      	ldr	r3, [pc, #60]	@ (8015200 <GetLastFcntDown+0x74>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	691a      	ldr	r2, [r3, #16]
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	601a      	str	r2, [r3, #0]
            break;
 80151ca:	e013      	b.n	80151f4 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80151cc:	4b0c      	ldr	r3, [pc, #48]	@ (8015200 <GetLastFcntDown+0x74>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	695a      	ldr	r2, [r3, #20]
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	601a      	str	r2, [r3, #0]
            break;
 80151d6:	e00d      	b.n	80151f4 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80151d8:	4b09      	ldr	r3, [pc, #36]	@ (8015200 <GetLastFcntDown+0x74>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	699a      	ldr	r2, [r3, #24]
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	601a      	str	r2, [r3, #0]
            break;
 80151e2:	e007      	b.n	80151f4 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80151e4:	4b06      	ldr	r3, [pc, #24]	@ (8015200 <GetLastFcntDown+0x74>)
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	69da      	ldr	r2, [r3, #28]
 80151ea:	683b      	ldr	r3, [r7, #0]
 80151ec:	601a      	str	r2, [r3, #0]
            break;
 80151ee:	e001      	b.n	80151f4 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80151f0:	2305      	movs	r3, #5
 80151f2:	e000      	b.n	80151f6 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80151f4:	2300      	movs	r3, #0
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	370c      	adds	r7, #12
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bc80      	pop	{r7}
 80151fe:	4770      	bx	lr
 8015200:	20001c18 	.word	0x20001c18

08015204 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b084      	sub	sp, #16
 8015208:	af00      	add	r7, sp, #0
 801520a:	4603      	mov	r3, r0
 801520c:	6039      	str	r1, [r7, #0]
 801520e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8015210:	2300      	movs	r3, #0
 8015212:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8015214:	f107 020c 	add.w	r2, r7, #12
 8015218:	79fb      	ldrb	r3, [r7, #7]
 801521a:	4611      	mov	r1, r2
 801521c:	4618      	mov	r0, r3
 801521e:	f7ff ffb5 	bl	801518c <GetLastFcntDown>
 8015222:	4603      	mov	r3, r0
 8015224:	2b00      	cmp	r3, #0
 8015226:	d001      	beq.n	801522c <CheckFCntDown+0x28>
    {
        return false;
 8015228:	2300      	movs	r3, #0
 801522a:	e00a      	b.n	8015242 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	683a      	ldr	r2, [r7, #0]
 8015230:	429a      	cmp	r2, r3
 8015232:	d803      	bhi.n	801523c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8015234:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015236:	f1b3 3fff 	cmp.w	r3, #4294967295
 801523a:	d101      	bne.n	8015240 <CheckFCntDown+0x3c>
    {
        return true;
 801523c:	2301      	movs	r3, #1
 801523e:	e000      	b.n	8015242 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015240:	2300      	movs	r3, #0
    }
}
 8015242:	4618      	mov	r0, r3
 8015244:	3710      	adds	r7, #16
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}
	...

0801524c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801524c:	b480      	push	{r7}
 801524e:	b083      	sub	sp, #12
 8015250:	af00      	add	r7, sp, #0
 8015252:	4603      	mov	r3, r0
 8015254:	6039      	str	r1, [r7, #0]
 8015256:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8015258:	79fb      	ldrb	r3, [r7, #7]
 801525a:	3b01      	subs	r3, #1
 801525c:	2b03      	cmp	r3, #3
 801525e:	d82b      	bhi.n	80152b8 <UpdateFCntDown+0x6c>
 8015260:	a201      	add	r2, pc, #4	@ (adr r2, 8015268 <UpdateFCntDown+0x1c>)
 8015262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015266:	bf00      	nop
 8015268:	08015279 	.word	0x08015279
 801526c:	0801528b 	.word	0x0801528b
 8015270:	0801529d 	.word	0x0801529d
 8015274:	080152af 	.word	0x080152af
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8015278:	4b12      	ldr	r3, [pc, #72]	@ (80152c4 <UpdateFCntDown+0x78>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	683a      	ldr	r2, [r7, #0]
 801527e:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8015280:	4b10      	ldr	r3, [pc, #64]	@ (80152c4 <UpdateFCntDown+0x78>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	683a      	ldr	r2, [r7, #0]
 8015286:	621a      	str	r2, [r3, #32]
            break;
 8015288:	e017      	b.n	80152ba <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801528a:	4b0e      	ldr	r3, [pc, #56]	@ (80152c4 <UpdateFCntDown+0x78>)
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	683a      	ldr	r2, [r7, #0]
 8015290:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8015292:	4b0c      	ldr	r3, [pc, #48]	@ (80152c4 <UpdateFCntDown+0x78>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	683a      	ldr	r2, [r7, #0]
 8015298:	621a      	str	r2, [r3, #32]
            break;
 801529a:	e00e      	b.n	80152ba <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 801529c:	4b09      	ldr	r3, [pc, #36]	@ (80152c4 <UpdateFCntDown+0x78>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	683a      	ldr	r2, [r7, #0]
 80152a2:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 80152a4:	4b07      	ldr	r3, [pc, #28]	@ (80152c4 <UpdateFCntDown+0x78>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	683a      	ldr	r2, [r7, #0]
 80152aa:	621a      	str	r2, [r3, #32]
            break;
 80152ac:	e005      	b.n	80152ba <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80152ae:	4b05      	ldr	r3, [pc, #20]	@ (80152c4 <UpdateFCntDown+0x78>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	683a      	ldr	r2, [r7, #0]
 80152b4:	61da      	str	r2, [r3, #28]
            break;
 80152b6:	e000      	b.n	80152ba <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80152b8:	bf00      	nop
    }
}
 80152ba:	bf00      	nop
 80152bc:	370c      	adds	r7, #12
 80152be:	46bd      	mov	sp, r7
 80152c0:	bc80      	pop	{r7}
 80152c2:	4770      	bx	lr
 80152c4:	20001c18 	.word	0x20001c18

080152c8 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80152c8:	b480      	push	{r7}
 80152ca:	b083      	sub	sp, #12
 80152cc:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80152ce:	4b18      	ldr	r3, [pc, #96]	@ (8015330 <ResetFCnts+0x68>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	2200      	movs	r2, #0
 80152d4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80152d6:	4b16      	ldr	r3, [pc, #88]	@ (8015330 <ResetFCnts+0x68>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	f04f 32ff 	mov.w	r2, #4294967295
 80152de:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80152e0:	4b13      	ldr	r3, [pc, #76]	@ (8015330 <ResetFCnts+0x68>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	f04f 32ff 	mov.w	r2, #4294967295
 80152e8:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80152ea:	4b11      	ldr	r3, [pc, #68]	@ (8015330 <ResetFCnts+0x68>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	f04f 32ff 	mov.w	r2, #4294967295
 80152f2:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80152f4:	4b0e      	ldr	r3, [pc, #56]	@ (8015330 <ResetFCnts+0x68>)
 80152f6:	681a      	ldr	r2, [r3, #0]
 80152f8:	4b0d      	ldr	r3, [pc, #52]	@ (8015330 <ResetFCnts+0x68>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	6992      	ldr	r2, [r2, #24]
 80152fe:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015300:	2300      	movs	r3, #0
 8015302:	607b      	str	r3, [r7, #4]
 8015304:	e00b      	b.n	801531e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8015306:	4b0a      	ldr	r3, [pc, #40]	@ (8015330 <ResetFCnts+0x68>)
 8015308:	681a      	ldr	r2, [r3, #0]
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	3306      	adds	r3, #6
 801530e:	009b      	lsls	r3, r3, #2
 8015310:	4413      	add	r3, r2
 8015312:	f04f 32ff 	mov.w	r2, #4294967295
 8015316:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	3301      	adds	r3, #1
 801531c:	607b      	str	r3, [r7, #4]
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2b00      	cmp	r3, #0
 8015322:	ddf0      	ble.n	8015306 <ResetFCnts+0x3e>
    }
}
 8015324:	bf00      	nop
 8015326:	bf00      	nop
 8015328:	370c      	adds	r7, #12
 801532a:	46bd      	mov	sp, r7
 801532c:	bc80      	pop	{r7}
 801532e:	4770      	bx	lr
 8015330:	20001c18 	.word	0x20001c18

08015334 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8015334:	b480      	push	{r7}
 8015336:	b083      	sub	sp, #12
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 801533c:	4b06      	ldr	r3, [pc, #24]	@ (8015358 <IsJoinNonce10xOk+0x24>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	689b      	ldr	r3, [r3, #8]
 8015342:	687a      	ldr	r2, [r7, #4]
 8015344:	429a      	cmp	r2, r3
 8015346:	bf8c      	ite	hi
 8015348:	2301      	movhi	r3, #1
 801534a:	2300      	movls	r3, #0
 801534c:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801534e:	4618      	mov	r0, r3
 8015350:	370c      	adds	r7, #12
 8015352:	46bd      	mov	sp, r7
 8015354:	bc80      	pop	{r7}
 8015356:	4770      	bx	lr
 8015358:	20001c18 	.word	0x20001c18

0801535c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d101      	bne.n	801536e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801536a:	2308      	movs	r3, #8
 801536c:	e01c      	b.n	80153a8 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801536e:	4a10      	ldr	r2, [pc, #64]	@ (80153b0 <LoRaMacCryptoInit+0x54>)
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8015374:	4b0e      	ldr	r3, [pc, #56]	@ (80153b0 <LoRaMacCryptoInit+0x54>)
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	2228      	movs	r2, #40	@ 0x28
 801537a:	2100      	movs	r1, #0
 801537c:	4618      	mov	r0, r3
 801537e:	f003 f909 	bl	8018594 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8015382:	4b0b      	ldr	r3, [pc, #44]	@ (80153b0 <LoRaMacCryptoInit+0x54>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	2201      	movs	r2, #1
 8015388:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801538a:	4b09      	ldr	r3, [pc, #36]	@ (80153b0 <LoRaMacCryptoInit+0x54>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	2201      	movs	r2, #1
 8015390:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8015392:	4b07      	ldr	r3, [pc, #28]	@ (80153b0 <LoRaMacCryptoInit+0x54>)
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	2201      	movs	r2, #1
 8015398:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801539a:	4b05      	ldr	r3, [pc, #20]	@ (80153b0 <LoRaMacCryptoInit+0x54>)
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	2200      	movs	r2, #0
 80153a0:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80153a2:	f7ff ff91 	bl	80152c8 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80153a6:	2300      	movs	r3, #0
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	3708      	adds	r7, #8
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}
 80153b0:	20001c18 	.word	0x20001c18

080153b4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80153b4:	b480      	push	{r7}
 80153b6:	b083      	sub	sp, #12
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80153bc:	4b04      	ldr	r3, [pc, #16]	@ (80153d0 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	687a      	ldr	r2, [r7, #4]
 80153c2:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80153c4:	2300      	movs	r3, #0
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	370c      	adds	r7, #12
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bc80      	pop	{r7}
 80153ce:	4770      	bx	lr
 80153d0:	20001c18 	.word	0x20001c18

080153d4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80153d4:	b480      	push	{r7}
 80153d6:	b083      	sub	sp, #12
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d101      	bne.n	80153e6 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80153e2:	2309      	movs	r3, #9
 80153e4:	e006      	b.n	80153f4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80153e6:	4b06      	ldr	r3, [pc, #24]	@ (8015400 <LoRaMacCryptoGetFCntUp+0x2c>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	1c5a      	adds	r2, r3, #1
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80153f2:	2300      	movs	r3, #0
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	370c      	adds	r7, #12
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bc80      	pop	{r7}
 80153fc:	4770      	bx	lr
 80153fe:	bf00      	nop
 8015400:	20001c18 	.word	0x20001c18

08015404 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b088      	sub	sp, #32
 8015408:	af00      	add	r7, sp, #0
 801540a:	4603      	mov	r3, r0
 801540c:	60b9      	str	r1, [r7, #8]
 801540e:	607a      	str	r2, [r7, #4]
 8015410:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8015412:	2300      	movs	r3, #0
 8015414:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8015416:	2300      	movs	r3, #0
 8015418:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801541a:	2312      	movs	r3, #18
 801541c:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d101      	bne.n	8015428 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015424:	2309      	movs	r3, #9
 8015426:	e035      	b.n	8015494 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015428:	f107 0214 	add.w	r2, r7, #20
 801542c:	7bfb      	ldrb	r3, [r7, #15]
 801542e:	4611      	mov	r1, r2
 8015430:	4618      	mov	r0, r3
 8015432:	f7ff feab 	bl	801518c <GetLastFcntDown>
 8015436:	4603      	mov	r3, r0
 8015438:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801543a:	7efb      	ldrb	r3, [r7, #27]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d001      	beq.n	8015444 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8015440:	7efb      	ldrb	r3, [r7, #27]
 8015442:	e027      	b.n	8015494 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8015444:	697b      	ldr	r3, [r7, #20]
 8015446:	f1b3 3fff 	cmp.w	r3, #4294967295
 801544a:	d103      	bne.n	8015454 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	68ba      	ldr	r2, [r7, #8]
 8015450:	601a      	str	r2, [r3, #0]
 8015452:	e01e      	b.n	8015492 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015454:	697b      	ldr	r3, [r7, #20]
 8015456:	b29b      	uxth	r3, r3
 8015458:	68ba      	ldr	r2, [r7, #8]
 801545a:	1ad3      	subs	r3, r2, r3
 801545c:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 801545e:	69fb      	ldr	r3, [r7, #28]
 8015460:	2b00      	cmp	r3, #0
 8015462:	dd05      	ble.n	8015470 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015464:	697a      	ldr	r2, [r7, #20]
 8015466:	69fb      	ldr	r3, [r7, #28]
 8015468:	441a      	add	r2, r3
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	601a      	str	r2, [r3, #0]
 801546e:	e010      	b.n	8015492 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8015470:	69fb      	ldr	r3, [r7, #28]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d104      	bne.n	8015480 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015476:	697a      	ldr	r2, [r7, #20]
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801547c:	2307      	movs	r3, #7
 801547e:	e009      	b.n	8015494 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	0c1b      	lsrs	r3, r3, #16
 8015484:	041b      	lsls	r3, r3, #16
 8015486:	68ba      	ldr	r2, [r7, #8]
 8015488:	4413      	add	r3, r2
 801548a:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015492:	2300      	movs	r3, #0
}
 8015494:	4618      	mov	r0, r3
 8015496:	3720      	adds	r7, #32
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}

0801549c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 801549c:	b480      	push	{r7}
 801549e:	b085      	sub	sp, #20
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d101      	bne.n	80154ae <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80154aa:	2309      	movs	r3, #9
 80154ac:	e019      	b.n	80154e2 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80154ae:	2300      	movs	r3, #0
 80154b0:	60fb      	str	r3, [r7, #12]
 80154b2:	e012      	b.n	80154da <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80154b4:	4b0d      	ldr	r3, [pc, #52]	@ (80154ec <LoRaMacCryptoSetMulticastReference+0x50>)
 80154b6:	6819      	ldr	r1, [r3, #0]
 80154b8:	68fa      	ldr	r2, [r7, #12]
 80154ba:	4613      	mov	r3, r2
 80154bc:	005b      	lsls	r3, r3, #1
 80154be:	4413      	add	r3, r2
 80154c0:	011b      	lsls	r3, r3, #4
 80154c2:	461a      	mov	r2, r3
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	4413      	add	r3, r2
 80154c8:	68fa      	ldr	r2, [r7, #12]
 80154ca:	3206      	adds	r2, #6
 80154cc:	0092      	lsls	r2, r2, #2
 80154ce:	440a      	add	r2, r1
 80154d0:	3204      	adds	r2, #4
 80154d2:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	3301      	adds	r3, #1
 80154d8:	60fb      	str	r3, [r7, #12]
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	dde9      	ble.n	80154b4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80154e0:	2300      	movs	r3, #0
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3714      	adds	r7, #20
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bc80      	pop	{r7}
 80154ea:	4770      	bx	lr
 80154ec:	20001c18 	.word	0x20001c18

080154f0 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b082      	sub	sp, #8
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	4603      	mov	r3, r0
 80154f8:	6039      	str	r1, [r7, #0]
 80154fa:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80154fc:	79fb      	ldrb	r3, [r7, #7]
 80154fe:	6839      	ldr	r1, [r7, #0]
 8015500:	4618      	mov	r0, r3
 8015502:	f7f7 fd91 	bl	800d028 <SecureElementSetKey>
 8015506:	4603      	mov	r3, r0
 8015508:	2b00      	cmp	r3, #0
 801550a:	d001      	beq.n	8015510 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801550c:	230e      	movs	r3, #14
 801550e:	e021      	b.n	8015554 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8015510:	79fb      	ldrb	r3, [r7, #7]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d11d      	bne.n	8015552 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015516:	4b11      	ldr	r3, [pc, #68]	@ (801555c <LoRaMacCryptoSetKey+0x6c>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	789b      	ldrb	r3, [r3, #2]
 801551c:	210b      	movs	r1, #11
 801551e:	4618      	mov	r0, r3
 8015520:	f000 fa54 	bl	80159cc <LoRaMacCryptoDeriveLifeTimeKey>
 8015524:	4603      	mov	r3, r0
 8015526:	2b00      	cmp	r3, #0
 8015528:	d001      	beq.n	801552e <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801552a:	230e      	movs	r3, #14
 801552c:	e012      	b.n	8015554 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801552e:	210c      	movs	r1, #12
 8015530:	2000      	movs	r0, #0
 8015532:	f000 fa4b 	bl	80159cc <LoRaMacCryptoDeriveLifeTimeKey>
 8015536:	4603      	mov	r3, r0
 8015538:	2b00      	cmp	r3, #0
 801553a:	d001      	beq.n	8015540 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801553c:	230e      	movs	r3, #14
 801553e:	e009      	b.n	8015554 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015540:	210a      	movs	r1, #10
 8015542:	2000      	movs	r0, #0
 8015544:	f000 fa42 	bl	80159cc <LoRaMacCryptoDeriveLifeTimeKey>
 8015548:	4603      	mov	r3, r0
 801554a:	2b00      	cmp	r3, #0
 801554c:	d001      	beq.n	8015552 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801554e:	230e      	movs	r3, #14
 8015550:	e000      	b.n	8015554 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015552:	2300      	movs	r3, #0
}
 8015554:	4618      	mov	r0, r3
 8015556:	3708      	adds	r7, #8
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}
 801555c:	20001c18 	.word	0x20001c18

08015560 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b086      	sub	sp, #24
 8015564:	af02      	add	r7, sp, #8
 8015566:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d101      	bne.n	8015572 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801556e:	2309      	movs	r3, #9
 8015570:	e02d      	b.n	80155ce <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015572:	2301      	movs	r3, #1
 8015574:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8015576:	4b18      	ldr	r3, [pc, #96]	@ (80155d8 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	889a      	ldrh	r2, [r3, #4]
 801557c:	3201      	adds	r2, #1
 801557e:	b292      	uxth	r2, r2
 8015580:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8015582:	4b15      	ldr	r3, [pc, #84]	@ (80155d8 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	889a      	ldrh	r2, [r3, #4]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801558c:	6878      	ldr	r0, [r7, #4]
 801558e:	f000 fc14 	bl	8015dba <LoRaMacSerializerJoinRequest>
 8015592:	4603      	mov	r3, r0
 8015594:	2b00      	cmp	r3, #0
 8015596:	d001      	beq.n	801559c <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015598:	2310      	movs	r3, #16
 801559a:	e018      	b.n	80155ce <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6819      	ldr	r1, [r3, #0]
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	3318      	adds	r3, #24
 80155a4:	7bfa      	ldrb	r2, [r7, #15]
 80155a6:	9300      	str	r3, [sp, #0]
 80155a8:	4613      	mov	r3, r2
 80155aa:	2213      	movs	r2, #19
 80155ac:	2000      	movs	r0, #0
 80155ae:	f7f7 fd99 	bl	800d0e4 <SecureElementComputeAesCmac>
 80155b2:	4603      	mov	r3, r0
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d001      	beq.n	80155bc <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80155b8:	230e      	movs	r3, #14
 80155ba:	e008      	b.n	80155ce <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	f000 fbfc 	bl	8015dba <LoRaMacSerializerJoinRequest>
 80155c2:	4603      	mov	r3, r0
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d001      	beq.n	80155cc <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80155c8:	2310      	movs	r3, #16
 80155ca:	e000      	b.n	80155ce <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80155cc:	2300      	movs	r3, #0
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	3710      	adds	r7, #16
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	bf00      	nop
 80155d8:	20001c18 	.word	0x20001c18

080155dc <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80155dc:	b590      	push	{r4, r7, lr}
 80155de:	b097      	sub	sp, #92	@ 0x5c
 80155e0:	af04      	add	r7, sp, #16
 80155e2:	4603      	mov	r3, r0
 80155e4:	60b9      	str	r1, [r7, #8]
 80155e6:	607a      	str	r2, [r7, #4]
 80155e8:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d002      	beq.n	80155f6 <LoRaMacCryptoHandleJoinAccept+0x1a>
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d101      	bne.n	80155fa <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80155f6:	2309      	movs	r3, #9
 80155f8:	e0d1      	b.n	801579e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80155fa:	2312      	movs	r3, #18
 80155fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8015600:	f107 0314 	add.w	r3, r7, #20
 8015604:	2221      	movs	r2, #33	@ 0x21
 8015606:	2100      	movs	r1, #0
 8015608:	4618      	mov	r0, r3
 801560a:	f007 fd5d 	bl	801d0c8 <memset>
    uint8_t versionMinor         = 0;
 801560e:	2300      	movs	r3, #0
 8015610:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8015612:	4b65      	ldr	r3, [pc, #404]	@ (80157a8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	889b      	ldrh	r3, [r3, #4]
 8015618:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681c      	ldr	r4, [r3, #0]
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	791b      	ldrb	r3, [r3, #4]
 8015624:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8015628:	7bf8      	ldrb	r0, [r7, #15]
 801562a:	f107 0213 	add.w	r2, r7, #19
 801562e:	9202      	str	r2, [sp, #8]
 8015630:	f107 0214 	add.w	r2, r7, #20
 8015634:	9201      	str	r2, [sp, #4]
 8015636:	9300      	str	r3, [sp, #0]
 8015638:	4623      	mov	r3, r4
 801563a:	460a      	mov	r2, r1
 801563c:	68b9      	ldr	r1, [r7, #8]
 801563e:	f7f7 fe56 	bl	800d2ee <SecureElementProcessJoinAccept>
 8015642:	4603      	mov	r3, r0
 8015644:	2b00      	cmp	r3, #0
 8015646:	d001      	beq.n	801564c <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015648:	230e      	movs	r3, #14
 801564a:	e0a8      	b.n	801579e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	6818      	ldr	r0, [r3, #0]
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	791b      	ldrb	r3, [r3, #4]
 8015654:	461a      	mov	r2, r3
 8015656:	f107 0314 	add.w	r3, r7, #20
 801565a:	4619      	mov	r1, r3
 801565c:	f002 ff5f 	bl	801851e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015660:	6878      	ldr	r0, [r7, #4]
 8015662:	f000 f9ed 	bl	8015a40 <LoRaMacParserJoinAccept>
 8015666:	4603      	mov	r3, r0
 8015668:	2b00      	cmp	r3, #0
 801566a:	d001      	beq.n	8015670 <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801566c:	230f      	movs	r3, #15
 801566e:	e096      	b.n	801579e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8015670:	2300      	movs	r3, #0
 8015672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	799b      	ldrb	r3, [r3, #6]
 801567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	79db      	ldrb	r3, [r3, #7]
 8015680:	021b      	lsls	r3, r3, #8
 8015682:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015684:	4313      	orrs	r3, r2
 8015686:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	7a1b      	ldrb	r3, [r3, #8]
 801568c:	041b      	lsls	r3, r3, #16
 801568e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015690:	4313      	orrs	r3, r2
 8015692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8015694:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015696:	f7ff fe4d 	bl	8015334 <IsJoinNonce10xOk>
 801569a:	4603      	mov	r3, r0
 801569c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 80156a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d010      	beq.n	80156ca <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80156a8:	4b3f      	ldr	r3, [pc, #252]	@ (80157a8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80156ae:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 80156b0:	7cfb      	ldrb	r3, [r7, #19]
 80156b2:	210b      	movs	r1, #11
 80156b4:	4618      	mov	r0, r3
 80156b6:	f000 f989 	bl	80159cc <LoRaMacCryptoDeriveLifeTimeKey>
 80156ba:	4603      	mov	r3, r0
 80156bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80156c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d005      	beq.n	80156d4 <LoRaMacCryptoHandleJoinAccept+0xf8>
 80156c8:	e001      	b.n	80156ce <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80156ca:	2303      	movs	r3, #3
 80156cc:	e067      	b.n	801579e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 80156ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80156d2:	e064      	b.n	801579e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 80156d4:	210c      	movs	r1, #12
 80156d6:	2000      	movs	r0, #0
 80156d8:	f000 f978 	bl	80159cc <LoRaMacCryptoDeriveLifeTimeKey>
 80156dc:	4603      	mov	r3, r0
 80156de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80156e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d002      	beq.n	80156f0 <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 80156ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80156ee:	e056      	b.n	801579e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 80156f0:	210a      	movs	r1, #10
 80156f2:	2000      	movs	r0, #0
 80156f4:	f000 f96a 	bl	80159cc <LoRaMacCryptoDeriveLifeTimeKey>
 80156f8:	4603      	mov	r3, r0
 80156fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80156fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015702:	2b00      	cmp	r3, #0
 8015704:	d002      	beq.n	801570c <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 8015706:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801570a:	e048      	b.n	801579e <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	7a5b      	ldrb	r3, [r3, #9]
 8015710:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	7a9b      	ldrb	r3, [r3, #10]
 8015716:	021b      	lsls	r3, r3, #8
 8015718:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801571a:	4313      	orrs	r3, r2
 801571c:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	7adb      	ldrb	r3, [r3, #11]
 8015722:	041b      	lsls	r3, r3, #16
 8015724:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015726:	4313      	orrs	r3, r2
 8015728:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801572a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801572e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015730:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015732:	2009      	movs	r0, #9
 8015734:	f7ff fcdc 	bl	80150f0 <DeriveSessionKey10x>
 8015738:	4603      	mov	r3, r0
 801573a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801573e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015742:	2b00      	cmp	r3, #0
 8015744:	d002      	beq.n	801574c <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 8015746:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801574a:	e028      	b.n	801579e <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 801574c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015750:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015752:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015754:	2008      	movs	r0, #8
 8015756:	f7ff fccb 	bl	80150f0 <DeriveSessionKey10x>
 801575a:	4603      	mov	r3, r0
 801575c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015760:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015764:	2b00      	cmp	r3, #0
 8015766:	d002      	beq.n	801576e <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 8015768:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801576c:	e017      	b.n	801579e <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801576e:	4b0e      	ldr	r3, [pc, #56]	@ (80157a8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	7cfa      	ldrb	r2, [r7, #19]
 8015774:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8015776:	4b0c      	ldr	r3, [pc, #48]	@ (80157a8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2200      	movs	r2, #0
 801577c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801577e:	4b0a      	ldr	r3, [pc, #40]	@ (80157a8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	f04f 32ff 	mov.w	r2, #4294967295
 8015786:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015788:	4b07      	ldr	r3, [pc, #28]	@ (80157a8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	f04f 32ff 	mov.w	r2, #4294967295
 8015790:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015792:	4b05      	ldr	r3, [pc, #20]	@ (80157a8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	f04f 32ff 	mov.w	r2, #4294967295
 801579a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 801579c:	2300      	movs	r3, #0
}
 801579e:	4618      	mov	r0, r3
 80157a0:	374c      	adds	r7, #76	@ 0x4c
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd90      	pop	{r4, r7, pc}
 80157a6:	bf00      	nop
 80157a8:	20001c18 	.word	0x20001c18

080157ac <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80157ac:	b590      	push	{r4, r7, lr}
 80157ae:	b08b      	sub	sp, #44	@ 0x2c
 80157b0:	af04      	add	r7, sp, #16
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	607b      	str	r3, [r7, #4]
 80157b6:	460b      	mov	r3, r1
 80157b8:	72fb      	strb	r3, [r7, #11]
 80157ba:	4613      	mov	r3, r2
 80157bc:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80157be:	2312      	movs	r3, #18
 80157c0:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80157c2:	2309      	movs	r3, #9
 80157c4:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d101      	bne.n	80157d0 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80157cc:	2309      	movs	r3, #9
 80157ce:	e05e      	b.n	801588e <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80157d0:	4b31      	ldr	r3, [pc, #196]	@ (8015898 <LoRaMacCryptoSecureMessage+0xec>)
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	68db      	ldr	r3, [r3, #12]
 80157d6:	68fa      	ldr	r2, [r7, #12]
 80157d8:	429a      	cmp	r2, r3
 80157da:	d201      	bcs.n	80157e0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80157dc:	2306      	movs	r3, #6
 80157de:	e056      	b.n	801588e <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d101      	bne.n	80157ee <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80157ea:	2308      	movs	r3, #8
 80157ec:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80157ee:	4b2a      	ldr	r3, [pc, #168]	@ (8015898 <LoRaMacCryptoSecureMessage+0xec>)
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	68db      	ldr	r3, [r3, #12]
 80157f4:	68fa      	ldr	r2, [r7, #12]
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d916      	bls.n	8015828 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015804:	b219      	sxth	r1, r3
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	689c      	ldr	r4, [r3, #8]
 801580a:	7dfa      	ldrb	r2, [r7, #23]
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	9301      	str	r3, [sp, #4]
 8015810:	2300      	movs	r3, #0
 8015812:	9300      	str	r3, [sp, #0]
 8015814:	4623      	mov	r3, r4
 8015816:	f7ff fa79 	bl	8014d0c <PayloadEncrypt>
 801581a:	4603      	mov	r3, r0
 801581c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801581e:	7dbb      	ldrb	r3, [r7, #22]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d001      	beq.n	8015828 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8015824:	7dbb      	ldrb	r3, [r7, #22]
 8015826:	e032      	b.n	801588e <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015828:	6878      	ldr	r0, [r7, #4]
 801582a:	f000 fb48 	bl	8015ebe <LoRaMacSerializerData>
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	d001      	beq.n	8015838 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015834:	2310      	movs	r3, #16
 8015836:	e02a      	b.n	801588e <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015838:	2308      	movs	r3, #8
 801583a:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	6818      	ldr	r0, [r3, #0]
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	791b      	ldrb	r3, [r3, #4]
 8015844:	3b04      	subs	r3, #4
 8015846:	b299      	uxth	r1, r3
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	689b      	ldr	r3, [r3, #8]
 801584c:	687a      	ldr	r2, [r7, #4]
 801584e:	322c      	adds	r2, #44	@ 0x2c
 8015850:	7dfc      	ldrb	r4, [r7, #23]
 8015852:	9203      	str	r2, [sp, #12]
 8015854:	68fa      	ldr	r2, [r7, #12]
 8015856:	9202      	str	r2, [sp, #8]
 8015858:	9301      	str	r3, [sp, #4]
 801585a:	2300      	movs	r3, #0
 801585c:	9300      	str	r3, [sp, #0]
 801585e:	2300      	movs	r3, #0
 8015860:	4622      	mov	r2, r4
 8015862:	f7ff fb52 	bl	8014f0a <ComputeCmacB0>
 8015866:	4603      	mov	r3, r0
 8015868:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801586a:	7dbb      	ldrb	r3, [r7, #22]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d001      	beq.n	8015874 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8015870:	7dbb      	ldrb	r3, [r7, #22]
 8015872:	e00c      	b.n	801588e <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f000 fb22 	bl	8015ebe <LoRaMacSerializerData>
 801587a:	4603      	mov	r3, r0
 801587c:	2b00      	cmp	r3, #0
 801587e:	d001      	beq.n	8015884 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015880:	2310      	movs	r3, #16
 8015882:	e004      	b.n	801588e <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8015884:	4b04      	ldr	r3, [pc, #16]	@ (8015898 <LoRaMacCryptoSecureMessage+0xec>)
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	68fa      	ldr	r2, [r7, #12]
 801588a:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801588c:	2300      	movs	r3, #0
}
 801588e:	4618      	mov	r0, r3
 8015890:	371c      	adds	r7, #28
 8015892:	46bd      	mov	sp, r7
 8015894:	bd90      	pop	{r4, r7, pc}
 8015896:	bf00      	nop
 8015898:	20001c18 	.word	0x20001c18

0801589c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801589c:	b590      	push	{r4, r7, lr}
 801589e:	b08b      	sub	sp, #44	@ 0x2c
 80158a0:	af04      	add	r7, sp, #16
 80158a2:	60b9      	str	r1, [r7, #8]
 80158a4:	607b      	str	r3, [r7, #4]
 80158a6:	4603      	mov	r3, r0
 80158a8:	73fb      	strb	r3, [r7, #15]
 80158aa:	4613      	mov	r3, r2
 80158ac:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80158ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d101      	bne.n	80158b8 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80158b4:	2309      	movs	r3, #9
 80158b6:	e083      	b.n	80159c0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80158b8:	7bbb      	ldrb	r3, [r7, #14]
 80158ba:	6879      	ldr	r1, [r7, #4]
 80158bc:	4618      	mov	r0, r3
 80158be:	f7ff fca1 	bl	8015204 <CheckFCntDown>
 80158c2:	4603      	mov	r3, r0
 80158c4:	f083 0301 	eor.w	r3, r3, #1
 80158c8:	b2db      	uxtb	r3, r3
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d001      	beq.n	80158d2 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80158ce:	2306      	movs	r3, #6
 80158d0:	e076      	b.n	80159c0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80158d2:	2312      	movs	r3, #18
 80158d4:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80158d6:	2309      	movs	r3, #9
 80158d8:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80158da:	2308      	movs	r3, #8
 80158dc:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80158de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80158e0:	f000 f979 	bl	8015bd6 <LoRaMacParserData>
 80158e4:	4603      	mov	r3, r0
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d001      	beq.n	80158ee <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80158ea:	230f      	movs	r3, #15
 80158ec:	e068      	b.n	80159c0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80158ee:	f107 0210 	add.w	r2, r7, #16
 80158f2:	7bfb      	ldrb	r3, [r7, #15]
 80158f4:	4611      	mov	r1, r2
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7ff fbd4 	bl	80150a4 <GetKeyAddrItem>
 80158fc:	4603      	mov	r3, r0
 80158fe:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015900:	7d7b      	ldrb	r3, [r7, #21]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d001      	beq.n	801590a <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8015906:	7d7b      	ldrb	r3, [r7, #21]
 8015908:	e05a      	b.n	80159c0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801590a:	693b      	ldr	r3, [r7, #16]
 801590c:	785b      	ldrb	r3, [r3, #1]
 801590e:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8015910:	693b      	ldr	r3, [r7, #16]
 8015912:	789b      	ldrb	r3, [r3, #2]
 8015914:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8015916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015918:	689b      	ldr	r3, [r3, #8]
 801591a:	68ba      	ldr	r2, [r7, #8]
 801591c:	429a      	cmp	r2, r3
 801591e:	d001      	beq.n	8015924 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015920:	2302      	movs	r3, #2
 8015922:	e04d      	b.n	80159c0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015926:	7b1b      	ldrb	r3, [r3, #12]
 8015928:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801592c:	b2db      	uxtb	r3, r3
 801592e:	2b00      	cmp	r3, #0
 8015930:	bf14      	ite	ne
 8015932:	2301      	movne	r3, #1
 8015934:	2300      	moveq	r3, #0
 8015936:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015938:	4b23      	ldr	r3, [pc, #140]	@ (80159c8 <LoRaMacCryptoUnsecureMessage+0x12c>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	789b      	ldrb	r3, [r3, #2]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d101      	bne.n	8015946 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015942:	2300      	movs	r3, #0
 8015944:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015948:	6818      	ldr	r0, [r3, #0]
 801594a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801594c:	791b      	ldrb	r3, [r3, #4]
 801594e:	3b04      	subs	r3, #4
 8015950:	b299      	uxth	r1, r3
 8015952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015956:	7dbc      	ldrb	r4, [r7, #22]
 8015958:	7d3a      	ldrb	r2, [r7, #20]
 801595a:	9303      	str	r3, [sp, #12]
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	9302      	str	r3, [sp, #8]
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	9301      	str	r3, [sp, #4]
 8015964:	2301      	movs	r3, #1
 8015966:	9300      	str	r3, [sp, #0]
 8015968:	4623      	mov	r3, r4
 801596a:	f7ff fb0c 	bl	8014f86 <VerifyCmacB0>
 801596e:	4603      	mov	r3, r0
 8015970:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015972:	7d7b      	ldrb	r3, [r7, #21]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d001      	beq.n	801597c <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8015978:	7d7b      	ldrb	r3, [r7, #21]
 801597a:	e021      	b.n	80159c0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801597c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801597e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d101      	bne.n	801598a <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015986:	2308      	movs	r3, #8
 8015988:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801598a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801598c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801598e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015994:	b219      	sxth	r1, r3
 8015996:	7dfa      	ldrb	r2, [r7, #23]
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	9301      	str	r3, [sp, #4]
 801599c:	2301      	movs	r3, #1
 801599e:	9300      	str	r3, [sp, #0]
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	f7ff f9b3 	bl	8014d0c <PayloadEncrypt>
 80159a6:	4603      	mov	r3, r0
 80159a8:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80159aa:	7d7b      	ldrb	r3, [r7, #21]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d001      	beq.n	80159b4 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 80159b0:	7d7b      	ldrb	r3, [r7, #21]
 80159b2:	e005      	b.n	80159c0 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 80159b4:	7bbb      	ldrb	r3, [r7, #14]
 80159b6:	6879      	ldr	r1, [r7, #4]
 80159b8:	4618      	mov	r0, r3
 80159ba:	f7ff fc47 	bl	801524c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80159be:	2300      	movs	r3, #0
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	371c      	adds	r7, #28
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd90      	pop	{r4, r7, pc}
 80159c8:	20001c18 	.word	0x20001c18

080159cc <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b088      	sub	sp, #32
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	4603      	mov	r3, r0
 80159d4:	460a      	mov	r2, r1
 80159d6:	71fb      	strb	r3, [r7, #7]
 80159d8:	4613      	mov	r3, r2
 80159da:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80159dc:	f107 030c 	add.w	r3, r7, #12
 80159e0:	2200      	movs	r2, #0
 80159e2:	601a      	str	r2, [r3, #0]
 80159e4:	605a      	str	r2, [r3, #4]
 80159e6:	609a      	str	r2, [r3, #8]
 80159e8:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80159ea:	2300      	movs	r3, #0
 80159ec:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 80159ee:	79bb      	ldrb	r3, [r7, #6]
 80159f0:	2b0c      	cmp	r3, #12
 80159f2:	d00b      	beq.n	8015a0c <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 80159f4:	2b0c      	cmp	r3, #12
 80159f6:	dc0f      	bgt.n	8015a18 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 80159f8:	2b0a      	cmp	r3, #10
 80159fa:	d00a      	beq.n	8015a12 <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 80159fc:	2b0b      	cmp	r3, #11
 80159fe:	d10b      	bne.n	8015a18 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8015a00:	79fb      	ldrb	r3, [r7, #7]
 8015a02:	2b01      	cmp	r3, #1
 8015a04:	d10a      	bne.n	8015a1c <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 8015a06:	2320      	movs	r3, #32
 8015a08:	733b      	strb	r3, [r7, #12]
            }
            break;
 8015a0a:	e007      	b.n	8015a1c <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8015a0c:	230b      	movs	r3, #11
 8015a0e:	77fb      	strb	r3, [r7, #31]
            break;
 8015a10:	e005      	b.n	8015a1e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8015a12:	2330      	movs	r3, #48	@ 0x30
 8015a14:	733b      	strb	r3, [r7, #12]
            break;
 8015a16:	e002      	b.n	8015a1e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015a18:	230a      	movs	r3, #10
 8015a1a:	e00d      	b.n	8015a38 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 8015a1c:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015a1e:	79ba      	ldrb	r2, [r7, #6]
 8015a20:	7ff9      	ldrb	r1, [r7, #31]
 8015a22:	f107 030c 	add.w	r3, r7, #12
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7f7 fc22 	bl	800d270 <SecureElementDeriveAndStoreKey>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d001      	beq.n	8015a36 <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015a32:	230e      	movs	r3, #14
 8015a34:	e000      	b.n	8015a38 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015a36:	2300      	movs	r3, #0
}
 8015a38:	4618      	mov	r0, r3
 8015a3a:	3720      	adds	r7, #32
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}

08015a40 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b084      	sub	sp, #16
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d003      	beq.n	8015a56 <LoRaMacParserJoinAccept+0x16>
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d101      	bne.n	8015a5a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015a56:	2302      	movs	r3, #2
 8015a58:	e0b9      	b.n	8015bce <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681a      	ldr	r2, [r3, #0]
 8015a62:	89fb      	ldrh	r3, [r7, #14]
 8015a64:	1c59      	adds	r1, r3, #1
 8015a66:	81f9      	strh	r1, [r7, #14]
 8015a68:	4413      	add	r3, r2
 8015a6a:	781a      	ldrb	r2, [r3, #0]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	1d98      	adds	r0, r3, #6
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	681a      	ldr	r2, [r3, #0]
 8015a78:	89fb      	ldrh	r3, [r7, #14]
 8015a7a:	4413      	add	r3, r2
 8015a7c:	2203      	movs	r2, #3
 8015a7e:	4619      	mov	r1, r3
 8015a80:	f002 fd4d 	bl	801851e <memcpy1>
    bufItr = bufItr + 3;
 8015a84:	89fb      	ldrh	r3, [r7, #14]
 8015a86:	3303      	adds	r3, #3
 8015a88:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	f103 0009 	add.w	r0, r3, #9
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	681a      	ldr	r2, [r3, #0]
 8015a94:	89fb      	ldrh	r3, [r7, #14]
 8015a96:	4413      	add	r3, r2
 8015a98:	2203      	movs	r2, #3
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	f002 fd3f 	bl	801851e <memcpy1>
    bufItr = bufItr + 3;
 8015aa0:	89fb      	ldrh	r3, [r7, #14]
 8015aa2:	3303      	adds	r3, #3
 8015aa4:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	681a      	ldr	r2, [r3, #0]
 8015aaa:	89fb      	ldrh	r3, [r7, #14]
 8015aac:	1c59      	adds	r1, r3, #1
 8015aae:	81f9      	strh	r1, [r7, #14]
 8015ab0:	4413      	add	r3, r2
 8015ab2:	781b      	ldrb	r3, [r3, #0]
 8015ab4:	461a      	mov	r2, r3
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681a      	ldr	r2, [r3, #0]
 8015abe:	89fb      	ldrh	r3, [r7, #14]
 8015ac0:	1c59      	adds	r1, r3, #1
 8015ac2:	81f9      	strh	r1, [r7, #14]
 8015ac4:	4413      	add	r3, r2
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	021a      	lsls	r2, r3, #8
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	68db      	ldr	r3, [r3, #12]
 8015ace:	431a      	orrs	r2, r3
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	681a      	ldr	r2, [r3, #0]
 8015ad8:	89fb      	ldrh	r3, [r7, #14]
 8015ada:	1c59      	adds	r1, r3, #1
 8015adc:	81f9      	strh	r1, [r7, #14]
 8015ade:	4413      	add	r3, r2
 8015ae0:	781b      	ldrb	r3, [r3, #0]
 8015ae2:	041a      	lsls	r2, r3, #16
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	68db      	ldr	r3, [r3, #12]
 8015ae8:	431a      	orrs	r2, r3
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	681a      	ldr	r2, [r3, #0]
 8015af2:	89fb      	ldrh	r3, [r7, #14]
 8015af4:	1c59      	adds	r1, r3, #1
 8015af6:	81f9      	strh	r1, [r7, #14]
 8015af8:	4413      	add	r3, r2
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	061a      	lsls	r2, r3, #24
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	68db      	ldr	r3, [r3, #12]
 8015b02:	431a      	orrs	r2, r3
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681a      	ldr	r2, [r3, #0]
 8015b0c:	89fb      	ldrh	r3, [r7, #14]
 8015b0e:	1c59      	adds	r1, r3, #1
 8015b10:	81f9      	strh	r1, [r7, #14]
 8015b12:	4413      	add	r3, r2
 8015b14:	781a      	ldrb	r2, [r3, #0]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681a      	ldr	r2, [r3, #0]
 8015b1e:	89fb      	ldrh	r3, [r7, #14]
 8015b20:	1c59      	adds	r1, r3, #1
 8015b22:	81f9      	strh	r1, [r7, #14]
 8015b24:	4413      	add	r3, r2
 8015b26:	781a      	ldrb	r2, [r3, #0]
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	791b      	ldrb	r3, [r3, #4]
 8015b30:	1f1a      	subs	r2, r3, #4
 8015b32:	89fb      	ldrh	r3, [r7, #14]
 8015b34:	1ad3      	subs	r3, r2, r3
 8015b36:	2b10      	cmp	r3, #16
 8015b38:	d10e      	bne.n	8015b58 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	f103 0012 	add.w	r0, r3, #18
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681a      	ldr	r2, [r3, #0]
 8015b44:	89fb      	ldrh	r3, [r7, #14]
 8015b46:	4413      	add	r3, r2
 8015b48:	2210      	movs	r2, #16
 8015b4a:	4619      	mov	r1, r3
 8015b4c:	f002 fce7 	bl	801851e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8015b50:	89fb      	ldrh	r3, [r7, #14]
 8015b52:	3310      	adds	r3, #16
 8015b54:	81fb      	strh	r3, [r7, #14]
 8015b56:	e008      	b.n	8015b6a <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	791b      	ldrb	r3, [r3, #4]
 8015b5c:	1f1a      	subs	r2, r3, #4
 8015b5e:	89fb      	ldrh	r3, [r7, #14]
 8015b60:	1ad3      	subs	r3, r2, r3
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	dd01      	ble.n	8015b6a <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8015b66:	2301      	movs	r3, #1
 8015b68:	e031      	b.n	8015bce <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	681a      	ldr	r2, [r3, #0]
 8015b6e:	89fb      	ldrh	r3, [r7, #14]
 8015b70:	1c59      	adds	r1, r3, #1
 8015b72:	81f9      	strh	r1, [r7, #14]
 8015b74:	4413      	add	r3, r2
 8015b76:	781b      	ldrb	r3, [r3, #0]
 8015b78:	461a      	mov	r2, r3
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	681a      	ldr	r2, [r3, #0]
 8015b82:	89fb      	ldrh	r3, [r7, #14]
 8015b84:	1c59      	adds	r1, r3, #1
 8015b86:	81f9      	strh	r1, [r7, #14]
 8015b88:	4413      	add	r3, r2
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	021a      	lsls	r2, r3, #8
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b92:	431a      	orrs	r2, r3
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681a      	ldr	r2, [r3, #0]
 8015b9c:	89fb      	ldrh	r3, [r7, #14]
 8015b9e:	1c59      	adds	r1, r3, #1
 8015ba0:	81f9      	strh	r1, [r7, #14]
 8015ba2:	4413      	add	r3, r2
 8015ba4:	781b      	ldrb	r3, [r3, #0]
 8015ba6:	041a      	lsls	r2, r3, #16
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bac:	431a      	orrs	r2, r3
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681a      	ldr	r2, [r3, #0]
 8015bb6:	89fb      	ldrh	r3, [r7, #14]
 8015bb8:	1c59      	adds	r1, r3, #1
 8015bba:	81f9      	strh	r1, [r7, #14]
 8015bbc:	4413      	add	r3, r2
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	061a      	lsls	r2, r3, #24
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bc6:	431a      	orrs	r2, r3
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8015bcc:	2300      	movs	r3, #0
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	3710      	adds	r7, #16
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}

08015bd6 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015bd6:	b580      	push	{r7, lr}
 8015bd8:	b084      	sub	sp, #16
 8015bda:	af00      	add	r7, sp, #0
 8015bdc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d003      	beq.n	8015bec <LoRaMacParserData+0x16>
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d101      	bne.n	8015bf0 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015bec:	2302      	movs	r3, #2
 8015bee:	e0e0      	b.n	8015db2 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	681a      	ldr	r2, [r3, #0]
 8015bf8:	89fb      	ldrh	r3, [r7, #14]
 8015bfa:	1c59      	adds	r1, r3, #1
 8015bfc:	81f9      	strh	r1, [r7, #14]
 8015bfe:	4413      	add	r3, r2
 8015c00:	781a      	ldrb	r2, [r3, #0]
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	681a      	ldr	r2, [r3, #0]
 8015c0a:	89fb      	ldrh	r3, [r7, #14]
 8015c0c:	1c59      	adds	r1, r3, #1
 8015c0e:	81f9      	strh	r1, [r7, #14]
 8015c10:	4413      	add	r3, r2
 8015c12:	781b      	ldrb	r3, [r3, #0]
 8015c14:	461a      	mov	r2, r3
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681a      	ldr	r2, [r3, #0]
 8015c1e:	89fb      	ldrh	r3, [r7, #14]
 8015c20:	1c59      	adds	r1, r3, #1
 8015c22:	81f9      	strh	r1, [r7, #14]
 8015c24:	4413      	add	r3, r2
 8015c26:	781b      	ldrb	r3, [r3, #0]
 8015c28:	021a      	lsls	r2, r3, #8
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	689b      	ldr	r3, [r3, #8]
 8015c2e:	431a      	orrs	r2, r3
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	681a      	ldr	r2, [r3, #0]
 8015c38:	89fb      	ldrh	r3, [r7, #14]
 8015c3a:	1c59      	adds	r1, r3, #1
 8015c3c:	81f9      	strh	r1, [r7, #14]
 8015c3e:	4413      	add	r3, r2
 8015c40:	781b      	ldrb	r3, [r3, #0]
 8015c42:	041a      	lsls	r2, r3, #16
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	689b      	ldr	r3, [r3, #8]
 8015c48:	431a      	orrs	r2, r3
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681a      	ldr	r2, [r3, #0]
 8015c52:	89fb      	ldrh	r3, [r7, #14]
 8015c54:	1c59      	adds	r1, r3, #1
 8015c56:	81f9      	strh	r1, [r7, #14]
 8015c58:	4413      	add	r3, r2
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	061a      	lsls	r2, r3, #24
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	689b      	ldr	r3, [r3, #8]
 8015c62:	431a      	orrs	r2, r3
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	681a      	ldr	r2, [r3, #0]
 8015c6c:	89fb      	ldrh	r3, [r7, #14]
 8015c6e:	1c59      	adds	r1, r3, #1
 8015c70:	81f9      	strh	r1, [r7, #14]
 8015c72:	4413      	add	r3, r2
 8015c74:	781a      	ldrb	r2, [r3, #0]
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681a      	ldr	r2, [r3, #0]
 8015c7e:	89fb      	ldrh	r3, [r7, #14]
 8015c80:	1c59      	adds	r1, r3, #1
 8015c82:	81f9      	strh	r1, [r7, #14]
 8015c84:	4413      	add	r3, r2
 8015c86:	781b      	ldrb	r3, [r3, #0]
 8015c88:	461a      	mov	r2, r3
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	681a      	ldr	r2, [r3, #0]
 8015c92:	89fb      	ldrh	r3, [r7, #14]
 8015c94:	1c59      	adds	r1, r3, #1
 8015c96:	81f9      	strh	r1, [r7, #14]
 8015c98:	4413      	add	r3, r2
 8015c9a:	781b      	ldrb	r3, [r3, #0]
 8015c9c:	0219      	lsls	r1, r3, #8
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	89db      	ldrh	r3, [r3, #14]
 8015ca2:	b21a      	sxth	r2, r3
 8015ca4:	b20b      	sxth	r3, r1
 8015ca6:	4313      	orrs	r3, r2
 8015ca8:	b21b      	sxth	r3, r3
 8015caa:	b29a      	uxth	r2, r3
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f103 0010 	add.w	r0, r3, #16
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	681a      	ldr	r2, [r3, #0]
 8015cba:	89fb      	ldrh	r3, [r7, #14]
 8015cbc:	18d1      	adds	r1, r2, r3
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	7b1b      	ldrb	r3, [r3, #12]
 8015cc2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015cc6:	b2db      	uxtb	r3, r3
 8015cc8:	461a      	mov	r2, r3
 8015cca:	f002 fc28 	bl	801851e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	7b1b      	ldrb	r3, [r3, #12]
 8015cd2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015cd6:	b2db      	uxtb	r3, r3
 8015cd8:	461a      	mov	r2, r3
 8015cda:	89fb      	ldrh	r3, [r7, #14]
 8015cdc:	4413      	add	r3, r2
 8015cde:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2200      	movs	r2, #0
 8015cec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	791b      	ldrb	r3, [r3, #4]
 8015cf4:	461a      	mov	r2, r3
 8015cf6:	89fb      	ldrh	r3, [r7, #14]
 8015cf8:	1ad3      	subs	r3, r2, r3
 8015cfa:	2b04      	cmp	r3, #4
 8015cfc:	dd27      	ble.n	8015d4e <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681a      	ldr	r2, [r3, #0]
 8015d02:	89fb      	ldrh	r3, [r7, #14]
 8015d04:	1c59      	adds	r1, r3, #1
 8015d06:	81f9      	strh	r1, [r7, #14]
 8015d08:	4413      	add	r3, r2
 8015d0a:	781a      	ldrb	r2, [r3, #0]
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	791a      	ldrb	r2, [r3, #4]
 8015d16:	89fb      	ldrh	r3, [r7, #14]
 8015d18:	b2db      	uxtb	r3, r3
 8015d1a:	1ad3      	subs	r3, r2, r3
 8015d1c:	b2db      	uxtb	r3, r3
 8015d1e:	3b04      	subs	r3, #4
 8015d20:	b2da      	uxtb	r2, r3
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681a      	ldr	r2, [r3, #0]
 8015d30:	89fb      	ldrh	r3, [r7, #14]
 8015d32:	18d1      	adds	r1, r2, r3
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015d3a:	461a      	mov	r2, r3
 8015d3c:	f002 fbef 	bl	801851e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015d46:	461a      	mov	r2, r3
 8015d48:	89fb      	ldrh	r3, [r7, #14]
 8015d4a:	4413      	add	r3, r2
 8015d4c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	681a      	ldr	r2, [r3, #0]
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	791b      	ldrb	r3, [r3, #4]
 8015d56:	3b04      	subs	r3, #4
 8015d58:	4413      	add	r3, r2
 8015d5a:	781b      	ldrb	r3, [r3, #0]
 8015d5c:	461a      	mov	r2, r3
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	6819      	ldr	r1, [r3, #0]
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	791b      	ldrb	r3, [r3, #4]
 8015d6e:	3b03      	subs	r3, #3
 8015d70:	440b      	add	r3, r1
 8015d72:	781b      	ldrb	r3, [r3, #0]
 8015d74:	021b      	lsls	r3, r3, #8
 8015d76:	431a      	orrs	r2, r3
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	6819      	ldr	r1, [r3, #0]
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	791b      	ldrb	r3, [r3, #4]
 8015d88:	3b02      	subs	r3, #2
 8015d8a:	440b      	add	r3, r1
 8015d8c:	781b      	ldrb	r3, [r3, #0]
 8015d8e:	041b      	lsls	r3, r3, #16
 8015d90:	431a      	orrs	r2, r3
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	6819      	ldr	r1, [r3, #0]
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	791b      	ldrb	r3, [r3, #4]
 8015da2:	3b01      	subs	r3, #1
 8015da4:	440b      	add	r3, r1
 8015da6:	781b      	ldrb	r3, [r3, #0]
 8015da8:	061b      	lsls	r3, r3, #24
 8015daa:	431a      	orrs	r2, r3
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8015db0:	2300      	movs	r3, #0
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	3710      	adds	r7, #16
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}

08015dba <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015dba:	b580      	push	{r7, lr}
 8015dbc:	b084      	sub	sp, #16
 8015dbe:	af00      	add	r7, sp, #0
 8015dc0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d003      	beq.n	8015dd0 <LoRaMacSerializerJoinRequest+0x16>
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d101      	bne.n	8015dd4 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015dd0:	2301      	movs	r3, #1
 8015dd2:	e070      	b.n	8015eb6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	791b      	ldrb	r3, [r3, #4]
 8015ddc:	2b16      	cmp	r3, #22
 8015dde:	d801      	bhi.n	8015de4 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015de0:	2302      	movs	r3, #2
 8015de2:	e068      	b.n	8015eb6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681a      	ldr	r2, [r3, #0]
 8015de8:	89fb      	ldrh	r3, [r7, #14]
 8015dea:	1c59      	adds	r1, r3, #1
 8015dec:	81f9      	strh	r1, [r7, #14]
 8015dee:	4413      	add	r3, r2
 8015df0:	687a      	ldr	r2, [r7, #4]
 8015df2:	7952      	ldrb	r2, [r2, #5]
 8015df4:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681a      	ldr	r2, [r3, #0]
 8015dfa:	89fb      	ldrh	r3, [r7, #14]
 8015dfc:	18d0      	adds	r0, r2, r3
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	3306      	adds	r3, #6
 8015e02:	2208      	movs	r2, #8
 8015e04:	4619      	mov	r1, r3
 8015e06:	f002 fba5 	bl	8018554 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8015e0a:	89fb      	ldrh	r3, [r7, #14]
 8015e0c:	3308      	adds	r3, #8
 8015e0e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681a      	ldr	r2, [r3, #0]
 8015e14:	89fb      	ldrh	r3, [r7, #14]
 8015e16:	18d0      	adds	r0, r2, r3
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	330e      	adds	r3, #14
 8015e1c:	2208      	movs	r2, #8
 8015e1e:	4619      	mov	r1, r3
 8015e20:	f002 fb98 	bl	8018554 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015e24:	89fb      	ldrh	r3, [r7, #14]
 8015e26:	3308      	adds	r3, #8
 8015e28:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	8ad9      	ldrh	r1, [r3, #22]
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681a      	ldr	r2, [r3, #0]
 8015e32:	89fb      	ldrh	r3, [r7, #14]
 8015e34:	1c58      	adds	r0, r3, #1
 8015e36:	81f8      	strh	r0, [r7, #14]
 8015e38:	4413      	add	r3, r2
 8015e3a:	b2ca      	uxtb	r2, r1
 8015e3c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	8adb      	ldrh	r3, [r3, #22]
 8015e42:	0a1b      	lsrs	r3, r3, #8
 8015e44:	b299      	uxth	r1, r3
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681a      	ldr	r2, [r3, #0]
 8015e4a:	89fb      	ldrh	r3, [r7, #14]
 8015e4c:	1c58      	adds	r0, r3, #1
 8015e4e:	81f8      	strh	r0, [r7, #14]
 8015e50:	4413      	add	r3, r2
 8015e52:	b2ca      	uxtb	r2, r1
 8015e54:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	6999      	ldr	r1, [r3, #24]
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681a      	ldr	r2, [r3, #0]
 8015e5e:	89fb      	ldrh	r3, [r7, #14]
 8015e60:	1c58      	adds	r0, r3, #1
 8015e62:	81f8      	strh	r0, [r7, #14]
 8015e64:	4413      	add	r3, r2
 8015e66:	b2ca      	uxtb	r2, r1
 8015e68:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	699b      	ldr	r3, [r3, #24]
 8015e6e:	0a19      	lsrs	r1, r3, #8
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	681a      	ldr	r2, [r3, #0]
 8015e74:	89fb      	ldrh	r3, [r7, #14]
 8015e76:	1c58      	adds	r0, r3, #1
 8015e78:	81f8      	strh	r0, [r7, #14]
 8015e7a:	4413      	add	r3, r2
 8015e7c:	b2ca      	uxtb	r2, r1
 8015e7e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	699b      	ldr	r3, [r3, #24]
 8015e84:	0c19      	lsrs	r1, r3, #16
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681a      	ldr	r2, [r3, #0]
 8015e8a:	89fb      	ldrh	r3, [r7, #14]
 8015e8c:	1c58      	adds	r0, r3, #1
 8015e8e:	81f8      	strh	r0, [r7, #14]
 8015e90:	4413      	add	r3, r2
 8015e92:	b2ca      	uxtb	r2, r1
 8015e94:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	699b      	ldr	r3, [r3, #24]
 8015e9a:	0e19      	lsrs	r1, r3, #24
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681a      	ldr	r2, [r3, #0]
 8015ea0:	89fb      	ldrh	r3, [r7, #14]
 8015ea2:	1c58      	adds	r0, r3, #1
 8015ea4:	81f8      	strh	r0, [r7, #14]
 8015ea6:	4413      	add	r3, r2
 8015ea8:	b2ca      	uxtb	r2, r1
 8015eaa:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015eac:	89fb      	ldrh	r3, [r7, #14]
 8015eae:	b2da      	uxtb	r2, r3
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015eb4:	2300      	movs	r3, #0
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3710      	adds	r7, #16
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}

08015ebe <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015ebe:	b580      	push	{r7, lr}
 8015ec0:	b084      	sub	sp, #16
 8015ec2:	af00      	add	r7, sp, #0
 8015ec4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d003      	beq.n	8015ed4 <LoRaMacSerializerData+0x16>
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d101      	bne.n	8015ed8 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	e0e3      	b.n	80160a0 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8015ed8:	2300      	movs	r3, #0
 8015eda:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015edc:	2308      	movs	r3, #8
 8015ede:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	7b1b      	ldrb	r3, [r3, #12]
 8015ee4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015ee8:	b2db      	uxtb	r3, r3
 8015eea:	461a      	mov	r2, r3
 8015eec:	89bb      	ldrh	r3, [r7, #12]
 8015eee:	4413      	add	r3, r2
 8015ef0:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d002      	beq.n	8015f02 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8015efc:	89bb      	ldrh	r3, [r7, #12]
 8015efe:	3301      	adds	r3, #1
 8015f00:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f08:	461a      	mov	r2, r3
 8015f0a:	89bb      	ldrh	r3, [r7, #12]
 8015f0c:	4413      	add	r3, r2
 8015f0e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015f10:	89bb      	ldrh	r3, [r7, #12]
 8015f12:	3304      	adds	r3, #4
 8015f14:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	791b      	ldrb	r3, [r3, #4]
 8015f1a:	461a      	mov	r2, r3
 8015f1c:	89bb      	ldrh	r3, [r7, #12]
 8015f1e:	4293      	cmp	r3, r2
 8015f20:	d901      	bls.n	8015f26 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015f22:	2302      	movs	r3, #2
 8015f24:	e0bc      	b.n	80160a0 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681a      	ldr	r2, [r3, #0]
 8015f2a:	89fb      	ldrh	r3, [r7, #14]
 8015f2c:	1c59      	adds	r1, r3, #1
 8015f2e:	81f9      	strh	r1, [r7, #14]
 8015f30:	4413      	add	r3, r2
 8015f32:	687a      	ldr	r2, [r7, #4]
 8015f34:	7952      	ldrb	r2, [r2, #5]
 8015f36:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	6899      	ldr	r1, [r3, #8]
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681a      	ldr	r2, [r3, #0]
 8015f40:	89fb      	ldrh	r3, [r7, #14]
 8015f42:	1c58      	adds	r0, r3, #1
 8015f44:	81f8      	strh	r0, [r7, #14]
 8015f46:	4413      	add	r3, r2
 8015f48:	b2ca      	uxtb	r2, r1
 8015f4a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	689b      	ldr	r3, [r3, #8]
 8015f50:	0a19      	lsrs	r1, r3, #8
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681a      	ldr	r2, [r3, #0]
 8015f56:	89fb      	ldrh	r3, [r7, #14]
 8015f58:	1c58      	adds	r0, r3, #1
 8015f5a:	81f8      	strh	r0, [r7, #14]
 8015f5c:	4413      	add	r3, r2
 8015f5e:	b2ca      	uxtb	r2, r1
 8015f60:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	689b      	ldr	r3, [r3, #8]
 8015f66:	0c19      	lsrs	r1, r3, #16
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681a      	ldr	r2, [r3, #0]
 8015f6c:	89fb      	ldrh	r3, [r7, #14]
 8015f6e:	1c58      	adds	r0, r3, #1
 8015f70:	81f8      	strh	r0, [r7, #14]
 8015f72:	4413      	add	r3, r2
 8015f74:	b2ca      	uxtb	r2, r1
 8015f76:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	689b      	ldr	r3, [r3, #8]
 8015f7c:	0e19      	lsrs	r1, r3, #24
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	681a      	ldr	r2, [r3, #0]
 8015f82:	89fb      	ldrh	r3, [r7, #14]
 8015f84:	1c58      	adds	r0, r3, #1
 8015f86:	81f8      	strh	r0, [r7, #14]
 8015f88:	4413      	add	r3, r2
 8015f8a:	b2ca      	uxtb	r2, r1
 8015f8c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	681a      	ldr	r2, [r3, #0]
 8015f92:	89fb      	ldrh	r3, [r7, #14]
 8015f94:	1c59      	adds	r1, r3, #1
 8015f96:	81f9      	strh	r1, [r7, #14]
 8015f98:	4413      	add	r3, r2
 8015f9a:	687a      	ldr	r2, [r7, #4]
 8015f9c:	7b12      	ldrb	r2, [r2, #12]
 8015f9e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	89d9      	ldrh	r1, [r3, #14]
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	681a      	ldr	r2, [r3, #0]
 8015fa8:	89fb      	ldrh	r3, [r7, #14]
 8015faa:	1c58      	adds	r0, r3, #1
 8015fac:	81f8      	strh	r0, [r7, #14]
 8015fae:	4413      	add	r3, r2
 8015fb0:	b2ca      	uxtb	r2, r1
 8015fb2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	89db      	ldrh	r3, [r3, #14]
 8015fb8:	0a1b      	lsrs	r3, r3, #8
 8015fba:	b299      	uxth	r1, r3
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	681a      	ldr	r2, [r3, #0]
 8015fc0:	89fb      	ldrh	r3, [r7, #14]
 8015fc2:	1c58      	adds	r0, r3, #1
 8015fc4:	81f8      	strh	r0, [r7, #14]
 8015fc6:	4413      	add	r3, r2
 8015fc8:	b2ca      	uxtb	r2, r1
 8015fca:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	681a      	ldr	r2, [r3, #0]
 8015fd0:	89fb      	ldrh	r3, [r7, #14]
 8015fd2:	18d0      	adds	r0, r2, r3
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f103 0110 	add.w	r1, r3, #16
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	7b1b      	ldrb	r3, [r3, #12]
 8015fde:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	461a      	mov	r2, r3
 8015fe6:	f002 fa9a 	bl	801851e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	7b1b      	ldrb	r3, [r3, #12]
 8015fee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015ff2:	b2db      	uxtb	r3, r3
 8015ff4:	461a      	mov	r2, r3
 8015ff6:	89fb      	ldrh	r3, [r7, #14]
 8015ff8:	4413      	add	r3, r2
 8015ffa:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016002:	2b00      	cmp	r3, #0
 8016004:	d009      	beq.n	801601a <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	681a      	ldr	r2, [r3, #0]
 801600a:	89fb      	ldrh	r3, [r7, #14]
 801600c:	1c59      	adds	r1, r3, #1
 801600e:	81f9      	strh	r1, [r7, #14]
 8016010:	4413      	add	r3, r2
 8016012:	687a      	ldr	r2, [r7, #4]
 8016014:	f892 2020 	ldrb.w	r2, [r2, #32]
 8016018:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681a      	ldr	r2, [r3, #0]
 801601e:	89fb      	ldrh	r3, [r7, #14]
 8016020:	18d0      	adds	r0, r2, r3
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801602c:	461a      	mov	r2, r3
 801602e:	f002 fa76 	bl	801851e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016038:	461a      	mov	r2, r3
 801603a:	89fb      	ldrh	r3, [r7, #14]
 801603c:	4413      	add	r3, r2
 801603e:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681a      	ldr	r2, [r3, #0]
 8016048:	89fb      	ldrh	r3, [r7, #14]
 801604a:	1c58      	adds	r0, r3, #1
 801604c:	81f8      	strh	r0, [r7, #14]
 801604e:	4413      	add	r3, r2
 8016050:	b2ca      	uxtb	r2, r1
 8016052:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016058:	0a19      	lsrs	r1, r3, #8
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	681a      	ldr	r2, [r3, #0]
 801605e:	89fb      	ldrh	r3, [r7, #14]
 8016060:	1c58      	adds	r0, r3, #1
 8016062:	81f8      	strh	r0, [r7, #14]
 8016064:	4413      	add	r3, r2
 8016066:	b2ca      	uxtb	r2, r1
 8016068:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801606e:	0c19      	lsrs	r1, r3, #16
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681a      	ldr	r2, [r3, #0]
 8016074:	89fb      	ldrh	r3, [r7, #14]
 8016076:	1c58      	adds	r0, r3, #1
 8016078:	81f8      	strh	r0, [r7, #14]
 801607a:	4413      	add	r3, r2
 801607c:	b2ca      	uxtb	r2, r1
 801607e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016084:	0e19      	lsrs	r1, r3, #24
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	681a      	ldr	r2, [r3, #0]
 801608a:	89fb      	ldrh	r3, [r7, #14]
 801608c:	1c58      	adds	r0, r3, #1
 801608e:	81f8      	strh	r0, [r7, #14]
 8016090:	4413      	add	r3, r2
 8016092:	b2ca      	uxtb	r2, r1
 8016094:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016096:	89fb      	ldrh	r3, [r7, #14]
 8016098:	b2da      	uxtb	r2, r3
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801609e:	2300      	movs	r3, #0
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	3710      	adds	r7, #16
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}

080160a8 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80160a8:	b480      	push	{r7}
 80160aa:	b083      	sub	sp, #12
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	4603      	mov	r3, r0
 80160b0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80160b2:	79fb      	ldrb	r3, [r7, #7]
 80160b4:	2b05      	cmp	r3, #5
 80160b6:	d101      	bne.n	80160bc <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80160b8:	2301      	movs	r3, #1
 80160ba:	e000      	b.n	80160be <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80160bc:	2300      	movs	r3, #0
        }
    }
}
 80160be:	4618      	mov	r0, r3
 80160c0:	370c      	adds	r7, #12
 80160c2:	46bd      	mov	sp, r7
 80160c4:	bc80      	pop	{r7}
 80160c6:	4770      	bx	lr

080160c8 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b084      	sub	sp, #16
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	4603      	mov	r3, r0
 80160d0:	6039      	str	r1, [r7, #0]
 80160d2:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80160d4:	2300      	movs	r3, #0
 80160d6:	60bb      	str	r3, [r7, #8]
    switch( region )
 80160d8:	79fb      	ldrb	r3, [r7, #7]
 80160da:	2b05      	cmp	r3, #5
 80160dc:	d105      	bne.n	80160ea <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80160de:	6838      	ldr	r0, [r7, #0]
 80160e0:	f001 f8fa 	bl	80172d8 <RegionEU868GetPhyParam>
 80160e4:	4603      	mov	r3, r0
 80160e6:	60fb      	str	r3, [r7, #12]
 80160e8:	e001      	b.n	80160ee <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	4618      	mov	r0, r3
 80160f2:	3710      	adds	r7, #16
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}

080160f8 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	4603      	mov	r3, r0
 8016100:	6039      	str	r1, [r7, #0]
 8016102:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016104:	79fb      	ldrb	r3, [r7, #7]
 8016106:	2b05      	cmp	r3, #5
 8016108:	d103      	bne.n	8016112 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 801610a:	6838      	ldr	r0, [r7, #0]
 801610c:	f001 fa2a 	bl	8017564 <RegionEU868SetBandTxDone>
 8016110:	e000      	b.n	8016114 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016112:	bf00      	nop
        }
    }
}
 8016114:	3708      	adds	r7, #8
 8016116:	46bd      	mov	sp, r7
 8016118:	bd80      	pop	{r7, pc}

0801611a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801611a:	b580      	push	{r7, lr}
 801611c:	b082      	sub	sp, #8
 801611e:	af00      	add	r7, sp, #0
 8016120:	4603      	mov	r3, r0
 8016122:	6039      	str	r1, [r7, #0]
 8016124:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016126:	79fb      	ldrb	r3, [r7, #7]
 8016128:	2b05      	cmp	r3, #5
 801612a:	d103      	bne.n	8016134 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 801612c:	6838      	ldr	r0, [r7, #0]
 801612e:	f001 fa45 	bl	80175bc <RegionEU868InitDefaults>
 8016132:	e000      	b.n	8016136 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016134:	bf00      	nop
        }
    }
}
 8016136:	bf00      	nop
 8016138:	3708      	adds	r7, #8
 801613a:	46bd      	mov	sp, r7
 801613c:	bd80      	pop	{r7, pc}

0801613e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801613e:	b580      	push	{r7, lr}
 8016140:	b082      	sub	sp, #8
 8016142:	af00      	add	r7, sp, #0
 8016144:	4603      	mov	r3, r0
 8016146:	6039      	str	r1, [r7, #0]
 8016148:	71fb      	strb	r3, [r7, #7]
 801614a:	4613      	mov	r3, r2
 801614c:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801614e:	79fb      	ldrb	r3, [r7, #7]
 8016150:	2b05      	cmp	r3, #5
 8016152:	d106      	bne.n	8016162 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016154:	79bb      	ldrb	r3, [r7, #6]
 8016156:	4619      	mov	r1, r3
 8016158:	6838      	ldr	r0, [r7, #0]
 801615a:	f001 facd 	bl	80176f8 <RegionEU868Verify>
 801615e:	4603      	mov	r3, r0
 8016160:	e000      	b.n	8016164 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8016162:	2300      	movs	r3, #0
        }
    }
}
 8016164:	4618      	mov	r0, r3
 8016166:	3708      	adds	r7, #8
 8016168:	46bd      	mov	sp, r7
 801616a:	bd80      	pop	{r7, pc}

0801616c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b082      	sub	sp, #8
 8016170:	af00      	add	r7, sp, #0
 8016172:	4603      	mov	r3, r0
 8016174:	6039      	str	r1, [r7, #0]
 8016176:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016178:	79fb      	ldrb	r3, [r7, #7]
 801617a:	2b05      	cmp	r3, #5
 801617c:	d103      	bne.n	8016186 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 801617e:	6838      	ldr	r0, [r7, #0]
 8016180:	f001 fb36 	bl	80177f0 <RegionEU868ApplyCFList>
 8016184:	e000      	b.n	8016188 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016186:	bf00      	nop
        }
    }
}
 8016188:	bf00      	nop
 801618a:	3708      	adds	r7, #8
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}

08016190 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b082      	sub	sp, #8
 8016194:	af00      	add	r7, sp, #0
 8016196:	4603      	mov	r3, r0
 8016198:	6039      	str	r1, [r7, #0]
 801619a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801619c:	79fb      	ldrb	r3, [r7, #7]
 801619e:	2b05      	cmp	r3, #5
 80161a0:	d104      	bne.n	80161ac <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80161a2:	6838      	ldr	r0, [r7, #0]
 80161a4:	f001 fb98 	bl	80178d8 <RegionEU868ChanMaskSet>
 80161a8:	4603      	mov	r3, r0
 80161aa:	e000      	b.n	80161ae <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80161ac:	2300      	movs	r3, #0
        }
    }
}
 80161ae:	4618      	mov	r0, r3
 80161b0:	3708      	adds	r7, #8
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd80      	pop	{r7, pc}

080161b6 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80161b6:	b580      	push	{r7, lr}
 80161b8:	b082      	sub	sp, #8
 80161ba:	af00      	add	r7, sp, #0
 80161bc:	603b      	str	r3, [r7, #0]
 80161be:	4603      	mov	r3, r0
 80161c0:	71fb      	strb	r3, [r7, #7]
 80161c2:	460b      	mov	r3, r1
 80161c4:	71bb      	strb	r3, [r7, #6]
 80161c6:	4613      	mov	r3, r2
 80161c8:	717b      	strb	r3, [r7, #5]
    switch( region )
 80161ca:	79fb      	ldrb	r3, [r7, #7]
 80161cc:	2b05      	cmp	r3, #5
 80161ce:	d107      	bne.n	80161e0 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80161d0:	7979      	ldrb	r1, [r7, #5]
 80161d2:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80161d6:	693b      	ldr	r3, [r7, #16]
 80161d8:	683a      	ldr	r2, [r7, #0]
 80161da:	f001 fba7 	bl	801792c <RegionEU868ComputeRxWindowParameters>
 80161de:	e000      	b.n	80161e2 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80161e0:	bf00      	nop
        }
    }
}
 80161e2:	bf00      	nop
 80161e4:	3708      	adds	r7, #8
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd80      	pop	{r7, pc}

080161ea <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80161ea:	b580      	push	{r7, lr}
 80161ec:	b084      	sub	sp, #16
 80161ee:	af00      	add	r7, sp, #0
 80161f0:	4603      	mov	r3, r0
 80161f2:	60b9      	str	r1, [r7, #8]
 80161f4:	607a      	str	r2, [r7, #4]
 80161f6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80161f8:	7bfb      	ldrb	r3, [r7, #15]
 80161fa:	2b05      	cmp	r3, #5
 80161fc:	d105      	bne.n	801620a <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80161fe:	6879      	ldr	r1, [r7, #4]
 8016200:	68b8      	ldr	r0, [r7, #8]
 8016202:	f001 fbed 	bl	80179e0 <RegionEU868RxConfig>
 8016206:	4603      	mov	r3, r0
 8016208:	e000      	b.n	801620c <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801620a:	2300      	movs	r3, #0
        }
    }
}
 801620c:	4618      	mov	r0, r3
 801620e:	3710      	adds	r7, #16
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}

08016214 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b084      	sub	sp, #16
 8016218:	af00      	add	r7, sp, #0
 801621a:	60b9      	str	r1, [r7, #8]
 801621c:	607a      	str	r2, [r7, #4]
 801621e:	603b      	str	r3, [r7, #0]
 8016220:	4603      	mov	r3, r0
 8016222:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016224:	7bfb      	ldrb	r3, [r7, #15]
 8016226:	2b05      	cmp	r3, #5
 8016228:	d106      	bne.n	8016238 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801622a:	683a      	ldr	r2, [r7, #0]
 801622c:	6879      	ldr	r1, [r7, #4]
 801622e:	68b8      	ldr	r0, [r7, #8]
 8016230:	f001 fca6 	bl	8017b80 <RegionEU868TxConfig>
 8016234:	4603      	mov	r3, r0
 8016236:	e000      	b.n	801623a <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016238:	2300      	movs	r3, #0
        }
    }
}
 801623a:	4618      	mov	r0, r3
 801623c:	3710      	adds	r7, #16
 801623e:	46bd      	mov	sp, r7
 8016240:	bd80      	pop	{r7, pc}

08016242 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016242:	b580      	push	{r7, lr}
 8016244:	b086      	sub	sp, #24
 8016246:	af02      	add	r7, sp, #8
 8016248:	60b9      	str	r1, [r7, #8]
 801624a:	607a      	str	r2, [r7, #4]
 801624c:	603b      	str	r3, [r7, #0]
 801624e:	4603      	mov	r3, r0
 8016250:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016252:	7bfb      	ldrb	r3, [r7, #15]
 8016254:	2b05      	cmp	r3, #5
 8016256:	d109      	bne.n	801626c <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016258:	69fb      	ldr	r3, [r7, #28]
 801625a:	9300      	str	r3, [sp, #0]
 801625c:	69bb      	ldr	r3, [r7, #24]
 801625e:	683a      	ldr	r2, [r7, #0]
 8016260:	6879      	ldr	r1, [r7, #4]
 8016262:	68b8      	ldr	r0, [r7, #8]
 8016264:	f001 fd5c 	bl	8017d20 <RegionEU868LinkAdrReq>
 8016268:	4603      	mov	r3, r0
 801626a:	e000      	b.n	801626e <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801626c:	2300      	movs	r3, #0
        }
    }
}
 801626e:	4618      	mov	r0, r3
 8016270:	3710      	adds	r7, #16
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}

08016276 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016276:	b580      	push	{r7, lr}
 8016278:	b082      	sub	sp, #8
 801627a:	af00      	add	r7, sp, #0
 801627c:	4603      	mov	r3, r0
 801627e:	6039      	str	r1, [r7, #0]
 8016280:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016282:	79fb      	ldrb	r3, [r7, #7]
 8016284:	2b05      	cmp	r3, #5
 8016286:	d104      	bne.n	8016292 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016288:	6838      	ldr	r0, [r7, #0]
 801628a:	f001 fe6b 	bl	8017f64 <RegionEU868RxParamSetupReq>
 801628e:	4603      	mov	r3, r0
 8016290:	e000      	b.n	8016294 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016292:	2300      	movs	r3, #0
        }
    }
}
 8016294:	4618      	mov	r0, r3
 8016296:	3708      	adds	r7, #8
 8016298:	46bd      	mov	sp, r7
 801629a:	bd80      	pop	{r7, pc}

0801629c <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b082      	sub	sp, #8
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	4603      	mov	r3, r0
 80162a4:	6039      	str	r1, [r7, #0]
 80162a6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80162a8:	79fb      	ldrb	r3, [r7, #7]
 80162aa:	2b05      	cmp	r3, #5
 80162ac:	d104      	bne.n	80162b8 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80162ae:	6838      	ldr	r0, [r7, #0]
 80162b0:	f001 fe96 	bl	8017fe0 <RegionEU868NewChannelReq>
 80162b4:	4603      	mov	r3, r0
 80162b6:	e000      	b.n	80162ba <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80162b8:	2300      	movs	r3, #0
        }
    }
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	3708      	adds	r7, #8
 80162be:	46bd      	mov	sp, r7
 80162c0:	bd80      	pop	{r7, pc}

080162c2 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80162c2:	b580      	push	{r7, lr}
 80162c4:	b082      	sub	sp, #8
 80162c6:	af00      	add	r7, sp, #0
 80162c8:	4603      	mov	r3, r0
 80162ca:	6039      	str	r1, [r7, #0]
 80162cc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80162ce:	79fb      	ldrb	r3, [r7, #7]
 80162d0:	2b05      	cmp	r3, #5
 80162d2:	d104      	bne.n	80162de <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80162d4:	6838      	ldr	r0, [r7, #0]
 80162d6:	f001 fee1 	bl	801809c <RegionEU868TxParamSetupReq>
 80162da:	4603      	mov	r3, r0
 80162dc:	e000      	b.n	80162e0 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80162de:	2300      	movs	r3, #0
        }
    }
}
 80162e0:	4618      	mov	r0, r3
 80162e2:	3708      	adds	r7, #8
 80162e4:	46bd      	mov	sp, r7
 80162e6:	bd80      	pop	{r7, pc}

080162e8 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b082      	sub	sp, #8
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	4603      	mov	r3, r0
 80162f0:	6039      	str	r1, [r7, #0]
 80162f2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80162f4:	79fb      	ldrb	r3, [r7, #7]
 80162f6:	2b05      	cmp	r3, #5
 80162f8:	d104      	bne.n	8016304 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80162fa:	6838      	ldr	r0, [r7, #0]
 80162fc:	f001 feda 	bl	80180b4 <RegionEU868DlChannelReq>
 8016300:	4603      	mov	r3, r0
 8016302:	e000      	b.n	8016306 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016304:	2300      	movs	r3, #0
        }
    }
}
 8016306:	4618      	mov	r0, r3
 8016308:	3708      	adds	r7, #8
 801630a:	46bd      	mov	sp, r7
 801630c:	bd80      	pop	{r7, pc}

0801630e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801630e:	b580      	push	{r7, lr}
 8016310:	b082      	sub	sp, #8
 8016312:	af00      	add	r7, sp, #0
 8016314:	4603      	mov	r3, r0
 8016316:	71fb      	strb	r3, [r7, #7]
 8016318:	460b      	mov	r3, r1
 801631a:	71bb      	strb	r3, [r7, #6]
 801631c:	4613      	mov	r3, r2
 801631e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8016320:	79fb      	ldrb	r3, [r7, #7]
 8016322:	2b05      	cmp	r3, #5
 8016324:	d108      	bne.n	8016338 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016326:	797a      	ldrb	r2, [r7, #5]
 8016328:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801632c:	4611      	mov	r1, r2
 801632e:	4618      	mov	r0, r3
 8016330:	f001 ff0a 	bl	8018148 <RegionEU868AlternateDr>
 8016334:	4603      	mov	r3, r0
 8016336:	e000      	b.n	801633a <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016338:	2300      	movs	r3, #0
        }
    }
}
 801633a:	4618      	mov	r0, r3
 801633c:	3708      	adds	r7, #8
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}

08016342 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016342:	b580      	push	{r7, lr}
 8016344:	b084      	sub	sp, #16
 8016346:	af00      	add	r7, sp, #0
 8016348:	60b9      	str	r1, [r7, #8]
 801634a:	607a      	str	r2, [r7, #4]
 801634c:	603b      	str	r3, [r7, #0]
 801634e:	4603      	mov	r3, r0
 8016350:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016352:	7bfb      	ldrb	r3, [r7, #15]
 8016354:	2b05      	cmp	r3, #5
 8016356:	d107      	bne.n	8016368 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016358:	69bb      	ldr	r3, [r7, #24]
 801635a:	683a      	ldr	r2, [r7, #0]
 801635c:	6879      	ldr	r1, [r7, #4]
 801635e:	68b8      	ldr	r0, [r7, #8]
 8016360:	f001 ff02 	bl	8018168 <RegionEU868NextChannel>
 8016364:	4603      	mov	r3, r0
 8016366:	e000      	b.n	801636a <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016368:	2309      	movs	r3, #9
        }
    }
}
 801636a:	4618      	mov	r0, r3
 801636c:	3710      	adds	r7, #16
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}

08016372 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016372:	b590      	push	{r4, r7, lr}
 8016374:	b083      	sub	sp, #12
 8016376:	af00      	add	r7, sp, #0
 8016378:	4604      	mov	r4, r0
 801637a:	4608      	mov	r0, r1
 801637c:	4611      	mov	r1, r2
 801637e:	461a      	mov	r2, r3
 8016380:	4623      	mov	r3, r4
 8016382:	71fb      	strb	r3, [r7, #7]
 8016384:	4603      	mov	r3, r0
 8016386:	71bb      	strb	r3, [r7, #6]
 8016388:	460b      	mov	r3, r1
 801638a:	717b      	strb	r3, [r7, #5]
 801638c:	4613      	mov	r3, r2
 801638e:	713b      	strb	r3, [r7, #4]
    switch( region )
 8016390:	79fb      	ldrb	r3, [r7, #7]
 8016392:	2b05      	cmp	r3, #5
 8016394:	d109      	bne.n	80163aa <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016396:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801639a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801639e:	79bb      	ldrb	r3, [r7, #6]
 80163a0:	4618      	mov	r0, r3
 80163a2:	f002 f85b 	bl	801845c <RegionEU868ApplyDrOffset>
 80163a6:	4603      	mov	r3, r0
 80163a8:	e000      	b.n	80163ac <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80163aa:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	370c      	adds	r7, #12
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd90      	pop	{r4, r7, pc}

080163b4 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80163b4:	b480      	push	{r7}
 80163b6:	b083      	sub	sp, #12
 80163b8:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80163ba:	4b04      	ldr	r3, [pc, #16]	@ (80163cc <RegionGetVersion+0x18>)
 80163bc:	607b      	str	r3, [r7, #4]

    return version;
 80163be:	687b      	ldr	r3, [r7, #4]
}
 80163c0:	4618      	mov	r0, r3
 80163c2:	370c      	adds	r7, #12
 80163c4:	46bd      	mov	sp, r7
 80163c6:	bc80      	pop	{r7}
 80163c8:	4770      	bx	lr
 80163ca:	bf00      	nop
 80163cc:	02010003 	.word	0x02010003

080163d0 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80163d0:	b480      	push	{r7}
 80163d2:	b087      	sub	sp, #28
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	60f8      	str	r0, [r7, #12]
 80163d8:	4608      	mov	r0, r1
 80163da:	4639      	mov	r1, r7
 80163dc:	e881 000c 	stmia.w	r1, {r2, r3}
 80163e0:	4603      	mov	r3, r0
 80163e2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	881b      	ldrh	r3, [r3, #0]
 80163e8:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80163ea:	7afb      	ldrb	r3, [r7, #11]
 80163ec:	f083 0301 	eor.w	r3, r3, #1
 80163f0:	b2db      	uxtb	r3, r3
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d007      	beq.n	8016406 <GetDutyCycle+0x36>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
        uint16_t joinDutyCycle = BACKOFF_DC_1_HOUR;
 80163f6:	2364      	movs	r3, #100	@ 0x64
 80163f8:	82bb      	strh	r3, [r7, #20]
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80163fa:	8aba      	ldrh	r2, [r7, #20]
 80163fc:	8afb      	ldrh	r3, [r7, #22]
 80163fe:	4293      	cmp	r3, r2
 8016400:	bf38      	it	cc
 8016402:	4613      	movcc	r3, r2
 8016404:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016406:	8afb      	ldrh	r3, [r7, #22]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d101      	bne.n	8016410 <GetDutyCycle+0x40>
    {
        dutyCycle = 1;
 801640c:	2301      	movs	r3, #1
 801640e:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016410:	8afb      	ldrh	r3, [r7, #22]
}
 8016412:	4618      	mov	r0, r3
 8016414:	371c      	adds	r7, #28
 8016416:	46bd      	mov	sp, r7
 8016418:	bc80      	pop	{r7}
 801641a:	4770      	bx	lr

0801641c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b086      	sub	sp, #24
 8016420:	af00      	add	r7, sp, #0
 8016422:	60f8      	str	r0, [r7, #12]
 8016424:	4608      	mov	r0, r1
 8016426:	4639      	mov	r1, r7
 8016428:	e881 000c 	stmia.w	r1, {r2, r3}
 801642c:	4603      	mov	r3, r0
 801642e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	881b      	ldrh	r3, [r3, #0]
 8016434:	827b      	strh	r3, [r7, #18]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016436:	4b1a      	ldr	r3, [pc, #104]	@ (80164a0 <SetMaxTimeCredits+0x84>)
 8016438:	617b      	str	r3, [r7, #20]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801643a:	7af9      	ldrb	r1, [r7, #11]
 801643c:	463b      	mov	r3, r7
 801643e:	cb0c      	ldmia	r3, {r2, r3}
 8016440:	68f8      	ldr	r0, [r7, #12]
 8016442:	f7ff ffc5 	bl	80163d0 <GetDutyCycle>
 8016446:	4603      	mov	r3, r0
 8016448:	827b      	strh	r3, [r7, #18]

    if( joined == false )
 801644a:	7afb      	ldrb	r3, [r7, #11]
 801644c:	f083 0301 	eor.w	r3, r3, #1
 8016450:	b2db      	uxtb	r3, r3
 8016452:	2b00      	cmp	r3, #0
 8016454:	d011      	beq.n	801647a <SetMaxTimeCredits+0x5e>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
		if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016456:	683b      	ldr	r3, [r7, #0]
 8016458:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801645c:	d202      	bcs.n	8016464 <SetMaxTimeCredits+0x48>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801645e:	4b10      	ldr	r3, [pc, #64]	@ (80164a0 <SetMaxTimeCredits+0x84>)
 8016460:	617b      	str	r3, [r7, #20]
 8016462:	e014      	b.n	801648e <SetMaxTimeCredits+0x72>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 801646a:	4293      	cmp	r3, r2
 801646c:	d802      	bhi.n	8016474 <SetMaxTimeCredits+0x58>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801646e:	4b0c      	ldr	r3, [pc, #48]	@ (80164a0 <SetMaxTimeCredits+0x84>)
 8016470:	617b      	str	r3, [r7, #20]
 8016472:	e00c      	b.n	801648e <SetMaxTimeCredits+0x72>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
 8016474:	4b0b      	ldr	r3, [pc, #44]	@ (80164a4 <SetMaxTimeCredits+0x88>)
 8016476:	617b      	str	r3, [r7, #20]
 8016478:	e009      	b.n	801648e <SetMaxTimeCredits+0x72>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 801647a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801647e:	f083 0301 	eor.w	r3, r3, #1
 8016482:	b2db      	uxtb	r3, r3
 8016484:	2b00      	cmp	r3, #0
 8016486:	d002      	beq.n	801648e <SetMaxTimeCredits+0x72>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	697a      	ldr	r2, [r7, #20]
 801648c:	60da      	str	r2, [r3, #12]
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	697a      	ldr	r2, [r7, #20]
 8016492:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8016494:	8a7b      	ldrh	r3, [r7, #18]
}
 8016496:	4618      	mov	r0, r3
 8016498:	3718      	adds	r7, #24
 801649a:	46bd      	mov	sp, r7
 801649c:	bd80      	pop	{r7, pc}
 801649e:	bf00      	nop
 80164a0:	0036ee80 	.word	0x0036ee80
 80164a4:	000d4670 	.word	0x000d4670

080164a8 <UpdateTimeCredits>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime, TimerTime_t lastBandUpdateTime )
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b086      	sub	sp, #24
 80164ac:	af02      	add	r7, sp, #8
 80164ae:	6078      	str	r0, [r7, #4]
 80164b0:	4608      	mov	r0, r1
 80164b2:	4611      	mov	r1, r2
 80164b4:	461a      	mov	r2, r3
 80164b6:	4603      	mov	r3, r0
 80164b8:	70fb      	strb	r3, [r7, #3]
 80164ba:	460b      	mov	r3, r1
 80164bc:	70bb      	strb	r3, [r7, #2]
 80164be:	4613      	mov	r3, r2
 80164c0:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80164c2:	78f9      	ldrb	r1, [r7, #3]
 80164c4:	787b      	ldrb	r3, [r7, #1]
 80164c6:	9301      	str	r3, [sp, #4]
 80164c8:	78bb      	ldrb	r3, [r7, #2]
 80164ca:	9300      	str	r3, [sp, #0]
 80164cc:	f107 0318 	add.w	r3, r7, #24
 80164d0:	cb0c      	ldmia	r3, {r2, r3}
 80164d2:	6878      	ldr	r0, [r7, #4]
 80164d4:	f7ff ffa2 	bl	801641c <SetMaxTimeCredits>
 80164d8:	4603      	mov	r3, r0
 80164da:	817b      	strh	r3, [r7, #10]
                                            dutyCycleEnabled, lastTxIsJoinRequest );
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;
 80164dc:	4b1a      	ldr	r3, [pc, #104]	@ (8016548 <UpdateTimeCredits+0xa0>)
 80164de:	60fb      	str	r3, [r7, #12]

    if( joined == false )
 80164e0:	78fb      	ldrb	r3, [r7, #3]
 80164e2:	f083 0301 	eor.w	r3, r3, #1
 80164e6:	b2db      	uxtb	r3, r3
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d010      	beq.n	801650e <UpdateTimeCredits+0x66>
    {
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80164ec:	69bb      	ldr	r3, [r7, #24]
 80164ee:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80164f2:	d202      	bcs.n	80164fa <UpdateTimeCredits+0x52>
        {
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
 80164f4:	4b14      	ldr	r3, [pc, #80]	@ (8016548 <UpdateTimeCredits+0xa0>)
 80164f6:	60fb      	str	r3, [r7, #12]
 80164f8:	e009      	b.n	801650e <UpdateTimeCredits+0x66>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80164fa:	69bb      	ldr	r3, [r7, #24]
 80164fc:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016500:	4293      	cmp	r3, r2
 8016502:	d802      	bhi.n	801650a <UpdateTimeCredits+0x62>
        {
            observation = ( BACKOFF_DUTY_CYCLE_10_HOURS_IN_S * 1000 );
 8016504:	4b11      	ldr	r3, [pc, #68]	@ (801654c <UpdateTimeCredits+0xa4>)
 8016506:	60fb      	str	r3, [r7, #12]
 8016508:	e001      	b.n	801650e <UpdateTimeCredits+0x66>
        }
        else
        {
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
 801650a:	4b11      	ldr	r3, [pc, #68]	@ (8016550 <UpdateTimeCredits+0xa8>)
 801650c:	60fb      	str	r3, [r7, #12]
        }
    }

    // Apply new credits only if the observation period has been elapsed.
    if( ( observation <= lastBandUpdateTime ) ||
 801650e:	68fa      	ldr	r2, [r7, #12]
 8016510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016512:	429a      	cmp	r2, r3
 8016514:	d908      	bls.n	8016528 <UpdateTimeCredits+0x80>
        ( band->LastMaxCreditAssignTime != observation ) ||
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	689b      	ldr	r3, [r3, #8]
    if( ( observation <= lastBandUpdateTime ) ||
 801651a:	68fa      	ldr	r2, [r7, #12]
 801651c:	429a      	cmp	r2, r3
 801651e:	d103      	bne.n	8016528 <UpdateTimeCredits+0x80>
        ( band->LastBandUpdateTime == 0 ) )
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	685b      	ldr	r3, [r3, #4]
        ( band->LastMaxCreditAssignTime != observation ) ||
 8016524:	2b00      	cmp	r3, #0
 8016526:	d109      	bne.n	801653c <UpdateTimeCredits+0x94>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	691a      	ldr	r2, [r3, #16]
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	60da      	str	r2, [r3, #12]
        band->LastBandUpdateTime = currentTime;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	6a3a      	ldr	r2, [r7, #32]
 8016534:	605a      	str	r2, [r3, #4]
        band->LastMaxCreditAssignTime = observation;
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	68fa      	ldr	r2, [r7, #12]
 801653a:	609a      	str	r2, [r3, #8]
    }
    return dutyCycle;
 801653c:	897b      	ldrh	r3, [r7, #10]
}
 801653e:	4618      	mov	r0, r3
 8016540:	3710      	adds	r7, #16
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}
 8016546:	bf00      	nop
 8016548:	0036ee80 	.word	0x0036ee80
 801654c:	025c3f80 	.word	0x025c3f80
 8016550:	07829b80 	.word	0x07829b80

08016554 <CountChannels>:
    return dutyCycle;
}
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016554:	b480      	push	{r7}
 8016556:	b085      	sub	sp, #20
 8016558:	af00      	add	r7, sp, #0
 801655a:	4603      	mov	r3, r0
 801655c:	460a      	mov	r2, r1
 801655e:	80fb      	strh	r3, [r7, #6]
 8016560:	4613      	mov	r3, r2
 8016562:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016564:	2300      	movs	r3, #0
 8016566:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016568:	2300      	movs	r3, #0
 801656a:	73bb      	strb	r3, [r7, #14]
 801656c:	e011      	b.n	8016592 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801656e:	88fa      	ldrh	r2, [r7, #6]
 8016570:	7bbb      	ldrb	r3, [r7, #14]
 8016572:	2101      	movs	r1, #1
 8016574:	fa01 f303 	lsl.w	r3, r1, r3
 8016578:	401a      	ands	r2, r3
 801657a:	7bbb      	ldrb	r3, [r7, #14]
 801657c:	2101      	movs	r1, #1
 801657e:	fa01 f303 	lsl.w	r3, r1, r3
 8016582:	429a      	cmp	r2, r3
 8016584:	d102      	bne.n	801658c <CountChannels+0x38>
        {
            nbActiveBits++;
 8016586:	7bfb      	ldrb	r3, [r7, #15]
 8016588:	3301      	adds	r3, #1
 801658a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801658c:	7bbb      	ldrb	r3, [r7, #14]
 801658e:	3301      	adds	r3, #1
 8016590:	73bb      	strb	r3, [r7, #14]
 8016592:	7bba      	ldrb	r2, [r7, #14]
 8016594:	797b      	ldrb	r3, [r7, #5]
 8016596:	429a      	cmp	r2, r3
 8016598:	d3e9      	bcc.n	801656e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801659a:	7bfb      	ldrb	r3, [r7, #15]
}
 801659c:	4618      	mov	r0, r3
 801659e:	3714      	adds	r7, #20
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bc80      	pop	{r7}
 80165a4:	4770      	bx	lr

080165a6 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80165a6:	b580      	push	{r7, lr}
 80165a8:	b084      	sub	sp, #16
 80165aa:	af00      	add	r7, sp, #0
 80165ac:	6039      	str	r1, [r7, #0]
 80165ae:	4611      	mov	r1, r2
 80165b0:	461a      	mov	r2, r3
 80165b2:	4603      	mov	r3, r0
 80165b4:	71fb      	strb	r3, [r7, #7]
 80165b6:	460b      	mov	r3, r1
 80165b8:	71bb      	strb	r3, [r7, #6]
 80165ba:	4613      	mov	r3, r2
 80165bc:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80165be:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80165c2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80165c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80165ca:	4618      	mov	r0, r3
 80165cc:	f000 f85d 	bl	801668a <RegionCommonValueInRange>
 80165d0:	4603      	mov	r3, r0
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d101      	bne.n	80165da <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80165d6:	2300      	movs	r3, #0
 80165d8:	e053      	b.n	8016682 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80165da:	2300      	movs	r3, #0
 80165dc:	73fb      	strb	r3, [r7, #15]
 80165de:	2300      	movs	r3, #0
 80165e0:	73bb      	strb	r3, [r7, #14]
 80165e2:	e049      	b.n	8016678 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80165e4:	2300      	movs	r3, #0
 80165e6:	737b      	strb	r3, [r7, #13]
 80165e8:	e03d      	b.n	8016666 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80165ea:	7bbb      	ldrb	r3, [r7, #14]
 80165ec:	005b      	lsls	r3, r3, #1
 80165ee:	683a      	ldr	r2, [r7, #0]
 80165f0:	4413      	add	r3, r2
 80165f2:	881b      	ldrh	r3, [r3, #0]
 80165f4:	461a      	mov	r2, r3
 80165f6:	7b7b      	ldrb	r3, [r7, #13]
 80165f8:	fa42 f303 	asr.w	r3, r2, r3
 80165fc:	f003 0301 	and.w	r3, r3, #1
 8016600:	2b00      	cmp	r3, #0
 8016602:	d02d      	beq.n	8016660 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016604:	7bfa      	ldrb	r2, [r7, #15]
 8016606:	7b7b      	ldrb	r3, [r7, #13]
 8016608:	4413      	add	r3, r2
 801660a:	461a      	mov	r2, r3
 801660c:	4613      	mov	r3, r2
 801660e:	005b      	lsls	r3, r3, #1
 8016610:	4413      	add	r3, r2
 8016612:	009b      	lsls	r3, r3, #2
 8016614:	461a      	mov	r2, r3
 8016616:	69fb      	ldr	r3, [r7, #28]
 8016618:	4413      	add	r3, r2
 801661a:	7a1b      	ldrb	r3, [r3, #8]
 801661c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016620:	b25b      	sxtb	r3, r3
 8016622:	f003 030f 	and.w	r3, r3, #15
 8016626:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016628:	7bfa      	ldrb	r2, [r7, #15]
 801662a:	7b7b      	ldrb	r3, [r7, #13]
 801662c:	4413      	add	r3, r2
 801662e:	461a      	mov	r2, r3
 8016630:	4613      	mov	r3, r2
 8016632:	005b      	lsls	r3, r3, #1
 8016634:	4413      	add	r3, r2
 8016636:	009b      	lsls	r3, r3, #2
 8016638:	461a      	mov	r2, r3
 801663a:	69fb      	ldr	r3, [r7, #28]
 801663c:	4413      	add	r3, r2
 801663e:	7a1b      	ldrb	r3, [r3, #8]
 8016640:	f343 1303 	sbfx	r3, r3, #4, #4
 8016644:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016646:	f003 030f 	and.w	r3, r3, #15
 801664a:	b25a      	sxtb	r2, r3
 801664c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016650:	4618      	mov	r0, r3
 8016652:	f000 f81a 	bl	801668a <RegionCommonValueInRange>
 8016656:	4603      	mov	r3, r0
 8016658:	2b01      	cmp	r3, #1
 801665a:	d101      	bne.n	8016660 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 801665c:	2301      	movs	r3, #1
 801665e:	e010      	b.n	8016682 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016660:	7b7b      	ldrb	r3, [r7, #13]
 8016662:	3301      	adds	r3, #1
 8016664:	737b      	strb	r3, [r7, #13]
 8016666:	7b7b      	ldrb	r3, [r7, #13]
 8016668:	2b0f      	cmp	r3, #15
 801666a:	d9be      	bls.n	80165ea <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801666c:	7bfb      	ldrb	r3, [r7, #15]
 801666e:	3310      	adds	r3, #16
 8016670:	73fb      	strb	r3, [r7, #15]
 8016672:	7bbb      	ldrb	r3, [r7, #14]
 8016674:	3301      	adds	r3, #1
 8016676:	73bb      	strb	r3, [r7, #14]
 8016678:	7bfa      	ldrb	r2, [r7, #15]
 801667a:	79fb      	ldrb	r3, [r7, #7]
 801667c:	429a      	cmp	r2, r3
 801667e:	d3b1      	bcc.n	80165e4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016680:	2300      	movs	r3, #0
}
 8016682:	4618      	mov	r0, r3
 8016684:	3710      	adds	r7, #16
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}

0801668a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801668a:	b480      	push	{r7}
 801668c:	b083      	sub	sp, #12
 801668e:	af00      	add	r7, sp, #0
 8016690:	4603      	mov	r3, r0
 8016692:	71fb      	strb	r3, [r7, #7]
 8016694:	460b      	mov	r3, r1
 8016696:	71bb      	strb	r3, [r7, #6]
 8016698:	4613      	mov	r3, r2
 801669a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 801669c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80166a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80166a4:	429a      	cmp	r2, r3
 80166a6:	db07      	blt.n	80166b8 <RegionCommonValueInRange+0x2e>
 80166a8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80166ac:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80166b0:	429a      	cmp	r2, r3
 80166b2:	dc01      	bgt.n	80166b8 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80166b4:	2301      	movs	r3, #1
 80166b6:	e000      	b.n	80166ba <RegionCommonValueInRange+0x30>
    }
    return 0;
 80166b8:	2300      	movs	r3, #0
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	370c      	adds	r7, #12
 80166be:	46bd      	mov	sp, r7
 80166c0:	bc80      	pop	{r7}
 80166c2:	4770      	bx	lr

080166c4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80166c4:	b480      	push	{r7}
 80166c6:	b085      	sub	sp, #20
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
 80166cc:	460b      	mov	r3, r1
 80166ce:	70fb      	strb	r3, [r7, #3]
 80166d0:	4613      	mov	r3, r2
 80166d2:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80166d4:	78fb      	ldrb	r3, [r7, #3]
 80166d6:	091b      	lsrs	r3, r3, #4
 80166d8:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80166da:	78bb      	ldrb	r3, [r7, #2]
 80166dc:	091b      	lsrs	r3, r3, #4
 80166de:	b2db      	uxtb	r3, r3
 80166e0:	7bfa      	ldrb	r2, [r7, #15]
 80166e2:	429a      	cmp	r2, r3
 80166e4:	d803      	bhi.n	80166ee <RegionCommonChanDisable+0x2a>
 80166e6:	78fa      	ldrb	r2, [r7, #3]
 80166e8:	78bb      	ldrb	r3, [r7, #2]
 80166ea:	429a      	cmp	r2, r3
 80166ec:	d301      	bcc.n	80166f2 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80166ee:	2300      	movs	r3, #0
 80166f0:	e017      	b.n	8016722 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80166f2:	7bfb      	ldrb	r3, [r7, #15]
 80166f4:	005b      	lsls	r3, r3, #1
 80166f6:	687a      	ldr	r2, [r7, #4]
 80166f8:	4413      	add	r3, r2
 80166fa:	881b      	ldrh	r3, [r3, #0]
 80166fc:	b21a      	sxth	r2, r3
 80166fe:	78fb      	ldrb	r3, [r7, #3]
 8016700:	f003 030f 	and.w	r3, r3, #15
 8016704:	2101      	movs	r1, #1
 8016706:	fa01 f303 	lsl.w	r3, r1, r3
 801670a:	b21b      	sxth	r3, r3
 801670c:	43db      	mvns	r3, r3
 801670e:	b21b      	sxth	r3, r3
 8016710:	4013      	ands	r3, r2
 8016712:	b219      	sxth	r1, r3
 8016714:	7bfb      	ldrb	r3, [r7, #15]
 8016716:	005b      	lsls	r3, r3, #1
 8016718:	687a      	ldr	r2, [r7, #4]
 801671a:	4413      	add	r3, r2
 801671c:	b28a      	uxth	r2, r1
 801671e:	801a      	strh	r2, [r3, #0]

    return true;
 8016720:	2301      	movs	r3, #1
}
 8016722:	4618      	mov	r0, r3
 8016724:	3714      	adds	r7, #20
 8016726:	46bd      	mov	sp, r7
 8016728:	bc80      	pop	{r7}
 801672a:	4770      	bx	lr

0801672c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b084      	sub	sp, #16
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
 8016734:	460b      	mov	r3, r1
 8016736:	70fb      	strb	r3, [r7, #3]
 8016738:	4613      	mov	r3, r2
 801673a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 801673c:	2300      	movs	r3, #0
 801673e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d101      	bne.n	801674a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8016746:	2300      	movs	r3, #0
 8016748:	e018      	b.n	801677c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801674a:	78fb      	ldrb	r3, [r7, #3]
 801674c:	73bb      	strb	r3, [r7, #14]
 801674e:	e010      	b.n	8016772 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016750:	7bbb      	ldrb	r3, [r7, #14]
 8016752:	005b      	lsls	r3, r3, #1
 8016754:	687a      	ldr	r2, [r7, #4]
 8016756:	4413      	add	r3, r2
 8016758:	881b      	ldrh	r3, [r3, #0]
 801675a:	2110      	movs	r1, #16
 801675c:	4618      	mov	r0, r3
 801675e:	f7ff fef9 	bl	8016554 <CountChannels>
 8016762:	4603      	mov	r3, r0
 8016764:	461a      	mov	r2, r3
 8016766:	7bfb      	ldrb	r3, [r7, #15]
 8016768:	4413      	add	r3, r2
 801676a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801676c:	7bbb      	ldrb	r3, [r7, #14]
 801676e:	3301      	adds	r3, #1
 8016770:	73bb      	strb	r3, [r7, #14]
 8016772:	7bba      	ldrb	r2, [r7, #14]
 8016774:	78bb      	ldrb	r3, [r7, #2]
 8016776:	429a      	cmp	r2, r3
 8016778:	d3ea      	bcc.n	8016750 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801677a:	7bfb      	ldrb	r3, [r7, #15]
}
 801677c:	4618      	mov	r0, r3
 801677e:	3710      	adds	r7, #16
 8016780:	46bd      	mov	sp, r7
 8016782:	bd80      	pop	{r7, pc}

08016784 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016784:	b480      	push	{r7}
 8016786:	b087      	sub	sp, #28
 8016788:	af00      	add	r7, sp, #0
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	4613      	mov	r3, r2
 8016790:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d016      	beq.n	80167c6 <RegionCommonChanMaskCopy+0x42>
 8016798:	68bb      	ldr	r3, [r7, #8]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d013      	beq.n	80167c6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801679e:	2300      	movs	r3, #0
 80167a0:	75fb      	strb	r3, [r7, #23]
 80167a2:	e00c      	b.n	80167be <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80167a4:	7dfb      	ldrb	r3, [r7, #23]
 80167a6:	005b      	lsls	r3, r3, #1
 80167a8:	68ba      	ldr	r2, [r7, #8]
 80167aa:	441a      	add	r2, r3
 80167ac:	7dfb      	ldrb	r3, [r7, #23]
 80167ae:	005b      	lsls	r3, r3, #1
 80167b0:	68f9      	ldr	r1, [r7, #12]
 80167b2:	440b      	add	r3, r1
 80167b4:	8812      	ldrh	r2, [r2, #0]
 80167b6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80167b8:	7dfb      	ldrb	r3, [r7, #23]
 80167ba:	3301      	adds	r3, #1
 80167bc:	75fb      	strb	r3, [r7, #23]
 80167be:	7dfa      	ldrb	r2, [r7, #23]
 80167c0:	79fb      	ldrb	r3, [r7, #7]
 80167c2:	429a      	cmp	r2, r3
 80167c4:	d3ee      	bcc.n	80167a4 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80167c6:	bf00      	nop
 80167c8:	371c      	adds	r7, #28
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bc80      	pop	{r7}
 80167ce:	4770      	bx	lr

080167d0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80167d0:	b082      	sub	sp, #8
 80167d2:	b580      	push	{r7, lr}
 80167d4:	b086      	sub	sp, #24
 80167d6:	af00      	add	r7, sp, #0
 80167d8:	60f8      	str	r0, [r7, #12]
 80167da:	60b9      	str	r1, [r7, #8]
 80167dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80167de:	4613      	mov	r3, r2
 80167e0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80167e2:	79f9      	ldrb	r1, [r7, #7]
 80167e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80167e8:	cb0c      	ldmia	r3, {r2, r3}
 80167ea:	68f8      	ldr	r0, [r7, #12]
 80167ec:	f7ff fdf0 	bl	80163d0 <GetDutyCycle>
 80167f0:	4603      	mov	r3, r0
 80167f2:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	68da      	ldr	r2, [r3, #12]
 80167f8:	8afb      	ldrh	r3, [r7, #22]
 80167fa:	68b9      	ldr	r1, [r7, #8]
 80167fc:	fb01 f303 	mul.w	r3, r1, r3
 8016800:	429a      	cmp	r2, r3
 8016802:	d909      	bls.n	8016818 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	68da      	ldr	r2, [r3, #12]
 8016808:	8afb      	ldrh	r3, [r7, #22]
 801680a:	68b9      	ldr	r1, [r7, #8]
 801680c:	fb01 f303 	mul.w	r3, r1, r3
 8016810:	1ad2      	subs	r2, r2, r3
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016816:	e002      	b.n	801681e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	2200      	movs	r2, #0
 801681c:	60da      	str	r2, [r3, #12]
}
 801681e:	bf00      	nop
 8016820:	3718      	adds	r7, #24
 8016822:	46bd      	mov	sp, r7
 8016824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016828:	b002      	add	sp, #8
 801682a:	4770      	bx	lr

0801682c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801682c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801682e:	b08f      	sub	sp, #60	@ 0x3c
 8016830:	af04      	add	r7, sp, #16
 8016832:	6039      	str	r1, [r7, #0]
 8016834:	4611      	mov	r1, r2
 8016836:	461a      	mov	r2, r3
 8016838:	4603      	mov	r3, r0
 801683a:	71fb      	strb	r3, [r7, #7]
 801683c:	460b      	mov	r3, r1
 801683e:	71bb      	strb	r3, [r7, #6]
 8016840:	4613      	mov	r3, r2
 8016842:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016844:	f04f 33ff 	mov.w	r3, #4294967295
 8016848:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801684a:	f006 f8d5 	bl	801c9f8 <UTIL_TIMER_GetCurrentTime>
 801684e:	61b8      	str	r0, [r7, #24]
    TimerTime_t creditCosts = 0;
 8016850:	2300      	movs	r3, #0
 8016852:	617b      	str	r3, [r7, #20]
    uint16_t dutyCycle = 1;
 8016854:	2301      	movs	r3, #1
 8016856:	827b      	strh	r3, [r7, #18]
    uint8_t validBands = 0;
 8016858:	2300      	movs	r3, #0
 801685a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801685e:	2300      	movs	r3, #0
 8016860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016864:	e09c      	b.n	80169a0 <RegionCommonUpdateBandTimeOff+0x174>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
        TimerTime_t elapsedTime = TimerGetElapsedTime( bands[i].LastBandUpdateTime );
 8016866:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801686a:	4613      	mov	r3, r2
 801686c:	005b      	lsls	r3, r3, #1
 801686e:	4413      	add	r3, r2
 8016870:	00db      	lsls	r3, r3, #3
 8016872:	461a      	mov	r2, r3
 8016874:	683b      	ldr	r3, [r7, #0]
 8016876:	4413      	add	r3, r2
 8016878:	685b      	ldr	r3, [r3, #4]
 801687a:	4618      	mov	r0, r3
 801687c:	f006 f8ce 	bl	801ca1c <UTIL_TIMER_GetElapsedTime>
 8016880:	60f8      	str	r0, [r7, #12]

        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016882:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016886:	4613      	mov	r3, r2
 8016888:	005b      	lsls	r3, r3, #1
 801688a:	4413      	add	r3, r2
 801688c:	00db      	lsls	r3, r3, #3
 801688e:	461a      	mov	r2, r3
 8016890:	683b      	ldr	r3, [r7, #0]
 8016892:	189c      	adds	r4, r3, r2
 8016894:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8016898:	797a      	ldrb	r2, [r7, #5]
 801689a:	79fd      	ldrb	r5, [r7, #7]
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	9303      	str	r3, [sp, #12]
 80168a0:	69bb      	ldr	r3, [r7, #24]
 80168a2:	9302      	str	r3, [sp, #8]
 80168a4:	46ec      	mov	ip, sp
 80168a6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80168aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80168ae:	e88c 0003 	stmia.w	ip, {r0, r1}
 80168b2:	4633      	mov	r3, r6
 80168b4:	4629      	mov	r1, r5
 80168b6:	4620      	mov	r0, r4
 80168b8:	f7ff fdf6 	bl	80164a8 <UpdateTimeCredits>
 80168bc:	4603      	mov	r3, r0
 80168be:	827b      	strh	r3, [r7, #18]
                                       currentTime );
#endif

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80168c0:	8a7a      	ldrh	r2, [r7, #18]
 80168c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80168c4:	fb02 f303 	mul.w	r3, r2, r3
 80168c8:	617b      	str	r3, [r7, #20]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80168ca:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80168ce:	4613      	mov	r3, r2
 80168d0:	005b      	lsls	r3, r3, #1
 80168d2:	4413      	add	r3, r2
 80168d4:	00db      	lsls	r3, r3, #3
 80168d6:	461a      	mov	r2, r3
 80168d8:	683b      	ldr	r3, [r7, #0]
 80168da:	4413      	add	r3, r2
 80168dc:	68db      	ldr	r3, [r3, #12]
 80168de:	697a      	ldr	r2, [r7, #20]
 80168e0:	429a      	cmp	r2, r3
 80168e2:	d308      	bcc.n	80168f6 <RegionCommonUpdateBandTimeOff+0xca>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80168e4:	797b      	ldrb	r3, [r7, #5]
 80168e6:	f083 0301 	eor.w	r3, r3, #1
 80168ea:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d013      	beq.n	8016918 <RegionCommonUpdateBandTimeOff+0xec>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80168f0:	79fb      	ldrb	r3, [r7, #7]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d010      	beq.n	8016918 <RegionCommonUpdateBandTimeOff+0xec>
        {
            bands[i].ReadyForTransmission = true;
 80168f6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80168fa:	4613      	mov	r3, r2
 80168fc:	005b      	lsls	r3, r3, #1
 80168fe:	4413      	add	r3, r2
 8016900:	00db      	lsls	r3, r3, #3
 8016902:	461a      	mov	r2, r3
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	4413      	add	r3, r2
 8016908:	2201      	movs	r2, #1
 801690a:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 801690c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016910:	3301      	adds	r3, #1
 8016912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016916:	e03e      	b.n	8016996 <RegionCommonUpdateBandTimeOff+0x16a>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8016918:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801691c:	4613      	mov	r3, r2
 801691e:	005b      	lsls	r3, r3, #1
 8016920:	4413      	add	r3, r2
 8016922:	00db      	lsls	r3, r3, #3
 8016924:	461a      	mov	r2, r3
 8016926:	683b      	ldr	r3, [r7, #0]
 8016928:	4413      	add	r3, r2
 801692a:	2200      	movs	r2, #0
 801692c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 801692e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016932:	4613      	mov	r3, r2
 8016934:	005b      	lsls	r3, r3, #1
 8016936:	4413      	add	r3, r2
 8016938:	00db      	lsls	r3, r3, #3
 801693a:	461a      	mov	r2, r3
 801693c:	683b      	ldr	r3, [r7, #0]
 801693e:	4413      	add	r3, r2
 8016940:	691b      	ldr	r3, [r3, #16]
 8016942:	697a      	ldr	r2, [r7, #20]
 8016944:	429a      	cmp	r2, r3
 8016946:	d226      	bcs.n	8016996 <RegionCommonUpdateBandTimeOff+0x16a>
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
                TimerTime_t observationTimeDiff = 0;
 8016948:	2300      	movs	r3, #0
 801694a:	61fb      	str	r3, [r7, #28]
                if( bands[i].LastMaxCreditAssignTime >= elapsedTime )
 801694c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016950:	4613      	mov	r3, r2
 8016952:	005b      	lsls	r3, r3, #1
 8016954:	4413      	add	r3, r2
 8016956:	00db      	lsls	r3, r3, #3
 8016958:	461a      	mov	r2, r3
 801695a:	683b      	ldr	r3, [r7, #0]
 801695c:	4413      	add	r3, r2
 801695e:	689b      	ldr	r3, [r3, #8]
 8016960:	68fa      	ldr	r2, [r7, #12]
 8016962:	429a      	cmp	r2, r3
 8016964:	d80c      	bhi.n	8016980 <RegionCommonUpdateBandTimeOff+0x154>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
 8016966:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801696a:	4613      	mov	r3, r2
 801696c:	005b      	lsls	r3, r3, #1
 801696e:	4413      	add	r3, r2
 8016970:	00db      	lsls	r3, r3, #3
 8016972:	461a      	mov	r2, r3
 8016974:	683b      	ldr	r3, [r7, #0]
 8016976:	4413      	add	r3, r2
 8016978:	689a      	ldr	r2, [r3, #8]
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	1ad3      	subs	r3, r2, r3
 801697e:	61fb      	str	r3, [r7, #28]
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
 8016980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016982:	69fb      	ldr	r3, [r7, #28]
 8016984:	4293      	cmp	r3, r2
 8016986:	bf28      	it	cs
 8016988:	4613      	movcs	r3, r2
 801698a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801698c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016990:	3301      	adds	r3, #1
 8016992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for( uint8_t i = 0; i < nbBands; i++ )
 8016996:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801699a:	3301      	adds	r3, #1
 801699c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80169a0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80169a4:	79bb      	ldrb	r3, [r7, #6]
 80169a6:	429a      	cmp	r2, r3
 80169a8:	f4ff af5d 	bcc.w	8016866 <RegionCommonUpdateBandTimeOff+0x3a>
#endif

        }
    }

    if( validBands == 0 )
 80169ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d102      	bne.n	80169ba <RegionCommonUpdateBandTimeOff+0x18e>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80169b4:	f04f 33ff 	mov.w	r3, #4294967295
 80169b8:	e000      	b.n	80169bc <RegionCommonUpdateBandTimeOff+0x190>
    }
    return minTimeToWait;
 80169ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80169bc:	4618      	mov	r0, r3
 80169be:	372c      	adds	r7, #44	@ 0x2c
 80169c0:	46bd      	mov	sp, r7
 80169c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080169c4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80169c4:	b480      	push	{r7}
 80169c6:	b085      	sub	sp, #20
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
 80169cc:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80169ce:	2300      	movs	r3, #0
 80169d0:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	781b      	ldrb	r3, [r3, #0]
 80169d6:	2b03      	cmp	r3, #3
 80169d8:	d140      	bne.n	8016a5c <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	3301      	adds	r3, #1
 80169de:	781b      	ldrb	r3, [r3, #0]
 80169e0:	b25a      	sxtb	r2, r3
 80169e2:	683b      	ldr	r3, [r7, #0]
 80169e4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80169e6:	683b      	ldr	r3, [r7, #0]
 80169e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80169ec:	f003 030f 	and.w	r3, r3, #15
 80169f0:	b25a      	sxtb	r2, r3
 80169f2:	683b      	ldr	r3, [r7, #0]
 80169f4:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80169f6:	683b      	ldr	r3, [r7, #0]
 80169f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80169fc:	b2db      	uxtb	r3, r3
 80169fe:	091b      	lsrs	r3, r3, #4
 8016a00:	b2db      	uxtb	r3, r3
 8016a02:	b25a      	sxtb	r2, r3
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	3302      	adds	r3, #2
 8016a0c:	781b      	ldrb	r3, [r3, #0]
 8016a0e:	461a      	mov	r2, r3
 8016a10:	683b      	ldr	r3, [r7, #0]
 8016a12:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	889b      	ldrh	r3, [r3, #4]
 8016a18:	b21a      	sxth	r2, r3
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	3303      	adds	r3, #3
 8016a1e:	781b      	ldrb	r3, [r3, #0]
 8016a20:	b21b      	sxth	r3, r3
 8016a22:	021b      	lsls	r3, r3, #8
 8016a24:	b21b      	sxth	r3, r3
 8016a26:	4313      	orrs	r3, r2
 8016a28:	b21b      	sxth	r3, r3
 8016a2a:	b29a      	uxth	r2, r3
 8016a2c:	683b      	ldr	r3, [r7, #0]
 8016a2e:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	791a      	ldrb	r2, [r3, #4]
 8016a34:	683b      	ldr	r3, [r7, #0]
 8016a36:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8016a38:	683b      	ldr	r3, [r7, #0]
 8016a3a:	781b      	ldrb	r3, [r3, #0]
 8016a3c:	091b      	lsrs	r3, r3, #4
 8016a3e:	b2db      	uxtb	r3, r3
 8016a40:	f003 0307 	and.w	r3, r3, #7
 8016a44:	b2da      	uxtb	r2, r3
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	781b      	ldrb	r3, [r3, #0]
 8016a4e:	f003 030f 	and.w	r3, r3, #15
 8016a52:	b2da      	uxtb	r2, r3
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8016a58:	2305      	movs	r3, #5
 8016a5a:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8016a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3714      	adds	r7, #20
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bc80      	pop	{r7}
 8016a66:	4770      	bx	lr

08016a68 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8016a68:	b5b0      	push	{r4, r5, r7, lr}
 8016a6a:	b088      	sub	sp, #32
 8016a6c:	af02      	add	r7, sp, #8
 8016a6e:	60f8      	str	r0, [r7, #12]
 8016a70:	60b9      	str	r1, [r7, #8]
 8016a72:	607a      	str	r2, [r7, #4]
 8016a74:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	791b      	ldrb	r3, [r3, #4]
 8016a7a:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	799b      	ldrb	r3, [r3, #6]
 8016a80:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	79db      	ldrb	r3, [r3, #7]
 8016a86:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	7a1b      	ldrb	r3, [r3, #8]
 8016a8c:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	795b      	ldrb	r3, [r3, #5]
 8016a92:	f083 0301 	eor.w	r3, r3, #1
 8016a96:	b2db      	uxtb	r3, r3
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d008      	beq.n	8016aae <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	7adb      	ldrb	r3, [r3, #11]
 8016aa0:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	7a5b      	ldrb	r3, [r3, #9]
 8016aa6:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	7a9b      	ldrb	r3, [r3, #10]
 8016aac:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8016aae:	7dfb      	ldrb	r3, [r7, #23]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d04a      	beq.n	8016b4a <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016ab4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016ab8:	2b0f      	cmp	r3, #15
 8016aba:	d103      	bne.n	8016ac4 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	7a5b      	ldrb	r3, [r3, #9]
 8016ac0:	75bb      	strb	r3, [r7, #22]
 8016ac2:	e01d      	b.n	8016b00 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	7b18      	ldrb	r0, [r3, #12]
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	6919      	ldr	r1, [r3, #16]
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016ad8:	68fa      	ldr	r2, [r7, #12]
 8016ada:	6992      	ldr	r2, [r2, #24]
 8016adc:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016ae0:	9201      	str	r2, [sp, #4]
 8016ae2:	9300      	str	r3, [sp, #0]
 8016ae4:	462b      	mov	r3, r5
 8016ae6:	4622      	mov	r2, r4
 8016ae8:	f7ff fd5d 	bl	80165a6 <RegionCommonChanVerifyDr>
 8016aec:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016aee:	f083 0301 	eor.w	r3, r3, #1
 8016af2:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d003      	beq.n	8016b00 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8016af8:	7dfb      	ldrb	r3, [r7, #23]
 8016afa:	f023 0302 	bic.w	r3, r3, #2
 8016afe:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8016b00:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016b04:	2b0f      	cmp	r3, #15
 8016b06:	d103      	bne.n	8016b10 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	7a9b      	ldrb	r3, [r3, #10]
 8016b0c:	757b      	strb	r3, [r7, #21]
 8016b0e:	e01c      	b.n	8016b4a <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8016b1c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7ff fdb2 	bl	801668a <RegionCommonValueInRange>
 8016b26:	4603      	mov	r3, r0
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d10e      	bne.n	8016b4a <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8016b32:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8016b36:	429a      	cmp	r2, r3
 8016b38:	da03      	bge.n	8016b42 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	7f5b      	ldrb	r3, [r3, #29]
 8016b3e:	757b      	strb	r3, [r7, #21]
 8016b40:	e003      	b.n	8016b4a <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016b42:	7dfb      	ldrb	r3, [r7, #23]
 8016b44:	f023 0304 	bic.w	r3, r3, #4
 8016b48:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016b4a:	7dfb      	ldrb	r3, [r7, #23]
 8016b4c:	2b07      	cmp	r3, #7
 8016b4e:	d105      	bne.n	8016b5c <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016b50:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d101      	bne.n	8016b5c <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8016b58:	2301      	movs	r3, #1
 8016b5a:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016b5c:	68bb      	ldr	r3, [r7, #8]
 8016b5e:	7dba      	ldrb	r2, [r7, #22]
 8016b60:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	7d7a      	ldrb	r2, [r7, #21]
 8016b66:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016b68:	7d3a      	ldrb	r2, [r7, #20]
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	701a      	strb	r2, [r3, #0]

    return status;
 8016b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b70:	4618      	mov	r0, r3
 8016b72:	3718      	adds	r7, #24
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bdb0      	pop	{r4, r5, r7, pc}

08016b78 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8016b78:	b480      	push	{r7}
 8016b7a:	b083      	sub	sp, #12
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	4603      	mov	r3, r0
 8016b80:	6039      	str	r1, [r7, #0]
 8016b82:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016b84:	79fb      	ldrb	r3, [r7, #7]
 8016b86:	4a06      	ldr	r2, [pc, #24]	@ (8016ba0 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8016b88:	fa02 f303 	lsl.w	r3, r2, r3
 8016b8c:	461a      	mov	r2, r3
 8016b8e:	683b      	ldr	r3, [r7, #0]
 8016b90:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016b94:	4618      	mov	r0, r3
 8016b96:	370c      	adds	r7, #12
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	bc80      	pop	{r7}
 8016b9c:	4770      	bx	lr
 8016b9e:	bf00      	nop
 8016ba0:	000f4240 	.word	0x000f4240

08016ba4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016ba4:	b480      	push	{r7}
 8016ba6:	b083      	sub	sp, #12
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	4603      	mov	r3, r0
 8016bac:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016bae:	79fb      	ldrb	r3, [r7, #7]
 8016bb0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016bb4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	370c      	adds	r7, #12
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bc80      	pop	{r7}
 8016bc0:	4770      	bx	lr
	...

08016bc4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016bc4:	b480      	push	{r7}
 8016bc6:	b085      	sub	sp, #20
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	60f8      	str	r0, [r7, #12]
 8016bcc:	607a      	str	r2, [r7, #4]
 8016bce:	603b      	str	r3, [r7, #0]
 8016bd0:	460b      	mov	r3, r1
 8016bd2:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016bd4:	7afa      	ldrb	r2, [r7, #11]
 8016bd6:	7afb      	ldrb	r3, [r7, #11]
 8016bd8:	3b04      	subs	r3, #4
 8016bda:	4619      	mov	r1, r3
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	fb03 f101 	mul.w	r1, r3, r1
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016be8:	fb00 f303 	mul.w	r3, r0, r3
 8016bec:	440b      	add	r3, r1
 8016bee:	005b      	lsls	r3, r3, #1
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d013      	beq.n	8016c1c <RegionCommonComputeRxWindowParameters+0x58>
 8016bf4:	7afb      	ldrb	r3, [r7, #11]
 8016bf6:	3b04      	subs	r3, #4
 8016bf8:	4619      	mov	r1, r3
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	fb03 f101 	mul.w	r1, r3, r1
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016c06:	fb00 f303 	mul.w	r3, r0, r3
 8016c0a:	440b      	add	r3, r1
 8016c0c:	0059      	lsls	r1, r3, #1
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	440b      	add	r3, r1
 8016c12:	1e59      	subs	r1, r3, #1
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8016c1a:	e00f      	b.n	8016c3c <RegionCommonComputeRxWindowParameters+0x78>
 8016c1c:	7afb      	ldrb	r3, [r7, #11]
 8016c1e:	3b04      	subs	r3, #4
 8016c20:	4619      	mov	r1, r3
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	fb03 f101 	mul.w	r1, r3, r1
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016c2e:	fb00 f303 	mul.w	r3, r0, r3
 8016c32:	440b      	add	r3, r1
 8016c34:	0059      	lsls	r1, r3, #1
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	bf38      	it	cc
 8016c40:	461a      	movcc	r2, r3
 8016c42:	69bb      	ldr	r3, [r7, #24]
 8016c44:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	009b      	lsls	r3, r3, #2
 8016c4a:	4619      	mov	r1, r3
 8016c4c:	69bb      	ldr	r3, [r7, #24]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	68fa      	ldr	r2, [r7, #12]
 8016c52:	fb02 f303 	mul.w	r3, r2, r3
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d007      	beq.n	8016c6a <RegionCommonComputeRxWindowParameters+0xa6>
 8016c5a:	69bb      	ldr	r3, [r7, #24]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	68fa      	ldr	r2, [r7, #12]
 8016c60:	fb02 f303 	mul.w	r3, r2, r3
 8016c64:	3301      	adds	r3, #1
 8016c66:	085b      	lsrs	r3, r3, #1
 8016c68:	e005      	b.n	8016c76 <RegionCommonComputeRxWindowParameters+0xb2>
 8016c6a:	69bb      	ldr	r3, [r7, #24]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	68fa      	ldr	r2, [r7, #12]
 8016c70:	fb02 f303 	mul.w	r3, r2, r3
 8016c74:	085b      	lsrs	r3, r3, #1
 8016c76:	1acb      	subs	r3, r1, r3
 8016c78:	683a      	ldr	r2, [r7, #0]
 8016c7a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016c7e:	fb01 f202 	mul.w	r2, r1, r2
 8016c82:	1a9b      	subs	r3, r3, r2
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	dd27      	ble.n	8016cd8 <RegionCommonComputeRxWindowParameters+0x114>
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	009b      	lsls	r3, r3, #2
 8016c8c:	4619      	mov	r1, r3
 8016c8e:	69bb      	ldr	r3, [r7, #24]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	68fa      	ldr	r2, [r7, #12]
 8016c94:	fb02 f303 	mul.w	r3, r2, r3
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d007      	beq.n	8016cac <RegionCommonComputeRxWindowParameters+0xe8>
 8016c9c:	69bb      	ldr	r3, [r7, #24]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	68fa      	ldr	r2, [r7, #12]
 8016ca2:	fb02 f303 	mul.w	r3, r2, r3
 8016ca6:	3301      	adds	r3, #1
 8016ca8:	085b      	lsrs	r3, r3, #1
 8016caa:	e005      	b.n	8016cb8 <RegionCommonComputeRxWindowParameters+0xf4>
 8016cac:	69bb      	ldr	r3, [r7, #24]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	68fa      	ldr	r2, [r7, #12]
 8016cb2:	fb02 f303 	mul.w	r3, r2, r3
 8016cb6:	085b      	lsrs	r3, r3, #1
 8016cb8:	1acb      	subs	r3, r1, r3
 8016cba:	683a      	ldr	r2, [r7, #0]
 8016cbc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016cc0:	fb01 f202 	mul.w	r2, r1, r2
 8016cc4:	1a9b      	subs	r3, r3, r2
 8016cc6:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8016cca:	4a19      	ldr	r2, [pc, #100]	@ (8016d30 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8016cd0:	1192      	asrs	r2, r2, #6
 8016cd2:	17db      	asrs	r3, r3, #31
 8016cd4:	1ad3      	subs	r3, r2, r3
 8016cd6:	e024      	b.n	8016d22 <RegionCommonComputeRxWindowParameters+0x15e>
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	009b      	lsls	r3, r3, #2
 8016cdc:	4619      	mov	r1, r3
 8016cde:	69bb      	ldr	r3, [r7, #24]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	68fa      	ldr	r2, [r7, #12]
 8016ce4:	fb02 f303 	mul.w	r3, r2, r3
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d007      	beq.n	8016cfc <RegionCommonComputeRxWindowParameters+0x138>
 8016cec:	69bb      	ldr	r3, [r7, #24]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	68fa      	ldr	r2, [r7, #12]
 8016cf2:	fb02 f303 	mul.w	r3, r2, r3
 8016cf6:	3301      	adds	r3, #1
 8016cf8:	085b      	lsrs	r3, r3, #1
 8016cfa:	e005      	b.n	8016d08 <RegionCommonComputeRxWindowParameters+0x144>
 8016cfc:	69bb      	ldr	r3, [r7, #24]
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	68fa      	ldr	r2, [r7, #12]
 8016d02:	fb02 f303 	mul.w	r3, r2, r3
 8016d06:	085b      	lsrs	r3, r3, #1
 8016d08:	1acb      	subs	r3, r1, r3
 8016d0a:	683a      	ldr	r2, [r7, #0]
 8016d0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016d10:	fb01 f202 	mul.w	r2, r1, r2
 8016d14:	1a9b      	subs	r3, r3, r2
 8016d16:	4a06      	ldr	r2, [pc, #24]	@ (8016d30 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016d18:	fb82 1203 	smull	r1, r2, r2, r3
 8016d1c:	1192      	asrs	r2, r2, #6
 8016d1e:	17db      	asrs	r3, r3, #31
 8016d20:	1ad3      	subs	r3, r2, r3
 8016d22:	69fa      	ldr	r2, [r7, #28]
 8016d24:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016d26:	bf00      	nop
 8016d28:	3714      	adds	r7, #20
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bc80      	pop	{r7}
 8016d2e:	4770      	bx	lr
 8016d30:	10624dd3 	.word	0x10624dd3

08016d34 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b086      	sub	sp, #24
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	60b9      	str	r1, [r7, #8]
 8016d3e:	607a      	str	r2, [r7, #4]
 8016d40:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016d42:	2300      	movs	r3, #0
 8016d44:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d4a:	005b      	lsls	r3, r3, #1
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7e9 fd3d 	bl	80007cc <__aeabi_ui2f>
 8016d52:	4603      	mov	r3, r0
 8016d54:	4619      	mov	r1, r3
 8016d56:	68b8      	ldr	r0, [r7, #8]
 8016d58:	f7e9 fc86 	bl	8000668 <__aeabi_fsub>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	6879      	ldr	r1, [r7, #4]
 8016d60:	4618      	mov	r0, r3
 8016d62:	f7e9 fc81 	bl	8000668 <__aeabi_fsub>
 8016d66:	4603      	mov	r3, r0
 8016d68:	4618      	mov	r0, r3
 8016d6a:	f7e9 fb71 	bl	8000450 <__aeabi_f2d>
 8016d6e:	4602      	mov	r2, r0
 8016d70:	460b      	mov	r3, r1
 8016d72:	4610      	mov	r0, r2
 8016d74:	4619      	mov	r1, r3
 8016d76:	f006 f9d3 	bl	801d120 <floor>
 8016d7a:	4602      	mov	r2, r0
 8016d7c:	460b      	mov	r3, r1
 8016d7e:	4610      	mov	r0, r2
 8016d80:	4619      	mov	r1, r3
 8016d82:	f7e9 fc45 	bl	8000610 <__aeabi_d2iz>
 8016d86:	4603      	mov	r3, r0
 8016d88:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8016d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016d8e:	4618      	mov	r0, r3
 8016d90:	3718      	adds	r7, #24
 8016d92:	46bd      	mov	sp, r7
 8016d94:	bd80      	pop	{r7, pc}

08016d96 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016d96:	b590      	push	{r4, r7, lr}
 8016d98:	b087      	sub	sp, #28
 8016d9a:	af00      	add	r7, sp, #0
 8016d9c:	60f8      	str	r0, [r7, #12]
 8016d9e:	60b9      	str	r1, [r7, #8]
 8016da0:	607a      	str	r2, [r7, #4]
 8016da2:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016da4:	2300      	movs	r3, #0
 8016da6:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016da8:	2300      	movs	r3, #0
 8016daa:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016dac:	2300      	movs	r3, #0
 8016dae:	757b      	strb	r3, [r7, #21]
 8016db0:	2300      	movs	r3, #0
 8016db2:	753b      	strb	r3, [r7, #20]
 8016db4:	e09c      	b.n	8016ef0 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016db6:	2300      	movs	r3, #0
 8016db8:	74fb      	strb	r3, [r7, #19]
 8016dba:	e08f      	b.n	8016edc <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	685a      	ldr	r2, [r3, #4]
 8016dc0:	7d3b      	ldrb	r3, [r7, #20]
 8016dc2:	005b      	lsls	r3, r3, #1
 8016dc4:	4413      	add	r3, r2
 8016dc6:	881b      	ldrh	r3, [r3, #0]
 8016dc8:	461a      	mov	r2, r3
 8016dca:	7cfb      	ldrb	r3, [r7, #19]
 8016dcc:	fa42 f303 	asr.w	r3, r2, r3
 8016dd0:	f003 0301 	and.w	r3, r3, #1
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d07e      	beq.n	8016ed6 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	689a      	ldr	r2, [r3, #8]
 8016ddc:	7d79      	ldrb	r1, [r7, #21]
 8016dde:	7cfb      	ldrb	r3, [r7, #19]
 8016de0:	440b      	add	r3, r1
 8016de2:	4619      	mov	r1, r3
 8016de4:	460b      	mov	r3, r1
 8016de6:	005b      	lsls	r3, r3, #1
 8016de8:	440b      	add	r3, r1
 8016dea:	009b      	lsls	r3, r3, #2
 8016dec:	4413      	add	r3, r2
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d06b      	beq.n	8016ecc <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	781b      	ldrb	r3, [r3, #0]
 8016df8:	f083 0301 	eor.w	r3, r3, #1
 8016dfc:	b2db      	uxtb	r3, r3
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d011      	beq.n	8016e26 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d00d      	beq.n	8016e26 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	695a      	ldr	r2, [r3, #20]
 8016e0e:	7d3b      	ldrb	r3, [r7, #20]
 8016e10:	005b      	lsls	r3, r3, #1
 8016e12:	4413      	add	r3, r2
 8016e14:	881b      	ldrh	r3, [r3, #0]
 8016e16:	461a      	mov	r2, r3
 8016e18:	7cfb      	ldrb	r3, [r7, #19]
 8016e1a:	fa42 f303 	asr.w	r3, r2, r3
 8016e1e:	f003 0301 	and.w	r3, r3, #1
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d054      	beq.n	8016ed0 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	785b      	ldrb	r3, [r3, #1]
 8016e2a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	689a      	ldr	r2, [r3, #8]
 8016e30:	7d79      	ldrb	r1, [r7, #21]
 8016e32:	7cfb      	ldrb	r3, [r7, #19]
 8016e34:	440b      	add	r3, r1
 8016e36:	4619      	mov	r1, r3
 8016e38:	460b      	mov	r3, r1
 8016e3a:	005b      	lsls	r3, r3, #1
 8016e3c:	440b      	add	r3, r1
 8016e3e:	009b      	lsls	r3, r3, #2
 8016e40:	4413      	add	r3, r2
 8016e42:	7a1b      	ldrb	r3, [r3, #8]
 8016e44:	f343 0303 	sbfx	r3, r3, #0, #4
 8016e48:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016e4a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	689a      	ldr	r2, [r3, #8]
 8016e50:	7d79      	ldrb	r1, [r7, #21]
 8016e52:	7cfb      	ldrb	r3, [r7, #19]
 8016e54:	440b      	add	r3, r1
 8016e56:	4619      	mov	r1, r3
 8016e58:	460b      	mov	r3, r1
 8016e5a:	005b      	lsls	r3, r3, #1
 8016e5c:	440b      	add	r3, r1
 8016e5e:	009b      	lsls	r3, r3, #2
 8016e60:	4413      	add	r3, r2
 8016e62:	7a1b      	ldrb	r3, [r3, #8]
 8016e64:	f343 1303 	sbfx	r3, r3, #4, #4
 8016e68:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016e6a:	461a      	mov	r2, r3
 8016e6c:	4621      	mov	r1, r4
 8016e6e:	f7ff fc0c 	bl	801668a <RegionCommonValueInRange>
 8016e72:	4603      	mov	r3, r0
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d02d      	beq.n	8016ed4 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	68da      	ldr	r2, [r3, #12]
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	6899      	ldr	r1, [r3, #8]
 8016e80:	7d78      	ldrb	r0, [r7, #21]
 8016e82:	7cfb      	ldrb	r3, [r7, #19]
 8016e84:	4403      	add	r3, r0
 8016e86:	4618      	mov	r0, r3
 8016e88:	4603      	mov	r3, r0
 8016e8a:	005b      	lsls	r3, r3, #1
 8016e8c:	4403      	add	r3, r0
 8016e8e:	009b      	lsls	r3, r3, #2
 8016e90:	440b      	add	r3, r1
 8016e92:	7a5b      	ldrb	r3, [r3, #9]
 8016e94:	4619      	mov	r1, r3
 8016e96:	460b      	mov	r3, r1
 8016e98:	005b      	lsls	r3, r3, #1
 8016e9a:	440b      	add	r3, r1
 8016e9c:	00db      	lsls	r3, r3, #3
 8016e9e:	4413      	add	r3, r2
 8016ea0:	7d1b      	ldrb	r3, [r3, #20]
 8016ea2:	f083 0301 	eor.w	r3, r3, #1
 8016ea6:	b2db      	uxtb	r3, r3
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d003      	beq.n	8016eb4 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016eac:	7dbb      	ldrb	r3, [r7, #22]
 8016eae:	3301      	adds	r3, #1
 8016eb0:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016eb2:	e010      	b.n	8016ed6 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016eb4:	7dfb      	ldrb	r3, [r7, #23]
 8016eb6:	1c5a      	adds	r2, r3, #1
 8016eb8:	75fa      	strb	r2, [r7, #23]
 8016eba:	461a      	mov	r2, r3
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	4413      	add	r3, r2
 8016ec0:	7d79      	ldrb	r1, [r7, #21]
 8016ec2:	7cfa      	ldrb	r2, [r7, #19]
 8016ec4:	440a      	add	r2, r1
 8016ec6:	b2d2      	uxtb	r2, r2
 8016ec8:	701a      	strb	r2, [r3, #0]
 8016eca:	e004      	b.n	8016ed6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016ecc:	bf00      	nop
 8016ece:	e002      	b.n	8016ed6 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016ed0:	bf00      	nop
 8016ed2:	e000      	b.n	8016ed6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016ed4:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016ed6:	7cfb      	ldrb	r3, [r7, #19]
 8016ed8:	3301      	adds	r3, #1
 8016eda:	74fb      	strb	r3, [r7, #19]
 8016edc:	7cfb      	ldrb	r3, [r7, #19]
 8016ede:	2b0f      	cmp	r3, #15
 8016ee0:	f67f af6c 	bls.w	8016dbc <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016ee4:	7d7b      	ldrb	r3, [r7, #21]
 8016ee6:	3310      	adds	r3, #16
 8016ee8:	757b      	strb	r3, [r7, #21]
 8016eea:	7d3b      	ldrb	r3, [r7, #20]
 8016eec:	3301      	adds	r3, #1
 8016eee:	753b      	strb	r3, [r7, #20]
 8016ef0:	7d7b      	ldrb	r3, [r7, #21]
 8016ef2:	b29a      	uxth	r2, r3
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	8a1b      	ldrh	r3, [r3, #16]
 8016ef8:	429a      	cmp	r2, r3
 8016efa:	f4ff af5c 	bcc.w	8016db6 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	7dfa      	ldrb	r2, [r7, #23]
 8016f02:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016f04:	683b      	ldr	r3, [r7, #0]
 8016f06:	7dba      	ldrb	r2, [r7, #22]
 8016f08:	701a      	strb	r2, [r3, #0]
}
 8016f0a:	bf00      	nop
 8016f0c:	371c      	adds	r7, #28
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd90      	pop	{r4, r7, pc}

08016f12 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016f12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f14:	b08b      	sub	sp, #44	@ 0x2c
 8016f16:	af04      	add	r7, sp, #16
 8016f18:	60f8      	str	r0, [r7, #12]
 8016f1a:	60b9      	str	r1, [r7, #8]
 8016f1c:	607a      	str	r2, [r7, #4]
 8016f1e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	685b      	ldr	r3, [r3, #4]
 8016f24:	4618      	mov	r0, r3
 8016f26:	f005 fd79 	bl	801ca1c <UTIL_TIMER_GetElapsedTime>
 8016f2a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	681a      	ldr	r2, [r3, #0]
 8016f30:	697b      	ldr	r3, [r7, #20]
 8016f32:	1ad2      	subs	r2, r2, r3
 8016f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f36:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f3a:	2201      	movs	r2, #1
 8016f3c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016f3e:	683b      	ldr	r3, [r7, #0]
 8016f40:	2200      	movs	r2, #0
 8016f42:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	685b      	ldr	r3, [r3, #4]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d004      	beq.n	8016f56 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016f50:	697a      	ldr	r2, [r7, #20]
 8016f52:	429a      	cmp	r2, r3
 8016f54:	d32b      	bcc.n	8016fae <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	69db      	ldr	r3, [r3, #28]
 8016f60:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016f66:	68dd      	ldr	r5, [r3, #12]
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	7a5e      	ldrb	r6, [r3, #9]
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	7d1b      	ldrb	r3, [r3, #20]
 8016f76:	68fa      	ldr	r2, [r7, #12]
 8016f78:	6992      	ldr	r2, [r2, #24]
 8016f7a:	9203      	str	r2, [sp, #12]
 8016f7c:	68fa      	ldr	r2, [r7, #12]
 8016f7e:	f10d 0e04 	add.w	lr, sp, #4
 8016f82:	320c      	adds	r2, #12
 8016f84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f88:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016f8c:	9300      	str	r3, [sp, #0]
 8016f8e:	4663      	mov	r3, ip
 8016f90:	4632      	mov	r2, r6
 8016f92:	4629      	mov	r1, r5
 8016f94:	4620      	mov	r0, r4
 8016f96:	f7ff fc49 	bl	801682c <RegionCommonUpdateBandTimeOff>
 8016f9a:	4602      	mov	r2, r0
 8016f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f9e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	69d8      	ldr	r0, [r3, #28]
 8016fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fa6:	683a      	ldr	r2, [r7, #0]
 8016fa8:	6879      	ldr	r1, [r7, #4]
 8016faa:	f7ff fef4 	bl	8016d96 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016fae:	683b      	ldr	r3, [r7, #0]
 8016fb0:	781b      	ldrb	r3, [r3, #0]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d004      	beq.n	8016fc0 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016fb8:	2200      	movs	r2, #0
 8016fba:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	e006      	b.n	8016fce <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fc2:	781b      	ldrb	r3, [r3, #0]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d001      	beq.n	8016fcc <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016fc8:	230b      	movs	r3, #11
 8016fca:	e000      	b.n	8016fce <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016fcc:	230c      	movs	r3, #12
    }
}
 8016fce:	4618      	mov	r0, r3
 8016fd0:	371c      	adds	r7, #28
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016fd6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016fd6:	b5b0      	push	{r4, r5, r7, lr}
 8016fd8:	b086      	sub	sp, #24
 8016fda:	af02      	add	r7, sp, #8
 8016fdc:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	781b      	ldrb	r3, [r3, #0]
 8016fe2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	f993 2000 	ldrsb.w	r2, [r3]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d103      	bne.n	8016ffc <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016ffa:	e026      	b.n	801704a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016ffc:	7bfb      	ldrb	r3, [r7, #15]
 8016ffe:	3b01      	subs	r3, #1
 8017000:	b2db      	uxtb	r3, r3
 8017002:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801700a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801700e:	429a      	cmp	r2, r3
 8017010:	d019      	beq.n	8017046 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	78d8      	ldrb	r0, [r3, #3]
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	6859      	ldr	r1, [r3, #4]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017026:	687a      	ldr	r2, [r7, #4]
 8017028:	6892      	ldr	r2, [r2, #8]
 801702a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801702e:	9201      	str	r2, [sp, #4]
 8017030:	9300      	str	r3, [sp, #0]
 8017032:	462b      	mov	r3, r5
 8017034:	4622      	mov	r2, r4
 8017036:	f7ff fab6 	bl	80165a6 <RegionCommonChanVerifyDr>
 801703a:	4603      	mov	r3, r0
 801703c:	f083 0301 	eor.w	r3, r3, #1
 8017040:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8017042:	2b00      	cmp	r3, #0
 8017044:	d1da      	bne.n	8016ffc <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8017046:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801704a:	4618      	mov	r0, r3
 801704c:	3710      	adds	r7, #16
 801704e:	46bd      	mov	sp, r7
 8017050:	bdb0      	pop	{r4, r5, r7, pc}

08017052 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8017052:	b480      	push	{r7}
 8017054:	b083      	sub	sp, #12
 8017056:	af00      	add	r7, sp, #0
 8017058:	4603      	mov	r3, r0
 801705a:	460a      	mov	r2, r1
 801705c:	71fb      	strb	r3, [r7, #7]
 801705e:	4613      	mov	r3, r2
 8017060:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8017062:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801706a:	4293      	cmp	r3, r2
 801706c:	bfb8      	it	lt
 801706e:	4613      	movlt	r3, r2
 8017070:	b25b      	sxtb	r3, r3
}
 8017072:	4618      	mov	r0, r3
 8017074:	370c      	adds	r7, #12
 8017076:	46bd      	mov	sp, r7
 8017078:	bc80      	pop	{r7}
 801707a:	4770      	bx	lr

0801707c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801707c:	b480      	push	{r7}
 801707e:	b083      	sub	sp, #12
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
 8017084:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	009b      	lsls	r3, r3, #2
 801708a:	683a      	ldr	r2, [r7, #0]
 801708c:	4413      	add	r3, r2
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	4a07      	ldr	r2, [pc, #28]	@ (80170b0 <RegionCommonGetBandwidth+0x34>)
 8017092:	4293      	cmp	r3, r2
 8017094:	d004      	beq.n	80170a0 <RegionCommonGetBandwidth+0x24>
 8017096:	4a07      	ldr	r2, [pc, #28]	@ (80170b4 <RegionCommonGetBandwidth+0x38>)
 8017098:	4293      	cmp	r3, r2
 801709a:	d003      	beq.n	80170a4 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801709c:	2300      	movs	r3, #0
 801709e:	e002      	b.n	80170a6 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80170a0:	2301      	movs	r3, #1
 80170a2:	e000      	b.n	80170a6 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80170a4:	2302      	movs	r3, #2
    }
}
 80170a6:	4618      	mov	r0, r3
 80170a8:	370c      	adds	r7, #12
 80170aa:	46bd      	mov	sp, r7
 80170ac:	bc80      	pop	{r7}
 80170ae:	4770      	bx	lr
 80170b0:	0003d090 	.word	0x0003d090
 80170b4:	0007a120 	.word	0x0007a120

080170b8 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b086      	sub	sp, #24
 80170bc:	af04      	add	r7, sp, #16
 80170be:	4603      	mov	r3, r0
 80170c0:	6039      	str	r1, [r7, #0]
 80170c2:	71fb      	strb	r3, [r7, #7]
 80170c4:	4613      	mov	r3, r2
 80170c6:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80170c8:	79fb      	ldrb	r3, [r7, #7]
 80170ca:	2b05      	cmp	r3, #5
 80170cc:	d810      	bhi.n	80170f0 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80170ce:	79fb      	ldrb	r3, [r7, #7]
 80170d0:	4a0f      	ldr	r2, [pc, #60]	@ (8017110 <RegionCommonRxConfigPrint+0x58>)
 80170d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80170d6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80170da:	9202      	str	r2, [sp, #8]
 80170dc:	683a      	ldr	r2, [r7, #0]
 80170de:	9201      	str	r2, [sp, #4]
 80170e0:	9300      	str	r3, [sp, #0]
 80170e2:	4b0c      	ldr	r3, [pc, #48]	@ (8017114 <RegionCommonRxConfigPrint+0x5c>)
 80170e4:	2201      	movs	r2, #1
 80170e6:	2100      	movs	r1, #0
 80170e8:	2002      	movs	r0, #2
 80170ea:	f005 fd75 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80170ee:	e00a      	b.n	8017106 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80170f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80170f4:	9301      	str	r3, [sp, #4]
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	9300      	str	r3, [sp, #0]
 80170fa:	4b07      	ldr	r3, [pc, #28]	@ (8017118 <RegionCommonRxConfigPrint+0x60>)
 80170fc:	2201      	movs	r2, #1
 80170fe:	2100      	movs	r1, #0
 8017100:	2002      	movs	r0, #2
 8017102:	f005 fd69 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
}
 8017106:	bf00      	nop
 8017108:	3708      	adds	r7, #8
 801710a:	46bd      	mov	sp, r7
 801710c:	bd80      	pop	{r7, pc}
 801710e:	bf00      	nop
 8017110:	20000118 	.word	0x20000118
 8017114:	0801d9f8 	.word	0x0801d9f8
 8017118:	0801da18 	.word	0x0801da18

0801711c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	b084      	sub	sp, #16
 8017120:	af02      	add	r7, sp, #8
 8017122:	6078      	str	r0, [r7, #4]
 8017124:	460b      	mov	r3, r1
 8017126:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801712c:	9301      	str	r3, [sp, #4]
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	9300      	str	r3, [sp, #0]
 8017132:	4b05      	ldr	r3, [pc, #20]	@ (8017148 <RegionCommonTxConfigPrint+0x2c>)
 8017134:	2201      	movs	r2, #1
 8017136:	2100      	movs	r1, #0
 8017138:	2002      	movs	r0, #2
 801713a:	f005 fd4d 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
}
 801713e:	bf00      	nop
 8017140:	3708      	adds	r7, #8
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}
 8017146:	bf00      	nop
 8017148:	0801da34 	.word	0x0801da34

0801714c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801714c:	b580      	push	{r7, lr}
 801714e:	b082      	sub	sp, #8
 8017150:	af00      	add	r7, sp, #0
 8017152:	6078      	str	r0, [r7, #4]
 8017154:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017156:	4b2d      	ldr	r3, [pc, #180]	@ (801720c <VerifyRfFreq+0xc0>)
 8017158:	6a1b      	ldr	r3, [r3, #32]
 801715a:	6878      	ldr	r0, [r7, #4]
 801715c:	4798      	blx	r3
 801715e:	4603      	mov	r3, r0
 8017160:	f083 0301 	eor.w	r3, r3, #1
 8017164:	b2db      	uxtb	r3, r3
 8017166:	2b00      	cmp	r3, #0
 8017168:	d001      	beq.n	801716e <VerifyRfFreq+0x22>
    {
        return false;
 801716a:	2300      	movs	r3, #0
 801716c:	e04a      	b.n	8017204 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	4a27      	ldr	r2, [pc, #156]	@ (8017210 <VerifyRfFreq+0xc4>)
 8017172:	4293      	cmp	r3, r2
 8017174:	d307      	bcc.n	8017186 <VerifyRfFreq+0x3a>
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	4a26      	ldr	r2, [pc, #152]	@ (8017214 <VerifyRfFreq+0xc8>)
 801717a:	4293      	cmp	r3, r2
 801717c:	d803      	bhi.n	8017186 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801717e:	683b      	ldr	r3, [r7, #0]
 8017180:	2202      	movs	r2, #2
 8017182:	701a      	strb	r2, [r3, #0]
 8017184:	e03d      	b.n	8017202 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	4a22      	ldr	r2, [pc, #136]	@ (8017214 <VerifyRfFreq+0xc8>)
 801718a:	4293      	cmp	r3, r2
 801718c:	d907      	bls.n	801719e <VerifyRfFreq+0x52>
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	4a21      	ldr	r2, [pc, #132]	@ (8017218 <VerifyRfFreq+0xcc>)
 8017192:	4293      	cmp	r3, r2
 8017194:	d803      	bhi.n	801719e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	2200      	movs	r2, #0
 801719a:	701a      	strb	r2, [r3, #0]
 801719c:	e031      	b.n	8017202 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	4a1d      	ldr	r2, [pc, #116]	@ (8017218 <VerifyRfFreq+0xcc>)
 80171a2:	4293      	cmp	r3, r2
 80171a4:	d907      	bls.n	80171b6 <VerifyRfFreq+0x6a>
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	4a1c      	ldr	r2, [pc, #112]	@ (801721c <VerifyRfFreq+0xd0>)
 80171aa:	4293      	cmp	r3, r2
 80171ac:	d803      	bhi.n	80171b6 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	2201      	movs	r2, #1
 80171b2:	701a      	strb	r2, [r3, #0]
 80171b4:	e025      	b.n	8017202 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	4a19      	ldr	r2, [pc, #100]	@ (8017220 <VerifyRfFreq+0xd4>)
 80171ba:	4293      	cmp	r3, r2
 80171bc:	d907      	bls.n	80171ce <VerifyRfFreq+0x82>
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	4a18      	ldr	r2, [pc, #96]	@ (8017224 <VerifyRfFreq+0xd8>)
 80171c2:	4293      	cmp	r3, r2
 80171c4:	d803      	bhi.n	80171ce <VerifyRfFreq+0x82>
    {
        *band = 5;
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	2205      	movs	r2, #5
 80171ca:	701a      	strb	r2, [r3, #0]
 80171cc:	e019      	b.n	8017202 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	4a15      	ldr	r2, [pc, #84]	@ (8017228 <VerifyRfFreq+0xdc>)
 80171d2:	4293      	cmp	r3, r2
 80171d4:	d907      	bls.n	80171e6 <VerifyRfFreq+0x9a>
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	4a14      	ldr	r2, [pc, #80]	@ (801722c <VerifyRfFreq+0xe0>)
 80171da:	4293      	cmp	r3, r2
 80171dc:	d803      	bhi.n	80171e6 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	2203      	movs	r2, #3
 80171e2:	701a      	strb	r2, [r3, #0]
 80171e4:	e00d      	b.n	8017202 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	4a11      	ldr	r2, [pc, #68]	@ (8017230 <VerifyRfFreq+0xe4>)
 80171ea:	4293      	cmp	r3, r2
 80171ec:	d307      	bcc.n	80171fe <VerifyRfFreq+0xb2>
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	4a10      	ldr	r2, [pc, #64]	@ (8017234 <VerifyRfFreq+0xe8>)
 80171f2:	4293      	cmp	r3, r2
 80171f4:	d803      	bhi.n	80171fe <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80171f6:	683b      	ldr	r3, [r7, #0]
 80171f8:	2204      	movs	r2, #4
 80171fa:	701a      	strb	r2, [r3, #0]
 80171fc:	e001      	b.n	8017202 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80171fe:	2300      	movs	r3, #0
 8017200:	e000      	b.n	8017204 <VerifyRfFreq+0xb8>
    }
    return true;
 8017202:	2301      	movs	r3, #1
}
 8017204:	4618      	mov	r0, r3
 8017206:	3708      	adds	r7, #8
 8017208:	46bd      	mov	sp, r7
 801720a:	bd80      	pop	{r7, pc}
 801720c:	0801e044 	.word	0x0801e044
 8017210:	337055c0 	.word	0x337055c0
 8017214:	338eda3f 	.word	0x338eda3f
 8017218:	33bca100 	.word	0x33bca100
 801721c:	33c5c8c0 	.word	0x33c5c8c0
 8017220:	33c74f5f 	.word	0x33c74f5f
 8017224:	33cef080 	.word	0x33cef080
 8017228:	33d1fdbf 	.word	0x33d1fdbf
 801722c:	33d5ce50 	.word	0x33d5ce50
 8017230:	33d691a0 	.word	0x33d691a0
 8017234:	33db2580 	.word	0x33db2580

08017238 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017238:	b590      	push	{r4, r7, lr}
 801723a:	b08b      	sub	sp, #44	@ 0x2c
 801723c:	af04      	add	r7, sp, #16
 801723e:	4603      	mov	r3, r0
 8017240:	460a      	mov	r2, r1
 8017242:	71fb      	strb	r3, [r7, #7]
 8017244:	4613      	mov	r3, r2
 8017246:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8017248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801724c:	4a1f      	ldr	r2, [pc, #124]	@ (80172cc <GetTimeOnAir+0x94>)
 801724e:	5cd3      	ldrb	r3, [r2, r3]
 8017250:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8017252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017256:	491e      	ldr	r1, [pc, #120]	@ (80172d0 <GetTimeOnAir+0x98>)
 8017258:	4618      	mov	r0, r3
 801725a:	f7ff ff0f 	bl	801707c <RegionCommonGetBandwidth>
 801725e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8017260:	2300      	movs	r3, #0
 8017262:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017268:	2b07      	cmp	r3, #7
 801726a:	d118      	bne.n	801729e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801726c:	4b19      	ldr	r3, [pc, #100]	@ (80172d4 <GetTimeOnAir+0x9c>)
 801726e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8017270:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017274:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017278:	fb02 f303 	mul.w	r3, r2, r3
 801727c:	4619      	mov	r1, r3
 801727e:	88bb      	ldrh	r3, [r7, #4]
 8017280:	b2db      	uxtb	r3, r3
 8017282:	2201      	movs	r2, #1
 8017284:	9203      	str	r2, [sp, #12]
 8017286:	9302      	str	r3, [sp, #8]
 8017288:	2300      	movs	r3, #0
 801728a:	9301      	str	r3, [sp, #4]
 801728c:	2305      	movs	r3, #5
 801728e:	9300      	str	r3, [sp, #0]
 8017290:	2300      	movs	r3, #0
 8017292:	460a      	mov	r2, r1
 8017294:	68f9      	ldr	r1, [r7, #12]
 8017296:	2000      	movs	r0, #0
 8017298:	47a0      	blx	r4
 801729a:	6178      	str	r0, [r7, #20]
 801729c:	e011      	b.n	80172c2 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801729e:	4b0d      	ldr	r3, [pc, #52]	@ (80172d4 <GetTimeOnAir+0x9c>)
 80172a0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80172a2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80172a6:	88bb      	ldrh	r3, [r7, #4]
 80172a8:	b2db      	uxtb	r3, r3
 80172aa:	2101      	movs	r1, #1
 80172ac:	9103      	str	r1, [sp, #12]
 80172ae:	9302      	str	r3, [sp, #8]
 80172b0:	2300      	movs	r3, #0
 80172b2:	9301      	str	r3, [sp, #4]
 80172b4:	2308      	movs	r3, #8
 80172b6:	9300      	str	r3, [sp, #0]
 80172b8:	2301      	movs	r3, #1
 80172ba:	68f9      	ldr	r1, [r7, #12]
 80172bc:	2001      	movs	r0, #1
 80172be:	47a0      	blx	r4
 80172c0:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80172c2:	697b      	ldr	r3, [r7, #20]
}
 80172c4:	4618      	mov	r0, r3
 80172c6:	371c      	adds	r7, #28
 80172c8:	46bd      	mov	sp, r7
 80172ca:	bd90      	pop	{r4, r7, pc}
 80172cc:	0801e00c 	.word	0x0801e00c
 80172d0:	0801e014 	.word	0x0801e014
 80172d4:	0801e044 	.word	0x0801e044

080172d8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b088      	sub	sp, #32
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80172e0:	2300      	movs	r3, #0
 80172e2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	3b01      	subs	r3, #1
 80172ea:	2b37      	cmp	r3, #55	@ 0x37
 80172ec:	f200 8122 	bhi.w	8017534 <RegionEU868GetPhyParam+0x25c>
 80172f0:	a201      	add	r2, pc, #4	@ (adr r2, 80172f8 <RegionEU868GetPhyParam+0x20>)
 80172f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172f6:	bf00      	nop
 80172f8:	080173d9 	.word	0x080173d9
 80172fc:	080173df 	.word	0x080173df
 8017300:	08017535 	.word	0x08017535
 8017304:	08017535 	.word	0x08017535
 8017308:	08017535 	.word	0x08017535
 801730c:	080173e5 	.word	0x080173e5
 8017310:	08017535 	.word	0x08017535
 8017314:	0801741f 	.word	0x0801741f
 8017318:	08017535 	.word	0x08017535
 801731c:	08017425 	.word	0x08017425
 8017320:	0801742b 	.word	0x0801742b
 8017324:	08017431 	.word	0x08017431
 8017328:	08017437 	.word	0x08017437
 801732c:	08017447 	.word	0x08017447
 8017330:	08017457 	.word	0x08017457
 8017334:	0801745d 	.word	0x0801745d
 8017338:	08017465 	.word	0x08017465
 801733c:	0801746d 	.word	0x0801746d
 8017340:	08017475 	.word	0x08017475
 8017344:	0801747d 	.word	0x0801747d
 8017348:	08017485 	.word	0x08017485
 801734c:	08017499 	.word	0x08017499
 8017350:	0801749f 	.word	0x0801749f
 8017354:	080174a5 	.word	0x080174a5
 8017358:	080174ab 	.word	0x080174ab
 801735c:	080174b7 	.word	0x080174b7
 8017360:	080174c3 	.word	0x080174c3
 8017364:	080174c9 	.word	0x080174c9
 8017368:	080174d1 	.word	0x080174d1
 801736c:	080174d7 	.word	0x080174d7
 8017370:	080174dd 	.word	0x080174dd
 8017374:	080174e5 	.word	0x080174e5
 8017378:	080173eb 	.word	0x080173eb
 801737c:	08017535 	.word	0x08017535
 8017380:	08017535 	.word	0x08017535
 8017384:	08017535 	.word	0x08017535
 8017388:	08017535 	.word	0x08017535
 801738c:	08017535 	.word	0x08017535
 8017390:	08017535 	.word	0x08017535
 8017394:	08017535 	.word	0x08017535
 8017398:	08017535 	.word	0x08017535
 801739c:	08017535 	.word	0x08017535
 80173a0:	08017535 	.word	0x08017535
 80173a4:	08017535 	.word	0x08017535
 80173a8:	08017535 	.word	0x08017535
 80173ac:	08017535 	.word	0x08017535
 80173b0:	080174eb 	.word	0x080174eb
 80173b4:	080174f1 	.word	0x080174f1
 80173b8:	080174ff 	.word	0x080174ff
 80173bc:	08017535 	.word	0x08017535
 80173c0:	08017535 	.word	0x08017535
 80173c4:	08017505 	.word	0x08017505
 80173c8:	0801750b 	.word	0x0801750b
 80173cc:	08017535 	.word	0x08017535
 80173d0:	08017511 	.word	0x08017511
 80173d4:	08017521 	.word	0x08017521
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80173d8:	2300      	movs	r3, #0
 80173da:	61bb      	str	r3, [r7, #24]
            break;
 80173dc:	e0ab      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80173de:	2300      	movs	r3, #0
 80173e0:	61bb      	str	r3, [r7, #24]
            break;
 80173e2:	e0a8      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80173e4:	2300      	movs	r3, #0
 80173e6:	61bb      	str	r3, [r7, #24]
            break;
 80173e8:	e0a5      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80173f0:	733b      	strb	r3, [r7, #12]
 80173f2:	2307      	movs	r3, #7
 80173f4:	737b      	strb	r3, [r7, #13]
 80173f6:	2300      	movs	r3, #0
 80173f8:	73bb      	strb	r3, [r7, #14]
 80173fa:	2310      	movs	r3, #16
 80173fc:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80173fe:	4b51      	ldr	r3, [pc, #324]	@ (8017544 <RegionEU868GetPhyParam+0x26c>)
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017406:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017408:	4b4e      	ldr	r3, [pc, #312]	@ (8017544 <RegionEU868GetPhyParam+0x26c>)
 801740a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801740c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801740e:	f107 030c 	add.w	r3, r7, #12
 8017412:	4618      	mov	r0, r3
 8017414:	f7ff fddf 	bl	8016fd6 <RegionCommonGetNextLowerTxDr>
 8017418:	4603      	mov	r3, r0
 801741a:	61bb      	str	r3, [r7, #24]
            break;
 801741c:	e08b      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801741e:	2300      	movs	r3, #0
 8017420:	61bb      	str	r3, [r7, #24]
            break;
 8017422:	e088      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017424:	2300      	movs	r3, #0
 8017426:	61bb      	str	r3, [r7, #24]
            break;
 8017428:	e085      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801742a:	2340      	movs	r3, #64	@ 0x40
 801742c:	61bb      	str	r3, [r7, #24]
            break;
 801742e:	e082      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017430:	2320      	movs	r3, #32
 8017432:	61bb      	str	r3, [r7, #24]
            break;
 8017434:	e07f      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801743c:	461a      	mov	r2, r3
 801743e:	4b42      	ldr	r3, [pc, #264]	@ (8017548 <RegionEU868GetPhyParam+0x270>)
 8017440:	5c9b      	ldrb	r3, [r3, r2]
 8017442:	61bb      	str	r3, [r7, #24]
            break;
 8017444:	e077      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801744c:	461a      	mov	r2, r3
 801744e:	4b3f      	ldr	r3, [pc, #252]	@ (801754c <RegionEU868GetPhyParam+0x274>)
 8017450:	5c9b      	ldrb	r3, [r3, r2]
 8017452:	61bb      	str	r3, [r7, #24]
            break;
 8017454:	e06f      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017456:	2301      	movs	r3, #1
 8017458:	61bb      	str	r3, [r7, #24]
            break;
 801745a:	e06c      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801745c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8017460:	61bb      	str	r3, [r7, #24]
            break;
 8017462:	e068      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017464:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017468:	61bb      	str	r3, [r7, #24]
            break;
 801746a:	e064      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801746c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8017470:	61bb      	str	r3, [r7, #24]
            break;
 8017472:	e060      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017474:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017478:	61bb      	str	r3, [r7, #24]
            break;
 801747a:	e05c      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801747c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8017480:	61bb      	str	r3, [r7, #24]
            break;
 8017482:	e058      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017484:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017488:	4831      	ldr	r0, [pc, #196]	@ (8017550 <RegionEU868GetPhyParam+0x278>)
 801748a:	f001 f831 	bl	80184f0 <randr>
 801748e:	4603      	mov	r3, r0
 8017490:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8017494:	61bb      	str	r3, [r7, #24]
            break;
 8017496:	e04e      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017498:	2300      	movs	r3, #0
 801749a:	61bb      	str	r3, [r7, #24]
            break;
 801749c:	e04b      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801749e:	4b2d      	ldr	r3, [pc, #180]	@ (8017554 <RegionEU868GetPhyParam+0x27c>)
 80174a0:	61bb      	str	r3, [r7, #24]
            break;
 80174a2:	e048      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80174a4:	2300      	movs	r3, #0
 80174a6:	61bb      	str	r3, [r7, #24]
            break;
 80174a8:	e045      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80174aa:	4b26      	ldr	r3, [pc, #152]	@ (8017544 <RegionEU868GetPhyParam+0x26c>)
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80174b2:	61bb      	str	r3, [r7, #24]
            break;
 80174b4:	e03f      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80174b6:	4b23      	ldr	r3, [pc, #140]	@ (8017544 <RegionEU868GetPhyParam+0x26c>)
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80174be:	61bb      	str	r3, [r7, #24]
            break;
 80174c0:	e039      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80174c2:	2310      	movs	r3, #16
 80174c4:	61bb      	str	r3, [r7, #24]
            break;
 80174c6:	e036      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80174c8:	4b1e      	ldr	r3, [pc, #120]	@ (8017544 <RegionEU868GetPhyParam+0x26c>)
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	61bb      	str	r3, [r7, #24]
            break;
 80174ce:	e032      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80174d0:	2300      	movs	r3, #0
 80174d2:	61bb      	str	r3, [r7, #24]
            break;
 80174d4:	e02f      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80174d6:	2300      	movs	r3, #0
 80174d8:	61bb      	str	r3, [r7, #24]
            break;
 80174da:	e02c      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80174dc:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80174e0:	61bb      	str	r3, [r7, #24]
            break;
 80174e2:	e028      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80174e4:	4b1c      	ldr	r3, [pc, #112]	@ (8017558 <RegionEU868GetPhyParam+0x280>)
 80174e6:	61bb      	str	r3, [r7, #24]
            break;
 80174e8:	e025      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80174ea:	4b1a      	ldr	r3, [pc, #104]	@ (8017554 <RegionEU868GetPhyParam+0x27c>)
 80174ec:	61bb      	str	r3, [r7, #24]
            break;
 80174ee:	e022      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80174f0:	2311      	movs	r3, #17
 80174f2:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80174f4:	2301      	movs	r3, #1
 80174f6:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80174f8:	2300      	movs	r3, #0
 80174fa:	76bb      	strb	r3, [r7, #26]
            break;
 80174fc:	e01b      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80174fe:	2303      	movs	r3, #3
 8017500:	61bb      	str	r3, [r7, #24]
            break;
 8017502:	e018      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017504:	4b13      	ldr	r3, [pc, #76]	@ (8017554 <RegionEU868GetPhyParam+0x27c>)
 8017506:	61bb      	str	r3, [r7, #24]
            break;
 8017508:	e015      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801750a:	2303      	movs	r3, #3
 801750c:	61bb      	str	r3, [r7, #24]
            break;
 801750e:	e012      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017516:	461a      	mov	r2, r3
 8017518:	4b10      	ldr	r3, [pc, #64]	@ (801755c <RegionEU868GetPhyParam+0x284>)
 801751a:	5c9b      	ldrb	r3, [r3, r2]
 801751c:	61bb      	str	r3, [r7, #24]
            break;
 801751e:	e00a      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017526:	490e      	ldr	r1, [pc, #56]	@ (8017560 <RegionEU868GetPhyParam+0x288>)
 8017528:	4618      	mov	r0, r3
 801752a:	f7ff fda7 	bl	801707c <RegionCommonGetBandwidth>
 801752e:	4603      	mov	r3, r0
 8017530:	61bb      	str	r3, [r7, #24]
            break;
 8017532:	e000      	b.n	8017536 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8017534:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8017536:	69bb      	ldr	r3, [r7, #24]
 8017538:	61fb      	str	r3, [r7, #28]
 801753a:	69fb      	ldr	r3, [r7, #28]
}
 801753c:	4618      	mov	r0, r3
 801753e:	3720      	adds	r7, #32
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}
 8017544:	20001c1c 	.word	0x20001c1c
 8017548:	0801e034 	.word	0x0801e034
 801754c:	0801e03c 	.word	0x0801e03c
 8017550:	fffffc18 	.word	0xfffffc18
 8017554:	33d3e608 	.word	0x33d3e608
 8017558:	4009999a 	.word	0x4009999a
 801755c:	0801e00c 	.word	0x0801e00c
 8017560:	0801e014 	.word	0x0801e014

08017564 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017564:	b590      	push	{r4, r7, lr}
 8017566:	b085      	sub	sp, #20
 8017568:	af02      	add	r7, sp, #8
 801756a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801756c:	4b11      	ldr	r3, [pc, #68]	@ (80175b4 <RegionEU868SetBandTxDone+0x50>)
 801756e:	681a      	ldr	r2, [r3, #0]
 8017570:	4b11      	ldr	r3, [pc, #68]	@ (80175b8 <RegionEU868SetBandTxDone+0x54>)
 8017572:	6819      	ldr	r1, [r3, #0]
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	781b      	ldrb	r3, [r3, #0]
 8017578:	4618      	mov	r0, r3
 801757a:	4603      	mov	r3, r0
 801757c:	005b      	lsls	r3, r3, #1
 801757e:	4403      	add	r3, r0
 8017580:	009b      	lsls	r3, r3, #2
 8017582:	440b      	add	r3, r1
 8017584:	3309      	adds	r3, #9
 8017586:	781b      	ldrb	r3, [r3, #0]
 8017588:	4619      	mov	r1, r3
 801758a:	460b      	mov	r3, r1
 801758c:	005b      	lsls	r3, r3, #1
 801758e:	440b      	add	r3, r1
 8017590:	00db      	lsls	r3, r3, #3
 8017592:	18d0      	adds	r0, r2, r3
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	6899      	ldr	r1, [r3, #8]
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	785c      	ldrb	r4, [r3, #1]
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	691a      	ldr	r2, [r3, #16]
 80175a0:	9200      	str	r2, [sp, #0]
 80175a2:	68db      	ldr	r3, [r3, #12]
 80175a4:	4622      	mov	r2, r4
 80175a6:	f7ff f913 	bl	80167d0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80175aa:	bf00      	nop
 80175ac:	370c      	adds	r7, #12
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd90      	pop	{r4, r7, pc}
 80175b2:	bf00      	nop
 80175b4:	20001c20 	.word	0x20001c20
 80175b8:	20001c1c 	.word	0x20001c1c

080175bc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b0b0      	sub	sp, #192	@ 0xc0
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80175c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80175c8:	2290      	movs	r2, #144	@ 0x90
 80175ca:	2100      	movs	r1, #0
 80175cc:	4618      	mov	r0, r3
 80175ce:	f005 fd7b 	bl	801d0c8 <memset>
 80175d2:	2364      	movs	r3, #100	@ 0x64
 80175d4:	863b      	strh	r3, [r7, #48]	@ 0x30
 80175d6:	2364      	movs	r3, #100	@ 0x64
 80175d8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80175dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80175e0:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80175e4:	230a      	movs	r3, #10
 80175e6:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 80175ea:	2364      	movs	r3, #100	@ 0x64
 80175ec:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80175f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80175f4:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	7b1b      	ldrb	r3, [r3, #12]
 80175fc:	2b02      	cmp	r3, #2
 80175fe:	d05d      	beq.n	80176bc <RegionEU868InitDefaults+0x100>
 8017600:	2b02      	cmp	r3, #2
 8017602:	dc6a      	bgt.n	80176da <RegionEU868InitDefaults+0x11e>
 8017604:	2b00      	cmp	r3, #0
 8017606:	d002      	beq.n	801760e <RegionEU868InitDefaults+0x52>
 8017608:	2b01      	cmp	r3, #1
 801760a:	d03e      	beq.n	801768a <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801760c:	e065      	b.n	80176da <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d062      	beq.n	80176dc <RegionEU868InitDefaults+0x120>
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	685b      	ldr	r3, [r3, #4]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d05e      	beq.n	80176dc <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	685b      	ldr	r3, [r3, #4]
 8017622:	4a30      	ldr	r2, [pc, #192]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 8017624:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	689b      	ldr	r3, [r3, #8]
 801762a:	4a2f      	ldr	r2, [pc, #188]	@ (80176e8 <RegionEU868InitDefaults+0x12c>)
 801762c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801762e:	4b2e      	ldr	r3, [pc, #184]	@ (80176e8 <RegionEU868InitDefaults+0x12c>)
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8017636:	2290      	movs	r2, #144	@ 0x90
 8017638:	4618      	mov	r0, r3
 801763a:	f000 ff70 	bl	801851e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801763e:	4b29      	ldr	r3, [pc, #164]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	4a2a      	ldr	r2, [pc, #168]	@ (80176ec <RegionEU868InitDefaults+0x130>)
 8017644:	ca07      	ldmia	r2, {r0, r1, r2}
 8017646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801764a:	4b26      	ldr	r3, [pc, #152]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	4a28      	ldr	r2, [pc, #160]	@ (80176f0 <RegionEU868InitDefaults+0x134>)
 8017650:	330c      	adds	r3, #12
 8017652:	ca07      	ldmia	r2, {r0, r1, r2}
 8017654:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017658:	4b22      	ldr	r3, [pc, #136]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	4a25      	ldr	r2, [pc, #148]	@ (80176f4 <RegionEU868InitDefaults+0x138>)
 801765e:	3318      	adds	r3, #24
 8017660:	ca07      	ldmia	r2, {r0, r1, r2}
 8017662:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017666:	4b1f      	ldr	r3, [pc, #124]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	2207      	movs	r2, #7
 801766c:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017670:	4b1c      	ldr	r3, [pc, #112]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017678:	4b1a      	ldr	r3, [pc, #104]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8017680:	2201      	movs	r2, #1
 8017682:	4619      	mov	r1, r3
 8017684:	f7ff f87e 	bl	8016784 <RegionCommonChanMaskCopy>
 8017688:	e028      	b.n	80176dc <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801768a:	4b16      	ldr	r3, [pc, #88]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	2200      	movs	r2, #0
 8017690:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8017692:	4b14      	ldr	r3, [pc, #80]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	2200      	movs	r2, #0
 8017698:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801769a:	4b12      	ldr	r3, [pc, #72]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	2200      	movs	r2, #0
 80176a0:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80176a2:	4b10      	ldr	r3, [pc, #64]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80176aa:	4b0e      	ldr	r3, [pc, #56]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80176b2:	2201      	movs	r2, #1
 80176b4:	4619      	mov	r1, r3
 80176b6:	f7ff f865 	bl	8016784 <RegionCommonChanMaskCopy>
            break;
 80176ba:	e00f      	b.n	80176dc <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80176bc:	4b09      	ldr	r3, [pc, #36]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 80176c4:	4b07      	ldr	r3, [pc, #28]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 80176cc:	4b05      	ldr	r3, [pc, #20]	@ (80176e4 <RegionEU868InitDefaults+0x128>)
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	430a      	orrs	r2, r1
 80176d2:	b292      	uxth	r2, r2
 80176d4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 80176d8:	e000      	b.n	80176dc <RegionEU868InitDefaults+0x120>
            break;
 80176da:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80176dc:	37c0      	adds	r7, #192	@ 0xc0
 80176de:	46bd      	mov	sp, r7
 80176e0:	bd80      	pop	{r7, pc}
 80176e2:	bf00      	nop
 80176e4:	20001c1c 	.word	0x20001c1c
 80176e8:	20001c20 	.word	0x20001c20
 80176ec:	0801da50 	.word	0x0801da50
 80176f0:	0801da5c 	.word	0x0801da5c
 80176f4:	0801da68 	.word	0x0801da68

080176f8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b084      	sub	sp, #16
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
 8017700:	460b      	mov	r3, r1
 8017702:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8017704:	78fb      	ldrb	r3, [r7, #3]
 8017706:	2b0f      	cmp	r3, #15
 8017708:	d86c      	bhi.n	80177e4 <RegionEU868Verify+0xec>
 801770a:	a201      	add	r2, pc, #4	@ (adr r2, 8017710 <RegionEU868Verify+0x18>)
 801770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017710:	08017751 	.word	0x08017751
 8017714:	080177e5 	.word	0x080177e5
 8017718:	080177e5 	.word	0x080177e5
 801771c:	080177e5 	.word	0x080177e5
 8017720:	080177e5 	.word	0x080177e5
 8017724:	08017769 	.word	0x08017769
 8017728:	08017787 	.word	0x08017787
 801772c:	080177a5 	.word	0x080177a5
 8017730:	080177e5 	.word	0x080177e5
 8017734:	080177c3 	.word	0x080177c3
 8017738:	080177c3 	.word	0x080177c3
 801773c:	080177e5 	.word	0x080177e5
 8017740:	080177e5 	.word	0x080177e5
 8017744:	080177e5 	.word	0x080177e5
 8017748:	080177e5 	.word	0x080177e5
 801774c:	080177e1 	.word	0x080177e1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8017750:	2300      	movs	r3, #0
 8017752:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	f107 020f 	add.w	r2, r7, #15
 801775c:	4611      	mov	r1, r2
 801775e:	4618      	mov	r0, r3
 8017760:	f7ff fcf4 	bl	801714c <VerifyRfFreq>
 8017764:	4603      	mov	r3, r0
 8017766:	e03e      	b.n	80177e6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	f993 3000 	ldrsb.w	r3, [r3]
 801776e:	2207      	movs	r2, #7
 8017770:	2100      	movs	r1, #0
 8017772:	4618      	mov	r0, r3
 8017774:	f7fe ff89 	bl	801668a <RegionCommonValueInRange>
 8017778:	4603      	mov	r3, r0
 801777a:	2b00      	cmp	r3, #0
 801777c:	bf14      	ite	ne
 801777e:	2301      	movne	r3, #1
 8017780:	2300      	moveq	r3, #0
 8017782:	b2db      	uxtb	r3, r3
 8017784:	e02f      	b.n	80177e6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	f993 3000 	ldrsb.w	r3, [r3]
 801778c:	2205      	movs	r2, #5
 801778e:	2100      	movs	r1, #0
 8017790:	4618      	mov	r0, r3
 8017792:	f7fe ff7a 	bl	801668a <RegionCommonValueInRange>
 8017796:	4603      	mov	r3, r0
 8017798:	2b00      	cmp	r3, #0
 801779a:	bf14      	ite	ne
 801779c:	2301      	movne	r3, #1
 801779e:	2300      	moveq	r3, #0
 80177a0:	b2db      	uxtb	r3, r3
 80177a2:	e020      	b.n	80177e6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	f993 3000 	ldrsb.w	r3, [r3]
 80177aa:	2207      	movs	r2, #7
 80177ac:	2100      	movs	r1, #0
 80177ae:	4618      	mov	r0, r3
 80177b0:	f7fe ff6b 	bl	801668a <RegionCommonValueInRange>
 80177b4:	4603      	mov	r3, r0
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	bf14      	ite	ne
 80177ba:	2301      	movne	r3, #1
 80177bc:	2300      	moveq	r3, #0
 80177be:	b2db      	uxtb	r3, r3
 80177c0:	e011      	b.n	80177e6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	f993 3000 	ldrsb.w	r3, [r3]
 80177c8:	2207      	movs	r2, #7
 80177ca:	2100      	movs	r1, #0
 80177cc:	4618      	mov	r0, r3
 80177ce:	f7fe ff5c 	bl	801668a <RegionCommonValueInRange>
 80177d2:	4603      	mov	r3, r0
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	bf14      	ite	ne
 80177d8:	2301      	movne	r3, #1
 80177da:	2300      	moveq	r3, #0
 80177dc:	b2db      	uxtb	r3, r3
 80177de:	e002      	b.n	80177e6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80177e0:	2301      	movs	r3, #1
 80177e2:	e000      	b.n	80177e6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80177e4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80177e6:	4618      	mov	r0, r3
 80177e8:	3710      	adds	r7, #16
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}
 80177ee:	bf00      	nop

080177f0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80177f0:	b580      	push	{r7, lr}
 80177f2:	b08a      	sub	sp, #40	@ 0x28
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80177f8:	2350      	movs	r3, #80	@ 0x50
 80177fa:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	7a1b      	ldrb	r3, [r3, #8]
 8017802:	2b10      	cmp	r3, #16
 8017804:	d162      	bne.n	80178cc <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	685b      	ldr	r3, [r3, #4]
 801780a:	330f      	adds	r3, #15
 801780c:	781b      	ldrb	r3, [r3, #0]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d15e      	bne.n	80178d0 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017812:	2300      	movs	r3, #0
 8017814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017818:	2303      	movs	r3, #3
 801781a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801781e:	e050      	b.n	80178c2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8017820:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017824:	2b07      	cmp	r3, #7
 8017826:	d824      	bhi.n	8017872 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	685a      	ldr	r2, [r3, #4]
 801782c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017830:	4413      	add	r3, r2
 8017832:	781b      	ldrb	r3, [r3, #0]
 8017834:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017836:	69ba      	ldr	r2, [r7, #24]
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	6859      	ldr	r1, [r3, #4]
 801783c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017840:	3301      	adds	r3, #1
 8017842:	440b      	add	r3, r1
 8017844:	781b      	ldrb	r3, [r3, #0]
 8017846:	021b      	lsls	r3, r3, #8
 8017848:	4313      	orrs	r3, r2
 801784a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801784c:	69ba      	ldr	r2, [r7, #24]
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	6859      	ldr	r1, [r3, #4]
 8017852:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017856:	3302      	adds	r3, #2
 8017858:	440b      	add	r3, r1
 801785a:	781b      	ldrb	r3, [r3, #0]
 801785c:	041b      	lsls	r3, r3, #16
 801785e:	4313      	orrs	r3, r2
 8017860:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8017862:	69bb      	ldr	r3, [r7, #24]
 8017864:	2264      	movs	r2, #100	@ 0x64
 8017866:	fb02 f303 	mul.w	r3, r2, r3
 801786a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801786c:	2300      	movs	r3, #0
 801786e:	61fb      	str	r3, [r7, #28]
 8017870:	e006      	b.n	8017880 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8017872:	2300      	movs	r3, #0
 8017874:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8017876:	2300      	movs	r3, #0
 8017878:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801787c:	2300      	movs	r3, #0
 801787e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8017880:	69bb      	ldr	r3, [r7, #24]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d00b      	beq.n	801789e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8017886:	f107 0318 	add.w	r3, r7, #24
 801788a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801788c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017890:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8017892:	f107 0310 	add.w	r3, r7, #16
 8017896:	4618      	mov	r0, r3
 8017898:	f000 fd14 	bl	80182c4 <RegionEU868ChannelAdd>
 801789c:	e007      	b.n	80178ae <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801789e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80178a2:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80178a4:	f107 030c 	add.w	r3, r7, #12
 80178a8:	4618      	mov	r0, r3
 80178aa:	f000 fdad 	bl	8018408 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80178ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80178b2:	3303      	adds	r3, #3
 80178b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80178b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80178bc:	3301      	adds	r3, #1
 80178be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80178c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80178c6:	2b0f      	cmp	r3, #15
 80178c8:	d9aa      	bls.n	8017820 <RegionEU868ApplyCFList+0x30>
 80178ca:	e002      	b.n	80178d2 <RegionEU868ApplyCFList+0xe2>
        return;
 80178cc:	bf00      	nop
 80178ce:	e000      	b.n	80178d2 <RegionEU868ApplyCFList+0xe2>
        return;
 80178d0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80178d2:	3728      	adds	r7, #40	@ 0x28
 80178d4:	46bd      	mov	sp, r7
 80178d6:	bd80      	pop	{r7, pc}

080178d8 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b082      	sub	sp, #8
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	791b      	ldrb	r3, [r3, #4]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d002      	beq.n	80178ee <RegionEU868ChanMaskSet+0x16>
 80178e8:	2b01      	cmp	r3, #1
 80178ea:	d00b      	beq.n	8017904 <RegionEU868ChanMaskSet+0x2c>
 80178ec:	e015      	b.n	801791a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80178ee:	4b0e      	ldr	r3, [pc, #56]	@ (8017928 <RegionEU868ChanMaskSet+0x50>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	2201      	movs	r2, #1
 80178fc:	4619      	mov	r1, r3
 80178fe:	f7fe ff41 	bl	8016784 <RegionCommonChanMaskCopy>
            break;
 8017902:	e00c      	b.n	801791e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017904:	4b08      	ldr	r3, [pc, #32]	@ (8017928 <RegionEU868ChanMaskSet+0x50>)
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	2201      	movs	r2, #1
 8017912:	4619      	mov	r1, r3
 8017914:	f7fe ff36 	bl	8016784 <RegionCommonChanMaskCopy>
            break;
 8017918:	e001      	b.n	801791e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801791a:	2300      	movs	r3, #0
 801791c:	e000      	b.n	8017920 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801791e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017920:	4618      	mov	r0, r3
 8017922:	3708      	adds	r7, #8
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}
 8017928:	20001c1c 	.word	0x20001c1c

0801792c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b088      	sub	sp, #32
 8017930:	af02      	add	r7, sp, #8
 8017932:	60ba      	str	r2, [r7, #8]
 8017934:	607b      	str	r3, [r7, #4]
 8017936:	4603      	mov	r3, r0
 8017938:	73fb      	strb	r3, [r7, #15]
 801793a:	460b      	mov	r3, r1
 801793c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801793e:	2300      	movs	r3, #0
 8017940:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8017942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017946:	2b07      	cmp	r3, #7
 8017948:	bfa8      	it	ge
 801794a:	2307      	movge	r3, #7
 801794c:	b25a      	sxtb	r2, r3
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017958:	491e      	ldr	r1, [pc, #120]	@ (80179d4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801795a:	4618      	mov	r0, r3
 801795c:	f7ff fb8e 	bl	801707c <RegionCommonGetBandwidth>
 8017960:	4603      	mov	r3, r0
 8017962:	b2da      	uxtb	r2, r3
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801796e:	2b07      	cmp	r3, #7
 8017970:	d10a      	bne.n	8017988 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017978:	461a      	mov	r2, r3
 801797a:	4b17      	ldr	r3, [pc, #92]	@ (80179d8 <RegionEU868ComputeRxWindowParameters+0xac>)
 801797c:	5c9b      	ldrb	r3, [r3, r2]
 801797e:	4618      	mov	r0, r3
 8017980:	f7ff f910 	bl	8016ba4 <RegionCommonComputeSymbolTimeFsk>
 8017984:	6178      	str	r0, [r7, #20]
 8017986:	e011      	b.n	80179ac <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801798e:	461a      	mov	r2, r3
 8017990:	4b11      	ldr	r3, [pc, #68]	@ (80179d8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8017992:	5c9a      	ldrb	r2, [r3, r2]
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801799a:	4619      	mov	r1, r3
 801799c:	4b0d      	ldr	r3, [pc, #52]	@ (80179d4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801799e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80179a2:	4619      	mov	r1, r3
 80179a4:	4610      	mov	r0, r2
 80179a6:	f7ff f8e7 	bl	8016b78 <RegionCommonComputeSymbolTimeLoRa>
 80179aa:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80179ac:	4b0b      	ldr	r3, [pc, #44]	@ (80179dc <RegionEU868ComputeRxWindowParameters+0xb0>)
 80179ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80179b0:	4798      	blx	r3
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	3308      	adds	r3, #8
 80179b6:	687a      	ldr	r2, [r7, #4]
 80179b8:	320c      	adds	r2, #12
 80179ba:	7bb9      	ldrb	r1, [r7, #14]
 80179bc:	9201      	str	r2, [sp, #4]
 80179be:	9300      	str	r3, [sp, #0]
 80179c0:	4603      	mov	r3, r0
 80179c2:	68ba      	ldr	r2, [r7, #8]
 80179c4:	6978      	ldr	r0, [r7, #20]
 80179c6:	f7ff f8fd 	bl	8016bc4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80179ca:	bf00      	nop
 80179cc:	3718      	adds	r7, #24
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}
 80179d2:	bf00      	nop
 80179d4:	0801e014 	.word	0x0801e014
 80179d8:	0801e00c 	.word	0x0801e00c
 80179dc:	0801e044 	.word	0x0801e044

080179e0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80179e0:	b5b0      	push	{r4, r5, r7, lr}
 80179e2:	b090      	sub	sp, #64	@ 0x40
 80179e4:	af0a      	add	r7, sp, #40	@ 0x28
 80179e6:	6078      	str	r0, [r7, #4]
 80179e8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	785b      	ldrb	r3, [r3, #1]
 80179ee:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80179f0:	2300      	movs	r3, #0
 80179f2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80179f4:	2300      	movs	r3, #0
 80179f6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	685b      	ldr	r3, [r3, #4]
 80179fc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80179fe:	4b5a      	ldr	r3, [pc, #360]	@ (8017b68 <RegionEU868RxConfig+0x188>)
 8017a00:	685b      	ldr	r3, [r3, #4]
 8017a02:	4798      	blx	r3
 8017a04:	4603      	mov	r3, r0
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d001      	beq.n	8017a0e <RegionEU868RxConfig+0x2e>
    {
        return false;
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	e0a8      	b.n	8017b60 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	7cdb      	ldrb	r3, [r3, #19]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d126      	bne.n	8017a64 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8017a16:	4b55      	ldr	r3, [pc, #340]	@ (8017b6c <RegionEU868RxConfig+0x18c>)
 8017a18:	681a      	ldr	r2, [r3, #0]
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	781b      	ldrb	r3, [r3, #0]
 8017a1e:	4619      	mov	r1, r3
 8017a20:	460b      	mov	r3, r1
 8017a22:	005b      	lsls	r3, r3, #1
 8017a24:	440b      	add	r3, r1
 8017a26:	009b      	lsls	r3, r3, #2
 8017a28:	4413      	add	r3, r2
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8017a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8017b6c <RegionEU868RxConfig+0x18c>)
 8017a30:	681a      	ldr	r2, [r3, #0]
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	781b      	ldrb	r3, [r3, #0]
 8017a36:	4619      	mov	r1, r3
 8017a38:	460b      	mov	r3, r1
 8017a3a:	005b      	lsls	r3, r3, #1
 8017a3c:	440b      	add	r3, r1
 8017a3e:	009b      	lsls	r3, r3, #2
 8017a40:	4413      	add	r3, r2
 8017a42:	3304      	adds	r3, #4
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d00c      	beq.n	8017a64 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8017a4a:	4b48      	ldr	r3, [pc, #288]	@ (8017b6c <RegionEU868RxConfig+0x18c>)
 8017a4c:	681a      	ldr	r2, [r3, #0]
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	781b      	ldrb	r3, [r3, #0]
 8017a52:	4619      	mov	r1, r3
 8017a54:	460b      	mov	r3, r1
 8017a56:	005b      	lsls	r3, r3, #1
 8017a58:	440b      	add	r3, r1
 8017a5a:	009b      	lsls	r3, r3, #2
 8017a5c:	4413      	add	r3, r2
 8017a5e:	3304      	adds	r3, #4
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8017a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a68:	4a41      	ldr	r2, [pc, #260]	@ (8017b70 <RegionEU868RxConfig+0x190>)
 8017a6a:	5cd3      	ldrb	r3, [r2, r3]
 8017a6c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8017a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8017b68 <RegionEU868RxConfig+0x188>)
 8017a70:	68db      	ldr	r3, [r3, #12]
 8017a72:	6938      	ldr	r0, [r7, #16]
 8017a74:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8017a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a7a:	2b07      	cmp	r3, #7
 8017a7c:	d128      	bne.n	8017ad0 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8017a82:	4b39      	ldr	r3, [pc, #228]	@ (8017b68 <RegionEU868RxConfig+0x188>)
 8017a84:	699c      	ldr	r4, [r3, #24]
 8017a86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017a8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017a8e:	fb02 f303 	mul.w	r3, r2, r3
 8017a92:	4619      	mov	r1, r3
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	689b      	ldr	r3, [r3, #8]
 8017a98:	b29b      	uxth	r3, r3
 8017a9a:	687a      	ldr	r2, [r7, #4]
 8017a9c:	7c92      	ldrb	r2, [r2, #18]
 8017a9e:	7df8      	ldrb	r0, [r7, #23]
 8017aa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	9208      	str	r2, [sp, #32]
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	9207      	str	r2, [sp, #28]
 8017aaa:	2200      	movs	r2, #0
 8017aac:	9206      	str	r2, [sp, #24]
 8017aae:	2201      	movs	r2, #1
 8017ab0:	9205      	str	r2, [sp, #20]
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	9204      	str	r2, [sp, #16]
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	9203      	str	r2, [sp, #12]
 8017aba:	9302      	str	r3, [sp, #8]
 8017abc:	2305      	movs	r3, #5
 8017abe:	9301      	str	r3, [sp, #4]
 8017ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8017b74 <RegionEU868RxConfig+0x194>)
 8017ac2:	9300      	str	r3, [sp, #0]
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	460a      	mov	r2, r1
 8017ac8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8017acc:	47a0      	blx	r4
 8017ace:	e024      	b.n	8017b1a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017ad4:	4b24      	ldr	r3, [pc, #144]	@ (8017b68 <RegionEU868RxConfig+0x188>)
 8017ad6:	699c      	ldr	r4, [r3, #24]
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	789b      	ldrb	r3, [r3, #2]
 8017adc:	461d      	mov	r5, r3
 8017ade:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	689b      	ldr	r3, [r3, #8]
 8017ae6:	b29b      	uxth	r3, r3
 8017ae8:	687a      	ldr	r2, [r7, #4]
 8017aea:	7c92      	ldrb	r2, [r2, #18]
 8017aec:	7df8      	ldrb	r0, [r7, #23]
 8017aee:	9209      	str	r2, [sp, #36]	@ 0x24
 8017af0:	2201      	movs	r2, #1
 8017af2:	9208      	str	r2, [sp, #32]
 8017af4:	2200      	movs	r2, #0
 8017af6:	9207      	str	r2, [sp, #28]
 8017af8:	2200      	movs	r2, #0
 8017afa:	9206      	str	r2, [sp, #24]
 8017afc:	2200      	movs	r2, #0
 8017afe:	9205      	str	r2, [sp, #20]
 8017b00:	2200      	movs	r2, #0
 8017b02:	9204      	str	r2, [sp, #16]
 8017b04:	2200      	movs	r2, #0
 8017b06:	9203      	str	r2, [sp, #12]
 8017b08:	9302      	str	r3, [sp, #8]
 8017b0a:	2308      	movs	r3, #8
 8017b0c:	9301      	str	r3, [sp, #4]
 8017b0e:	2300      	movs	r3, #0
 8017b10:	9300      	str	r3, [sp, #0]
 8017b12:	2301      	movs	r3, #1
 8017b14:	460a      	mov	r2, r1
 8017b16:	4629      	mov	r1, r5
 8017b18:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	7c5b      	ldrb	r3, [r3, #17]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d005      	beq.n	8017b2e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8017b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b26:	4a14      	ldr	r2, [pc, #80]	@ (8017b78 <RegionEU868RxConfig+0x198>)
 8017b28:	5cd3      	ldrb	r3, [r2, r3]
 8017b2a:	75bb      	strb	r3, [r7, #22]
 8017b2c:	e004      	b.n	8017b38 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8017b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b32:	4a12      	ldr	r2, [pc, #72]	@ (8017b7c <RegionEU868RxConfig+0x19c>)
 8017b34:	5cd3      	ldrb	r3, [r2, r3]
 8017b36:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017b38:	4b0b      	ldr	r3, [pc, #44]	@ (8017b68 <RegionEU868RxConfig+0x188>)
 8017b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017b3c:	7dba      	ldrb	r2, [r7, #22]
 8017b3e:	320d      	adds	r2, #13
 8017b40:	b2d1      	uxtb	r1, r2
 8017b42:	7dfa      	ldrb	r2, [r7, #23]
 8017b44:	4610      	mov	r0, r2
 8017b46:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	7cdb      	ldrb	r3, [r3, #19]
 8017b4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017b50:	6939      	ldr	r1, [r7, #16]
 8017b52:	4618      	mov	r0, r3
 8017b54:	f7ff fab0 	bl	80170b8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8017b58:	683b      	ldr	r3, [r7, #0]
 8017b5a:	7bfa      	ldrb	r2, [r7, #15]
 8017b5c:	701a      	strb	r2, [r3, #0]
    return true;
 8017b5e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017b60:	4618      	mov	r0, r3
 8017b62:	3718      	adds	r7, #24
 8017b64:	46bd      	mov	sp, r7
 8017b66:	bdb0      	pop	{r4, r5, r7, pc}
 8017b68:	0801e044 	.word	0x0801e044
 8017b6c:	20001c1c 	.word	0x20001c1c
 8017b70:	0801e00c 	.word	0x0801e00c
 8017b74:	00014585 	.word	0x00014585
 8017b78:	0801e03c 	.word	0x0801e03c
 8017b7c:	0801e034 	.word	0x0801e034

08017b80 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017b80:	b590      	push	{r4, r7, lr}
 8017b82:	b093      	sub	sp, #76	@ 0x4c
 8017b84:	af0a      	add	r7, sp, #40	@ 0x28
 8017b86:	60f8      	str	r0, [r7, #12]
 8017b88:	60b9      	str	r1, [r7, #8]
 8017b8a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017b92:	461a      	mov	r2, r3
 8017b94:	4b5d      	ldr	r3, [pc, #372]	@ (8017d0c <RegionEU868TxConfig+0x18c>)
 8017b96:	5c9b      	ldrb	r3, [r3, r2]
 8017b98:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017ba0:	4b5b      	ldr	r3, [pc, #364]	@ (8017d10 <RegionEU868TxConfig+0x190>)
 8017ba2:	681a      	ldr	r2, [r3, #0]
 8017ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8017d14 <RegionEU868TxConfig+0x194>)
 8017ba6:	6819      	ldr	r1, [r3, #0]
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	781b      	ldrb	r3, [r3, #0]
 8017bac:	461c      	mov	r4, r3
 8017bae:	4623      	mov	r3, r4
 8017bb0:	005b      	lsls	r3, r3, #1
 8017bb2:	4423      	add	r3, r4
 8017bb4:	009b      	lsls	r3, r3, #2
 8017bb6:	440b      	add	r3, r1
 8017bb8:	3309      	adds	r3, #9
 8017bba:	781b      	ldrb	r3, [r3, #0]
 8017bbc:	4619      	mov	r1, r3
 8017bbe:	460b      	mov	r3, r1
 8017bc0:	005b      	lsls	r3, r3, #1
 8017bc2:	440b      	add	r3, r1
 8017bc4:	00db      	lsls	r3, r3, #3
 8017bc6:	4413      	add	r3, r2
 8017bc8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017bcc:	4619      	mov	r1, r3
 8017bce:	f7ff fa40 	bl	8017052 <RegionCommonLimitTxPower>
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017bdc:	494e      	ldr	r1, [pc, #312]	@ (8017d18 <RegionEU868TxConfig+0x198>)
 8017bde:	4618      	mov	r0, r3
 8017be0:	f7ff fa4c 	bl	801707c <RegionCommonGetBandwidth>
 8017be4:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017be6:	2300      	movs	r3, #0
 8017be8:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	6859      	ldr	r1, [r3, #4]
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	689a      	ldr	r2, [r3, #8]
 8017bf2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	f7ff f89c 	bl	8016d34 <RegionCommonComputeTxPower>
 8017bfc:	4603      	mov	r3, r0
 8017bfe:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8017c00:	4b46      	ldr	r3, [pc, #280]	@ (8017d1c <RegionEU868TxConfig+0x19c>)
 8017c02:	68da      	ldr	r2, [r3, #12]
 8017c04:	4b43      	ldr	r3, [pc, #268]	@ (8017d14 <RegionEU868TxConfig+0x194>)
 8017c06:	6819      	ldr	r1, [r3, #0]
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	781b      	ldrb	r3, [r3, #0]
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	4603      	mov	r3, r0
 8017c10:	005b      	lsls	r3, r3, #1
 8017c12:	4403      	add	r3, r0
 8017c14:	009b      	lsls	r3, r3, #2
 8017c16:	440b      	add	r3, r1
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c24:	2b07      	cmp	r3, #7
 8017c26:	d124      	bne.n	8017c72 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017c28:	2300      	movs	r3, #0
 8017c2a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8017c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8017d1c <RegionEU868TxConfig+0x19c>)
 8017c2e:	69dc      	ldr	r4, [r3, #28]
 8017c30:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017c34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017c38:	fb02 f303 	mul.w	r3, r2, r3
 8017c3c:	461a      	mov	r2, r3
 8017c3e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017c42:	7ff8      	ldrb	r0, [r7, #31]
 8017c44:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8017c48:	9308      	str	r3, [sp, #32]
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	9307      	str	r3, [sp, #28]
 8017c4e:	2300      	movs	r3, #0
 8017c50:	9306      	str	r3, [sp, #24]
 8017c52:	2300      	movs	r3, #0
 8017c54:	9305      	str	r3, [sp, #20]
 8017c56:	2301      	movs	r3, #1
 8017c58:	9304      	str	r3, [sp, #16]
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	9303      	str	r3, [sp, #12]
 8017c5e:	2305      	movs	r3, #5
 8017c60:	9302      	str	r3, [sp, #8]
 8017c62:	2300      	movs	r3, #0
 8017c64:	9301      	str	r3, [sp, #4]
 8017c66:	9200      	str	r2, [sp, #0]
 8017c68:	69bb      	ldr	r3, [r7, #24]
 8017c6a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8017c6e:	47a0      	blx	r4
 8017c70:	e01d      	b.n	8017cae <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8017c72:	2301      	movs	r3, #1
 8017c74:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017c76:	4b29      	ldr	r3, [pc, #164]	@ (8017d1c <RegionEU868TxConfig+0x19c>)
 8017c78:	69dc      	ldr	r4, [r3, #28]
 8017c7a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017c7e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017c82:	7ff8      	ldrb	r0, [r7, #31]
 8017c84:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8017c88:	9208      	str	r2, [sp, #32]
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	9207      	str	r2, [sp, #28]
 8017c8e:	2200      	movs	r2, #0
 8017c90:	9206      	str	r2, [sp, #24]
 8017c92:	2200      	movs	r2, #0
 8017c94:	9205      	str	r2, [sp, #20]
 8017c96:	2201      	movs	r2, #1
 8017c98:	9204      	str	r2, [sp, #16]
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	9203      	str	r2, [sp, #12]
 8017c9e:	2208      	movs	r2, #8
 8017ca0:	9202      	str	r2, [sp, #8]
 8017ca2:	2201      	movs	r2, #1
 8017ca4:	9201      	str	r2, [sp, #4]
 8017ca6:	9300      	str	r3, [sp, #0]
 8017ca8:	69bb      	ldr	r3, [r7, #24]
 8017caa:	2200      	movs	r2, #0
 8017cac:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8017cae:	4b19      	ldr	r3, [pc, #100]	@ (8017d14 <RegionEU868TxConfig+0x194>)
 8017cb0:	681a      	ldr	r2, [r3, #0]
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	781b      	ldrb	r3, [r3, #0]
 8017cb6:	4619      	mov	r1, r3
 8017cb8:	460b      	mov	r3, r1
 8017cba:	005b      	lsls	r3, r3, #1
 8017cbc:	440b      	add	r3, r1
 8017cbe:	009b      	lsls	r3, r3, #2
 8017cc0:	4413      	add	r3, r2
 8017cc2:	681a      	ldr	r2, [r3, #0]
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cca:	4619      	mov	r1, r3
 8017ccc:	4610      	mov	r0, r2
 8017cce:	f7ff fa25 	bl	801711c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	899b      	ldrh	r3, [r3, #12]
 8017cdc:	4619      	mov	r1, r3
 8017cde:	4610      	mov	r0, r2
 8017ce0:	f7ff faaa 	bl	8017238 <GetTimeOnAir>
 8017ce4:	4602      	mov	r2, r0
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8017cea:	4b0c      	ldr	r3, [pc, #48]	@ (8017d1c <RegionEU868TxConfig+0x19c>)
 8017cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017cee:	68fa      	ldr	r2, [r7, #12]
 8017cf0:	8992      	ldrh	r2, [r2, #12]
 8017cf2:	b2d1      	uxtb	r1, r2
 8017cf4:	7ffa      	ldrb	r2, [r7, #31]
 8017cf6:	4610      	mov	r0, r2
 8017cf8:	4798      	blx	r3

    *txPower = txPowerLimited;
 8017cfa:	68bb      	ldr	r3, [r7, #8]
 8017cfc:	7f7a      	ldrb	r2, [r7, #29]
 8017cfe:	701a      	strb	r2, [r3, #0]
    return true;
 8017d00:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017d02:	4618      	mov	r0, r3
 8017d04:	3724      	adds	r7, #36	@ 0x24
 8017d06:	46bd      	mov	sp, r7
 8017d08:	bd90      	pop	{r4, r7, pc}
 8017d0a:	bf00      	nop
 8017d0c:	0801e00c 	.word	0x0801e00c
 8017d10:	20001c20 	.word	0x20001c20
 8017d14:	20001c1c 	.word	0x20001c1c
 8017d18:	0801e014 	.word	0x0801e014
 8017d1c:	0801e044 	.word	0x0801e044

08017d20 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017d20:	b590      	push	{r4, r7, lr}
 8017d22:	b093      	sub	sp, #76	@ 0x4c
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	60f8      	str	r0, [r7, #12]
 8017d28:	60b9      	str	r1, [r7, #8]
 8017d2a:	607a      	str	r2, [r7, #4]
 8017d2c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017d2e:	2307      	movs	r3, #7
 8017d30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017d34:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8017d38:	2200      	movs	r2, #0
 8017d3a:	601a      	str	r2, [r3, #0]
 8017d3c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017d3e:	2300      	movs	r3, #0
 8017d40:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8017d44:	2300      	movs	r3, #0
 8017d46:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017d4e:	e085      	b.n	8017e5c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	685a      	ldr	r2, [r3, #4]
 8017d54:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8017d58:	4413      	add	r3, r2
 8017d5a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8017d5e:	4611      	mov	r1, r2
 8017d60:	4618      	mov	r0, r3
 8017d62:	f7fe fe2f 	bl	80169c4 <RegionCommonParseLinkAdrReq>
 8017d66:	4603      	mov	r3, r0
 8017d68:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8017d6c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d07b      	beq.n	8017e6c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017d74:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8017d78:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017d7c:	4413      	add	r3, r2
 8017d7e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8017d82:	2307      	movs	r3, #7
 8017d84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8017d88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017d8c:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8017d8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d109      	bne.n	8017daa <RegionEU868LinkAdrReq+0x8a>
 8017d96:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d106      	bne.n	8017daa <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8017d9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017da0:	f023 0301 	bic.w	r3, r3, #1
 8017da4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8017da8:	e058      	b.n	8017e5c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017daa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d003      	beq.n	8017dba <RegionEU868LinkAdrReq+0x9a>
 8017db2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8017db6:	2b05      	cmp	r3, #5
 8017db8:	d903      	bls.n	8017dc2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8017dba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017dbe:	2b06      	cmp	r3, #6
 8017dc0:	d906      	bls.n	8017dd0 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8017dc2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017dc6:	f023 0301 	bic.w	r3, r3, #1
 8017dca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8017dce:	e045      	b.n	8017e5c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8017dd6:	e03d      	b.n	8017e54 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8017dd8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8017ddc:	2b06      	cmp	r3, #6
 8017dde:	d118      	bne.n	8017e12 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8017de0:	4b5f      	ldr	r3, [pc, #380]	@ (8017f60 <RegionEU868LinkAdrReq+0x240>)
 8017de2:	6819      	ldr	r1, [r3, #0]
 8017de4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8017de8:	4613      	mov	r3, r2
 8017dea:	005b      	lsls	r3, r3, #1
 8017dec:	4413      	add	r3, r2
 8017dee:	009b      	lsls	r3, r3, #2
 8017df0:	440b      	add	r3, r1
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d028      	beq.n	8017e4a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8017df8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8017dfc:	2201      	movs	r2, #1
 8017dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8017e02:	b21a      	sxth	r2, r3
 8017e04:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017e06:	b21b      	sxth	r3, r3
 8017e08:	4313      	orrs	r3, r2
 8017e0a:	b21b      	sxth	r3, r3
 8017e0c:	b29b      	uxth	r3, r3
 8017e0e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8017e10:	e01b      	b.n	8017e4a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017e12:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017e14:	461a      	mov	r2, r3
 8017e16:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8017e1a:	fa42 f303 	asr.w	r3, r2, r3
 8017e1e:	f003 0301 	and.w	r3, r3, #1
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d011      	beq.n	8017e4a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8017e26:	4b4e      	ldr	r3, [pc, #312]	@ (8017f60 <RegionEU868LinkAdrReq+0x240>)
 8017e28:	6819      	ldr	r1, [r3, #0]
 8017e2a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8017e2e:	4613      	mov	r3, r2
 8017e30:	005b      	lsls	r3, r3, #1
 8017e32:	4413      	add	r3, r2
 8017e34:	009b      	lsls	r3, r3, #2
 8017e36:	440b      	add	r3, r1
 8017e38:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d105      	bne.n	8017e4a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8017e3e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017e42:	f023 0301 	bic.w	r3, r3, #1
 8017e46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017e4a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8017e4e:	3301      	adds	r3, #1
 8017e50:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8017e54:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8017e58:	2b0f      	cmp	r3, #15
 8017e5a:	d9bd      	bls.n	8017dd8 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	7a1b      	ldrb	r3, [r3, #8]
 8017e60:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8017e64:	429a      	cmp	r2, r3
 8017e66:	f4ff af73 	bcc.w	8017d50 <RegionEU868LinkAdrReq+0x30>
 8017e6a:	e000      	b.n	8017e6e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8017e6c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8017e6e:	2302      	movs	r3, #2
 8017e70:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	7a5b      	ldrb	r3, [r3, #9]
 8017e78:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8017e7c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8017e80:	4618      	mov	r0, r3
 8017e82:	f7ff fa29 	bl	80172d8 <RegionEU868GetPhyParam>
 8017e86:	4603      	mov	r3, r0
 8017e88:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8017e8a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017e8e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	7a9b      	ldrb	r3, [r3, #10]
 8017e94:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8017e96:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8017e9a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017e9c:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8017ea0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8017ea2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017ea6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8017eae:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017eb6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	7b5b      	ldrb	r3, [r3, #13]
 8017ebc:	b25b      	sxtb	r3, r3
 8017ebe:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8017ec0:	2310      	movs	r3, #16
 8017ec2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8017ec4:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8017ec8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8017eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ecc:	b25b      	sxtb	r3, r3
 8017ece:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8017ed2:	2307      	movs	r3, #7
 8017ed4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017ed8:	4b21      	ldr	r3, [pc, #132]	@ (8017f60 <RegionEU868LinkAdrReq+0x240>)
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8017ede:	2307      	movs	r3, #7
 8017ee0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8017ef0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8017ef4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8017ef8:	1c9a      	adds	r2, r3, #2
 8017efa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8017efe:	1c59      	adds	r1, r3, #1
 8017f00:	f107 0010 	add.w	r0, r7, #16
 8017f04:	4623      	mov	r3, r4
 8017f06:	f7fe fdaf 	bl	8016a68 <RegionCommonLinkAdrReqVerifyParams>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017f10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017f14:	2b07      	cmp	r3, #7
 8017f16:	d10d      	bne.n	8017f34 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8017f18:	4b11      	ldr	r3, [pc, #68]	@ (8017f60 <RegionEU868LinkAdrReq+0x240>)
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017f20:	220c      	movs	r2, #12
 8017f22:	2100      	movs	r1, #0
 8017f24:	4618      	mov	r0, r3
 8017f26:	f000 fb35 	bl	8018594 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8017f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8017f60 <RegionEU868LinkAdrReq+0x240>)
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017f30:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8017f34:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8017f38:	68bb      	ldr	r3, [r7, #8]
 8017f3a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017f3c:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017f44:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017f4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017f4e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8017f52:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8017f54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8017f58:	4618      	mov	r0, r3
 8017f5a:	374c      	adds	r7, #76	@ 0x4c
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	bd90      	pop	{r4, r7, pc}
 8017f60:	20001c1c 	.word	0x20001c1c

08017f64 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017f64:	b580      	push	{r7, lr}
 8017f66:	b084      	sub	sp, #16
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017f6c:	2307      	movs	r3, #7
 8017f6e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017f70:	2300      	movs	r3, #0
 8017f72:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	685b      	ldr	r3, [r3, #4]
 8017f78:	f107 020e 	add.w	r2, r7, #14
 8017f7c:	4611      	mov	r1, r2
 8017f7e:	4618      	mov	r0, r3
 8017f80:	f7ff f8e4 	bl	801714c <VerifyRfFreq>
 8017f84:	4603      	mov	r3, r0
 8017f86:	f083 0301 	eor.w	r3, r3, #1
 8017f8a:	b2db      	uxtb	r3, r3
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d003      	beq.n	8017f98 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8017f90:	7bfb      	ldrb	r3, [r7, #15]
 8017f92:	f023 0301 	bic.w	r3, r3, #1
 8017f96:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	f993 3000 	ldrsb.w	r3, [r3]
 8017f9e:	2207      	movs	r2, #7
 8017fa0:	2100      	movs	r1, #0
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f7fe fb71 	bl	801668a <RegionCommonValueInRange>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d103      	bne.n	8017fb6 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8017fae:	7bfb      	ldrb	r3, [r7, #15]
 8017fb0:	f023 0302 	bic.w	r3, r3, #2
 8017fb4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017fbc:	2205      	movs	r2, #5
 8017fbe:	2100      	movs	r1, #0
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7fe fb62 	bl	801668a <RegionCommonValueInRange>
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d103      	bne.n	8017fd4 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017fcc:	7bfb      	ldrb	r3, [r7, #15]
 8017fce:	f023 0304 	bic.w	r3, r3, #4
 8017fd2:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8017fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	3710      	adds	r7, #16
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	bd80      	pop	{r7, pc}
	...

08017fe0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b086      	sub	sp, #24
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017fe8:	2303      	movs	r3, #3
 8017fea:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d114      	bne.n	8018020 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017ffc:	b2db      	uxtb	r3, r3
 8017ffe:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018000:	f107 0308 	add.w	r3, r7, #8
 8018004:	4618      	mov	r0, r3
 8018006:	f000 f9ff 	bl	8018408 <RegionEU868ChannelsRemove>
 801800a:	4603      	mov	r3, r0
 801800c:	f083 0301 	eor.w	r3, r3, #1
 8018010:	b2db      	uxtb	r3, r3
 8018012:	2b00      	cmp	r3, #0
 8018014:	d03b      	beq.n	801808e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8018016:	7dfb      	ldrb	r3, [r7, #23]
 8018018:	f023 0303 	bic.w	r3, r3, #3
 801801c:	75fb      	strb	r3, [r7, #23]
 801801e:	e036      	b.n	801808e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801802c:	b2db      	uxtb	r3, r3
 801802e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8018030:	f107 030c 	add.w	r3, r7, #12
 8018034:	4618      	mov	r0, r3
 8018036:	f000 f945 	bl	80182c4 <RegionEU868ChannelAdd>
 801803a:	4603      	mov	r3, r0
 801803c:	2b06      	cmp	r3, #6
 801803e:	d820      	bhi.n	8018082 <RegionEU868NewChannelReq+0xa2>
 8018040:	a201      	add	r2, pc, #4	@ (adr r2, 8018048 <RegionEU868NewChannelReq+0x68>)
 8018042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018046:	bf00      	nop
 8018048:	0801808d 	.word	0x0801808d
 801804c:	08018083 	.word	0x08018083
 8018050:	08018083 	.word	0x08018083
 8018054:	08018083 	.word	0x08018083
 8018058:	08018065 	.word	0x08018065
 801805c:	0801806f 	.word	0x0801806f
 8018060:	08018079 	.word	0x08018079
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018064:	7dfb      	ldrb	r3, [r7, #23]
 8018066:	f023 0301 	bic.w	r3, r3, #1
 801806a:	75fb      	strb	r3, [r7, #23]
                break;
 801806c:	e00f      	b.n	801808e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801806e:	7dfb      	ldrb	r3, [r7, #23]
 8018070:	f023 0302 	bic.w	r3, r3, #2
 8018074:	75fb      	strb	r3, [r7, #23]
                break;
 8018076:	e00a      	b.n	801808e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018078:	7dfb      	ldrb	r3, [r7, #23]
 801807a:	f023 0303 	bic.w	r3, r3, #3
 801807e:	75fb      	strb	r3, [r7, #23]
                break;
 8018080:	e005      	b.n	801808e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8018082:	7dfb      	ldrb	r3, [r7, #23]
 8018084:	f023 0303 	bic.w	r3, r3, #3
 8018088:	75fb      	strb	r3, [r7, #23]
                break;
 801808a:	e000      	b.n	801808e <RegionEU868NewChannelReq+0xae>
                break;
 801808c:	bf00      	nop
            }
        }
    }

    return status;
 801808e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018092:	4618      	mov	r0, r3
 8018094:	3718      	adds	r7, #24
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}
 801809a:	bf00      	nop

0801809c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801809c:	b480      	push	{r7}
 801809e:	b083      	sub	sp, #12
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80180a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80180a8:	4618      	mov	r0, r3
 80180aa:	370c      	adds	r7, #12
 80180ac:	46bd      	mov	sp, r7
 80180ae:	bc80      	pop	{r7}
 80180b0:	4770      	bx	lr
	...

080180b4 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b084      	sub	sp, #16
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80180bc:	2303      	movs	r3, #3
 80180be:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 80180c0:	2300      	movs	r3, #0
 80180c2:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	781b      	ldrb	r3, [r3, #0]
 80180c8:	2b0f      	cmp	r3, #15
 80180ca:	d901      	bls.n	80180d0 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 80180cc:	2300      	movs	r3, #0
 80180ce:	e035      	b.n	801813c <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	685b      	ldr	r3, [r3, #4]
 80180d4:	f107 020e 	add.w	r2, r7, #14
 80180d8:	4611      	mov	r1, r2
 80180da:	4618      	mov	r0, r3
 80180dc:	f7ff f836 	bl	801714c <VerifyRfFreq>
 80180e0:	4603      	mov	r3, r0
 80180e2:	f083 0301 	eor.w	r3, r3, #1
 80180e6:	b2db      	uxtb	r3, r3
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d003      	beq.n	80180f4 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80180ec:	7bfb      	ldrb	r3, [r7, #15]
 80180ee:	f023 0301 	bic.w	r3, r3, #1
 80180f2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80180f4:	4b13      	ldr	r3, [pc, #76]	@ (8018144 <RegionEU868DlChannelReq+0x90>)
 80180f6:	681a      	ldr	r2, [r3, #0]
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	781b      	ldrb	r3, [r3, #0]
 80180fc:	4619      	mov	r1, r3
 80180fe:	460b      	mov	r3, r1
 8018100:	005b      	lsls	r3, r3, #1
 8018102:	440b      	add	r3, r1
 8018104:	009b      	lsls	r3, r3, #2
 8018106:	4413      	add	r3, r2
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d103      	bne.n	8018116 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 801810e:	7bfb      	ldrb	r3, [r7, #15]
 8018110:	f023 0302 	bic.w	r3, r3, #2
 8018114:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8018116:	7bfb      	ldrb	r3, [r7, #15]
 8018118:	2b03      	cmp	r3, #3
 801811a:	d10d      	bne.n	8018138 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801811c:	4b09      	ldr	r3, [pc, #36]	@ (8018144 <RegionEU868DlChannelReq+0x90>)
 801811e:	6819      	ldr	r1, [r3, #0]
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	781b      	ldrb	r3, [r3, #0]
 8018124:	4618      	mov	r0, r3
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	685a      	ldr	r2, [r3, #4]
 801812a:	4603      	mov	r3, r0
 801812c:	005b      	lsls	r3, r3, #1
 801812e:	4403      	add	r3, r0
 8018130:	009b      	lsls	r3, r3, #2
 8018132:	440b      	add	r3, r1
 8018134:	3304      	adds	r3, #4
 8018136:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8018138:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801813c:	4618      	mov	r0, r3
 801813e:	3710      	adds	r7, #16
 8018140:	46bd      	mov	sp, r7
 8018142:	bd80      	pop	{r7, pc}
 8018144:	20001c1c 	.word	0x20001c1c

08018148 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018148:	b480      	push	{r7}
 801814a:	b083      	sub	sp, #12
 801814c:	af00      	add	r7, sp, #0
 801814e:	4603      	mov	r3, r0
 8018150:	460a      	mov	r2, r1
 8018152:	71fb      	strb	r3, [r7, #7]
 8018154:	4613      	mov	r3, r2
 8018156:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8018158:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801815c:	4618      	mov	r0, r3
 801815e:	370c      	adds	r7, #12
 8018160:	46bd      	mov	sp, r7
 8018162:	bc80      	pop	{r7}
 8018164:	4770      	bx	lr
	...

08018168 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b09a      	sub	sp, #104	@ 0x68
 801816c:	af02      	add	r7, sp, #8
 801816e:	60f8      	str	r0, [r7, #12]
 8018170:	60b9      	str	r1, [r7, #8]
 8018172:	607a      	str	r2, [r7, #4]
 8018174:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8018176:	2300      	movs	r3, #0
 8018178:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 801817c:	2300      	movs	r3, #0
 801817e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8018182:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018186:	2200      	movs	r2, #0
 8018188:	601a      	str	r2, [r3, #0]
 801818a:	605a      	str	r2, [r3, #4]
 801818c:	609a      	str	r2, [r3, #8]
 801818e:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018190:	230c      	movs	r3, #12
 8018192:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8018196:	2307      	movs	r3, #7
 8018198:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801819a:	4b48      	ldr	r3, [pc, #288]	@ (80182bc <RegionEU868NextChannel+0x154>)
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80181a2:	2201      	movs	r2, #1
 80181a4:	2100      	movs	r1, #0
 80181a6:	4618      	mov	r0, r3
 80181a8:	f7fe fac0 	bl	801672c <RegionCommonCountChannels>
 80181ac:	4603      	mov	r3, r0
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d10a      	bne.n	80181c8 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80181b2:	4b42      	ldr	r3, [pc, #264]	@ (80182bc <RegionEU868NextChannel+0x154>)
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80181ba:	4b40      	ldr	r3, [pc, #256]	@ (80182bc <RegionEU868NextChannel+0x154>)
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	f042 0207 	orr.w	r2, r2, #7
 80181c2:	b292      	uxth	r2, r2
 80181c4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	7a5b      	ldrb	r3, [r3, #9]
 80181cc:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80181d4:	b2db      	uxtb	r3, r3
 80181d6:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80181d8:	4b38      	ldr	r3, [pc, #224]	@ (80182bc <RegionEU868NextChannel+0x154>)
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80181e0:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80181e2:	4b36      	ldr	r3, [pc, #216]	@ (80182bc <RegionEU868NextChannel+0x154>)
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
 80181e8:	4b35      	ldr	r3, [pc, #212]	@ (80182c0 <RegionEU868NextChannel+0x158>)
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80181ee:	2310      	movs	r3, #16
 80181f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80181f2:	f107 0312 	add.w	r3, r7, #18
 80181f6:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	685b      	ldr	r3, [r3, #4]
 8018202:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	7a9b      	ldrb	r3, [r3, #10]
 8018208:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801820c:	2306      	movs	r3, #6
 801820e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018212:	68fa      	ldr	r2, [r7, #12]
 8018214:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8018218:	320c      	adds	r2, #12
 801821a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801821e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	7d1b      	ldrb	r3, [r3, #20]
 8018226:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	8adb      	ldrh	r3, [r3, #22]
 8018234:	4619      	mov	r1, r3
 8018236:	4610      	mov	r0, r2
 8018238:	f7fe fffe 	bl	8017238 <GetTimeOnAir>
 801823c:	4603      	mov	r3, r0
 801823e:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018240:	f107 0314 	add.w	r3, r7, #20
 8018244:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018246:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 801824a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801824e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	9301      	str	r3, [sp, #4]
 8018256:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 801825a:	9300      	str	r3, [sp, #0]
 801825c:	460b      	mov	r3, r1
 801825e:	6839      	ldr	r1, [r7, #0]
 8018260:	f7fe fe57 	bl	8016f12 <RegionCommonIdentifyChannels>
 8018264:	4603      	mov	r3, r0
 8018266:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801826a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801826e:	2b00      	cmp	r3, #0
 8018270:	d10e      	bne.n	8018290 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018272:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8018276:	3b01      	subs	r3, #1
 8018278:	4619      	mov	r1, r3
 801827a:	2000      	movs	r0, #0
 801827c:	f000 f938 	bl	80184f0 <randr>
 8018280:	4603      	mov	r3, r0
 8018282:	3360      	adds	r3, #96	@ 0x60
 8018284:	443b      	add	r3, r7
 8018286:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801828a:	68bb      	ldr	r3, [r7, #8]
 801828c:	701a      	strb	r2, [r3, #0]
 801828e:	e00e      	b.n	80182ae <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8018290:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018294:	2b0c      	cmp	r3, #12
 8018296:	d10a      	bne.n	80182ae <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018298:	4b08      	ldr	r3, [pc, #32]	@ (80182bc <RegionEU868NextChannel+0x154>)
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80182a0:	4b06      	ldr	r3, [pc, #24]	@ (80182bc <RegionEU868NextChannel+0x154>)
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	f042 0207 	orr.w	r2, r2, #7
 80182a8:	b292      	uxth	r2, r2
 80182aa:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 80182ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80182b2:	4618      	mov	r0, r3
 80182b4:	3760      	adds	r7, #96	@ 0x60
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd80      	pop	{r7, pc}
 80182ba:	bf00      	nop
 80182bc:	20001c1c 	.word	0x20001c1c
 80182c0:	20001c20 	.word	0x20001c20

080182c4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80182c4:	b580      	push	{r7, lr}
 80182c6:	b084      	sub	sp, #16
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80182cc:	2300      	movs	r3, #0
 80182ce:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80182d0:	2300      	movs	r3, #0
 80182d2:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80182d4:	2300      	movs	r3, #0
 80182d6:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	791b      	ldrb	r3, [r3, #4]
 80182dc:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80182de:	7b7b      	ldrb	r3, [r7, #13]
 80182e0:	2b02      	cmp	r3, #2
 80182e2:	d801      	bhi.n	80182e8 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80182e4:	2306      	movs	r3, #6
 80182e6:	e089      	b.n	80183fc <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80182e8:	7b7b      	ldrb	r3, [r7, #13]
 80182ea:	2b0f      	cmp	r3, #15
 80182ec:	d901      	bls.n	80182f2 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80182ee:	2303      	movs	r3, #3
 80182f0:	e084      	b.n	80183fc <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	7a1b      	ldrb	r3, [r3, #8]
 80182f8:	f343 0303 	sbfx	r3, r3, #0, #4
 80182fc:	b25b      	sxtb	r3, r3
 80182fe:	2207      	movs	r2, #7
 8018300:	2100      	movs	r1, #0
 8018302:	4618      	mov	r0, r3
 8018304:	f7fe f9c1 	bl	801668a <RegionCommonValueInRange>
 8018308:	4603      	mov	r3, r0
 801830a:	2b00      	cmp	r3, #0
 801830c:	d101      	bne.n	8018312 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801830e:	2301      	movs	r3, #1
 8018310:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	7a1b      	ldrb	r3, [r3, #8]
 8018318:	f343 1303 	sbfx	r3, r3, #4, #4
 801831c:	b25b      	sxtb	r3, r3
 801831e:	2207      	movs	r2, #7
 8018320:	2100      	movs	r1, #0
 8018322:	4618      	mov	r0, r3
 8018324:	f7fe f9b1 	bl	801668a <RegionCommonValueInRange>
 8018328:	4603      	mov	r3, r0
 801832a:	2b00      	cmp	r3, #0
 801832c:	d101      	bne.n	8018332 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801832e:	2301      	movs	r3, #1
 8018330:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	7a1b      	ldrb	r3, [r3, #8]
 8018338:	f343 0303 	sbfx	r3, r3, #0, #4
 801833c:	b25a      	sxtb	r2, r3
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	7a1b      	ldrb	r3, [r3, #8]
 8018344:	f343 1303 	sbfx	r3, r3, #4, #4
 8018348:	b25b      	sxtb	r3, r3
 801834a:	429a      	cmp	r2, r3
 801834c:	dd01      	ble.n	8018352 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801834e:	2301      	movs	r3, #1
 8018350:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8018352:	7bbb      	ldrb	r3, [r7, #14]
 8018354:	f083 0301 	eor.w	r3, r3, #1
 8018358:	b2db      	uxtb	r3, r3
 801835a:	2b00      	cmp	r3, #0
 801835c:	d010      	beq.n	8018380 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	f107 020c 	add.w	r2, r7, #12
 8018368:	4611      	mov	r1, r2
 801836a:	4618      	mov	r0, r3
 801836c:	f7fe feee 	bl	801714c <VerifyRfFreq>
 8018370:	4603      	mov	r3, r0
 8018372:	f083 0301 	eor.w	r3, r3, #1
 8018376:	b2db      	uxtb	r3, r3
 8018378:	2b00      	cmp	r3, #0
 801837a:	d001      	beq.n	8018380 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801837c:	2301      	movs	r3, #1
 801837e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8018380:	7bfb      	ldrb	r3, [r7, #15]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d004      	beq.n	8018390 <RegionEU868ChannelAdd+0xcc>
 8018386:	7bbb      	ldrb	r3, [r7, #14]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d001      	beq.n	8018390 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801838c:	2306      	movs	r3, #6
 801838e:	e035      	b.n	80183fc <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8018390:	7bfb      	ldrb	r3, [r7, #15]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d001      	beq.n	801839a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8018396:	2305      	movs	r3, #5
 8018398:	e030      	b.n	80183fc <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801839a:	7bbb      	ldrb	r3, [r7, #14]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d001      	beq.n	80183a4 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80183a0:	2304      	movs	r3, #4
 80183a2:	e02b      	b.n	80183fc <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80183a4:	4b17      	ldr	r3, [pc, #92]	@ (8018404 <RegionEU868ChannelAdd+0x140>)
 80183a6:	6819      	ldr	r1, [r3, #0]
 80183a8:	7b7a      	ldrb	r2, [r7, #13]
 80183aa:	4613      	mov	r3, r2
 80183ac:	005b      	lsls	r3, r3, #1
 80183ae:	4413      	add	r3, r2
 80183b0:	009b      	lsls	r3, r3, #2
 80183b2:	18c8      	adds	r0, r1, r3
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	220c      	movs	r2, #12
 80183ba:	4619      	mov	r1, r3
 80183bc:	f000 f8af 	bl	801851e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80183c0:	4b10      	ldr	r3, [pc, #64]	@ (8018404 <RegionEU868ChannelAdd+0x140>)
 80183c2:	6819      	ldr	r1, [r3, #0]
 80183c4:	7b7a      	ldrb	r2, [r7, #13]
 80183c6:	7b38      	ldrb	r0, [r7, #12]
 80183c8:	4613      	mov	r3, r2
 80183ca:	005b      	lsls	r3, r3, #1
 80183cc:	4413      	add	r3, r2
 80183ce:	009b      	lsls	r3, r3, #2
 80183d0:	440b      	add	r3, r1
 80183d2:	3309      	adds	r3, #9
 80183d4:	4602      	mov	r2, r0
 80183d6:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80183d8:	4b0a      	ldr	r3, [pc, #40]	@ (8018404 <RegionEU868ChannelAdd+0x140>)
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80183e0:	b21a      	sxth	r2, r3
 80183e2:	7b7b      	ldrb	r3, [r7, #13]
 80183e4:	2101      	movs	r1, #1
 80183e6:	fa01 f303 	lsl.w	r3, r1, r3
 80183ea:	b21b      	sxth	r3, r3
 80183ec:	4313      	orrs	r3, r2
 80183ee:	b21a      	sxth	r2, r3
 80183f0:	4b04      	ldr	r3, [pc, #16]	@ (8018404 <RegionEU868ChannelAdd+0x140>)
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	b292      	uxth	r2, r2
 80183f6:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 80183fa:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80183fc:	4618      	mov	r0, r3
 80183fe:	3710      	adds	r7, #16
 8018400:	46bd      	mov	sp, r7
 8018402:	bd80      	pop	{r7, pc}
 8018404:	20001c1c 	.word	0x20001c1c

08018408 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8018408:	b580      	push	{r7, lr}
 801840a:	b086      	sub	sp, #24
 801840c:	af00      	add	r7, sp, #0
 801840e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	781b      	ldrb	r3, [r3, #0]
 8018414:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018416:	7dfb      	ldrb	r3, [r7, #23]
 8018418:	2b02      	cmp	r3, #2
 801841a:	d801      	bhi.n	8018420 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801841c:	2300      	movs	r3, #0
 801841e:	e016      	b.n	801844e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8018420:	4b0d      	ldr	r3, [pc, #52]	@ (8018458 <RegionEU868ChannelsRemove+0x50>)
 8018422:	6819      	ldr	r1, [r3, #0]
 8018424:	7dfa      	ldrb	r2, [r7, #23]
 8018426:	4613      	mov	r3, r2
 8018428:	005b      	lsls	r3, r3, #1
 801842a:	4413      	add	r3, r2
 801842c:	009b      	lsls	r3, r3, #2
 801842e:	440b      	add	r3, r1
 8018430:	461a      	mov	r2, r3
 8018432:	2300      	movs	r3, #0
 8018434:	6013      	str	r3, [r2, #0]
 8018436:	6053      	str	r3, [r2, #4]
 8018438:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801843a:	4b07      	ldr	r3, [pc, #28]	@ (8018458 <RegionEU868ChannelsRemove+0x50>)
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018442:	7df9      	ldrb	r1, [r7, #23]
 8018444:	2210      	movs	r2, #16
 8018446:	4618      	mov	r0, r3
 8018448:	f7fe f93c 	bl	80166c4 <RegionCommonChanDisable>
 801844c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801844e:	4618      	mov	r0, r3
 8018450:	3718      	adds	r7, #24
 8018452:	46bd      	mov	sp, r7
 8018454:	bd80      	pop	{r7, pc}
 8018456:	bf00      	nop
 8018458:	20001c1c 	.word	0x20001c1c

0801845c <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801845c:	b480      	push	{r7}
 801845e:	b085      	sub	sp, #20
 8018460:	af00      	add	r7, sp, #0
 8018462:	4603      	mov	r3, r0
 8018464:	71fb      	strb	r3, [r7, #7]
 8018466:	460b      	mov	r3, r1
 8018468:	71bb      	strb	r3, [r7, #6]
 801846a:	4613      	mov	r3, r2
 801846c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801846e:	79ba      	ldrb	r2, [r7, #6]
 8018470:	797b      	ldrb	r3, [r7, #5]
 8018472:	1ad3      	subs	r3, r2, r3
 8018474:	b2db      	uxtb	r3, r3
 8018476:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801847c:	2b00      	cmp	r3, #0
 801847e:	da01      	bge.n	8018484 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8018480:	2300      	movs	r3, #0
 8018482:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018484:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8018486:	4618      	mov	r0, r3
 8018488:	3714      	adds	r7, #20
 801848a:	46bd      	mov	sp, r7
 801848c:	bc80      	pop	{r7}
 801848e:	4770      	bx	lr

08018490 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018490:	b480      	push	{r7}
 8018492:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018494:	4b0d      	ldr	r3, [pc, #52]	@ (80184cc <rand1+0x3c>)
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	4a0d      	ldr	r2, [pc, #52]	@ (80184d0 <rand1+0x40>)
 801849a:	fb02 f303 	mul.w	r3, r2, r3
 801849e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80184a2:	3339      	adds	r3, #57	@ 0x39
 80184a4:	4a09      	ldr	r2, [pc, #36]	@ (80184cc <rand1+0x3c>)
 80184a6:	6013      	str	r3, [r2, #0]
 80184a8:	4b08      	ldr	r3, [pc, #32]	@ (80184cc <rand1+0x3c>)
 80184aa:	681a      	ldr	r2, [r3, #0]
 80184ac:	2303      	movs	r3, #3
 80184ae:	fba3 1302 	umull	r1, r3, r3, r2
 80184b2:	1ad1      	subs	r1, r2, r3
 80184b4:	0849      	lsrs	r1, r1, #1
 80184b6:	440b      	add	r3, r1
 80184b8:	0f99      	lsrs	r1, r3, #30
 80184ba:	460b      	mov	r3, r1
 80184bc:	07db      	lsls	r3, r3, #31
 80184be:	1a5b      	subs	r3, r3, r1
 80184c0:	1ad1      	subs	r1, r2, r3
 80184c2:	460b      	mov	r3, r1
}
 80184c4:	4618      	mov	r0, r3
 80184c6:	46bd      	mov	sp, r7
 80184c8:	bc80      	pop	{r7}
 80184ca:	4770      	bx	lr
 80184cc:	20000130 	.word	0x20000130
 80184d0:	41c64e6d 	.word	0x41c64e6d

080184d4 <srand1>:

void srand1( uint32_t seed )
{
 80184d4:	b480      	push	{r7}
 80184d6:	b083      	sub	sp, #12
 80184d8:	af00      	add	r7, sp, #0
 80184da:	6078      	str	r0, [r7, #4]
    next = seed;
 80184dc:	4a03      	ldr	r2, [pc, #12]	@ (80184ec <srand1+0x18>)
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	6013      	str	r3, [r2, #0]
}
 80184e2:	bf00      	nop
 80184e4:	370c      	adds	r7, #12
 80184e6:	46bd      	mov	sp, r7
 80184e8:	bc80      	pop	{r7}
 80184ea:	4770      	bx	lr
 80184ec:	20000130 	.word	0x20000130

080184f0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b082      	sub	sp, #8
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
 80184f8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80184fa:	f7ff ffc9 	bl	8018490 <rand1>
 80184fe:	4602      	mov	r2, r0
 8018500:	6839      	ldr	r1, [r7, #0]
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	1acb      	subs	r3, r1, r3
 8018506:	3301      	adds	r3, #1
 8018508:	fb92 f1f3 	sdiv	r1, r2, r3
 801850c:	fb01 f303 	mul.w	r3, r1, r3
 8018510:	1ad2      	subs	r2, r2, r3
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	4413      	add	r3, r2
}
 8018516:	4618      	mov	r0, r3
 8018518:	3708      	adds	r7, #8
 801851a:	46bd      	mov	sp, r7
 801851c:	bd80      	pop	{r7, pc}

0801851e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801851e:	b480      	push	{r7}
 8018520:	b085      	sub	sp, #20
 8018522:	af00      	add	r7, sp, #0
 8018524:	60f8      	str	r0, [r7, #12]
 8018526:	60b9      	str	r1, [r7, #8]
 8018528:	4613      	mov	r3, r2
 801852a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801852c:	e007      	b.n	801853e <memcpy1+0x20>
    {
        *dst++ = *src++;
 801852e:	68ba      	ldr	r2, [r7, #8]
 8018530:	1c53      	adds	r3, r2, #1
 8018532:	60bb      	str	r3, [r7, #8]
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	1c59      	adds	r1, r3, #1
 8018538:	60f9      	str	r1, [r7, #12]
 801853a:	7812      	ldrb	r2, [r2, #0]
 801853c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801853e:	88fb      	ldrh	r3, [r7, #6]
 8018540:	1e5a      	subs	r2, r3, #1
 8018542:	80fa      	strh	r2, [r7, #6]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d1f2      	bne.n	801852e <memcpy1+0x10>
    }
}
 8018548:	bf00      	nop
 801854a:	bf00      	nop
 801854c:	3714      	adds	r7, #20
 801854e:	46bd      	mov	sp, r7
 8018550:	bc80      	pop	{r7}
 8018552:	4770      	bx	lr

08018554 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018554:	b480      	push	{r7}
 8018556:	b085      	sub	sp, #20
 8018558:	af00      	add	r7, sp, #0
 801855a:	60f8      	str	r0, [r7, #12]
 801855c:	60b9      	str	r1, [r7, #8]
 801855e:	4613      	mov	r3, r2
 8018560:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018562:	88fb      	ldrh	r3, [r7, #6]
 8018564:	3b01      	subs	r3, #1
 8018566:	68fa      	ldr	r2, [r7, #12]
 8018568:	4413      	add	r3, r2
 801856a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801856c:	e007      	b.n	801857e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801856e:	68ba      	ldr	r2, [r7, #8]
 8018570:	1c53      	adds	r3, r2, #1
 8018572:	60bb      	str	r3, [r7, #8]
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	1e59      	subs	r1, r3, #1
 8018578:	60f9      	str	r1, [r7, #12]
 801857a:	7812      	ldrb	r2, [r2, #0]
 801857c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801857e:	88fb      	ldrh	r3, [r7, #6]
 8018580:	1e5a      	subs	r2, r3, #1
 8018582:	80fa      	strh	r2, [r7, #6]
 8018584:	2b00      	cmp	r3, #0
 8018586:	d1f2      	bne.n	801856e <memcpyr+0x1a>
    }
}
 8018588:	bf00      	nop
 801858a:	bf00      	nop
 801858c:	3714      	adds	r7, #20
 801858e:	46bd      	mov	sp, r7
 8018590:	bc80      	pop	{r7}
 8018592:	4770      	bx	lr

08018594 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018594:	b480      	push	{r7}
 8018596:	b083      	sub	sp, #12
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
 801859c:	460b      	mov	r3, r1
 801859e:	70fb      	strb	r3, [r7, #3]
 80185a0:	4613      	mov	r3, r2
 80185a2:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80185a4:	e004      	b.n	80185b0 <memset1+0x1c>
    {
        *dst++ = value;
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	1c5a      	adds	r2, r3, #1
 80185aa:	607a      	str	r2, [r7, #4]
 80185ac:	78fa      	ldrb	r2, [r7, #3]
 80185ae:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80185b0:	883b      	ldrh	r3, [r7, #0]
 80185b2:	1e5a      	subs	r2, r3, #1
 80185b4:	803a      	strh	r2, [r7, #0]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d1f5      	bne.n	80185a6 <memset1+0x12>
    }
}
 80185ba:	bf00      	nop
 80185bc:	bf00      	nop
 80185be:	370c      	adds	r7, #12
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bc80      	pop	{r7}
 80185c4:	4770      	bx	lr
	...

080185c8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80185c8:	b480      	push	{r7}
 80185ca:	b085      	sub	sp, #20
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
 80185d0:	460b      	mov	r3, r1
 80185d2:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80185d4:	f04f 33ff 	mov.w	r3, #4294967295
 80185d8:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d101      	bne.n	80185e4 <Crc32+0x1c>
    {
        return 0;
 80185e0:	2300      	movs	r3, #0
 80185e2:	e026      	b.n	8018632 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80185e4:	2300      	movs	r3, #0
 80185e6:	817b      	strh	r3, [r7, #10]
 80185e8:	e01d      	b.n	8018626 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80185ea:	897b      	ldrh	r3, [r7, #10]
 80185ec:	687a      	ldr	r2, [r7, #4]
 80185ee:	4413      	add	r3, r2
 80185f0:	781b      	ldrb	r3, [r3, #0]
 80185f2:	461a      	mov	r2, r3
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	4053      	eors	r3, r2
 80185f8:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80185fa:	2300      	movs	r3, #0
 80185fc:	813b      	strh	r3, [r7, #8]
 80185fe:	e00c      	b.n	801861a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	085a      	lsrs	r2, r3, #1
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	f003 0301 	and.w	r3, r3, #1
 801860a:	425b      	negs	r3, r3
 801860c:	490b      	ldr	r1, [pc, #44]	@ (801863c <Crc32+0x74>)
 801860e:	400b      	ands	r3, r1
 8018610:	4053      	eors	r3, r2
 8018612:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018614:	893b      	ldrh	r3, [r7, #8]
 8018616:	3301      	adds	r3, #1
 8018618:	813b      	strh	r3, [r7, #8]
 801861a:	893b      	ldrh	r3, [r7, #8]
 801861c:	2b07      	cmp	r3, #7
 801861e:	d9ef      	bls.n	8018600 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018620:	897b      	ldrh	r3, [r7, #10]
 8018622:	3301      	adds	r3, #1
 8018624:	817b      	strh	r3, [r7, #10]
 8018626:	897a      	ldrh	r2, [r7, #10]
 8018628:	887b      	ldrh	r3, [r7, #2]
 801862a:	429a      	cmp	r2, r3
 801862c:	d3dd      	bcc.n	80185ea <Crc32+0x22>
        }
    }

    return ~crc;
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	43db      	mvns	r3, r3
}
 8018632:	4618      	mov	r0, r3
 8018634:	3714      	adds	r7, #20
 8018636:	46bd      	mov	sp, r7
 8018638:	bc80      	pop	{r7}
 801863a:	4770      	bx	lr
 801863c:	edb88320 	.word	0xedb88320

08018640 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b084      	sub	sp, #16
 8018644:	af02      	add	r7, sp, #8
 8018646:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018648:	4a24      	ldr	r2, [pc, #144]	@ (80186dc <RadioInit+0x9c>)
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801864e:	4b24      	ldr	r3, [pc, #144]	@ (80186e0 <RadioInit+0xa0>)
 8018650:	2200      	movs	r2, #0
 8018652:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018654:	4b22      	ldr	r3, [pc, #136]	@ (80186e0 <RadioInit+0xa0>)
 8018656:	2200      	movs	r2, #0
 8018658:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801865a:	4b21      	ldr	r3, [pc, #132]	@ (80186e0 <RadioInit+0xa0>)
 801865c:	2200      	movs	r2, #0
 801865e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018660:	4b1f      	ldr	r3, [pc, #124]	@ (80186e0 <RadioInit+0xa0>)
 8018662:	2200      	movs	r2, #0
 8018664:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8018666:	481f      	ldr	r0, [pc, #124]	@ (80186e4 <RadioInit+0xa4>)
 8018668:	f001 ffc6 	bl	801a5f8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801866c:	4b1c      	ldr	r3, [pc, #112]	@ (80186e0 <RadioInit+0xa0>)
 801866e:	2200      	movs	r2, #0
 8018670:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018672:	4b1b      	ldr	r3, [pc, #108]	@ (80186e0 <RadioInit+0xa0>)
 8018674:	2200      	movs	r2, #0
 8018676:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018678:	f002 fa5c 	bl	801ab34 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801867c:	2100      	movs	r1, #0
 801867e:	2000      	movs	r0, #0
 8018680:	f002 fe28 	bl	801b2d4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018684:	2204      	movs	r2, #4
 8018686:	2100      	movs	r1, #0
 8018688:	2001      	movs	r0, #1
 801868a:	f002 fbeb 	bl	801ae64 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801868e:	2300      	movs	r3, #0
 8018690:	2200      	movs	r2, #0
 8018692:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018696:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801869a:	f002 fb1b 	bl	801acd4 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801869e:	f000 fe99 	bl	80193d4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80186a2:	2300      	movs	r3, #0
 80186a4:	9300      	str	r3, [sp, #0]
 80186a6:	4b10      	ldr	r3, [pc, #64]	@ (80186e8 <RadioInit+0xa8>)
 80186a8:	2200      	movs	r2, #0
 80186aa:	f04f 31ff 	mov.w	r1, #4294967295
 80186ae:	480f      	ldr	r0, [pc, #60]	@ (80186ec <RadioInit+0xac>)
 80186b0:	f003 ffe4 	bl	801c67c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80186b4:	2300      	movs	r3, #0
 80186b6:	9300      	str	r3, [sp, #0]
 80186b8:	4b0d      	ldr	r3, [pc, #52]	@ (80186f0 <RadioInit+0xb0>)
 80186ba:	2200      	movs	r2, #0
 80186bc:	f04f 31ff 	mov.w	r1, #4294967295
 80186c0:	480c      	ldr	r0, [pc, #48]	@ (80186f4 <RadioInit+0xb4>)
 80186c2:	f003 ffdb 	bl	801c67c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80186c6:	4809      	ldr	r0, [pc, #36]	@ (80186ec <RadioInit+0xac>)
 80186c8:	f004 f87c 	bl	801c7c4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80186cc:	4809      	ldr	r0, [pc, #36]	@ (80186f4 <RadioInit+0xb4>)
 80186ce:	f004 f879 	bl	801c7c4 <UTIL_TIMER_Stop>
}
 80186d2:	bf00      	nop
 80186d4:	3708      	adds	r7, #8
 80186d6:	46bd      	mov	sp, r7
 80186d8:	bd80      	pop	{r7, pc}
 80186da:	bf00      	nop
 80186dc:	20001d24 	.word	0x20001d24
 80186e0:	20001d28 	.word	0x20001d28
 80186e4:	080197c9 	.word	0x080197c9
 80186e8:	08019751 	.word	0x08019751
 80186ec:	20001d84 	.word	0x20001d84
 80186f0:	08019765 	.word	0x08019765
 80186f4:	20001d9c 	.word	0x20001d9c

080186f8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80186fc:	f001 ffc4 	bl	801a688 <SUBGRF_GetOperatingMode>
 8018700:	4603      	mov	r3, r0
 8018702:	2b07      	cmp	r3, #7
 8018704:	d00a      	beq.n	801871c <RadioGetStatus+0x24>
 8018706:	2b07      	cmp	r3, #7
 8018708:	dc0a      	bgt.n	8018720 <RadioGetStatus+0x28>
 801870a:	2b04      	cmp	r3, #4
 801870c:	d002      	beq.n	8018714 <RadioGetStatus+0x1c>
 801870e:	2b05      	cmp	r3, #5
 8018710:	d002      	beq.n	8018718 <RadioGetStatus+0x20>
 8018712:	e005      	b.n	8018720 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8018714:	2302      	movs	r3, #2
 8018716:	e004      	b.n	8018722 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018718:	2301      	movs	r3, #1
 801871a:	e002      	b.n	8018722 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801871c:	2303      	movs	r3, #3
 801871e:	e000      	b.n	8018722 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8018720:	2300      	movs	r3, #0
    }
}
 8018722:	4618      	mov	r0, r3
 8018724:	bd80      	pop	{r7, pc}
	...

08018728 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b082      	sub	sp, #8
 801872c:	af00      	add	r7, sp, #0
 801872e:	4603      	mov	r3, r0
 8018730:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8018732:	4a2a      	ldr	r2, [pc, #168]	@ (80187dc <RadioSetModem+0xb4>)
 8018734:	79fb      	ldrb	r3, [r7, #7]
 8018736:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018738:	79fb      	ldrb	r3, [r7, #7]
 801873a:	4618      	mov	r0, r3
 801873c:	f003 f9b7 	bl	801baae <RFW_SetRadioModem>
    switch( modem )
 8018740:	79fb      	ldrb	r3, [r7, #7]
 8018742:	2b05      	cmp	r3, #5
 8018744:	d80e      	bhi.n	8018764 <RadioSetModem+0x3c>
 8018746:	a201      	add	r2, pc, #4	@ (adr r2, 801874c <RadioSetModem+0x24>)
 8018748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801874c:	08018773 	.word	0x08018773
 8018750:	08018781 	.word	0x08018781
 8018754:	08018765 	.word	0x08018765
 8018758:	080187a7 	.word	0x080187a7
 801875c:	080187b5 	.word	0x080187b5
 8018760:	080187c3 	.word	0x080187c3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018764:	2003      	movs	r0, #3
 8018766:	f002 fb57 	bl	801ae18 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801876a:	4b1c      	ldr	r3, [pc, #112]	@ (80187dc <RadioSetModem+0xb4>)
 801876c:	2200      	movs	r2, #0
 801876e:	735a      	strb	r2, [r3, #13]
        break;
 8018770:	e02f      	b.n	80187d2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018772:	2000      	movs	r0, #0
 8018774:	f002 fb50 	bl	801ae18 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018778:	4b18      	ldr	r3, [pc, #96]	@ (80187dc <RadioSetModem+0xb4>)
 801877a:	2200      	movs	r2, #0
 801877c:	735a      	strb	r2, [r3, #13]
        break;
 801877e:	e028      	b.n	80187d2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018780:	2001      	movs	r0, #1
 8018782:	f002 fb49 	bl	801ae18 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018786:	4b15      	ldr	r3, [pc, #84]	@ (80187dc <RadioSetModem+0xb4>)
 8018788:	7b5a      	ldrb	r2, [r3, #13]
 801878a:	4b14      	ldr	r3, [pc, #80]	@ (80187dc <RadioSetModem+0xb4>)
 801878c:	7b1b      	ldrb	r3, [r3, #12]
 801878e:	429a      	cmp	r2, r3
 8018790:	d01e      	beq.n	80187d0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8018792:	4b12      	ldr	r3, [pc, #72]	@ (80187dc <RadioSetModem+0xb4>)
 8018794:	7b1a      	ldrb	r2, [r3, #12]
 8018796:	4b11      	ldr	r3, [pc, #68]	@ (80187dc <RadioSetModem+0xb4>)
 8018798:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801879a:	4b10      	ldr	r3, [pc, #64]	@ (80187dc <RadioSetModem+0xb4>)
 801879c:	7b5b      	ldrb	r3, [r3, #13]
 801879e:	4618      	mov	r0, r3
 80187a0:	f000 ffa0 	bl	80196e4 <RadioSetPublicNetwork>
        }
        break;
 80187a4:	e014      	b.n	80187d0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80187a6:	2002      	movs	r0, #2
 80187a8:	f002 fb36 	bl	801ae18 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80187ac:	4b0b      	ldr	r3, [pc, #44]	@ (80187dc <RadioSetModem+0xb4>)
 80187ae:	2200      	movs	r2, #0
 80187b0:	735a      	strb	r2, [r3, #13]
        break;
 80187b2:	e00e      	b.n	80187d2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80187b4:	2002      	movs	r0, #2
 80187b6:	f002 fb2f 	bl	801ae18 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80187ba:	4b08      	ldr	r3, [pc, #32]	@ (80187dc <RadioSetModem+0xb4>)
 80187bc:	2200      	movs	r2, #0
 80187be:	735a      	strb	r2, [r3, #13]
        break;
 80187c0:	e007      	b.n	80187d2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80187c2:	2000      	movs	r0, #0
 80187c4:	f002 fb28 	bl	801ae18 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80187c8:	4b04      	ldr	r3, [pc, #16]	@ (80187dc <RadioSetModem+0xb4>)
 80187ca:	2200      	movs	r2, #0
 80187cc:	735a      	strb	r2, [r3, #13]
        break;
 80187ce:	e000      	b.n	80187d2 <RadioSetModem+0xaa>
        break;
 80187d0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80187d2:	bf00      	nop
 80187d4:	3708      	adds	r7, #8
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bd80      	pop	{r7, pc}
 80187da:	bf00      	nop
 80187dc:	20001d28 	.word	0x20001d28

080187e0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b082      	sub	sp, #8
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80187e8:	6878      	ldr	r0, [r7, #4]
 80187ea:	f002 facf 	bl	801ad8c <SUBGRF_SetRfFrequency>
}
 80187ee:	bf00      	nop
 80187f0:	3708      	adds	r7, #8
 80187f2:	46bd      	mov	sp, r7
 80187f4:	bd80      	pop	{r7, pc}

080187f6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80187f6:	b580      	push	{r7, lr}
 80187f8:	b090      	sub	sp, #64	@ 0x40
 80187fa:	af0a      	add	r7, sp, #40	@ 0x28
 80187fc:	60f8      	str	r0, [r7, #12]
 80187fe:	60b9      	str	r1, [r7, #8]
 8018800:	603b      	str	r3, [r7, #0]
 8018802:	4613      	mov	r3, r2
 8018804:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8018806:	2301      	movs	r3, #1
 8018808:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801880a:	2300      	movs	r3, #0
 801880c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801880e:	2300      	movs	r3, #0
 8018810:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8018812:	f000 fdf2 	bl	80193fa <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8018816:	2000      	movs	r0, #0
 8018818:	f7ff ff86 	bl	8018728 <RadioSetModem>

    RadioSetChannel( freq );
 801881c:	68f8      	ldr	r0, [r7, #12]
 801881e:	f7ff ffdf 	bl	80187e0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8018822:	2301      	movs	r3, #1
 8018824:	9309      	str	r3, [sp, #36]	@ 0x24
 8018826:	2300      	movs	r3, #0
 8018828:	9308      	str	r3, [sp, #32]
 801882a:	2300      	movs	r3, #0
 801882c:	9307      	str	r3, [sp, #28]
 801882e:	2300      	movs	r3, #0
 8018830:	9306      	str	r3, [sp, #24]
 8018832:	2300      	movs	r3, #0
 8018834:	9305      	str	r3, [sp, #20]
 8018836:	2300      	movs	r3, #0
 8018838:	9304      	str	r3, [sp, #16]
 801883a:	2300      	movs	r3, #0
 801883c:	9303      	str	r3, [sp, #12]
 801883e:	2300      	movs	r3, #0
 8018840:	9302      	str	r3, [sp, #8]
 8018842:	2303      	movs	r3, #3
 8018844:	9301      	str	r3, [sp, #4]
 8018846:	68bb      	ldr	r3, [r7, #8]
 8018848:	9300      	str	r3, [sp, #0]
 801884a:	2300      	movs	r3, #0
 801884c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8018850:	68b9      	ldr	r1, [r7, #8]
 8018852:	2000      	movs	r0, #0
 8018854:	f000 f83c 	bl	80188d0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018858:	2000      	movs	r0, #0
 801885a:	f000 fdd5 	bl	8019408 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801885e:	f000 ff6f 	bl	8019740 <RadioGetWakeupTime>
 8018862:	4603      	mov	r3, r0
 8018864:	4618      	mov	r0, r3
 8018866:	f7e9 fe57 	bl	8002518 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801886a:	f004 f8c5 	bl	801c9f8 <UTIL_TIMER_GetCurrentTime>
 801886e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018870:	e00d      	b.n	801888e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8018872:	2000      	movs	r0, #0
 8018874:	f000 feb6 	bl	80195e4 <RadioRssi>
 8018878:	4603      	mov	r3, r0
 801887a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801887c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018884:	429a      	cmp	r2, r3
 8018886:	dd02      	ble.n	801888e <RadioIsChannelFree+0x98>
        {
            status = false;
 8018888:	2300      	movs	r3, #0
 801888a:	75fb      	strb	r3, [r7, #23]
            break;
 801888c:	e006      	b.n	801889c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801888e:	6938      	ldr	r0, [r7, #16]
 8018890:	f004 f8c4 	bl	801ca1c <UTIL_TIMER_GetElapsedTime>
 8018894:	4602      	mov	r2, r0
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	4293      	cmp	r3, r2
 801889a:	d8ea      	bhi.n	8018872 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801889c:	f000 fdad 	bl	80193fa <RadioStandby>

    return status;
 80188a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80188a2:	4618      	mov	r0, r3
 80188a4:	3718      	adds	r7, #24
 80188a6:	46bd      	mov	sp, r7
 80188a8:	bd80      	pop	{r7, pc}

080188aa <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80188aa:	b580      	push	{r7, lr}
 80188ac:	b082      	sub	sp, #8
 80188ae:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80188b0:	2300      	movs	r3, #0
 80188b2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80188b4:	2300      	movs	r3, #0
 80188b6:	2200      	movs	r2, #0
 80188b8:	2100      	movs	r1, #0
 80188ba:	2000      	movs	r0, #0
 80188bc:	f002 fa0a 	bl	801acd4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80188c0:	f001 ffb3 	bl	801a82a <SUBGRF_GetRandom>
 80188c4:	6078      	str	r0, [r7, #4]

    return rnd;
 80188c6:	687b      	ldr	r3, [r7, #4]
}
 80188c8:	4618      	mov	r0, r3
 80188ca:	3708      	adds	r7, #8
 80188cc:	46bd      	mov	sp, r7
 80188ce:	bd80      	pop	{r7, pc}

080188d0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b08a      	sub	sp, #40	@ 0x28
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	60b9      	str	r1, [r7, #8]
 80188d8:	607a      	str	r2, [r7, #4]
 80188da:	461a      	mov	r2, r3
 80188dc:	4603      	mov	r3, r0
 80188de:	73fb      	strb	r3, [r7, #15]
 80188e0:	4613      	mov	r3, r2
 80188e2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80188e4:	4ab9      	ldr	r2, [pc, #740]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 80188e6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80188ea:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80188ec:	f003 f89d 	bl	801ba2a <RFW_DeInit>
    if( rxContinuous == true )
 80188f0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d001      	beq.n	80188fc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80188f8:	2300      	movs	r3, #0
 80188fa:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 80188fc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018900:	2b00      	cmp	r3, #0
 8018902:	d004      	beq.n	801890e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8018904:	4ab2      	ldr	r2, [pc, #712]	@ (8018bd0 <RadioSetRxConfig+0x300>)
 8018906:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801890a:	7013      	strb	r3, [r2, #0]
 801890c:	e002      	b.n	8018914 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801890e:	4bb0      	ldr	r3, [pc, #704]	@ (8018bd0 <RadioSetRxConfig+0x300>)
 8018910:	22ff      	movs	r2, #255	@ 0xff
 8018912:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8018914:	7bfb      	ldrb	r3, [r7, #15]
 8018916:	2b05      	cmp	r3, #5
 8018918:	d009      	beq.n	801892e <RadioSetRxConfig+0x5e>
 801891a:	2b05      	cmp	r3, #5
 801891c:	f300 81d7 	bgt.w	8018cce <RadioSetRxConfig+0x3fe>
 8018920:	2b00      	cmp	r3, #0
 8018922:	f000 80bf 	beq.w	8018aa4 <RadioSetRxConfig+0x1d4>
 8018926:	2b01      	cmp	r3, #1
 8018928:	f000 8124 	beq.w	8018b74 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801892c:	e1cf      	b.n	8018cce <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801892e:	2001      	movs	r0, #1
 8018930:	f002 f8c2 	bl	801aab8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018934:	4ba5      	ldr	r3, [pc, #660]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018936:	2200      	movs	r2, #0
 8018938:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801893c:	4aa3      	ldr	r2, [pc, #652]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8018942:	4ba2      	ldr	r3, [pc, #648]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018944:	2209      	movs	r2, #9
 8018946:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801894a:	4ba0      	ldr	r3, [pc, #640]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 801894c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8018950:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018952:	68b8      	ldr	r0, [r7, #8]
 8018954:	f002 ff9c 	bl	801b890 <SUBGRF_GetFskBandwidthRegValue>
 8018958:	4603      	mov	r3, r0
 801895a:	461a      	mov	r2, r3
 801895c:	4b9b      	ldr	r3, [pc, #620]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 801895e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018962:	4b9a      	ldr	r3, [pc, #616]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018964:	2200      	movs	r2, #0
 8018966:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018968:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801896a:	00db      	lsls	r3, r3, #3
 801896c:	b29a      	uxth	r2, r3
 801896e:	4b97      	ldr	r3, [pc, #604]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018970:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8018972:	4b96      	ldr	r3, [pc, #600]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018974:	2200      	movs	r2, #0
 8018976:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018978:	4b94      	ldr	r3, [pc, #592]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 801897a:	2210      	movs	r2, #16
 801897c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801897e:	4b93      	ldr	r3, [pc, #588]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018980:	2200      	movs	r2, #0
 8018982:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018984:	4b91      	ldr	r3, [pc, #580]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018986:	2200      	movs	r2, #0
 8018988:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801898a:	4b91      	ldr	r3, [pc, #580]	@ (8018bd0 <RadioSetRxConfig+0x300>)
 801898c:	781a      	ldrb	r2, [r3, #0]
 801898e:	4b8f      	ldr	r3, [pc, #572]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018990:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018992:	4b8e      	ldr	r3, [pc, #568]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018994:	2201      	movs	r2, #1
 8018996:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018998:	4b8c      	ldr	r3, [pc, #560]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 801899a:	2200      	movs	r2, #0
 801899c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801899e:	2005      	movs	r0, #5
 80189a0:	f7ff fec2 	bl	8018728 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80189a4:	488b      	ldr	r0, [pc, #556]	@ (8018bd4 <RadioSetRxConfig+0x304>)
 80189a6:	f002 fb2b 	bl	801b000 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80189aa:	488b      	ldr	r0, [pc, #556]	@ (8018bd8 <RadioSetRxConfig+0x308>)
 80189ac:	f002 fbf6 	bl	801b19c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80189b0:	4a8a      	ldr	r2, [pc, #552]	@ (8018bdc <RadioSetRxConfig+0x30c>)
 80189b2:	f107 031c 	add.w	r3, r7, #28
 80189b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80189be:	f107 031c 	add.w	r3, r7, #28
 80189c2:	4618      	mov	r0, r3
 80189c4:	f001 feaf 	bl	801a726 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80189c8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80189cc:	f001 fefa 	bl	801a7c4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80189d0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80189d4:	f000 fe24 	bl	8019620 <RadioRead>
 80189d8:	4603      	mov	r3, r0
 80189da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 80189de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80189e2:	f023 0310 	bic.w	r3, r3, #16
 80189e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80189ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80189ee:	4619      	mov	r1, r3
 80189f0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80189f4:	f000 fe02 	bl	80195fc <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80189f8:	2104      	movs	r1, #4
 80189fa:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 80189fe:	f000 fdfd 	bl	80195fc <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8018a02:	f640 009b 	movw	r0, #2203	@ 0x89b
 8018a06:	f000 fe0b 	bl	8019620 <RadioRead>
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018a14:	f023 031c 	bic.w	r3, r3, #28
 8018a18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8018a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018a20:	f043 0308 	orr.w	r3, r3, #8
 8018a24:	b2db      	uxtb	r3, r3
 8018a26:	4619      	mov	r1, r3
 8018a28:	f640 009b 	movw	r0, #2203	@ 0x89b
 8018a2c:	f000 fde6 	bl	80195fc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8018a30:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8018a34:	f000 fdf4 	bl	8019620 <RadioRead>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018a42:	f023 0318 	bic.w	r3, r3, #24
 8018a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8018a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018a4e:	f043 0318 	orr.w	r3, r3, #24
 8018a52:	b2db      	uxtb	r3, r3
 8018a54:	4619      	mov	r1, r3
 8018a56:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8018a5a:	f000 fdcf 	bl	80195fc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8018a5e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8018a62:	f000 fddd 	bl	8019620 <RadioRead>
 8018a66:	4603      	mov	r3, r0
 8018a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8018a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8018a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018a7c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8018a80:	b2db      	uxtb	r3, r3
 8018a82:	4619      	mov	r1, r3
 8018a84:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8018a88:	f000 fdb8 	bl	80195fc <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018a8c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018a8e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018a92:	fb02 f303 	mul.w	r3, r2, r3
 8018a96:	461a      	mov	r2, r3
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018a9e:	4a4b      	ldr	r2, [pc, #300]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018aa0:	6093      	str	r3, [r2, #8]
            break;
 8018aa2:	e115      	b.n	8018cd0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018aa4:	2000      	movs	r0, #0
 8018aa6:	f002 f807 	bl	801aab8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018aaa:	4b48      	ldr	r3, [pc, #288]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018aac:	2200      	movs	r2, #0
 8018aae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018ab2:	4a46      	ldr	r2, [pc, #280]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018ab8:	4b44      	ldr	r3, [pc, #272]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018aba:	220b      	movs	r2, #11
 8018abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018ac0:	68b8      	ldr	r0, [r7, #8]
 8018ac2:	f002 fee5 	bl	801b890 <SUBGRF_GetFskBandwidthRegValue>
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	461a      	mov	r2, r3
 8018aca:	4b40      	ldr	r3, [pc, #256]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018ad6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018ad8:	00db      	lsls	r3, r3, #3
 8018ada:	b29a      	uxth	r2, r3
 8018adc:	4b3b      	ldr	r3, [pc, #236]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018ade:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018ae2:	2204      	movs	r2, #4
 8018ae4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8018ae6:	4b39      	ldr	r3, [pc, #228]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018ae8:	2218      	movs	r2, #24
 8018aea:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018aec:	4b37      	ldr	r3, [pc, #220]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018aee:	2200      	movs	r2, #0
 8018af0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018af2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018af6:	f083 0301 	eor.w	r3, r3, #1
 8018afa:	b2db      	uxtb	r3, r3
 8018afc:	461a      	mov	r2, r3
 8018afe:	4b33      	ldr	r3, [pc, #204]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018b00:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018b02:	4b33      	ldr	r3, [pc, #204]	@ (8018bd0 <RadioSetRxConfig+0x300>)
 8018b04:	781a      	ldrb	r2, [r3, #0]
 8018b06:	4b31      	ldr	r3, [pc, #196]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018b08:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8018b0a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d003      	beq.n	8018b1a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018b12:	4b2e      	ldr	r3, [pc, #184]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018b14:	22f2      	movs	r2, #242	@ 0xf2
 8018b16:	75da      	strb	r2, [r3, #23]
 8018b18:	e002      	b.n	8018b20 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018b1c:	2201      	movs	r2, #1
 8018b1e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018b20:	4b2a      	ldr	r3, [pc, #168]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018b22:	2201      	movs	r2, #1
 8018b24:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018b26:	f000 fc68 	bl	80193fa <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8018b2a:	2000      	movs	r0, #0
 8018b2c:	f7ff fdfc 	bl	8018728 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018b30:	4828      	ldr	r0, [pc, #160]	@ (8018bd4 <RadioSetRxConfig+0x304>)
 8018b32:	f002 fa65 	bl	801b000 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018b36:	4828      	ldr	r0, [pc, #160]	@ (8018bd8 <RadioSetRxConfig+0x308>)
 8018b38:	f002 fb30 	bl	801b19c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018b3c:	4a28      	ldr	r2, [pc, #160]	@ (8018be0 <RadioSetRxConfig+0x310>)
 8018b3e:	f107 0314 	add.w	r3, r7, #20
 8018b42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b46:	e883 0003 	stmia.w	r3, {r0, r1}
 8018b4a:	f107 0314 	add.w	r3, r7, #20
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f001 fde9 	bl	801a726 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018b54:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018b58:	f001 fe34 	bl	801a7c4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018b5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018b5e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018b62:	fb02 f303 	mul.w	r3, r2, r3
 8018b66:	461a      	mov	r2, r3
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b6e:	4a17      	ldr	r2, [pc, #92]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018b70:	6093      	str	r3, [r2, #8]
            break;
 8018b72:	e0ad      	b.n	8018cd0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018b74:	2000      	movs	r0, #0
 8018b76:	f001 ff9f 	bl	801aab8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018b7a:	4b14      	ldr	r3, [pc, #80]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018b7c:	2201      	movs	r2, #1
 8018b7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	b2da      	uxtb	r2, r3
 8018b86:	4b11      	ldr	r3, [pc, #68]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018b88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8018b8c:	4a15      	ldr	r2, [pc, #84]	@ (8018be4 <RadioSetRxConfig+0x314>)
 8018b8e:	68bb      	ldr	r3, [r7, #8]
 8018b90:	4413      	add	r3, r2
 8018b92:	781a      	ldrb	r2, [r3, #0]
 8018b94:	4b0d      	ldr	r3, [pc, #52]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8018b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018b9c:	7bbb      	ldrb	r3, [r7, #14]
 8018b9e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d105      	bne.n	8018bb4 <RadioSetRxConfig+0x2e4>
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	2b0b      	cmp	r3, #11
 8018bac:	d008      	beq.n	8018bc0 <RadioSetRxConfig+0x2f0>
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	2b0c      	cmp	r3, #12
 8018bb2:	d005      	beq.n	8018bc0 <RadioSetRxConfig+0x2f0>
 8018bb4:	68bb      	ldr	r3, [r7, #8]
 8018bb6:	2b01      	cmp	r3, #1
 8018bb8:	d116      	bne.n	8018be8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	2b0c      	cmp	r3, #12
 8018bbe:	d113      	bne.n	8018be8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018bc0:	4b02      	ldr	r3, [pc, #8]	@ (8018bcc <RadioSetRxConfig+0x2fc>)
 8018bc2:	2201      	movs	r2, #1
 8018bc4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018bc8:	e012      	b.n	8018bf0 <RadioSetRxConfig+0x320>
 8018bca:	bf00      	nop
 8018bcc:	20001d28 	.word	0x20001d28
 8018bd0:	20000134 	.word	0x20000134
 8018bd4:	20001d60 	.word	0x20001d60
 8018bd8:	20001d36 	.word	0x20001d36
 8018bdc:	0801da74 	.word	0x0801da74
 8018be0:	0801da7c 	.word	0x0801da7c
 8018be4:	0801e0d0 	.word	0x0801e0d0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018be8:	4b3b      	ldr	r3, [pc, #236]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018bea:	2200      	movs	r2, #0
 8018bec:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018bf0:	4b39      	ldr	r3, [pc, #228]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018bf2:	2201      	movs	r2, #1
 8018bf4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018bf6:	4b38      	ldr	r3, [pc, #224]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018bfc:	2b05      	cmp	r3, #5
 8018bfe:	d004      	beq.n	8018c0a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018c00:	4b35      	ldr	r3, [pc, #212]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018c02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018c06:	2b06      	cmp	r3, #6
 8018c08:	d10a      	bne.n	8018c20 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8018c0a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018c0c:	2b0b      	cmp	r3, #11
 8018c0e:	d803      	bhi.n	8018c18 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018c10:	4b31      	ldr	r3, [pc, #196]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018c12:	220c      	movs	r2, #12
 8018c14:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018c16:	e006      	b.n	8018c26 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018c18:	4a2f      	ldr	r2, [pc, #188]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018c1a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018c1c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018c1e:	e002      	b.n	8018c26 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018c20:	4a2d      	ldr	r2, [pc, #180]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018c22:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018c24:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018c26:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018c2c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8018cdc <RadioSetRxConfig+0x40c>)
 8018c30:	781a      	ldrb	r2, [r3, #0]
 8018c32:	4b29      	ldr	r3, [pc, #164]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018c34:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018c36:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8018c3a:	4b27      	ldr	r3, [pc, #156]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018c3c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018c40:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8018c44:	4b24      	ldr	r3, [pc, #144]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018c46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018c4a:	f000 fbd6 	bl	80193fa <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018c4e:	2001      	movs	r0, #1
 8018c50:	f7ff fd6a 	bl	8018728 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018c54:	4822      	ldr	r0, [pc, #136]	@ (8018ce0 <RadioSetRxConfig+0x410>)
 8018c56:	f002 f9d3 	bl	801b000 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018c5a:	4822      	ldr	r0, [pc, #136]	@ (8018ce4 <RadioSetRxConfig+0x414>)
 8018c5c:	f002 fa9e 	bl	801b19c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018c60:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018c62:	b2db      	uxtb	r3, r3
 8018c64:	4618      	mov	r0, r3
 8018c66:	f001 ff36 	bl	801aad6 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8018c6a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8018c6e:	f002 fbfd 	bl	801b46c <SUBGRF_ReadRegister>
 8018c72:	4603      	mov	r3, r0
 8018c74:	f003 0301 	and.w	r3, r3, #1
 8018c78:	b2db      	uxtb	r3, r3
 8018c7a:	4619      	mov	r1, r3
 8018c7c:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8018c80:	f002 fbd2 	bl	801b428 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018c84:	4b14      	ldr	r3, [pc, #80]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018c86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018c8a:	2b01      	cmp	r3, #1
 8018c8c:	d10d      	bne.n	8018caa <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018c8e:	f240 7036 	movw	r0, #1846	@ 0x736
 8018c92:	f002 fbeb 	bl	801b46c <SUBGRF_ReadRegister>
 8018c96:	4603      	mov	r3, r0
 8018c98:	f023 0304 	bic.w	r3, r3, #4
 8018c9c:	b2db      	uxtb	r3, r3
 8018c9e:	4619      	mov	r1, r3
 8018ca0:	f240 7036 	movw	r0, #1846	@ 0x736
 8018ca4:	f002 fbc0 	bl	801b428 <SUBGRF_WriteRegister>
 8018ca8:	e00c      	b.n	8018cc4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018caa:	f240 7036 	movw	r0, #1846	@ 0x736
 8018cae:	f002 fbdd 	bl	801b46c <SUBGRF_ReadRegister>
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	f043 0304 	orr.w	r3, r3, #4
 8018cb8:	b2db      	uxtb	r3, r3
 8018cba:	4619      	mov	r1, r3
 8018cbc:	f240 7036 	movw	r0, #1846	@ 0x736
 8018cc0:	f002 fbb2 	bl	801b428 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8018cc4:	4b04      	ldr	r3, [pc, #16]	@ (8018cd8 <RadioSetRxConfig+0x408>)
 8018cc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018cca:	609a      	str	r2, [r3, #8]
            break;
 8018ccc:	e000      	b.n	8018cd0 <RadioSetRxConfig+0x400>
            break;
 8018cce:	bf00      	nop
    }
}
 8018cd0:	bf00      	nop
 8018cd2:	3728      	adds	r7, #40	@ 0x28
 8018cd4:	46bd      	mov	sp, r7
 8018cd6:	bd80      	pop	{r7, pc}
 8018cd8:	20001d28 	.word	0x20001d28
 8018cdc:	20000134 	.word	0x20000134
 8018ce0:	20001d60 	.word	0x20001d60
 8018ce4:	20001d36 	.word	0x20001d36

08018ce8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b086      	sub	sp, #24
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	60ba      	str	r2, [r7, #8]
 8018cf0:	607b      	str	r3, [r7, #4]
 8018cf2:	4603      	mov	r3, r0
 8018cf4:	73fb      	strb	r3, [r7, #15]
 8018cf6:	460b      	mov	r3, r1
 8018cf8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8018cfa:	f002 fe96 	bl	801ba2a <RFW_DeInit>
    switch( modem )
 8018cfe:	7bfb      	ldrb	r3, [r7, #15]
 8018d00:	2b04      	cmp	r3, #4
 8018d02:	f000 80c7 	beq.w	8018e94 <RadioSetTxConfig+0x1ac>
 8018d06:	2b04      	cmp	r3, #4
 8018d08:	f300 80d6 	bgt.w	8018eb8 <RadioSetTxConfig+0x1d0>
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d002      	beq.n	8018d16 <RadioSetTxConfig+0x2e>
 8018d10:	2b01      	cmp	r3, #1
 8018d12:	d059      	beq.n	8018dc8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018d14:	e0d0      	b.n	8018eb8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018d16:	4b77      	ldr	r3, [pc, #476]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d18:	2200      	movs	r2, #0
 8018d1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018d1e:	4a75      	ldr	r2, [pc, #468]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d20:	6a3b      	ldr	r3, [r7, #32]
 8018d22:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018d24:	4b73      	ldr	r3, [pc, #460]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d26:	220b      	movs	r2, #11
 8018d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018d2c:	6878      	ldr	r0, [r7, #4]
 8018d2e:	f002 fdaf 	bl	801b890 <SUBGRF_GetFskBandwidthRegValue>
 8018d32:	4603      	mov	r3, r0
 8018d34:	461a      	mov	r2, r3
 8018d36:	4b6f      	ldr	r3, [pc, #444]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018d3c:	4a6d      	ldr	r2, [pc, #436]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d3e:	68bb      	ldr	r3, [r7, #8]
 8018d40:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018d42:	4b6c      	ldr	r3, [pc, #432]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d44:	2200      	movs	r2, #0
 8018d46:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018d48:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018d4a:	00db      	lsls	r3, r3, #3
 8018d4c:	b29a      	uxth	r2, r3
 8018d4e:	4b69      	ldr	r3, [pc, #420]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d50:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018d52:	4b68      	ldr	r3, [pc, #416]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d54:	2204      	movs	r2, #4
 8018d56:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8018d58:	4b66      	ldr	r3, [pc, #408]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d5a:	2218      	movs	r2, #24
 8018d5c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018d5e:	4b65      	ldr	r3, [pc, #404]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d60:	2200      	movs	r2, #0
 8018d62:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018d64:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018d68:	f083 0301 	eor.w	r3, r3, #1
 8018d6c:	b2db      	uxtb	r3, r3
 8018d6e:	461a      	mov	r2, r3
 8018d70:	4b60      	ldr	r3, [pc, #384]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d72:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018d74:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d003      	beq.n	8018d84 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018d7c:	4b5d      	ldr	r3, [pc, #372]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d7e:	22f2      	movs	r2, #242	@ 0xf2
 8018d80:	75da      	strb	r2, [r3, #23]
 8018d82:	e002      	b.n	8018d8a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018d84:	4b5b      	ldr	r3, [pc, #364]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d86:	2201      	movs	r2, #1
 8018d88:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018d8a:	4b5a      	ldr	r3, [pc, #360]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018d8c:	2201      	movs	r2, #1
 8018d8e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018d90:	f000 fb33 	bl	80193fa <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018d94:	2000      	movs	r0, #0
 8018d96:	f7ff fcc7 	bl	8018728 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018d9a:	4857      	ldr	r0, [pc, #348]	@ (8018ef8 <RadioSetTxConfig+0x210>)
 8018d9c:	f002 f930 	bl	801b000 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018da0:	4856      	ldr	r0, [pc, #344]	@ (8018efc <RadioSetTxConfig+0x214>)
 8018da2:	f002 f9fb 	bl	801b19c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018da6:	4a56      	ldr	r2, [pc, #344]	@ (8018f00 <RadioSetTxConfig+0x218>)
 8018da8:	f107 0310 	add.w	r3, r7, #16
 8018dac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018db0:	e883 0003 	stmia.w	r3, {r0, r1}
 8018db4:	f107 0310 	add.w	r3, r7, #16
 8018db8:	4618      	mov	r0, r3
 8018dba:	f001 fcb4 	bl	801a726 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018dbe:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018dc2:	f001 fcff 	bl	801a7c4 <SUBGRF_SetWhiteningSeed>
            break;
 8018dc6:	e078      	b.n	8018eba <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018dc8:	4b4a      	ldr	r3, [pc, #296]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018dca:	2201      	movs	r2, #1
 8018dcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018dd0:	6a3b      	ldr	r3, [r7, #32]
 8018dd2:	b2da      	uxtb	r2, r3
 8018dd4:	4b47      	ldr	r3, [pc, #284]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8018dda:	4a4a      	ldr	r2, [pc, #296]	@ (8018f04 <RadioSetTxConfig+0x21c>)
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	4413      	add	r3, r2
 8018de0:	781a      	ldrb	r2, [r3, #0]
 8018de2:	4b44      	ldr	r3, [pc, #272]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8018de8:	4a42      	ldr	r2, [pc, #264]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018dea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018dee:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d105      	bne.n	8018e04 <RadioSetTxConfig+0x11c>
 8018df8:	6a3b      	ldr	r3, [r7, #32]
 8018dfa:	2b0b      	cmp	r3, #11
 8018dfc:	d008      	beq.n	8018e10 <RadioSetTxConfig+0x128>
 8018dfe:	6a3b      	ldr	r3, [r7, #32]
 8018e00:	2b0c      	cmp	r3, #12
 8018e02:	d005      	beq.n	8018e10 <RadioSetTxConfig+0x128>
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	2b01      	cmp	r3, #1
 8018e08:	d107      	bne.n	8018e1a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018e0a:	6a3b      	ldr	r3, [r7, #32]
 8018e0c:	2b0c      	cmp	r3, #12
 8018e0e:	d104      	bne.n	8018e1a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018e10:	4b38      	ldr	r3, [pc, #224]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e12:	2201      	movs	r2, #1
 8018e14:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018e18:	e003      	b.n	8018e22 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018e1a:	4b36      	ldr	r3, [pc, #216]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e1c:	2200      	movs	r2, #0
 8018e1e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018e22:	4b34      	ldr	r3, [pc, #208]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e24:	2201      	movs	r2, #1
 8018e26:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018e28:	4b32      	ldr	r3, [pc, #200]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018e2e:	2b05      	cmp	r3, #5
 8018e30:	d004      	beq.n	8018e3c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018e32:	4b30      	ldr	r3, [pc, #192]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018e38:	2b06      	cmp	r3, #6
 8018e3a:	d10a      	bne.n	8018e52 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018e3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018e3e:	2b0b      	cmp	r3, #11
 8018e40:	d803      	bhi.n	8018e4a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018e42:	4b2c      	ldr	r3, [pc, #176]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e44:	220c      	movs	r2, #12
 8018e46:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018e48:	e006      	b.n	8018e58 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e4c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018e4e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018e50:	e002      	b.n	8018e58 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018e52:	4a28      	ldr	r2, [pc, #160]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018e56:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018e58:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8018e5c:	4b25      	ldr	r3, [pc, #148]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e5e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018e60:	4b29      	ldr	r3, [pc, #164]	@ (8018f08 <RadioSetTxConfig+0x220>)
 8018e62:	781a      	ldrb	r2, [r3, #0]
 8018e64:	4b23      	ldr	r3, [pc, #140]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e66:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018e68:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018e6c:	4b21      	ldr	r3, [pc, #132]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e6e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018e72:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018e76:	4b1f      	ldr	r3, [pc, #124]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018e7c:	f000 fabd 	bl	80193fa <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018e80:	2001      	movs	r0, #1
 8018e82:	f7ff fc51 	bl	8018728 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018e86:	481c      	ldr	r0, [pc, #112]	@ (8018ef8 <RadioSetTxConfig+0x210>)
 8018e88:	f002 f8ba 	bl	801b000 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018e8c:	481b      	ldr	r0, [pc, #108]	@ (8018efc <RadioSetTxConfig+0x214>)
 8018e8e:	f002 f985 	bl	801b19c <SUBGRF_SetPacketParams>
            break;
 8018e92:	e012      	b.n	8018eba <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018e94:	2004      	movs	r0, #4
 8018e96:	f7ff fc47 	bl	8018728 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018e9a:	4b16      	ldr	r3, [pc, #88]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018e9c:	2202      	movs	r2, #2
 8018e9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018ea2:	4a14      	ldr	r2, [pc, #80]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018ea4:	6a3b      	ldr	r3, [r7, #32]
 8018ea6:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018ea8:	4b12      	ldr	r3, [pc, #72]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018eaa:	2216      	movs	r2, #22
 8018eac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018eb0:	4811      	ldr	r0, [pc, #68]	@ (8018ef8 <RadioSetTxConfig+0x210>)
 8018eb2:	f002 f8a5 	bl	801b000 <SUBGRF_SetModulationParams>
            break;
 8018eb6:	e000      	b.n	8018eba <RadioSetTxConfig+0x1d2>
            break;
 8018eb8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018eba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f002 fbe8 	bl	801b694 <SUBGRF_SetRfTxPower>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	461a      	mov	r2, r3
 8018ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018eca:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018ece:	210e      	movs	r1, #14
 8018ed0:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018ed4:	f002 faa8 	bl	801b428 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018ed8:	4b06      	ldr	r3, [pc, #24]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018eda:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018ede:	4618      	mov	r0, r3
 8018ee0:	f002 fdb7 	bl	801ba52 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018ee4:	4a03      	ldr	r2, [pc, #12]	@ (8018ef4 <RadioSetTxConfig+0x20c>)
 8018ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ee8:	6053      	str	r3, [r2, #4]
}
 8018eea:	bf00      	nop
 8018eec:	3718      	adds	r7, #24
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bd80      	pop	{r7, pc}
 8018ef2:	bf00      	nop
 8018ef4:	20001d28 	.word	0x20001d28
 8018ef8:	20001d60 	.word	0x20001d60
 8018efc:	20001d36 	.word	0x20001d36
 8018f00:	0801da7c 	.word	0x0801da7c
 8018f04:	0801e0d0 	.word	0x0801e0d0
 8018f08:	20000134 	.word	0x20000134

08018f0c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018f0c:	b480      	push	{r7}
 8018f0e:	b083      	sub	sp, #12
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	6078      	str	r0, [r7, #4]
    return true;
 8018f14:	2301      	movs	r3, #1
}
 8018f16:	4618      	mov	r0, r3
 8018f18:	370c      	adds	r7, #12
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bc80      	pop	{r7}
 8018f1e:	4770      	bx	lr

08018f20 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018f20:	b480      	push	{r7}
 8018f22:	b085      	sub	sp, #20
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	4603      	mov	r3, r0
 8018f28:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018f2e:	79fb      	ldrb	r3, [r7, #7]
 8018f30:	2b0a      	cmp	r3, #10
 8018f32:	d83e      	bhi.n	8018fb2 <RadioGetLoRaBandwidthInHz+0x92>
 8018f34:	a201      	add	r2, pc, #4	@ (adr r2, 8018f3c <RadioGetLoRaBandwidthInHz+0x1c>)
 8018f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f3a:	bf00      	nop
 8018f3c:	08018f69 	.word	0x08018f69
 8018f40:	08018f79 	.word	0x08018f79
 8018f44:	08018f89 	.word	0x08018f89
 8018f48:	08018f99 	.word	0x08018f99
 8018f4c:	08018fa1 	.word	0x08018fa1
 8018f50:	08018fa7 	.word	0x08018fa7
 8018f54:	08018fad 	.word	0x08018fad
 8018f58:	08018fb3 	.word	0x08018fb3
 8018f5c:	08018f71 	.word	0x08018f71
 8018f60:	08018f81 	.word	0x08018f81
 8018f64:	08018f91 	.word	0x08018f91
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8018f68:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8018f6c:	60fb      	str	r3, [r7, #12]
        break;
 8018f6e:	e020      	b.n	8018fb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018f70:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8018f74:	60fb      	str	r3, [r7, #12]
        break;
 8018f76:	e01c      	b.n	8018fb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018f78:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8018f7c:	60fb      	str	r3, [r7, #12]
        break;
 8018f7e:	e018      	b.n	8018fb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018f80:	f245 1361 	movw	r3, #20833	@ 0x5161
 8018f84:	60fb      	str	r3, [r7, #12]
        break;
 8018f86:	e014      	b.n	8018fb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018f88:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8018f8c:	60fb      	str	r3, [r7, #12]
        break;
 8018f8e:	e010      	b.n	8018fb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018f90:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8018f94:	60fb      	str	r3, [r7, #12]
        break;
 8018f96:	e00c      	b.n	8018fb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018f98:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8018f9c:	60fb      	str	r3, [r7, #12]
        break;
 8018f9e:	e008      	b.n	8018fb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018fa0:	4b07      	ldr	r3, [pc, #28]	@ (8018fc0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8018fa2:	60fb      	str	r3, [r7, #12]
        break;
 8018fa4:	e005      	b.n	8018fb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8018fa6:	4b07      	ldr	r3, [pc, #28]	@ (8018fc4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8018fa8:	60fb      	str	r3, [r7, #12]
        break;
 8018faa:	e002      	b.n	8018fb2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018fac:	4b06      	ldr	r3, [pc, #24]	@ (8018fc8 <RadioGetLoRaBandwidthInHz+0xa8>)
 8018fae:	60fb      	str	r3, [r7, #12]
        break;
 8018fb0:	bf00      	nop
    }

    return bandwidthInHz;
 8018fb2:	68fb      	ldr	r3, [r7, #12]
}
 8018fb4:	4618      	mov	r0, r3
 8018fb6:	3714      	adds	r7, #20
 8018fb8:	46bd      	mov	sp, r7
 8018fba:	bc80      	pop	{r7}
 8018fbc:	4770      	bx	lr
 8018fbe:	bf00      	nop
 8018fc0:	0001e848 	.word	0x0001e848
 8018fc4:	0003d090 	.word	0x0003d090
 8018fc8:	0007a120 	.word	0x0007a120

08018fcc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018fcc:	b480      	push	{r7}
 8018fce:	b083      	sub	sp, #12
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	6078      	str	r0, [r7, #4]
 8018fd4:	4608      	mov	r0, r1
 8018fd6:	4611      	mov	r1, r2
 8018fd8:	461a      	mov	r2, r3
 8018fda:	4603      	mov	r3, r0
 8018fdc:	70fb      	strb	r3, [r7, #3]
 8018fde:	460b      	mov	r3, r1
 8018fe0:	803b      	strh	r3, [r7, #0]
 8018fe2:	4613      	mov	r3, r2
 8018fe4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8018fe6:	883b      	ldrh	r3, [r7, #0]
 8018fe8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018fea:	78ba      	ldrb	r2, [r7, #2]
 8018fec:	f082 0201 	eor.w	r2, r2, #1
 8018ff0:	b2d2      	uxtb	r2, r2
 8018ff2:	2a00      	cmp	r2, #0
 8018ff4:	d001      	beq.n	8018ffa <RadioGetGfskTimeOnAirNumerator+0x2e>
 8018ff6:	2208      	movs	r2, #8
 8018ff8:	e000      	b.n	8018ffc <RadioGetGfskTimeOnAirNumerator+0x30>
 8018ffa:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018ffc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018ffe:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8019002:	7c3b      	ldrb	r3, [r7, #16]
 8019004:	7d39      	ldrb	r1, [r7, #20]
 8019006:	2900      	cmp	r1, #0
 8019008:	d001      	beq.n	801900e <RadioGetGfskTimeOnAirNumerator+0x42>
 801900a:	2102      	movs	r1, #2
 801900c:	e000      	b.n	8019010 <RadioGetGfskTimeOnAirNumerator+0x44>
 801900e:	2100      	movs	r1, #0
 8019010:	440b      	add	r3, r1
 8019012:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019014:	4413      	add	r3, r2
}
 8019016:	4618      	mov	r0, r3
 8019018:	370c      	adds	r7, #12
 801901a:	46bd      	mov	sp, r7
 801901c:	bc80      	pop	{r7}
 801901e:	4770      	bx	lr

08019020 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019020:	b480      	push	{r7}
 8019022:	b08b      	sub	sp, #44	@ 0x2c
 8019024:	af00      	add	r7, sp, #0
 8019026:	60f8      	str	r0, [r7, #12]
 8019028:	60b9      	str	r1, [r7, #8]
 801902a:	4611      	mov	r1, r2
 801902c:	461a      	mov	r2, r3
 801902e:	460b      	mov	r3, r1
 8019030:	71fb      	strb	r3, [r7, #7]
 8019032:	4613      	mov	r3, r2
 8019034:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8019036:	79fb      	ldrb	r3, [r7, #7]
 8019038:	3304      	adds	r3, #4
 801903a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801903c:	2300      	movs	r3, #0
 801903e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8019042:	68bb      	ldr	r3, [r7, #8]
 8019044:	2b05      	cmp	r3, #5
 8019046:	d002      	beq.n	801904e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019048:	68bb      	ldr	r3, [r7, #8]
 801904a:	2b06      	cmp	r3, #6
 801904c:	d104      	bne.n	8019058 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801904e:	88bb      	ldrh	r3, [r7, #4]
 8019050:	2b0b      	cmp	r3, #11
 8019052:	d801      	bhi.n	8019058 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019054:	230c      	movs	r3, #12
 8019056:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d105      	bne.n	801906a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801905e:	68bb      	ldr	r3, [r7, #8]
 8019060:	2b0b      	cmp	r3, #11
 8019062:	d008      	beq.n	8019076 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	2b0c      	cmp	r3, #12
 8019068:	d005      	beq.n	8019076 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	2b01      	cmp	r3, #1
 801906e:	d105      	bne.n	801907c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019070:	68bb      	ldr	r3, [r7, #8]
 8019072:	2b0c      	cmp	r3, #12
 8019074:	d102      	bne.n	801907c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019076:	2301      	movs	r3, #1
 8019078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801907c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8019080:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8019082:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8019086:	2a00      	cmp	r2, #0
 8019088:	d001      	beq.n	801908e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801908a:	2210      	movs	r2, #16
 801908c:	e000      	b.n	8019090 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801908e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019090:	4413      	add	r3, r2
 8019092:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019094:	68bb      	ldr	r3, [r7, #8]
 8019096:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019098:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801909a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801909e:	2a00      	cmp	r2, #0
 80190a0:	d001      	beq.n	80190a6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80190a2:	2200      	movs	r2, #0
 80190a4:	e000      	b.n	80190a8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80190a6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80190a8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80190aa:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	2b06      	cmp	r3, #6
 80190b0:	d803      	bhi.n	80190ba <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80190b2:	68bb      	ldr	r3, [r7, #8]
 80190b4:	009b      	lsls	r3, r3, #2
 80190b6:	623b      	str	r3, [r7, #32]
 80190b8:	e00e      	b.n	80190d8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80190ba:	69fb      	ldr	r3, [r7, #28]
 80190bc:	3308      	adds	r3, #8
 80190be:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80190c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d004      	beq.n	80190d2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80190c8:	68bb      	ldr	r3, [r7, #8]
 80190ca:	3b02      	subs	r3, #2
 80190cc:	009b      	lsls	r3, r3, #2
 80190ce:	623b      	str	r3, [r7, #32]
 80190d0:	e002      	b.n	80190d8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80190d2:	68bb      	ldr	r3, [r7, #8]
 80190d4:	009b      	lsls	r3, r3, #2
 80190d6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80190d8:	69fb      	ldr	r3, [r7, #28]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	da01      	bge.n	80190e2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80190de:	2300      	movs	r3, #0
 80190e0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80190e2:	69fa      	ldr	r2, [r7, #28]
 80190e4:	6a3b      	ldr	r3, [r7, #32]
 80190e6:	4413      	add	r3, r2
 80190e8:	1e5a      	subs	r2, r3, #1
 80190ea:	6a3b      	ldr	r3, [r7, #32]
 80190ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80190f0:	697a      	ldr	r2, [r7, #20]
 80190f2:	fb03 f202 	mul.w	r2, r3, r2
 80190f6:	88bb      	ldrh	r3, [r7, #4]
 80190f8:	4413      	add	r3, r2
    int32_t intermediate =
 80190fa:	330c      	adds	r3, #12
 80190fc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80190fe:	68bb      	ldr	r3, [r7, #8]
 8019100:	2b06      	cmp	r3, #6
 8019102:	d802      	bhi.n	801910a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019104:	69bb      	ldr	r3, [r7, #24]
 8019106:	3302      	adds	r3, #2
 8019108:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801910a:	69bb      	ldr	r3, [r7, #24]
 801910c:	009b      	lsls	r3, r3, #2
 801910e:	1c5a      	adds	r2, r3, #1
 8019110:	68bb      	ldr	r3, [r7, #8]
 8019112:	3b02      	subs	r3, #2
 8019114:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019118:	4618      	mov	r0, r3
 801911a:	372c      	adds	r7, #44	@ 0x2c
 801911c:	46bd      	mov	sp, r7
 801911e:	bc80      	pop	{r7}
 8019120:	4770      	bx	lr
	...

08019124 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b08a      	sub	sp, #40	@ 0x28
 8019128:	af04      	add	r7, sp, #16
 801912a:	60b9      	str	r1, [r7, #8]
 801912c:	607a      	str	r2, [r7, #4]
 801912e:	461a      	mov	r2, r3
 8019130:	4603      	mov	r3, r0
 8019132:	73fb      	strb	r3, [r7, #15]
 8019134:	4613      	mov	r3, r2
 8019136:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019138:	2300      	movs	r3, #0
 801913a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801913c:	2301      	movs	r3, #1
 801913e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019140:	7bfb      	ldrb	r3, [r7, #15]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d002      	beq.n	801914c <RadioTimeOnAir+0x28>
 8019146:	2b01      	cmp	r3, #1
 8019148:	d017      	beq.n	801917a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801914a:	e035      	b.n	80191b8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801914c:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8019150:	8c3a      	ldrh	r2, [r7, #32]
 8019152:	7bb9      	ldrb	r1, [r7, #14]
 8019154:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019158:	9301      	str	r3, [sp, #4]
 801915a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801915e:	9300      	str	r3, [sp, #0]
 8019160:	4603      	mov	r3, r0
 8019162:	6878      	ldr	r0, [r7, #4]
 8019164:	f7ff ff32 	bl	8018fcc <RadioGetGfskTimeOnAirNumerator>
 8019168:	4603      	mov	r3, r0
 801916a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801916e:	fb02 f303 	mul.w	r3, r2, r3
 8019172:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	613b      	str	r3, [r7, #16]
        break;
 8019178:	e01e      	b.n	80191b8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801917a:	8c39      	ldrh	r1, [r7, #32]
 801917c:	7bba      	ldrb	r2, [r7, #14]
 801917e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019182:	9302      	str	r3, [sp, #8]
 8019184:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019188:	9301      	str	r3, [sp, #4]
 801918a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801918e:	9300      	str	r3, [sp, #0]
 8019190:	460b      	mov	r3, r1
 8019192:	6879      	ldr	r1, [r7, #4]
 8019194:	68b8      	ldr	r0, [r7, #8]
 8019196:	f7ff ff43 	bl	8019020 <RadioGetLoRaTimeOnAirNumerator>
 801919a:	4603      	mov	r3, r0
 801919c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80191a0:	fb02 f303 	mul.w	r3, r2, r3
 80191a4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80191a6:	4a0a      	ldr	r2, [pc, #40]	@ (80191d0 <RadioTimeOnAir+0xac>)
 80191a8:	68bb      	ldr	r3, [r7, #8]
 80191aa:	4413      	add	r3, r2
 80191ac:	781b      	ldrb	r3, [r3, #0]
 80191ae:	4618      	mov	r0, r3
 80191b0:	f7ff feb6 	bl	8018f20 <RadioGetLoRaBandwidthInHz>
 80191b4:	6138      	str	r0, [r7, #16]
        break;
 80191b6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80191b8:	697a      	ldr	r2, [r7, #20]
 80191ba:	693b      	ldr	r3, [r7, #16]
 80191bc:	4413      	add	r3, r2
 80191be:	1e5a      	subs	r2, r3, #1
 80191c0:	693b      	ldr	r3, [r7, #16]
 80191c2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80191c6:	4618      	mov	r0, r3
 80191c8:	3718      	adds	r7, #24
 80191ca:	46bd      	mov	sp, r7
 80191cc:	bd80      	pop	{r7, pc}
 80191ce:	bf00      	nop
 80191d0:	0801e0d0 	.word	0x0801e0d0

080191d4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80191d4:	b580      	push	{r7, lr}
 80191d6:	b084      	sub	sp, #16
 80191d8:	af00      	add	r7, sp, #0
 80191da:	6078      	str	r0, [r7, #4]
 80191dc:	460b      	mov	r3, r1
 80191de:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80191e0:	2300      	movs	r3, #0
 80191e2:	2200      	movs	r2, #0
 80191e4:	f240 2101 	movw	r1, #513	@ 0x201
 80191e8:	f240 2001 	movw	r0, #513	@ 0x201
 80191ec:	f001 fd72 	bl	801acd4 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80191f0:	4b73      	ldr	r3, [pc, #460]	@ (80193c0 <RadioSend+0x1ec>)
 80191f2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80191f6:	2101      	movs	r1, #1
 80191f8:	4618      	mov	r0, r3
 80191fa:	f002 fa23 	bl	801b644 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80191fe:	4b70      	ldr	r3, [pc, #448]	@ (80193c0 <RadioSend+0x1ec>)
 8019200:	781b      	ldrb	r3, [r3, #0]
 8019202:	2b01      	cmp	r3, #1
 8019204:	d112      	bne.n	801922c <RadioSend+0x58>
 8019206:	4b6e      	ldr	r3, [pc, #440]	@ (80193c0 <RadioSend+0x1ec>)
 8019208:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801920c:	2b06      	cmp	r3, #6
 801920e:	d10d      	bne.n	801922c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019210:	f640 0089 	movw	r0, #2185	@ 0x889
 8019214:	f002 f92a 	bl	801b46c <SUBGRF_ReadRegister>
 8019218:	4603      	mov	r3, r0
 801921a:	f023 0304 	bic.w	r3, r3, #4
 801921e:	b2db      	uxtb	r3, r3
 8019220:	4619      	mov	r1, r3
 8019222:	f640 0089 	movw	r0, #2185	@ 0x889
 8019226:	f002 f8ff 	bl	801b428 <SUBGRF_WriteRegister>
 801922a:	e00c      	b.n	8019246 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801922c:	f640 0089 	movw	r0, #2185	@ 0x889
 8019230:	f002 f91c 	bl	801b46c <SUBGRF_ReadRegister>
 8019234:	4603      	mov	r3, r0
 8019236:	f043 0304 	orr.w	r3, r3, #4
 801923a:	b2db      	uxtb	r3, r3
 801923c:	4619      	mov	r1, r3
 801923e:	f640 0089 	movw	r0, #2185	@ 0x889
 8019242:	f002 f8f1 	bl	801b428 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019246:	4b5e      	ldr	r3, [pc, #376]	@ (80193c0 <RadioSend+0x1ec>)
 8019248:	781b      	ldrb	r3, [r3, #0]
 801924a:	2b04      	cmp	r3, #4
 801924c:	f200 80a8 	bhi.w	80193a0 <RadioSend+0x1cc>
 8019250:	a201      	add	r2, pc, #4	@ (adr r2, 8019258 <RadioSend+0x84>)
 8019252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019256:	bf00      	nop
 8019258:	08019287 	.word	0x08019287
 801925c:	0801926d 	.word	0x0801926d
 8019260:	08019287 	.word	0x08019287
 8019264:	080192e9 	.word	0x080192e9
 8019268:	08019309 	.word	0x08019309
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801926c:	4a54      	ldr	r2, [pc, #336]	@ (80193c0 <RadioSend+0x1ec>)
 801926e:	78fb      	ldrb	r3, [r7, #3]
 8019270:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019272:	4854      	ldr	r0, [pc, #336]	@ (80193c4 <RadioSend+0x1f0>)
 8019274:	f001 ff92 	bl	801b19c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019278:	78fb      	ldrb	r3, [r7, #3]
 801927a:	2200      	movs	r2, #0
 801927c:	4619      	mov	r1, r3
 801927e:	6878      	ldr	r0, [r7, #4]
 8019280:	f001 fa3e 	bl	801a700 <SUBGRF_SendPayload>
            break;
 8019284:	e08d      	b.n	80193a2 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019286:	f002 fbd6 	bl	801ba36 <RFW_Is_Init>
 801928a:	4603      	mov	r3, r0
 801928c:	2b01      	cmp	r3, #1
 801928e:	d11e      	bne.n	80192ce <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019290:	f107 020d 	add.w	r2, r7, #13
 8019294:	78fb      	ldrb	r3, [r7, #3]
 8019296:	4619      	mov	r1, r3
 8019298:	6878      	ldr	r0, [r7, #4]
 801929a:	f002 fbe4 	bl	801ba66 <RFW_TransmitInit>
 801929e:	4603      	mov	r3, r0
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d10c      	bne.n	80192be <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80192a4:	7b7a      	ldrb	r2, [r7, #13]
 80192a6:	4b46      	ldr	r3, [pc, #280]	@ (80193c0 <RadioSend+0x1ec>)
 80192a8:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192aa:	4846      	ldr	r0, [pc, #280]	@ (80193c4 <RadioSend+0x1f0>)
 80192ac:	f001 ff76 	bl	801b19c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80192b0:	7b7b      	ldrb	r3, [r7, #13]
 80192b2:	2200      	movs	r2, #0
 80192b4:	4619      	mov	r1, r3
 80192b6:	6878      	ldr	r0, [r7, #4]
 80192b8:	f001 fa22 	bl	801a700 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80192bc:	e071      	b.n	80193a2 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80192be:	4b42      	ldr	r3, [pc, #264]	@ (80193c8 <RadioSend+0x1f4>)
 80192c0:	2201      	movs	r2, #1
 80192c2:	2100      	movs	r1, #0
 80192c4:	2002      	movs	r0, #2
 80192c6:	f003 fc87 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80192ca:	2303      	movs	r3, #3
 80192cc:	e073      	b.n	80193b6 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80192ce:	4a3c      	ldr	r2, [pc, #240]	@ (80193c0 <RadioSend+0x1ec>)
 80192d0:	78fb      	ldrb	r3, [r7, #3]
 80192d2:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192d4:	483b      	ldr	r0, [pc, #236]	@ (80193c4 <RadioSend+0x1f0>)
 80192d6:	f001 ff61 	bl	801b19c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80192da:	78fb      	ldrb	r3, [r7, #3]
 80192dc:	2200      	movs	r2, #0
 80192de:	4619      	mov	r1, r3
 80192e0:	6878      	ldr	r0, [r7, #4]
 80192e2:	f001 fa0d 	bl	801a700 <SUBGRF_SendPayload>
            break;
 80192e6:	e05c      	b.n	80193a2 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80192e8:	4b35      	ldr	r3, [pc, #212]	@ (80193c0 <RadioSend+0x1ec>)
 80192ea:	2202      	movs	r2, #2
 80192ec:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80192ee:	4a34      	ldr	r2, [pc, #208]	@ (80193c0 <RadioSend+0x1ec>)
 80192f0:	78fb      	ldrb	r3, [r7, #3]
 80192f2:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192f4:	4833      	ldr	r0, [pc, #204]	@ (80193c4 <RadioSend+0x1f0>)
 80192f6:	f001 ff51 	bl	801b19c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80192fa:	78fb      	ldrb	r3, [r7, #3]
 80192fc:	2200      	movs	r2, #0
 80192fe:	4619      	mov	r1, r3
 8019300:	6878      	ldr	r0, [r7, #4]
 8019302:	f001 f9fd 	bl	801a700 <SUBGRF_SendPayload>
            break;
 8019306:	e04c      	b.n	80193a2 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019308:	78fb      	ldrb	r3, [r7, #3]
 801930a:	461a      	mov	r2, r3
 801930c:	6879      	ldr	r1, [r7, #4]
 801930e:	482f      	ldr	r0, [pc, #188]	@ (80193cc <RadioSend+0x1f8>)
 8019310:	f000 fcca 	bl	8019ca8 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019314:	4b2a      	ldr	r3, [pc, #168]	@ (80193c0 <RadioSend+0x1ec>)
 8019316:	2202      	movs	r2, #2
 8019318:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801931a:	78fb      	ldrb	r3, [r7, #3]
 801931c:	3301      	adds	r3, #1
 801931e:	b2da      	uxtb	r2, r3
 8019320:	4b27      	ldr	r3, [pc, #156]	@ (80193c0 <RadioSend+0x1ec>)
 8019322:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019324:	4827      	ldr	r0, [pc, #156]	@ (80193c4 <RadioSend+0x1f0>)
 8019326:	f001 ff39 	bl	801b19c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801932a:	2100      	movs	r1, #0
 801932c:	20f1      	movs	r0, #241	@ 0xf1
 801932e:	f000 f965 	bl	80195fc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019332:	2100      	movs	r1, #0
 8019334:	20f0      	movs	r0, #240	@ 0xf0
 8019336:	f000 f961 	bl	80195fc <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801933a:	4b21      	ldr	r3, [pc, #132]	@ (80193c0 <RadioSend+0x1ec>)
 801933c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801933e:	2b64      	cmp	r3, #100	@ 0x64
 8019340:	d108      	bne.n	8019354 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8019342:	2170      	movs	r1, #112	@ 0x70
 8019344:	20f3      	movs	r0, #243	@ 0xf3
 8019346:	f000 f959 	bl	80195fc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801934a:	211d      	movs	r1, #29
 801934c:	20f2      	movs	r0, #242	@ 0xf2
 801934e:	f000 f955 	bl	80195fc <RadioWrite>
 8019352:	e007      	b.n	8019364 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019354:	21e1      	movs	r1, #225	@ 0xe1
 8019356:	20f3      	movs	r0, #243	@ 0xf3
 8019358:	f000 f950 	bl	80195fc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801935c:	2104      	movs	r1, #4
 801935e:	20f2      	movs	r0, #242	@ 0xf2
 8019360:	f000 f94c 	bl	80195fc <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019364:	78fb      	ldrb	r3, [r7, #3]
 8019366:	b29b      	uxth	r3, r3
 8019368:	00db      	lsls	r3, r3, #3
 801936a:	b29b      	uxth	r3, r3
 801936c:	3302      	adds	r3, #2
 801936e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019370:	89fb      	ldrh	r3, [r7, #14]
 8019372:	0a1b      	lsrs	r3, r3, #8
 8019374:	b29b      	uxth	r3, r3
 8019376:	b2db      	uxtb	r3, r3
 8019378:	4619      	mov	r1, r3
 801937a:	20f4      	movs	r0, #244	@ 0xf4
 801937c:	f000 f93e 	bl	80195fc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019380:	89fb      	ldrh	r3, [r7, #14]
 8019382:	b2db      	uxtb	r3, r3
 8019384:	4619      	mov	r1, r3
 8019386:	20f5      	movs	r0, #245	@ 0xf5
 8019388:	f000 f938 	bl	80195fc <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801938c:	78fb      	ldrb	r3, [r7, #3]
 801938e:	3301      	adds	r3, #1
 8019390:	b2db      	uxtb	r3, r3
 8019392:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8019396:	4619      	mov	r1, r3
 8019398:	480c      	ldr	r0, [pc, #48]	@ (80193cc <RadioSend+0x1f8>)
 801939a:	f001 f9b1 	bl	801a700 <SUBGRF_SendPayload>
            break;
 801939e:	e000      	b.n	80193a2 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80193a0:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80193a2:	4b07      	ldr	r3, [pc, #28]	@ (80193c0 <RadioSend+0x1ec>)
 80193a4:	685b      	ldr	r3, [r3, #4]
 80193a6:	4619      	mov	r1, r3
 80193a8:	4809      	ldr	r0, [pc, #36]	@ (80193d0 <RadioSend+0x1fc>)
 80193aa:	f003 fa7b 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80193ae:	4808      	ldr	r0, [pc, #32]	@ (80193d0 <RadioSend+0x1fc>)
 80193b0:	f003 f99a 	bl	801c6e8 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80193b4:	2300      	movs	r3, #0
}
 80193b6:	4618      	mov	r0, r3
 80193b8:	3710      	adds	r7, #16
 80193ba:	46bd      	mov	sp, r7
 80193bc:	bd80      	pop	{r7, pc}
 80193be:	bf00      	nop
 80193c0:	20001d28 	.word	0x20001d28
 80193c4:	20001d36 	.word	0x20001d36
 80193c8:	0801da84 	.word	0x0801da84
 80193cc:	20001c24 	.word	0x20001c24
 80193d0:	20001d84 	.word	0x20001d84

080193d4 <RadioSleep>:

static void RadioSleep( void )
{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b082      	sub	sp, #8
 80193d8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80193da:	2300      	movs	r3, #0
 80193dc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80193de:	793b      	ldrb	r3, [r7, #4]
 80193e0:	f043 0304 	orr.w	r3, r3, #4
 80193e4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80193e6:	7938      	ldrb	r0, [r7, #4]
 80193e8:	f001 fa66 	bl	801a8b8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80193ec:	2002      	movs	r0, #2
 80193ee:	f7e9 f893 	bl	8002518 <HAL_Delay>
}
 80193f2:	bf00      	nop
 80193f4:	3708      	adds	r7, #8
 80193f6:	46bd      	mov	sp, r7
 80193f8:	bd80      	pop	{r7, pc}

080193fa <RadioStandby>:

static void RadioStandby( void )
{
 80193fa:	b580      	push	{r7, lr}
 80193fc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80193fe:	2000      	movs	r0, #0
 8019400:	f001 fa8e 	bl	801a920 <SUBGRF_SetStandby>
}
 8019404:	bf00      	nop
 8019406:	bd80      	pop	{r7, pc}

08019408 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b082      	sub	sp, #8
 801940c:	af00      	add	r7, sp, #0
 801940e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8019410:	f002 fb11 	bl	801ba36 <RFW_Is_Init>
 8019414:	4603      	mov	r3, r0
 8019416:	2b01      	cmp	r3, #1
 8019418:	d102      	bne.n	8019420 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801941a:	f002 fb34 	bl	801ba86 <RFW_ReceiveInit>
 801941e:	e007      	b.n	8019430 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019420:	2300      	movs	r3, #0
 8019422:	2200      	movs	r2, #0
 8019424:	f240 2162 	movw	r1, #610	@ 0x262
 8019428:	f240 2062 	movw	r0, #610	@ 0x262
 801942c:	f001 fc52 	bl	801acd4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d006      	beq.n	8019444 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019436:	6879      	ldr	r1, [r7, #4]
 8019438:	4811      	ldr	r0, [pc, #68]	@ (8019480 <RadioRx+0x78>)
 801943a:	f003 fa33 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801943e:	4810      	ldr	r0, [pc, #64]	@ (8019480 <RadioRx+0x78>)
 8019440:	f003 f952 	bl	801c6e8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019444:	4b0f      	ldr	r3, [pc, #60]	@ (8019484 <RadioRx+0x7c>)
 8019446:	2200      	movs	r2, #0
 8019448:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801944a:	4b0e      	ldr	r3, [pc, #56]	@ (8019484 <RadioRx+0x7c>)
 801944c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019450:	2100      	movs	r1, #0
 8019452:	4618      	mov	r0, r3
 8019454:	f002 f8f6 	bl	801b644 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019458:	4b0a      	ldr	r3, [pc, #40]	@ (8019484 <RadioRx+0x7c>)
 801945a:	785b      	ldrb	r3, [r3, #1]
 801945c:	2b00      	cmp	r3, #0
 801945e:	d004      	beq.n	801946a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019460:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019464:	f001 fa98 	bl	801a998 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019468:	e005      	b.n	8019476 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801946a:	4b06      	ldr	r3, [pc, #24]	@ (8019484 <RadioRx+0x7c>)
 801946c:	689b      	ldr	r3, [r3, #8]
 801946e:	019b      	lsls	r3, r3, #6
 8019470:	4618      	mov	r0, r3
 8019472:	f001 fa91 	bl	801a998 <SUBGRF_SetRx>
}
 8019476:	bf00      	nop
 8019478:	3708      	adds	r7, #8
 801947a:	46bd      	mov	sp, r7
 801947c:	bd80      	pop	{r7, pc}
 801947e:	bf00      	nop
 8019480:	20001d9c 	.word	0x20001d9c
 8019484:	20001d28 	.word	0x20001d28

08019488 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b082      	sub	sp, #8
 801948c:	af00      	add	r7, sp, #0
 801948e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8019490:	f002 fad1 	bl	801ba36 <RFW_Is_Init>
 8019494:	4603      	mov	r3, r0
 8019496:	2b01      	cmp	r3, #1
 8019498:	d102      	bne.n	80194a0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801949a:	f002 faf4 	bl	801ba86 <RFW_ReceiveInit>
 801949e:	e007      	b.n	80194b0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80194a0:	2300      	movs	r3, #0
 80194a2:	2200      	movs	r2, #0
 80194a4:	f240 2162 	movw	r1, #610	@ 0x262
 80194a8:	f240 2062 	movw	r0, #610	@ 0x262
 80194ac:	f001 fc12 	bl	801acd4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d006      	beq.n	80194c4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80194b6:	6879      	ldr	r1, [r7, #4]
 80194b8:	4811      	ldr	r0, [pc, #68]	@ (8019500 <RadioRxBoosted+0x78>)
 80194ba:	f003 f9f3 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80194be:	4810      	ldr	r0, [pc, #64]	@ (8019500 <RadioRxBoosted+0x78>)
 80194c0:	f003 f912 	bl	801c6e8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80194c4:	4b0f      	ldr	r3, [pc, #60]	@ (8019504 <RadioRxBoosted+0x7c>)
 80194c6:	2200      	movs	r2, #0
 80194c8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80194ca:	4b0e      	ldr	r3, [pc, #56]	@ (8019504 <RadioRxBoosted+0x7c>)
 80194cc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80194d0:	2100      	movs	r1, #0
 80194d2:	4618      	mov	r0, r3
 80194d4:	f002 f8b6 	bl	801b644 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80194d8:	4b0a      	ldr	r3, [pc, #40]	@ (8019504 <RadioRxBoosted+0x7c>)
 80194da:	785b      	ldrb	r3, [r3, #1]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d004      	beq.n	80194ea <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80194e0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80194e4:	f001 fa78 	bl	801a9d8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80194e8:	e005      	b.n	80194f6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80194ea:	4b06      	ldr	r3, [pc, #24]	@ (8019504 <RadioRxBoosted+0x7c>)
 80194ec:	689b      	ldr	r3, [r3, #8]
 80194ee:	019b      	lsls	r3, r3, #6
 80194f0:	4618      	mov	r0, r3
 80194f2:	f001 fa71 	bl	801a9d8 <SUBGRF_SetRxBoosted>
}
 80194f6:	bf00      	nop
 80194f8:	3708      	adds	r7, #8
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}
 80194fe:	bf00      	nop
 8019500:	20001d9c 	.word	0x20001d9c
 8019504:	20001d28 	.word	0x20001d28

08019508 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019508:	b580      	push	{r7, lr}
 801950a:	b082      	sub	sp, #8
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
 8019510:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	005a      	lsls	r2, r3, #1
 8019516:	683b      	ldr	r3, [r7, #0]
 8019518:	4413      	add	r3, r2
 801951a:	4a0c      	ldr	r2, [pc, #48]	@ (801954c <RadioSetRxDutyCycle+0x44>)
 801951c:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801951e:	2300      	movs	r3, #0
 8019520:	2200      	movs	r2, #0
 8019522:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8019526:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801952a:	f001 fbd3 	bl	801acd4 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801952e:	4b07      	ldr	r3, [pc, #28]	@ (801954c <RadioSetRxDutyCycle+0x44>)
 8019530:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019534:	2100      	movs	r1, #0
 8019536:	4618      	mov	r0, r3
 8019538:	f002 f884 	bl	801b644 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801953c:	6839      	ldr	r1, [r7, #0]
 801953e:	6878      	ldr	r0, [r7, #4]
 8019540:	f001 fa6e 	bl	801aa20 <SUBGRF_SetRxDutyCycle>
}
 8019544:	bf00      	nop
 8019546:	3708      	adds	r7, #8
 8019548:	46bd      	mov	sp, r7
 801954a:	bd80      	pop	{r7, pc}
 801954c:	20001d28 	.word	0x20001d28

08019550 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019550:	b580      	push	{r7, lr}
 8019552:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019554:	4b09      	ldr	r3, [pc, #36]	@ (801957c <RadioStartCad+0x2c>)
 8019556:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801955a:	2100      	movs	r1, #0
 801955c:	4618      	mov	r0, r3
 801955e:	f002 f871 	bl	801b644 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019562:	2300      	movs	r3, #0
 8019564:	2200      	movs	r2, #0
 8019566:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 801956a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801956e:	f001 fbb1 	bl	801acd4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019572:	f001 fa81 	bl	801aa78 <SUBGRF_SetCad>
}
 8019576:	bf00      	nop
 8019578:	bd80      	pop	{r7, pc}
 801957a:	bf00      	nop
 801957c:	20001d28 	.word	0x20001d28

08019580 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019580:	b580      	push	{r7, lr}
 8019582:	b084      	sub	sp, #16
 8019584:	af00      	add	r7, sp, #0
 8019586:	6078      	str	r0, [r7, #4]
 8019588:	460b      	mov	r3, r1
 801958a:	70fb      	strb	r3, [r7, #3]
 801958c:	4613      	mov	r3, r2
 801958e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8019590:	883b      	ldrh	r3, [r7, #0]
 8019592:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019596:	fb02 f303 	mul.w	r3, r2, r3
 801959a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801959c:	6878      	ldr	r0, [r7, #4]
 801959e:	f001 fbf5 	bl	801ad8c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80195a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80195a6:	4618      	mov	r0, r3
 80195a8:	f002 f874 	bl	801b694 <SUBGRF_SetRfTxPower>
 80195ac:	4603      	mov	r3, r0
 80195ae:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80195b0:	210e      	movs	r1, #14
 80195b2:	f640 101f 	movw	r0, #2335	@ 0x91f
 80195b6:	f001 ff37 	bl	801b428 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80195ba:	7afb      	ldrb	r3, [r7, #11]
 80195bc:	2101      	movs	r1, #1
 80195be:	4618      	mov	r0, r3
 80195c0:	f002 f840 	bl	801b644 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80195c4:	f001 fa66 	bl	801aa94 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80195c8:	68f9      	ldr	r1, [r7, #12]
 80195ca:	4805      	ldr	r0, [pc, #20]	@ (80195e0 <RadioSetTxContinuousWave+0x60>)
 80195cc:	f003 f96a 	bl	801c8a4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80195d0:	4803      	ldr	r0, [pc, #12]	@ (80195e0 <RadioSetTxContinuousWave+0x60>)
 80195d2:	f003 f889 	bl	801c6e8 <UTIL_TIMER_Start>
}
 80195d6:	bf00      	nop
 80195d8:	3710      	adds	r7, #16
 80195da:	46bd      	mov	sp, r7
 80195dc:	bd80      	pop	{r7, pc}
 80195de:	bf00      	nop
 80195e0:	20001d84 	.word	0x20001d84

080195e4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80195e4:	b580      	push	{r7, lr}
 80195e6:	b082      	sub	sp, #8
 80195e8:	af00      	add	r7, sp, #0
 80195ea:	4603      	mov	r3, r0
 80195ec:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80195ee:	f001 fe88 	bl	801b302 <SUBGRF_GetRssiInst>
 80195f2:	4603      	mov	r3, r0
}
 80195f4:	4618      	mov	r0, r3
 80195f6:	3708      	adds	r7, #8
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd80      	pop	{r7, pc}

080195fc <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b082      	sub	sp, #8
 8019600:	af00      	add	r7, sp, #0
 8019602:	4603      	mov	r3, r0
 8019604:	460a      	mov	r2, r1
 8019606:	80fb      	strh	r3, [r7, #6]
 8019608:	4613      	mov	r3, r2
 801960a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801960c:	797a      	ldrb	r2, [r7, #5]
 801960e:	88fb      	ldrh	r3, [r7, #6]
 8019610:	4611      	mov	r1, r2
 8019612:	4618      	mov	r0, r3
 8019614:	f001 ff08 	bl	801b428 <SUBGRF_WriteRegister>
}
 8019618:	bf00      	nop
 801961a:	3708      	adds	r7, #8
 801961c:	46bd      	mov	sp, r7
 801961e:	bd80      	pop	{r7, pc}

08019620 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019620:	b580      	push	{r7, lr}
 8019622:	b082      	sub	sp, #8
 8019624:	af00      	add	r7, sp, #0
 8019626:	4603      	mov	r3, r0
 8019628:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801962a:	88fb      	ldrh	r3, [r7, #6]
 801962c:	4618      	mov	r0, r3
 801962e:	f001 ff1d 	bl	801b46c <SUBGRF_ReadRegister>
 8019632:	4603      	mov	r3, r0
}
 8019634:	4618      	mov	r0, r3
 8019636:	3708      	adds	r7, #8
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}

0801963c <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801963c:	b580      	push	{r7, lr}
 801963e:	b082      	sub	sp, #8
 8019640:	af00      	add	r7, sp, #0
 8019642:	4603      	mov	r3, r0
 8019644:	6039      	str	r1, [r7, #0]
 8019646:	80fb      	strh	r3, [r7, #6]
 8019648:	4613      	mov	r3, r2
 801964a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801964c:	797b      	ldrb	r3, [r7, #5]
 801964e:	b29a      	uxth	r2, r3
 8019650:	88fb      	ldrh	r3, [r7, #6]
 8019652:	6839      	ldr	r1, [r7, #0]
 8019654:	4618      	mov	r0, r3
 8019656:	f001 ff29 	bl	801b4ac <SUBGRF_WriteRegisters>
}
 801965a:	bf00      	nop
 801965c:	3708      	adds	r7, #8
 801965e:	46bd      	mov	sp, r7
 8019660:	bd80      	pop	{r7, pc}

08019662 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019662:	b580      	push	{r7, lr}
 8019664:	b082      	sub	sp, #8
 8019666:	af00      	add	r7, sp, #0
 8019668:	4603      	mov	r3, r0
 801966a:	6039      	str	r1, [r7, #0]
 801966c:	80fb      	strh	r3, [r7, #6]
 801966e:	4613      	mov	r3, r2
 8019670:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019672:	797b      	ldrb	r3, [r7, #5]
 8019674:	b29a      	uxth	r2, r3
 8019676:	88fb      	ldrh	r3, [r7, #6]
 8019678:	6839      	ldr	r1, [r7, #0]
 801967a:	4618      	mov	r0, r3
 801967c:	f001 ff38 	bl	801b4f0 <SUBGRF_ReadRegisters>
}
 8019680:	bf00      	nop
 8019682:	3708      	adds	r7, #8
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}

08019688 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b082      	sub	sp, #8
 801968c:	af00      	add	r7, sp, #0
 801968e:	4603      	mov	r3, r0
 8019690:	460a      	mov	r2, r1
 8019692:	71fb      	strb	r3, [r7, #7]
 8019694:	4613      	mov	r3, r2
 8019696:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019698:	79fb      	ldrb	r3, [r7, #7]
 801969a:	2b01      	cmp	r3, #1
 801969c:	d10a      	bne.n	80196b4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801969e:	4a0e      	ldr	r2, [pc, #56]	@ (80196d8 <RadioSetMaxPayloadLength+0x50>)
 80196a0:	79bb      	ldrb	r3, [r7, #6]
 80196a2:	7013      	strb	r3, [r2, #0]
 80196a4:	4b0c      	ldr	r3, [pc, #48]	@ (80196d8 <RadioSetMaxPayloadLength+0x50>)
 80196a6:	781a      	ldrb	r2, [r3, #0]
 80196a8:	4b0c      	ldr	r3, [pc, #48]	@ (80196dc <RadioSetMaxPayloadLength+0x54>)
 80196aa:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80196ac:	480c      	ldr	r0, [pc, #48]	@ (80196e0 <RadioSetMaxPayloadLength+0x58>)
 80196ae:	f001 fd75 	bl	801b19c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80196b2:	e00d      	b.n	80196d0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80196b4:	4b09      	ldr	r3, [pc, #36]	@ (80196dc <RadioSetMaxPayloadLength+0x54>)
 80196b6:	7d5b      	ldrb	r3, [r3, #21]
 80196b8:	2b01      	cmp	r3, #1
 80196ba:	d109      	bne.n	80196d0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80196bc:	4a06      	ldr	r2, [pc, #24]	@ (80196d8 <RadioSetMaxPayloadLength+0x50>)
 80196be:	79bb      	ldrb	r3, [r7, #6]
 80196c0:	7013      	strb	r3, [r2, #0]
 80196c2:	4b05      	ldr	r3, [pc, #20]	@ (80196d8 <RadioSetMaxPayloadLength+0x50>)
 80196c4:	781a      	ldrb	r2, [r3, #0]
 80196c6:	4b05      	ldr	r3, [pc, #20]	@ (80196dc <RadioSetMaxPayloadLength+0x54>)
 80196c8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80196ca:	4805      	ldr	r0, [pc, #20]	@ (80196e0 <RadioSetMaxPayloadLength+0x58>)
 80196cc:	f001 fd66 	bl	801b19c <SUBGRF_SetPacketParams>
}
 80196d0:	bf00      	nop
 80196d2:	3708      	adds	r7, #8
 80196d4:	46bd      	mov	sp, r7
 80196d6:	bd80      	pop	{r7, pc}
 80196d8:	20000134 	.word	0x20000134
 80196dc:	20001d28 	.word	0x20001d28
 80196e0:	20001d36 	.word	0x20001d36

080196e4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80196e4:	b580      	push	{r7, lr}
 80196e6:	b082      	sub	sp, #8
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	4603      	mov	r3, r0
 80196ec:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80196ee:	4a13      	ldr	r2, [pc, #76]	@ (801973c <RadioSetPublicNetwork+0x58>)
 80196f0:	79fb      	ldrb	r3, [r7, #7]
 80196f2:	7313      	strb	r3, [r2, #12]
 80196f4:	4b11      	ldr	r3, [pc, #68]	@ (801973c <RadioSetPublicNetwork+0x58>)
 80196f6:	7b1a      	ldrb	r2, [r3, #12]
 80196f8:	4b10      	ldr	r3, [pc, #64]	@ (801973c <RadioSetPublicNetwork+0x58>)
 80196fa:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80196fc:	2001      	movs	r0, #1
 80196fe:	f7ff f813 	bl	8018728 <RadioSetModem>
    if( enable == true )
 8019702:	79fb      	ldrb	r3, [r7, #7]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d00a      	beq.n	801971e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8019708:	2134      	movs	r1, #52	@ 0x34
 801970a:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801970e:	f001 fe8b 	bl	801b428 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8019712:	2144      	movs	r1, #68	@ 0x44
 8019714:	f240 7041 	movw	r0, #1857	@ 0x741
 8019718:	f001 fe86 	bl	801b428 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801971c:	e009      	b.n	8019732 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801971e:	2114      	movs	r1, #20
 8019720:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8019724:	f001 fe80 	bl	801b428 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8019728:	2124      	movs	r1, #36	@ 0x24
 801972a:	f240 7041 	movw	r0, #1857	@ 0x741
 801972e:	f001 fe7b 	bl	801b428 <SUBGRF_WriteRegister>
}
 8019732:	bf00      	nop
 8019734:	3708      	adds	r7, #8
 8019736:	46bd      	mov	sp, r7
 8019738:	bd80      	pop	{r7, pc}
 801973a:	bf00      	nop
 801973c:	20001d28 	.word	0x20001d28

08019740 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8019740:	b580      	push	{r7, lr}
 8019742:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019744:	f001 ffda 	bl	801b6fc <SUBGRF_GetRadioWakeUpTime>
 8019748:	4603      	mov	r3, r0
 801974a:	3303      	adds	r3, #3
}
 801974c:	4618      	mov	r0, r3
 801974e:	bd80      	pop	{r7, pc}

08019750 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8019750:	b580      	push	{r7, lr}
 8019752:	b082      	sub	sp, #8
 8019754:	af00      	add	r7, sp, #0
 8019756:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019758:	f000 f80e 	bl	8019778 <RadioOnTxTimeoutProcess>
}
 801975c:	bf00      	nop
 801975e:	3708      	adds	r7, #8
 8019760:	46bd      	mov	sp, r7
 8019762:	bd80      	pop	{r7, pc}

08019764 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8019764:	b580      	push	{r7, lr}
 8019766:	b082      	sub	sp, #8
 8019768:	af00      	add	r7, sp, #0
 801976a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801976c:	f000 f818 	bl	80197a0 <RadioOnRxTimeoutProcess>
}
 8019770:	bf00      	nop
 8019772:	3708      	adds	r7, #8
 8019774:	46bd      	mov	sp, r7
 8019776:	bd80      	pop	{r7, pc}

08019778 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019778:	b580      	push	{r7, lr}
 801977a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801977c:	4b07      	ldr	r3, [pc, #28]	@ (801979c <RadioOnTxTimeoutProcess+0x24>)
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d008      	beq.n	8019796 <RadioOnTxTimeoutProcess+0x1e>
 8019784:	4b05      	ldr	r3, [pc, #20]	@ (801979c <RadioOnTxTimeoutProcess+0x24>)
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	685b      	ldr	r3, [r3, #4]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d003      	beq.n	8019796 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801978e:	4b03      	ldr	r3, [pc, #12]	@ (801979c <RadioOnTxTimeoutProcess+0x24>)
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	685b      	ldr	r3, [r3, #4]
 8019794:	4798      	blx	r3
    }
}
 8019796:	bf00      	nop
 8019798:	bd80      	pop	{r7, pc}
 801979a:	bf00      	nop
 801979c:	20001d24 	.word	0x20001d24

080197a0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80197a4:	4b07      	ldr	r3, [pc, #28]	@ (80197c4 <RadioOnRxTimeoutProcess+0x24>)
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d008      	beq.n	80197be <RadioOnRxTimeoutProcess+0x1e>
 80197ac:	4b05      	ldr	r3, [pc, #20]	@ (80197c4 <RadioOnRxTimeoutProcess+0x24>)
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	68db      	ldr	r3, [r3, #12]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d003      	beq.n	80197be <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80197b6:	4b03      	ldr	r3, [pc, #12]	@ (80197c4 <RadioOnRxTimeoutProcess+0x24>)
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	68db      	ldr	r3, [r3, #12]
 80197bc:	4798      	blx	r3
    }
}
 80197be:	bf00      	nop
 80197c0:	bd80      	pop	{r7, pc}
 80197c2:	bf00      	nop
 80197c4:	20001d24 	.word	0x20001d24

080197c8 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b082      	sub	sp, #8
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	4603      	mov	r3, r0
 80197d0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80197d2:	4a05      	ldr	r2, [pc, #20]	@ (80197e8 <RadioOnDioIrq+0x20>)
 80197d4:	88fb      	ldrh	r3, [r7, #6]
 80197d6:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80197da:	f000 f807 	bl	80197ec <RadioIrqProcess>
}
 80197de:	bf00      	nop
 80197e0:	3708      	adds	r7, #8
 80197e2:	46bd      	mov	sp, r7
 80197e4:	bd80      	pop	{r7, pc}
 80197e6:	bf00      	nop
 80197e8:	20001d28 	.word	0x20001d28

080197ec <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80197ec:	b5b0      	push	{r4, r5, r7, lr}
 80197ee:	b082      	sub	sp, #8
 80197f0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80197f2:	2300      	movs	r3, #0
 80197f4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80197f6:	2300      	movs	r3, #0
 80197f8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80197fa:	4ba8      	ldr	r3, [pc, #672]	@ (8019a9c <RadioIrqProcess+0x2b0>)
 80197fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8019800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019804:	f000 810d 	beq.w	8019a22 <RadioIrqProcess+0x236>
 8019808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801980c:	f300 81e8 	bgt.w	8019be0 <RadioIrqProcess+0x3f4>
 8019810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019814:	f000 80f1 	beq.w	80199fa <RadioIrqProcess+0x20e>
 8019818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801981c:	f300 81e0 	bgt.w	8019be0 <RadioIrqProcess+0x3f4>
 8019820:	2b80      	cmp	r3, #128	@ 0x80
 8019822:	f000 80d6 	beq.w	80199d2 <RadioIrqProcess+0x1e6>
 8019826:	2b80      	cmp	r3, #128	@ 0x80
 8019828:	f300 81da 	bgt.w	8019be0 <RadioIrqProcess+0x3f4>
 801982c:	2b20      	cmp	r3, #32
 801982e:	dc49      	bgt.n	80198c4 <RadioIrqProcess+0xd8>
 8019830:	2b00      	cmp	r3, #0
 8019832:	f340 81d5 	ble.w	8019be0 <RadioIrqProcess+0x3f4>
 8019836:	3b01      	subs	r3, #1
 8019838:	2b1f      	cmp	r3, #31
 801983a:	f200 81d1 	bhi.w	8019be0 <RadioIrqProcess+0x3f4>
 801983e:	a201      	add	r2, pc, #4	@ (adr r2, 8019844 <RadioIrqProcess+0x58>)
 8019840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019844:	080198cd 	.word	0x080198cd
 8019848:	08019907 	.word	0x08019907
 801984c:	08019be1 	.word	0x08019be1
 8019850:	08019abd 	.word	0x08019abd
 8019854:	08019be1 	.word	0x08019be1
 8019858:	08019be1 	.word	0x08019be1
 801985c:	08019be1 	.word	0x08019be1
 8019860:	08019b39 	.word	0x08019b39
 8019864:	08019be1 	.word	0x08019be1
 8019868:	08019be1 	.word	0x08019be1
 801986c:	08019be1 	.word	0x08019be1
 8019870:	08019be1 	.word	0x08019be1
 8019874:	08019be1 	.word	0x08019be1
 8019878:	08019be1 	.word	0x08019be1
 801987c:	08019be1 	.word	0x08019be1
 8019880:	08019b55 	.word	0x08019b55
 8019884:	08019be1 	.word	0x08019be1
 8019888:	08019be1 	.word	0x08019be1
 801988c:	08019be1 	.word	0x08019be1
 8019890:	08019be1 	.word	0x08019be1
 8019894:	08019be1 	.word	0x08019be1
 8019898:	08019be1 	.word	0x08019be1
 801989c:	08019be1 	.word	0x08019be1
 80198a0:	08019be1 	.word	0x08019be1
 80198a4:	08019be1 	.word	0x08019be1
 80198a8:	08019be1 	.word	0x08019be1
 80198ac:	08019be1 	.word	0x08019be1
 80198b0:	08019be1 	.word	0x08019be1
 80198b4:	08019be1 	.word	0x08019be1
 80198b8:	08019be1 	.word	0x08019be1
 80198bc:	08019be1 	.word	0x08019be1
 80198c0:	08019b63 	.word	0x08019b63
 80198c4:	2b40      	cmp	r3, #64	@ 0x40
 80198c6:	f000 816d 	beq.w	8019ba4 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80198ca:	e189      	b.n	8019be0 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 80198cc:	4874      	ldr	r0, [pc, #464]	@ (8019aa0 <RadioIrqProcess+0x2b4>)
 80198ce:	f002 ff79 	bl	801c7c4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80198d2:	2000      	movs	r0, #0
 80198d4:	f001 f824 	bl	801a920 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80198d8:	f002 f8b4 	bl	801ba44 <RFW_Is_LongPacketModeEnabled>
 80198dc:	4603      	mov	r3, r0
 80198de:	2b01      	cmp	r3, #1
 80198e0:	d101      	bne.n	80198e6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80198e2:	f002 f8d8 	bl	801ba96 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80198e6:	4b6f      	ldr	r3, [pc, #444]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	f000 817a 	beq.w	8019be4 <RadioIrqProcess+0x3f8>
 80198f0:	4b6c      	ldr	r3, [pc, #432]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	f000 8174 	beq.w	8019be4 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80198fc:	4b69      	ldr	r3, [pc, #420]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	4798      	blx	r3
        break;
 8019904:	e16e      	b.n	8019be4 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8019906:	4868      	ldr	r0, [pc, #416]	@ (8019aa8 <RadioIrqProcess+0x2bc>)
 8019908:	f002 ff5c 	bl	801c7c4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801990c:	4b63      	ldr	r3, [pc, #396]	@ (8019a9c <RadioIrqProcess+0x2b0>)
 801990e:	785b      	ldrb	r3, [r3, #1]
 8019910:	f083 0301 	eor.w	r3, r3, #1
 8019914:	b2db      	uxtb	r3, r3
 8019916:	2b00      	cmp	r3, #0
 8019918:	d014      	beq.n	8019944 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801991a:	2000      	movs	r0, #0
 801991c:	f001 f800 	bl	801a920 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8019920:	2100      	movs	r1, #0
 8019922:	f640 1002 	movw	r0, #2306	@ 0x902
 8019926:	f001 fd7f 	bl	801b428 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801992a:	f640 1044 	movw	r0, #2372	@ 0x944
 801992e:	f001 fd9d 	bl	801b46c <SUBGRF_ReadRegister>
 8019932:	4603      	mov	r3, r0
 8019934:	f043 0302 	orr.w	r3, r3, #2
 8019938:	b2db      	uxtb	r3, r3
 801993a:	4619      	mov	r1, r3
 801993c:	f640 1044 	movw	r0, #2372	@ 0x944
 8019940:	f001 fd72 	bl	801b428 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8019944:	1dfb      	adds	r3, r7, #7
 8019946:	22ff      	movs	r2, #255	@ 0xff
 8019948:	4619      	mov	r1, r3
 801994a:	4858      	ldr	r0, [pc, #352]	@ (8019aac <RadioIrqProcess+0x2c0>)
 801994c:	f000 feb6 	bl	801a6bc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8019950:	4857      	ldr	r0, [pc, #348]	@ (8019ab0 <RadioIrqProcess+0x2c4>)
 8019952:	f001 fd17 	bl	801b384 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8019956:	4b53      	ldr	r3, [pc, #332]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	2b00      	cmp	r3, #0
 801995c:	f000 8144 	beq.w	8019be8 <RadioIrqProcess+0x3fc>
 8019960:	4b50      	ldr	r3, [pc, #320]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	689b      	ldr	r3, [r3, #8]
 8019966:	2b00      	cmp	r3, #0
 8019968:	f000 813e 	beq.w	8019be8 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801996c:	4b4b      	ldr	r3, [pc, #300]	@ (8019a9c <RadioIrqProcess+0x2b0>)
 801996e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019972:	2b01      	cmp	r3, #1
 8019974:	d10e      	bne.n	8019994 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8019976:	4b4b      	ldr	r3, [pc, #300]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	689c      	ldr	r4, [r3, #8]
 801997c:	79fb      	ldrb	r3, [r7, #7]
 801997e:	4619      	mov	r1, r3
 8019980:	4b46      	ldr	r3, [pc, #280]	@ (8019a9c <RadioIrqProcess+0x2b0>)
 8019982:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8019986:	461a      	mov	r2, r3
 8019988:	4b44      	ldr	r3, [pc, #272]	@ (8019a9c <RadioIrqProcess+0x2b0>)
 801998a:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 801998e:	4847      	ldr	r0, [pc, #284]	@ (8019aac <RadioIrqProcess+0x2c0>)
 8019990:	47a0      	blx	r4
                break;
 8019992:	e01d      	b.n	80199d0 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019994:	4b41      	ldr	r3, [pc, #260]	@ (8019a9c <RadioIrqProcess+0x2b0>)
 8019996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019998:	463a      	mov	r2, r7
 801999a:	4611      	mov	r1, r2
 801999c:	4618      	mov	r0, r3
 801999e:	f001 ff9f 	bl	801b8e0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80199a2:	4b40      	ldr	r3, [pc, #256]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	689c      	ldr	r4, [r3, #8]
 80199a8:	79fb      	ldrb	r3, [r7, #7]
 80199aa:	4619      	mov	r1, r3
 80199ac:	4b3b      	ldr	r3, [pc, #236]	@ (8019a9c <RadioIrqProcess+0x2b0>)
 80199ae:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 80199b2:	4618      	mov	r0, r3
 80199b4:	683b      	ldr	r3, [r7, #0]
 80199b6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80199ba:	4a3e      	ldr	r2, [pc, #248]	@ (8019ab4 <RadioIrqProcess+0x2c8>)
 80199bc:	fb82 5203 	smull	r5, r2, r2, r3
 80199c0:	1192      	asrs	r2, r2, #6
 80199c2:	17db      	asrs	r3, r3, #31
 80199c4:	1ad3      	subs	r3, r2, r3
 80199c6:	b25b      	sxtb	r3, r3
 80199c8:	4602      	mov	r2, r0
 80199ca:	4838      	ldr	r0, [pc, #224]	@ (8019aac <RadioIrqProcess+0x2c0>)
 80199cc:	47a0      	blx	r4
                break;
 80199ce:	bf00      	nop
        break;
 80199d0:	e10a      	b.n	8019be8 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 80199d2:	2000      	movs	r0, #0
 80199d4:	f000 ffa4 	bl	801a920 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80199d8:	4b32      	ldr	r3, [pc, #200]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	f000 8105 	beq.w	8019bec <RadioIrqProcess+0x400>
 80199e2:	4b30      	ldr	r3, [pc, #192]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	699b      	ldr	r3, [r3, #24]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	f000 80ff 	beq.w	8019bec <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 80199ee:	4b2d      	ldr	r3, [pc, #180]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	699b      	ldr	r3, [r3, #24]
 80199f4:	2000      	movs	r0, #0
 80199f6:	4798      	blx	r3
        break;
 80199f8:	e0f8      	b.n	8019bec <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 80199fa:	2000      	movs	r0, #0
 80199fc:	f000 ff90 	bl	801a920 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019a00:	4b28      	ldr	r3, [pc, #160]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	f000 80f3 	beq.w	8019bf0 <RadioIrqProcess+0x404>
 8019a0a:	4b26      	ldr	r3, [pc, #152]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	699b      	ldr	r3, [r3, #24]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	f000 80ed 	beq.w	8019bf0 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8019a16:	4b23      	ldr	r3, [pc, #140]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	699b      	ldr	r3, [r3, #24]
 8019a1c:	2001      	movs	r0, #1
 8019a1e:	4798      	blx	r3
        break;
 8019a20:	e0e6      	b.n	8019bf0 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8019a22:	4b25      	ldr	r3, [pc, #148]	@ (8019ab8 <RadioIrqProcess+0x2cc>)
 8019a24:	2201      	movs	r2, #1
 8019a26:	2100      	movs	r1, #0
 8019a28:	2002      	movs	r0, #2
 8019a2a:	f003 f8d5 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8019a2e:	f000 fe2b 	bl	801a688 <SUBGRF_GetOperatingMode>
 8019a32:	4603      	mov	r3, r0
 8019a34:	2b04      	cmp	r3, #4
 8019a36:	d115      	bne.n	8019a64 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8019a38:	4819      	ldr	r0, [pc, #100]	@ (8019aa0 <RadioIrqProcess+0x2b4>)
 8019a3a:	f002 fec3 	bl	801c7c4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019a3e:	2000      	movs	r0, #0
 8019a40:	f000 ff6e 	bl	801a920 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019a44:	4b17      	ldr	r3, [pc, #92]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	f000 80d3 	beq.w	8019bf4 <RadioIrqProcess+0x408>
 8019a4e:	4b15      	ldr	r3, [pc, #84]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	685b      	ldr	r3, [r3, #4]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	f000 80cd 	beq.w	8019bf4 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8019a5a:	4b12      	ldr	r3, [pc, #72]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	685b      	ldr	r3, [r3, #4]
 8019a60:	4798      	blx	r3
        break;
 8019a62:	e0c7      	b.n	8019bf4 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8019a64:	f000 fe10 	bl	801a688 <SUBGRF_GetOperatingMode>
 8019a68:	4603      	mov	r3, r0
 8019a6a:	2b05      	cmp	r3, #5
 8019a6c:	f040 80c2 	bne.w	8019bf4 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8019a70:	480d      	ldr	r0, [pc, #52]	@ (8019aa8 <RadioIrqProcess+0x2bc>)
 8019a72:	f002 fea7 	bl	801c7c4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019a76:	2000      	movs	r0, #0
 8019a78:	f000 ff52 	bl	801a920 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019a7c:	4b09      	ldr	r3, [pc, #36]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	f000 80b7 	beq.w	8019bf4 <RadioIrqProcess+0x408>
 8019a86:	4b07      	ldr	r3, [pc, #28]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	68db      	ldr	r3, [r3, #12]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	f000 80b1 	beq.w	8019bf4 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8019a92:	4b04      	ldr	r3, [pc, #16]	@ (8019aa4 <RadioIrqProcess+0x2b8>)
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	68db      	ldr	r3, [r3, #12]
 8019a98:	4798      	blx	r3
        break;
 8019a9a:	e0ab      	b.n	8019bf4 <RadioIrqProcess+0x408>
 8019a9c:	20001d28 	.word	0x20001d28
 8019aa0:	20001d84 	.word	0x20001d84
 8019aa4:	20001d24 	.word	0x20001d24
 8019aa8:	20001d9c 	.word	0x20001d9c
 8019aac:	20001c24 	.word	0x20001c24
 8019ab0:	20001d4c 	.word	0x20001d4c
 8019ab4:	10624dd3 	.word	0x10624dd3
 8019ab8:	0801da9c 	.word	0x0801da9c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019abc:	4b54      	ldr	r3, [pc, #336]	@ (8019c10 <RadioIrqProcess+0x424>)
 8019abe:	2201      	movs	r2, #1
 8019ac0:	2100      	movs	r1, #0
 8019ac2:	2002      	movs	r0, #2
 8019ac4:	f003 f888 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8019ac8:	4b52      	ldr	r3, [pc, #328]	@ (8019c14 <RadioIrqProcess+0x428>)
 8019aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	f000 8093 	beq.w	8019bf8 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8019ad2:	4a51      	ldr	r2, [pc, #324]	@ (8019c18 <RadioIrqProcess+0x42c>)
 8019ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8019c14 <RadioIrqProcess+0x428>)
 8019ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ad8:	0c1b      	lsrs	r3, r3, #16
 8019ada:	b2db      	uxtb	r3, r3
 8019adc:	4619      	mov	r1, r3
 8019ade:	f640 1003 	movw	r0, #2307	@ 0x903
 8019ae2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8019ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8019c18 <RadioIrqProcess+0x42c>)
 8019ae6:	4b4b      	ldr	r3, [pc, #300]	@ (8019c14 <RadioIrqProcess+0x428>)
 8019ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019aea:	0a1b      	lsrs	r3, r3, #8
 8019aec:	b2db      	uxtb	r3, r3
 8019aee:	4619      	mov	r1, r3
 8019af0:	f640 1004 	movw	r0, #2308	@ 0x904
 8019af4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8019af6:	4a48      	ldr	r2, [pc, #288]	@ (8019c18 <RadioIrqProcess+0x42c>)
 8019af8:	4b46      	ldr	r3, [pc, #280]	@ (8019c14 <RadioIrqProcess+0x428>)
 8019afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019afc:	b2db      	uxtb	r3, r3
 8019afe:	4619      	mov	r1, r3
 8019b00:	f640 1005 	movw	r0, #2309	@ 0x905
 8019b04:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8019b06:	4c44      	ldr	r4, [pc, #272]	@ (8019c18 <RadioIrqProcess+0x42c>)
 8019b08:	4b44      	ldr	r3, [pc, #272]	@ (8019c1c <RadioIrqProcess+0x430>)
 8019b0a:	f640 1002 	movw	r0, #2306	@ 0x902
 8019b0e:	4798      	blx	r3
 8019b10:	4603      	mov	r3, r0
 8019b12:	f043 0301 	orr.w	r3, r3, #1
 8019b16:	b2db      	uxtb	r3, r3
 8019b18:	4619      	mov	r1, r3
 8019b1a:	f640 1002 	movw	r0, #2306	@ 0x902
 8019b1e:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8019b20:	4b3c      	ldr	r3, [pc, #240]	@ (8019c14 <RadioIrqProcess+0x428>)
 8019b22:	2200      	movs	r2, #0
 8019b24:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019b26:	2300      	movs	r3, #0
 8019b28:	2200      	movs	r2, #0
 8019b2a:	f240 2162 	movw	r1, #610	@ 0x262
 8019b2e:	f240 2062 	movw	r0, #610	@ 0x262
 8019b32:	f001 f8cf 	bl	801acd4 <SUBGRF_SetDioIrqParams>
        break;
 8019b36:	e05f      	b.n	8019bf8 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8019b38:	4b39      	ldr	r3, [pc, #228]	@ (8019c20 <RadioIrqProcess+0x434>)
 8019b3a:	2201      	movs	r2, #1
 8019b3c:	2100      	movs	r1, #0
 8019b3e:	2002      	movs	r0, #2
 8019b40:	f003 f84a 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8019b44:	f001 ff77 	bl	801ba36 <RFW_Is_Init>
 8019b48:	4603      	mov	r3, r0
 8019b4a:	2b01      	cmp	r3, #1
 8019b4c:	d156      	bne.n	8019bfc <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8019b4e:	f001 ffa8 	bl	801baa2 <RFW_ReceivePayload>
        break;
 8019b52:	e053      	b.n	8019bfc <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8019b54:	4b33      	ldr	r3, [pc, #204]	@ (8019c24 <RadioIrqProcess+0x438>)
 8019b56:	2201      	movs	r2, #1
 8019b58:	2100      	movs	r1, #0
 8019b5a:	2002      	movs	r0, #2
 8019b5c:	f003 f83c 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019b60:	e051      	b.n	8019c06 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8019b62:	4831      	ldr	r0, [pc, #196]	@ (8019c28 <RadioIrqProcess+0x43c>)
 8019b64:	f002 fe2e 	bl	801c7c4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019b68:	4b2a      	ldr	r3, [pc, #168]	@ (8019c14 <RadioIrqProcess+0x428>)
 8019b6a:	785b      	ldrb	r3, [r3, #1]
 8019b6c:	f083 0301 	eor.w	r3, r3, #1
 8019b70:	b2db      	uxtb	r3, r3
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d002      	beq.n	8019b7c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8019b76:	2000      	movs	r0, #0
 8019b78:	f000 fed2 	bl	801a920 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8019c2c <RadioIrqProcess+0x440>)
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d03d      	beq.n	8019c00 <RadioIrqProcess+0x414>
 8019b84:	4b29      	ldr	r3, [pc, #164]	@ (8019c2c <RadioIrqProcess+0x440>)
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	68db      	ldr	r3, [r3, #12]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d038      	beq.n	8019c00 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8019b8e:	4b27      	ldr	r3, [pc, #156]	@ (8019c2c <RadioIrqProcess+0x440>)
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	68db      	ldr	r3, [r3, #12]
 8019b94:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8019b96:	4b26      	ldr	r3, [pc, #152]	@ (8019c30 <RadioIrqProcess+0x444>)
 8019b98:	2201      	movs	r2, #1
 8019b9a:	2100      	movs	r1, #0
 8019b9c:	2002      	movs	r0, #2
 8019b9e:	f003 f81b 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019ba2:	e02d      	b.n	8019c00 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8019ba4:	4b23      	ldr	r3, [pc, #140]	@ (8019c34 <RadioIrqProcess+0x448>)
 8019ba6:	2201      	movs	r2, #1
 8019ba8:	2100      	movs	r1, #0
 8019baa:	2002      	movs	r0, #2
 8019bac:	f003 f814 	bl	801cbd8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8019bb0:	4b18      	ldr	r3, [pc, #96]	@ (8019c14 <RadioIrqProcess+0x428>)
 8019bb2:	785b      	ldrb	r3, [r3, #1]
 8019bb4:	f083 0301 	eor.w	r3, r3, #1
 8019bb8:	b2db      	uxtb	r3, r3
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d002      	beq.n	8019bc4 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8019bbe:	2000      	movs	r0, #0
 8019bc0:	f000 feae 	bl	801a920 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8019bc4:	4b19      	ldr	r3, [pc, #100]	@ (8019c2c <RadioIrqProcess+0x440>)
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d01b      	beq.n	8019c04 <RadioIrqProcess+0x418>
 8019bcc:	4b17      	ldr	r3, [pc, #92]	@ (8019c2c <RadioIrqProcess+0x440>)
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	691b      	ldr	r3, [r3, #16]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d016      	beq.n	8019c04 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8019bd6:	4b15      	ldr	r3, [pc, #84]	@ (8019c2c <RadioIrqProcess+0x440>)
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	691b      	ldr	r3, [r3, #16]
 8019bdc:	4798      	blx	r3
        break;
 8019bde:	e011      	b.n	8019c04 <RadioIrqProcess+0x418>
        break;
 8019be0:	bf00      	nop
 8019be2:	e010      	b.n	8019c06 <RadioIrqProcess+0x41a>
        break;
 8019be4:	bf00      	nop
 8019be6:	e00e      	b.n	8019c06 <RadioIrqProcess+0x41a>
        break;
 8019be8:	bf00      	nop
 8019bea:	e00c      	b.n	8019c06 <RadioIrqProcess+0x41a>
        break;
 8019bec:	bf00      	nop
 8019bee:	e00a      	b.n	8019c06 <RadioIrqProcess+0x41a>
        break;
 8019bf0:	bf00      	nop
 8019bf2:	e008      	b.n	8019c06 <RadioIrqProcess+0x41a>
        break;
 8019bf4:	bf00      	nop
 8019bf6:	e006      	b.n	8019c06 <RadioIrqProcess+0x41a>
        break;
 8019bf8:	bf00      	nop
 8019bfa:	e004      	b.n	8019c06 <RadioIrqProcess+0x41a>
        break;
 8019bfc:	bf00      	nop
 8019bfe:	e002      	b.n	8019c06 <RadioIrqProcess+0x41a>
        break;
 8019c00:	bf00      	nop
 8019c02:	e000      	b.n	8019c06 <RadioIrqProcess+0x41a>
        break;
 8019c04:	bf00      	nop
    }
}
 8019c06:	bf00      	nop
 8019c08:	3708      	adds	r7, #8
 8019c0a:	46bd      	mov	sp, r7
 8019c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8019c0e:	bf00      	nop
 8019c10:	0801dab0 	.word	0x0801dab0
 8019c14:	20001d28 	.word	0x20001d28
 8019c18:	080195fd 	.word	0x080195fd
 8019c1c:	08019621 	.word	0x08019621
 8019c20:	0801dabc 	.word	0x0801dabc
 8019c24:	0801dac8 	.word	0x0801dac8
 8019c28:	20001d9c 	.word	0x20001d9c
 8019c2c:	20001d24 	.word	0x20001d24
 8019c30:	0801dad4 	.word	0x0801dad4
 8019c34:	0801dae0 	.word	0x0801dae0

08019c38 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019c3c:	4b09      	ldr	r3, [pc, #36]	@ (8019c64 <RadioTxPrbs+0x2c>)
 8019c3e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019c42:	2101      	movs	r1, #1
 8019c44:	4618      	mov	r0, r3
 8019c46:	f001 fcfd 	bl	801b644 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8019c4a:	4b07      	ldr	r3, [pc, #28]	@ (8019c68 <RadioTxPrbs+0x30>)
 8019c4c:	212d      	movs	r1, #45	@ 0x2d
 8019c4e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019c52:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019c54:	f000 ff27 	bl	801aaa6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8019c58:	4804      	ldr	r0, [pc, #16]	@ (8019c6c <RadioTxPrbs+0x34>)
 8019c5a:	f000 fe7d 	bl	801a958 <SUBGRF_SetTx>
}
 8019c5e:	bf00      	nop
 8019c60:	bd80      	pop	{r7, pc}
 8019c62:	bf00      	nop
 8019c64:	20001d28 	.word	0x20001d28
 8019c68:	080195fd 	.word	0x080195fd
 8019c6c:	000fffff 	.word	0x000fffff

08019c70 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b084      	sub	sp, #16
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	4603      	mov	r3, r0
 8019c78:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8019c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f001 fd08 	bl	801b694 <SUBGRF_SetRfTxPower>
 8019c84:	4603      	mov	r3, r0
 8019c86:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019c88:	210e      	movs	r1, #14
 8019c8a:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019c8e:	f001 fbcb 	bl	801b428 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019c92:	7bfb      	ldrb	r3, [r7, #15]
 8019c94:	2101      	movs	r1, #1
 8019c96:	4618      	mov	r0, r3
 8019c98:	f001 fcd4 	bl	801b644 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019c9c:	f000 fefa 	bl	801aa94 <SUBGRF_SetTxContinuousWave>
}
 8019ca0:	bf00      	nop
 8019ca2:	3710      	adds	r7, #16
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	bd80      	pop	{r7, pc}

08019ca8 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8019ca8:	b480      	push	{r7}
 8019caa:	b089      	sub	sp, #36	@ 0x24
 8019cac:	af00      	add	r7, sp, #0
 8019cae:	60f8      	str	r0, [r7, #12]
 8019cb0:	60b9      	str	r1, [r7, #8]
 8019cb2:	4613      	mov	r3, r2
 8019cb4:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8019cba:	2300      	movs	r3, #0
 8019cbc:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	61bb      	str	r3, [r7, #24]
 8019cc2:	e011      	b.n	8019ce8 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8019cc4:	69bb      	ldr	r3, [r7, #24]
 8019cc6:	68ba      	ldr	r2, [r7, #8]
 8019cc8:	4413      	add	r3, r2
 8019cca:	781a      	ldrb	r2, [r3, #0]
 8019ccc:	69bb      	ldr	r3, [r7, #24]
 8019cce:	68b9      	ldr	r1, [r7, #8]
 8019cd0:	440b      	add	r3, r1
 8019cd2:	43d2      	mvns	r2, r2
 8019cd4:	b2d2      	uxtb	r2, r2
 8019cd6:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8019cd8:	69bb      	ldr	r3, [r7, #24]
 8019cda:	68fa      	ldr	r2, [r7, #12]
 8019cdc:	4413      	add	r3, r2
 8019cde:	2200      	movs	r2, #0
 8019ce0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8019ce2:	69bb      	ldr	r3, [r7, #24]
 8019ce4:	3301      	adds	r3, #1
 8019ce6:	61bb      	str	r3, [r7, #24]
 8019ce8:	79fb      	ldrb	r3, [r7, #7]
 8019cea:	69ba      	ldr	r2, [r7, #24]
 8019cec:	429a      	cmp	r2, r3
 8019cee:	dbe9      	blt.n	8019cc4 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8019cf0:	2300      	movs	r3, #0
 8019cf2:	61bb      	str	r3, [r7, #24]
 8019cf4:	e049      	b.n	8019d8a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8019cf6:	69bb      	ldr	r3, [r7, #24]
 8019cf8:	425a      	negs	r2, r3
 8019cfa:	f003 0307 	and.w	r3, r3, #7
 8019cfe:	f002 0207 	and.w	r2, r2, #7
 8019d02:	bf58      	it	pl
 8019d04:	4253      	negpl	r3, r2
 8019d06:	b2db      	uxtb	r3, r3
 8019d08:	f1c3 0307 	rsb	r3, r3, #7
 8019d0c:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019d0e:	69bb      	ldr	r3, [r7, #24]
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	da00      	bge.n	8019d16 <payload_integration+0x6e>
 8019d14:	3307      	adds	r3, #7
 8019d16:	10db      	asrs	r3, r3, #3
 8019d18:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019d1a:	69bb      	ldr	r3, [r7, #24]
 8019d1c:	3301      	adds	r3, #1
 8019d1e:	425a      	negs	r2, r3
 8019d20:	f003 0307 	and.w	r3, r3, #7
 8019d24:	f002 0207 	and.w	r2, r2, #7
 8019d28:	bf58      	it	pl
 8019d2a:	4253      	negpl	r3, r2
 8019d2c:	b2db      	uxtb	r3, r3
 8019d2e:	f1c3 0307 	rsb	r3, r3, #7
 8019d32:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8019d34:	69bb      	ldr	r3, [r7, #24]
 8019d36:	3301      	adds	r3, #1
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	da00      	bge.n	8019d3e <payload_integration+0x96>
 8019d3c:	3307      	adds	r3, #7
 8019d3e:	10db      	asrs	r3, r3, #3
 8019d40:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8019d42:	7dbb      	ldrb	r3, [r7, #22]
 8019d44:	68ba      	ldr	r2, [r7, #8]
 8019d46:	4413      	add	r3, r2
 8019d48:	781b      	ldrb	r3, [r3, #0]
 8019d4a:	461a      	mov	r2, r3
 8019d4c:	7dfb      	ldrb	r3, [r7, #23]
 8019d4e:	fa42 f303 	asr.w	r3, r2, r3
 8019d52:	b2db      	uxtb	r3, r3
 8019d54:	f003 0301 	and.w	r3, r3, #1
 8019d58:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8019d5a:	7ffa      	ldrb	r2, [r7, #31]
 8019d5c:	7cfb      	ldrb	r3, [r7, #19]
 8019d5e:	4053      	eors	r3, r2
 8019d60:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8019d62:	7d3b      	ldrb	r3, [r7, #20]
 8019d64:	68fa      	ldr	r2, [r7, #12]
 8019d66:	4413      	add	r3, r2
 8019d68:	781b      	ldrb	r3, [r3, #0]
 8019d6a:	b25a      	sxtb	r2, r3
 8019d6c:	7ff9      	ldrb	r1, [r7, #31]
 8019d6e:	7d7b      	ldrb	r3, [r7, #21]
 8019d70:	fa01 f303 	lsl.w	r3, r1, r3
 8019d74:	b25b      	sxtb	r3, r3
 8019d76:	4313      	orrs	r3, r2
 8019d78:	b259      	sxtb	r1, r3
 8019d7a:	7d3b      	ldrb	r3, [r7, #20]
 8019d7c:	68fa      	ldr	r2, [r7, #12]
 8019d7e:	4413      	add	r3, r2
 8019d80:	b2ca      	uxtb	r2, r1
 8019d82:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8019d84:	69bb      	ldr	r3, [r7, #24]
 8019d86:	3301      	adds	r3, #1
 8019d88:	61bb      	str	r3, [r7, #24]
 8019d8a:	79fb      	ldrb	r3, [r7, #7]
 8019d8c:	00db      	lsls	r3, r3, #3
 8019d8e:	69ba      	ldr	r2, [r7, #24]
 8019d90:	429a      	cmp	r2, r3
 8019d92:	dbb0      	blt.n	8019cf6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019d94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019d98:	01db      	lsls	r3, r3, #7
 8019d9a:	b25a      	sxtb	r2, r3
 8019d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019da0:	019b      	lsls	r3, r3, #6
 8019da2:	b25b      	sxtb	r3, r3
 8019da4:	4313      	orrs	r3, r2
 8019da6:	b25b      	sxtb	r3, r3
 8019da8:	7ffa      	ldrb	r2, [r7, #31]
 8019daa:	2a00      	cmp	r2, #0
 8019dac:	d101      	bne.n	8019db2 <payload_integration+0x10a>
 8019dae:	2220      	movs	r2, #32
 8019db0:	e000      	b.n	8019db4 <payload_integration+0x10c>
 8019db2:	2200      	movs	r2, #0
 8019db4:	4313      	orrs	r3, r2
 8019db6:	b259      	sxtb	r1, r3
 8019db8:	79fb      	ldrb	r3, [r7, #7]
 8019dba:	68fa      	ldr	r2, [r7, #12]
 8019dbc:	4413      	add	r3, r2
 8019dbe:	b2ca      	uxtb	r2, r1
 8019dc0:	701a      	strb	r2, [r3, #0]
}
 8019dc2:	bf00      	nop
 8019dc4:	3724      	adds	r7, #36	@ 0x24
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	bc80      	pop	{r7}
 8019dca:	4770      	bx	lr

08019dcc <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8019dcc:	b580      	push	{r7, lr}
 8019dce:	b08c      	sub	sp, #48	@ 0x30
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	60b9      	str	r1, [r7, #8]
 8019dd4:	607a      	str	r2, [r7, #4]
 8019dd6:	603b      	str	r3, [r7, #0]
 8019dd8:	4603      	mov	r3, r0
 8019dda:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8019ddc:	2300      	movs	r3, #0
 8019dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8019de0:	f107 0320 	add.w	r3, r7, #32
 8019de4:	2200      	movs	r2, #0
 8019de6:	601a      	str	r2, [r3, #0]
 8019de8:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019dea:	f001 fe1e 	bl	801ba2a <RFW_DeInit>

    if( rxContinuous != 0 )
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d001      	beq.n	8019df8 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 8019df4:	2300      	movs	r3, #0
 8019df6:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	bf14      	ite	ne
 8019dfe:	2301      	movne	r3, #1
 8019e00:	2300      	moveq	r3, #0
 8019e02:	b2da      	uxtb	r2, r3
 8019e04:	4ba3      	ldr	r3, [pc, #652]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019e06:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8019e08:	7bfb      	ldrb	r3, [r7, #15]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d003      	beq.n	8019e16 <RadioSetRxGenericConfig+0x4a>
 8019e0e:	2b01      	cmp	r3, #1
 8019e10:	f000 80dc 	beq.w	8019fcc <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019e14:	e195      	b.n	801a142 <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019e16:	68bb      	ldr	r3, [r7, #8]
 8019e18:	689b      	ldr	r3, [r3, #8]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d003      	beq.n	8019e26 <RadioSetRxGenericConfig+0x5a>
 8019e1e:	68bb      	ldr	r3, [r7, #8]
 8019e20:	68db      	ldr	r3, [r3, #12]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d102      	bne.n	8019e2c <RadioSetRxGenericConfig+0x60>
            return -1;
 8019e26:	f04f 33ff 	mov.w	r3, #4294967295
 8019e2a:	e18b      	b.n	801a144 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8019e2c:	68bb      	ldr	r3, [r7, #8]
 8019e2e:	7f9b      	ldrb	r3, [r3, #30]
 8019e30:	2b08      	cmp	r3, #8
 8019e32:	d902      	bls.n	8019e3a <RadioSetRxGenericConfig+0x6e>
            return -1;
 8019e34:	f04f 33ff 	mov.w	r3, #4294967295
 8019e38:	e184      	b.n	801a144 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019e3a:	68bb      	ldr	r3, [r7, #8]
 8019e3c:	6919      	ldr	r1, [r3, #16]
 8019e3e:	68bb      	ldr	r3, [r7, #8]
 8019e40:	7f9b      	ldrb	r3, [r3, #30]
 8019e42:	461a      	mov	r2, r3
 8019e44:	f107 0320 	add.w	r3, r7, #32
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f001 fee1 	bl	801bc10 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019e4e:	68bb      	ldr	r3, [r7, #8]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	bf14      	ite	ne
 8019e56:	2301      	movne	r3, #1
 8019e58:	2300      	moveq	r3, #0
 8019e5a:	b2db      	uxtb	r3, r3
 8019e5c:	4618      	mov	r0, r3
 8019e5e:	f000 fe2b 	bl	801aab8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019e62:	4b8c      	ldr	r3, [pc, #560]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019e64:	2200      	movs	r2, #0
 8019e66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	689b      	ldr	r3, [r3, #8]
 8019e6e:	4a89      	ldr	r2, [pc, #548]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019e70:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019e72:	68bb      	ldr	r3, [r7, #8]
 8019e74:	f893 2020 	ldrb.w	r2, [r3, #32]
 8019e78:	4b86      	ldr	r3, [pc, #536]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019e7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019e7e:	68bb      	ldr	r3, [r7, #8]
 8019e80:	685b      	ldr	r3, [r3, #4]
 8019e82:	4618      	mov	r0, r3
 8019e84:	f001 fd04 	bl	801b890 <SUBGRF_GetFskBandwidthRegValue>
 8019e88:	4603      	mov	r3, r0
 8019e8a:	461a      	mov	r2, r3
 8019e8c:	4b81      	ldr	r3, [pc, #516]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019e8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019e92:	4b80      	ldr	r3, [pc, #512]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019e94:	2200      	movs	r2, #0
 8019e96:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019e98:	68bb      	ldr	r3, [r7, #8]
 8019e9a:	68db      	ldr	r3, [r3, #12]
 8019e9c:	b29b      	uxth	r3, r3
 8019e9e:	00db      	lsls	r3, r3, #3
 8019ea0:	b29a      	uxth	r2, r3
 8019ea2:	4b7c      	ldr	r3, [pc, #496]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019ea4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019ea6:	68bb      	ldr	r3, [r7, #8]
 8019ea8:	7fda      	ldrb	r2, [r3, #31]
 8019eaa:	4b7a      	ldr	r3, [pc, #488]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019eac:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019eae:	68bb      	ldr	r3, [r7, #8]
 8019eb0:	7f9b      	ldrb	r3, [r3, #30]
 8019eb2:	00db      	lsls	r3, r3, #3
 8019eb4:	b2da      	uxtb	r2, r3
 8019eb6:	4b77      	ldr	r3, [pc, #476]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019eb8:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019eba:	68bb      	ldr	r3, [r7, #8]
 8019ebc:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8019ec0:	4b74      	ldr	r3, [pc, #464]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019ec2:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8019ec4:	68bb      	ldr	r3, [r7, #8]
 8019ec6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d105      	bne.n	8019eda <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019ece:	68bb      	ldr	r3, [r7, #8]
 8019ed0:	695b      	ldr	r3, [r3, #20]
 8019ed2:	b2da      	uxtb	r2, r3
 8019ed4:	4b6f      	ldr	r3, [pc, #444]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019ed6:	759a      	strb	r2, [r3, #22]
 8019ed8:	e00b      	b.n	8019ef2 <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019eda:	68bb      	ldr	r3, [r7, #8]
 8019edc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019ee0:	2b02      	cmp	r3, #2
 8019ee2:	d103      	bne.n	8019eec <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019ee4:	4b6b      	ldr	r3, [pc, #428]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019ee6:	22ff      	movs	r2, #255	@ 0xff
 8019ee8:	759a      	strb	r2, [r3, #22]
 8019eea:	e002      	b.n	8019ef2 <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019eec:	4b69      	ldr	r3, [pc, #420]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019eee:	22ff      	movs	r2, #255	@ 0xff
 8019ef0:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8019ef2:	68bb      	ldr	r3, [r7, #8]
 8019ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019ef8:	2b02      	cmp	r3, #2
 8019efa:	d004      	beq.n	8019f06 <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019efc:	68bb      	ldr	r3, [r7, #8]
 8019efe:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019f02:	2b02      	cmp	r3, #2
 8019f04:	d12d      	bne.n	8019f62 <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8019f06:	68bb      	ldr	r3, [r7, #8]
 8019f08:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019f0c:	2bf1      	cmp	r3, #241	@ 0xf1
 8019f0e:	d00c      	beq.n	8019f2a <RadioSetRxGenericConfig+0x15e>
 8019f10:	68bb      	ldr	r3, [r7, #8]
 8019f12:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019f16:	2bf2      	cmp	r3, #242	@ 0xf2
 8019f18:	d007      	beq.n	8019f2a <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019f1a:	68bb      	ldr	r3, [r7, #8]
 8019f1c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019f20:	2b01      	cmp	r3, #1
 8019f22:	d002      	beq.n	8019f2a <RadioSetRxGenericConfig+0x15e>
                return -1;
 8019f24:	f04f 33ff 	mov.w	r3, #4294967295
 8019f28:	e10c      	b.n	801a144 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8019f2e:	68bb      	ldr	r3, [r7, #8]
 8019f30:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019f32:	4b59      	ldr	r3, [pc, #356]	@ (801a098 <RadioSetRxGenericConfig+0x2cc>)
 8019f34:	6819      	ldr	r1, [r3, #0]
 8019f36:	f107 0314 	add.w	r3, r7, #20
 8019f3a:	4a58      	ldr	r2, [pc, #352]	@ (801a09c <RadioSetRxGenericConfig+0x2d0>)
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	f001 fd67 	bl	801ba10 <RFW_Init>
 8019f42:	4603      	mov	r3, r0
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d002      	beq.n	8019f4e <RadioSetRxGenericConfig+0x182>
                return -1;
 8019f48:	f04f 33ff 	mov.w	r3, #4294967295
 8019f4c:	e0fa      	b.n	801a144 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019f4e:	4b51      	ldr	r3, [pc, #324]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019f50:	2200      	movs	r2, #0
 8019f52:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019f54:	4b4f      	ldr	r3, [pc, #316]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019f56:	2201      	movs	r2, #1
 8019f58:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019f5a:	4b4e      	ldr	r3, [pc, #312]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019f5c:	2200      	movs	r2, #0
 8019f5e:	755a      	strb	r2, [r3, #21]
        {
 8019f60:	e00e      	b.n	8019f80 <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019f62:	68bb      	ldr	r3, [r7, #8]
 8019f64:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8019f68:	4b4a      	ldr	r3, [pc, #296]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019f6a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019f6c:	68bb      	ldr	r3, [r7, #8]
 8019f6e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8019f72:	4b48      	ldr	r3, [pc, #288]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019f74:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8019f76:	68bb      	ldr	r3, [r7, #8]
 8019f78:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8019f7c:	4b45      	ldr	r3, [pc, #276]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019f7e:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019f80:	f7ff fa3b 	bl	80193fa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019f84:	2000      	movs	r0, #0
 8019f86:	f7fe fbcf 	bl	8018728 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019f8a:	4845      	ldr	r0, [pc, #276]	@ (801a0a0 <RadioSetRxGenericConfig+0x2d4>)
 8019f8c:	f001 f838 	bl	801b000 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019f90:	4844      	ldr	r0, [pc, #272]	@ (801a0a4 <RadioSetRxGenericConfig+0x2d8>)
 8019f92:	f001 f903 	bl	801b19c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019f96:	f107 0320 	add.w	r3, r7, #32
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	f000 fbc3 	bl	801a726 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019fa0:	68bb      	ldr	r3, [r7, #8]
 8019fa2:	8b9b      	ldrh	r3, [r3, #28]
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f000 fc0d 	bl	801a7c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019faa:	68bb      	ldr	r3, [r7, #8]
 8019fac:	8b1b      	ldrh	r3, [r3, #24]
 8019fae:	4618      	mov	r0, r3
 8019fb0:	f000 fbe8 	bl	801a784 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8019fb4:	683b      	ldr	r3, [r7, #0]
 8019fb6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8019fba:	fb03 f202 	mul.w	r2, r3, r2
 8019fbe:	68bb      	ldr	r3, [r7, #8]
 8019fc0:	689b      	ldr	r3, [r3, #8]
 8019fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019fc6:	4a33      	ldr	r2, [pc, #204]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 8019fc8:	6093      	str	r3, [r2, #8]
        break;
 8019fca:	e0ba      	b.n	801a142 <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8019fcc:	68bb      	ldr	r3, [r7, #8]
 8019fce:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d102      	bne.n	8019fda <RadioSetRxGenericConfig+0x20e>
            return -1;
 8019fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8019fd8:	e0b4      	b.n	801a144 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019fda:	68bb      	ldr	r3, [r7, #8]
 8019fdc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8019fe0:	2b01      	cmp	r3, #1
 8019fe2:	d105      	bne.n	8019ff0 <RadioSetRxGenericConfig+0x224>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 8019fe4:	68bb      	ldr	r3, [r7, #8]
 8019fe6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8019fea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8019fee:	e002      	b.n	8019ff6 <RadioSetRxGenericConfig+0x22a>
            MaxPayloadLength = 0xFF;
 8019ff0:	23ff      	movs	r3, #255	@ 0xff
 8019ff2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019ff6:	68bb      	ldr	r3, [r7, #8]
 8019ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	bf14      	ite	ne
 8019ffe:	2301      	movne	r3, #1
 801a000:	2300      	moveq	r3, #0
 801a002:	b2db      	uxtb	r3, r3
 801a004:	4618      	mov	r0, r3
 801a006:	f000 fd57 	bl	801aab8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a00a:	683b      	ldr	r3, [r7, #0]
 801a00c:	b2db      	uxtb	r3, r3
 801a00e:	4618      	mov	r0, r3
 801a010:	f000 fd61 	bl	801aad6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a014:	4b1f      	ldr	r3, [pc, #124]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 801a016:	2201      	movs	r2, #1
 801a018:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a01c:	68bb      	ldr	r3, [r7, #8]
 801a01e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801a022:	4b1c      	ldr	r3, [pc, #112]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 801a024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801a02e:	4b19      	ldr	r3, [pc, #100]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 801a030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a034:	68bb      	ldr	r3, [r7, #8]
 801a036:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801a03a:	4b16      	ldr	r3, [pc, #88]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 801a03c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801a040:	68bb      	ldr	r3, [r7, #8]
 801a042:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a046:	2b02      	cmp	r3, #2
 801a048:	d010      	beq.n	801a06c <RadioSetRxGenericConfig+0x2a0>
 801a04a:	2b02      	cmp	r3, #2
 801a04c:	dc2c      	bgt.n	801a0a8 <RadioSetRxGenericConfig+0x2dc>
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d002      	beq.n	801a058 <RadioSetRxGenericConfig+0x28c>
 801a052:	2b01      	cmp	r3, #1
 801a054:	d005      	beq.n	801a062 <RadioSetRxGenericConfig+0x296>
            break;
 801a056:	e027      	b.n	801a0a8 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a058:	4b0e      	ldr	r3, [pc, #56]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 801a05a:	2200      	movs	r2, #0
 801a05c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a060:	e023      	b.n	801a0aa <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a062:	4b0c      	ldr	r3, [pc, #48]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 801a064:	2201      	movs	r2, #1
 801a066:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a06a:	e01e      	b.n	801a0aa <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a06c:	68bb      	ldr	r3, [r7, #8]
 801a06e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a072:	2b0b      	cmp	r3, #11
 801a074:	d004      	beq.n	801a080 <RadioSetRxGenericConfig+0x2b4>
 801a076:	68bb      	ldr	r3, [r7, #8]
 801a078:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a07c:	2b0c      	cmp	r3, #12
 801a07e:	d104      	bne.n	801a08a <RadioSetRxGenericConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a080:	4b04      	ldr	r3, [pc, #16]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 801a082:	2201      	movs	r2, #1
 801a084:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a088:	e00f      	b.n	801a0aa <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a08a:	4b02      	ldr	r3, [pc, #8]	@ (801a094 <RadioSetRxGenericConfig+0x2c8>)
 801a08c:	2200      	movs	r2, #0
 801a08e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a092:	e00a      	b.n	801a0aa <RadioSetRxGenericConfig+0x2de>
 801a094:	20001d28 	.word	0x20001d28
 801a098:	20001d24 	.word	0x20001d24
 801a09c:	20001d9c 	.word	0x20001d9c
 801a0a0:	20001d60 	.word	0x20001d60
 801a0a4:	20001d36 	.word	0x20001d36
            break;
 801a0a8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a0aa:	4b28      	ldr	r3, [pc, #160]	@ (801a14c <RadioSetRxGenericConfig+0x380>)
 801a0ac:	2201      	movs	r2, #1
 801a0ae:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a0b0:	68bb      	ldr	r3, [r7, #8]
 801a0b2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 801a0b4:	4b25      	ldr	r3, [pc, #148]	@ (801a14c <RadioSetRxGenericConfig+0x380>)
 801a0b6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a0b8:	68bb      	ldr	r3, [r7, #8]
 801a0ba:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 801a0be:	4b23      	ldr	r3, [pc, #140]	@ (801a14c <RadioSetRxGenericConfig+0x380>)
 801a0c0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a0c2:	4a22      	ldr	r2, [pc, #136]	@ (801a14c <RadioSetRxGenericConfig+0x380>)
 801a0c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a0c8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a0ca:	68bb      	ldr	r3, [r7, #8]
 801a0cc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 801a0d0:	4b1e      	ldr	r3, [pc, #120]	@ (801a14c <RadioSetRxGenericConfig+0x380>)
 801a0d2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a0d6:	68bb      	ldr	r3, [r7, #8]
 801a0d8:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 801a0dc:	4b1b      	ldr	r3, [pc, #108]	@ (801a14c <RadioSetRxGenericConfig+0x380>)
 801a0de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801a0e2:	f7ff f98a 	bl	80193fa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a0e6:	2001      	movs	r0, #1
 801a0e8:	f7fe fb1e 	bl	8018728 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a0ec:	4818      	ldr	r0, [pc, #96]	@ (801a150 <RadioSetRxGenericConfig+0x384>)
 801a0ee:	f000 ff87 	bl	801b000 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a0f2:	4818      	ldr	r0, [pc, #96]	@ (801a154 <RadioSetRxGenericConfig+0x388>)
 801a0f4:	f001 f852 	bl	801b19c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a0f8:	4b14      	ldr	r3, [pc, #80]	@ (801a14c <RadioSetRxGenericConfig+0x380>)
 801a0fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801a0fe:	2b01      	cmp	r3, #1
 801a100:	d10d      	bne.n	801a11e <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a102:	f240 7036 	movw	r0, #1846	@ 0x736
 801a106:	f001 f9b1 	bl	801b46c <SUBGRF_ReadRegister>
 801a10a:	4603      	mov	r3, r0
 801a10c:	f023 0304 	bic.w	r3, r3, #4
 801a110:	b2db      	uxtb	r3, r3
 801a112:	4619      	mov	r1, r3
 801a114:	f240 7036 	movw	r0, #1846	@ 0x736
 801a118:	f001 f986 	bl	801b428 <SUBGRF_WriteRegister>
 801a11c:	e00c      	b.n	801a138 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a11e:	f240 7036 	movw	r0, #1846	@ 0x736
 801a122:	f001 f9a3 	bl	801b46c <SUBGRF_ReadRegister>
 801a126:	4603      	mov	r3, r0
 801a128:	f043 0304 	orr.w	r3, r3, #4
 801a12c:	b2db      	uxtb	r3, r3
 801a12e:	4619      	mov	r1, r3
 801a130:	f240 7036 	movw	r0, #1846	@ 0x736
 801a134:	f001 f978 	bl	801b428 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a138:	4b04      	ldr	r3, [pc, #16]	@ (801a14c <RadioSetRxGenericConfig+0x380>)
 801a13a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a13e:	609a      	str	r2, [r3, #8]
        break;
 801a140:	bf00      	nop
    }
    return status;
 801a142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a144:	4618      	mov	r0, r3
 801a146:	3730      	adds	r7, #48	@ 0x30
 801a148:	46bd      	mov	sp, r7
 801a14a:	bd80      	pop	{r7, pc}
 801a14c:	20001d28 	.word	0x20001d28
 801a150:	20001d60 	.word	0x20001d60
 801a154:	20001d36 	.word	0x20001d36

0801a158 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b08e      	sub	sp, #56	@ 0x38
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	60b9      	str	r1, [r7, #8]
 801a160:	607b      	str	r3, [r7, #4]
 801a162:	4603      	mov	r3, r0
 801a164:	73fb      	strb	r3, [r7, #15]
 801a166:	4613      	mov	r3, r2
 801a168:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801a16a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a16e:	2200      	movs	r2, #0
 801a170:	601a      	str	r2, [r3, #0]
 801a172:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a174:	f001 fc59 	bl	801ba2a <RFW_DeInit>
    switch( modem )
 801a178:	7bfb      	ldrb	r3, [r7, #15]
 801a17a:	2b03      	cmp	r3, #3
 801a17c:	f200 8205 	bhi.w	801a58a <RadioSetTxGenericConfig+0x432>
 801a180:	a201      	add	r2, pc, #4	@ (adr r2, 801a188 <RadioSetTxGenericConfig+0x30>)
 801a182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a186:	bf00      	nop
 801a188:	0801a30d 	.word	0x0801a30d
 801a18c:	0801a455 	.word	0x0801a455
 801a190:	0801a54d 	.word	0x0801a54d
 801a194:	0801a199 	.word	0x0801a199
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801a198:	68bb      	ldr	r3, [r7, #8]
 801a19a:	7c9b      	ldrb	r3, [r3, #18]
 801a19c:	2b08      	cmp	r3, #8
 801a19e:	d902      	bls.n	801a1a6 <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 801a1a0:	f04f 33ff 	mov.w	r3, #4294967295
 801a1a4:	e206      	b.n	801a5b4 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801a1a6:	68bb      	ldr	r3, [r7, #8]
 801a1a8:	6899      	ldr	r1, [r3, #8]
 801a1aa:	68bb      	ldr	r3, [r7, #8]
 801a1ac:	7c9b      	ldrb	r3, [r3, #18]
 801a1ae:	461a      	mov	r2, r3
 801a1b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	f001 fd2b 	bl	801bc10 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801a1ba:	68bb      	ldr	r3, [r7, #8]
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d102      	bne.n	801a1c8 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 801a1c2:	f04f 33ff 	mov.w	r3, #4294967295
 801a1c6:	e1f5      	b.n	801a5b4 <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 801a1c8:	68bb      	ldr	r3, [r7, #8]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	f242 7210 	movw	r2, #10000	@ 0x2710
 801a1d0:	4293      	cmp	r3, r2
 801a1d2:	d813      	bhi.n	801a1fc <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801a1d4:	2302      	movs	r3, #2
 801a1d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801a1da:	4b99      	ldr	r3, [pc, #612]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a1dc:	2203      	movs	r2, #3
 801a1de:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801a1e0:	4b97      	ldr	r3, [pc, #604]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a1e2:	2203      	movs	r2, #3
 801a1e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a1e8:	68bb      	ldr	r3, [r7, #8]
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	4a94      	ldr	r2, [pc, #592]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a1ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a1f0:	68bb      	ldr	r3, [r7, #8]
 801a1f2:	7cda      	ldrb	r2, [r3, #19]
 801a1f4:	4b92      	ldr	r3, [pc, #584]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a1f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a1fa:	e017      	b.n	801a22c <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a202:	4b8f      	ldr	r3, [pc, #572]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a204:	2200      	movs	r2, #0
 801a206:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a208:	4b8d      	ldr	r3, [pc, #564]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a20a:	2200      	movs	r2, #0
 801a20c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a210:	68bb      	ldr	r3, [r7, #8]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	4a8a      	ldr	r2, [pc, #552]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a216:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	7cda      	ldrb	r2, [r3, #19]
 801a21c:	4b88      	ldr	r3, [pc, #544]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a21e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801a222:	68bb      	ldr	r3, [r7, #8]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	089b      	lsrs	r3, r3, #2
 801a228:	4a85      	ldr	r2, [pc, #532]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a22a:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801a22c:	68bb      	ldr	r3, [r7, #8]
 801a22e:	685b      	ldr	r3, [r3, #4]
 801a230:	b29b      	uxth	r3, r3
 801a232:	00db      	lsls	r3, r3, #3
 801a234:	b29a      	uxth	r2, r3
 801a236:	4b82      	ldr	r3, [pc, #520]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a238:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a23a:	4b81      	ldr	r3, [pc, #516]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a23c:	2204      	movs	r2, #4
 801a23e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801a240:	68bb      	ldr	r3, [r7, #8]
 801a242:	7c9b      	ldrb	r3, [r3, #18]
 801a244:	00db      	lsls	r3, r3, #3
 801a246:	b2da      	uxtb	r2, r3
 801a248:	4b7d      	ldr	r3, [pc, #500]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a24a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a24c:	4b7c      	ldr	r3, [pc, #496]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a24e:	2200      	movs	r2, #0
 801a250:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a252:	68bb      	ldr	r3, [r7, #8]
 801a254:	7d9b      	ldrb	r3, [r3, #22]
 801a256:	2b02      	cmp	r3, #2
 801a258:	d003      	beq.n	801a262 <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a25a:	68bb      	ldr	r3, [r7, #8]
 801a25c:	7d1b      	ldrb	r3, [r3, #20]
 801a25e:	2b02      	cmp	r3, #2
 801a260:	d12b      	bne.n	801a2ba <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a262:	68bb      	ldr	r3, [r7, #8]
 801a264:	7d5b      	ldrb	r3, [r3, #21]
 801a266:	2bf1      	cmp	r3, #241	@ 0xf1
 801a268:	d00a      	beq.n	801a280 <RadioSetTxGenericConfig+0x128>
 801a26a:	68bb      	ldr	r3, [r7, #8]
 801a26c:	7d5b      	ldrb	r3, [r3, #21]
 801a26e:	2bf2      	cmp	r3, #242	@ 0xf2
 801a270:	d006      	beq.n	801a280 <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a272:	68bb      	ldr	r3, [r7, #8]
 801a274:	7d5b      	ldrb	r3, [r3, #21]
 801a276:	2b01      	cmp	r3, #1
 801a278:	d002      	beq.n	801a280 <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 801a27a:	f04f 33ff 	mov.w	r3, #4294967295
 801a27e:	e199      	b.n	801a5b4 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801a280:	68bb      	ldr	r3, [r7, #8]
 801a282:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801a284:	2301      	movs	r3, #1
 801a286:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a28a:	4b6e      	ldr	r3, [pc, #440]	@ (801a444 <RadioSetTxGenericConfig+0x2ec>)
 801a28c:	6819      	ldr	r1, [r3, #0]
 801a28e:	f107 0320 	add.w	r3, r7, #32
 801a292:	4a6d      	ldr	r2, [pc, #436]	@ (801a448 <RadioSetTxGenericConfig+0x2f0>)
 801a294:	4618      	mov	r0, r3
 801a296:	f001 fbbb 	bl	801ba10 <RFW_Init>
 801a29a:	4603      	mov	r3, r0
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d002      	beq.n	801a2a6 <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 801a2a0:	f04f 33ff 	mov.w	r3, #4294967295
 801a2a4:	e186      	b.n	801a5b4 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a2a6:	4b66      	ldr	r3, [pc, #408]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a2a8:	2200      	movs	r2, #0
 801a2aa:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a2ac:	4b64      	ldr	r3, [pc, #400]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a2ae:	2201      	movs	r2, #1
 801a2b0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a2b2:	4b63      	ldr	r3, [pc, #396]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a2b4:	2200      	movs	r2, #0
 801a2b6:	755a      	strb	r2, [r3, #21]
        {
 801a2b8:	e00b      	b.n	801a2d2 <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801a2ba:	68bb      	ldr	r3, [r7, #8]
 801a2bc:	7d5a      	ldrb	r2, [r3, #21]
 801a2be:	4b60      	ldr	r3, [pc, #384]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a2c0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801a2c2:	68bb      	ldr	r3, [r7, #8]
 801a2c4:	7d9a      	ldrb	r2, [r3, #22]
 801a2c6:	4b5e      	ldr	r3, [pc, #376]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a2c8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801a2ca:	68bb      	ldr	r3, [r7, #8]
 801a2cc:	7d1a      	ldrb	r2, [r3, #20]
 801a2ce:	4b5c      	ldr	r3, [pc, #368]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a2d0:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a2d2:	f7ff f892 	bl	80193fa <RadioStandby>
        RadioSetModem( radio_modem );
 801a2d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a2da:	4618      	mov	r0, r3
 801a2dc:	f7fe fa24 	bl	8018728 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a2e0:	485a      	ldr	r0, [pc, #360]	@ (801a44c <RadioSetTxGenericConfig+0x2f4>)
 801a2e2:	f000 fe8d 	bl	801b000 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a2e6:	485a      	ldr	r0, [pc, #360]	@ (801a450 <RadioSetTxGenericConfig+0x2f8>)
 801a2e8:	f000 ff58 	bl	801b19c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a2ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	f000 fa18 	bl	801a726 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801a2f6:	68bb      	ldr	r3, [r7, #8]
 801a2f8:	8a1b      	ldrh	r3, [r3, #16]
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	f000 fa62 	bl	801a7c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801a300:	68bb      	ldr	r3, [r7, #8]
 801a302:	899b      	ldrh	r3, [r3, #12]
 801a304:	4618      	mov	r0, r3
 801a306:	f000 fa3d 	bl	801a784 <SUBGRF_SetCrcPolynomial>
        break;
 801a30a:	e13f      	b.n	801a58c <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801a30c:	68bb      	ldr	r3, [r7, #8]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	2b00      	cmp	r3, #0
 801a312:	d102      	bne.n	801a31a <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 801a314:	f04f 33ff 	mov.w	r3, #4294967295
 801a318:	e14c      	b.n	801a5b4 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 801a31a:	68bb      	ldr	r3, [r7, #8]
 801a31c:	7c9b      	ldrb	r3, [r3, #18]
 801a31e:	2b08      	cmp	r3, #8
 801a320:	d902      	bls.n	801a328 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 801a322:	f04f 33ff 	mov.w	r3, #4294967295
 801a326:	e145      	b.n	801a5b4 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a328:	68bb      	ldr	r3, [r7, #8]
 801a32a:	6899      	ldr	r1, [r3, #8]
 801a32c:	68bb      	ldr	r3, [r7, #8]
 801a32e:	7c9b      	ldrb	r3, [r3, #18]
 801a330:	461a      	mov	r2, r3
 801a332:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a336:	4618      	mov	r0, r3
 801a338:	f001 fc6a 	bl	801bc10 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a33c:	4b40      	ldr	r3, [pc, #256]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a33e:	2200      	movs	r2, #0
 801a340:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a344:	68bb      	ldr	r3, [r7, #8]
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	4a3d      	ldr	r2, [pc, #244]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a34a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a34c:	68bb      	ldr	r3, [r7, #8]
 801a34e:	7cda      	ldrb	r2, [r3, #19]
 801a350:	4b3b      	ldr	r3, [pc, #236]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801a356:	68bb      	ldr	r3, [r7, #8]
 801a358:	699b      	ldr	r3, [r3, #24]
 801a35a:	4a39      	ldr	r2, [pc, #228]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a35c:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a35e:	4b38      	ldr	r3, [pc, #224]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a360:	2200      	movs	r2, #0
 801a362:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801a364:	68bb      	ldr	r3, [r7, #8]
 801a366:	685b      	ldr	r3, [r3, #4]
 801a368:	b29b      	uxth	r3, r3
 801a36a:	00db      	lsls	r3, r3, #3
 801a36c:	b29a      	uxth	r2, r3
 801a36e:	4b34      	ldr	r3, [pc, #208]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a370:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a372:	4b33      	ldr	r3, [pc, #204]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a374:	2204      	movs	r2, #4
 801a376:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	7c9b      	ldrb	r3, [r3, #18]
 801a37c:	00db      	lsls	r3, r3, #3
 801a37e:	b2da      	uxtb	r2, r3
 801a380:	4b2f      	ldr	r3, [pc, #188]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a382:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a384:	4b2e      	ldr	r3, [pc, #184]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a386:	2200      	movs	r2, #0
 801a388:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a38a:	68bb      	ldr	r3, [r7, #8]
 801a38c:	7d9b      	ldrb	r3, [r3, #22]
 801a38e:	2b02      	cmp	r3, #2
 801a390:	d003      	beq.n	801a39a <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a392:	68bb      	ldr	r3, [r7, #8]
 801a394:	7d1b      	ldrb	r3, [r3, #20]
 801a396:	2b02      	cmp	r3, #2
 801a398:	d12a      	bne.n	801a3f0 <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a39a:	68bb      	ldr	r3, [r7, #8]
 801a39c:	7d5b      	ldrb	r3, [r3, #21]
 801a39e:	2bf1      	cmp	r3, #241	@ 0xf1
 801a3a0:	d00a      	beq.n	801a3b8 <RadioSetTxGenericConfig+0x260>
 801a3a2:	68bb      	ldr	r3, [r7, #8]
 801a3a4:	7d5b      	ldrb	r3, [r3, #21]
 801a3a6:	2bf2      	cmp	r3, #242	@ 0xf2
 801a3a8:	d006      	beq.n	801a3b8 <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a3aa:	68bb      	ldr	r3, [r7, #8]
 801a3ac:	7d5b      	ldrb	r3, [r3, #21]
 801a3ae:	2b01      	cmp	r3, #1
 801a3b0:	d002      	beq.n	801a3b8 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 801a3b2:	f04f 33ff 	mov.w	r3, #4294967295
 801a3b6:	e0fd      	b.n	801a5b4 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801a3b8:	2301      	movs	r3, #1
 801a3ba:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801a3bc:	68bb      	ldr	r3, [r7, #8]
 801a3be:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a3c0:	4b20      	ldr	r3, [pc, #128]	@ (801a444 <RadioSetTxGenericConfig+0x2ec>)
 801a3c2:	6819      	ldr	r1, [r3, #0]
 801a3c4:	f107 0314 	add.w	r3, r7, #20
 801a3c8:	4a1f      	ldr	r2, [pc, #124]	@ (801a448 <RadioSetTxGenericConfig+0x2f0>)
 801a3ca:	4618      	mov	r0, r3
 801a3cc:	f001 fb20 	bl	801ba10 <RFW_Init>
 801a3d0:	4603      	mov	r3, r0
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d002      	beq.n	801a3dc <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 801a3d6:	f04f 33ff 	mov.w	r3, #4294967295
 801a3da:	e0eb      	b.n	801a5b4 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a3dc:	4b18      	ldr	r3, [pc, #96]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a3de:	2200      	movs	r2, #0
 801a3e0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a3e2:	4b17      	ldr	r3, [pc, #92]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a3e4:	2201      	movs	r2, #1
 801a3e6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a3e8:	4b15      	ldr	r3, [pc, #84]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a3ea:	2200      	movs	r2, #0
 801a3ec:	755a      	strb	r2, [r3, #21]
        {
 801a3ee:	e00b      	b.n	801a408 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a3f0:	68bb      	ldr	r3, [r7, #8]
 801a3f2:	7d5a      	ldrb	r2, [r3, #21]
 801a3f4:	4b12      	ldr	r3, [pc, #72]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a3f6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a3f8:	68bb      	ldr	r3, [r7, #8]
 801a3fa:	7d9a      	ldrb	r2, [r3, #22]
 801a3fc:	4b10      	ldr	r3, [pc, #64]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a3fe:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a400:	68bb      	ldr	r3, [r7, #8]
 801a402:	7d1a      	ldrb	r2, [r3, #20]
 801a404:	4b0e      	ldr	r3, [pc, #56]	@ (801a440 <RadioSetTxGenericConfig+0x2e8>)
 801a406:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a408:	f7fe fff7 	bl	80193fa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a40c:	2000      	movs	r0, #0
 801a40e:	f7fe f98b 	bl	8018728 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a412:	480e      	ldr	r0, [pc, #56]	@ (801a44c <RadioSetTxGenericConfig+0x2f4>)
 801a414:	f000 fdf4 	bl	801b000 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a418:	480d      	ldr	r0, [pc, #52]	@ (801a450 <RadioSetTxGenericConfig+0x2f8>)
 801a41a:	f000 febf 	bl	801b19c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a41e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a422:	4618      	mov	r0, r3
 801a424:	f000 f97f 	bl	801a726 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a428:	68bb      	ldr	r3, [r7, #8]
 801a42a:	8a1b      	ldrh	r3, [r3, #16]
 801a42c:	4618      	mov	r0, r3
 801a42e:	f000 f9c9 	bl	801a7c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a432:	68bb      	ldr	r3, [r7, #8]
 801a434:	899b      	ldrh	r3, [r3, #12]
 801a436:	4618      	mov	r0, r3
 801a438:	f000 f9a4 	bl	801a784 <SUBGRF_SetCrcPolynomial>
        break;
 801a43c:	e0a6      	b.n	801a58c <RadioSetTxGenericConfig+0x434>
 801a43e:	bf00      	nop
 801a440:	20001d28 	.word	0x20001d28
 801a444:	20001d24 	.word	0x20001d24
 801a448:	20001d84 	.word	0x20001d84
 801a44c:	20001d60 	.word	0x20001d60
 801a450:	20001d36 	.word	0x20001d36
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a454:	4b59      	ldr	r3, [pc, #356]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a456:	2201      	movs	r2, #1
 801a458:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a45c:	68bb      	ldr	r3, [r7, #8]
 801a45e:	781a      	ldrb	r2, [r3, #0]
 801a460:	4b56      	ldr	r3, [pc, #344]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a466:	68bb      	ldr	r3, [r7, #8]
 801a468:	785a      	ldrb	r2, [r3, #1]
 801a46a:	4b54      	ldr	r3, [pc, #336]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a46c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a470:	68bb      	ldr	r3, [r7, #8]
 801a472:	789a      	ldrb	r2, [r3, #2]
 801a474:	4b51      	ldr	r3, [pc, #324]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a476:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801a47a:	68bb      	ldr	r3, [r7, #8]
 801a47c:	78db      	ldrb	r3, [r3, #3]
 801a47e:	2b02      	cmp	r3, #2
 801a480:	d010      	beq.n	801a4a4 <RadioSetTxGenericConfig+0x34c>
 801a482:	2b02      	cmp	r3, #2
 801a484:	dc20      	bgt.n	801a4c8 <RadioSetTxGenericConfig+0x370>
 801a486:	2b00      	cmp	r3, #0
 801a488:	d002      	beq.n	801a490 <RadioSetTxGenericConfig+0x338>
 801a48a:	2b01      	cmp	r3, #1
 801a48c:	d005      	beq.n	801a49a <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801a48e:	e01b      	b.n	801a4c8 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a490:	4b4a      	ldr	r3, [pc, #296]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a492:	2200      	movs	r2, #0
 801a494:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a498:	e017      	b.n	801a4ca <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a49a:	4b48      	ldr	r3, [pc, #288]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a49c:	2201      	movs	r2, #1
 801a49e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a4a2:	e012      	b.n	801a4ca <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a4a4:	68bb      	ldr	r3, [r7, #8]
 801a4a6:	781b      	ldrb	r3, [r3, #0]
 801a4a8:	2b0b      	cmp	r3, #11
 801a4aa:	d003      	beq.n	801a4b4 <RadioSetTxGenericConfig+0x35c>
 801a4ac:	68bb      	ldr	r3, [r7, #8]
 801a4ae:	781b      	ldrb	r3, [r3, #0]
 801a4b0:	2b0c      	cmp	r3, #12
 801a4b2:	d104      	bne.n	801a4be <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a4b4:	4b41      	ldr	r3, [pc, #260]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a4b6:	2201      	movs	r2, #1
 801a4b8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a4bc:	e005      	b.n	801a4ca <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a4be:	4b3f      	ldr	r3, [pc, #252]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a4c0:	2200      	movs	r2, #0
 801a4c2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a4c6:	e000      	b.n	801a4ca <RadioSetTxGenericConfig+0x372>
            break;
 801a4c8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a4ca:	4b3c      	ldr	r3, [pc, #240]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a4cc:	2201      	movs	r2, #1
 801a4ce:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a4d0:	68bb      	ldr	r3, [r7, #8]
 801a4d2:	889a      	ldrh	r2, [r3, #4]
 801a4d4:	4b39      	ldr	r3, [pc, #228]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a4d6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a4d8:	68bb      	ldr	r3, [r7, #8]
 801a4da:	799a      	ldrb	r2, [r3, #6]
 801a4dc:	4b37      	ldr	r3, [pc, #220]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a4de:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a4e0:	68bb      	ldr	r3, [r7, #8]
 801a4e2:	79da      	ldrb	r2, [r3, #7]
 801a4e4:	4b35      	ldr	r3, [pc, #212]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a4e6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a4ea:	68bb      	ldr	r3, [r7, #8]
 801a4ec:	7a1a      	ldrb	r2, [r3, #8]
 801a4ee:	4b33      	ldr	r3, [pc, #204]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a4f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 801a4f4:	f7fe ff81 	bl	80193fa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a4f8:	2001      	movs	r0, #1
 801a4fa:	f7fe f915 	bl	8018728 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a4fe:	4830      	ldr	r0, [pc, #192]	@ (801a5c0 <RadioSetTxGenericConfig+0x468>)
 801a500:	f000 fd7e 	bl	801b000 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a504:	482f      	ldr	r0, [pc, #188]	@ (801a5c4 <RadioSetTxGenericConfig+0x46c>)
 801a506:	f000 fe49 	bl	801b19c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801a50a:	4b2c      	ldr	r3, [pc, #176]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a50c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801a510:	2b06      	cmp	r3, #6
 801a512:	d10d      	bne.n	801a530 <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a514:	f640 0089 	movw	r0, #2185	@ 0x889
 801a518:	f000 ffa8 	bl	801b46c <SUBGRF_ReadRegister>
 801a51c:	4603      	mov	r3, r0
 801a51e:	f023 0304 	bic.w	r3, r3, #4
 801a522:	b2db      	uxtb	r3, r3
 801a524:	4619      	mov	r1, r3
 801a526:	f640 0089 	movw	r0, #2185	@ 0x889
 801a52a:	f000 ff7d 	bl	801b428 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801a52e:	e02d      	b.n	801a58c <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a530:	f640 0089 	movw	r0, #2185	@ 0x889
 801a534:	f000 ff9a 	bl	801b46c <SUBGRF_ReadRegister>
 801a538:	4603      	mov	r3, r0
 801a53a:	f043 0304 	orr.w	r3, r3, #4
 801a53e:	b2db      	uxtb	r3, r3
 801a540:	4619      	mov	r1, r3
 801a542:	f640 0089 	movw	r0, #2185	@ 0x889
 801a546:	f000 ff6f 	bl	801b428 <SUBGRF_WriteRegister>
        break;
 801a54a:	e01f      	b.n	801a58c <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801a54c:	68bb      	ldr	r3, [r7, #8]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d004      	beq.n	801a55e <RadioSetTxGenericConfig+0x406>
 801a554:	68bb      	ldr	r3, [r7, #8]
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a55c:	d902      	bls.n	801a564 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 801a55e:	f04f 33ff 	mov.w	r3, #4294967295
 801a562:	e027      	b.n	801a5b4 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 801a564:	2003      	movs	r0, #3
 801a566:	f7fe f8df 	bl	8018728 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a56a:	4b14      	ldr	r3, [pc, #80]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a56c:	2202      	movs	r2, #2
 801a56e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801a572:	68bb      	ldr	r3, [r7, #8]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	4a11      	ldr	r2, [pc, #68]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a578:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a57a:	4b10      	ldr	r3, [pc, #64]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a57c:	2216      	movs	r2, #22
 801a57e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a582:	480f      	ldr	r0, [pc, #60]	@ (801a5c0 <RadioSetTxGenericConfig+0x468>)
 801a584:	f000 fd3c 	bl	801b000 <SUBGRF_SetModulationParams>
        break;
 801a588:	e000      	b.n	801a58c <RadioSetTxGenericConfig+0x434>
    default:
        break;
 801a58a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a58c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a590:	4618      	mov	r0, r3
 801a592:	f001 f87f 	bl	801b694 <SUBGRF_SetRfTxPower>
 801a596:	4603      	mov	r3, r0
 801a598:	461a      	mov	r2, r3
 801a59a:	4b08      	ldr	r3, [pc, #32]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a59c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a5a0:	4b06      	ldr	r3, [pc, #24]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a5a2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	f001 fa53 	bl	801ba52 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a5ac:	4a03      	ldr	r2, [pc, #12]	@ (801a5bc <RadioSetTxGenericConfig+0x464>)
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	6053      	str	r3, [r2, #4]
    return 0;
 801a5b2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	3738      	adds	r7, #56	@ 0x38
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	bd80      	pop	{r7, pc}
 801a5bc:	20001d28 	.word	0x20001d28
 801a5c0:	20001d60 	.word	0x20001d60
 801a5c4:	20001d36 	.word	0x20001d36

0801a5c8 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801a5c8:	b480      	push	{r7}
 801a5ca:	b085      	sub	sp, #20
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801a5d0:	2301      	movs	r3, #1
 801a5d2:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801a5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	3714      	adds	r7, #20
 801a5da:	46bd      	mov	sp, r7
 801a5dc:	bc80      	pop	{r7}
 801a5de:	4770      	bx	lr

0801a5e0 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801a5e0:	b480      	push	{r7}
 801a5e2:	b083      	sub	sp, #12
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	6078      	str	r0, [r7, #4]
 801a5e8:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801a5ea:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	370c      	adds	r7, #12
 801a5f0:	46bd      	mov	sp, r7
 801a5f2:	bc80      	pop	{r7}
 801a5f4:	4770      	bx	lr
	...

0801a5f8 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b084      	sub	sp, #16
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	2b00      	cmp	r3, #0
 801a604:	d002      	beq.n	801a60c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801a606:	4a1d      	ldr	r2, [pc, #116]	@ (801a67c <SUBGRF_Init+0x84>)
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801a60c:	f7e7 fd4e 	bl	80020ac <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a610:	2002      	movs	r0, #2
 801a612:	f001 f91b 	bl	801b84c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801a616:	4b1a      	ldr	r3, [pc, #104]	@ (801a680 <SUBGRF_Init+0x88>)
 801a618:	2200      	movs	r2, #0
 801a61a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801a61c:	2000      	movs	r0, #0
 801a61e:	f000 f97f 	bl	801a920 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801a622:	f7f1 fab7 	bl	800bb94 <RBI_IsTCXO>
 801a626:	4603      	mov	r3, r0
 801a628:	2b01      	cmp	r3, #1
 801a62a:	d10e      	bne.n	801a64a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a62c:	2140      	movs	r1, #64	@ 0x40
 801a62e:	2001      	movs	r0, #1
 801a630:	f000 fb8a 	bl	801ad48 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a634:	2100      	movs	r1, #0
 801a636:	f640 1011 	movw	r0, #2321	@ 0x911
 801a63a:	f000 fef5 	bl	801b428 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a63e:	237f      	movs	r3, #127	@ 0x7f
 801a640:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a642:	7b38      	ldrb	r0, [r7, #12]
 801a644:	f000 fa8d 	bl	801ab62 <SUBGRF_Calibrate>
 801a648:	e009      	b.n	801a65e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a64a:	2120      	movs	r1, #32
 801a64c:	f640 1011 	movw	r0, #2321	@ 0x911
 801a650:	f000 feea 	bl	801b428 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a654:	2120      	movs	r1, #32
 801a656:	f640 1012 	movw	r0, #2322	@ 0x912
 801a65a:	f000 fee5 	bl	801b428 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a65e:	210e      	movs	r1, #14
 801a660:	f640 101f 	movw	r0, #2335	@ 0x91f
 801a664:	f000 fee0 	bl	801b428 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801a668:	f7f1 fa78 	bl	800bb5c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a66c:	4b05      	ldr	r3, [pc, #20]	@ (801a684 <SUBGRF_Init+0x8c>)
 801a66e:	2201      	movs	r2, #1
 801a670:	701a      	strb	r2, [r3, #0]
}
 801a672:	bf00      	nop
 801a674:	3710      	adds	r7, #16
 801a676:	46bd      	mov	sp, r7
 801a678:	bd80      	pop	{r7, pc}
 801a67a:	bf00      	nop
 801a67c:	20001dc0 	.word	0x20001dc0
 801a680:	20001dbc 	.word	0x20001dbc
 801a684:	20001db4 	.word	0x20001db4

0801a688 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a688:	b480      	push	{r7}
 801a68a:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a68c:	4b02      	ldr	r3, [pc, #8]	@ (801a698 <SUBGRF_GetOperatingMode+0x10>)
 801a68e:	781b      	ldrb	r3, [r3, #0]
}
 801a690:	4618      	mov	r0, r3
 801a692:	46bd      	mov	sp, r7
 801a694:	bc80      	pop	{r7}
 801a696:	4770      	bx	lr
 801a698:	20001db4 	.word	0x20001db4

0801a69c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a69c:	b580      	push	{r7, lr}
 801a69e:	b082      	sub	sp, #8
 801a6a0:	af00      	add	r7, sp, #0
 801a6a2:	6078      	str	r0, [r7, #4]
 801a6a4:	460b      	mov	r3, r1
 801a6a6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a6a8:	78fb      	ldrb	r3, [r7, #3]
 801a6aa:	461a      	mov	r2, r3
 801a6ac:	6879      	ldr	r1, [r7, #4]
 801a6ae:	2000      	movs	r0, #0
 801a6b0:	f000 ff40 	bl	801b534 <SUBGRF_WriteBuffer>
}
 801a6b4:	bf00      	nop
 801a6b6:	3708      	adds	r7, #8
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd80      	pop	{r7, pc}

0801a6bc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b086      	sub	sp, #24
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	60f8      	str	r0, [r7, #12]
 801a6c4:	60b9      	str	r1, [r7, #8]
 801a6c6:	4613      	mov	r3, r2
 801a6c8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a6ce:	f107 0317 	add.w	r3, r7, #23
 801a6d2:	4619      	mov	r1, r3
 801a6d4:	68b8      	ldr	r0, [r7, #8]
 801a6d6:	f000 fe29 	bl	801b32c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a6da:	68bb      	ldr	r3, [r7, #8]
 801a6dc:	781b      	ldrb	r3, [r3, #0]
 801a6de:	79fa      	ldrb	r2, [r7, #7]
 801a6e0:	429a      	cmp	r2, r3
 801a6e2:	d201      	bcs.n	801a6e8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a6e4:	2301      	movs	r3, #1
 801a6e6:	e007      	b.n	801a6f8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a6e8:	7df8      	ldrb	r0, [r7, #23]
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	781b      	ldrb	r3, [r3, #0]
 801a6ee:	461a      	mov	r2, r3
 801a6f0:	68f9      	ldr	r1, [r7, #12]
 801a6f2:	f000 ff41 	bl	801b578 <SUBGRF_ReadBuffer>

    return 0;
 801a6f6:	2300      	movs	r3, #0
}
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	3718      	adds	r7, #24
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	bd80      	pop	{r7, pc}

0801a700 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a700:	b580      	push	{r7, lr}
 801a702:	b084      	sub	sp, #16
 801a704:	af00      	add	r7, sp, #0
 801a706:	60f8      	str	r0, [r7, #12]
 801a708:	460b      	mov	r3, r1
 801a70a:	607a      	str	r2, [r7, #4]
 801a70c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a70e:	7afb      	ldrb	r3, [r7, #11]
 801a710:	4619      	mov	r1, r3
 801a712:	68f8      	ldr	r0, [r7, #12]
 801a714:	f7ff ffc2 	bl	801a69c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a718:	6878      	ldr	r0, [r7, #4]
 801a71a:	f000 f91d 	bl	801a958 <SUBGRF_SetTx>
}
 801a71e:	bf00      	nop
 801a720:	3710      	adds	r7, #16
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}

0801a726 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a726:	b580      	push	{r7, lr}
 801a728:	b082      	sub	sp, #8
 801a72a:	af00      	add	r7, sp, #0
 801a72c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a72e:	2208      	movs	r2, #8
 801a730:	6879      	ldr	r1, [r7, #4]
 801a732:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801a736:	f000 feb9 	bl	801b4ac <SUBGRF_WriteRegisters>
    return 0;
 801a73a:	2300      	movs	r3, #0
}
 801a73c:	4618      	mov	r0, r3
 801a73e:	3708      	adds	r7, #8
 801a740:	46bd      	mov	sp, r7
 801a742:	bd80      	pop	{r7, pc}

0801a744 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a744:	b580      	push	{r7, lr}
 801a746:	b084      	sub	sp, #16
 801a748:	af00      	add	r7, sp, #0
 801a74a:	4603      	mov	r3, r0
 801a74c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a74e:	88fb      	ldrh	r3, [r7, #6]
 801a750:	0a1b      	lsrs	r3, r3, #8
 801a752:	b29b      	uxth	r3, r3
 801a754:	b2db      	uxtb	r3, r3
 801a756:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a758:	88fb      	ldrh	r3, [r7, #6]
 801a75a:	b2db      	uxtb	r3, r3
 801a75c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a75e:	f000 fb77 	bl	801ae50 <SUBGRF_GetPacketType>
 801a762:	4603      	mov	r3, r0
 801a764:	2b00      	cmp	r3, #0
 801a766:	d108      	bne.n	801a77a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a768:	f107 030c 	add.w	r3, r7, #12
 801a76c:	2202      	movs	r2, #2
 801a76e:	4619      	mov	r1, r3
 801a770:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801a774:	f000 fe9a 	bl	801b4ac <SUBGRF_WriteRegisters>
            break;
 801a778:	e000      	b.n	801a77c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a77a:	bf00      	nop
    }
}
 801a77c:	bf00      	nop
 801a77e:	3710      	adds	r7, #16
 801a780:	46bd      	mov	sp, r7
 801a782:	bd80      	pop	{r7, pc}

0801a784 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a784:	b580      	push	{r7, lr}
 801a786:	b084      	sub	sp, #16
 801a788:	af00      	add	r7, sp, #0
 801a78a:	4603      	mov	r3, r0
 801a78c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a78e:	88fb      	ldrh	r3, [r7, #6]
 801a790:	0a1b      	lsrs	r3, r3, #8
 801a792:	b29b      	uxth	r3, r3
 801a794:	b2db      	uxtb	r3, r3
 801a796:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a798:	88fb      	ldrh	r3, [r7, #6]
 801a79a:	b2db      	uxtb	r3, r3
 801a79c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a79e:	f000 fb57 	bl	801ae50 <SUBGRF_GetPacketType>
 801a7a2:	4603      	mov	r3, r0
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d108      	bne.n	801a7ba <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a7a8:	f107 030c 	add.w	r3, r7, #12
 801a7ac:	2202      	movs	r2, #2
 801a7ae:	4619      	mov	r1, r3
 801a7b0:	f240 60be 	movw	r0, #1726	@ 0x6be
 801a7b4:	f000 fe7a 	bl	801b4ac <SUBGRF_WriteRegisters>
            break;
 801a7b8:	e000      	b.n	801a7bc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a7ba:	bf00      	nop
    }
}
 801a7bc:	bf00      	nop
 801a7be:	3710      	adds	r7, #16
 801a7c0:	46bd      	mov	sp, r7
 801a7c2:	bd80      	pop	{r7, pc}

0801a7c4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	b084      	sub	sp, #16
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	4603      	mov	r3, r0
 801a7cc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a7ce:	2300      	movs	r3, #0
 801a7d0:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a7d2:	f000 fb3d 	bl	801ae50 <SUBGRF_GetPacketType>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d121      	bne.n	801a820 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a7dc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a7e0:	f000 fe44 	bl	801b46c <SUBGRF_ReadRegister>
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	f023 0301 	bic.w	r3, r3, #1
 801a7ea:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a7ec:	88fb      	ldrh	r3, [r7, #6]
 801a7ee:	0a1b      	lsrs	r3, r3, #8
 801a7f0:	b29b      	uxth	r3, r3
 801a7f2:	b25b      	sxtb	r3, r3
 801a7f4:	f003 0301 	and.w	r3, r3, #1
 801a7f8:	b25a      	sxtb	r2, r3
 801a7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a7fe:	4313      	orrs	r3, r2
 801a800:	b25b      	sxtb	r3, r3
 801a802:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a804:	7bfb      	ldrb	r3, [r7, #15]
 801a806:	4619      	mov	r1, r3
 801a808:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a80c:	f000 fe0c 	bl	801b428 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a810:	88fb      	ldrh	r3, [r7, #6]
 801a812:	b2db      	uxtb	r3, r3
 801a814:	4619      	mov	r1, r3
 801a816:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801a81a:	f000 fe05 	bl	801b428 <SUBGRF_WriteRegister>
            break;
 801a81e:	e000      	b.n	801a822 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a820:	bf00      	nop
    }
}
 801a822:	bf00      	nop
 801a824:	3710      	adds	r7, #16
 801a826:	46bd      	mov	sp, r7
 801a828:	bd80      	pop	{r7, pc}

0801a82a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a82a:	b580      	push	{r7, lr}
 801a82c:	b082      	sub	sp, #8
 801a82e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a830:	2300      	movs	r3, #0
 801a832:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a834:	2300      	movs	r3, #0
 801a836:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a838:	2300      	movs	r3, #0
 801a83a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a83c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a840:	f000 fe14 	bl	801b46c <SUBGRF_ReadRegister>
 801a844:	4603      	mov	r3, r0
 801a846:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a848:	79fb      	ldrb	r3, [r7, #7]
 801a84a:	f023 0301 	bic.w	r3, r3, #1
 801a84e:	b2db      	uxtb	r3, r3
 801a850:	4619      	mov	r1, r3
 801a852:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a856:	f000 fde7 	bl	801b428 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a85a:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a85e:	f000 fe05 	bl	801b46c <SUBGRF_ReadRegister>
 801a862:	4603      	mov	r3, r0
 801a864:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a866:	79bb      	ldrb	r3, [r7, #6]
 801a868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a86c:	b2db      	uxtb	r3, r3
 801a86e:	4619      	mov	r1, r3
 801a870:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a874:	f000 fdd8 	bl	801b428 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a878:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801a87c:	f000 f88c 	bl	801a998 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801a880:	463b      	mov	r3, r7
 801a882:	2204      	movs	r2, #4
 801a884:	4619      	mov	r1, r3
 801a886:	f640 0019 	movw	r0, #2073	@ 0x819
 801a88a:	f000 fe31 	bl	801b4f0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801a88e:	2000      	movs	r0, #0
 801a890:	f000 f846 	bl	801a920 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801a894:	79fb      	ldrb	r3, [r7, #7]
 801a896:	4619      	mov	r1, r3
 801a898:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a89c:	f000 fdc4 	bl	801b428 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801a8a0:	79bb      	ldrb	r3, [r7, #6]
 801a8a2:	4619      	mov	r1, r3
 801a8a4:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a8a8:	f000 fdbe 	bl	801b428 <SUBGRF_WriteRegister>

    return number;
 801a8ac:	683b      	ldr	r3, [r7, #0]
}
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	3708      	adds	r7, #8
 801a8b2:	46bd      	mov	sp, r7
 801a8b4:	bd80      	pop	{r7, pc}
	...

0801a8b8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b084      	sub	sp, #16
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801a8c0:	2000      	movs	r0, #0
 801a8c2:	f7f1 f952 	bl	800bb6a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a8c6:	2002      	movs	r0, #2
 801a8c8:	f000 ffc0 	bl	801b84c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a8cc:	793b      	ldrb	r3, [r7, #4]
 801a8ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a8d2:	b2db      	uxtb	r3, r3
 801a8d4:	b25b      	sxtb	r3, r3
 801a8d6:	009b      	lsls	r3, r3, #2
 801a8d8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a8da:	793b      	ldrb	r3, [r7, #4]
 801a8dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a8e0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a8e2:	b25b      	sxtb	r3, r3
 801a8e4:	005b      	lsls	r3, r3, #1
 801a8e6:	b25b      	sxtb	r3, r3
 801a8e8:	4313      	orrs	r3, r2
 801a8ea:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801a8ec:	793b      	ldrb	r3, [r7, #4]
 801a8ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a8f2:	b2db      	uxtb	r3, r3
 801a8f4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a8f6:	4313      	orrs	r3, r2
 801a8f8:	b25b      	sxtb	r3, r3
 801a8fa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a8fc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801a8fe:	f107 030f 	add.w	r3, r7, #15
 801a902:	2201      	movs	r2, #1
 801a904:	4619      	mov	r1, r3
 801a906:	2084      	movs	r0, #132	@ 0x84
 801a908:	f000 fe58 	bl	801b5bc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801a90c:	4b03      	ldr	r3, [pc, #12]	@ (801a91c <SUBGRF_SetSleep+0x64>)
 801a90e:	2200      	movs	r2, #0
 801a910:	701a      	strb	r2, [r3, #0]
}
 801a912:	bf00      	nop
 801a914:	3710      	adds	r7, #16
 801a916:	46bd      	mov	sp, r7
 801a918:	bd80      	pop	{r7, pc}
 801a91a:	bf00      	nop
 801a91c:	20001db4 	.word	0x20001db4

0801a920 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801a920:	b580      	push	{r7, lr}
 801a922:	b082      	sub	sp, #8
 801a924:	af00      	add	r7, sp, #0
 801a926:	4603      	mov	r3, r0
 801a928:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801a92a:	1dfb      	adds	r3, r7, #7
 801a92c:	2201      	movs	r2, #1
 801a92e:	4619      	mov	r1, r3
 801a930:	2080      	movs	r0, #128	@ 0x80
 801a932:	f000 fe43 	bl	801b5bc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801a936:	79fb      	ldrb	r3, [r7, #7]
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d103      	bne.n	801a944 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801a93c:	4b05      	ldr	r3, [pc, #20]	@ (801a954 <SUBGRF_SetStandby+0x34>)
 801a93e:	2201      	movs	r2, #1
 801a940:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801a942:	e002      	b.n	801a94a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801a944:	4b03      	ldr	r3, [pc, #12]	@ (801a954 <SUBGRF_SetStandby+0x34>)
 801a946:	2202      	movs	r2, #2
 801a948:	701a      	strb	r2, [r3, #0]
}
 801a94a:	bf00      	nop
 801a94c:	3708      	adds	r7, #8
 801a94e:	46bd      	mov	sp, r7
 801a950:	bd80      	pop	{r7, pc}
 801a952:	bf00      	nop
 801a954:	20001db4 	.word	0x20001db4

0801a958 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	b084      	sub	sp, #16
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801a960:	4b0c      	ldr	r3, [pc, #48]	@ (801a994 <SUBGRF_SetTx+0x3c>)
 801a962:	2204      	movs	r2, #4
 801a964:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	0c1b      	lsrs	r3, r3, #16
 801a96a:	b2db      	uxtb	r3, r3
 801a96c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	0a1b      	lsrs	r3, r3, #8
 801a972:	b2db      	uxtb	r3, r3
 801a974:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	b2db      	uxtb	r3, r3
 801a97a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801a97c:	f107 030c 	add.w	r3, r7, #12
 801a980:	2203      	movs	r2, #3
 801a982:	4619      	mov	r1, r3
 801a984:	2083      	movs	r0, #131	@ 0x83
 801a986:	f000 fe19 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801a98a:	bf00      	nop
 801a98c:	3710      	adds	r7, #16
 801a98e:	46bd      	mov	sp, r7
 801a990:	bd80      	pop	{r7, pc}
 801a992:	bf00      	nop
 801a994:	20001db4 	.word	0x20001db4

0801a998 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801a998:	b580      	push	{r7, lr}
 801a99a:	b084      	sub	sp, #16
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a9a0:	4b0c      	ldr	r3, [pc, #48]	@ (801a9d4 <SUBGRF_SetRx+0x3c>)
 801a9a2:	2205      	movs	r2, #5
 801a9a4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	0c1b      	lsrs	r3, r3, #16
 801a9aa:	b2db      	uxtb	r3, r3
 801a9ac:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	0a1b      	lsrs	r3, r3, #8
 801a9b2:	b2db      	uxtb	r3, r3
 801a9b4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	b2db      	uxtb	r3, r3
 801a9ba:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a9bc:	f107 030c 	add.w	r3, r7, #12
 801a9c0:	2203      	movs	r2, #3
 801a9c2:	4619      	mov	r1, r3
 801a9c4:	2082      	movs	r0, #130	@ 0x82
 801a9c6:	f000 fdf9 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801a9ca:	bf00      	nop
 801a9cc:	3710      	adds	r7, #16
 801a9ce:	46bd      	mov	sp, r7
 801a9d0:	bd80      	pop	{r7, pc}
 801a9d2:	bf00      	nop
 801a9d4:	20001db4 	.word	0x20001db4

0801a9d8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b084      	sub	sp, #16
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a9e0:	4b0e      	ldr	r3, [pc, #56]	@ (801aa1c <SUBGRF_SetRxBoosted+0x44>)
 801a9e2:	2205      	movs	r2, #5
 801a9e4:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a9e6:	2197      	movs	r1, #151	@ 0x97
 801a9e8:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801a9ec:	f000 fd1c 	bl	801b428 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	0c1b      	lsrs	r3, r3, #16
 801a9f4:	b2db      	uxtb	r3, r3
 801a9f6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	0a1b      	lsrs	r3, r3, #8
 801a9fc:	b2db      	uxtb	r3, r3
 801a9fe:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	b2db      	uxtb	r3, r3
 801aa04:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801aa06:	f107 030c 	add.w	r3, r7, #12
 801aa0a:	2203      	movs	r2, #3
 801aa0c:	4619      	mov	r1, r3
 801aa0e:	2082      	movs	r0, #130	@ 0x82
 801aa10:	f000 fdd4 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801aa14:	bf00      	nop
 801aa16:	3710      	adds	r7, #16
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	bd80      	pop	{r7, pc}
 801aa1c:	20001db4 	.word	0x20001db4

0801aa20 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801aa20:	b580      	push	{r7, lr}
 801aa22:	b084      	sub	sp, #16
 801aa24:	af00      	add	r7, sp, #0
 801aa26:	6078      	str	r0, [r7, #4]
 801aa28:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	0c1b      	lsrs	r3, r3, #16
 801aa2e:	b2db      	uxtb	r3, r3
 801aa30:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	0a1b      	lsrs	r3, r3, #8
 801aa36:	b2db      	uxtb	r3, r3
 801aa38:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	b2db      	uxtb	r3, r3
 801aa3e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801aa40:	683b      	ldr	r3, [r7, #0]
 801aa42:	0c1b      	lsrs	r3, r3, #16
 801aa44:	b2db      	uxtb	r3, r3
 801aa46:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801aa48:	683b      	ldr	r3, [r7, #0]
 801aa4a:	0a1b      	lsrs	r3, r3, #8
 801aa4c:	b2db      	uxtb	r3, r3
 801aa4e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801aa50:	683b      	ldr	r3, [r7, #0]
 801aa52:	b2db      	uxtb	r3, r3
 801aa54:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801aa56:	f107 0308 	add.w	r3, r7, #8
 801aa5a:	2206      	movs	r2, #6
 801aa5c:	4619      	mov	r1, r3
 801aa5e:	2094      	movs	r0, #148	@ 0x94
 801aa60:	f000 fdac 	bl	801b5bc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801aa64:	4b03      	ldr	r3, [pc, #12]	@ (801aa74 <SUBGRF_SetRxDutyCycle+0x54>)
 801aa66:	2206      	movs	r2, #6
 801aa68:	701a      	strb	r2, [r3, #0]
}
 801aa6a:	bf00      	nop
 801aa6c:	3710      	adds	r7, #16
 801aa6e:	46bd      	mov	sp, r7
 801aa70:	bd80      	pop	{r7, pc}
 801aa72:	bf00      	nop
 801aa74:	20001db4 	.word	0x20001db4

0801aa78 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801aa78:	b580      	push	{r7, lr}
 801aa7a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	2100      	movs	r1, #0
 801aa80:	20c5      	movs	r0, #197	@ 0xc5
 801aa82:	f000 fd9b 	bl	801b5bc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801aa86:	4b02      	ldr	r3, [pc, #8]	@ (801aa90 <SUBGRF_SetCad+0x18>)
 801aa88:	2207      	movs	r2, #7
 801aa8a:	701a      	strb	r2, [r3, #0]
}
 801aa8c:	bf00      	nop
 801aa8e:	bd80      	pop	{r7, pc}
 801aa90:	20001db4 	.word	0x20001db4

0801aa94 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801aa94:	b580      	push	{r7, lr}
 801aa96:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801aa98:	2200      	movs	r2, #0
 801aa9a:	2100      	movs	r1, #0
 801aa9c:	20d1      	movs	r0, #209	@ 0xd1
 801aa9e:	f000 fd8d 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801aaa2:	bf00      	nop
 801aaa4:	bd80      	pop	{r7, pc}

0801aaa6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801aaa6:	b580      	push	{r7, lr}
 801aaa8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801aaaa:	2200      	movs	r2, #0
 801aaac:	2100      	movs	r1, #0
 801aaae:	20d2      	movs	r0, #210	@ 0xd2
 801aab0:	f000 fd84 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801aab4:	bf00      	nop
 801aab6:	bd80      	pop	{r7, pc}

0801aab8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b082      	sub	sp, #8
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	4603      	mov	r3, r0
 801aac0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801aac2:	1dfb      	adds	r3, r7, #7
 801aac4:	2201      	movs	r2, #1
 801aac6:	4619      	mov	r1, r3
 801aac8:	209f      	movs	r0, #159	@ 0x9f
 801aaca:	f000 fd77 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801aace:	bf00      	nop
 801aad0:	3708      	adds	r7, #8
 801aad2:	46bd      	mov	sp, r7
 801aad4:	bd80      	pop	{r7, pc}

0801aad6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801aad6:	b580      	push	{r7, lr}
 801aad8:	b084      	sub	sp, #16
 801aada:	af00      	add	r7, sp, #0
 801aadc:	4603      	mov	r3, r0
 801aade:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801aae0:	1dfb      	adds	r3, r7, #7
 801aae2:	2201      	movs	r2, #1
 801aae4:	4619      	mov	r1, r3
 801aae6:	20a0      	movs	r0, #160	@ 0xa0
 801aae8:	f000 fd68 	bl	801b5bc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801aaec:	79fb      	ldrb	r3, [r7, #7]
 801aaee:	2b3f      	cmp	r3, #63	@ 0x3f
 801aaf0:	d91c      	bls.n	801ab2c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801aaf2:	79fb      	ldrb	r3, [r7, #7]
 801aaf4:	085b      	lsrs	r3, r3, #1
 801aaf6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801aaf8:	2300      	movs	r3, #0
 801aafa:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801aafc:	2300      	movs	r3, #0
 801aafe:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801ab00:	e005      	b.n	801ab0e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801ab02:	7bfb      	ldrb	r3, [r7, #15]
 801ab04:	089b      	lsrs	r3, r3, #2
 801ab06:	73fb      	strb	r3, [r7, #15]
            exp++;
 801ab08:	7bbb      	ldrb	r3, [r7, #14]
 801ab0a:	3301      	adds	r3, #1
 801ab0c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801ab0e:	7bfb      	ldrb	r3, [r7, #15]
 801ab10:	2b1f      	cmp	r3, #31
 801ab12:	d8f6      	bhi.n	801ab02 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801ab14:	7bfb      	ldrb	r3, [r7, #15]
 801ab16:	00db      	lsls	r3, r3, #3
 801ab18:	b2da      	uxtb	r2, r3
 801ab1a:	7bbb      	ldrb	r3, [r7, #14]
 801ab1c:	4413      	add	r3, r2
 801ab1e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801ab20:	7b7b      	ldrb	r3, [r7, #13]
 801ab22:	4619      	mov	r1, r3
 801ab24:	f240 7006 	movw	r0, #1798	@ 0x706
 801ab28:	f000 fc7e 	bl	801b428 <SUBGRF_WriteRegister>
    }
}
 801ab2c:	bf00      	nop
 801ab2e:	3710      	adds	r7, #16
 801ab30:	46bd      	mov	sp, r7
 801ab32:	bd80      	pop	{r7, pc}

0801ab34 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801ab34:	b580      	push	{r7, lr}
 801ab36:	b082      	sub	sp, #8
 801ab38:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801ab3a:	f7f1 f832 	bl	800bba2 <RBI_IsDCDC>
 801ab3e:	4603      	mov	r3, r0
 801ab40:	2b01      	cmp	r3, #1
 801ab42:	d102      	bne.n	801ab4a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801ab44:	2301      	movs	r3, #1
 801ab46:	71fb      	strb	r3, [r7, #7]
 801ab48:	e001      	b.n	801ab4e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801ab4e:	1dfb      	adds	r3, r7, #7
 801ab50:	2201      	movs	r2, #1
 801ab52:	4619      	mov	r1, r3
 801ab54:	2096      	movs	r0, #150	@ 0x96
 801ab56:	f000 fd31 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801ab5a:	bf00      	nop
 801ab5c:	3708      	adds	r7, #8
 801ab5e:	46bd      	mov	sp, r7
 801ab60:	bd80      	pop	{r7, pc}

0801ab62 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801ab62:	b580      	push	{r7, lr}
 801ab64:	b084      	sub	sp, #16
 801ab66:	af00      	add	r7, sp, #0
 801ab68:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ab6a:	793b      	ldrb	r3, [r7, #4]
 801ab6c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801ab70:	b2db      	uxtb	r3, r3
 801ab72:	b25b      	sxtb	r3, r3
 801ab74:	019b      	lsls	r3, r3, #6
 801ab76:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ab78:	793b      	ldrb	r3, [r7, #4]
 801ab7a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801ab7e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ab80:	b25b      	sxtb	r3, r3
 801ab82:	015b      	lsls	r3, r3, #5
 801ab84:	b25b      	sxtb	r3, r3
 801ab86:	4313      	orrs	r3, r2
 801ab88:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ab8a:	793b      	ldrb	r3, [r7, #4]
 801ab8c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801ab90:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ab92:	b25b      	sxtb	r3, r3
 801ab94:	011b      	lsls	r3, r3, #4
 801ab96:	b25b      	sxtb	r3, r3
 801ab98:	4313      	orrs	r3, r2
 801ab9a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801ab9c:	793b      	ldrb	r3, [r7, #4]
 801ab9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801aba2:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801aba4:	b25b      	sxtb	r3, r3
 801aba6:	00db      	lsls	r3, r3, #3
 801aba8:	b25b      	sxtb	r3, r3
 801abaa:	4313      	orrs	r3, r2
 801abac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801abae:	793b      	ldrb	r3, [r7, #4]
 801abb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801abb4:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801abb6:	b25b      	sxtb	r3, r3
 801abb8:	009b      	lsls	r3, r3, #2
 801abba:	b25b      	sxtb	r3, r3
 801abbc:	4313      	orrs	r3, r2
 801abbe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801abc0:	793b      	ldrb	r3, [r7, #4]
 801abc2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801abc6:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801abc8:	b25b      	sxtb	r3, r3
 801abca:	005b      	lsls	r3, r3, #1
 801abcc:	b25b      	sxtb	r3, r3
 801abce:	4313      	orrs	r3, r2
 801abd0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801abd2:	793b      	ldrb	r3, [r7, #4]
 801abd4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801abd8:	b2db      	uxtb	r3, r3
 801abda:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801abdc:	4313      	orrs	r3, r2
 801abde:	b25b      	sxtb	r3, r3
 801abe0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801abe2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801abe4:	f107 030f 	add.w	r3, r7, #15
 801abe8:	2201      	movs	r2, #1
 801abea:	4619      	mov	r1, r3
 801abec:	2089      	movs	r0, #137	@ 0x89
 801abee:	f000 fce5 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801abf2:	bf00      	nop
 801abf4:	3710      	adds	r7, #16
 801abf6:	46bd      	mov	sp, r7
 801abf8:	bd80      	pop	{r7, pc}
	...

0801abfc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b084      	sub	sp, #16
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	4a1d      	ldr	r2, [pc, #116]	@ (801ac7c <SUBGRF_CalibrateImage+0x80>)
 801ac08:	4293      	cmp	r3, r2
 801ac0a:	d904      	bls.n	801ac16 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801ac0c:	23e1      	movs	r3, #225	@ 0xe1
 801ac0e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801ac10:	23e9      	movs	r3, #233	@ 0xe9
 801ac12:	737b      	strb	r3, [r7, #13]
 801ac14:	e027      	b.n	801ac66 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	4a19      	ldr	r2, [pc, #100]	@ (801ac80 <SUBGRF_CalibrateImage+0x84>)
 801ac1a:	4293      	cmp	r3, r2
 801ac1c:	d904      	bls.n	801ac28 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801ac1e:	23d7      	movs	r3, #215	@ 0xd7
 801ac20:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801ac22:	23db      	movs	r3, #219	@ 0xdb
 801ac24:	737b      	strb	r3, [r7, #13]
 801ac26:	e01e      	b.n	801ac66 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	4a16      	ldr	r2, [pc, #88]	@ (801ac84 <SUBGRF_CalibrateImage+0x88>)
 801ac2c:	4293      	cmp	r3, r2
 801ac2e:	d904      	bls.n	801ac3a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801ac30:	23c1      	movs	r3, #193	@ 0xc1
 801ac32:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801ac34:	23c5      	movs	r3, #197	@ 0xc5
 801ac36:	737b      	strb	r3, [r7, #13]
 801ac38:	e015      	b.n	801ac66 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	4a12      	ldr	r2, [pc, #72]	@ (801ac88 <SUBGRF_CalibrateImage+0x8c>)
 801ac3e:	4293      	cmp	r3, r2
 801ac40:	d904      	bls.n	801ac4c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801ac42:	2375      	movs	r3, #117	@ 0x75
 801ac44:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801ac46:	2381      	movs	r3, #129	@ 0x81
 801ac48:	737b      	strb	r3, [r7, #13]
 801ac4a:	e00c      	b.n	801ac66 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	4a0f      	ldr	r2, [pc, #60]	@ (801ac8c <SUBGRF_CalibrateImage+0x90>)
 801ac50:	4293      	cmp	r3, r2
 801ac52:	d904      	bls.n	801ac5e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801ac54:	236b      	movs	r3, #107	@ 0x6b
 801ac56:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801ac58:	236f      	movs	r3, #111	@ 0x6f
 801ac5a:	737b      	strb	r3, [r7, #13]
 801ac5c:	e003      	b.n	801ac66 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801ac5e:	2329      	movs	r3, #41	@ 0x29
 801ac60:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801ac62:	232b      	movs	r3, #43	@ 0x2b
 801ac64:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801ac66:	f107 030c 	add.w	r3, r7, #12
 801ac6a:	2202      	movs	r2, #2
 801ac6c:	4619      	mov	r1, r3
 801ac6e:	2098      	movs	r0, #152	@ 0x98
 801ac70:	f000 fca4 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801ac74:	bf00      	nop
 801ac76:	3710      	adds	r7, #16
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	bd80      	pop	{r7, pc}
 801ac7c:	35a4e900 	.word	0x35a4e900
 801ac80:	32a9f880 	.word	0x32a9f880
 801ac84:	2de54480 	.word	0x2de54480
 801ac88:	1b6b0b00 	.word	0x1b6b0b00
 801ac8c:	1954fc40 	.word	0x1954fc40

0801ac90 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801ac90:	b590      	push	{r4, r7, lr}
 801ac92:	b085      	sub	sp, #20
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	4604      	mov	r4, r0
 801ac98:	4608      	mov	r0, r1
 801ac9a:	4611      	mov	r1, r2
 801ac9c:	461a      	mov	r2, r3
 801ac9e:	4623      	mov	r3, r4
 801aca0:	71fb      	strb	r3, [r7, #7]
 801aca2:	4603      	mov	r3, r0
 801aca4:	71bb      	strb	r3, [r7, #6]
 801aca6:	460b      	mov	r3, r1
 801aca8:	717b      	strb	r3, [r7, #5]
 801acaa:	4613      	mov	r3, r2
 801acac:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801acae:	79fb      	ldrb	r3, [r7, #7]
 801acb0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801acb2:	79bb      	ldrb	r3, [r7, #6]
 801acb4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801acb6:	797b      	ldrb	r3, [r7, #5]
 801acb8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801acba:	793b      	ldrb	r3, [r7, #4]
 801acbc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801acbe:	f107 030c 	add.w	r3, r7, #12
 801acc2:	2204      	movs	r2, #4
 801acc4:	4619      	mov	r1, r3
 801acc6:	2095      	movs	r0, #149	@ 0x95
 801acc8:	f000 fc78 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801accc:	bf00      	nop
 801acce:	3714      	adds	r7, #20
 801acd0:	46bd      	mov	sp, r7
 801acd2:	bd90      	pop	{r4, r7, pc}

0801acd4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801acd4:	b590      	push	{r4, r7, lr}
 801acd6:	b085      	sub	sp, #20
 801acd8:	af00      	add	r7, sp, #0
 801acda:	4604      	mov	r4, r0
 801acdc:	4608      	mov	r0, r1
 801acde:	4611      	mov	r1, r2
 801ace0:	461a      	mov	r2, r3
 801ace2:	4623      	mov	r3, r4
 801ace4:	80fb      	strh	r3, [r7, #6]
 801ace6:	4603      	mov	r3, r0
 801ace8:	80bb      	strh	r3, [r7, #4]
 801acea:	460b      	mov	r3, r1
 801acec:	807b      	strh	r3, [r7, #2]
 801acee:	4613      	mov	r3, r2
 801acf0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801acf2:	88fb      	ldrh	r3, [r7, #6]
 801acf4:	0a1b      	lsrs	r3, r3, #8
 801acf6:	b29b      	uxth	r3, r3
 801acf8:	b2db      	uxtb	r3, r3
 801acfa:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801acfc:	88fb      	ldrh	r3, [r7, #6]
 801acfe:	b2db      	uxtb	r3, r3
 801ad00:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801ad02:	88bb      	ldrh	r3, [r7, #4]
 801ad04:	0a1b      	lsrs	r3, r3, #8
 801ad06:	b29b      	uxth	r3, r3
 801ad08:	b2db      	uxtb	r3, r3
 801ad0a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801ad0c:	88bb      	ldrh	r3, [r7, #4]
 801ad0e:	b2db      	uxtb	r3, r3
 801ad10:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801ad12:	887b      	ldrh	r3, [r7, #2]
 801ad14:	0a1b      	lsrs	r3, r3, #8
 801ad16:	b29b      	uxth	r3, r3
 801ad18:	b2db      	uxtb	r3, r3
 801ad1a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801ad1c:	887b      	ldrh	r3, [r7, #2]
 801ad1e:	b2db      	uxtb	r3, r3
 801ad20:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801ad22:	883b      	ldrh	r3, [r7, #0]
 801ad24:	0a1b      	lsrs	r3, r3, #8
 801ad26:	b29b      	uxth	r3, r3
 801ad28:	b2db      	uxtb	r3, r3
 801ad2a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801ad2c:	883b      	ldrh	r3, [r7, #0]
 801ad2e:	b2db      	uxtb	r3, r3
 801ad30:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801ad32:	f107 0308 	add.w	r3, r7, #8
 801ad36:	2208      	movs	r2, #8
 801ad38:	4619      	mov	r1, r3
 801ad3a:	2008      	movs	r0, #8
 801ad3c:	f000 fc3e 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801ad40:	bf00      	nop
 801ad42:	3714      	adds	r7, #20
 801ad44:	46bd      	mov	sp, r7
 801ad46:	bd90      	pop	{r4, r7, pc}

0801ad48 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801ad48:	b580      	push	{r7, lr}
 801ad4a:	b084      	sub	sp, #16
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	4603      	mov	r3, r0
 801ad50:	6039      	str	r1, [r7, #0]
 801ad52:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801ad54:	79fb      	ldrb	r3, [r7, #7]
 801ad56:	f003 0307 	and.w	r3, r3, #7
 801ad5a:	b2db      	uxtb	r3, r3
 801ad5c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ad5e:	683b      	ldr	r3, [r7, #0]
 801ad60:	0c1b      	lsrs	r3, r3, #16
 801ad62:	b2db      	uxtb	r3, r3
 801ad64:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ad66:	683b      	ldr	r3, [r7, #0]
 801ad68:	0a1b      	lsrs	r3, r3, #8
 801ad6a:	b2db      	uxtb	r3, r3
 801ad6c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801ad6e:	683b      	ldr	r3, [r7, #0]
 801ad70:	b2db      	uxtb	r3, r3
 801ad72:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801ad74:	f107 030c 	add.w	r3, r7, #12
 801ad78:	2204      	movs	r2, #4
 801ad7a:	4619      	mov	r1, r3
 801ad7c:	2097      	movs	r0, #151	@ 0x97
 801ad7e:	f000 fc1d 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801ad82:	bf00      	nop
 801ad84:	3710      	adds	r7, #16
 801ad86:	46bd      	mov	sp, r7
 801ad88:	bd80      	pop	{r7, pc}
	...

0801ad8c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801ad8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ad90:	b084      	sub	sp, #16
 801ad92:	af00      	add	r7, sp, #0
 801ad94:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801ad96:	2300      	movs	r3, #0
 801ad98:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801ad9a:	4b1d      	ldr	r3, [pc, #116]	@ (801ae10 <SUBGRF_SetRfFrequency+0x84>)
 801ad9c:	781b      	ldrb	r3, [r3, #0]
 801ad9e:	f083 0301 	eor.w	r3, r3, #1
 801ada2:	b2db      	uxtb	r3, r3
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d005      	beq.n	801adb4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801ada8:	6878      	ldr	r0, [r7, #4]
 801adaa:	f7ff ff27 	bl	801abfc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801adae:	4b18      	ldr	r3, [pc, #96]	@ (801ae10 <SUBGRF_SetRfFrequency+0x84>)
 801adb0:	2201      	movs	r2, #1
 801adb2:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	2200      	movs	r2, #0
 801adb8:	461c      	mov	r4, r3
 801adba:	4615      	mov	r5, r2
 801adbc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801adc0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801adc4:	4a13      	ldr	r2, [pc, #76]	@ (801ae14 <SUBGRF_SetRfFrequency+0x88>)
 801adc6:	f04f 0300 	mov.w	r3, #0
 801adca:	4640      	mov	r0, r8
 801adcc:	4649      	mov	r1, r9
 801adce:	f7e5 feeb 	bl	8000ba8 <__aeabi_uldivmod>
 801add2:	4602      	mov	r2, r0
 801add4:	460b      	mov	r3, r1
 801add6:	4613      	mov	r3, r2
 801add8:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801adda:	68fb      	ldr	r3, [r7, #12]
 801addc:	0e1b      	lsrs	r3, r3, #24
 801adde:	b2db      	uxtb	r3, r3
 801ade0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	0c1b      	lsrs	r3, r3, #16
 801ade6:	b2db      	uxtb	r3, r3
 801ade8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	0a1b      	lsrs	r3, r3, #8
 801adee:	b2db      	uxtb	r3, r3
 801adf0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801adf2:	68fb      	ldr	r3, [r7, #12]
 801adf4:	b2db      	uxtb	r3, r3
 801adf6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801adf8:	f107 0308 	add.w	r3, r7, #8
 801adfc:	2204      	movs	r2, #4
 801adfe:	4619      	mov	r1, r3
 801ae00:	2086      	movs	r0, #134	@ 0x86
 801ae02:	f000 fbdb 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801ae06:	bf00      	nop
 801ae08:	3710      	adds	r7, #16
 801ae0a:	46bd      	mov	sp, r7
 801ae0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801ae10:	20001dbc 	.word	0x20001dbc
 801ae14:	01e84800 	.word	0x01e84800

0801ae18 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b082      	sub	sp, #8
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	4603      	mov	r3, r0
 801ae20:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801ae22:	79fa      	ldrb	r2, [r7, #7]
 801ae24:	4b09      	ldr	r3, [pc, #36]	@ (801ae4c <SUBGRF_SetPacketType+0x34>)
 801ae26:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801ae28:	79fb      	ldrb	r3, [r7, #7]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d104      	bne.n	801ae38 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801ae2e:	2100      	movs	r1, #0
 801ae30:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801ae34:	f000 faf8 	bl	801b428 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801ae38:	1dfb      	adds	r3, r7, #7
 801ae3a:	2201      	movs	r2, #1
 801ae3c:	4619      	mov	r1, r3
 801ae3e:	208a      	movs	r0, #138	@ 0x8a
 801ae40:	f000 fbbc 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801ae44:	bf00      	nop
 801ae46:	3708      	adds	r7, #8
 801ae48:	46bd      	mov	sp, r7
 801ae4a:	bd80      	pop	{r7, pc}
 801ae4c:	20001db5 	.word	0x20001db5

0801ae50 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801ae50:	b480      	push	{r7}
 801ae52:	af00      	add	r7, sp, #0
    return PacketType;
 801ae54:	4b02      	ldr	r3, [pc, #8]	@ (801ae60 <SUBGRF_GetPacketType+0x10>)
 801ae56:	781b      	ldrb	r3, [r3, #0]
}
 801ae58:	4618      	mov	r0, r3
 801ae5a:	46bd      	mov	sp, r7
 801ae5c:	bc80      	pop	{r7}
 801ae5e:	4770      	bx	lr
 801ae60:	20001db5 	.word	0x20001db5

0801ae64 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b084      	sub	sp, #16
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	4603      	mov	r3, r0
 801ae6c:	71fb      	strb	r3, [r7, #7]
 801ae6e:	460b      	mov	r3, r1
 801ae70:	71bb      	strb	r3, [r7, #6]
 801ae72:	4613      	mov	r3, r2
 801ae74:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801ae76:	79fb      	ldrb	r3, [r7, #7]
 801ae78:	2b01      	cmp	r3, #1
 801ae7a:	d149      	bne.n	801af10 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801ae7c:	2000      	movs	r0, #0
 801ae7e:	f7f0 fe97 	bl	800bbb0 <RBI_GetRFOMaxPowerConfig>
 801ae82:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801ae84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ae88:	68fa      	ldr	r2, [r7, #12]
 801ae8a:	429a      	cmp	r2, r3
 801ae8c:	da01      	bge.n	801ae92 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	2b0e      	cmp	r3, #14
 801ae96:	d10e      	bne.n	801aeb6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801ae98:	2301      	movs	r3, #1
 801ae9a:	2201      	movs	r2, #1
 801ae9c:	2100      	movs	r1, #0
 801ae9e:	2004      	movs	r0, #4
 801aea0:	f7ff fef6 	bl	801ac90 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801aea4:	79ba      	ldrb	r2, [r7, #6]
 801aea6:	68fb      	ldr	r3, [r7, #12]
 801aea8:	b2db      	uxtb	r3, r3
 801aeaa:	1ad3      	subs	r3, r2, r3
 801aeac:	b2db      	uxtb	r3, r3
 801aeae:	330e      	adds	r3, #14
 801aeb0:	b2db      	uxtb	r3, r3
 801aeb2:	71bb      	strb	r3, [r7, #6]
 801aeb4:	e01f      	b.n	801aef6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801aeb6:	68fb      	ldr	r3, [r7, #12]
 801aeb8:	2b0a      	cmp	r3, #10
 801aeba:	d10e      	bne.n	801aeda <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801aebc:	2301      	movs	r3, #1
 801aebe:	2201      	movs	r2, #1
 801aec0:	2100      	movs	r1, #0
 801aec2:	2001      	movs	r0, #1
 801aec4:	f7ff fee4 	bl	801ac90 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801aec8:	79ba      	ldrb	r2, [r7, #6]
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	b2db      	uxtb	r3, r3
 801aece:	1ad3      	subs	r3, r2, r3
 801aed0:	b2db      	uxtb	r3, r3
 801aed2:	330d      	adds	r3, #13
 801aed4:	b2db      	uxtb	r3, r3
 801aed6:	71bb      	strb	r3, [r7, #6]
 801aed8:	e00d      	b.n	801aef6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801aeda:	2301      	movs	r3, #1
 801aedc:	2201      	movs	r2, #1
 801aede:	2100      	movs	r1, #0
 801aee0:	2007      	movs	r0, #7
 801aee2:	f7ff fed5 	bl	801ac90 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801aee6:	79ba      	ldrb	r2, [r7, #6]
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	b2db      	uxtb	r3, r3
 801aeec:	1ad3      	subs	r3, r2, r3
 801aeee:	b2db      	uxtb	r3, r3
 801aef0:	330e      	adds	r3, #14
 801aef2:	b2db      	uxtb	r3, r3
 801aef4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801aef6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aefa:	f113 0f11 	cmn.w	r3, #17
 801aefe:	da01      	bge.n	801af04 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801af00:	23ef      	movs	r3, #239	@ 0xef
 801af02:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801af04:	2118      	movs	r1, #24
 801af06:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801af0a:	f000 fa8d 	bl	801b428 <SUBGRF_WriteRegister>
 801af0e:	e067      	b.n	801afe0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801af10:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801af14:	f000 faaa 	bl	801b46c <SUBGRF_ReadRegister>
 801af18:	4603      	mov	r3, r0
 801af1a:	f043 031e 	orr.w	r3, r3, #30
 801af1e:	b2db      	uxtb	r3, r3
 801af20:	4619      	mov	r1, r3
 801af22:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801af26:	f000 fa7f 	bl	801b428 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801af2a:	2001      	movs	r0, #1
 801af2c:	f7f0 fe40 	bl	800bbb0 <RBI_GetRFOMaxPowerConfig>
 801af30:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801af32:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801af36:	68fa      	ldr	r2, [r7, #12]
 801af38:	429a      	cmp	r2, r3
 801af3a:	da01      	bge.n	801af40 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	2b14      	cmp	r3, #20
 801af44:	d10e      	bne.n	801af64 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801af46:	2301      	movs	r3, #1
 801af48:	2200      	movs	r2, #0
 801af4a:	2105      	movs	r1, #5
 801af4c:	2003      	movs	r0, #3
 801af4e:	f7ff fe9f 	bl	801ac90 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801af52:	79ba      	ldrb	r2, [r7, #6]
 801af54:	68fb      	ldr	r3, [r7, #12]
 801af56:	b2db      	uxtb	r3, r3
 801af58:	1ad3      	subs	r3, r2, r3
 801af5a:	b2db      	uxtb	r3, r3
 801af5c:	3316      	adds	r3, #22
 801af5e:	b2db      	uxtb	r3, r3
 801af60:	71bb      	strb	r3, [r7, #6]
 801af62:	e031      	b.n	801afc8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	2b11      	cmp	r3, #17
 801af68:	d10e      	bne.n	801af88 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801af6a:	2301      	movs	r3, #1
 801af6c:	2200      	movs	r2, #0
 801af6e:	2103      	movs	r1, #3
 801af70:	2002      	movs	r0, #2
 801af72:	f7ff fe8d 	bl	801ac90 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801af76:	79ba      	ldrb	r2, [r7, #6]
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	b2db      	uxtb	r3, r3
 801af7c:	1ad3      	subs	r3, r2, r3
 801af7e:	b2db      	uxtb	r3, r3
 801af80:	3316      	adds	r3, #22
 801af82:	b2db      	uxtb	r3, r3
 801af84:	71bb      	strb	r3, [r7, #6]
 801af86:	e01f      	b.n	801afc8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	2b0e      	cmp	r3, #14
 801af8c:	d10e      	bne.n	801afac <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801af8e:	2301      	movs	r3, #1
 801af90:	2200      	movs	r2, #0
 801af92:	2102      	movs	r1, #2
 801af94:	2002      	movs	r0, #2
 801af96:	f7ff fe7b 	bl	801ac90 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801af9a:	79ba      	ldrb	r2, [r7, #6]
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	b2db      	uxtb	r3, r3
 801afa0:	1ad3      	subs	r3, r2, r3
 801afa2:	b2db      	uxtb	r3, r3
 801afa4:	330e      	adds	r3, #14
 801afa6:	b2db      	uxtb	r3, r3
 801afa8:	71bb      	strb	r3, [r7, #6]
 801afaa:	e00d      	b.n	801afc8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801afac:	2301      	movs	r3, #1
 801afae:	2200      	movs	r2, #0
 801afb0:	2107      	movs	r1, #7
 801afb2:	2004      	movs	r0, #4
 801afb4:	f7ff fe6c 	bl	801ac90 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801afb8:	79ba      	ldrb	r2, [r7, #6]
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	b2db      	uxtb	r3, r3
 801afbe:	1ad3      	subs	r3, r2, r3
 801afc0:	b2db      	uxtb	r3, r3
 801afc2:	3316      	adds	r3, #22
 801afc4:	b2db      	uxtb	r3, r3
 801afc6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801afc8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801afcc:	f113 0f09 	cmn.w	r3, #9
 801afd0:	da01      	bge.n	801afd6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801afd2:	23f7      	movs	r3, #247	@ 0xf7
 801afd4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801afd6:	2138      	movs	r1, #56	@ 0x38
 801afd8:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801afdc:	f000 fa24 	bl	801b428 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801afe0:	79bb      	ldrb	r3, [r7, #6]
 801afe2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801afe4:	797b      	ldrb	r3, [r7, #5]
 801afe6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801afe8:	f107 0308 	add.w	r3, r7, #8
 801afec:	2202      	movs	r2, #2
 801afee:	4619      	mov	r1, r3
 801aff0:	208e      	movs	r0, #142	@ 0x8e
 801aff2:	f000 fae3 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801aff6:	bf00      	nop
 801aff8:	3710      	adds	r7, #16
 801affa:	46bd      	mov	sp, r7
 801affc:	bd80      	pop	{r7, pc}
	...

0801b000 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b000:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b004:	b086      	sub	sp, #24
 801b006:	af00      	add	r7, sp, #0
 801b008:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b00a:	2300      	movs	r3, #0
 801b00c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b00e:	f107 0308 	add.w	r3, r7, #8
 801b012:	2200      	movs	r2, #0
 801b014:	601a      	str	r2, [r3, #0]
 801b016:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	781a      	ldrb	r2, [r3, #0]
 801b01c:	4b5c      	ldr	r3, [pc, #368]	@ (801b190 <SUBGRF_SetModulationParams+0x190>)
 801b01e:	781b      	ldrb	r3, [r3, #0]
 801b020:	429a      	cmp	r2, r3
 801b022:	d004      	beq.n	801b02e <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	781b      	ldrb	r3, [r3, #0]
 801b028:	4618      	mov	r0, r3
 801b02a:	f7ff fef5 	bl	801ae18 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	781b      	ldrb	r3, [r3, #0]
 801b032:	2b03      	cmp	r3, #3
 801b034:	f200 80a5 	bhi.w	801b182 <SUBGRF_SetModulationParams+0x182>
 801b038:	a201      	add	r2, pc, #4	@ (adr r2, 801b040 <SUBGRF_SetModulationParams+0x40>)
 801b03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b03e:	bf00      	nop
 801b040:	0801b051 	.word	0x0801b051
 801b044:	0801b111 	.word	0x0801b111
 801b048:	0801b0d3 	.word	0x0801b0d3
 801b04c:	0801b13f 	.word	0x0801b13f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b050:	2308      	movs	r3, #8
 801b052:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	685b      	ldr	r3, [r3, #4]
 801b058:	4a4e      	ldr	r2, [pc, #312]	@ (801b194 <SUBGRF_SetModulationParams+0x194>)
 801b05a:	fbb2 f3f3 	udiv	r3, r2, r3
 801b05e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b060:	697b      	ldr	r3, [r7, #20]
 801b062:	0c1b      	lsrs	r3, r3, #16
 801b064:	b2db      	uxtb	r3, r3
 801b066:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b068:	697b      	ldr	r3, [r7, #20]
 801b06a:	0a1b      	lsrs	r3, r3, #8
 801b06c:	b2db      	uxtb	r3, r3
 801b06e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b070:	697b      	ldr	r3, [r7, #20]
 801b072:	b2db      	uxtb	r3, r3
 801b074:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	7b1b      	ldrb	r3, [r3, #12]
 801b07a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	7b5b      	ldrb	r3, [r3, #13]
 801b080:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	689b      	ldr	r3, [r3, #8]
 801b086:	2200      	movs	r2, #0
 801b088:	461c      	mov	r4, r3
 801b08a:	4615      	mov	r5, r2
 801b08c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b090:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b094:	4a40      	ldr	r2, [pc, #256]	@ (801b198 <SUBGRF_SetModulationParams+0x198>)
 801b096:	f04f 0300 	mov.w	r3, #0
 801b09a:	4640      	mov	r0, r8
 801b09c:	4649      	mov	r1, r9
 801b09e:	f7e5 fd83 	bl	8000ba8 <__aeabi_uldivmod>
 801b0a2:	4602      	mov	r2, r0
 801b0a4:	460b      	mov	r3, r1
 801b0a6:	4613      	mov	r3, r2
 801b0a8:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b0aa:	697b      	ldr	r3, [r7, #20]
 801b0ac:	0c1b      	lsrs	r3, r3, #16
 801b0ae:	b2db      	uxtb	r3, r3
 801b0b0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b0b2:	697b      	ldr	r3, [r7, #20]
 801b0b4:	0a1b      	lsrs	r3, r3, #8
 801b0b6:	b2db      	uxtb	r3, r3
 801b0b8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b0ba:	697b      	ldr	r3, [r7, #20]
 801b0bc:	b2db      	uxtb	r3, r3
 801b0be:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b0c0:	7cfb      	ldrb	r3, [r7, #19]
 801b0c2:	b29a      	uxth	r2, r3
 801b0c4:	f107 0308 	add.w	r3, r7, #8
 801b0c8:	4619      	mov	r1, r3
 801b0ca:	208b      	movs	r0, #139	@ 0x8b
 801b0cc:	f000 fa76 	bl	801b5bc <SUBGRF_WriteCommand>
        break;
 801b0d0:	e058      	b.n	801b184 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b0d2:	2304      	movs	r3, #4
 801b0d4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	691b      	ldr	r3, [r3, #16]
 801b0da:	4a2e      	ldr	r2, [pc, #184]	@ (801b194 <SUBGRF_SetModulationParams+0x194>)
 801b0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 801b0e0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b0e2:	697b      	ldr	r3, [r7, #20]
 801b0e4:	0c1b      	lsrs	r3, r3, #16
 801b0e6:	b2db      	uxtb	r3, r3
 801b0e8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b0ea:	697b      	ldr	r3, [r7, #20]
 801b0ec:	0a1b      	lsrs	r3, r3, #8
 801b0ee:	b2db      	uxtb	r3, r3
 801b0f0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b0f2:	697b      	ldr	r3, [r7, #20]
 801b0f4:	b2db      	uxtb	r3, r3
 801b0f6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	7d1b      	ldrb	r3, [r3, #20]
 801b0fc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b0fe:	7cfb      	ldrb	r3, [r7, #19]
 801b100:	b29a      	uxth	r2, r3
 801b102:	f107 0308 	add.w	r3, r7, #8
 801b106:	4619      	mov	r1, r3
 801b108:	208b      	movs	r0, #139	@ 0x8b
 801b10a:	f000 fa57 	bl	801b5bc <SUBGRF_WriteCommand>
        break;
 801b10e:	e039      	b.n	801b184 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 801b110:	2304      	movs	r3, #4
 801b112:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	7e1b      	ldrb	r3, [r3, #24]
 801b118:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	7e5b      	ldrb	r3, [r3, #25]
 801b11e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	7e9b      	ldrb	r3, [r3, #26]
 801b124:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	7edb      	ldrb	r3, [r3, #27]
 801b12a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b12c:	7cfb      	ldrb	r3, [r7, #19]
 801b12e:	b29a      	uxth	r2, r3
 801b130:	f107 0308 	add.w	r3, r7, #8
 801b134:	4619      	mov	r1, r3
 801b136:	208b      	movs	r0, #139	@ 0x8b
 801b138:	f000 fa40 	bl	801b5bc <SUBGRF_WriteCommand>

        break;
 801b13c:	e022      	b.n	801b184 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b13e:	2305      	movs	r3, #5
 801b140:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	685b      	ldr	r3, [r3, #4]
 801b146:	4a13      	ldr	r2, [pc, #76]	@ (801b194 <SUBGRF_SetModulationParams+0x194>)
 801b148:	fbb2 f3f3 	udiv	r3, r2, r3
 801b14c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b14e:	697b      	ldr	r3, [r7, #20]
 801b150:	0c1b      	lsrs	r3, r3, #16
 801b152:	b2db      	uxtb	r3, r3
 801b154:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b156:	697b      	ldr	r3, [r7, #20]
 801b158:	0a1b      	lsrs	r3, r3, #8
 801b15a:	b2db      	uxtb	r3, r3
 801b15c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b15e:	697b      	ldr	r3, [r7, #20]
 801b160:	b2db      	uxtb	r3, r3
 801b162:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	7b1b      	ldrb	r3, [r3, #12]
 801b168:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	7b5b      	ldrb	r3, [r3, #13]
 801b16e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b170:	7cfb      	ldrb	r3, [r7, #19]
 801b172:	b29a      	uxth	r2, r3
 801b174:	f107 0308 	add.w	r3, r7, #8
 801b178:	4619      	mov	r1, r3
 801b17a:	208b      	movs	r0, #139	@ 0x8b
 801b17c:	f000 fa1e 	bl	801b5bc <SUBGRF_WriteCommand>
        break;
 801b180:	e000      	b.n	801b184 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b182:	bf00      	nop
    }
}
 801b184:	bf00      	nop
 801b186:	3718      	adds	r7, #24
 801b188:	46bd      	mov	sp, r7
 801b18a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b18e:	bf00      	nop
 801b190:	20001db5 	.word	0x20001db5
 801b194:	3d090000 	.word	0x3d090000
 801b198:	01e84800 	.word	0x01e84800

0801b19c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b19c:	b580      	push	{r7, lr}
 801b19e:	b086      	sub	sp, #24
 801b1a0:	af00      	add	r7, sp, #0
 801b1a2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b1a4:	2300      	movs	r3, #0
 801b1a6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b1a8:	f107 030c 	add.w	r3, r7, #12
 801b1ac:	2200      	movs	r2, #0
 801b1ae:	601a      	str	r2, [r3, #0]
 801b1b0:	605a      	str	r2, [r3, #4]
 801b1b2:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	781a      	ldrb	r2, [r3, #0]
 801b1b8:	4b44      	ldr	r3, [pc, #272]	@ (801b2cc <SUBGRF_SetPacketParams+0x130>)
 801b1ba:	781b      	ldrb	r3, [r3, #0]
 801b1bc:	429a      	cmp	r2, r3
 801b1be:	d004      	beq.n	801b1ca <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	781b      	ldrb	r3, [r3, #0]
 801b1c4:	4618      	mov	r0, r3
 801b1c6:	f7ff fe27 	bl	801ae18 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	781b      	ldrb	r3, [r3, #0]
 801b1ce:	2b03      	cmp	r3, #3
 801b1d0:	d878      	bhi.n	801b2c4 <SUBGRF_SetPacketParams+0x128>
 801b1d2:	a201      	add	r2, pc, #4	@ (adr r2, 801b1d8 <SUBGRF_SetPacketParams+0x3c>)
 801b1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1d8:	0801b1e9 	.word	0x0801b1e9
 801b1dc:	0801b279 	.word	0x0801b279
 801b1e0:	0801b26d 	.word	0x0801b26d
 801b1e4:	0801b1e9 	.word	0x0801b1e9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	7a5b      	ldrb	r3, [r3, #9]
 801b1ec:	2bf1      	cmp	r3, #241	@ 0xf1
 801b1ee:	d10a      	bne.n	801b206 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b1f0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801b1f4:	f7ff faa6 	bl	801a744 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b1f8:	f248 0005 	movw	r0, #32773	@ 0x8005
 801b1fc:	f7ff fac2 	bl	801a784 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b200:	2302      	movs	r3, #2
 801b202:	75bb      	strb	r3, [r7, #22]
 801b204:	e011      	b.n	801b22a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	7a5b      	ldrb	r3, [r3, #9]
 801b20a:	2bf2      	cmp	r3, #242	@ 0xf2
 801b20c:	d10a      	bne.n	801b224 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b20e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801b212:	f7ff fa97 	bl	801a744 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b216:	f241 0021 	movw	r0, #4129	@ 0x1021
 801b21a:	f7ff fab3 	bl	801a784 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b21e:	2306      	movs	r3, #6
 801b220:	75bb      	strb	r3, [r7, #22]
 801b222:	e002      	b.n	801b22a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	7a5b      	ldrb	r3, [r3, #9]
 801b228:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b22a:	2309      	movs	r3, #9
 801b22c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	885b      	ldrh	r3, [r3, #2]
 801b232:	0a1b      	lsrs	r3, r3, #8
 801b234:	b29b      	uxth	r3, r3
 801b236:	b2db      	uxtb	r3, r3
 801b238:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	885b      	ldrh	r3, [r3, #2]
 801b23e:	b2db      	uxtb	r3, r3
 801b240:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	791b      	ldrb	r3, [r3, #4]
 801b246:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	795b      	ldrb	r3, [r3, #5]
 801b24c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	799b      	ldrb	r3, [r3, #6]
 801b252:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	79db      	ldrb	r3, [r3, #7]
 801b258:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	7a1b      	ldrb	r3, [r3, #8]
 801b25e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801b260:	7dbb      	ldrb	r3, [r7, #22]
 801b262:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	7a9b      	ldrb	r3, [r3, #10]
 801b268:	753b      	strb	r3, [r7, #20]
        break;
 801b26a:	e022      	b.n	801b2b2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801b26c:	2301      	movs	r3, #1
 801b26e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	7b1b      	ldrb	r3, [r3, #12]
 801b274:	733b      	strb	r3, [r7, #12]
        break;
 801b276:	e01c      	b.n	801b2b2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801b278:	2306      	movs	r3, #6
 801b27a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	89db      	ldrh	r3, [r3, #14]
 801b280:	0a1b      	lsrs	r3, r3, #8
 801b282:	b29b      	uxth	r3, r3
 801b284:	b2db      	uxtb	r3, r3
 801b286:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	89db      	ldrh	r3, [r3, #14]
 801b28c:	b2db      	uxtb	r3, r3
 801b28e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	7c1a      	ldrb	r2, [r3, #16]
 801b294:	4b0e      	ldr	r3, [pc, #56]	@ (801b2d0 <SUBGRF_SetPacketParams+0x134>)
 801b296:	4611      	mov	r1, r2
 801b298:	7019      	strb	r1, [r3, #0]
 801b29a:	4613      	mov	r3, r2
 801b29c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	7c5b      	ldrb	r3, [r3, #17]
 801b2a2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	7c9b      	ldrb	r3, [r3, #18]
 801b2a8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	7cdb      	ldrb	r3, [r3, #19]
 801b2ae:	747b      	strb	r3, [r7, #17]
        break;
 801b2b0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801b2b2:	7dfb      	ldrb	r3, [r7, #23]
 801b2b4:	b29a      	uxth	r2, r3
 801b2b6:	f107 030c 	add.w	r3, r7, #12
 801b2ba:	4619      	mov	r1, r3
 801b2bc:	208c      	movs	r0, #140	@ 0x8c
 801b2be:	f000 f97d 	bl	801b5bc <SUBGRF_WriteCommand>
 801b2c2:	e000      	b.n	801b2c6 <SUBGRF_SetPacketParams+0x12a>
        return;
 801b2c4:	bf00      	nop
}
 801b2c6:	3718      	adds	r7, #24
 801b2c8:	46bd      	mov	sp, r7
 801b2ca:	bd80      	pop	{r7, pc}
 801b2cc:	20001db5 	.word	0x20001db5
 801b2d0:	20001db6 	.word	0x20001db6

0801b2d4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	b084      	sub	sp, #16
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	4603      	mov	r3, r0
 801b2dc:	460a      	mov	r2, r1
 801b2de:	71fb      	strb	r3, [r7, #7]
 801b2e0:	4613      	mov	r3, r2
 801b2e2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b2e4:	79fb      	ldrb	r3, [r7, #7]
 801b2e6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b2e8:	79bb      	ldrb	r3, [r7, #6]
 801b2ea:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b2ec:	f107 030c 	add.w	r3, r7, #12
 801b2f0:	2202      	movs	r2, #2
 801b2f2:	4619      	mov	r1, r3
 801b2f4:	208f      	movs	r0, #143	@ 0x8f
 801b2f6:	f000 f961 	bl	801b5bc <SUBGRF_WriteCommand>
}
 801b2fa:	bf00      	nop
 801b2fc:	3710      	adds	r7, #16
 801b2fe:	46bd      	mov	sp, r7
 801b300:	bd80      	pop	{r7, pc}

0801b302 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b302:	b580      	push	{r7, lr}
 801b304:	b082      	sub	sp, #8
 801b306:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b308:	2300      	movs	r3, #0
 801b30a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b30c:	1d3b      	adds	r3, r7, #4
 801b30e:	2201      	movs	r2, #1
 801b310:	4619      	mov	r1, r3
 801b312:	2015      	movs	r0, #21
 801b314:	f000 f974 	bl	801b600 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b318:	793b      	ldrb	r3, [r7, #4]
 801b31a:	425b      	negs	r3, r3
 801b31c:	105b      	asrs	r3, r3, #1
 801b31e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b320:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b324:	4618      	mov	r0, r3
 801b326:	3708      	adds	r7, #8
 801b328:	46bd      	mov	sp, r7
 801b32a:	bd80      	pop	{r7, pc}

0801b32c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b32c:	b580      	push	{r7, lr}
 801b32e:	b084      	sub	sp, #16
 801b330:	af00      	add	r7, sp, #0
 801b332:	6078      	str	r0, [r7, #4]
 801b334:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b336:	f107 030c 	add.w	r3, r7, #12
 801b33a:	2202      	movs	r2, #2
 801b33c:	4619      	mov	r1, r3
 801b33e:	2013      	movs	r0, #19
 801b340:	f000 f95e 	bl	801b600 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b344:	f7ff fd84 	bl	801ae50 <SUBGRF_GetPacketType>
 801b348:	4603      	mov	r3, r0
 801b34a:	2b01      	cmp	r3, #1
 801b34c:	d10d      	bne.n	801b36a <SUBGRF_GetRxBufferStatus+0x3e>
 801b34e:	4b0c      	ldr	r3, [pc, #48]	@ (801b380 <SUBGRF_GetRxBufferStatus+0x54>)
 801b350:	781b      	ldrb	r3, [r3, #0]
 801b352:	b2db      	uxtb	r3, r3
 801b354:	2b01      	cmp	r3, #1
 801b356:	d108      	bne.n	801b36a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b358:	f240 7002 	movw	r0, #1794	@ 0x702
 801b35c:	f000 f886 	bl	801b46c <SUBGRF_ReadRegister>
 801b360:	4603      	mov	r3, r0
 801b362:	461a      	mov	r2, r3
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	701a      	strb	r2, [r3, #0]
 801b368:	e002      	b.n	801b370 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b36a:	7b3a      	ldrb	r2, [r7, #12]
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b370:	7b7a      	ldrb	r2, [r7, #13]
 801b372:	683b      	ldr	r3, [r7, #0]
 801b374:	701a      	strb	r2, [r3, #0]
}
 801b376:	bf00      	nop
 801b378:	3710      	adds	r7, #16
 801b37a:	46bd      	mov	sp, r7
 801b37c:	bd80      	pop	{r7, pc}
 801b37e:	bf00      	nop
 801b380:	20001db6 	.word	0x20001db6

0801b384 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801b384:	b580      	push	{r7, lr}
 801b386:	b084      	sub	sp, #16
 801b388:	af00      	add	r7, sp, #0
 801b38a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801b38c:	f107 030c 	add.w	r3, r7, #12
 801b390:	2203      	movs	r2, #3
 801b392:	4619      	mov	r1, r3
 801b394:	2014      	movs	r0, #20
 801b396:	f000 f933 	bl	801b600 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b39a:	f7ff fd59 	bl	801ae50 <SUBGRF_GetPacketType>
 801b39e:	4603      	mov	r3, r0
 801b3a0:	461a      	mov	r2, r3
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	781b      	ldrb	r3, [r3, #0]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d002      	beq.n	801b3b4 <SUBGRF_GetPacketStatus+0x30>
 801b3ae:	2b01      	cmp	r3, #1
 801b3b0:	d013      	beq.n	801b3da <SUBGRF_GetPacketStatus+0x56>
 801b3b2:	e02a      	b.n	801b40a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b3b4:	7b3a      	ldrb	r2, [r7, #12]
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b3ba:	7b7b      	ldrb	r3, [r7, #13]
 801b3bc:	425b      	negs	r3, r3
 801b3be:	105b      	asrs	r3, r3, #1
 801b3c0:	b25a      	sxtb	r2, r3
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b3c6:	7bbb      	ldrb	r3, [r7, #14]
 801b3c8:	425b      	negs	r3, r3
 801b3ca:	105b      	asrs	r3, r3, #1
 801b3cc:	b25a      	sxtb	r2, r3
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	2200      	movs	r2, #0
 801b3d6:	609a      	str	r2, [r3, #8]
            break;
 801b3d8:	e020      	b.n	801b41c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b3da:	7b3b      	ldrb	r3, [r7, #12]
 801b3dc:	425b      	negs	r3, r3
 801b3de:	105b      	asrs	r3, r3, #1
 801b3e0:	b25a      	sxtb	r2, r3
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b3e6:	7b7b      	ldrb	r3, [r7, #13]
 801b3e8:	b25b      	sxtb	r3, r3
 801b3ea:	3302      	adds	r3, #2
 801b3ec:	109b      	asrs	r3, r3, #2
 801b3ee:	b25a      	sxtb	r2, r3
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b3f4:	7bbb      	ldrb	r3, [r7, #14]
 801b3f6:	425b      	negs	r3, r3
 801b3f8:	105b      	asrs	r3, r3, #1
 801b3fa:	b25a      	sxtb	r2, r3
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b400:	4b08      	ldr	r3, [pc, #32]	@ (801b424 <SUBGRF_GetPacketStatus+0xa0>)
 801b402:	681a      	ldr	r2, [r3, #0]
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	611a      	str	r2, [r3, #16]
            break;
 801b408:	e008      	b.n	801b41c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b40a:	2214      	movs	r2, #20
 801b40c:	2100      	movs	r1, #0
 801b40e:	6878      	ldr	r0, [r7, #4]
 801b410:	f000 fc1d 	bl	801bc4e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	220f      	movs	r2, #15
 801b418:	701a      	strb	r2, [r3, #0]
            break;
 801b41a:	bf00      	nop
    }
}
 801b41c:	bf00      	nop
 801b41e:	3710      	adds	r7, #16
 801b420:	46bd      	mov	sp, r7
 801b422:	bd80      	pop	{r7, pc}
 801b424:	20001db8 	.word	0x20001db8

0801b428 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b086      	sub	sp, #24
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	4603      	mov	r3, r0
 801b430:	460a      	mov	r2, r1
 801b432:	80fb      	strh	r3, [r7, #6]
 801b434:	4613      	mov	r3, r2
 801b436:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b438:	f3ef 8310 	mrs	r3, PRIMASK
 801b43c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b43e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b442:	b672      	cpsid	i
}
 801b444:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801b446:	1d7a      	adds	r2, r7, #5
 801b448:	88f9      	ldrh	r1, [r7, #6]
 801b44a:	2301      	movs	r3, #1
 801b44c:	4806      	ldr	r0, [pc, #24]	@ (801b468 <SUBGRF_WriteRegister+0x40>)
 801b44e:	f7ec ff2b 	bl	80082a8 <HAL_SUBGHZ_WriteRegisters>
 801b452:	697b      	ldr	r3, [r7, #20]
 801b454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b456:	693b      	ldr	r3, [r7, #16]
 801b458:	f383 8810 	msr	PRIMASK, r3
}
 801b45c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b45e:	bf00      	nop
 801b460:	3718      	adds	r7, #24
 801b462:	46bd      	mov	sp, r7
 801b464:	bd80      	pop	{r7, pc}
 801b466:	bf00      	nop
 801b468:	20000318 	.word	0x20000318

0801b46c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801b46c:	b580      	push	{r7, lr}
 801b46e:	b086      	sub	sp, #24
 801b470:	af00      	add	r7, sp, #0
 801b472:	4603      	mov	r3, r0
 801b474:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b476:	f3ef 8310 	mrs	r3, PRIMASK
 801b47a:	60fb      	str	r3, [r7, #12]
  return(result);
 801b47c:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 801b47e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b480:	b672      	cpsid	i
}
 801b482:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801b484:	f107 020b 	add.w	r2, r7, #11
 801b488:	88f9      	ldrh	r1, [r7, #6]
 801b48a:	2301      	movs	r3, #1
 801b48c:	4806      	ldr	r0, [pc, #24]	@ (801b4a8 <SUBGRF_ReadRegister+0x3c>)
 801b48e:	f7ec ff6a 	bl	8008366 <HAL_SUBGHZ_ReadRegisters>
 801b492:	697b      	ldr	r3, [r7, #20]
 801b494:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b496:	693b      	ldr	r3, [r7, #16]
 801b498:	f383 8810 	msr	PRIMASK, r3
}
 801b49c:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 801b49e:	7afb      	ldrb	r3, [r7, #11]
}
 801b4a0:	4618      	mov	r0, r3
 801b4a2:	3718      	adds	r7, #24
 801b4a4:	46bd      	mov	sp, r7
 801b4a6:	bd80      	pop	{r7, pc}
 801b4a8:	20000318 	.word	0x20000318

0801b4ac <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b4ac:	b580      	push	{r7, lr}
 801b4ae:	b086      	sub	sp, #24
 801b4b0:	af00      	add	r7, sp, #0
 801b4b2:	4603      	mov	r3, r0
 801b4b4:	6039      	str	r1, [r7, #0]
 801b4b6:	80fb      	strh	r3, [r7, #6]
 801b4b8:	4613      	mov	r3, r2
 801b4ba:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b4bc:	f3ef 8310 	mrs	r3, PRIMASK
 801b4c0:	60fb      	str	r3, [r7, #12]
  return(result);
 801b4c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b4c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b4c6:	b672      	cpsid	i
}
 801b4c8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b4ca:	88bb      	ldrh	r3, [r7, #4]
 801b4cc:	88f9      	ldrh	r1, [r7, #6]
 801b4ce:	683a      	ldr	r2, [r7, #0]
 801b4d0:	4806      	ldr	r0, [pc, #24]	@ (801b4ec <SUBGRF_WriteRegisters+0x40>)
 801b4d2:	f7ec fee9 	bl	80082a8 <HAL_SUBGHZ_WriteRegisters>
 801b4d6:	697b      	ldr	r3, [r7, #20]
 801b4d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4da:	693b      	ldr	r3, [r7, #16]
 801b4dc:	f383 8810 	msr	PRIMASK, r3
}
 801b4e0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b4e2:	bf00      	nop
 801b4e4:	3718      	adds	r7, #24
 801b4e6:	46bd      	mov	sp, r7
 801b4e8:	bd80      	pop	{r7, pc}
 801b4ea:	bf00      	nop
 801b4ec:	20000318 	.word	0x20000318

0801b4f0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b4f0:	b580      	push	{r7, lr}
 801b4f2:	b086      	sub	sp, #24
 801b4f4:	af00      	add	r7, sp, #0
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	6039      	str	r1, [r7, #0]
 801b4fa:	80fb      	strh	r3, [r7, #6]
 801b4fc:	4613      	mov	r3, r2
 801b4fe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b500:	f3ef 8310 	mrs	r3, PRIMASK
 801b504:	60fb      	str	r3, [r7, #12]
  return(result);
 801b506:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b508:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b50a:	b672      	cpsid	i
}
 801b50c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b50e:	88bb      	ldrh	r3, [r7, #4]
 801b510:	88f9      	ldrh	r1, [r7, #6]
 801b512:	683a      	ldr	r2, [r7, #0]
 801b514:	4806      	ldr	r0, [pc, #24]	@ (801b530 <SUBGRF_ReadRegisters+0x40>)
 801b516:	f7ec ff26 	bl	8008366 <HAL_SUBGHZ_ReadRegisters>
 801b51a:	697b      	ldr	r3, [r7, #20]
 801b51c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b51e:	693b      	ldr	r3, [r7, #16]
 801b520:	f383 8810 	msr	PRIMASK, r3
}
 801b524:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b526:	bf00      	nop
 801b528:	3718      	adds	r7, #24
 801b52a:	46bd      	mov	sp, r7
 801b52c:	bd80      	pop	{r7, pc}
 801b52e:	bf00      	nop
 801b530:	20000318 	.word	0x20000318

0801b534 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b534:	b580      	push	{r7, lr}
 801b536:	b086      	sub	sp, #24
 801b538:	af00      	add	r7, sp, #0
 801b53a:	4603      	mov	r3, r0
 801b53c:	6039      	str	r1, [r7, #0]
 801b53e:	71fb      	strb	r3, [r7, #7]
 801b540:	4613      	mov	r3, r2
 801b542:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b544:	f3ef 8310 	mrs	r3, PRIMASK
 801b548:	60fb      	str	r3, [r7, #12]
  return(result);
 801b54a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b54c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b54e:	b672      	cpsid	i
}
 801b550:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801b552:	79bb      	ldrb	r3, [r7, #6]
 801b554:	b29b      	uxth	r3, r3
 801b556:	79f9      	ldrb	r1, [r7, #7]
 801b558:	683a      	ldr	r2, [r7, #0]
 801b55a:	4806      	ldr	r0, [pc, #24]	@ (801b574 <SUBGRF_WriteBuffer+0x40>)
 801b55c:	f7ed f817 	bl	800858e <HAL_SUBGHZ_WriteBuffer>
 801b560:	697b      	ldr	r3, [r7, #20]
 801b562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b564:	693b      	ldr	r3, [r7, #16]
 801b566:	f383 8810 	msr	PRIMASK, r3
}
 801b56a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b56c:	bf00      	nop
 801b56e:	3718      	adds	r7, #24
 801b570:	46bd      	mov	sp, r7
 801b572:	bd80      	pop	{r7, pc}
 801b574:	20000318 	.word	0x20000318

0801b578 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b578:	b580      	push	{r7, lr}
 801b57a:	b086      	sub	sp, #24
 801b57c:	af00      	add	r7, sp, #0
 801b57e:	4603      	mov	r3, r0
 801b580:	6039      	str	r1, [r7, #0]
 801b582:	71fb      	strb	r3, [r7, #7]
 801b584:	4613      	mov	r3, r2
 801b586:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b588:	f3ef 8310 	mrs	r3, PRIMASK
 801b58c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b58e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b590:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b592:	b672      	cpsid	i
}
 801b594:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801b596:	79bb      	ldrb	r3, [r7, #6]
 801b598:	b29b      	uxth	r3, r3
 801b59a:	79f9      	ldrb	r1, [r7, #7]
 801b59c:	683a      	ldr	r2, [r7, #0]
 801b59e:	4806      	ldr	r0, [pc, #24]	@ (801b5b8 <SUBGRF_ReadBuffer+0x40>)
 801b5a0:	f7ed f848 	bl	8008634 <HAL_SUBGHZ_ReadBuffer>
 801b5a4:	697b      	ldr	r3, [r7, #20]
 801b5a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5a8:	693b      	ldr	r3, [r7, #16]
 801b5aa:	f383 8810 	msr	PRIMASK, r3
}
 801b5ae:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b5b0:	bf00      	nop
 801b5b2:	3718      	adds	r7, #24
 801b5b4:	46bd      	mov	sp, r7
 801b5b6:	bd80      	pop	{r7, pc}
 801b5b8:	20000318 	.word	0x20000318

0801b5bc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b5bc:	b580      	push	{r7, lr}
 801b5be:	b086      	sub	sp, #24
 801b5c0:	af00      	add	r7, sp, #0
 801b5c2:	4603      	mov	r3, r0
 801b5c4:	6039      	str	r1, [r7, #0]
 801b5c6:	71fb      	strb	r3, [r7, #7]
 801b5c8:	4613      	mov	r3, r2
 801b5ca:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b5cc:	f3ef 8310 	mrs	r3, PRIMASK
 801b5d0:	60fb      	str	r3, [r7, #12]
  return(result);
 801b5d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b5d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b5d6:	b672      	cpsid	i
}
 801b5d8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801b5da:	88bb      	ldrh	r3, [r7, #4]
 801b5dc:	79f9      	ldrb	r1, [r7, #7]
 801b5de:	683a      	ldr	r2, [r7, #0]
 801b5e0:	4806      	ldr	r0, [pc, #24]	@ (801b5fc <SUBGRF_WriteCommand+0x40>)
 801b5e2:	f7ec ff21 	bl	8008428 <HAL_SUBGHZ_ExecSetCmd>
 801b5e6:	697b      	ldr	r3, [r7, #20]
 801b5e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5ea:	693b      	ldr	r3, [r7, #16]
 801b5ec:	f383 8810 	msr	PRIMASK, r3
}
 801b5f0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b5f2:	bf00      	nop
 801b5f4:	3718      	adds	r7, #24
 801b5f6:	46bd      	mov	sp, r7
 801b5f8:	bd80      	pop	{r7, pc}
 801b5fa:	bf00      	nop
 801b5fc:	20000318 	.word	0x20000318

0801b600 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b600:	b580      	push	{r7, lr}
 801b602:	b086      	sub	sp, #24
 801b604:	af00      	add	r7, sp, #0
 801b606:	4603      	mov	r3, r0
 801b608:	6039      	str	r1, [r7, #0]
 801b60a:	71fb      	strb	r3, [r7, #7]
 801b60c:	4613      	mov	r3, r2
 801b60e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b610:	f3ef 8310 	mrs	r3, PRIMASK
 801b614:	60fb      	str	r3, [r7, #12]
  return(result);
 801b616:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b61a:	b672      	cpsid	i
}
 801b61c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801b61e:	88bb      	ldrh	r3, [r7, #4]
 801b620:	79f9      	ldrb	r1, [r7, #7]
 801b622:	683a      	ldr	r2, [r7, #0]
 801b624:	4806      	ldr	r0, [pc, #24]	@ (801b640 <SUBGRF_ReadCommand+0x40>)
 801b626:	f7ec ff5e 	bl	80084e6 <HAL_SUBGHZ_ExecGetCmd>
 801b62a:	697b      	ldr	r3, [r7, #20]
 801b62c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b62e:	693b      	ldr	r3, [r7, #16]
 801b630:	f383 8810 	msr	PRIMASK, r3
}
 801b634:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b636:	bf00      	nop
 801b638:	3718      	adds	r7, #24
 801b63a:	46bd      	mov	sp, r7
 801b63c:	bd80      	pop	{r7, pc}
 801b63e:	bf00      	nop
 801b640:	20000318 	.word	0x20000318

0801b644 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801b644:	b580      	push	{r7, lr}
 801b646:	b084      	sub	sp, #16
 801b648:	af00      	add	r7, sp, #0
 801b64a:	4603      	mov	r3, r0
 801b64c:	460a      	mov	r2, r1
 801b64e:	71fb      	strb	r3, [r7, #7]
 801b650:	4613      	mov	r3, r2
 801b652:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801b654:	2301      	movs	r3, #1
 801b656:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801b658:	79bb      	ldrb	r3, [r7, #6]
 801b65a:	2b01      	cmp	r3, #1
 801b65c:	d10d      	bne.n	801b67a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801b65e:	79fb      	ldrb	r3, [r7, #7]
 801b660:	2b01      	cmp	r3, #1
 801b662:	d104      	bne.n	801b66e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b664:	2302      	movs	r3, #2
 801b666:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b668:	2004      	movs	r0, #4
 801b66a:	f000 f8ef 	bl	801b84c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b66e:	79fb      	ldrb	r3, [r7, #7]
 801b670:	2b02      	cmp	r3, #2
 801b672:	d107      	bne.n	801b684 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b674:	2303      	movs	r3, #3
 801b676:	73fb      	strb	r3, [r7, #15]
 801b678:	e004      	b.n	801b684 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b67a:	79bb      	ldrb	r3, [r7, #6]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d101      	bne.n	801b684 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b680:	2301      	movs	r3, #1
 801b682:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b684:	7bfb      	ldrb	r3, [r7, #15]
 801b686:	4618      	mov	r0, r3
 801b688:	f7f0 fa6f 	bl	800bb6a <RBI_ConfigRFSwitch>
}
 801b68c:	bf00      	nop
 801b68e:	3710      	adds	r7, #16
 801b690:	46bd      	mov	sp, r7
 801b692:	bd80      	pop	{r7, pc}

0801b694 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801b694:	b580      	push	{r7, lr}
 801b696:	b084      	sub	sp, #16
 801b698:	af00      	add	r7, sp, #0
 801b69a:	4603      	mov	r3, r0
 801b69c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b69e:	2301      	movs	r3, #1
 801b6a0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b6a2:	f7f0 fa70 	bl	800bb86 <RBI_GetTxConfig>
 801b6a6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b6a8:	68bb      	ldr	r3, [r7, #8]
 801b6aa:	2b02      	cmp	r3, #2
 801b6ac:	d016      	beq.n	801b6dc <SUBGRF_SetRfTxPower+0x48>
 801b6ae:	68bb      	ldr	r3, [r7, #8]
 801b6b0:	2b02      	cmp	r3, #2
 801b6b2:	dc16      	bgt.n	801b6e2 <SUBGRF_SetRfTxPower+0x4e>
 801b6b4:	68bb      	ldr	r3, [r7, #8]
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d003      	beq.n	801b6c2 <SUBGRF_SetRfTxPower+0x2e>
 801b6ba:	68bb      	ldr	r3, [r7, #8]
 801b6bc:	2b01      	cmp	r3, #1
 801b6be:	d00a      	beq.n	801b6d6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b6c0:	e00f      	b.n	801b6e2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b6c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b6c6:	2b0f      	cmp	r3, #15
 801b6c8:	dd02      	ble.n	801b6d0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b6ca:	2302      	movs	r3, #2
 801b6cc:	73fb      	strb	r3, [r7, #15]
            break;
 801b6ce:	e009      	b.n	801b6e4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b6d0:	2301      	movs	r3, #1
 801b6d2:	73fb      	strb	r3, [r7, #15]
            break;
 801b6d4:	e006      	b.n	801b6e4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b6d6:	2301      	movs	r3, #1
 801b6d8:	73fb      	strb	r3, [r7, #15]
            break;
 801b6da:	e003      	b.n	801b6e4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b6dc:	2302      	movs	r3, #2
 801b6de:	73fb      	strb	r3, [r7, #15]
            break;
 801b6e0:	e000      	b.n	801b6e4 <SUBGRF_SetRfTxPower+0x50>
            break;
 801b6e2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b6e4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b6e8:	7bfb      	ldrb	r3, [r7, #15]
 801b6ea:	2202      	movs	r2, #2
 801b6ec:	4618      	mov	r0, r3
 801b6ee:	f7ff fbb9 	bl	801ae64 <SUBGRF_SetTxParams>

    return paSelect;
 801b6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	3710      	adds	r7, #16
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	bd80      	pop	{r7, pc}

0801b6fc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b6fc:	b480      	push	{r7}
 801b6fe:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b700:	2301      	movs	r3, #1
}
 801b702:	4618      	mov	r0, r3
 801b704:	46bd      	mov	sp, r7
 801b706:	bc80      	pop	{r7}
 801b708:	4770      	bx	lr
	...

0801b70c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b70c:	b580      	push	{r7, lr}
 801b70e:	b082      	sub	sp, #8
 801b710:	af00      	add	r7, sp, #0
 801b712:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b714:	4b03      	ldr	r3, [pc, #12]	@ (801b724 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	2001      	movs	r0, #1
 801b71a:	4798      	blx	r3
}
 801b71c:	bf00      	nop
 801b71e:	3708      	adds	r7, #8
 801b720:	46bd      	mov	sp, r7
 801b722:	bd80      	pop	{r7, pc}
 801b724:	20001dc0 	.word	0x20001dc0

0801b728 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b728:	b580      	push	{r7, lr}
 801b72a:	b082      	sub	sp, #8
 801b72c:	af00      	add	r7, sp, #0
 801b72e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b730:	4b03      	ldr	r3, [pc, #12]	@ (801b740 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	2002      	movs	r0, #2
 801b736:	4798      	blx	r3
}
 801b738:	bf00      	nop
 801b73a:	3708      	adds	r7, #8
 801b73c:	46bd      	mov	sp, r7
 801b73e:	bd80      	pop	{r7, pc}
 801b740:	20001dc0 	.word	0x20001dc0

0801b744 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b744:	b580      	push	{r7, lr}
 801b746:	b082      	sub	sp, #8
 801b748:	af00      	add	r7, sp, #0
 801b74a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b74c:	4b03      	ldr	r3, [pc, #12]	@ (801b75c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	2040      	movs	r0, #64	@ 0x40
 801b752:	4798      	blx	r3
}
 801b754:	bf00      	nop
 801b756:	3708      	adds	r7, #8
 801b758:	46bd      	mov	sp, r7
 801b75a:	bd80      	pop	{r7, pc}
 801b75c:	20001dc0 	.word	0x20001dc0

0801b760 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b760:	b580      	push	{r7, lr}
 801b762:	b082      	sub	sp, #8
 801b764:	af00      	add	r7, sp, #0
 801b766:	6078      	str	r0, [r7, #4]
 801b768:	460b      	mov	r3, r1
 801b76a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b76c:	78fb      	ldrb	r3, [r7, #3]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d002      	beq.n	801b778 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b772:	2b01      	cmp	r3, #1
 801b774:	d005      	beq.n	801b782 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b776:	e00a      	b.n	801b78e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b778:	4b07      	ldr	r3, [pc, #28]	@ (801b798 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	2080      	movs	r0, #128	@ 0x80
 801b77e:	4798      	blx	r3
            break;
 801b780:	e005      	b.n	801b78e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b782:	4b05      	ldr	r3, [pc, #20]	@ (801b798 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b78a:	4798      	blx	r3
            break;
 801b78c:	bf00      	nop
    }
}
 801b78e:	bf00      	nop
 801b790:	3708      	adds	r7, #8
 801b792:	46bd      	mov	sp, r7
 801b794:	bd80      	pop	{r7, pc}
 801b796:	bf00      	nop
 801b798:	20001dc0 	.word	0x20001dc0

0801b79c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b79c:	b580      	push	{r7, lr}
 801b79e:	b082      	sub	sp, #8
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b7a4:	4b04      	ldr	r3, [pc, #16]	@ (801b7b8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b7a6:	681b      	ldr	r3, [r3, #0]
 801b7a8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801b7ac:	4798      	blx	r3
}
 801b7ae:	bf00      	nop
 801b7b0:	3708      	adds	r7, #8
 801b7b2:	46bd      	mov	sp, r7
 801b7b4:	bd80      	pop	{r7, pc}
 801b7b6:	bf00      	nop
 801b7b8:	20001dc0 	.word	0x20001dc0

0801b7bc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b7bc:	b580      	push	{r7, lr}
 801b7be:	b082      	sub	sp, #8
 801b7c0:	af00      	add	r7, sp, #0
 801b7c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b7c4:	4b03      	ldr	r3, [pc, #12]	@ (801b7d4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	2020      	movs	r0, #32
 801b7ca:	4798      	blx	r3
}
 801b7cc:	bf00      	nop
 801b7ce:	3708      	adds	r7, #8
 801b7d0:	46bd      	mov	sp, r7
 801b7d2:	bd80      	pop	{r7, pc}
 801b7d4:	20001dc0 	.word	0x20001dc0

0801b7d8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b7d8:	b580      	push	{r7, lr}
 801b7da:	b082      	sub	sp, #8
 801b7dc:	af00      	add	r7, sp, #0
 801b7de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b7e0:	4b03      	ldr	r3, [pc, #12]	@ (801b7f0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	2004      	movs	r0, #4
 801b7e6:	4798      	blx	r3
}
 801b7e8:	bf00      	nop
 801b7ea:	3708      	adds	r7, #8
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	bd80      	pop	{r7, pc}
 801b7f0:	20001dc0 	.word	0x20001dc0

0801b7f4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b082      	sub	sp, #8
 801b7f8:	af00      	add	r7, sp, #0
 801b7fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b7fc:	4b03      	ldr	r3, [pc, #12]	@ (801b80c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	2008      	movs	r0, #8
 801b802:	4798      	blx	r3
}
 801b804:	bf00      	nop
 801b806:	3708      	adds	r7, #8
 801b808:	46bd      	mov	sp, r7
 801b80a:	bd80      	pop	{r7, pc}
 801b80c:	20001dc0 	.word	0x20001dc0

0801b810 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b810:	b580      	push	{r7, lr}
 801b812:	b082      	sub	sp, #8
 801b814:	af00      	add	r7, sp, #0
 801b816:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b818:	4b03      	ldr	r3, [pc, #12]	@ (801b828 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	2010      	movs	r0, #16
 801b81e:	4798      	blx	r3
}
 801b820:	bf00      	nop
 801b822:	3708      	adds	r7, #8
 801b824:	46bd      	mov	sp, r7
 801b826:	bd80      	pop	{r7, pc}
 801b828:	20001dc0 	.word	0x20001dc0

0801b82c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b82c:	b580      	push	{r7, lr}
 801b82e:	b082      	sub	sp, #8
 801b830:	af00      	add	r7, sp, #0
 801b832:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801b834:	4b04      	ldr	r3, [pc, #16]	@ (801b848 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801b83c:	4798      	blx	r3
}
 801b83e:	bf00      	nop
 801b840:	3708      	adds	r7, #8
 801b842:	46bd      	mov	sp, r7
 801b844:	bd80      	pop	{r7, pc}
 801b846:	bf00      	nop
 801b848:	20001dc0 	.word	0x20001dc0

0801b84c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b84c:	b580      	push	{r7, lr}
 801b84e:	b084      	sub	sp, #16
 801b850:	af00      	add	r7, sp, #0
 801b852:	4603      	mov	r3, r0
 801b854:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b856:	f7f0 f9a4 	bl	800bba2 <RBI_IsDCDC>
 801b85a:	4603      	mov	r3, r0
 801b85c:	2b01      	cmp	r3, #1
 801b85e:	d112      	bne.n	801b886 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b860:	f640 1023 	movw	r0, #2339	@ 0x923
 801b864:	f7ff fe02 	bl	801b46c <SUBGRF_ReadRegister>
 801b868:	4603      	mov	r3, r0
 801b86a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b86c:	7bfb      	ldrb	r3, [r7, #15]
 801b86e:	f023 0306 	bic.w	r3, r3, #6
 801b872:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b874:	7bfa      	ldrb	r2, [r7, #15]
 801b876:	79fb      	ldrb	r3, [r7, #7]
 801b878:	4313      	orrs	r3, r2
 801b87a:	b2db      	uxtb	r3, r3
 801b87c:	4619      	mov	r1, r3
 801b87e:	f640 1023 	movw	r0, #2339	@ 0x923
 801b882:	f7ff fdd1 	bl	801b428 <SUBGRF_WriteRegister>
  }
}
 801b886:	bf00      	nop
 801b888:	3710      	adds	r7, #16
 801b88a:	46bd      	mov	sp, r7
 801b88c:	bd80      	pop	{r7, pc}
	...

0801b890 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b890:	b480      	push	{r7}
 801b892:	b085      	sub	sp, #20
 801b894:	af00      	add	r7, sp, #0
 801b896:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d101      	bne.n	801b8a2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b89e:	231f      	movs	r3, #31
 801b8a0:	e017      	b.n	801b8d2 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b8a2:	2300      	movs	r3, #0
 801b8a4:	73fb      	strb	r3, [r7, #15]
 801b8a6:	e00f      	b.n	801b8c8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b8a8:	7bfb      	ldrb	r3, [r7, #15]
 801b8aa:	4a0c      	ldr	r2, [pc, #48]	@ (801b8dc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b8ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b8b0:	687a      	ldr	r2, [r7, #4]
 801b8b2:	429a      	cmp	r2, r3
 801b8b4:	d205      	bcs.n	801b8c2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b8b6:	7bfb      	ldrb	r3, [r7, #15]
 801b8b8:	4a08      	ldr	r2, [pc, #32]	@ (801b8dc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b8ba:	00db      	lsls	r3, r3, #3
 801b8bc:	4413      	add	r3, r2
 801b8be:	791b      	ldrb	r3, [r3, #4]
 801b8c0:	e007      	b.n	801b8d2 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b8c2:	7bfb      	ldrb	r3, [r7, #15]
 801b8c4:	3301      	adds	r3, #1
 801b8c6:	73fb      	strb	r3, [r7, #15]
 801b8c8:	7bfb      	ldrb	r3, [r7, #15]
 801b8ca:	2b15      	cmp	r3, #21
 801b8cc:	d9ec      	bls.n	801b8a8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801b8ce:	bf00      	nop
 801b8d0:	e7fd      	b.n	801b8ce <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b8d2:	4618      	mov	r0, r3
 801b8d4:	3714      	adds	r7, #20
 801b8d6:	46bd      	mov	sp, r7
 801b8d8:	bc80      	pop	{r7}
 801b8da:	4770      	bx	lr
 801b8dc:	0801e0d4 	.word	0x0801e0d4

0801b8e0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b8e0:	b580      	push	{r7, lr}
 801b8e2:	b08a      	sub	sp, #40	@ 0x28
 801b8e4:	af00      	add	r7, sp, #0
 801b8e6:	6078      	str	r0, [r7, #4]
 801b8e8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b8ea:	4b35      	ldr	r3, [pc, #212]	@ (801b9c0 <SUBGRF_GetCFO+0xe0>)
 801b8ec:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801b8ee:	f640 0007 	movw	r0, #2055	@ 0x807
 801b8f2:	f7ff fdbb 	bl	801b46c <SUBGRF_ReadRegister>
 801b8f6:	4603      	mov	r3, r0
 801b8f8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b8fa:	7ffb      	ldrb	r3, [r7, #31]
 801b8fc:	08db      	lsrs	r3, r3, #3
 801b8fe:	b2db      	uxtb	r3, r3
 801b900:	f003 0303 	and.w	r3, r3, #3
 801b904:	3328      	adds	r3, #40	@ 0x28
 801b906:	443b      	add	r3, r7
 801b908:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b90c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b90e:	7ffb      	ldrb	r3, [r7, #31]
 801b910:	f003 0307 	and.w	r3, r3, #7
 801b914:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801b916:	7fba      	ldrb	r2, [r7, #30]
 801b918:	7f7b      	ldrb	r3, [r7, #29]
 801b91a:	3301      	adds	r3, #1
 801b91c:	fa02 f303 	lsl.w	r3, r2, r3
 801b920:	461a      	mov	r2, r3
 801b922:	4b28      	ldr	r3, [pc, #160]	@ (801b9c4 <SUBGRF_GetCFO+0xe4>)
 801b924:	fbb3 f3f2 	udiv	r3, r3, r2
 801b928:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b92a:	69ba      	ldr	r2, [r7, #24]
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b932:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b934:	2301      	movs	r3, #1
 801b936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b93a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b93e:	697a      	ldr	r2, [r7, #20]
 801b940:	fb02 f303 	mul.w	r3, r2, r3
 801b944:	2b07      	cmp	r3, #7
 801b946:	d802      	bhi.n	801b94e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b948:	2302      	movs	r3, #2
 801b94a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801b94e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b952:	697a      	ldr	r2, [r7, #20]
 801b954:	fb02 f303 	mul.w	r3, r2, r3
 801b958:	2b03      	cmp	r3, #3
 801b95a:	d802      	bhi.n	801b962 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801b95c:	2304      	movs	r3, #4
 801b95e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801b962:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801b966:	69bb      	ldr	r3, [r7, #24]
 801b968:	fb02 f303 	mul.w	r3, r2, r3
 801b96c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801b96e:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801b972:	f7ff fd7b 	bl	801b46c <SUBGRF_ReadRegister>
 801b976:	4603      	mov	r3, r0
 801b978:	021b      	lsls	r3, r3, #8
 801b97a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801b97e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801b980:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801b984:	f7ff fd72 	bl	801b46c <SUBGRF_ReadRegister>
 801b988:	4603      	mov	r3, r0
 801b98a:	461a      	mov	r2, r3
 801b98c:	6a3b      	ldr	r3, [r7, #32]
 801b98e:	4313      	orrs	r3, r2
 801b990:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801b992:	6a3b      	ldr	r3, [r7, #32]
 801b994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d005      	beq.n	801b9a8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801b99c:	6a3b      	ldr	r3, [r7, #32]
 801b99e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b9a2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b9a6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801b9a8:	693b      	ldr	r3, [r7, #16]
 801b9aa:	095b      	lsrs	r3, r3, #5
 801b9ac:	6a3a      	ldr	r2, [r7, #32]
 801b9ae:	fb02 f303 	mul.w	r3, r2, r3
 801b9b2:	11da      	asrs	r2, r3, #7
 801b9b4:	683b      	ldr	r3, [r7, #0]
 801b9b6:	601a      	str	r2, [r3, #0]
}
 801b9b8:	bf00      	nop
 801b9ba:	3728      	adds	r7, #40	@ 0x28
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	bd80      	pop	{r7, pc}
 801b9c0:	0c0a0804 	.word	0x0c0a0804
 801b9c4:	01e84800 	.word	0x01e84800

0801b9c8 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801b9c8:	b480      	push	{r7}
 801b9ca:	b087      	sub	sp, #28
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	4603      	mov	r3, r0
 801b9d0:	60b9      	str	r1, [r7, #8]
 801b9d2:	607a      	str	r2, [r7, #4]
 801b9d4:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801b9d6:	2300      	movs	r3, #0
 801b9d8:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801b9da:	f04f 33ff 	mov.w	r3, #4294967295
 801b9de:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801b9e0:	697b      	ldr	r3, [r7, #20]
}
 801b9e2:	4618      	mov	r0, r3
 801b9e4:	371c      	adds	r7, #28
 801b9e6:	46bd      	mov	sp, r7
 801b9e8:	bc80      	pop	{r7}
 801b9ea:	4770      	bx	lr

0801b9ec <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801b9ec:	b480      	push	{r7}
 801b9ee:	b087      	sub	sp, #28
 801b9f0:	af00      	add	r7, sp, #0
 801b9f2:	4603      	mov	r3, r0
 801b9f4:	60b9      	str	r1, [r7, #8]
 801b9f6:	607a      	str	r2, [r7, #4]
 801b9f8:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801b9fe:	f04f 33ff 	mov.w	r3, #4294967295
 801ba02:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ba04:	697b      	ldr	r3, [r7, #20]
}
 801ba06:	4618      	mov	r0, r3
 801ba08:	371c      	adds	r7, #28
 801ba0a:	46bd      	mov	sp, r7
 801ba0c:	bc80      	pop	{r7}
 801ba0e:	4770      	bx	lr

0801ba10 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801ba10:	b480      	push	{r7}
 801ba12:	b085      	sub	sp, #20
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	60f8      	str	r0, [r7, #12]
 801ba18:	60b9      	str	r1, [r7, #8]
 801ba1a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801ba1c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801ba20:	4618      	mov	r0, r3
 801ba22:	3714      	adds	r7, #20
 801ba24:	46bd      	mov	sp, r7
 801ba26:	bc80      	pop	{r7}
 801ba28:	4770      	bx	lr

0801ba2a <RFW_DeInit>:

void RFW_DeInit( void )
{
 801ba2a:	b480      	push	{r7}
 801ba2c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801ba2e:	bf00      	nop
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bc80      	pop	{r7}
 801ba34:	4770      	bx	lr

0801ba36 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801ba36:	b480      	push	{r7}
 801ba38:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801ba3a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ba3c:	4618      	mov	r0, r3
 801ba3e:	46bd      	mov	sp, r7
 801ba40:	bc80      	pop	{r7}
 801ba42:	4770      	bx	lr

0801ba44 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801ba44:	b480      	push	{r7}
 801ba46:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801ba48:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ba4a:	4618      	mov	r0, r3
 801ba4c:	46bd      	mov	sp, r7
 801ba4e:	bc80      	pop	{r7}
 801ba50:	4770      	bx	lr

0801ba52 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801ba52:	b480      	push	{r7}
 801ba54:	b083      	sub	sp, #12
 801ba56:	af00      	add	r7, sp, #0
 801ba58:	4603      	mov	r3, r0
 801ba5a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801ba5c:	bf00      	nop
 801ba5e:	370c      	adds	r7, #12
 801ba60:	46bd      	mov	sp, r7
 801ba62:	bc80      	pop	{r7}
 801ba64:	4770      	bx	lr

0801ba66 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801ba66:	b480      	push	{r7}
 801ba68:	b087      	sub	sp, #28
 801ba6a:	af00      	add	r7, sp, #0
 801ba6c:	60f8      	str	r0, [r7, #12]
 801ba6e:	460b      	mov	r3, r1
 801ba70:	607a      	str	r2, [r7, #4]
 801ba72:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801ba74:	f04f 33ff 	mov.w	r3, #4294967295
 801ba78:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801ba7a:	697b      	ldr	r3, [r7, #20]
}
 801ba7c:	4618      	mov	r0, r3
 801ba7e:	371c      	adds	r7, #28
 801ba80:	46bd      	mov	sp, r7
 801ba82:	bc80      	pop	{r7}
 801ba84:	4770      	bx	lr

0801ba86 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ba86:	b480      	push	{r7}
 801ba88:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801ba8a:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801ba8e:	4618      	mov	r0, r3
 801ba90:	46bd      	mov	sp, r7
 801ba92:	bc80      	pop	{r7}
 801ba94:	4770      	bx	lr

0801ba96 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801ba96:	b480      	push	{r7}
 801ba98:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801ba9a:	bf00      	nop
 801ba9c:	46bd      	mov	sp, r7
 801ba9e:	bc80      	pop	{r7}
 801baa0:	4770      	bx	lr

0801baa2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801baa2:	b480      	push	{r7}
 801baa4:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801baa6:	bf00      	nop
 801baa8:	46bd      	mov	sp, r7
 801baaa:	bc80      	pop	{r7}
 801baac:	4770      	bx	lr

0801baae <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801baae:	b480      	push	{r7}
 801bab0:	b083      	sub	sp, #12
 801bab2:	af00      	add	r7, sp, #0
 801bab4:	4603      	mov	r3, r0
 801bab6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801bab8:	bf00      	nop
 801baba:	370c      	adds	r7, #12
 801babc:	46bd      	mov	sp, r7
 801babe:	bc80      	pop	{r7}
 801bac0:	4770      	bx	lr
	...

0801bac4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801bac4:	b480      	push	{r7}
 801bac6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801bac8:	4b04      	ldr	r3, [pc, #16]	@ (801badc <UTIL_LPM_Init+0x18>)
 801baca:	2200      	movs	r2, #0
 801bacc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801bace:	4b04      	ldr	r3, [pc, #16]	@ (801bae0 <UTIL_LPM_Init+0x1c>)
 801bad0:	2200      	movs	r2, #0
 801bad2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801bad4:	bf00      	nop
 801bad6:	46bd      	mov	sp, r7
 801bad8:	bc80      	pop	{r7}
 801bada:	4770      	bx	lr
 801badc:	20001dc4 	.word	0x20001dc4
 801bae0:	20001dc8 	.word	0x20001dc8

0801bae4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801bae4:	b480      	push	{r7}
 801bae6:	b087      	sub	sp, #28
 801bae8:	af00      	add	r7, sp, #0
 801baea:	6078      	str	r0, [r7, #4]
 801baec:	460b      	mov	r3, r1
 801baee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801baf0:	f3ef 8310 	mrs	r3, PRIMASK
 801baf4:	613b      	str	r3, [r7, #16]
  return(result);
 801baf6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801baf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bafa:	b672      	cpsid	i
}
 801bafc:	bf00      	nop
  
  switch( state )
 801bafe:	78fb      	ldrb	r3, [r7, #3]
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d008      	beq.n	801bb16 <UTIL_LPM_SetStopMode+0x32>
 801bb04:	2b01      	cmp	r3, #1
 801bb06:	d10e      	bne.n	801bb26 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801bb08:	4b0d      	ldr	r3, [pc, #52]	@ (801bb40 <UTIL_LPM_SetStopMode+0x5c>)
 801bb0a:	681a      	ldr	r2, [r3, #0]
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	4313      	orrs	r3, r2
 801bb10:	4a0b      	ldr	r2, [pc, #44]	@ (801bb40 <UTIL_LPM_SetStopMode+0x5c>)
 801bb12:	6013      	str	r3, [r2, #0]
      break;
 801bb14:	e008      	b.n	801bb28 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	43da      	mvns	r2, r3
 801bb1a:	4b09      	ldr	r3, [pc, #36]	@ (801bb40 <UTIL_LPM_SetStopMode+0x5c>)
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	4013      	ands	r3, r2
 801bb20:	4a07      	ldr	r2, [pc, #28]	@ (801bb40 <UTIL_LPM_SetStopMode+0x5c>)
 801bb22:	6013      	str	r3, [r2, #0]
      break;
 801bb24:	e000      	b.n	801bb28 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801bb26:	bf00      	nop
 801bb28:	697b      	ldr	r3, [r7, #20]
 801bb2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	f383 8810 	msr	PRIMASK, r3
}
 801bb32:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bb34:	bf00      	nop
 801bb36:	371c      	adds	r7, #28
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	bc80      	pop	{r7}
 801bb3c:	4770      	bx	lr
 801bb3e:	bf00      	nop
 801bb40:	20001dc4 	.word	0x20001dc4

0801bb44 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801bb44:	b480      	push	{r7}
 801bb46:	b087      	sub	sp, #28
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	6078      	str	r0, [r7, #4]
 801bb4c:	460b      	mov	r3, r1
 801bb4e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb50:	f3ef 8310 	mrs	r3, PRIMASK
 801bb54:	613b      	str	r3, [r7, #16]
  return(result);
 801bb56:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801bb58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb5a:	b672      	cpsid	i
}
 801bb5c:	bf00      	nop
  
  switch(state)
 801bb5e:	78fb      	ldrb	r3, [r7, #3]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d008      	beq.n	801bb76 <UTIL_LPM_SetOffMode+0x32>
 801bb64:	2b01      	cmp	r3, #1
 801bb66:	d10e      	bne.n	801bb86 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801bb68:	4b0d      	ldr	r3, [pc, #52]	@ (801bba0 <UTIL_LPM_SetOffMode+0x5c>)
 801bb6a:	681a      	ldr	r2, [r3, #0]
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	4313      	orrs	r3, r2
 801bb70:	4a0b      	ldr	r2, [pc, #44]	@ (801bba0 <UTIL_LPM_SetOffMode+0x5c>)
 801bb72:	6013      	str	r3, [r2, #0]
      break;
 801bb74:	e008      	b.n	801bb88 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	43da      	mvns	r2, r3
 801bb7a:	4b09      	ldr	r3, [pc, #36]	@ (801bba0 <UTIL_LPM_SetOffMode+0x5c>)
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	4013      	ands	r3, r2
 801bb80:	4a07      	ldr	r2, [pc, #28]	@ (801bba0 <UTIL_LPM_SetOffMode+0x5c>)
 801bb82:	6013      	str	r3, [r2, #0]
      break;
 801bb84:	e000      	b.n	801bb88 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801bb86:	bf00      	nop
 801bb88:	697b      	ldr	r3, [r7, #20]
 801bb8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb8c:	68fb      	ldr	r3, [r7, #12]
 801bb8e:	f383 8810 	msr	PRIMASK, r3
}
 801bb92:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bb94:	bf00      	nop
 801bb96:	371c      	adds	r7, #28
 801bb98:	46bd      	mov	sp, r7
 801bb9a:	bc80      	pop	{r7}
 801bb9c:	4770      	bx	lr
 801bb9e:	bf00      	nop
 801bba0:	20001dc8 	.word	0x20001dc8

0801bba4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801bba4:	b580      	push	{r7, lr}
 801bba6:	b084      	sub	sp, #16
 801bba8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bbaa:	f3ef 8310 	mrs	r3, PRIMASK
 801bbae:	60bb      	str	r3, [r7, #8]
  return(result);
 801bbb0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801bbb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbb4:	b672      	cpsid	i
}
 801bbb6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801bbb8:	4b12      	ldr	r3, [pc, #72]	@ (801bc04 <UTIL_LPM_EnterLowPower+0x60>)
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d006      	beq.n	801bbce <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801bbc0:	4b11      	ldr	r3, [pc, #68]	@ (801bc08 <UTIL_LPM_EnterLowPower+0x64>)
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801bbc6:	4b10      	ldr	r3, [pc, #64]	@ (801bc08 <UTIL_LPM_EnterLowPower+0x64>)
 801bbc8:	685b      	ldr	r3, [r3, #4]
 801bbca:	4798      	blx	r3
 801bbcc:	e010      	b.n	801bbf0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801bbce:	4b0f      	ldr	r3, [pc, #60]	@ (801bc0c <UTIL_LPM_EnterLowPower+0x68>)
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d006      	beq.n	801bbe4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801bbd6:	4b0c      	ldr	r3, [pc, #48]	@ (801bc08 <UTIL_LPM_EnterLowPower+0x64>)
 801bbd8:	689b      	ldr	r3, [r3, #8]
 801bbda:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801bbdc:	4b0a      	ldr	r3, [pc, #40]	@ (801bc08 <UTIL_LPM_EnterLowPower+0x64>)
 801bbde:	68db      	ldr	r3, [r3, #12]
 801bbe0:	4798      	blx	r3
 801bbe2:	e005      	b.n	801bbf0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801bbe4:	4b08      	ldr	r3, [pc, #32]	@ (801bc08 <UTIL_LPM_EnterLowPower+0x64>)
 801bbe6:	691b      	ldr	r3, [r3, #16]
 801bbe8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801bbea:	4b07      	ldr	r3, [pc, #28]	@ (801bc08 <UTIL_LPM_EnterLowPower+0x64>)
 801bbec:	695b      	ldr	r3, [r3, #20]
 801bbee:	4798      	blx	r3
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	f383 8810 	msr	PRIMASK, r3
}
 801bbfa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801bbfc:	bf00      	nop
 801bbfe:	3710      	adds	r7, #16
 801bc00:	46bd      	mov	sp, r7
 801bc02:	bd80      	pop	{r7, pc}
 801bc04:	20001dc4 	.word	0x20001dc4
 801bc08:	0801db48 	.word	0x0801db48
 801bc0c:	20001dc8 	.word	0x20001dc8

0801bc10 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801bc10:	b480      	push	{r7}
 801bc12:	b087      	sub	sp, #28
 801bc14:	af00      	add	r7, sp, #0
 801bc16:	60f8      	str	r0, [r7, #12]
 801bc18:	60b9      	str	r1, [r7, #8]
 801bc1a:	4613      	mov	r3, r2
 801bc1c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801bc22:	68bb      	ldr	r3, [r7, #8]
 801bc24:	613b      	str	r3, [r7, #16]

  while( size-- )
 801bc26:	e007      	b.n	801bc38 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801bc28:	693a      	ldr	r2, [r7, #16]
 801bc2a:	1c53      	adds	r3, r2, #1
 801bc2c:	613b      	str	r3, [r7, #16]
 801bc2e:	697b      	ldr	r3, [r7, #20]
 801bc30:	1c59      	adds	r1, r3, #1
 801bc32:	6179      	str	r1, [r7, #20]
 801bc34:	7812      	ldrb	r2, [r2, #0]
 801bc36:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bc38:	88fb      	ldrh	r3, [r7, #6]
 801bc3a:	1e5a      	subs	r2, r3, #1
 801bc3c:	80fa      	strh	r2, [r7, #6]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d1f2      	bne.n	801bc28 <UTIL_MEM_cpy_8+0x18>
    }
}
 801bc42:	bf00      	nop
 801bc44:	bf00      	nop
 801bc46:	371c      	adds	r7, #28
 801bc48:	46bd      	mov	sp, r7
 801bc4a:	bc80      	pop	{r7}
 801bc4c:	4770      	bx	lr

0801bc4e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801bc4e:	b480      	push	{r7}
 801bc50:	b085      	sub	sp, #20
 801bc52:	af00      	add	r7, sp, #0
 801bc54:	6078      	str	r0, [r7, #4]
 801bc56:	460b      	mov	r3, r1
 801bc58:	70fb      	strb	r3, [r7, #3]
 801bc5a:	4613      	mov	r3, r2
 801bc5c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801bc62:	e004      	b.n	801bc6e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	1c5a      	adds	r2, r3, #1
 801bc68:	60fa      	str	r2, [r7, #12]
 801bc6a:	78fa      	ldrb	r2, [r7, #3]
 801bc6c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bc6e:	883b      	ldrh	r3, [r7, #0]
 801bc70:	1e5a      	subs	r2, r3, #1
 801bc72:	803a      	strh	r2, [r7, #0]
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d1f5      	bne.n	801bc64 <UTIL_MEM_set_8+0x16>
  }
}
 801bc78:	bf00      	nop
 801bc7a:	bf00      	nop
 801bc7c:	3714      	adds	r7, #20
 801bc7e:	46bd      	mov	sp, r7
 801bc80:	bc80      	pop	{r7}
 801bc82:	4770      	bx	lr

0801bc84 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801bc84:	b082      	sub	sp, #8
 801bc86:	b480      	push	{r7}
 801bc88:	b087      	sub	sp, #28
 801bc8a:	af00      	add	r7, sp, #0
 801bc8c:	60f8      	str	r0, [r7, #12]
 801bc8e:	1d38      	adds	r0, r7, #4
 801bc90:	e880 0006 	stmia.w	r0, {r1, r2}
 801bc94:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801bc96:	2300      	movs	r3, #0
 801bc98:	613b      	str	r3, [r7, #16]
 801bc9a:	2300      	movs	r3, #0
 801bc9c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801bc9e:	687a      	ldr	r2, [r7, #4]
 801bca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bca2:	4413      	add	r3, r2
 801bca4:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801bca6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801bcaa:	b29a      	uxth	r2, r3
 801bcac:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801bcb0:	b29b      	uxth	r3, r3
 801bcb2:	4413      	add	r3, r2
 801bcb4:	b29b      	uxth	r3, r3
 801bcb6:	b21b      	sxth	r3, r3
 801bcb8:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801bcba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bcbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801bcc2:	db0a      	blt.n	801bcda <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801bcc4:	693b      	ldr	r3, [r7, #16]
 801bcc6:	3301      	adds	r3, #1
 801bcc8:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801bcca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bcce:	b29b      	uxth	r3, r3
 801bcd0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801bcd4:	b29b      	uxth	r3, r3
 801bcd6:	b21b      	sxth	r3, r3
 801bcd8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801bcda:	68fb      	ldr	r3, [r7, #12]
 801bcdc:	461a      	mov	r2, r3
 801bcde:	f107 0310 	add.w	r3, r7, #16
 801bce2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bce6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bcea:	68f8      	ldr	r0, [r7, #12]
 801bcec:	371c      	adds	r7, #28
 801bcee:	46bd      	mov	sp, r7
 801bcf0:	bc80      	pop	{r7}
 801bcf2:	b002      	add	sp, #8
 801bcf4:	4770      	bx	lr

0801bcf6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801bcf6:	b082      	sub	sp, #8
 801bcf8:	b480      	push	{r7}
 801bcfa:	b087      	sub	sp, #28
 801bcfc:	af00      	add	r7, sp, #0
 801bcfe:	60f8      	str	r0, [r7, #12]
 801bd00:	1d38      	adds	r0, r7, #4
 801bd02:	e880 0006 	stmia.w	r0, {r1, r2}
 801bd06:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801bd08:	2300      	movs	r3, #0
 801bd0a:	613b      	str	r3, [r7, #16]
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801bd10:	687a      	ldr	r2, [r7, #4]
 801bd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd14:	1ad3      	subs	r3, r2, r3
 801bd16:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801bd18:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801bd1c:	b29a      	uxth	r2, r3
 801bd1e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801bd22:	b29b      	uxth	r3, r3
 801bd24:	1ad3      	subs	r3, r2, r3
 801bd26:	b29b      	uxth	r3, r3
 801bd28:	b21b      	sxth	r3, r3
 801bd2a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801bd2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	da0a      	bge.n	801bd4a <SysTimeSub+0x54>
  {
    c.Seconds--;
 801bd34:	693b      	ldr	r3, [r7, #16]
 801bd36:	3b01      	subs	r3, #1
 801bd38:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801bd3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bd3e:	b29b      	uxth	r3, r3
 801bd40:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801bd44:	b29b      	uxth	r3, r3
 801bd46:	b21b      	sxth	r3, r3
 801bd48:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	461a      	mov	r2, r3
 801bd4e:	f107 0310 	add.w	r3, r7, #16
 801bd52:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bd56:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bd5a:	68f8      	ldr	r0, [r7, #12]
 801bd5c:	371c      	adds	r7, #28
 801bd5e:	46bd      	mov	sp, r7
 801bd60:	bc80      	pop	{r7}
 801bd62:	b002      	add	sp, #8
 801bd64:	4770      	bx	lr
	...

0801bd68 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801bd68:	b580      	push	{r7, lr}
 801bd6a:	b088      	sub	sp, #32
 801bd6c:	af02      	add	r7, sp, #8
 801bd6e:	463b      	mov	r3, r7
 801bd70:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bd74:	2300      	movs	r3, #0
 801bd76:	60bb      	str	r3, [r7, #8]
 801bd78:	2300      	movs	r3, #0
 801bd7a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bd7c:	4b10      	ldr	r3, [pc, #64]	@ (801bdc0 <SysTimeSet+0x58>)
 801bd7e:	691b      	ldr	r3, [r3, #16]
 801bd80:	f107 0208 	add.w	r2, r7, #8
 801bd84:	3204      	adds	r2, #4
 801bd86:	4610      	mov	r0, r2
 801bd88:	4798      	blx	r3
 801bd8a:	4603      	mov	r3, r0
 801bd8c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801bd8e:	f107 0010 	add.w	r0, r7, #16
 801bd92:	68fb      	ldr	r3, [r7, #12]
 801bd94:	9300      	str	r3, [sp, #0]
 801bd96:	68bb      	ldr	r3, [r7, #8]
 801bd98:	463a      	mov	r2, r7
 801bd9a:	ca06      	ldmia	r2, {r1, r2}
 801bd9c:	f7ff ffab 	bl	801bcf6 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801bda0:	4b07      	ldr	r3, [pc, #28]	@ (801bdc0 <SysTimeSet+0x58>)
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	693a      	ldr	r2, [r7, #16]
 801bda6:	4610      	mov	r0, r2
 801bda8:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801bdaa:	4b05      	ldr	r3, [pc, #20]	@ (801bdc0 <SysTimeSet+0x58>)
 801bdac:	689b      	ldr	r3, [r3, #8]
 801bdae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801bdb2:	4610      	mov	r0, r2
 801bdb4:	4798      	blx	r3
}
 801bdb6:	bf00      	nop
 801bdb8:	3718      	adds	r7, #24
 801bdba:	46bd      	mov	sp, r7
 801bdbc:	bd80      	pop	{r7, pc}
 801bdbe:	bf00      	nop
 801bdc0:	0801dc2c 	.word	0x0801dc2c

0801bdc4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801bdc4:	b580      	push	{r7, lr}
 801bdc6:	b08a      	sub	sp, #40	@ 0x28
 801bdc8:	af02      	add	r7, sp, #8
 801bdca:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bdcc:	2300      	movs	r3, #0
 801bdce:	61bb      	str	r3, [r7, #24]
 801bdd0:	2300      	movs	r3, #0
 801bdd2:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801bdd4:	2300      	movs	r3, #0
 801bdd6:	613b      	str	r3, [r7, #16]
 801bdd8:	2300      	movs	r3, #0
 801bdda:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bddc:	4b14      	ldr	r3, [pc, #80]	@ (801be30 <SysTimeGet+0x6c>)
 801bdde:	691b      	ldr	r3, [r3, #16]
 801bde0:	f107 0218 	add.w	r2, r7, #24
 801bde4:	3204      	adds	r2, #4
 801bde6:	4610      	mov	r0, r2
 801bde8:	4798      	blx	r3
 801bdea:	4603      	mov	r3, r0
 801bdec:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bdee:	4b10      	ldr	r3, [pc, #64]	@ (801be30 <SysTimeGet+0x6c>)
 801bdf0:	68db      	ldr	r3, [r3, #12]
 801bdf2:	4798      	blx	r3
 801bdf4:	4603      	mov	r3, r0
 801bdf6:	b21b      	sxth	r3, r3
 801bdf8:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801bdfa:	4b0d      	ldr	r3, [pc, #52]	@ (801be30 <SysTimeGet+0x6c>)
 801bdfc:	685b      	ldr	r3, [r3, #4]
 801bdfe:	4798      	blx	r3
 801be00:	4603      	mov	r3, r0
 801be02:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801be04:	f107 0010 	add.w	r0, r7, #16
 801be08:	69fb      	ldr	r3, [r7, #28]
 801be0a:	9300      	str	r3, [sp, #0]
 801be0c:	69bb      	ldr	r3, [r7, #24]
 801be0e:	f107 0208 	add.w	r2, r7, #8
 801be12:	ca06      	ldmia	r2, {r1, r2}
 801be14:	f7ff ff36 	bl	801bc84 <SysTimeAdd>

  return sysTime;
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	461a      	mov	r2, r3
 801be1c:	f107 0310 	add.w	r3, r7, #16
 801be20:	e893 0003 	ldmia.w	r3, {r0, r1}
 801be24:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801be28:	6878      	ldr	r0, [r7, #4]
 801be2a:	3720      	adds	r7, #32
 801be2c:	46bd      	mov	sp, r7
 801be2e:	bd80      	pop	{r7, pc}
 801be30:	0801dc2c 	.word	0x0801dc2c

0801be34 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801be34:	b580      	push	{r7, lr}
 801be36:	b084      	sub	sp, #16
 801be38:	af00      	add	r7, sp, #0
 801be3a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801be3c:	2300      	movs	r3, #0
 801be3e:	60bb      	str	r3, [r7, #8]
 801be40:	2300      	movs	r3, #0
 801be42:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801be44:	4b0a      	ldr	r3, [pc, #40]	@ (801be70 <SysTimeGetMcuTime+0x3c>)
 801be46:	691b      	ldr	r3, [r3, #16]
 801be48:	f107 0208 	add.w	r2, r7, #8
 801be4c:	3204      	adds	r2, #4
 801be4e:	4610      	mov	r0, r2
 801be50:	4798      	blx	r3
 801be52:	4603      	mov	r3, r0
 801be54:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	461a      	mov	r2, r3
 801be5a:	f107 0308 	add.w	r3, r7, #8
 801be5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801be62:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801be66:	6878      	ldr	r0, [r7, #4]
 801be68:	3710      	adds	r7, #16
 801be6a:	46bd      	mov	sp, r7
 801be6c:	bd80      	pop	{r7, pc}
 801be6e:	bf00      	nop
 801be70:	0801dc2c 	.word	0x0801dc2c

0801be74 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801be74:	b480      	push	{r7}
 801be76:	b085      	sub	sp, #20
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801be7c:	2300      	movs	r3, #0
 801be7e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801be80:	e00e      	b.n	801bea0 <ee_skip_atoi+0x2c>
 801be82:	68fa      	ldr	r2, [r7, #12]
 801be84:	4613      	mov	r3, r2
 801be86:	009b      	lsls	r3, r3, #2
 801be88:	4413      	add	r3, r2
 801be8a:	005b      	lsls	r3, r3, #1
 801be8c:	4618      	mov	r0, r3
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	1c59      	adds	r1, r3, #1
 801be94:	687a      	ldr	r2, [r7, #4]
 801be96:	6011      	str	r1, [r2, #0]
 801be98:	781b      	ldrb	r3, [r3, #0]
 801be9a:	4403      	add	r3, r0
 801be9c:	3b30      	subs	r3, #48	@ 0x30
 801be9e:	60fb      	str	r3, [r7, #12]
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	781b      	ldrb	r3, [r3, #0]
 801bea6:	2b2f      	cmp	r3, #47	@ 0x2f
 801bea8:	d904      	bls.n	801beb4 <ee_skip_atoi+0x40>
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	781b      	ldrb	r3, [r3, #0]
 801beb0:	2b39      	cmp	r3, #57	@ 0x39
 801beb2:	d9e6      	bls.n	801be82 <ee_skip_atoi+0xe>
  return i;
 801beb4:	68fb      	ldr	r3, [r7, #12]
}
 801beb6:	4618      	mov	r0, r3
 801beb8:	3714      	adds	r7, #20
 801beba:	46bd      	mov	sp, r7
 801bebc:	bc80      	pop	{r7}
 801bebe:	4770      	bx	lr

0801bec0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801bec0:	b480      	push	{r7}
 801bec2:	b099      	sub	sp, #100	@ 0x64
 801bec4:	af00      	add	r7, sp, #0
 801bec6:	60f8      	str	r0, [r7, #12]
 801bec8:	60b9      	str	r1, [r7, #8]
 801beca:	607a      	str	r2, [r7, #4]
 801becc:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801bece:	4b71      	ldr	r3, [pc, #452]	@ (801c094 <ee_number+0x1d4>)
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801bed4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d002      	beq.n	801bee4 <ee_number+0x24>
 801bede:	4b6e      	ldr	r3, [pc, #440]	@ (801c098 <ee_number+0x1d8>)
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801bee4:	683b      	ldr	r3, [r7, #0]
 801bee6:	2b01      	cmp	r3, #1
 801bee8:	dd02      	ble.n	801bef0 <ee_number+0x30>
 801beea:	683b      	ldr	r3, [r7, #0]
 801beec:	2b24      	cmp	r3, #36	@ 0x24
 801beee:	dd01      	ble.n	801bef4 <ee_number+0x34>
 801bef0:	2300      	movs	r3, #0
 801bef2:	e0ca      	b.n	801c08a <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801bef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bef6:	f003 0301 	and.w	r3, r3, #1
 801befa:	2b00      	cmp	r3, #0
 801befc:	d001      	beq.n	801bf02 <ee_number+0x42>
 801befe:	2330      	movs	r3, #48	@ 0x30
 801bf00:	e000      	b.n	801bf04 <ee_number+0x44>
 801bf02:	2320      	movs	r3, #32
 801bf04:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801bf08:	2300      	movs	r3, #0
 801bf0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801bf0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bf10:	f003 0302 	and.w	r3, r3, #2
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d00b      	beq.n	801bf30 <ee_number+0x70>
  {
    if (num < 0)
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	da08      	bge.n	801bf30 <ee_number+0x70>
    {
      sign = '-';
 801bf1e:	232d      	movs	r3, #45	@ 0x2d
 801bf20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	425b      	negs	r3, r3
 801bf28:	607b      	str	r3, [r7, #4]
      size--;
 801bf2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bf2c:	3b01      	subs	r3, #1
 801bf2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801bf30:	2300      	movs	r3, #0
 801bf32:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d11e      	bne.n	801bf78 <ee_number+0xb8>
    tmp[i++] = '0';
 801bf3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bf3c:	1c5a      	adds	r2, r3, #1
 801bf3e:	657a      	str	r2, [r7, #84]	@ 0x54
 801bf40:	3360      	adds	r3, #96	@ 0x60
 801bf42:	443b      	add	r3, r7
 801bf44:	2230      	movs	r2, #48	@ 0x30
 801bf46:	f803 2c50 	strb.w	r2, [r3, #-80]
 801bf4a:	e018      	b.n	801bf7e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	683a      	ldr	r2, [r7, #0]
 801bf50:	fbb3 f1f2 	udiv	r1, r3, r2
 801bf54:	fb01 f202 	mul.w	r2, r1, r2
 801bf58:	1a9b      	subs	r3, r3, r2
 801bf5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801bf5c:	441a      	add	r2, r3
 801bf5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bf60:	1c59      	adds	r1, r3, #1
 801bf62:	6579      	str	r1, [r7, #84]	@ 0x54
 801bf64:	7812      	ldrb	r2, [r2, #0]
 801bf66:	3360      	adds	r3, #96	@ 0x60
 801bf68:	443b      	add	r3, r7
 801bf6a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801bf6e:	687a      	ldr	r2, [r7, #4]
 801bf70:	683b      	ldr	r3, [r7, #0]
 801bf72:	fbb2 f3f3 	udiv	r3, r2, r3
 801bf76:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d1e6      	bne.n	801bf4c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801bf7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bf80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801bf82:	429a      	cmp	r2, r3
 801bf84:	dd01      	ble.n	801bf8a <ee_number+0xca>
 801bf86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bf88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801bf8a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801bf8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801bf8e:	1ad3      	subs	r3, r2, r3
 801bf90:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801bf92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bf94:	f003 0301 	and.w	r3, r3, #1
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d112      	bne.n	801bfc2 <ee_number+0x102>
 801bf9c:	e00c      	b.n	801bfb8 <ee_number+0xf8>
 801bf9e:	68fb      	ldr	r3, [r7, #12]
 801bfa0:	1c5a      	adds	r2, r3, #1
 801bfa2:	60fa      	str	r2, [r7, #12]
 801bfa4:	2220      	movs	r2, #32
 801bfa6:	701a      	strb	r2, [r3, #0]
 801bfa8:	68bb      	ldr	r3, [r7, #8]
 801bfaa:	3b01      	subs	r3, #1
 801bfac:	60bb      	str	r3, [r7, #8]
 801bfae:	68bb      	ldr	r3, [r7, #8]
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d101      	bne.n	801bfb8 <ee_number+0xf8>
 801bfb4:	68fb      	ldr	r3, [r7, #12]
 801bfb6:	e068      	b.n	801c08a <ee_number+0x1ca>
 801bfb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bfba:	1e5a      	subs	r2, r3, #1
 801bfbc:	66ba      	str	r2, [r7, #104]	@ 0x68
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	dced      	bgt.n	801bf9e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801bfc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d01b      	beq.n	801c002 <ee_number+0x142>
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	1c5a      	adds	r2, r3, #1
 801bfce:	60fa      	str	r2, [r7, #12]
 801bfd0:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801bfd4:	701a      	strb	r2, [r3, #0]
 801bfd6:	68bb      	ldr	r3, [r7, #8]
 801bfd8:	3b01      	subs	r3, #1
 801bfda:	60bb      	str	r3, [r7, #8]
 801bfdc:	68bb      	ldr	r3, [r7, #8]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d10f      	bne.n	801c002 <ee_number+0x142>
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	e051      	b.n	801c08a <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801bfe6:	68fb      	ldr	r3, [r7, #12]
 801bfe8:	1c5a      	adds	r2, r3, #1
 801bfea:	60fa      	str	r2, [r7, #12]
 801bfec:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801bff0:	701a      	strb	r2, [r3, #0]
 801bff2:	68bb      	ldr	r3, [r7, #8]
 801bff4:	3b01      	subs	r3, #1
 801bff6:	60bb      	str	r3, [r7, #8]
 801bff8:	68bb      	ldr	r3, [r7, #8]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d101      	bne.n	801c002 <ee_number+0x142>
 801bffe:	68fb      	ldr	r3, [r7, #12]
 801c000:	e043      	b.n	801c08a <ee_number+0x1ca>
 801c002:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c004:	1e5a      	subs	r2, r3, #1
 801c006:	66ba      	str	r2, [r7, #104]	@ 0x68
 801c008:	2b00      	cmp	r3, #0
 801c00a:	dcec      	bgt.n	801bfe6 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801c00c:	e00c      	b.n	801c028 <ee_number+0x168>
 801c00e:	68fb      	ldr	r3, [r7, #12]
 801c010:	1c5a      	adds	r2, r3, #1
 801c012:	60fa      	str	r2, [r7, #12]
 801c014:	2230      	movs	r2, #48	@ 0x30
 801c016:	701a      	strb	r2, [r3, #0]
 801c018:	68bb      	ldr	r3, [r7, #8]
 801c01a:	3b01      	subs	r3, #1
 801c01c:	60bb      	str	r3, [r7, #8]
 801c01e:	68bb      	ldr	r3, [r7, #8]
 801c020:	2b00      	cmp	r3, #0
 801c022:	d101      	bne.n	801c028 <ee_number+0x168>
 801c024:	68fb      	ldr	r3, [r7, #12]
 801c026:	e030      	b.n	801c08a <ee_number+0x1ca>
 801c028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801c02a:	1e5a      	subs	r2, r3, #1
 801c02c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801c02e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c030:	429a      	cmp	r2, r3
 801c032:	dbec      	blt.n	801c00e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801c034:	e010      	b.n	801c058 <ee_number+0x198>
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	1c5a      	adds	r2, r3, #1
 801c03a:	60fa      	str	r2, [r7, #12]
 801c03c:	f107 0110 	add.w	r1, r7, #16
 801c040:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c042:	440a      	add	r2, r1
 801c044:	7812      	ldrb	r2, [r2, #0]
 801c046:	701a      	strb	r2, [r3, #0]
 801c048:	68bb      	ldr	r3, [r7, #8]
 801c04a:	3b01      	subs	r3, #1
 801c04c:	60bb      	str	r3, [r7, #8]
 801c04e:	68bb      	ldr	r3, [r7, #8]
 801c050:	2b00      	cmp	r3, #0
 801c052:	d101      	bne.n	801c058 <ee_number+0x198>
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	e018      	b.n	801c08a <ee_number+0x1ca>
 801c058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c05a:	1e5a      	subs	r2, r3, #1
 801c05c:	657a      	str	r2, [r7, #84]	@ 0x54
 801c05e:	2b00      	cmp	r3, #0
 801c060:	dce9      	bgt.n	801c036 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801c062:	e00c      	b.n	801c07e <ee_number+0x1be>
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	1c5a      	adds	r2, r3, #1
 801c068:	60fa      	str	r2, [r7, #12]
 801c06a:	2220      	movs	r2, #32
 801c06c:	701a      	strb	r2, [r3, #0]
 801c06e:	68bb      	ldr	r3, [r7, #8]
 801c070:	3b01      	subs	r3, #1
 801c072:	60bb      	str	r3, [r7, #8]
 801c074:	68bb      	ldr	r3, [r7, #8]
 801c076:	2b00      	cmp	r3, #0
 801c078:	d101      	bne.n	801c07e <ee_number+0x1be>
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	e005      	b.n	801c08a <ee_number+0x1ca>
 801c07e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c080:	1e5a      	subs	r2, r3, #1
 801c082:	66ba      	str	r2, [r7, #104]	@ 0x68
 801c084:	2b00      	cmp	r3, #0
 801c086:	dced      	bgt.n	801c064 <ee_number+0x1a4>

  return str;
 801c088:	68fb      	ldr	r3, [r7, #12]
}
 801c08a:	4618      	mov	r0, r3
 801c08c:	3764      	adds	r7, #100	@ 0x64
 801c08e:	46bd      	mov	sp, r7
 801c090:	bc80      	pop	{r7}
 801c092:	4770      	bx	lr
 801c094:	20000138 	.word	0x20000138
 801c098:	2000013c 	.word	0x2000013c

0801c09c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801c09c:	b580      	push	{r7, lr}
 801c09e:	b092      	sub	sp, #72	@ 0x48
 801c0a0:	af04      	add	r7, sp, #16
 801c0a2:	60f8      	str	r0, [r7, #12]
 801c0a4:	60b9      	str	r1, [r7, #8]
 801c0a6:	607a      	str	r2, [r7, #4]
 801c0a8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801c0aa:	68bb      	ldr	r3, [r7, #8]
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	dc01      	bgt.n	801c0b4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	e13e      	b.n	801c332 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c0b4:	68fb      	ldr	r3, [r7, #12]
 801c0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c0b8:	e128      	b.n	801c30c <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801c0ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c0bc:	68fb      	ldr	r3, [r7, #12]
 801c0be:	1ad2      	subs	r2, r2, r3
 801c0c0:	68bb      	ldr	r3, [r7, #8]
 801c0c2:	3b01      	subs	r3, #1
 801c0c4:	429a      	cmp	r2, r3
 801c0c6:	f280 812e 	bge.w	801c326 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	781b      	ldrb	r3, [r3, #0]
 801c0ce:	2b25      	cmp	r3, #37	@ 0x25
 801c0d0:	d006      	beq.n	801c0e0 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801c0d2:	687a      	ldr	r2, [r7, #4]
 801c0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0d6:	1c59      	adds	r1, r3, #1
 801c0d8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c0da:	7812      	ldrb	r2, [r2, #0]
 801c0dc:	701a      	strb	r2, [r3, #0]
      continue;
 801c0de:	e112      	b.n	801c306 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801c0e0:	2300      	movs	r3, #0
 801c0e2:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	3301      	adds	r3, #1
 801c0e8:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	781b      	ldrb	r3, [r3, #0]
 801c0ee:	2b30      	cmp	r3, #48	@ 0x30
 801c0f0:	d103      	bne.n	801c0fa <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801c0f2:	6a3b      	ldr	r3, [r7, #32]
 801c0f4:	f043 0301 	orr.w	r3, r3, #1
 801c0f8:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801c0fa:	f04f 33ff 	mov.w	r3, #4294967295
 801c0fe:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	781b      	ldrb	r3, [r3, #0]
 801c104:	2b2f      	cmp	r3, #47	@ 0x2f
 801c106:	d908      	bls.n	801c11a <tiny_vsnprintf_like+0x7e>
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	781b      	ldrb	r3, [r3, #0]
 801c10c:	2b39      	cmp	r3, #57	@ 0x39
 801c10e:	d804      	bhi.n	801c11a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801c110:	1d3b      	adds	r3, r7, #4
 801c112:	4618      	mov	r0, r3
 801c114:	f7ff feae 	bl	801be74 <ee_skip_atoi>
 801c118:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801c11a:	f04f 33ff 	mov.w	r3, #4294967295
 801c11e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801c120:	f04f 33ff 	mov.w	r3, #4294967295
 801c124:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801c126:	230a      	movs	r3, #10
 801c128:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	781b      	ldrb	r3, [r3, #0]
 801c12e:	3b58      	subs	r3, #88	@ 0x58
 801c130:	2b20      	cmp	r3, #32
 801c132:	f200 8094 	bhi.w	801c25e <tiny_vsnprintf_like+0x1c2>
 801c136:	a201      	add	r2, pc, #4	@ (adr r2, 801c13c <tiny_vsnprintf_like+0xa0>)
 801c138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c13c:	0801c247 	.word	0x0801c247
 801c140:	0801c25f 	.word	0x0801c25f
 801c144:	0801c25f 	.word	0x0801c25f
 801c148:	0801c25f 	.word	0x0801c25f
 801c14c:	0801c25f 	.word	0x0801c25f
 801c150:	0801c25f 	.word	0x0801c25f
 801c154:	0801c25f 	.word	0x0801c25f
 801c158:	0801c25f 	.word	0x0801c25f
 801c15c:	0801c25f 	.word	0x0801c25f
 801c160:	0801c25f 	.word	0x0801c25f
 801c164:	0801c25f 	.word	0x0801c25f
 801c168:	0801c1cb 	.word	0x0801c1cb
 801c16c:	0801c255 	.word	0x0801c255
 801c170:	0801c25f 	.word	0x0801c25f
 801c174:	0801c25f 	.word	0x0801c25f
 801c178:	0801c25f 	.word	0x0801c25f
 801c17c:	0801c25f 	.word	0x0801c25f
 801c180:	0801c255 	.word	0x0801c255
 801c184:	0801c25f 	.word	0x0801c25f
 801c188:	0801c25f 	.word	0x0801c25f
 801c18c:	0801c25f 	.word	0x0801c25f
 801c190:	0801c25f 	.word	0x0801c25f
 801c194:	0801c25f 	.word	0x0801c25f
 801c198:	0801c25f 	.word	0x0801c25f
 801c19c:	0801c25f 	.word	0x0801c25f
 801c1a0:	0801c25f 	.word	0x0801c25f
 801c1a4:	0801c25f 	.word	0x0801c25f
 801c1a8:	0801c1eb 	.word	0x0801c1eb
 801c1ac:	0801c25f 	.word	0x0801c25f
 801c1b0:	0801c2ab 	.word	0x0801c2ab
 801c1b4:	0801c25f 	.word	0x0801c25f
 801c1b8:	0801c25f 	.word	0x0801c25f
 801c1bc:	0801c24f 	.word	0x0801c24f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801c1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1c2:	1c5a      	adds	r2, r3, #1
 801c1c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c1c6:	2220      	movs	r2, #32
 801c1c8:	701a      	strb	r2, [r3, #0]
 801c1ca:	69fb      	ldr	r3, [r7, #28]
 801c1cc:	3b01      	subs	r3, #1
 801c1ce:	61fb      	str	r3, [r7, #28]
 801c1d0:	69fb      	ldr	r3, [r7, #28]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	dcf4      	bgt.n	801c1c0 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801c1d6:	683b      	ldr	r3, [r7, #0]
 801c1d8:	1d1a      	adds	r2, r3, #4
 801c1da:	603a      	str	r2, [r7, #0]
 801c1dc:	6819      	ldr	r1, [r3, #0]
 801c1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1e0:	1c5a      	adds	r2, r3, #1
 801c1e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c1e4:	b2ca      	uxtb	r2, r1
 801c1e6:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801c1e8:	e08d      	b.n	801c306 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801c1ea:	683b      	ldr	r3, [r7, #0]
 801c1ec:	1d1a      	adds	r2, r3, #4
 801c1ee:	603a      	str	r2, [r7, #0]
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801c1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d101      	bne.n	801c1fe <tiny_vsnprintf_like+0x162>
 801c1fa:	4b50      	ldr	r3, [pc, #320]	@ (801c33c <tiny_vsnprintf_like+0x2a0>)
 801c1fc:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801c1fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c200:	f7e3 ffba 	bl	8000178 <strlen>
 801c204:	4603      	mov	r3, r0
 801c206:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801c208:	e004      	b.n	801c214 <tiny_vsnprintf_like+0x178>
 801c20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c20c:	1c5a      	adds	r2, r3, #1
 801c20e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c210:	2220      	movs	r2, #32
 801c212:	701a      	strb	r2, [r3, #0]
 801c214:	69fb      	ldr	r3, [r7, #28]
 801c216:	1e5a      	subs	r2, r3, #1
 801c218:	61fa      	str	r2, [r7, #28]
 801c21a:	693a      	ldr	r2, [r7, #16]
 801c21c:	429a      	cmp	r2, r3
 801c21e:	dbf4      	blt.n	801c20a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801c220:	2300      	movs	r3, #0
 801c222:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c224:	e00a      	b.n	801c23c <tiny_vsnprintf_like+0x1a0>
 801c226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c228:	1c53      	adds	r3, r2, #1
 801c22a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c22e:	1c59      	adds	r1, r3, #1
 801c230:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c232:	7812      	ldrb	r2, [r2, #0]
 801c234:	701a      	strb	r2, [r3, #0]
 801c236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c238:	3301      	adds	r3, #1
 801c23a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c23c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c23e:	693b      	ldr	r3, [r7, #16]
 801c240:	429a      	cmp	r2, r3
 801c242:	dbf0      	blt.n	801c226 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801c244:	e05f      	b.n	801c306 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801c246:	6a3b      	ldr	r3, [r7, #32]
 801c248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c24c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801c24e:	2310      	movs	r3, #16
 801c250:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801c252:	e02b      	b.n	801c2ac <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801c254:	6a3b      	ldr	r3, [r7, #32]
 801c256:	f043 0302 	orr.w	r3, r3, #2
 801c25a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801c25c:	e025      	b.n	801c2aa <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	781b      	ldrb	r3, [r3, #0]
 801c262:	2b25      	cmp	r3, #37	@ 0x25
 801c264:	d004      	beq.n	801c270 <tiny_vsnprintf_like+0x1d4>
 801c266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c268:	1c5a      	adds	r2, r3, #1
 801c26a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c26c:	2225      	movs	r2, #37	@ 0x25
 801c26e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801c270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	1ad2      	subs	r2, r2, r3
 801c276:	68bb      	ldr	r3, [r7, #8]
 801c278:	3b01      	subs	r3, #1
 801c27a:	429a      	cmp	r2, r3
 801c27c:	da16      	bge.n	801c2ac <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	781b      	ldrb	r3, [r3, #0]
 801c282:	2b00      	cmp	r3, #0
 801c284:	d006      	beq.n	801c294 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801c286:	687a      	ldr	r2, [r7, #4]
 801c288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c28a:	1c59      	adds	r1, r3, #1
 801c28c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c28e:	7812      	ldrb	r2, [r2, #0]
 801c290:	701a      	strb	r2, [r3, #0]
 801c292:	e002      	b.n	801c29a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	3b01      	subs	r3, #1
 801c298:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801c29a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	1ad2      	subs	r2, r2, r3
 801c2a0:	68bb      	ldr	r3, [r7, #8]
 801c2a2:	3b01      	subs	r3, #1
 801c2a4:	429a      	cmp	r2, r3
 801c2a6:	db2d      	blt.n	801c304 <tiny_vsnprintf_like+0x268>
 801c2a8:	e000      	b.n	801c2ac <tiny_vsnprintf_like+0x210>
        break;
 801c2aa:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801c2ac:	697b      	ldr	r3, [r7, #20]
 801c2ae:	2b6c      	cmp	r3, #108	@ 0x6c
 801c2b0:	d105      	bne.n	801c2be <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801c2b2:	683b      	ldr	r3, [r7, #0]
 801c2b4:	1d1a      	adds	r2, r3, #4
 801c2b6:	603a      	str	r2, [r7, #0]
 801c2b8:	681b      	ldr	r3, [r3, #0]
 801c2ba:	637b      	str	r3, [r7, #52]	@ 0x34
 801c2bc:	e00f      	b.n	801c2de <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801c2be:	6a3b      	ldr	r3, [r7, #32]
 801c2c0:	f003 0302 	and.w	r3, r3, #2
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d005      	beq.n	801c2d4 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801c2c8:	683b      	ldr	r3, [r7, #0]
 801c2ca:	1d1a      	adds	r2, r3, #4
 801c2cc:	603a      	str	r2, [r7, #0]
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	637b      	str	r3, [r7, #52]	@ 0x34
 801c2d2:	e004      	b.n	801c2de <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801c2d4:	683b      	ldr	r3, [r7, #0]
 801c2d6:	1d1a      	adds	r2, r3, #4
 801c2d8:	603a      	str	r2, [r7, #0]
 801c2da:	681b      	ldr	r3, [r3, #0]
 801c2dc:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801c2de:	68bb      	ldr	r3, [r7, #8]
 801c2e0:	1e5a      	subs	r2, r3, #1
 801c2e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	1acb      	subs	r3, r1, r3
 801c2e8:	1ad1      	subs	r1, r2, r3
 801c2ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c2ec:	6a3b      	ldr	r3, [r7, #32]
 801c2ee:	9302      	str	r3, [sp, #8]
 801c2f0:	69bb      	ldr	r3, [r7, #24]
 801c2f2:	9301      	str	r3, [sp, #4]
 801c2f4:	69fb      	ldr	r3, [r7, #28]
 801c2f6:	9300      	str	r3, [sp, #0]
 801c2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c2fc:	f7ff fde0 	bl	801bec0 <ee_number>
 801c300:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801c302:	e000      	b.n	801c306 <tiny_vsnprintf_like+0x26a>
        continue;
 801c304:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	3301      	adds	r3, #1
 801c30a:	607b      	str	r3, [r7, #4]
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	781b      	ldrb	r3, [r3, #0]
 801c310:	2b00      	cmp	r3, #0
 801c312:	f47f aed2 	bne.w	801c0ba <tiny_vsnprintf_like+0x1e>
 801c316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	1ad2      	subs	r2, r2, r3
 801c31c:	68bb      	ldr	r3, [r7, #8]
 801c31e:	3b01      	subs	r3, #1
 801c320:	429a      	cmp	r2, r3
 801c322:	f6bf aeca 	bge.w	801c0ba <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801c326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c328:	2200      	movs	r2, #0
 801c32a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801c32c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	1ad3      	subs	r3, r2, r3
}
 801c332:	4618      	mov	r0, r3
 801c334:	3738      	adds	r7, #56	@ 0x38
 801c336:	46bd      	mov	sp, r7
 801c338:	bd80      	pop	{r7, pc}
 801c33a:	bf00      	nop
 801c33c:	0801db40 	.word	0x0801db40

0801c340 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c340:	b580      	push	{r7, lr}
 801c342:	b090      	sub	sp, #64	@ 0x40
 801c344:	af00      	add	r7, sp, #0
 801c346:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c348:	4b73      	ldr	r3, [pc, #460]	@ (801c518 <UTIL_SEQ_Run+0x1d8>)
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801c34e:	4b72      	ldr	r3, [pc, #456]	@ (801c518 <UTIL_SEQ_Run+0x1d8>)
 801c350:	681a      	ldr	r2, [r3, #0]
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	4013      	ands	r3, r2
 801c356:	4a70      	ldr	r2, [pc, #448]	@ (801c518 <UTIL_SEQ_Run+0x1d8>)
 801c358:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c35a:	4b70      	ldr	r3, [pc, #448]	@ (801c51c <UTIL_SEQ_Run+0x1dc>)
 801c35c:	681b      	ldr	r3, [r3, #0]
 801c35e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801c360:	4b6f      	ldr	r3, [pc, #444]	@ (801c520 <UTIL_SEQ_Run+0x1e0>)
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801c366:	4b6f      	ldr	r3, [pc, #444]	@ (801c524 <UTIL_SEQ_Run+0x1e4>)
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801c36c:	4b6e      	ldr	r3, [pc, #440]	@ (801c528 <UTIL_SEQ_Run+0x1e8>)
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c372:	e08d      	b.n	801c490 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c374:	2300      	movs	r3, #0
 801c376:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c378:	e002      	b.n	801c380 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c37a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c37c:	3301      	adds	r3, #1
 801c37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c380:	4a6a      	ldr	r2, [pc, #424]	@ (801c52c <UTIL_SEQ_Run+0x1ec>)
 801c382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c384:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c38a:	401a      	ands	r2, r3
 801c38c:	4b62      	ldr	r3, [pc, #392]	@ (801c518 <UTIL_SEQ_Run+0x1d8>)
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	4013      	ands	r3, r2
 801c392:	2b00      	cmp	r3, #0
 801c394:	d0f1      	beq.n	801c37a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c396:	4a65      	ldr	r2, [pc, #404]	@ (801c52c <UTIL_SEQ_Run+0x1ec>)
 801c398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c39a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3a0:	401a      	ands	r2, r3
 801c3a2:	4b5d      	ldr	r3, [pc, #372]	@ (801c518 <UTIL_SEQ_Run+0x1d8>)
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	4013      	ands	r3, r2
 801c3a8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c3aa:	4a60      	ldr	r2, [pc, #384]	@ (801c52c <UTIL_SEQ_Run+0x1ec>)
 801c3ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c3ae:	00db      	lsls	r3, r3, #3
 801c3b0:	4413      	add	r3, r2
 801c3b2:	685a      	ldr	r2, [r3, #4]
 801c3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3b6:	4013      	ands	r3, r2
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d106      	bne.n	801c3ca <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c3bc:	4a5b      	ldr	r2, [pc, #364]	@ (801c52c <UTIL_SEQ_Run+0x1ec>)
 801c3be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c3c0:	00db      	lsls	r3, r3, #3
 801c3c2:	4413      	add	r3, r2
 801c3c4:	f04f 32ff 	mov.w	r2, #4294967295
 801c3c8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c3ca:	4a58      	ldr	r2, [pc, #352]	@ (801c52c <UTIL_SEQ_Run+0x1ec>)
 801c3cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c3ce:	00db      	lsls	r3, r3, #3
 801c3d0:	4413      	add	r3, r2
 801c3d2:	685a      	ldr	r2, [r3, #4]
 801c3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3d6:	4013      	ands	r3, r2
 801c3d8:	4618      	mov	r0, r3
 801c3da:	f000 f907 	bl	801c5ec <SEQ_BitPosition>
 801c3de:	4603      	mov	r3, r0
 801c3e0:	461a      	mov	r2, r3
 801c3e2:	4b53      	ldr	r3, [pc, #332]	@ (801c530 <UTIL_SEQ_Run+0x1f0>)
 801c3e4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c3e6:	4a51      	ldr	r2, [pc, #324]	@ (801c52c <UTIL_SEQ_Run+0x1ec>)
 801c3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c3ea:	00db      	lsls	r3, r3, #3
 801c3ec:	4413      	add	r3, r2
 801c3ee:	685a      	ldr	r2, [r3, #4]
 801c3f0:	4b4f      	ldr	r3, [pc, #316]	@ (801c530 <UTIL_SEQ_Run+0x1f0>)
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	2101      	movs	r1, #1
 801c3f6:	fa01 f303 	lsl.w	r3, r1, r3
 801c3fa:	43db      	mvns	r3, r3
 801c3fc:	401a      	ands	r2, r3
 801c3fe:	494b      	ldr	r1, [pc, #300]	@ (801c52c <UTIL_SEQ_Run+0x1ec>)
 801c400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c402:	00db      	lsls	r3, r3, #3
 801c404:	440b      	add	r3, r1
 801c406:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c408:	f3ef 8310 	mrs	r3, PRIMASK
 801c40c:	61bb      	str	r3, [r7, #24]
  return(result);
 801c40e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c410:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c412:	b672      	cpsid	i
}
 801c414:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c416:	4b46      	ldr	r3, [pc, #280]	@ (801c530 <UTIL_SEQ_Run+0x1f0>)
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	2201      	movs	r2, #1
 801c41c:	fa02 f303 	lsl.w	r3, r2, r3
 801c420:	43da      	mvns	r2, r3
 801c422:	4b3e      	ldr	r3, [pc, #248]	@ (801c51c <UTIL_SEQ_Run+0x1dc>)
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	4013      	ands	r3, r2
 801c428:	4a3c      	ldr	r2, [pc, #240]	@ (801c51c <UTIL_SEQ_Run+0x1dc>)
 801c42a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c42c:	2301      	movs	r3, #1
 801c42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c430:	e013      	b.n	801c45a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c434:	3b01      	subs	r3, #1
 801c436:	4a3d      	ldr	r2, [pc, #244]	@ (801c52c <UTIL_SEQ_Run+0x1ec>)
 801c438:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c43c:	4b3c      	ldr	r3, [pc, #240]	@ (801c530 <UTIL_SEQ_Run+0x1f0>)
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	2201      	movs	r2, #1
 801c442:	fa02 f303 	lsl.w	r3, r2, r3
 801c446:	43da      	mvns	r2, r3
 801c448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c44a:	3b01      	subs	r3, #1
 801c44c:	400a      	ands	r2, r1
 801c44e:	4937      	ldr	r1, [pc, #220]	@ (801c52c <UTIL_SEQ_Run+0x1ec>)
 801c450:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c456:	3b01      	subs	r3, #1
 801c458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c45a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d1e8      	bne.n	801c432 <UTIL_SEQ_Run+0xf2>
 801c460:	6a3b      	ldr	r3, [r7, #32]
 801c462:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c464:	697b      	ldr	r3, [r7, #20]
 801c466:	f383 8810 	msr	PRIMASK, r3
}
 801c46a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c46c:	4b30      	ldr	r3, [pc, #192]	@ (801c530 <UTIL_SEQ_Run+0x1f0>)
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	4a30      	ldr	r2, [pc, #192]	@ (801c534 <UTIL_SEQ_Run+0x1f4>)
 801c472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c476:	4798      	blx	r3

    local_taskset = TaskSet;
 801c478:	4b28      	ldr	r3, [pc, #160]	@ (801c51c <UTIL_SEQ_Run+0x1dc>)
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801c47e:	4b28      	ldr	r3, [pc, #160]	@ (801c520 <UTIL_SEQ_Run+0x1e0>)
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801c484:	4b27      	ldr	r3, [pc, #156]	@ (801c524 <UTIL_SEQ_Run+0x1e4>)
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801c48a:	4b27      	ldr	r3, [pc, #156]	@ (801c528 <UTIL_SEQ_Run+0x1e8>)
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c490:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c494:	401a      	ands	r2, r3
 801c496:	4b20      	ldr	r3, [pc, #128]	@ (801c518 <UTIL_SEQ_Run+0x1d8>)
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	4013      	ands	r3, r2
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d005      	beq.n	801c4ac <UTIL_SEQ_Run+0x16c>
 801c4a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4a4:	4013      	ands	r3, r2
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	f43f af64 	beq.w	801c374 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c4ac:	4b20      	ldr	r3, [pc, #128]	@ (801c530 <UTIL_SEQ_Run+0x1f0>)
 801c4ae:	f04f 32ff 	mov.w	r2, #4294967295
 801c4b2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c4b4:	f000 f88e 	bl	801c5d4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4b8:	f3ef 8310 	mrs	r3, PRIMASK
 801c4bc:	613b      	str	r3, [r7, #16]
  return(result);
 801c4be:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c4c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4c2:	b672      	cpsid	i
}
 801c4c4:	bf00      	nop
  local_taskset = TaskSet;
 801c4c6:	4b15      	ldr	r3, [pc, #84]	@ (801c51c <UTIL_SEQ_Run+0x1dc>)
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801c4cc:	4b14      	ldr	r3, [pc, #80]	@ (801c520 <UTIL_SEQ_Run+0x1e0>)
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801c4d2:	4b14      	ldr	r3, [pc, #80]	@ (801c524 <UTIL_SEQ_Run+0x1e4>)
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c4d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c4dc:	401a      	ands	r2, r3
 801c4de:	4b0e      	ldr	r3, [pc, #56]	@ (801c518 <UTIL_SEQ_Run+0x1d8>)
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	4013      	ands	r3, r2
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d107      	bne.n	801c4f8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c4e8:	4b0f      	ldr	r3, [pc, #60]	@ (801c528 <UTIL_SEQ_Run+0x1e8>)
 801c4ea:	681a      	ldr	r2, [r3, #0]
 801c4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c4ee:	4013      	ands	r3, r2
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d101      	bne.n	801c4f8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c4f4:	f7e5 fec6 	bl	8002284 <UTIL_SEQ_Idle>
 801c4f8:	69fb      	ldr	r3, [r7, #28]
 801c4fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	f383 8810 	msr	PRIMASK, r3
}
 801c502:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c504:	f000 f86c 	bl	801c5e0 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c508:	4a03      	ldr	r2, [pc, #12]	@ (801c518 <UTIL_SEQ_Run+0x1d8>)
 801c50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c50c:	6013      	str	r3, [r2, #0]

  return;
 801c50e:	bf00      	nop
}
 801c510:	3740      	adds	r7, #64	@ 0x40
 801c512:	46bd      	mov	sp, r7
 801c514:	bd80      	pop	{r7, pc}
 801c516:	bf00      	nop
 801c518:	20000144 	.word	0x20000144
 801c51c:	20001dcc 	.word	0x20001dcc
 801c520:	20001dd0 	.word	0x20001dd0
 801c524:	20000140 	.word	0x20000140
 801c528:	20001dd4 	.word	0x20001dd4
 801c52c:	20001df0 	.word	0x20001df0
 801c530:	20001dd8 	.word	0x20001dd8
 801c534:	20001ddc 	.word	0x20001ddc

0801c538 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c538:	b580      	push	{r7, lr}
 801c53a:	b088      	sub	sp, #32
 801c53c:	af00      	add	r7, sp, #0
 801c53e:	60f8      	str	r0, [r7, #12]
 801c540:	60b9      	str	r1, [r7, #8]
 801c542:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c544:	f3ef 8310 	mrs	r3, PRIMASK
 801c548:	617b      	str	r3, [r7, #20]
  return(result);
 801c54a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c54c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c54e:	b672      	cpsid	i
}
 801c550:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c552:	68f8      	ldr	r0, [r7, #12]
 801c554:	f000 f84a 	bl	801c5ec <SEQ_BitPosition>
 801c558:	4603      	mov	r3, r0
 801c55a:	4619      	mov	r1, r3
 801c55c:	4a06      	ldr	r2, [pc, #24]	@ (801c578 <UTIL_SEQ_RegTask+0x40>)
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c564:	69fb      	ldr	r3, [r7, #28]
 801c566:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c568:	69bb      	ldr	r3, [r7, #24]
 801c56a:	f383 8810 	msr	PRIMASK, r3
}
 801c56e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c570:	bf00      	nop
}
 801c572:	3720      	adds	r7, #32
 801c574:	46bd      	mov	sp, r7
 801c576:	bd80      	pop	{r7, pc}
 801c578:	20001ddc 	.word	0x20001ddc

0801c57c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c57c:	b480      	push	{r7}
 801c57e:	b087      	sub	sp, #28
 801c580:	af00      	add	r7, sp, #0
 801c582:	6078      	str	r0, [r7, #4]
 801c584:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c586:	f3ef 8310 	mrs	r3, PRIMASK
 801c58a:	60fb      	str	r3, [r7, #12]
  return(result);
 801c58c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c58e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c590:	b672      	cpsid	i
}
 801c592:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c594:	4b0d      	ldr	r3, [pc, #52]	@ (801c5cc <UTIL_SEQ_SetTask+0x50>)
 801c596:	681a      	ldr	r2, [r3, #0]
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	4313      	orrs	r3, r2
 801c59c:	4a0b      	ldr	r2, [pc, #44]	@ (801c5cc <UTIL_SEQ_SetTask+0x50>)
 801c59e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c5a0:	4a0b      	ldr	r2, [pc, #44]	@ (801c5d0 <UTIL_SEQ_SetTask+0x54>)
 801c5a2:	683b      	ldr	r3, [r7, #0]
 801c5a4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	431a      	orrs	r2, r3
 801c5ac:	4908      	ldr	r1, [pc, #32]	@ (801c5d0 <UTIL_SEQ_SetTask+0x54>)
 801c5ae:	683b      	ldr	r3, [r7, #0]
 801c5b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c5b4:	697b      	ldr	r3, [r7, #20]
 801c5b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5b8:	693b      	ldr	r3, [r7, #16]
 801c5ba:	f383 8810 	msr	PRIMASK, r3
}
 801c5be:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c5c0:	bf00      	nop
}
 801c5c2:	371c      	adds	r7, #28
 801c5c4:	46bd      	mov	sp, r7
 801c5c6:	bc80      	pop	{r7}
 801c5c8:	4770      	bx	lr
 801c5ca:	bf00      	nop
 801c5cc:	20001dcc 	.word	0x20001dcc
 801c5d0:	20001df0 	.word	0x20001df0

0801c5d4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c5d4:	b480      	push	{r7}
 801c5d6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c5d8:	bf00      	nop
}
 801c5da:	46bd      	mov	sp, r7
 801c5dc:	bc80      	pop	{r7}
 801c5de:	4770      	bx	lr

0801c5e0 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c5e0:	b480      	push	{r7}
 801c5e2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c5e4:	bf00      	nop
}
 801c5e6:	46bd      	mov	sp, r7
 801c5e8:	bc80      	pop	{r7}
 801c5ea:	4770      	bx	lr

0801c5ec <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c5ec:	b480      	push	{r7}
 801c5ee:	b085      	sub	sp, #20
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c5fc:	68bb      	ldr	r3, [r7, #8]
 801c5fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c602:	d204      	bcs.n	801c60e <SEQ_BitPosition+0x22>
 801c604:	2310      	movs	r3, #16
 801c606:	73fb      	strb	r3, [r7, #15]
 801c608:	68bb      	ldr	r3, [r7, #8]
 801c60a:	041b      	lsls	r3, r3, #16
 801c60c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c60e:	68bb      	ldr	r3, [r7, #8]
 801c610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c614:	d205      	bcs.n	801c622 <SEQ_BitPosition+0x36>
 801c616:	7bfb      	ldrb	r3, [r7, #15]
 801c618:	3308      	adds	r3, #8
 801c61a:	73fb      	strb	r3, [r7, #15]
 801c61c:	68bb      	ldr	r3, [r7, #8]
 801c61e:	021b      	lsls	r3, r3, #8
 801c620:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c622:	68bb      	ldr	r3, [r7, #8]
 801c624:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c628:	d205      	bcs.n	801c636 <SEQ_BitPosition+0x4a>
 801c62a:	7bfb      	ldrb	r3, [r7, #15]
 801c62c:	3304      	adds	r3, #4
 801c62e:	73fb      	strb	r3, [r7, #15]
 801c630:	68bb      	ldr	r3, [r7, #8]
 801c632:	011b      	lsls	r3, r3, #4
 801c634:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c636:	68bb      	ldr	r3, [r7, #8]
 801c638:	0f1b      	lsrs	r3, r3, #28
 801c63a:	4a07      	ldr	r2, [pc, #28]	@ (801c658 <SEQ_BitPosition+0x6c>)
 801c63c:	5cd2      	ldrb	r2, [r2, r3]
 801c63e:	7bfb      	ldrb	r3, [r7, #15]
 801c640:	4413      	add	r3, r2
 801c642:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c644:	7bfb      	ldrb	r3, [r7, #15]
 801c646:	f1c3 031f 	rsb	r3, r3, #31
 801c64a:	b2db      	uxtb	r3, r3
}
 801c64c:	4618      	mov	r0, r3
 801c64e:	3714      	adds	r7, #20
 801c650:	46bd      	mov	sp, r7
 801c652:	bc80      	pop	{r7}
 801c654:	4770      	bx	lr
 801c656:	bf00      	nop
 801c658:	0801e184 	.word	0x0801e184

0801c65c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c65c:	b580      	push	{r7, lr}
 801c65e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c660:	4b04      	ldr	r3, [pc, #16]	@ (801c674 <UTIL_TIMER_Init+0x18>)
 801c662:	2200      	movs	r2, #0
 801c664:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c666:	4b04      	ldr	r3, [pc, #16]	@ (801c678 <UTIL_TIMER_Init+0x1c>)
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	4798      	blx	r3
 801c66c:	4603      	mov	r3, r0
}
 801c66e:	4618      	mov	r0, r3
 801c670:	bd80      	pop	{r7, pc}
 801c672:	bf00      	nop
 801c674:	20001df8 	.word	0x20001df8
 801c678:	0801dc00 	.word	0x0801dc00

0801c67c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c67c:	b580      	push	{r7, lr}
 801c67e:	b084      	sub	sp, #16
 801c680:	af00      	add	r7, sp, #0
 801c682:	60f8      	str	r0, [r7, #12]
 801c684:	60b9      	str	r1, [r7, #8]
 801c686:	603b      	str	r3, [r7, #0]
 801c688:	4613      	mov	r3, r2
 801c68a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d023      	beq.n	801c6da <UTIL_TIMER_Create+0x5e>
 801c692:	683b      	ldr	r3, [r7, #0]
 801c694:	2b00      	cmp	r3, #0
 801c696:	d020      	beq.n	801c6da <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	2200      	movs	r2, #0
 801c69c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c69e:	4b11      	ldr	r3, [pc, #68]	@ (801c6e4 <UTIL_TIMER_Create+0x68>)
 801c6a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c6a2:	68b8      	ldr	r0, [r7, #8]
 801c6a4:	4798      	blx	r3
 801c6a6:	4602      	mov	r2, r0
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	2200      	movs	r2, #0
 801c6b0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c6b2:	68fb      	ldr	r3, [r7, #12]
 801c6b4:	2200      	movs	r2, #0
 801c6b6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c6b8:	68fb      	ldr	r3, [r7, #12]
 801c6ba:	2200      	movs	r2, #0
 801c6bc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	683a      	ldr	r2, [r7, #0]
 801c6c2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	69ba      	ldr	r2, [r7, #24]
 801c6c8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	79fa      	ldrb	r2, [r7, #7]
 801c6ce:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	2200      	movs	r2, #0
 801c6d4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c6d6:	2300      	movs	r3, #0
 801c6d8:	e000      	b.n	801c6dc <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c6da:	2301      	movs	r3, #1
  }
}
 801c6dc:	4618      	mov	r0, r3
 801c6de:	3710      	adds	r7, #16
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	bd80      	pop	{r7, pc}
 801c6e4:	0801dc00 	.word	0x0801dc00

0801c6e8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	b08a      	sub	sp, #40	@ 0x28
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c6f0:	2300      	movs	r3, #0
 801c6f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	d056      	beq.n	801c7aa <UTIL_TIMER_Start+0xc2>
 801c6fc:	6878      	ldr	r0, [r7, #4]
 801c6fe:	f000 f9a9 	bl	801ca54 <TimerExists>
 801c702:	4603      	mov	r3, r0
 801c704:	f083 0301 	eor.w	r3, r3, #1
 801c708:	b2db      	uxtb	r3, r3
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d04d      	beq.n	801c7aa <UTIL_TIMER_Start+0xc2>
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	7a5b      	ldrb	r3, [r3, #9]
 801c712:	2b00      	cmp	r3, #0
 801c714:	d149      	bne.n	801c7aa <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c716:	f3ef 8310 	mrs	r3, PRIMASK
 801c71a:	613b      	str	r3, [r7, #16]
  return(result);
 801c71c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c71e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c720:	b672      	cpsid	i
}
 801c722:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	685b      	ldr	r3, [r3, #4]
 801c728:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c72a:	4b24      	ldr	r3, [pc, #144]	@ (801c7bc <UTIL_TIMER_Start+0xd4>)
 801c72c:	6a1b      	ldr	r3, [r3, #32]
 801c72e:	4798      	blx	r3
 801c730:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c732:	6a3a      	ldr	r2, [r7, #32]
 801c734:	69bb      	ldr	r3, [r7, #24]
 801c736:	429a      	cmp	r2, r3
 801c738:	d201      	bcs.n	801c73e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c73a:	69bb      	ldr	r3, [r7, #24]
 801c73c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	6a3a      	ldr	r2, [r7, #32]
 801c742:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	2200      	movs	r2, #0
 801c748:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	2201      	movs	r2, #1
 801c74e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	2200      	movs	r2, #0
 801c754:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c756:	4b1a      	ldr	r3, [pc, #104]	@ (801c7c0 <UTIL_TIMER_Start+0xd8>)
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d106      	bne.n	801c76c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c75e:	4b17      	ldr	r3, [pc, #92]	@ (801c7bc <UTIL_TIMER_Start+0xd4>)
 801c760:	691b      	ldr	r3, [r3, #16]
 801c762:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c764:	6878      	ldr	r0, [r7, #4]
 801c766:	f000 f9eb 	bl	801cb40 <TimerInsertNewHeadTimer>
 801c76a:	e017      	b.n	801c79c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c76c:	4b13      	ldr	r3, [pc, #76]	@ (801c7bc <UTIL_TIMER_Start+0xd4>)
 801c76e:	699b      	ldr	r3, [r3, #24]
 801c770:	4798      	blx	r3
 801c772:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	681a      	ldr	r2, [r3, #0]
 801c778:	697b      	ldr	r3, [r7, #20]
 801c77a:	441a      	add	r2, r3
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	681a      	ldr	r2, [r3, #0]
 801c784:	4b0e      	ldr	r3, [pc, #56]	@ (801c7c0 <UTIL_TIMER_Start+0xd8>)
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	429a      	cmp	r2, r3
 801c78c:	d203      	bcs.n	801c796 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c78e:	6878      	ldr	r0, [r7, #4]
 801c790:	f000 f9d6 	bl	801cb40 <TimerInsertNewHeadTimer>
 801c794:	e002      	b.n	801c79c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c796:	6878      	ldr	r0, [r7, #4]
 801c798:	f000 f9a2 	bl	801cae0 <TimerInsertTimer>
 801c79c:	69fb      	ldr	r3, [r7, #28]
 801c79e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	f383 8810 	msr	PRIMASK, r3
}
 801c7a6:	bf00      	nop
  {
 801c7a8:	e002      	b.n	801c7b0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c7aa:	2301      	movs	r3, #1
 801c7ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801c7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801c7b4:	4618      	mov	r0, r3
 801c7b6:	3728      	adds	r7, #40	@ 0x28
 801c7b8:	46bd      	mov	sp, r7
 801c7ba:	bd80      	pop	{r7, pc}
 801c7bc:	0801dc00 	.word	0x0801dc00
 801c7c0:	20001df8 	.word	0x20001df8

0801c7c4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c7c4:	b580      	push	{r7, lr}
 801c7c6:	b088      	sub	sp, #32
 801c7c8:	af00      	add	r7, sp, #0
 801c7ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c7cc:	2300      	movs	r3, #0
 801c7ce:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d05b      	beq.n	801c88e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7d6:	f3ef 8310 	mrs	r3, PRIMASK
 801c7da:	60fb      	str	r3, [r7, #12]
  return(result);
 801c7dc:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c7de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7e0:	b672      	cpsid	i
}
 801c7e2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c7e4:	4b2d      	ldr	r3, [pc, #180]	@ (801c89c <UTIL_TIMER_Stop+0xd8>)
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c7ea:	4b2c      	ldr	r3, [pc, #176]	@ (801c89c <UTIL_TIMER_Stop+0xd8>)
 801c7ec:	681b      	ldr	r3, [r3, #0]
 801c7ee:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	2201      	movs	r2, #1
 801c7f4:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c7f6:	4b29      	ldr	r3, [pc, #164]	@ (801c89c <UTIL_TIMER_Stop+0xd8>)
 801c7f8:	681b      	ldr	r3, [r3, #0]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d041      	beq.n	801c882 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	2200      	movs	r2, #0
 801c802:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c804:	4b25      	ldr	r3, [pc, #148]	@ (801c89c <UTIL_TIMER_Stop+0xd8>)
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	687a      	ldr	r2, [r7, #4]
 801c80a:	429a      	cmp	r2, r3
 801c80c:	d134      	bne.n	801c878 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c80e:	4b23      	ldr	r3, [pc, #140]	@ (801c89c <UTIL_TIMER_Stop+0xd8>)
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	2200      	movs	r2, #0
 801c814:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c816:	4b21      	ldr	r3, [pc, #132]	@ (801c89c <UTIL_TIMER_Stop+0xd8>)
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	695b      	ldr	r3, [r3, #20]
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d00a      	beq.n	801c836 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c820:	4b1e      	ldr	r3, [pc, #120]	@ (801c89c <UTIL_TIMER_Stop+0xd8>)
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	695b      	ldr	r3, [r3, #20]
 801c826:	4a1d      	ldr	r2, [pc, #116]	@ (801c89c <UTIL_TIMER_Stop+0xd8>)
 801c828:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c82a:	4b1c      	ldr	r3, [pc, #112]	@ (801c89c <UTIL_TIMER_Stop+0xd8>)
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	4618      	mov	r0, r3
 801c830:	f000 f92c 	bl	801ca8c <TimerSetTimeout>
 801c834:	e023      	b.n	801c87e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c836:	4b1a      	ldr	r3, [pc, #104]	@ (801c8a0 <UTIL_TIMER_Stop+0xdc>)
 801c838:	68db      	ldr	r3, [r3, #12]
 801c83a:	4798      	blx	r3
            TimerListHead = NULL;
 801c83c:	4b17      	ldr	r3, [pc, #92]	@ (801c89c <UTIL_TIMER_Stop+0xd8>)
 801c83e:	2200      	movs	r2, #0
 801c840:	601a      	str	r2, [r3, #0]
 801c842:	e01c      	b.n	801c87e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c844:	697a      	ldr	r2, [r7, #20]
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	429a      	cmp	r2, r3
 801c84a:	d110      	bne.n	801c86e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c84c:	697b      	ldr	r3, [r7, #20]
 801c84e:	695b      	ldr	r3, [r3, #20]
 801c850:	2b00      	cmp	r3, #0
 801c852:	d006      	beq.n	801c862 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c854:	697b      	ldr	r3, [r7, #20]
 801c856:	695b      	ldr	r3, [r3, #20]
 801c858:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c85a:	69bb      	ldr	r3, [r7, #24]
 801c85c:	697a      	ldr	r2, [r7, #20]
 801c85e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c860:	e00d      	b.n	801c87e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c862:	2300      	movs	r3, #0
 801c864:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c866:	69bb      	ldr	r3, [r7, #24]
 801c868:	697a      	ldr	r2, [r7, #20]
 801c86a:	615a      	str	r2, [r3, #20]
            break;
 801c86c:	e007      	b.n	801c87e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c86e:	697b      	ldr	r3, [r7, #20]
 801c870:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c872:	697b      	ldr	r3, [r7, #20]
 801c874:	695b      	ldr	r3, [r3, #20]
 801c876:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c878:	697b      	ldr	r3, [r7, #20]
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	d1e2      	bne.n	801c844 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c87e:	2300      	movs	r3, #0
 801c880:	77fb      	strb	r3, [r7, #31]
 801c882:	693b      	ldr	r3, [r7, #16]
 801c884:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c886:	68bb      	ldr	r3, [r7, #8]
 801c888:	f383 8810 	msr	PRIMASK, r3
}
 801c88c:	e001      	b.n	801c892 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c88e:	2301      	movs	r3, #1
 801c890:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c892:	7ffb      	ldrb	r3, [r7, #31]
}
 801c894:	4618      	mov	r0, r3
 801c896:	3720      	adds	r7, #32
 801c898:	46bd      	mov	sp, r7
 801c89a:	bd80      	pop	{r7, pc}
 801c89c:	20001df8 	.word	0x20001df8
 801c8a0:	0801dc00 	.word	0x0801dc00

0801c8a4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c8a4:	b580      	push	{r7, lr}
 801c8a6:	b084      	sub	sp, #16
 801c8a8:	af00      	add	r7, sp, #0
 801c8aa:	6078      	str	r0, [r7, #4]
 801c8ac:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c8ae:	2300      	movs	r3, #0
 801c8b0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d102      	bne.n	801c8be <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c8b8:	2301      	movs	r3, #1
 801c8ba:	73fb      	strb	r3, [r7, #15]
 801c8bc:	e014      	b.n	801c8e8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c8be:	4b0d      	ldr	r3, [pc, #52]	@ (801c8f4 <UTIL_TIMER_SetPeriod+0x50>)
 801c8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c8c2:	6838      	ldr	r0, [r7, #0]
 801c8c4:	4798      	blx	r3
 801c8c6:	4602      	mov	r2, r0
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c8cc:	6878      	ldr	r0, [r7, #4]
 801c8ce:	f000 f8c1 	bl	801ca54 <TimerExists>
 801c8d2:	4603      	mov	r3, r0
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d007      	beq.n	801c8e8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c8d8:	6878      	ldr	r0, [r7, #4]
 801c8da:	f7ff ff73 	bl	801c7c4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c8de:	6878      	ldr	r0, [r7, #4]
 801c8e0:	f7ff ff02 	bl	801c6e8 <UTIL_TIMER_Start>
 801c8e4:	4603      	mov	r3, r0
 801c8e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 801c8ea:	4618      	mov	r0, r3
 801c8ec:	3710      	adds	r7, #16
 801c8ee:	46bd      	mov	sp, r7
 801c8f0:	bd80      	pop	{r7, pc}
 801c8f2:	bf00      	nop
 801c8f4:	0801dc00 	.word	0x0801dc00

0801c8f8 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c8f8:	b590      	push	{r4, r7, lr}
 801c8fa:	b089      	sub	sp, #36	@ 0x24
 801c8fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c8fe:	f3ef 8310 	mrs	r3, PRIMASK
 801c902:	60bb      	str	r3, [r7, #8]
  return(result);
 801c904:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c906:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c908:	b672      	cpsid	i
}
 801c90a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c90c:	4b38      	ldr	r3, [pc, #224]	@ (801c9f0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c90e:	695b      	ldr	r3, [r3, #20]
 801c910:	4798      	blx	r3
 801c912:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c914:	4b36      	ldr	r3, [pc, #216]	@ (801c9f0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c916:	691b      	ldr	r3, [r3, #16]
 801c918:	4798      	blx	r3
 801c91a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c91c:	693a      	ldr	r2, [r7, #16]
 801c91e:	697b      	ldr	r3, [r7, #20]
 801c920:	1ad3      	subs	r3, r2, r3
 801c922:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c924:	4b33      	ldr	r3, [pc, #204]	@ (801c9f4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d037      	beq.n	801c99c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801c92c:	4b31      	ldr	r3, [pc, #196]	@ (801c9f4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c92e:	681b      	ldr	r3, [r3, #0]
 801c930:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c932:	69fb      	ldr	r3, [r7, #28]
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	68fa      	ldr	r2, [r7, #12]
 801c938:	429a      	cmp	r2, r3
 801c93a:	d206      	bcs.n	801c94a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801c93c:	69fb      	ldr	r3, [r7, #28]
 801c93e:	681a      	ldr	r2, [r3, #0]
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	1ad2      	subs	r2, r2, r3
 801c944:	69fb      	ldr	r3, [r7, #28]
 801c946:	601a      	str	r2, [r3, #0]
 801c948:	e002      	b.n	801c950 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801c94a:	69fb      	ldr	r3, [r7, #28]
 801c94c:	2200      	movs	r2, #0
 801c94e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c950:	69fb      	ldr	r3, [r7, #28]
 801c952:	695b      	ldr	r3, [r3, #20]
 801c954:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c956:	69fb      	ldr	r3, [r7, #28]
 801c958:	2b00      	cmp	r3, #0
 801c95a:	d1ea      	bne.n	801c932 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c95c:	e01e      	b.n	801c99c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801c95e:	4b25      	ldr	r3, [pc, #148]	@ (801c9f4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c960:	681b      	ldr	r3, [r3, #0]
 801c962:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c964:	4b23      	ldr	r3, [pc, #140]	@ (801c9f4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c966:	681b      	ldr	r3, [r3, #0]
 801c968:	695b      	ldr	r3, [r3, #20]
 801c96a:	4a22      	ldr	r2, [pc, #136]	@ (801c9f4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c96c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801c96e:	69fb      	ldr	r3, [r7, #28]
 801c970:	2200      	movs	r2, #0
 801c972:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c974:	69fb      	ldr	r3, [r7, #28]
 801c976:	2200      	movs	r2, #0
 801c978:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c97a:	69fb      	ldr	r3, [r7, #28]
 801c97c:	68db      	ldr	r3, [r3, #12]
 801c97e:	69fa      	ldr	r2, [r7, #28]
 801c980:	6912      	ldr	r2, [r2, #16]
 801c982:	4610      	mov	r0, r2
 801c984:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c986:	69fb      	ldr	r3, [r7, #28]
 801c988:	7adb      	ldrb	r3, [r3, #11]
 801c98a:	2b01      	cmp	r3, #1
 801c98c:	d106      	bne.n	801c99c <UTIL_TIMER_IRQ_Handler+0xa4>
 801c98e:	69fb      	ldr	r3, [r7, #28]
 801c990:	7a9b      	ldrb	r3, [r3, #10]
 801c992:	2b00      	cmp	r3, #0
 801c994:	d102      	bne.n	801c99c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801c996:	69f8      	ldr	r0, [r7, #28]
 801c998:	f7ff fea6 	bl	801c6e8 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c99c:	4b15      	ldr	r3, [pc, #84]	@ (801c9f4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d00d      	beq.n	801c9c0 <UTIL_TIMER_IRQ_Handler+0xc8>
 801c9a4:	4b13      	ldr	r3, [pc, #76]	@ (801c9f4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d0d7      	beq.n	801c95e <UTIL_TIMER_IRQ_Handler+0x66>
 801c9ae:	4b11      	ldr	r3, [pc, #68]	@ (801c9f4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	681c      	ldr	r4, [r3, #0]
 801c9b4:	4b0e      	ldr	r3, [pc, #56]	@ (801c9f0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c9b6:	699b      	ldr	r3, [r3, #24]
 801c9b8:	4798      	blx	r3
 801c9ba:	4603      	mov	r3, r0
 801c9bc:	429c      	cmp	r4, r3
 801c9be:	d3ce      	bcc.n	801c95e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c9c0:	4b0c      	ldr	r3, [pc, #48]	@ (801c9f4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9c2:	681b      	ldr	r3, [r3, #0]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d009      	beq.n	801c9dc <UTIL_TIMER_IRQ_Handler+0xe4>
 801c9c8:	4b0a      	ldr	r3, [pc, #40]	@ (801c9f4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	7a1b      	ldrb	r3, [r3, #8]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d104      	bne.n	801c9dc <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801c9d2:	4b08      	ldr	r3, [pc, #32]	@ (801c9f4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	4618      	mov	r0, r3
 801c9d8:	f000 f858 	bl	801ca8c <TimerSetTimeout>
 801c9dc:	69bb      	ldr	r3, [r7, #24]
 801c9de:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	f383 8810 	msr	PRIMASK, r3
}
 801c9e6:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c9e8:	bf00      	nop
 801c9ea:	3724      	adds	r7, #36	@ 0x24
 801c9ec:	46bd      	mov	sp, r7
 801c9ee:	bd90      	pop	{r4, r7, pc}
 801c9f0:	0801dc00 	.word	0x0801dc00
 801c9f4:	20001df8 	.word	0x20001df8

0801c9f8 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	b082      	sub	sp, #8
 801c9fc:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c9fe:	4b06      	ldr	r3, [pc, #24]	@ (801ca18 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ca00:	69db      	ldr	r3, [r3, #28]
 801ca02:	4798      	blx	r3
 801ca04:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ca06:	4b04      	ldr	r3, [pc, #16]	@ (801ca18 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ca08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ca0a:	6878      	ldr	r0, [r7, #4]
 801ca0c:	4798      	blx	r3
 801ca0e:	4603      	mov	r3, r0
}
 801ca10:	4618      	mov	r0, r3
 801ca12:	3708      	adds	r7, #8
 801ca14:	46bd      	mov	sp, r7
 801ca16:	bd80      	pop	{r7, pc}
 801ca18:	0801dc00 	.word	0x0801dc00

0801ca1c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801ca1c:	b580      	push	{r7, lr}
 801ca1e:	b084      	sub	sp, #16
 801ca20:	af00      	add	r7, sp, #0
 801ca22:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801ca24:	4b0a      	ldr	r3, [pc, #40]	@ (801ca50 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ca26:	69db      	ldr	r3, [r3, #28]
 801ca28:	4798      	blx	r3
 801ca2a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801ca2c:	4b08      	ldr	r3, [pc, #32]	@ (801ca50 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ca2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca30:	6878      	ldr	r0, [r7, #4]
 801ca32:	4798      	blx	r3
 801ca34:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801ca36:	4b06      	ldr	r3, [pc, #24]	@ (801ca50 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ca38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ca3a:	68f9      	ldr	r1, [r7, #12]
 801ca3c:	68ba      	ldr	r2, [r7, #8]
 801ca3e:	1a8a      	subs	r2, r1, r2
 801ca40:	4610      	mov	r0, r2
 801ca42:	4798      	blx	r3
 801ca44:	4603      	mov	r3, r0
}
 801ca46:	4618      	mov	r0, r3
 801ca48:	3710      	adds	r7, #16
 801ca4a:	46bd      	mov	sp, r7
 801ca4c:	bd80      	pop	{r7, pc}
 801ca4e:	bf00      	nop
 801ca50:	0801dc00 	.word	0x0801dc00

0801ca54 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801ca54:	b480      	push	{r7}
 801ca56:	b085      	sub	sp, #20
 801ca58:	af00      	add	r7, sp, #0
 801ca5a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ca5c:	4b0a      	ldr	r3, [pc, #40]	@ (801ca88 <TimerExists+0x34>)
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801ca62:	e008      	b.n	801ca76 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801ca64:	68fa      	ldr	r2, [r7, #12]
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	429a      	cmp	r2, r3
 801ca6a:	d101      	bne.n	801ca70 <TimerExists+0x1c>
    {
      return true;
 801ca6c:	2301      	movs	r3, #1
 801ca6e:	e006      	b.n	801ca7e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	695b      	ldr	r3, [r3, #20]
 801ca74:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d1f3      	bne.n	801ca64 <TimerExists+0x10>
  }
  return false;
 801ca7c:	2300      	movs	r3, #0
}
 801ca7e:	4618      	mov	r0, r3
 801ca80:	3714      	adds	r7, #20
 801ca82:	46bd      	mov	sp, r7
 801ca84:	bc80      	pop	{r7}
 801ca86:	4770      	bx	lr
 801ca88:	20001df8 	.word	0x20001df8

0801ca8c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801ca8c:	b590      	push	{r4, r7, lr}
 801ca8e:	b085      	sub	sp, #20
 801ca90:	af00      	add	r7, sp, #0
 801ca92:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801ca94:	4b11      	ldr	r3, [pc, #68]	@ (801cadc <TimerSetTimeout+0x50>)
 801ca96:	6a1b      	ldr	r3, [r3, #32]
 801ca98:	4798      	blx	r3
 801ca9a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	2201      	movs	r2, #1
 801caa0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	681c      	ldr	r4, [r3, #0]
 801caa6:	4b0d      	ldr	r3, [pc, #52]	@ (801cadc <TimerSetTimeout+0x50>)
 801caa8:	699b      	ldr	r3, [r3, #24]
 801caaa:	4798      	blx	r3
 801caac:	4602      	mov	r2, r0
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	4413      	add	r3, r2
 801cab2:	429c      	cmp	r4, r3
 801cab4:	d207      	bcs.n	801cac6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801cab6:	4b09      	ldr	r3, [pc, #36]	@ (801cadc <TimerSetTimeout+0x50>)
 801cab8:	699b      	ldr	r3, [r3, #24]
 801caba:	4798      	blx	r3
 801cabc:	4602      	mov	r2, r0
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	441a      	add	r2, r3
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801cac6:	4b05      	ldr	r3, [pc, #20]	@ (801cadc <TimerSetTimeout+0x50>)
 801cac8:	689b      	ldr	r3, [r3, #8]
 801caca:	687a      	ldr	r2, [r7, #4]
 801cacc:	6812      	ldr	r2, [r2, #0]
 801cace:	4610      	mov	r0, r2
 801cad0:	4798      	blx	r3
}
 801cad2:	bf00      	nop
 801cad4:	3714      	adds	r7, #20
 801cad6:	46bd      	mov	sp, r7
 801cad8:	bd90      	pop	{r4, r7, pc}
 801cada:	bf00      	nop
 801cadc:	0801dc00 	.word	0x0801dc00

0801cae0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801cae0:	b480      	push	{r7}
 801cae2:	b085      	sub	sp, #20
 801cae4:	af00      	add	r7, sp, #0
 801cae6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cae8:	4b14      	ldr	r3, [pc, #80]	@ (801cb3c <TimerInsertTimer+0x5c>)
 801caea:	681b      	ldr	r3, [r3, #0]
 801caec:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801caee:	4b13      	ldr	r3, [pc, #76]	@ (801cb3c <TimerInsertTimer+0x5c>)
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	695b      	ldr	r3, [r3, #20]
 801caf4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801caf6:	e012      	b.n	801cb1e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	681a      	ldr	r2, [r3, #0]
 801cafc:	68bb      	ldr	r3, [r7, #8]
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	429a      	cmp	r2, r3
 801cb02:	d905      	bls.n	801cb10 <TimerInsertTimer+0x30>
    {
        cur = next;
 801cb04:	68bb      	ldr	r3, [r7, #8]
 801cb06:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801cb08:	68bb      	ldr	r3, [r7, #8]
 801cb0a:	695b      	ldr	r3, [r3, #20]
 801cb0c:	60bb      	str	r3, [r7, #8]
 801cb0e:	e006      	b.n	801cb1e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	687a      	ldr	r2, [r7, #4]
 801cb14:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	68ba      	ldr	r2, [r7, #8]
 801cb1a:	615a      	str	r2, [r3, #20]
        return;
 801cb1c:	e009      	b.n	801cb32 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801cb1e:	68fb      	ldr	r3, [r7, #12]
 801cb20:	695b      	ldr	r3, [r3, #20]
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d1e8      	bne.n	801caf8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	687a      	ldr	r2, [r7, #4]
 801cb2a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	2200      	movs	r2, #0
 801cb30:	615a      	str	r2, [r3, #20]
}
 801cb32:	3714      	adds	r7, #20
 801cb34:	46bd      	mov	sp, r7
 801cb36:	bc80      	pop	{r7}
 801cb38:	4770      	bx	lr
 801cb3a:	bf00      	nop
 801cb3c:	20001df8 	.word	0x20001df8

0801cb40 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b084      	sub	sp, #16
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cb48:	4b0b      	ldr	r3, [pc, #44]	@ (801cb78 <TimerInsertNewHeadTimer+0x38>)
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801cb4e:	68fb      	ldr	r3, [r7, #12]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d002      	beq.n	801cb5a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801cb54:	68fb      	ldr	r3, [r7, #12]
 801cb56:	2200      	movs	r2, #0
 801cb58:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	68fa      	ldr	r2, [r7, #12]
 801cb5e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801cb60:	4a05      	ldr	r2, [pc, #20]	@ (801cb78 <TimerInsertNewHeadTimer+0x38>)
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801cb66:	4b04      	ldr	r3, [pc, #16]	@ (801cb78 <TimerInsertNewHeadTimer+0x38>)
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	4618      	mov	r0, r3
 801cb6c:	f7ff ff8e 	bl	801ca8c <TimerSetTimeout>
}
 801cb70:	bf00      	nop
 801cb72:	3710      	adds	r7, #16
 801cb74:	46bd      	mov	sp, r7
 801cb76:	bd80      	pop	{r7, pc}
 801cb78:	20001df8 	.word	0x20001df8

0801cb7c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801cb7c:	b580      	push	{r7, lr}
 801cb7e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801cb80:	2218      	movs	r2, #24
 801cb82:	2100      	movs	r1, #0
 801cb84:	4807      	ldr	r0, [pc, #28]	@ (801cba4 <UTIL_ADV_TRACE_Init+0x28>)
 801cb86:	f7ff f862 	bl	801bc4e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801cb8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801cb8e:	2100      	movs	r1, #0
 801cb90:	4805      	ldr	r0, [pc, #20]	@ (801cba8 <UTIL_ADV_TRACE_Init+0x2c>)
 801cb92:	f7ff f85c 	bl	801bc4e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801cb96:	4b05      	ldr	r3, [pc, #20]	@ (801cbac <UTIL_ADV_TRACE_Init+0x30>)
 801cb98:	681b      	ldr	r3, [r3, #0]
 801cb9a:	4805      	ldr	r0, [pc, #20]	@ (801cbb0 <UTIL_ADV_TRACE_Init+0x34>)
 801cb9c:	4798      	blx	r3
 801cb9e:	4603      	mov	r3, r0
}
 801cba0:	4618      	mov	r0, r3
 801cba2:	bd80      	pop	{r7, pc}
 801cba4:	20001dfc 	.word	0x20001dfc
 801cba8:	20001e14 	.word	0x20001e14
 801cbac:	0801dc40 	.word	0x0801dc40
 801cbb0:	0801ce1d 	.word	0x0801ce1d

0801cbb4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801cbb4:	b480      	push	{r7}
 801cbb6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cbb8:	4b06      	ldr	r3, [pc, #24]	@ (801cbd4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801cbba:	8a5a      	ldrh	r2, [r3, #18]
 801cbbc:	4b05      	ldr	r3, [pc, #20]	@ (801cbd4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801cbbe:	8a1b      	ldrh	r3, [r3, #16]
 801cbc0:	429a      	cmp	r2, r3
 801cbc2:	d101      	bne.n	801cbc8 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801cbc4:	2301      	movs	r3, #1
 801cbc6:	e000      	b.n	801cbca <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801cbc8:	2300      	movs	r3, #0
}
 801cbca:	4618      	mov	r0, r3
 801cbcc:	46bd      	mov	sp, r7
 801cbce:	bc80      	pop	{r7}
 801cbd0:	4770      	bx	lr
 801cbd2:	bf00      	nop
 801cbd4:	20001dfc 	.word	0x20001dfc

0801cbd8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801cbd8:	b408      	push	{r3}
 801cbda:	b580      	push	{r7, lr}
 801cbdc:	b08d      	sub	sp, #52	@ 0x34
 801cbde:	af00      	add	r7, sp, #0
 801cbe0:	60f8      	str	r0, [r7, #12]
 801cbe2:	60b9      	str	r1, [r7, #8]
 801cbe4:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801cbe6:	2300      	movs	r3, #0
 801cbe8:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801cbea:	2300      	movs	r3, #0
 801cbec:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801cbee:	4b37      	ldr	r3, [pc, #220]	@ (801cccc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cbf0:	7a1b      	ldrb	r3, [r3, #8]
 801cbf2:	461a      	mov	r2, r3
 801cbf4:	68fb      	ldr	r3, [r7, #12]
 801cbf6:	4293      	cmp	r3, r2
 801cbf8:	d902      	bls.n	801cc00 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801cbfa:	f06f 0304 	mvn.w	r3, #4
 801cbfe:	e05e      	b.n	801ccbe <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801cc00:	4b32      	ldr	r3, [pc, #200]	@ (801cccc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc02:	68da      	ldr	r2, [r3, #12]
 801cc04:	68bb      	ldr	r3, [r7, #8]
 801cc06:	4013      	ands	r3, r2
 801cc08:	68ba      	ldr	r2, [r7, #8]
 801cc0a:	429a      	cmp	r2, r3
 801cc0c:	d002      	beq.n	801cc14 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801cc0e:	f06f 0305 	mvn.w	r3, #5
 801cc12:	e054      	b.n	801ccbe <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801cc14:	4b2d      	ldr	r3, [pc, #180]	@ (801cccc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc16:	685b      	ldr	r3, [r3, #4]
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d00a      	beq.n	801cc32 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	2b00      	cmp	r3, #0
 801cc20:	d007      	beq.n	801cc32 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801cc22:	4b2a      	ldr	r3, [pc, #168]	@ (801cccc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc24:	685b      	ldr	r3, [r3, #4]
 801cc26:	f107 0116 	add.w	r1, r7, #22
 801cc2a:	f107 0218 	add.w	r2, r7, #24
 801cc2e:	4610      	mov	r0, r2
 801cc30:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801cc32:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801cc36:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801cc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cc3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cc40:	4823      	ldr	r0, [pc, #140]	@ (801ccd0 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801cc42:	f7ff fa2b 	bl	801c09c <tiny_vsnprintf_like>
 801cc46:	4603      	mov	r3, r0
 801cc48:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801cc4a:	f000 f9f1 	bl	801d030 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801cc4e:	8afa      	ldrh	r2, [r7, #22]
 801cc50:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801cc52:	4413      	add	r3, r2
 801cc54:	b29b      	uxth	r3, r3
 801cc56:	f107 0214 	add.w	r2, r7, #20
 801cc5a:	4611      	mov	r1, r2
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	f000 f969 	bl	801cf34 <TRACE_AllocateBufer>
 801cc62:	4603      	mov	r3, r0
 801cc64:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc68:	d025      	beq.n	801ccb6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801cc6a:	2300      	movs	r3, #0
 801cc6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801cc6e:	e00e      	b.n	801cc8e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801cc70:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cc72:	8aba      	ldrh	r2, [r7, #20]
 801cc74:	3330      	adds	r3, #48	@ 0x30
 801cc76:	443b      	add	r3, r7
 801cc78:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801cc7c:	4b15      	ldr	r3, [pc, #84]	@ (801ccd4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801cc7e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801cc80:	8abb      	ldrh	r3, [r7, #20]
 801cc82:	3301      	adds	r3, #1
 801cc84:	b29b      	uxth	r3, r3
 801cc86:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801cc88:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cc8a:	3301      	adds	r3, #1
 801cc8c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801cc8e:	8afb      	ldrh	r3, [r7, #22]
 801cc90:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cc92:	429a      	cmp	r2, r3
 801cc94:	d3ec      	bcc.n	801cc70 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801cc96:	8abb      	ldrh	r3, [r7, #20]
 801cc98:	461a      	mov	r2, r3
 801cc9a:	4b0e      	ldr	r3, [pc, #56]	@ (801ccd4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801cc9c:	18d0      	adds	r0, r2, r3
 801cc9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cca0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cca2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cca6:	f7ff f9f9 	bl	801c09c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801ccaa:	f000 f9df 	bl	801d06c <TRACE_UnLock>

    return TRACE_Send();
 801ccae:	f000 f831 	bl	801cd14 <TRACE_Send>
 801ccb2:	4603      	mov	r3, r0
 801ccb4:	e003      	b.n	801ccbe <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801ccb6:	f000 f9d9 	bl	801d06c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801ccba:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801ccbe:	4618      	mov	r0, r3
 801ccc0:	3734      	adds	r7, #52	@ 0x34
 801ccc2:	46bd      	mov	sp, r7
 801ccc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ccc8:	b001      	add	sp, #4
 801ccca:	4770      	bx	lr
 801cccc:	20001dfc 	.word	0x20001dfc
 801ccd0:	20002214 	.word	0x20002214
 801ccd4:	20001e14 	.word	0x20001e14

0801ccd8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801ccd8:	b480      	push	{r7}
 801ccda:	b083      	sub	sp, #12
 801ccdc:	af00      	add	r7, sp, #0
 801ccde:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801cce0:	4a03      	ldr	r2, [pc, #12]	@ (801ccf0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	6053      	str	r3, [r2, #4]
}
 801cce6:	bf00      	nop
 801cce8:	370c      	adds	r7, #12
 801ccea:	46bd      	mov	sp, r7
 801ccec:	bc80      	pop	{r7}
 801ccee:	4770      	bx	lr
 801ccf0:	20001dfc 	.word	0x20001dfc

0801ccf4 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801ccf4:	b480      	push	{r7}
 801ccf6:	b083      	sub	sp, #12
 801ccf8:	af00      	add	r7, sp, #0
 801ccfa:	4603      	mov	r3, r0
 801ccfc:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801ccfe:	4a04      	ldr	r2, [pc, #16]	@ (801cd10 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801cd00:	79fb      	ldrb	r3, [r7, #7]
 801cd02:	7213      	strb	r3, [r2, #8]
}
 801cd04:	bf00      	nop
 801cd06:	370c      	adds	r7, #12
 801cd08:	46bd      	mov	sp, r7
 801cd0a:	bc80      	pop	{r7}
 801cd0c:	4770      	bx	lr
 801cd0e:	bf00      	nop
 801cd10:	20001dfc 	.word	0x20001dfc

0801cd14 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801cd14:	b580      	push	{r7, lr}
 801cd16:	b088      	sub	sp, #32
 801cd18:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801cd1a:	2300      	movs	r3, #0
 801cd1c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801cd1e:	2300      	movs	r3, #0
 801cd20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd22:	f3ef 8310 	mrs	r3, PRIMASK
 801cd26:	613b      	str	r3, [r7, #16]
  return(result);
 801cd28:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cd2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd2c:	b672      	cpsid	i
}
 801cd2e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801cd30:	f000 f9ba 	bl	801d0a8 <TRACE_IsLocked>
 801cd34:	4603      	mov	r3, r0
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d15d      	bne.n	801cdf6 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801cd3a:	f000 f979 	bl	801d030 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801cd3e:	4b34      	ldr	r3, [pc, #208]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd40:	8a1a      	ldrh	r2, [r3, #16]
 801cd42:	4b33      	ldr	r3, [pc, #204]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd44:	8a5b      	ldrh	r3, [r3, #18]
 801cd46:	429a      	cmp	r2, r3
 801cd48:	d04d      	beq.n	801cde6 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cd4a:	4b31      	ldr	r3, [pc, #196]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd4c:	789b      	ldrb	r3, [r3, #2]
 801cd4e:	2b01      	cmp	r3, #1
 801cd50:	d117      	bne.n	801cd82 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801cd52:	4b2f      	ldr	r3, [pc, #188]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd54:	881a      	ldrh	r2, [r3, #0]
 801cd56:	4b2e      	ldr	r3, [pc, #184]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd58:	8a1b      	ldrh	r3, [r3, #16]
 801cd5a:	1ad3      	subs	r3, r2, r3
 801cd5c:	b29a      	uxth	r2, r3
 801cd5e:	4b2c      	ldr	r3, [pc, #176]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd60:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cd62:	4b2b      	ldr	r3, [pc, #172]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd64:	2202      	movs	r2, #2
 801cd66:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cd68:	4b29      	ldr	r3, [pc, #164]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd6a:	2200      	movs	r2, #0
 801cd6c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cd6e:	4b28      	ldr	r3, [pc, #160]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd70:	8a9b      	ldrh	r3, [r3, #20]
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d105      	bne.n	801cd82 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cd76:	4b26      	ldr	r3, [pc, #152]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd78:	2200      	movs	r2, #0
 801cd7a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cd7c:	4b24      	ldr	r3, [pc, #144]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd7e:	2200      	movs	r2, #0
 801cd80:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cd82:	4b23      	ldr	r3, [pc, #140]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd84:	789b      	ldrb	r3, [r3, #2]
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d115      	bne.n	801cdb6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cd8a:	4b21      	ldr	r3, [pc, #132]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd8c:	8a5a      	ldrh	r2, [r3, #18]
 801cd8e:	4b20      	ldr	r3, [pc, #128]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd90:	8a1b      	ldrh	r3, [r3, #16]
 801cd92:	429a      	cmp	r2, r3
 801cd94:	d908      	bls.n	801cda8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cd96:	4b1e      	ldr	r3, [pc, #120]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd98:	8a5a      	ldrh	r2, [r3, #18]
 801cd9a:	4b1d      	ldr	r3, [pc, #116]	@ (801ce10 <TRACE_Send+0xfc>)
 801cd9c:	8a1b      	ldrh	r3, [r3, #16]
 801cd9e:	1ad3      	subs	r3, r2, r3
 801cda0:	b29a      	uxth	r2, r3
 801cda2:	4b1b      	ldr	r3, [pc, #108]	@ (801ce10 <TRACE_Send+0xfc>)
 801cda4:	829a      	strh	r2, [r3, #20]
 801cda6:	e006      	b.n	801cdb6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cda8:	4b19      	ldr	r3, [pc, #100]	@ (801ce10 <TRACE_Send+0xfc>)
 801cdaa:	8a1b      	ldrh	r3, [r3, #16]
 801cdac:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801cdb0:	b29a      	uxth	r2, r3
 801cdb2:	4b17      	ldr	r3, [pc, #92]	@ (801ce10 <TRACE_Send+0xfc>)
 801cdb4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cdb6:	4b16      	ldr	r3, [pc, #88]	@ (801ce10 <TRACE_Send+0xfc>)
 801cdb8:	8a1b      	ldrh	r3, [r3, #16]
 801cdba:	461a      	mov	r2, r3
 801cdbc:	4b15      	ldr	r3, [pc, #84]	@ (801ce14 <TRACE_Send+0x100>)
 801cdbe:	4413      	add	r3, r2
 801cdc0:	61bb      	str	r3, [r7, #24]
 801cdc2:	697b      	ldr	r3, [r7, #20]
 801cdc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdc6:	68fb      	ldr	r3, [r7, #12]
 801cdc8:	f383 8810 	msr	PRIMASK, r3
}
 801cdcc:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801cdce:	f7e5 fb5f 	bl	8002490 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cdd2:	4b11      	ldr	r3, [pc, #68]	@ (801ce18 <TRACE_Send+0x104>)
 801cdd4:	68db      	ldr	r3, [r3, #12]
 801cdd6:	4a0e      	ldr	r2, [pc, #56]	@ (801ce10 <TRACE_Send+0xfc>)
 801cdd8:	8a92      	ldrh	r2, [r2, #20]
 801cdda:	4611      	mov	r1, r2
 801cddc:	69b8      	ldr	r0, [r7, #24]
 801cdde:	4798      	blx	r3
 801cde0:	4603      	mov	r3, r0
 801cde2:	77fb      	strb	r3, [r7, #31]
 801cde4:	e00d      	b.n	801ce02 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801cde6:	f000 f941 	bl	801d06c <TRACE_UnLock>
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdee:	68bb      	ldr	r3, [r7, #8]
 801cdf0:	f383 8810 	msr	PRIMASK, r3
}
 801cdf4:	e005      	b.n	801ce02 <TRACE_Send+0xee>
 801cdf6:	697b      	ldr	r3, [r7, #20]
 801cdf8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	f383 8810 	msr	PRIMASK, r3
}
 801ce00:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ce02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ce06:	4618      	mov	r0, r3
 801ce08:	3720      	adds	r7, #32
 801ce0a:	46bd      	mov	sp, r7
 801ce0c:	bd80      	pop	{r7, pc}
 801ce0e:	bf00      	nop
 801ce10:	20001dfc 	.word	0x20001dfc
 801ce14:	20001e14 	.word	0x20001e14
 801ce18:	0801dc40 	.word	0x0801dc40

0801ce1c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	b088      	sub	sp, #32
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ce24:	2300      	movs	r3, #0
 801ce26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce28:	f3ef 8310 	mrs	r3, PRIMASK
 801ce2c:	617b      	str	r3, [r7, #20]
  return(result);
 801ce2e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ce30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce32:	b672      	cpsid	i
}
 801ce34:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801ce36:	4b3c      	ldr	r3, [pc, #240]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce38:	789b      	ldrb	r3, [r3, #2]
 801ce3a:	2b02      	cmp	r3, #2
 801ce3c:	d106      	bne.n	801ce4c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ce3e:	4b3a      	ldr	r3, [pc, #232]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce40:	2200      	movs	r2, #0
 801ce42:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ce44:	4b38      	ldr	r3, [pc, #224]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce46:	2200      	movs	r2, #0
 801ce48:	821a      	strh	r2, [r3, #16]
 801ce4a:	e00a      	b.n	801ce62 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ce4c:	4b36      	ldr	r3, [pc, #216]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce4e:	8a1a      	ldrh	r2, [r3, #16]
 801ce50:	4b35      	ldr	r3, [pc, #212]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce52:	8a9b      	ldrh	r3, [r3, #20]
 801ce54:	4413      	add	r3, r2
 801ce56:	b29b      	uxth	r3, r3
 801ce58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ce5c:	b29a      	uxth	r2, r3
 801ce5e:	4b32      	ldr	r3, [pc, #200]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce60:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ce62:	4b31      	ldr	r3, [pc, #196]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce64:	8a1a      	ldrh	r2, [r3, #16]
 801ce66:	4b30      	ldr	r3, [pc, #192]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce68:	8a5b      	ldrh	r3, [r3, #18]
 801ce6a:	429a      	cmp	r2, r3
 801ce6c:	d04d      	beq.n	801cf0a <TRACE_TxCpltCallback+0xee>
 801ce6e:	4b2e      	ldr	r3, [pc, #184]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce70:	8adb      	ldrh	r3, [r3, #22]
 801ce72:	2b01      	cmp	r3, #1
 801ce74:	d149      	bne.n	801cf0a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ce76:	4b2c      	ldr	r3, [pc, #176]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce78:	789b      	ldrb	r3, [r3, #2]
 801ce7a:	2b01      	cmp	r3, #1
 801ce7c:	d117      	bne.n	801ceae <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ce7e:	4b2a      	ldr	r3, [pc, #168]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce80:	881a      	ldrh	r2, [r3, #0]
 801ce82:	4b29      	ldr	r3, [pc, #164]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce84:	8a1b      	ldrh	r3, [r3, #16]
 801ce86:	1ad3      	subs	r3, r2, r3
 801ce88:	b29a      	uxth	r2, r3
 801ce8a:	4b27      	ldr	r3, [pc, #156]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce8c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ce8e:	4b26      	ldr	r3, [pc, #152]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce90:	2202      	movs	r2, #2
 801ce92:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ce94:	4b24      	ldr	r3, [pc, #144]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce96:	2200      	movs	r2, #0
 801ce98:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ce9a:	4b23      	ldr	r3, [pc, #140]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ce9c:	8a9b      	ldrh	r3, [r3, #20]
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d105      	bne.n	801ceae <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cea2:	4b21      	ldr	r3, [pc, #132]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801cea4:	2200      	movs	r2, #0
 801cea6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cea8:	4b1f      	ldr	r3, [pc, #124]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ceaa:	2200      	movs	r2, #0
 801ceac:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ceae:	4b1e      	ldr	r3, [pc, #120]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ceb0:	789b      	ldrb	r3, [r3, #2]
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d115      	bne.n	801cee2 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ceb6:	4b1c      	ldr	r3, [pc, #112]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ceb8:	8a5a      	ldrh	r2, [r3, #18]
 801ceba:	4b1b      	ldr	r3, [pc, #108]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801cebc:	8a1b      	ldrh	r3, [r3, #16]
 801cebe:	429a      	cmp	r2, r3
 801cec0:	d908      	bls.n	801ced4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cec2:	4b19      	ldr	r3, [pc, #100]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801cec4:	8a5a      	ldrh	r2, [r3, #18]
 801cec6:	4b18      	ldr	r3, [pc, #96]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801cec8:	8a1b      	ldrh	r3, [r3, #16]
 801ceca:	1ad3      	subs	r3, r2, r3
 801cecc:	b29a      	uxth	r2, r3
 801cece:	4b16      	ldr	r3, [pc, #88]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ced0:	829a      	strh	r2, [r3, #20]
 801ced2:	e006      	b.n	801cee2 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ced4:	4b14      	ldr	r3, [pc, #80]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801ced6:	8a1b      	ldrh	r3, [r3, #16]
 801ced8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801cedc:	b29a      	uxth	r2, r3
 801cede:	4b12      	ldr	r3, [pc, #72]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801cee0:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cee2:	4b11      	ldr	r3, [pc, #68]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801cee4:	8a1b      	ldrh	r3, [r3, #16]
 801cee6:	461a      	mov	r2, r3
 801cee8:	4b10      	ldr	r3, [pc, #64]	@ (801cf2c <TRACE_TxCpltCallback+0x110>)
 801ceea:	4413      	add	r3, r2
 801ceec:	61fb      	str	r3, [r7, #28]
 801ceee:	69bb      	ldr	r3, [r7, #24]
 801cef0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cef2:	693b      	ldr	r3, [r7, #16]
 801cef4:	f383 8810 	msr	PRIMASK, r3
}
 801cef8:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cefa:	4b0d      	ldr	r3, [pc, #52]	@ (801cf30 <TRACE_TxCpltCallback+0x114>)
 801cefc:	68db      	ldr	r3, [r3, #12]
 801cefe:	4a0a      	ldr	r2, [pc, #40]	@ (801cf28 <TRACE_TxCpltCallback+0x10c>)
 801cf00:	8a92      	ldrh	r2, [r2, #20]
 801cf02:	4611      	mov	r1, r2
 801cf04:	69f8      	ldr	r0, [r7, #28]
 801cf06:	4798      	blx	r3
 801cf08:	e00a      	b.n	801cf20 <TRACE_TxCpltCallback+0x104>
 801cf0a:	69bb      	ldr	r3, [r7, #24]
 801cf0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf0e:	68fb      	ldr	r3, [r7, #12]
 801cf10:	f383 8810 	msr	PRIMASK, r3
}
 801cf14:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801cf16:	f7e5 fac3 	bl	80024a0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801cf1a:	f000 f8a7 	bl	801d06c <TRACE_UnLock>
  }
}
 801cf1e:	bf00      	nop
 801cf20:	bf00      	nop
 801cf22:	3720      	adds	r7, #32
 801cf24:	46bd      	mov	sp, r7
 801cf26:	bd80      	pop	{r7, pc}
 801cf28:	20001dfc 	.word	0x20001dfc
 801cf2c:	20001e14 	.word	0x20001e14
 801cf30:	0801dc40 	.word	0x0801dc40

0801cf34 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801cf34:	b480      	push	{r7}
 801cf36:	b087      	sub	sp, #28
 801cf38:	af00      	add	r7, sp, #0
 801cf3a:	4603      	mov	r3, r0
 801cf3c:	6039      	str	r1, [r7, #0]
 801cf3e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801cf40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cf44:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf46:	f3ef 8310 	mrs	r3, PRIMASK
 801cf4a:	60fb      	str	r3, [r7, #12]
  return(result);
 801cf4c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cf4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf50:	b672      	cpsid	i
}
 801cf52:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cf54:	4b35      	ldr	r3, [pc, #212]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cf56:	8a5a      	ldrh	r2, [r3, #18]
 801cf58:	4b34      	ldr	r3, [pc, #208]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cf5a:	8a1b      	ldrh	r3, [r3, #16]
 801cf5c:	429a      	cmp	r2, r3
 801cf5e:	d11b      	bne.n	801cf98 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cf60:	4b32      	ldr	r3, [pc, #200]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cf62:	8a5b      	ldrh	r3, [r3, #18]
 801cf64:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801cf68:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801cf6a:	88fa      	ldrh	r2, [r7, #6]
 801cf6c:	8afb      	ldrh	r3, [r7, #22]
 801cf6e:	429a      	cmp	r2, r3
 801cf70:	d33a      	bcc.n	801cfe8 <TRACE_AllocateBufer+0xb4>
 801cf72:	4b2e      	ldr	r3, [pc, #184]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cf74:	8a1b      	ldrh	r3, [r3, #16]
 801cf76:	88fa      	ldrh	r2, [r7, #6]
 801cf78:	429a      	cmp	r2, r3
 801cf7a:	d235      	bcs.n	801cfe8 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cf7c:	4b2b      	ldr	r3, [pc, #172]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cf7e:	2201      	movs	r2, #1
 801cf80:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cf82:	4b2a      	ldr	r3, [pc, #168]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cf84:	8a5a      	ldrh	r2, [r3, #18]
 801cf86:	4b29      	ldr	r3, [pc, #164]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cf88:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cf8a:	4b28      	ldr	r3, [pc, #160]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cf8c:	8a1b      	ldrh	r3, [r3, #16]
 801cf8e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cf90:	4b26      	ldr	r3, [pc, #152]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cf92:	2200      	movs	r2, #0
 801cf94:	825a      	strh	r2, [r3, #18]
 801cf96:	e027      	b.n	801cfe8 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cf98:	4b24      	ldr	r3, [pc, #144]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cf9a:	8a5a      	ldrh	r2, [r3, #18]
 801cf9c:	4b23      	ldr	r3, [pc, #140]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cf9e:	8a1b      	ldrh	r3, [r3, #16]
 801cfa0:	429a      	cmp	r2, r3
 801cfa2:	d91b      	bls.n	801cfdc <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cfa4:	4b21      	ldr	r3, [pc, #132]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cfa6:	8a5b      	ldrh	r3, [r3, #18]
 801cfa8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801cfac:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801cfae:	88fa      	ldrh	r2, [r7, #6]
 801cfb0:	8afb      	ldrh	r3, [r7, #22]
 801cfb2:	429a      	cmp	r2, r3
 801cfb4:	d318      	bcc.n	801cfe8 <TRACE_AllocateBufer+0xb4>
 801cfb6:	4b1d      	ldr	r3, [pc, #116]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cfb8:	8a1b      	ldrh	r3, [r3, #16]
 801cfba:	88fa      	ldrh	r2, [r7, #6]
 801cfbc:	429a      	cmp	r2, r3
 801cfbe:	d213      	bcs.n	801cfe8 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cfc0:	4b1a      	ldr	r3, [pc, #104]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cfc2:	2201      	movs	r2, #1
 801cfc4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cfc6:	4b19      	ldr	r3, [pc, #100]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cfc8:	8a5a      	ldrh	r2, [r3, #18]
 801cfca:	4b18      	ldr	r3, [pc, #96]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cfcc:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cfce:	4b17      	ldr	r3, [pc, #92]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cfd0:	8a1b      	ldrh	r3, [r3, #16]
 801cfd2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cfd4:	4b15      	ldr	r3, [pc, #84]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cfd6:	2200      	movs	r2, #0
 801cfd8:	825a      	strh	r2, [r3, #18]
 801cfda:	e005      	b.n	801cfe8 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801cfdc:	4b13      	ldr	r3, [pc, #76]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cfde:	8a1a      	ldrh	r2, [r3, #16]
 801cfe0:	4b12      	ldr	r3, [pc, #72]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cfe2:	8a5b      	ldrh	r3, [r3, #18]
 801cfe4:	1ad3      	subs	r3, r2, r3
 801cfe6:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801cfe8:	8afa      	ldrh	r2, [r7, #22]
 801cfea:	88fb      	ldrh	r3, [r7, #6]
 801cfec:	429a      	cmp	r2, r3
 801cfee:	d90f      	bls.n	801d010 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801cff0:	4b0e      	ldr	r3, [pc, #56]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cff2:	8a5a      	ldrh	r2, [r3, #18]
 801cff4:	683b      	ldr	r3, [r7, #0]
 801cff6:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cff8:	4b0c      	ldr	r3, [pc, #48]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801cffa:	8a5a      	ldrh	r2, [r3, #18]
 801cffc:	88fb      	ldrh	r3, [r7, #6]
 801cffe:	4413      	add	r3, r2
 801d000:	b29b      	uxth	r3, r3
 801d002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d006:	b29a      	uxth	r2, r3
 801d008:	4b08      	ldr	r3, [pc, #32]	@ (801d02c <TRACE_AllocateBufer+0xf8>)
 801d00a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801d00c:	2300      	movs	r3, #0
 801d00e:	82bb      	strh	r3, [r7, #20]
 801d010:	693b      	ldr	r3, [r7, #16]
 801d012:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d014:	68bb      	ldr	r3, [r7, #8]
 801d016:	f383 8810 	msr	PRIMASK, r3
}
 801d01a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801d01c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801d020:	4618      	mov	r0, r3
 801d022:	371c      	adds	r7, #28
 801d024:	46bd      	mov	sp, r7
 801d026:	bc80      	pop	{r7}
 801d028:	4770      	bx	lr
 801d02a:	bf00      	nop
 801d02c:	20001dfc 	.word	0x20001dfc

0801d030 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801d030:	b480      	push	{r7}
 801d032:	b085      	sub	sp, #20
 801d034:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d036:	f3ef 8310 	mrs	r3, PRIMASK
 801d03a:	607b      	str	r3, [r7, #4]
  return(result);
 801d03c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d03e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d040:	b672      	cpsid	i
}
 801d042:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801d044:	4b08      	ldr	r3, [pc, #32]	@ (801d068 <TRACE_Lock+0x38>)
 801d046:	8adb      	ldrh	r3, [r3, #22]
 801d048:	3301      	adds	r3, #1
 801d04a:	b29a      	uxth	r2, r3
 801d04c:	4b06      	ldr	r3, [pc, #24]	@ (801d068 <TRACE_Lock+0x38>)
 801d04e:	82da      	strh	r2, [r3, #22]
 801d050:	68fb      	ldr	r3, [r7, #12]
 801d052:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d054:	68bb      	ldr	r3, [r7, #8]
 801d056:	f383 8810 	msr	PRIMASK, r3
}
 801d05a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d05c:	bf00      	nop
 801d05e:	3714      	adds	r7, #20
 801d060:	46bd      	mov	sp, r7
 801d062:	bc80      	pop	{r7}
 801d064:	4770      	bx	lr
 801d066:	bf00      	nop
 801d068:	20001dfc 	.word	0x20001dfc

0801d06c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801d06c:	b480      	push	{r7}
 801d06e:	b085      	sub	sp, #20
 801d070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d072:	f3ef 8310 	mrs	r3, PRIMASK
 801d076:	607b      	str	r3, [r7, #4]
  return(result);
 801d078:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d07a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d07c:	b672      	cpsid	i
}
 801d07e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801d080:	4b08      	ldr	r3, [pc, #32]	@ (801d0a4 <TRACE_UnLock+0x38>)
 801d082:	8adb      	ldrh	r3, [r3, #22]
 801d084:	3b01      	subs	r3, #1
 801d086:	b29a      	uxth	r2, r3
 801d088:	4b06      	ldr	r3, [pc, #24]	@ (801d0a4 <TRACE_UnLock+0x38>)
 801d08a:	82da      	strh	r2, [r3, #22]
 801d08c:	68fb      	ldr	r3, [r7, #12]
 801d08e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d090:	68bb      	ldr	r3, [r7, #8]
 801d092:	f383 8810 	msr	PRIMASK, r3
}
 801d096:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d098:	bf00      	nop
 801d09a:	3714      	adds	r7, #20
 801d09c:	46bd      	mov	sp, r7
 801d09e:	bc80      	pop	{r7}
 801d0a0:	4770      	bx	lr
 801d0a2:	bf00      	nop
 801d0a4:	20001dfc 	.word	0x20001dfc

0801d0a8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801d0a8:	b480      	push	{r7}
 801d0aa:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801d0ac:	4b05      	ldr	r3, [pc, #20]	@ (801d0c4 <TRACE_IsLocked+0x1c>)
 801d0ae:	8adb      	ldrh	r3, [r3, #22]
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	bf14      	ite	ne
 801d0b4:	2301      	movne	r3, #1
 801d0b6:	2300      	moveq	r3, #0
 801d0b8:	b2db      	uxtb	r3, r3
}
 801d0ba:	4618      	mov	r0, r3
 801d0bc:	46bd      	mov	sp, r7
 801d0be:	bc80      	pop	{r7}
 801d0c0:	4770      	bx	lr
 801d0c2:	bf00      	nop
 801d0c4:	20001dfc 	.word	0x20001dfc

0801d0c8 <memset>:
 801d0c8:	4402      	add	r2, r0
 801d0ca:	4603      	mov	r3, r0
 801d0cc:	4293      	cmp	r3, r2
 801d0ce:	d100      	bne.n	801d0d2 <memset+0xa>
 801d0d0:	4770      	bx	lr
 801d0d2:	f803 1b01 	strb.w	r1, [r3], #1
 801d0d6:	e7f9      	b.n	801d0cc <memset+0x4>

0801d0d8 <__libc_init_array>:
 801d0d8:	b570      	push	{r4, r5, r6, lr}
 801d0da:	4d0d      	ldr	r5, [pc, #52]	@ (801d110 <__libc_init_array+0x38>)
 801d0dc:	4c0d      	ldr	r4, [pc, #52]	@ (801d114 <__libc_init_array+0x3c>)
 801d0de:	1b64      	subs	r4, r4, r5
 801d0e0:	10a4      	asrs	r4, r4, #2
 801d0e2:	2600      	movs	r6, #0
 801d0e4:	42a6      	cmp	r6, r4
 801d0e6:	d109      	bne.n	801d0fc <__libc_init_array+0x24>
 801d0e8:	4d0b      	ldr	r5, [pc, #44]	@ (801d118 <__libc_init_array+0x40>)
 801d0ea:	4c0c      	ldr	r4, [pc, #48]	@ (801d11c <__libc_init_array+0x44>)
 801d0ec:	f000 f898 	bl	801d220 <_init>
 801d0f0:	1b64      	subs	r4, r4, r5
 801d0f2:	10a4      	asrs	r4, r4, #2
 801d0f4:	2600      	movs	r6, #0
 801d0f6:	42a6      	cmp	r6, r4
 801d0f8:	d105      	bne.n	801d106 <__libc_init_array+0x2e>
 801d0fa:	bd70      	pop	{r4, r5, r6, pc}
 801d0fc:	f855 3b04 	ldr.w	r3, [r5], #4
 801d100:	4798      	blx	r3
 801d102:	3601      	adds	r6, #1
 801d104:	e7ee      	b.n	801d0e4 <__libc_init_array+0xc>
 801d106:	f855 3b04 	ldr.w	r3, [r5], #4
 801d10a:	4798      	blx	r3
 801d10c:	3601      	adds	r6, #1
 801d10e:	e7f2      	b.n	801d0f6 <__libc_init_array+0x1e>
 801d110:	0801e274 	.word	0x0801e274
 801d114:	0801e274 	.word	0x0801e274
 801d118:	0801e274 	.word	0x0801e274
 801d11c:	0801e278 	.word	0x0801e278

0801d120 <floor>:
 801d120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d124:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801d128:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801d12c:	2e13      	cmp	r6, #19
 801d12e:	4602      	mov	r2, r0
 801d130:	460b      	mov	r3, r1
 801d132:	460c      	mov	r4, r1
 801d134:	4605      	mov	r5, r0
 801d136:	4680      	mov	r8, r0
 801d138:	dc35      	bgt.n	801d1a6 <floor+0x86>
 801d13a:	2e00      	cmp	r6, #0
 801d13c:	da17      	bge.n	801d16e <floor+0x4e>
 801d13e:	a334      	add	r3, pc, #208	@ (adr r3, 801d210 <floor+0xf0>)
 801d140:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d144:	f7e3 f826 	bl	8000194 <__adddf3>
 801d148:	2200      	movs	r2, #0
 801d14a:	2300      	movs	r3, #0
 801d14c:	f7e3 fa56 	bl	80005fc <__aeabi_dcmpgt>
 801d150:	b150      	cbz	r0, 801d168 <floor+0x48>
 801d152:	2c00      	cmp	r4, #0
 801d154:	da57      	bge.n	801d206 <floor+0xe6>
 801d156:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801d15a:	432c      	orrs	r4, r5
 801d15c:	2500      	movs	r5, #0
 801d15e:	42ac      	cmp	r4, r5
 801d160:	4c2d      	ldr	r4, [pc, #180]	@ (801d218 <floor+0xf8>)
 801d162:	bf08      	it	eq
 801d164:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801d168:	4623      	mov	r3, r4
 801d16a:	462a      	mov	r2, r5
 801d16c:	e024      	b.n	801d1b8 <floor+0x98>
 801d16e:	4f2b      	ldr	r7, [pc, #172]	@ (801d21c <floor+0xfc>)
 801d170:	4137      	asrs	r7, r6
 801d172:	ea01 0c07 	and.w	ip, r1, r7
 801d176:	ea5c 0c00 	orrs.w	ip, ip, r0
 801d17a:	d01d      	beq.n	801d1b8 <floor+0x98>
 801d17c:	a324      	add	r3, pc, #144	@ (adr r3, 801d210 <floor+0xf0>)
 801d17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d182:	f7e3 f807 	bl	8000194 <__adddf3>
 801d186:	2200      	movs	r2, #0
 801d188:	2300      	movs	r3, #0
 801d18a:	f7e3 fa37 	bl	80005fc <__aeabi_dcmpgt>
 801d18e:	2800      	cmp	r0, #0
 801d190:	d0ea      	beq.n	801d168 <floor+0x48>
 801d192:	2c00      	cmp	r4, #0
 801d194:	bfbe      	ittt	lt
 801d196:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801d19a:	4133      	asrlt	r3, r6
 801d19c:	18e4      	addlt	r4, r4, r3
 801d19e:	ea24 0407 	bic.w	r4, r4, r7
 801d1a2:	2500      	movs	r5, #0
 801d1a4:	e7e0      	b.n	801d168 <floor+0x48>
 801d1a6:	2e33      	cmp	r6, #51	@ 0x33
 801d1a8:	dd0a      	ble.n	801d1c0 <floor+0xa0>
 801d1aa:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d1ae:	d103      	bne.n	801d1b8 <floor+0x98>
 801d1b0:	f7e2 fff0 	bl	8000194 <__adddf3>
 801d1b4:	4602      	mov	r2, r0
 801d1b6:	460b      	mov	r3, r1
 801d1b8:	4610      	mov	r0, r2
 801d1ba:	4619      	mov	r1, r3
 801d1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1c0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801d1c4:	f04f 3cff 	mov.w	ip, #4294967295
 801d1c8:	fa2c f707 	lsr.w	r7, ip, r7
 801d1cc:	4207      	tst	r7, r0
 801d1ce:	d0f3      	beq.n	801d1b8 <floor+0x98>
 801d1d0:	a30f      	add	r3, pc, #60	@ (adr r3, 801d210 <floor+0xf0>)
 801d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1d6:	f7e2 ffdd 	bl	8000194 <__adddf3>
 801d1da:	2200      	movs	r2, #0
 801d1dc:	2300      	movs	r3, #0
 801d1de:	f7e3 fa0d 	bl	80005fc <__aeabi_dcmpgt>
 801d1e2:	2800      	cmp	r0, #0
 801d1e4:	d0c0      	beq.n	801d168 <floor+0x48>
 801d1e6:	2c00      	cmp	r4, #0
 801d1e8:	da0a      	bge.n	801d200 <floor+0xe0>
 801d1ea:	2e14      	cmp	r6, #20
 801d1ec:	d101      	bne.n	801d1f2 <floor+0xd2>
 801d1ee:	3401      	adds	r4, #1
 801d1f0:	e006      	b.n	801d200 <floor+0xe0>
 801d1f2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801d1f6:	2301      	movs	r3, #1
 801d1f8:	40b3      	lsls	r3, r6
 801d1fa:	441d      	add	r5, r3
 801d1fc:	4545      	cmp	r5, r8
 801d1fe:	d3f6      	bcc.n	801d1ee <floor+0xce>
 801d200:	ea25 0507 	bic.w	r5, r5, r7
 801d204:	e7b0      	b.n	801d168 <floor+0x48>
 801d206:	2500      	movs	r5, #0
 801d208:	462c      	mov	r4, r5
 801d20a:	e7ad      	b.n	801d168 <floor+0x48>
 801d20c:	f3af 8000 	nop.w
 801d210:	8800759c 	.word	0x8800759c
 801d214:	7e37e43c 	.word	0x7e37e43c
 801d218:	bff00000 	.word	0xbff00000
 801d21c:	000fffff 	.word	0x000fffff

0801d220 <_init>:
 801d220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d222:	bf00      	nop
 801d224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d226:	bc08      	pop	{r3}
 801d228:	469e      	mov	lr, r3
 801d22a:	4770      	bx	lr

0801d22c <_fini>:
 801d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d22e:	bf00      	nop
 801d230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d232:	bc08      	pop	{r3}
 801d234:	469e      	mov	lr, r3
 801d236:	4770      	bx	lr

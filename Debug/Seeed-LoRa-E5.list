
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c5f8  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f2c  0801c730  0801c730  0001d730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801d65c  0801d65c  0001e65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801d734  0801d734  0001f148  2**0
                  CONTENTS
  5 .ARM          00000008  0801d734  0801d734  0001e734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801d73c  0801d73c  0001f148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801d73c  0801d73c  0001e73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801d740  0801d740  0001e740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  20000000  0801d744  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002208  20000148  0801d88c  0001f148  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002350  0801d88c  0001f350  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001f148  2**0
                  CONTENTS, READONLY
 13 .debug_info   000430fe  00000000  00000000  0001f172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a781  00000000  00000000  00062270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000035e0  00000000  00000000  0006c9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000293c  00000000  00000000  0006ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029665  00000000  00000000  00072914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043b21  00000000  00000000  0009bf79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cea7c  00000000  00000000  000dfa9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ae516  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000de7c  00000000  00000000  001ae55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001bc3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000148 	.word	0x20000148
 8000154:	00000000 	.word	0x00000000
 8000158:	0801c718 	.word	0x0801c718

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000014c 	.word	0x2000014c
 8000174:	0801c718 	.word	0x0801c718

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008ce:	2afd      	cmp	r2, #253	@ 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	@ 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	@ 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	@ 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f28:	68fb      	ldr	r3, [r7, #12]
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f5e:	4a24      	ldr	r2, [pc, #144]	@ (8000ff0 <MX_ADC_Init+0x98>)
 8000f60:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f62:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000f68:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6a:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f70:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MX_ADC_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <MX_ADC_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <MX_ADC_Init+0x94>)
 8000fda:	f002 fa19 	bl	8003410 <HAL_ADC_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000fe4:	f000 fe30 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000164 	.word	0x20000164
 8000ff0:	40012400 	.word	0x40012400

08000ff4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <HAL_ADC_MspInit+0x54>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d113      	bne.n	800103e <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001016:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800101a:	f7ff ff73 	bl	8000f04 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2002      	movs	r0, #2
 8001020:	f7ff ff58 	bl	8000ed4 <LL_AHB2_GRP1_EnableClock>
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_OUT_CUR_Pin|ADC_IN_VOLT_Pin|ADC_OUT_VOLT_Pin|ADC_TEMP_Pin;
 8001024:	f246 0318 	movw	r3, #24600	@ 0x6018
 8001028:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4619      	mov	r1, r3
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <HAL_ADC_MspInit+0x58>)
 800103a:	f003 ffe9 	bl	8005010 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800103e:	bf00      	nop
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40012400 	.word	0x40012400
 800104c:	48000400 	.word	0x48000400

08001050 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_ADC_MspDeInit+0x2c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d108      	bne.n	8001074 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001062:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001066:	f7ff ff65 	bl	8000f34 <LL_APB2_GRP1_DisableClock>
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, ADC_OUT_CUR_Pin|ADC_IN_VOLT_Pin|ADC_OUT_VOLT_Pin|ADC_TEMP_Pin);
 800106a:	f246 0118 	movw	r1, #24600	@ 0x6018
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <HAL_ADC_MspDeInit+0x30>)
 8001070:	f004 f92e 	bl	80052d0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40012400 	.word	0x40012400
 8001080:	48000400 	.word	0x48000400

08001084 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <SYS_InitMeasurement+0x14>)
 800108a:	4a04      	ldr	r2, [pc, #16]	@ (800109c <SYS_InitMeasurement+0x18>)
 800108c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000164 	.word	0x20000164
 800109c:	40012400 	.word	0x40012400

080010a0 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80010ae:	f000 f869 	bl	8001184 <SYS_GetBatteryLevel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80010b6:	482d      	ldr	r0, [pc, #180]	@ (800116c <SYS_GetTemperatureLevel+0xcc>)
 80010b8:	f000 f926 	bl	8001308 <ADC_ReadChannels>
 80010bc:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80010be:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <SYS_GetTemperatureLevel+0xd0>)
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d026      	beq.n	8001118 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80010ca:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <SYS_GetTemperatureLevel+0xd0>)
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d01c      	beq.n	8001110 <SYS_GetTemperatureLevel+0x70>
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	4a25      	ldr	r2, [pc, #148]	@ (8001178 <SYS_GetTemperatureLevel+0xd8>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b22      	ldr	r3, [pc, #136]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2264      	movs	r2, #100	@ 0x64
 80010f2:	fb03 f202 	mul.w	r2, r3, r2
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <SYS_GetTemperatureLevel+0xd0>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <SYS_GetTemperatureLevel+0xd4>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	1acb      	subs	r3, r1, r3
 8001102:	fb92 f3f3 	sdiv	r3, r2, r3
 8001106:	b29b      	uxth	r3, r3
 8001108:	331e      	adds	r3, #30
 800110a:	b29b      	uxth	r3, r3
 800110c:	b21b      	sxth	r3, r3
 800110e:	e001      	b.n	8001114 <SYS_GetTemperatureLevel+0x74>
 8001110:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001114:	803b      	strh	r3, [r7, #0]
 8001116:	e01d      	b.n	8001154 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	fb03 f202 	mul.w	r2, r3, r2
 8001120:	4b16      	ldr	r3, [pc, #88]	@ (800117c <SYS_GetTemperatureLevel+0xdc>)
 8001122:	fba3 1302 	umull	r1, r3, r3, r2
 8001126:	1ad2      	subs	r2, r2, r3
 8001128:	0852      	lsrs	r2, r2, #1
 800112a:	4413      	add	r3, r2
 800112c:	0adb      	lsrs	r3, r3, #11
 800112e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 800113a:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 800113e:	4a10      	ldr	r2, [pc, #64]	@ (8001180 <SYS_GetTemperatureLevel+0xe0>)
 8001140:	fb82 1203 	smull	r1, r2, r2, r3
 8001144:	1292      	asrs	r2, r2, #10
 8001146:	17db      	asrs	r3, r3, #31
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	b29b      	uxth	r3, r3
 800114c:	331e      	adds	r3, #30
 800114e:	b29b      	uxth	r3, r3
 8001150:	b21b      	sxth	r3, r3
 8001152:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001154:	883b      	ldrh	r3, [r7, #0]
 8001156:	b21b      	sxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21b      	sxth	r3, r3
 800115c:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 800115e:	883b      	ldrh	r3, [r7, #0]
 8001160:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	b0001000 	.word	0xb0001000
 8001170:	1fff75c8 	.word	0x1fff75c8
 8001174:	1fff75a8 	.word	0x1fff75a8
 8001178:	09ee009f 	.word	0x09ee009f
 800117c:	00100101 	.word	0x00100101
 8001180:	68db8bad 	.word	0x68db8bad

08001184 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001192:	4813      	ldr	r0, [pc, #76]	@ (80011e0 <SYS_GetBatteryLevel+0x5c>)
 8001194:	f000 f8b8 	bl	8001308 <ADC_ReadChannels>
 8001198:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	e016      	b.n	80011d4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <SYS_GetBatteryLevel+0x60>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00b      	beq.n	80011ca <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <SYS_GetBatteryLevel+0x60>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80011bc:	fb03 f202 	mul.w	r2, r3, r2
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	80fb      	strh	r3, [r7, #6]
 80011c8:	e004      	b.n	80011d4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80011ca:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <SYS_GetBatteryLevel+0x64>)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80011d4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	b4002000 	.word	0xb4002000
 80011e4:	1fff75aa 	.word	0x1fff75aa
 80011e8:	004c08d8 	.word	0x004c08d8

080011ec <SYS_GetADC0>:

/* Private Functions Definition -----------------------------------------------*/
/* USER CODE BEGIN PrFD */
uint16_t SYS_GetADC0(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_0);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 f884 	bl	8001308 <ADC_ReadChannels>
 8001200:	4603      	mov	r3, r0
 8001202:	80fb      	strh	r3, [r7, #6]
	outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	461a      	mov	r2, r3
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <SYS_GetADC0+0x40>)
 8001212:	fba3 1302 	umull	r1, r3, r3, r2
 8001216:	1ad2      	subs	r2, r2, r3
 8001218:	0852      	lsrs	r2, r2, #1
 800121a:	4413      	add	r3, r2
 800121c:	0adb      	lsrs	r3, r3, #11
 800121e:	603b      	str	r3, [r7, #0]
	return outvoltage;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b29b      	uxth	r3, r3
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	00100101 	.word	0x00100101

08001230 <SYS_GetADC1>:

uint16_t SYS_GetADC1(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_1);
 800123e:	480c      	ldr	r0, [pc, #48]	@ (8001270 <SYS_GetADC1+0x40>)
 8001240:	f000 f862 	bl	8001308 <ADC_ReadChannels>
 8001244:	4603      	mov	r3, r0
 8001246:	80fb      	strh	r3, [r7, #6]
	outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	461a      	mov	r2, r3
 8001254:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <SYS_GetADC1+0x44>)
 8001256:	fba3 1302 	umull	r1, r3, r3, r2
 800125a:	1ad2      	subs	r2, r2, r3
 800125c:	0852      	lsrs	r2, r2, #1
 800125e:	4413      	add	r3, r2
 8001260:	0adb      	lsrs	r3, r3, #11
 8001262:	603b      	str	r3, [r7, #0]
	return outvoltage;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b29b      	uxth	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	04000002 	.word	0x04000002
 8001274:	00100101 	.word	0x00100101

08001278 <SYS_GetADC2>:

uint16_t SYS_GetADC2(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_2);
 8001286:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <SYS_GetADC2+0x40>)
 8001288:	f000 f83e 	bl	8001308 <ADC_ReadChannels>
 800128c:	4603      	mov	r3, r0
 800128e:	80fb      	strh	r3, [r7, #6]
	outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	461a      	mov	r2, r3
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <SYS_GetADC2+0x44>)
 800129e:	fba3 1302 	umull	r1, r3, r3, r2
 80012a2:	1ad2      	subs	r2, r2, r3
 80012a4:	0852      	lsrs	r2, r2, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	0adb      	lsrs	r3, r3, #11
 80012aa:	603b      	str	r3, [r7, #0]
	return outvoltage;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b29b      	uxth	r3, r3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	08000004 	.word	0x08000004
 80012bc:	00100101 	.word	0x00100101

080012c0 <SYS_GetADC3>:

uint16_t SYS_GetADC3(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_3);
 80012ce:	480c      	ldr	r0, [pc, #48]	@ (8001300 <SYS_GetADC3+0x40>)
 80012d0:	f000 f81a 	bl	8001308 <ADC_ReadChannels>
 80012d4:	4603      	mov	r3, r0
 80012d6:	80fb      	strh	r3, [r7, #6]
	outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <SYS_GetADC3+0x44>)
 80012e6:	fba3 1302 	umull	r1, r3, r3, r2
 80012ea:	1ad2      	subs	r2, r2, r3
 80012ec:	0852      	lsrs	r2, r2, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	0adb      	lsrs	r3, r3, #11
 80012f2:	603b      	str	r3, [r7, #0]
	return outvoltage;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b29b      	uxth	r3, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0c000008 	.word	0x0c000008
 8001304:	00100101 	.word	0x00100101

08001308 <ADC_ReadChannels>:
/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001320:	f7ff fe1a 	bl	8000f58 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001324:	481a      	ldr	r0, [pc, #104]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001326:	f002 fe92 	bl	800404e <HAL_ADCEx_Calibration_Start>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001330:	f000 fc8a 	bl	8001c48 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	4619      	mov	r1, r3
 8001346:	4812      	ldr	r0, [pc, #72]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001348:	f002 fb9e 	bl	8003a88 <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001352:	f000 fc79 	bl	8001c48 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001356:	480e      	ldr	r0, [pc, #56]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001358:	f002 fa7a 	bl	8003850 <HAL_ADC_Start>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001362:	f000 fc71 	bl	8001c48 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001366:	f04f 31ff 	mov.w	r1, #4294967295
 800136a:	4809      	ldr	r0, [pc, #36]	@ (8001390 <ADC_ReadChannels+0x88>)
 800136c:	f002 fae8 	bl	8003940 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001370:	4807      	ldr	r0, [pc, #28]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001372:	f002 fab3 	bl	80038dc <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001376:	4806      	ldr	r0, [pc, #24]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001378:	f002 fb79 	bl	8003a6e <HAL_ADC_GetValue>
 800137c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800137e:	4804      	ldr	r0, [pc, #16]	@ (8001390 <ADC_ReadChannels+0x88>)
 8001380:	f002 f9da 	bl	8003738 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001384:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000164 	.word	0x20000164

08001394 <LL_AHB1_GRP1_EnableClock>:
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800139c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80013a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b8:	68fb      	ldr	r3, [r7, #12]
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013c8:	2004      	movs	r0, #4
 80013ca:	f7ff ffe3 	bl	8001394 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff ffe0 	bl	8001394 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2102      	movs	r1, #2
 80013d8:	200b      	movs	r0, #11
 80013da:	f002 ffde 	bl	800439a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013de:	200b      	movs	r0, #11
 80013e0:	f002 fff5 	bl	80043ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	200c      	movs	r0, #12
 80013ea:	f002 ffd6 	bl	800439a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013ee:	200c      	movs	r0, #12
 80013f0:	f002 ffed 	bl	80043ce <HAL_NVIC_EnableIRQ>

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001404:	23ff      	movs	r3, #255	@ 0xff
 8001406:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800140e:	d311      	bcc.n	8001434 <FLASH_IF_Write+0x3c>
 8001410:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <FLASH_IF_Write+0x48>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	029a      	lsls	r2, r3, #10
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <FLASH_IF_Write+0x4c>)
 8001418:	4013      	ands	r3, r2
 800141a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800141e:	3b01      	subs	r3, #1
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4293      	cmp	r3, r2
 8001424:	d306      	bcc.n	8001434 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f85a 	bl	80014e4 <FLASH_IF_INT_Write>
 8001430:	4603      	mov	r3, r0
 8001432:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	1fff75e0 	.word	0x1fff75e0
 8001444:	03fffc00 	.word	0x03fffc00

08001448 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001454:	23ff      	movs	r3, #255	@ 0xff
 8001456:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800145e:	d311      	bcc.n	8001484 <FLASH_IF_Read+0x3c>
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <FLASH_IF_Read+0x48>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	029a      	lsls	r2, r3, #10
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <FLASH_IF_Read+0x4c>)
 8001468:	4013      	ands	r3, r2
 800146a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800146e:	3b01      	subs	r3, #1
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	4293      	cmp	r3, r2
 8001474:	d306      	bcc.n	8001484 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f93a 	bl	80016f4 <FLASH_IF_INT_Read>
 8001480:	4603      	mov	r3, r0
 8001482:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001484:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	1fff75e0 	.word	0x1fff75e0
 8001494:	03fffc00 	.word	0x03fffc00

08001498 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014a2:	23ff      	movs	r3, #255	@ 0xff
 80014a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80014ac:	d310      	bcc.n	80014d0 <FLASH_IF_Erase+0x38>
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <FLASH_IF_Erase+0x44>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	029a      	lsls	r2, r3, #10
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <FLASH_IF_Erase+0x48>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80014bc:	3b01      	subs	r3, #1
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d305      	bcc.n	80014d0 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80014c4:	6839      	ldr	r1, [r7, #0]
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f932 	bl	8001730 <FLASH_IF_INT_Erase>
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80014d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	1fff75e0 	.word	0x1fff75e0
 80014e0:	03fffc00 	.word	0x03fffc00

080014e4 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b090      	sub	sp, #64	@ 0x40
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00c      	beq.n	8001522 <FLASH_IF_INT_Write+0x3e>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d009      	beq.n	8001522 <FLASH_IF_INT_Write+0x3e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	2b00      	cmp	r3, #0
 8001516:	d104      	bne.n	8001522 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001522:	f06f 0305 	mvn.w	r3, #5
 8001526:	e0da      	b.n	80016de <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001528:	f000 f992 	bl	8001850 <FLASH_IF_INT_Clear_Error>
 800152c:	4603      	mov	r3, r0
 800152e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 8001532:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001536:	2b00      	cmp	r3, #0
 8001538:	f040 80cf 	bne.w	80016da <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800153c:	f003 fb92 	bl	8004c64 <HAL_FLASH_Unlock>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 80c6 	bne.w	80016d4 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800154a:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 800154e:	4b66      	ldr	r3, [pc, #408]	@ (80016e8 <FLASH_IF_INT_Write+0x204>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	0299      	lsls	r1, r3, #10
 8001554:	4b65      	ldr	r3, [pc, #404]	@ (80016ec <FLASH_IF_INT_Write+0x208>)
 8001556:	400b      	ands	r3, r1
 8001558:	fbb2 f1f3 	udiv	r1, r2, r3
 800155c:	fb01 f303 	mul.w	r3, r1, r3
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	0adb      	lsrs	r3, r3, #11
 8001564:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001566:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001570:	3b01      	subs	r3, #1
 8001572:	4a5d      	ldr	r2, [pc, #372]	@ (80016e8 <FLASH_IF_INT_Write+0x204>)
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	0291      	lsls	r1, r2, #10
 8001578:	4a5c      	ldr	r2, [pc, #368]	@ (80016ec <FLASH_IF_INT_Write+0x208>)
 800157a:	400a      	ands	r2, r1
 800157c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001580:	fb01 f202 	mul.w	r2, r1, r2
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	0ada      	lsrs	r2, r3, #11
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d905      	bls.n	80015a2 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800159c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015a0:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015a6:	e089      	b.n	80016bc <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80015a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015aa:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80015ae:	02db      	lsls	r3, r3, #11
 80015b0:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80015b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 f925 	bl	8001804 <FLASH_IF_INT_IsEmpty>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d031      	beq.n	8001624 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80015c0:	4b4b      	ldr	r3, [pc, #300]	@ (80016f0 <FLASH_IF_INT_Write+0x20c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d103      	bne.n	80015d0 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80015c8:	23fa      	movs	r3, #250	@ 0xfa
 80015ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 80015ce:	e07e      	b.n	80016ce <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80015d0:	4b47      	ldr	r3, [pc, #284]	@ (80016f0 <FLASH_IF_INT_Write+0x20c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6939      	ldr	r1, [r7, #16]
 80015d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f88a 	bl	80016f4 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80015e0:	4b43      	ldr	r3, [pc, #268]	@ (80016f0 <FLASH_IF_INT_Write+0x20c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ea:	4413      	add	r3, r2
 80015ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80015ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015f0:	b292      	uxth	r2, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f019 fd86 	bl	801b104 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f896 	bl	8001730 <FLASH_IF_INT_Erase>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800160a:	23fe      	movs	r3, #254	@ 0xfe
 800160c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001610:	e05d      	b.n	80016ce <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001616:	4b36      	ldr	r3, [pc, #216]	@ (80016f0 <FLASH_IF_INT_Write+0x20c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 800161c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	e005      	b.n	8001630 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 8001628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800162a:	623b      	str	r3, [r7, #32]
          current_length = length;
 800162c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800162e:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001634:	e026      	b.n	8001684 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001636:	6a3a      	ldr	r2, [r7, #32]
 8001638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800163a:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001642:	2001      	movs	r0, #1
 8001644:	f003 faca 	bl	8004bdc <HAL_FLASH_Program>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d113      	bne.n	8001676 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001654:	6a3a      	ldr	r2, [r7, #32]
 8001656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001658:	4413      	add	r3, r2
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	4299      	cmp	r1, r3
 8001660:	bf08      	it	eq
 8001662:	4290      	cmpeq	r0, r2
 8001664:	d003      	beq.n	800166e <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001666:	23fc      	movs	r3, #252	@ 0xfc
 8001668:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 800166c:	e00e      	b.n	800168c <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	3308      	adds	r3, #8
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
 8001674:	e003      	b.n	800167e <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001676:	23fc      	movs	r3, #252	@ 0xfc
 8001678:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 800167c:	e006      	b.n	800168c <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800167e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001680:	3308      	adds	r3, #8
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001684:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3d4      	bcc.n	8001636 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 800168c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001690:	2b00      	cmp	r3, #0
 8001692:	d11b      	bne.n	80016cc <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001694:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001698:	4413      	add	r3, r2
 800169a:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 800169c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800169e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016a0:	4413      	add	r3, r2
 80016a2:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016ae:	bf28      	it	cs
 80016b0:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80016b4:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80016b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b8:	3301      	adds	r3, #1
 80016ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	4413      	add	r3, r2
 80016c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f4ff af6f 	bcc.w	80015a8 <FLASH_IF_INT_Write+0xc4>
 80016ca:	e000      	b.n	80016ce <FLASH_IF_INT_Write+0x1ea>
          break;
 80016cc:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80016ce:	f003 faeb 	bl	8004ca8 <HAL_FLASH_Lock>
 80016d2:	e002      	b.n	80016da <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80016d4:	23fb      	movs	r3, #251	@ 0xfb
 80016d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 80016da:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3740      	adds	r7, #64	@ 0x40
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	1fff75e0 	.word	0x1fff75e0
 80016ec:	03fffc00 	.word	0x03fffc00
 80016f0:	200001c8 	.word	0x200001c8

080016f4 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <FLASH_IF_INT_Read+0x1c>
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001710:	f06f 0305 	mvn.w	r3, #5
 8001714:	e008      	b.n	8001728 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	b29b      	uxth	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f019 fcf0 	bl	801b104 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001724:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001750:	f06f 0305 	mvn.w	r3, #5
 8001754:	e04e      	b.n	80017f4 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001756:	f000 f87b 	bl	8001850 <FLASH_IF_INT_Clear_Error>
 800175a:	4603      	mov	r3, r0
 800175c:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 800175e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d144      	bne.n	80017f0 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001766:	f003 fa7d 	bl	8004c64 <HAL_FLASH_Unlock>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d13d      	bne.n	80017ec <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001770:	2302      	movs	r3, #2
 8001772:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <FLASH_IF_INT_Erase+0xcc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0299      	lsls	r1, r3, #10
 8001780:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <FLASH_IF_INT_Erase+0xd0>)
 8001782:	400b      	ands	r3, r1
 8001784:	fbb2 f1f3 	udiv	r1, r2, r3
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	0adb      	lsrs	r3, r3, #11
 8001790:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4413      	add	r3, r2
 8001798:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800179c:	3b01      	subs	r3, #1
 800179e:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <FLASH_IF_INT_Erase+0xcc>)
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	0291      	lsls	r1, r2, #10
 80017a4:	4a16      	ldr	r2, [pc, #88]	@ (8001800 <FLASH_IF_INT_Erase+0xd0>)
 80017a6:	400a      	ands	r2, r1
 80017a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80017ac:	fb01 f202 	mul.w	r2, r1, r2
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	0ada      	lsrs	r2, r3, #11
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	3301      	adds	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80017bc:	f107 0214 	add.w	r2, r7, #20
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fb4e 	bl	8004e68 <HAL_FLASHEx_Erase>
 80017cc:	4603      	mov	r3, r0
 80017ce:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 80017d0:	7fbb      	ldrb	r3, [r7, #30]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80017d6:	7fbb      	ldrb	r3, [r7, #30]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d101      	bne.n	80017e0 <FLASH_IF_INT_Erase+0xb0>
 80017dc:	2301      	movs	r3, #1
 80017de:	e001      	b.n	80017e4 <FLASH_IF_INT_Erase+0xb4>
 80017e0:	f06f 0301 	mvn.w	r3, #1
 80017e4:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80017e6:	f003 fa5f 	bl	8004ca8 <HAL_FLASH_Lock>
 80017ea:	e001      	b.n	80017f0 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80017ec:	23fb      	movs	r3, #251	@ 0xfb
 80017ee:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 80017f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	1fff75e0 	.word	0x1fff75e0
 8001800:	03fffc00 	.word	0x03fffc00

08001804 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	e011      	b.n	800183c <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001822:	bf08      	it	eq
 8001824:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001828:	d002      	beq.n	8001830 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 800182a:	2301      	movs	r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
      break;
 800182e:	e009      	b.n	8001844 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3308      	adds	r3, #8
 8001834:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3308      	adds	r3, #8
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d3e9      	bcc.n	8001818 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001844:	68fb      	ldr	r3, [r7, #12]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001856:	23fb      	movs	r3, #251	@ 0xfb
 8001858:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800185a:	f003 fa03 	bl	8004c64 <HAL_FLASH_Unlock>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d110      	bne.n	8001886 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <FLASH_IF_INT_Clear_Error+0x44>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <FLASH_IF_INT_Clear_Error+0x44>)
 800186a:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <FLASH_IF_INT_Clear_Error+0x44>)
 8001872:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001876:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001878:	f003 fa16 	bl	8004ca8 <HAL_FLASH_Lock>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	58004000 	.word	0x58004000

08001898 <LL_AHB2_GRP1_EnableClock>:
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018bc:	68fb      	ldr	r3, [r7, #12]
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	2001      	movs	r0, #1
 80018de:	f7ff ffdb 	bl	8001898 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2002      	movs	r0, #2
 80018e4:	f7ff ffd8 	bl	8001898 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e8:	2004      	movs	r0, #4
 80018ea:	f7ff ffd5 	bl	8001898 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|VCC_OUT_EN_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f248 0131 	movw	r1, #32817	@ 0x8031
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f8:	f003 fdb8 	bl	800546c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|TPS_SEL_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 8001902:	4829      	ldr	r0, [pc, #164]	@ (80019a8 <MX_GPIO_Init+0xe0>)
 8001904:	f003 fdb2 	bl	800546c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS485_RE_Pin|RS485_DE_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2103      	movs	r1, #3
 800190c:	4827      	ldr	r0, [pc, #156]	@ (80019ac <MX_GPIO_Init+0xe4>)
 800190e:	f003 fdad 	bl	800546c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin RF_CTRL1_Pin RF_CTRL2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001912:	f248 0330 	movw	r3, #32816	@ 0x8030
 8001916:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192c:	f003 fb70 	bl	8005010 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001930:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	4619      	mov	r1, r3
 8001946:	4818      	ldr	r0, [pc, #96]	@ (80019a8 <MX_GPIO_Init+0xe0>)
 8001948:	f003 fb62 	bl	8005010 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCC_OUT_EN_Pin */
  GPIO_InitStruct.Pin = VCC_OUT_EN_Pin;
 800194c:	2301      	movs	r3, #1
 800194e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VCC_OUT_EN_GPIO_Port, &GPIO_InitStruct);
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001964:	f003 fb54 	bl	8005010 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_RE_Pin RS485_DE_Pin */
  GPIO_InitStruct.Pin = RS485_RE_Pin|RS485_DE_Pin;
 8001968:	2303      	movs	r3, #3
 800196a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	480b      	ldr	r0, [pc, #44]	@ (80019ac <MX_GPIO_Init+0xe4>)
 800197e:	f003 fb47 	bl	8005010 <HAL_GPIO_Init>

  /*Configure GPIO pin : TPS_SEL_Pin */
  GPIO_InitStruct.Pin = TPS_SEL_Pin;
 8001982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001986:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TPS_SEL_GPIO_Port, &GPIO_InitStruct);
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4619      	mov	r1, r3
 8001998:	4803      	ldr	r0, [pc, #12]	@ (80019a8 <MX_GPIO_Init+0xe0>)
 800199a:	f003 fb39 	bl	8005010 <HAL_GPIO_Init>

}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	48000400 	.word	0x48000400
 80019ac:	48000800 	.word	0x48000800

080019b0 <LL_AHB2_GRP1_EnableClock>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019d4:	68fb      	ldr	r3, [r7, #12]
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <LL_APB1_GRP1_EnableClock>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <MX_I2C1_Init+0x74>)
 8001a16:	4a1c      	ldr	r2, [pc, #112]	@ (8001a88 <MX_I2C1_Init+0x78>)
 8001a18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <MX_I2C1_Init+0x74>)
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001a8c <MX_I2C1_Init+0x7c>)
 8001a1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a20:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <MX_I2C1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a26:	4b17      	ldr	r3, [pc, #92]	@ (8001a84 <MX_I2C1_Init+0x74>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <MX_I2C1_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a32:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <MX_I2C1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <MX_I2C1_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <MX_I2C1_Init+0x74>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <MX_I2C1_Init+0x74>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a4a:	480e      	ldr	r0, [pc, #56]	@ (8001a84 <MX_I2C1_Init+0x74>)
 8001a4c:	f003 fd3e 	bl	80054cc <HAL_I2C_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a56:	f000 f8f7 	bl	8001c48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4809      	ldr	r0, [pc, #36]	@ (8001a84 <MX_I2C1_Init+0x74>)
 8001a5e:	f003 fdd0 	bl	8005602 <HAL_I2CEx_ConfigAnalogFilter>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a68:	f000 f8ee 	bl	8001c48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <MX_I2C1_Init+0x74>)
 8001a70:	f003 fe11 	bl	8005696 <HAL_I2CEx_ConfigDigitalFilter>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a7a:	f000 f8e5 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200001cc 	.word	0x200001cc
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	10805d88 	.word	0x10805d88

08001a90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	@ 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2238      	movs	r2, #56	@ 0x38
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f01a fd83 	bl	801c5bc <memset>
  if(i2cHandle->Instance==I2C1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a21      	ldr	r2, [pc, #132]	@ (8001b40 <HAL_I2C_MspInit+0xb0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d13a      	bne.n	8001b36 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ac0:	2340      	movs	r3, #64	@ 0x40
 8001ac2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ac4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001ac8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f005 f89c 	bl	8006c0c <HAL_RCCEx_PeriphCLKConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ada:	f000 f8b5 	bl	8001c48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	2002      	movs	r0, #2
 8001ae0:	f7ff ff66 	bl	80019b0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7ff ff63 	bl	80019b0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = HDC_SDA_Pin;
 8001aea:	2380      	movs	r3, #128	@ 0x80
 8001aec:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aee:	2312      	movs	r3, #18
 8001af0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001afa:	2304      	movs	r3, #4
 8001afc:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(HDC_SDA_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b02:	4619      	mov	r1, r3
 8001b04:	480f      	ldr	r0, [pc, #60]	@ (8001b44 <HAL_I2C_MspInit+0xb4>)
 8001b06:	f003 fa83 	bl	8005010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HDC_SCL_Pin;
 8001b0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b0e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(HDC_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b24:	4619      	mov	r1, r3
 8001b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b2a:	f003 fa71 	bl	8005010 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b2e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001b32:	f7ff ff55 	bl	80019e0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b36:	bf00      	nop
 8001b38:	3758      	adds	r7, #88	@ 0x58
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40005400 	.word	0x40005400
 8001b44:	48000400 	.word	0x48000400

08001b48 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b58:	f023 0218 	bic.w	r2, r3, #24
 8001b5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b76:	f001 fa5d 	bl	8003034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b7a:	f000 f80b 	bl	8001b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b7e:	f7ff fea3 	bl	80018c8 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001b82:	f008 fbed 	bl	800a360 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001b86:	f000 fecf 	bl	8002928 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001b8a:	f7ff ff41 	bl	8001a10 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001b8e:	f008 fbef 	bl	800a370 <MX_LoRaWAN_Process>
 8001b92:	e7fc      	b.n	8001b8e <main+0x1c>

08001b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b09a      	sub	sp, #104	@ 0x68
 8001b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9a:	f107 0320 	add.w	r3, r7, #32
 8001b9e:	2248      	movs	r2, #72	@ 0x48
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f01a fd0a 	bl	801c5bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
 8001bb8:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bba:	f003 fdb7 	bl	800572c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff ffc2 	bl	8001b48 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <SystemClock_Config+0xb0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <SystemClock_Config+0xb0>)
 8001bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <SystemClock_Config+0xb0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001be0:	2324      	movs	r3, #36	@ 0x24
 8001be2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001be4:	2381      	movs	r3, #129	@ 0x81
 8001be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001be8:	2301      	movs	r3, #1
 8001bea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001bec:	2300      	movs	r3, #0
 8001bee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001bf0:	23b0      	movs	r3, #176	@ 0xb0
 8001bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf8:	f107 0320 	add.w	r3, r7, #32
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f004 f8e1 	bl	8005dc4 <HAL_RCC_OscConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001c08:	f000 f81e 	bl	8001c48 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001c0c:	234f      	movs	r3, #79	@ 0x4f
 8001c0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c24:	f107 0308 	add.w	r3, r7, #8
 8001c28:	2102      	movs	r1, #2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f004 fc4c 	bl	80064c8 <HAL_RCC_ClockConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c36:	f000 f807 	bl	8001c48 <Error_Handler>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	3768      	adds	r7, #104	@ 0x68
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	58000400 	.word	0x58000400

08001c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c4c:	b672      	cpsid	i
}
 8001c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <Error_Handler+0x8>

08001c54 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <LL_APB1_GRP1_EnableClock>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c98:	68fb      	ldr	r3, [r7, #12]
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08c      	sub	sp, #48	@ 0x30
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	222c      	movs	r2, #44	@ 0x2c
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f01a fc83 	bl	801c5bc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cb6:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <MX_RTC_Init+0x9c>)
 8001cb8:	4a22      	ldr	r2, [pc, #136]	@ (8001d44 <MX_RTC_Init+0xa0>)
 8001cba:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001cbc:	4b20      	ldr	r3, [pc, #128]	@ (8001d40 <MX_RTC_Init+0x9c>)
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <MX_RTC_Init+0x9c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d40 <MX_RTC_Init+0x9c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <MX_RTC_Init+0x9c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <MX_RTC_Init+0x9c>)
 8001cd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cda:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <MX_RTC_Init+0x9c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001ce2:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <MX_RTC_Init+0x9c>)
 8001ce4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ce8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cea:	4815      	ldr	r0, [pc, #84]	@ (8001d40 <MX_RTC_Init+0x9c>)
 8001cec:	f005 f8a8 	bl	8006e40 <HAL_RTC_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001cf6:	f7ff ffa7 	bl	8001c48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001cfa:	4811      	ldr	r0, [pc, #68]	@ (8001d40 <MX_RTC_Init+0x9c>)
 8001cfc:	f005 fb9e 	bl	800743c <HAL_RTCEx_SetSSRU_IT>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001d06:	f7ff ff9f 	bl	8001c48 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001d16:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d1a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <MX_RTC_Init+0x9c>)
 8001d2a:	f005 f90b 	bl	8006f44 <HAL_RTC_SetAlarm_IT>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001d34:	f7ff ff88 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	3730      	adds	r7, #48	@ 0x30
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000220 	.word	0x20000220
 8001d44:	40002800 	.word	0x40002800

08001d48 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b090      	sub	sp, #64	@ 0x40
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	2238      	movs	r2, #56	@ 0x38
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f01a fc2f 	bl	801c5bc <memset>
  if(rtcHandle->Instance==RTC)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a16      	ldr	r2, [pc, #88]	@ (8001dbc <HAL_RTC_MspInit+0x74>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d125      	bne.n	8001db4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d6c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d72:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 ff47 	bl	8006c0c <HAL_RCCEx_PeriphCLKConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001d84:	f7ff ff60 	bl	8001c48 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d88:	f7ff ff64 	bl	8001c54 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d8c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d90:	f7ff ff70 	bl	8001c74 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f002 fafe 	bl	800439a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001d9e:	2002      	movs	r0, #2
 8001da0:	f002 fb15 	bl	80043ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2100      	movs	r1, #0
 8001da8:	202a      	movs	r0, #42	@ 0x2a
 8001daa:	f002 faf6 	bl	800439a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001dae:	202a      	movs	r0, #42	@ 0x2a
 8001db0:	f002 fb0d 	bl	80043ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001db4:	bf00      	nop
 8001db6:	3740      	adds	r7, #64	@ 0x40
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40002800 	.word	0x40002800

08001dc0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	58000400 	.word	0x58000400

08001dd8 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001df4:	f001 f93e 	bl	8003074 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001df8:	f7ff ffe2 	bl	8001dc0 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f003 fd27 	bl	8005850 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001e0a:	f001 f941 	bl	8003090 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001e0e:	f000 ffc1 	bl	8002d94 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001e1a:	f001 f92b 	bl	8003074 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2000      	movs	r0, #0
 8001e22:	f003 fc91 	bl	8005748 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001e2e:	f001 f92f 	bl	8003090 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e46:	bf00      	nop
 8001e48:	e7fd      	b.n	8001e46 <NMI_Handler+0x4>

08001e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4e:	bf00      	nop
 8001e50:	e7fd      	b.n	8001e4e <HardFault_Handler+0x4>

08001e52 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e56:	bf00      	nop
 8001e58:	e7fd      	b.n	8001e56 <MemManage_Handler+0x4>

08001e5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5e:	bf00      	nop
 8001e60:	e7fd      	b.n	8001e5e <BusFault_Handler+0x4>

08001e62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e66:	bf00      	nop
 8001e68:	e7fd      	b.n	8001e66 <UsageFault_Handler+0x4>

08001e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
	...

08001e9c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001ea2:	f005 fb07 	bl	80074b4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000220 	.word	0x20000220

08001eb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <DMA1_Channel1_IRQHandler+0x10>)
 8001eb6:	f002 fd21 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000394 	.word	0x20000394

08001ec4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <DMA1_Channel2_IRQHandler+0x10>)
 8001eca:	f002 fd17 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200003f4 	.word	0x200003f4

08001ed8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001edc:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <USART1_IRQHandler+0x10>)
 8001ede:	f006 f943 	bl	8008168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000026c 	.word	0x2000026c

08001eec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ef0:	4802      	ldr	r0, [pc, #8]	@ (8001efc <USART2_IRQHandler+0x10>)
 8001ef2:	f006 f939 	bl	8008168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000300 	.word	0x20000300

08001f00 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001f04:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <RTC_Alarm_IRQHandler+0x10>)
 8001f06:	f005 f985 	bl	8007214 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000220 	.word	0x20000220

08001f14 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001f18:	4802      	ldr	r0, [pc, #8]	@ (8001f24 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001f1a:	f005 fe39 	bl	8007b90 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000258 	.word	0x20000258

08001f28 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f34:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f44:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <MX_SUBGHZ_Init+0x20>)
 8001f5e:	2208      	movs	r2, #8
 8001f60:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <MX_SUBGHZ_Init+0x20>)
 8001f64:	f005 fb92 	bl	800768c <HAL_SUBGHZ_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001f6e:	f7ff fe6b 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000258 	.word	0x20000258

08001f7c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7ff ffcf 	bl	8001f28 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2032      	movs	r0, #50	@ 0x32
 8001f90:	f002 fa03 	bl	800439a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001f94:	2032      	movs	r0, #50	@ 0x32
 8001f96:	f002 fa1a 	bl	80043ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001fb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001fcc:	4b02      	ldr	r3, [pc, #8]	@ (8001fd8 <LL_FLASH_GetUDN+0x10>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	1fff7580 	.word	0x1fff7580

08001fdc <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <LL_FLASH_GetDeviceID+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	1fff7584 	.word	0x1fff7584

08001ff4 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <LL_FLASH_GetSTCompanyID+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	1fff7584 	.word	0x1fff7584

0800200c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002010:	2000      	movs	r0, #0
 8002012:	f7ff ffc6 	bl	8001fa2 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002016:	f019 fd9b 	bl	801bb50 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <SystemApp_Init+0x48>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002020:	f000 f988 	bl	8002334 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002024:	f01a f824 	bl	801c070 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002028:	480b      	ldr	r0, [pc, #44]	@ (8002058 <SystemApp_Init+0x4c>)
 800202a:	f01a f8cf 	bl	801c1cc <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800202e:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <SystemApp_Init+0x50>)
 8002030:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002034:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002036:	2002      	movs	r0, #2
 8002038:	f01a f8d6 	bl	801c1e8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800203c:	f7ff f822 	bl	8001084 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002040:	f000 f9b8 	bl	80023b4 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002044:	f018 ffb8 	bl	801afb8 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002048:	2101      	movs	r1, #1
 800204a:	2001      	movs	r0, #1
 800204c:	f018 fff4 	bl	801b038 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000264 	.word	0x20000264
 8002058:	0800222d 	.word	0x0800222d
 800205c:	58004000 	.word	0x58004000

08002060 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002064:	f019 f818 	bl	801b098 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}

0800206c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002076:	f7ff f885 	bl	8001184 <SYS_GetBatteryLevel>
 800207a:	4603      	mov	r3, r0
 800207c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800207e:	88bb      	ldrh	r3, [r7, #4]
 8002080:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002084:	4293      	cmp	r3, r2
 8002086:	d902      	bls.n	800208e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002088:	23fe      	movs	r3, #254	@ 0xfe
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	e014      	b.n	80020b8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800208e:	88bb      	ldrh	r3, [r7, #4]
 8002090:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8002094:	d202      	bcs.n	800209c <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	e00d      	b.n	80020b8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800209c:	88bb      	ldrh	r3, [r7, #4]
 800209e:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80020a2:	461a      	mov	r2, r3
 80020a4:	4613      	mov	r3, r2
 80020a6:	01db      	lsls	r3, r3, #7
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <GetBatteryLevel+0x58>)
 80020b0:	fba3 2302 	umull	r2, r3, r3, r2
 80020b4:	09db      	lsrs	r3, r3, #7
 80020b6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80020b8:	79fb      	ldrb	r3, [r7, #7]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	1b4e81b5 	.word	0x1b4e81b5

080020c8 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 f93b 	bl	8002350 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fd1d 	bl	8000b1c <__aeabi_f2iz>
 80020e2:	4603      	mov	r3, r0
 80020e4:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80020e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80020f2:	b590      	push	{r4, r7, lr}
 80020f4:	b087      	sub	sp, #28
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80020fe:	f7ff ff63 	bl	8001fc8 <LL_FLASH_GetUDN>
 8002102:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210a:	d138      	bne.n	800217e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800210c:	f000 ffce 	bl	80030ac <HAL_GetUIDw0>
 8002110:	4604      	mov	r4, r0
 8002112:	f000 ffdf 	bl	80030d4 <HAL_GetUIDw2>
 8002116:	4603      	mov	r3, r0
 8002118:	4423      	add	r3, r4
 800211a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800211c:	f000 ffd0 	bl	80030c0 <HAL_GetUIDw1>
 8002120:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	0e1a      	lsrs	r2, r3, #24
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3307      	adds	r3, #7
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	0c1a      	lsrs	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3306      	adds	r3, #6
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	0a1a      	lsrs	r2, r3, #8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3305      	adds	r3, #5
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3304      	adds	r3, #4
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	0e1a      	lsrs	r2, r3, #24
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3303      	adds	r3, #3
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	0c1a      	lsrs	r2, r3, #16
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3302      	adds	r3, #2
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	0a1a      	lsrs	r2, r3, #8
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3301      	adds	r3, #1
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 800217c:	e031      	b.n	80021e2 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3307      	adds	r3, #7
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	0a1a      	lsrs	r2, r3, #8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3306      	adds	r3, #6
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	0c1a      	lsrs	r2, r3, #16
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3305      	adds	r3, #5
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	0e1a      	lsrs	r2, r3, #24
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3304      	adds	r3, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80021ac:	f7ff ff16 	bl	8001fdc <LL_FLASH_GetDeviceID>
 80021b0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3303      	adds	r3, #3
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80021bc:	f7ff ff1a 	bl	8001ff4 <LL_FLASH_GetSTCompanyID>
 80021c0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3302      	adds	r3, #2
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	0a1a      	lsrs	r2, r3, #8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3301      	adds	r3, #1
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	0c1b      	lsrs	r3, r3, #16
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	701a      	strb	r2, [r3, #0]
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}

080021ea <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80021ea:	b590      	push	{r4, r7, lr}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80021f2:	f7ff fee9 	bl	8001fc8 <LL_FLASH_GetUDN>
 80021f6:	4602      	mov	r2, r0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d10d      	bne.n	8002222 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002206:	f000 ff51 	bl	80030ac <HAL_GetUIDw0>
 800220a:	4604      	mov	r4, r0
 800220c:	f000 ff58 	bl	80030c0 <HAL_GetUIDw1>
 8002210:	4603      	mov	r3, r0
 8002212:	405c      	eors	r4, r3
 8002214:	f000 ff5e 	bl	80030d4 <HAL_GetUIDw2>
 8002218:	4603      	mov	r3, r0
 800221a:	ea84 0203 	eor.w	r2, r4, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bd90      	pop	{r4, r7, pc}
	...

0800222c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af02      	add	r7, sp, #8
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002236:	f107 0308 	add.w	r3, r7, #8
 800223a:	4618      	mov	r0, r3
 800223c:	f019 f83c 	bl	801b2b8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002246:	9200      	str	r2, [sp, #0]
 8002248:	4a07      	ldr	r2, [pc, #28]	@ (8002268 <TimestampNow+0x3c>)
 800224a:	2110      	movs	r1, #16
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f81d 	bl	800228c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fd ff90 	bl	8000178 <strlen>
 8002258:	4603      	mov	r3, r0
 800225a:	b29a      	uxth	r2, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	0801c730 	.word	0x0801c730

0800226c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002270:	2101      	movs	r1, #1
 8002272:	2002      	movs	r0, #2
 8002274:	f018 feb0 	bl	801afd8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002280:	2100      	movs	r1, #0
 8002282:	2002      	movs	r0, #2
 8002284:	f018 fea8 	bl	801afd8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}

0800228c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 800228c:	b40c      	push	{r2, r3}
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800229e:	6839      	ldr	r1, [r7, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f019 f973 	bl	801b590 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022b4:	b002      	add	sp, #8
 80022b6:	4770      	bx	lr

080022b8 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_GetTick+0x24>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80022de:	f000 f935 	bl	800254c <TIMER_IF_GetTimerValue>
 80022e2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80022e4:	687b      	ldr	r3, [r7, #4]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000264 	.word	0x20000264

080022f4 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f9ab 	bl	800265a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <LL_EXTI_EnableIT_32_63+0x24>)
 8002316:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800231a:	4905      	ldr	r1, [pc, #20]	@ (8002330 <LL_EXTI_EnableIT_32_63+0x24>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	58000800 	.word	0x58000800

08002334 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002338:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800233c:	f7ff ffe6 	bl	800230c <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002340:	f000 fed2 	bl	80030e8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002344:	f000 fed6 	bl	80030f4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002348:	f000 feda 	bl	8003100 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}

08002350 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <EnvSensors_Read+0x50>)
 800235a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <EnvSensors_Read+0x54>)
 800235e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002360:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <EnvSensors_Read+0x58>)
 8002362:	60fb      	str	r3, [r7, #12]

  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8002364:	f7fe fe9c 	bl	80010a0 <SYS_GetTemperatureLevel>
 8002368:	4603      	mov	r3, r0
 800236a:	121b      	asrs	r3, r3, #8
 800236c:	b21b      	sxth	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fa30 	bl	80007d4 <__aeabi_i2f>
 8002374:	4603      	mov	r3, r0
 8002376:	613b      	str	r3, [r7, #16]

  sensor_data->humidity    = HUMIDITY_Value;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a07      	ldr	r2, [pc, #28]	@ (80023ac <EnvSensors_Read+0x5c>)
 800238e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a07      	ldr	r2, [pc, #28]	@ (80023b0 <EnvSensors_Read+0x60>)
 8002394:	611a      	str	r2, [r3, #16]

  return 0;
 8002396:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	42480000 	.word	0x42480000
 80023a4:	41900000 	.word	0x41900000
 80023a8:	447a0000 	.word	0x447a0000
 80023ac:	003e090d 	.word	0x003e090d
 80023b0:	000503ab 	.word	0x000503ab

080023b4 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80023be:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80023f6:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <TIMER_IF_Init+0x5c>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	f083 0301 	eor.w	r3, r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002404:	4b11      	ldr	r3, [pc, #68]	@ (800244c <TIMER_IF_Init+0x60>)
 8002406:	f04f 32ff 	mov.w	r2, #4294967295
 800240a:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 800240c:	f7ff fc4a 	bl	8001ca4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002410:	f000 f856 	bl	80024c0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002414:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002418:	480c      	ldr	r0, [pc, #48]	@ (800244c <TIMER_IF_Init+0x60>)
 800241a:	f004 fe9f 	bl	800715c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800241e:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <TIMER_IF_Init+0x60>)
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002426:	4809      	ldr	r0, [pc, #36]	@ (800244c <TIMER_IF_Init+0x60>)
 8002428:	f004 ffd6 	bl	80073d8 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 800242c:	2000      	movs	r0, #0
 800242e:	f000 f9d3 	bl	80027d8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002432:	f000 f85f 	bl	80024f4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002436:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <TIMER_IF_Init+0x5c>)
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 800243c:	79fb      	ldrb	r3, [r7, #7]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000265 	.word	0x20000265
 800244c:	20000220 	.word	0x20000220

08002450 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08e      	sub	sp, #56	@ 0x38
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800245e:	f107 0308 	add.w	r3, r7, #8
 8002462:	222c      	movs	r2, #44	@ 0x2c
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f01a f8a8 	bl	801c5bc <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 800246c:	f000 f828 	bl	80024c0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <TIMER_IF_StartTimer+0x68>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	43db      	mvns	r3, r3
 8002482:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002488:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800248c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800248e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002492:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	2201      	movs	r2, #1
 800249a:	4619      	mov	r1, r3
 800249c:	4807      	ldr	r0, [pc, #28]	@ (80024bc <TIMER_IF_StartTimer+0x6c>)
 800249e:	f004 fd51 	bl	8006f44 <HAL_RTC_SetAlarm_IT>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80024a8:	f7ff fbce 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80024ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3738      	adds	r7, #56	@ 0x38
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000268 	.word	0x20000268
 80024bc:	20000220 	.word	0x20000220

080024c0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <TIMER_IF_StopTimer+0x2c>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80024d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024d4:	4806      	ldr	r0, [pc, #24]	@ (80024f0 <TIMER_IF_StopTimer+0x30>)
 80024d6:	f004 fe41 	bl	800715c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80024da:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <TIMER_IF_StopTimer+0x30>)
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80024e2:	79fb      	ldrb	r3, [r7, #7]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40002800 	.word	0x40002800
 80024f0:	20000220 	.word	0x20000220

080024f4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80024f8:	f000 f98e 	bl	8002818 <GetTimerTicks>
 80024fc:	4603      	mov	r3, r0
 80024fe:	4a03      	ldr	r2, [pc, #12]	@ (800250c <TIMER_IF_SetTimerContext+0x18>)
 8002500:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002502:	4b02      	ldr	r3, [pc, #8]	@ (800250c <TIMER_IF_SetTimerContext+0x18>)
 8002504:	681b      	ldr	r3, [r3, #0]
}
 8002506:	4618      	mov	r0, r3
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000268 	.word	0x20000268

08002510 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002514:	4b02      	ldr	r3, [pc, #8]	@ (8002520 <TIMER_IF_GetTimerContext+0x10>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	20000268 	.word	0x20000268

08002524 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800252e:	f000 f973 	bl	8002818 <GetTimerTicks>
 8002532:	4602      	mov	r2, r0
 8002534:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800253c:	687b      	ldr	r3, [r7, #4]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000268 	.word	0x20000268

0800254c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <TIMER_IF_GetTimerValue+0x24>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800255e:	f000 f95b 	bl	8002818 <GetTimerTicks>
 8002562:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002564:	687b      	ldr	r3, [r7, #4]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000265 	.word	0x20000265

08002574 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800257e:	2303      	movs	r3, #3
 8002580:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002582:	687b      	ldr	r3, [r7, #4]
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800258e:	b5b0      	push	{r4, r5, r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002596:	2100      	movs	r1, #0
 8002598:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	2000      	movs	r0, #0
 800259e:	460a      	mov	r2, r1
 80025a0:	4603      	mov	r3, r0
 80025a2:	0d95      	lsrs	r5, r2, #22
 80025a4:	0294      	lsls	r4, r2, #10
 80025a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	4620      	mov	r0, r4
 80025b0:	4629      	mov	r1, r5
 80025b2:	f7fe faf9 	bl	8000ba8 <__aeabi_uldivmod>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4613      	mov	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bdb0      	pop	{r4, r5, r7, pc}

080025c8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80025c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80025d2:	2100      	movs	r1, #0
 80025d4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	2000      	movs	r0, #0
 80025da:	460c      	mov	r4, r1
 80025dc:	4605      	mov	r5, r0
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f04f 0a00 	mov.w	sl, #0
 80025e6:	f04f 0b00 	mov.w	fp, #0
 80025ea:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80025ee:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80025f2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80025f6:	4650      	mov	r0, sl
 80025f8:	4659      	mov	r1, fp
 80025fa:	1b02      	subs	r2, r0, r4
 80025fc:	eb61 0305 	sbc.w	r3, r1, r5
 8002600:	f04f 0000 	mov.w	r0, #0
 8002604:	f04f 0100 	mov.w	r1, #0
 8002608:	0099      	lsls	r1, r3, #2
 800260a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800260e:	0090      	lsls	r0, r2, #2
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	eb12 0804 	adds.w	r8, r2, r4
 8002618:	eb43 0905 	adc.w	r9, r3, r5
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002628:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800262c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002630:	4690      	mov	r8, r2
 8002632:	4699      	mov	r9, r3
 8002634:	4640      	mov	r0, r8
 8002636:	4649      	mov	r1, r9
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	0a82      	lsrs	r2, r0, #10
 8002642:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002646:	0a8b      	lsrs	r3, r1, #10
 8002648:	4613      	mov	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 800264c:	68fb      	ldr	r3, [r7, #12]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002658:	4770      	bx	lr

0800265a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ff93 	bl	800258e <TIMER_IF_Convert_ms2Tick>
 8002668:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800266a:	f000 f8d5 	bl	8002818 <GetTimerTicks>
 800266e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002670:	e000      	b.n	8002674 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002672:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002674:	f000 f8d0 	bl	8002818 <GetTimerTicks>
 8002678:	4602      	mov	r2, r0
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	429a      	cmp	r2, r3
 8002682:	d8f6      	bhi.n	8002672 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002696:	f019 fba9 	bl	801bdec <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80026aa:	f000 f8a5 	bl	80027f8 <TIMER_IF_BkUp_Read_MSBticks>
 80026ae:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3301      	adds	r3, #1
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f88f 	bl	80027d8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80026c2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c6:	b08c      	sub	sp, #48	@ 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80026d0:	f000 f8a2 	bl	8002818 <GetTimerTicks>
 80026d4:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80026d6:	f000 f88f 	bl	80027f8 <TIMER_IF_BkUp_Read_MSBticks>
 80026da:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	2200      	movs	r2, #0
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	60fa      	str	r2, [r7, #12]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	000b      	movs	r3, r1
 80026f0:	2200      	movs	r2, #0
 80026f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026f4:	2000      	movs	r0, #0
 80026f6:	460c      	mov	r4, r1
 80026f8:	4605      	mov	r5, r0
 80026fa:	eb12 0804 	adds.w	r8, r2, r4
 80026fe:	eb43 0905 	adc.w	r9, r3, r5
 8002702:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002706:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	0a82      	lsrs	r2, r0, #10
 8002714:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002718:	0a8b      	lsrs	r3, r1, #10
 800271a:	4613      	mov	r3, r2
 800271c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2200      	movs	r2, #0
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800272c:	f04f 0b00 	mov.w	fp, #0
 8002730:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff46 	bl	80025c8 <TIMER_IF_Convert_Tick2ms>
 800273c:	4603      	mov	r3, r0
 800273e:	b29a      	uxth	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002746:	4618      	mov	r0, r3
 8002748:	3730      	adds	r7, #48	@ 0x30
 800274a:	46bd      	mov	sp, r7
 800274c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002750 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	2100      	movs	r1, #0
 800275c:	4803      	ldr	r0, [pc, #12]	@ (800276c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800275e:	f004 fecd 	bl	80074fc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000220 	.word	0x20000220

08002770 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	2101      	movs	r1, #1
 800277c:	4803      	ldr	r0, [pc, #12]	@ (800278c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800277e:	f004 febd 	bl	80074fc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000220 	.word	0x20000220

08002790 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800279a:	2100      	movs	r1, #0
 800279c:	4804      	ldr	r0, [pc, #16]	@ (80027b0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800279e:	f004 fec5 	bl	800752c <HAL_RTCEx_BKUPRead>
 80027a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80027a4:	687b      	ldr	r3, [r7, #4]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000220 	.word	0x20000220

080027b4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80027be:	2101      	movs	r1, #1
 80027c0:	4804      	ldr	r0, [pc, #16]	@ (80027d4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80027c2:	f004 feb3 	bl	800752c <HAL_RTCEx_BKUPRead>
 80027c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80027c8:	687b      	ldr	r3, [r7, #4]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000220 	.word	0x20000220

080027d8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	2102      	movs	r1, #2
 80027e4:	4803      	ldr	r0, [pc, #12]	@ (80027f4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80027e6:	f004 fe89 	bl	80074fc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000220 	.word	0x20000220

080027f8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80027fe:	2102      	movs	r1, #2
 8002800:	4804      	ldr	r0, [pc, #16]	@ (8002814 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002802:	f004 fe93 	bl	800752c <HAL_RTCEx_BKUPRead>
 8002806:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002808:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000220 	.word	0x20000220

08002818 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800281e:	480b      	ldr	r0, [pc, #44]	@ (800284c <GetTimerTicks+0x34>)
 8002820:	f7ff fdd9 	bl	80023d6 <LL_RTC_TIME_GetSubSecond>
 8002824:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002826:	e003      	b.n	8002830 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002828:	4808      	ldr	r0, [pc, #32]	@ (800284c <GetTimerTicks+0x34>)
 800282a:	f7ff fdd4 	bl	80023d6 <LL_RTC_TIME_GetSubSecond>
 800282e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002830:	4806      	ldr	r0, [pc, #24]	@ (800284c <GetTimerTicks+0x34>)
 8002832:	f7ff fdd0 	bl	80023d6 <LL_RTC_TIME_GetSubSecond>
 8002836:	4602      	mov	r2, r0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4293      	cmp	r3, r2
 800283c:	d1f4      	bne.n	8002828 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40002800 	.word	0x40002800

08002850 <LL_AHB2_GRP1_EnableClock>:
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800285c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800285e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4313      	orrs	r3, r2
 8002866:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800286c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002874:	68fb      	ldr	r3, [r7, #12]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <LL_APB1_GRP1_EnableClock>:
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800288e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4313      	orrs	r3, r2
 8002896:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800289c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028a4:	68fb      	ldr	r3, [r7, #12]
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <LL_APB1_GRP1_DisableClock>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028c6:	4013      	ands	r3, r2
 80028c8:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <LL_APB2_GRP1_EnableClock>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4013      	ands	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028f8:	68fb      	ldr	r3, [r7, #12]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <LL_APB2_GRP1_DisableClock>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002910:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	43db      	mvns	r3, r3
 8002916:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800291a:	4013      	ands	r3, r2
 800291c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800292c:	4b22      	ldr	r3, [pc, #136]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 800292e:	4a23      	ldr	r2, [pc, #140]	@ (80029bc <MX_USART2_UART_Init+0x94>)
 8002930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002932:	4b21      	ldr	r3, [pc, #132]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 8002934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800293a:	4b1f      	ldr	r3, [pc, #124]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 800293c:	2200      	movs	r2, #0
 800293e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002940:	4b1d      	ldr	r3, [pc, #116]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002946:	4b1c      	ldr	r3, [pc, #112]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800294c:	4b1a      	ldr	r3, [pc, #104]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 800294e:	220c      	movs	r2, #12
 8002950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002952:	4b19      	ldr	r3, [pc, #100]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002958:	4b17      	ldr	r3, [pc, #92]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 800295a:	2200      	movs	r2, #0
 800295c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800295e:	4b16      	ldr	r3, [pc, #88]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 8002960:	2200      	movs	r2, #0
 8002962:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002964:	4b14      	ldr	r3, [pc, #80]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 8002966:	2200      	movs	r2, #0
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800296a:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 800296c:	2200      	movs	r2, #0
 800296e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002970:	4811      	ldr	r0, [pc, #68]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 8002972:	f005 fadc 	bl	8007f2e <HAL_UART_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800297c:	f7ff f964 	bl	8001c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002980:	2100      	movs	r1, #0
 8002982:	480d      	ldr	r0, [pc, #52]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 8002984:	f007 fc02 	bl	800a18c <HAL_UARTEx_SetTxFifoThreshold>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800298e:	f7ff f95b 	bl	8001c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002992:	2100      	movs	r1, #0
 8002994:	4808      	ldr	r0, [pc, #32]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 8002996:	f007 fc37 	bl	800a208 <HAL_UARTEx_SetRxFifoThreshold>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80029a0:	f7ff f952 	bl	8001c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80029a4:	4804      	ldr	r0, [pc, #16]	@ (80029b8 <MX_USART2_UART_Init+0x90>)
 80029a6:	f007 fbb9 	bl	800a11c <HAL_UARTEx_DisableFifoMode>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80029b0:	f7ff f94a 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000300 	.word	0x20000300
 80029bc:	40004400 	.word	0x40004400

080029c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b096      	sub	sp, #88	@ 0x58
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	2238      	movs	r2, #56	@ 0x38
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f019 fdeb 	bl	801c5bc <memset>
  if(uartHandle->Instance==USART1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a68      	ldr	r2, [pc, #416]	@ (8002b8c <HAL_UART_MspInit+0x1cc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d16c      	bne.n	8002aca <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029f0:	2301      	movs	r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029f4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80029f8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	4618      	mov	r0, r3
 8002a00:	f004 f904 	bl	8006c0c <HAL_RCCEx_PeriphCLKConfig>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a0a:	f7ff f91d 	bl	8001c48 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a0e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002a12:	f7ff ff5f 	bl	80028d4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	2001      	movs	r0, #1
 8002a18:	f7ff ff1a 	bl	8002850 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	f7ff ff17 	bl	8002850 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8002a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a26:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a34:	2307      	movs	r3, #7
 8002a36:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8002a38:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a42:	f002 fae5 	bl	8005010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8002a46:	2340      	movs	r3, #64	@ 0x40
 8002a48:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a52:	2303      	movs	r3, #3
 8002a54:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a56:	2307      	movs	r3, #7
 8002a58:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a5e:	4619      	mov	r1, r3
 8002a60:	484b      	ldr	r0, [pc, #300]	@ (8002b90 <HAL_UART_MspInit+0x1d0>)
 8002a62:	f002 fad5 	bl	8005010 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002a66:	4b4b      	ldr	r3, [pc, #300]	@ (8002b94 <HAL_UART_MspInit+0x1d4>)
 8002a68:	4a4b      	ldr	r2, [pc, #300]	@ (8002b98 <HAL_UART_MspInit+0x1d8>)
 8002a6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002a6c:	4b49      	ldr	r3, [pc, #292]	@ (8002b94 <HAL_UART_MspInit+0x1d4>)
 8002a6e:	2212      	movs	r2, #18
 8002a70:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a72:	4b48      	ldr	r3, [pc, #288]	@ (8002b94 <HAL_UART_MspInit+0x1d4>)
 8002a74:	2210      	movs	r2, #16
 8002a76:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a78:	4b46      	ldr	r3, [pc, #280]	@ (8002b94 <HAL_UART_MspInit+0x1d4>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7e:	4b45      	ldr	r3, [pc, #276]	@ (8002b94 <HAL_UART_MspInit+0x1d4>)
 8002a80:	2280      	movs	r2, #128	@ 0x80
 8002a82:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a84:	4b43      	ldr	r3, [pc, #268]	@ (8002b94 <HAL_UART_MspInit+0x1d4>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a8a:	4b42      	ldr	r3, [pc, #264]	@ (8002b94 <HAL_UART_MspInit+0x1d4>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a90:	4b40      	ldr	r3, [pc, #256]	@ (8002b94 <HAL_UART_MspInit+0x1d4>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a96:	4b3f      	ldr	r3, [pc, #252]	@ (8002b94 <HAL_UART_MspInit+0x1d4>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a9c:	483d      	ldr	r0, [pc, #244]	@ (8002b94 <HAL_UART_MspInit+0x1d4>)
 8002a9e:	f001 fcb3 	bl	8004408 <HAL_DMA_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8002aa8:	f7ff f8ce 	bl	8001c48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a39      	ldr	r2, [pc, #228]	@ (8002b94 <HAL_UART_MspInit+0x1d4>)
 8002ab0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002ab2:	4a38      	ldr	r2, [pc, #224]	@ (8002b94 <HAL_UART_MspInit+0x1d4>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2102      	movs	r1, #2
 8002abc:	2024      	movs	r0, #36	@ 0x24
 8002abe:	f001 fc6c 	bl	800439a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ac2:	2024      	movs	r0, #36	@ 0x24
 8002ac4:	f001 fc83 	bl	80043ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ac8:	e05c      	b.n	8002b84 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a33      	ldr	r2, [pc, #204]	@ (8002b9c <HAL_UART_MspInit+0x1dc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d157      	bne.n	8002b84 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ad8:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002adc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 f892 	bl	8006c0c <HAL_RCCEx_PeriphCLKConfig>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8002aee:	f7ff f8ab 	bl	8001c48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002af2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002af6:	f7ff fec3 	bl	8002880 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	2001      	movs	r0, #1
 8002afc:	f7ff fea8 	bl	8002850 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002b00:	230c      	movs	r3, #12
 8002b02:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b10:	2307      	movs	r3, #7
 8002b12:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b14:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b1e:	f002 fa77 	bl	8005010 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002b22:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba0 <HAL_UART_MspInit+0x1e0>)
 8002b24:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba4 <HAL_UART_MspInit+0x1e4>)
 8002b26:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <HAL_UART_MspInit+0x1e0>)
 8002b2a:	2214      	movs	r2, #20
 8002b2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba0 <HAL_UART_MspInit+0x1e0>)
 8002b30:	2210      	movs	r2, #16
 8002b32:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba0 <HAL_UART_MspInit+0x1e0>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <HAL_UART_MspInit+0x1e0>)
 8002b3c:	2280      	movs	r2, #128	@ 0x80
 8002b3e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b40:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <HAL_UART_MspInit+0x1e0>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b46:	4b16      	ldr	r3, [pc, #88]	@ (8002ba0 <HAL_UART_MspInit+0x1e0>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <HAL_UART_MspInit+0x1e0>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b52:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <HAL_UART_MspInit+0x1e0>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b58:	4811      	ldr	r0, [pc, #68]	@ (8002ba0 <HAL_UART_MspInit+0x1e0>)
 8002b5a:	f001 fc55 	bl	8004408 <HAL_DMA_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002b64:	f7ff f870 	bl	8001c48 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba0 <HAL_UART_MspInit+0x1e0>)
 8002b6c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba0 <HAL_UART_MspInit+0x1e0>)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2100      	movs	r1, #0
 8002b78:	2025      	movs	r0, #37	@ 0x25
 8002b7a:	f001 fc0e 	bl	800439a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b7e:	2025      	movs	r0, #37	@ 0x25
 8002b80:	f001 fc25 	bl	80043ce <HAL_NVIC_EnableIRQ>
}
 8002b84:	bf00      	nop
 8002b86:	3758      	adds	r7, #88	@ 0x58
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	48000400 	.word	0x48000400
 8002b94:	20000394 	.word	0x20000394
 8002b98:	40020008 	.word	0x40020008
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	200003f4 	.word	0x200003f4
 8002ba4:	4002001c 	.word	0x4002001c

08002ba8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a19      	ldr	r2, [pc, #100]	@ (8002c1c <HAL_UART_MspDeInit+0x74>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d116      	bne.n	8002be8 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002bba:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002bbe:	f7ff fea1 	bl	8002904 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(RS485_RX_GPIO_Port, RS485_RX_Pin);
 8002bc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bca:	f002 fb81 	bl	80052d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(RS485_TX_GPIO_Port, RS485_TX_Pin);
 8002bce:	2140      	movs	r1, #64	@ 0x40
 8002bd0:	4813      	ldr	r0, [pc, #76]	@ (8002c20 <HAL_UART_MspDeInit+0x78>)
 8002bd2:	f002 fb7d 	bl	80052d0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f001 fcbc 	bl	8004558 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002be0:	2024      	movs	r0, #36	@ 0x24
 8002be2:	f001 fc02 	bl	80043ea <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002be6:	e015      	b.n	8002c14 <HAL_UART_MspDeInit+0x6c>
  else if(uartHandle->Instance==USART2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <HAL_UART_MspDeInit+0x7c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d110      	bne.n	8002c14 <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002bf2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002bf6:	f7ff fe5b 	bl	80028b0 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002bfa:	210c      	movs	r1, #12
 8002bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c00:	f002 fb66 	bl	80052d0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 fca5 	bl	8004558 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002c0e:	2025      	movs	r0, #37	@ 0x25
 8002c10:	f001 fbeb 	bl	80043ea <HAL_NVIC_DisableIRQ>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	48000400 	.word	0x48000400
 8002c24:	40004400 	.word	0x40004400

08002c28 <LL_APB1_GRP1_ForceReset>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <LL_APB1_GRP1_ReleaseReset>:
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c60:	4013      	ands	r3, r2
 8002c62:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
	...

08002c70 <LL_EXTI_EnableIT_0_31>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c7a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002c7e:	4905      	ldr	r1, [pc, #20]	@ (8002c94 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	58000800 	.word	0x58000800

08002c98 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002ca0:	4a07      	ldr	r2, [pc, #28]	@ (8002cc0 <vcom_Init+0x28>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002ca6:	f7fe fb8d 	bl	80013c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002caa:	f7ff fe3d 	bl	8002928 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8002cae:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002cb2:	f7ff ffdd 	bl	8002c70 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002cb6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000458 	.word	0x20000458

08002cc4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002cc8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002ccc:	f7ff ffac 	bl	8002c28 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002cd0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002cd4:	f7ff ffb9 	bl	8002c4a <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002cd8:	4804      	ldr	r0, [pc, #16]	@ (8002cec <vcom_DeInit+0x28>)
 8002cda:	f7ff ff65 	bl	8002ba8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002cde:	200f      	movs	r0, #15
 8002ce0:	f001 fb83 	bl	80043ea <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002ce4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000300 	.word	0x20000300

08002cf0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002cfc:	887b      	ldrh	r3, [r7, #2]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4804      	ldr	r0, [pc, #16]	@ (8002d14 <vcom_Trace_DMA+0x24>)
 8002d04:	f005 f9b0 	bl	8008068 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002d08:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000300 	.word	0x20000300

08002d18 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002d20:	4a19      	ldr	r2, [pc, #100]	@ (8002d88 <vcom_ReceiveInit+0x70>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002d26:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d2a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002d2c:	f107 0308 	add.w	r3, r7, #8
 8002d30:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d34:	4815      	ldr	r0, [pc, #84]	@ (8002d8c <vcom_ReceiveInit+0x74>)
 8002d36:	f007 f964 	bl	800a002 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002d3a:	bf00      	nop
 8002d3c:	4b13      	ldr	r3, [pc, #76]	@ (8002d8c <vcom_ReceiveInit+0x74>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d4a:	d0f7      	beq.n	8002d3c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002d4c:	bf00      	nop
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d8c <vcom_ReceiveInit+0x74>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d5c:	d1f7      	bne.n	8002d4e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <vcom_ReceiveInit+0x74>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <vcom_ReceiveInit+0x74>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002d6c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002d6e:	4807      	ldr	r0, [pc, #28]	@ (8002d8c <vcom_ReceiveInit+0x74>)
 8002d70:	f007 f9a2 	bl	800a0b8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002d74:	2201      	movs	r2, #1
 8002d76:	4906      	ldr	r1, [pc, #24]	@ (8002d90 <vcom_ReceiveInit+0x78>)
 8002d78:	4804      	ldr	r0, [pc, #16]	@ (8002d8c <vcom_ReceiveInit+0x74>)
 8002d7a:	f005 f929 	bl	8007fd0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002d7e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	2000045c 	.word	0x2000045c
 8002d8c:	20000300 	.word	0x20000300
 8002d90:	20000454 	.word	0x20000454

08002d94 <vcom_Resume>:

void vcom_Resume(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d98:	4808      	ldr	r0, [pc, #32]	@ (8002dbc <vcom_Resume+0x28>)
 8002d9a:	f005 f8c8 	bl	8007f2e <HAL_UART_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002da4:	f7fe ff50 	bl	8001c48 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002da8:	4805      	ldr	r0, [pc, #20]	@ (8002dc0 <vcom_Resume+0x2c>)
 8002daa:	f001 fb2d 	bl	8004408 <HAL_DMA_Init>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002db4:	f7fe ff48 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002db8:	bf00      	nop
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000300 	.word	0x20000300
 8002dc0:	200003f4 	.word	0x200003f4

08002dc4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a05      	ldr	r2, [pc, #20]	@ (8002de8 <HAL_UART_TxCpltCallback+0x24>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d103      	bne.n	8002dde <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002dd6:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <HAL_UART_TxCpltCallback+0x28>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2000      	movs	r0, #0
 8002ddc:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40004400 	.word	0x40004400
 8002dec:	20000458 	.word	0x20000458

08002df0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e34 <HAL_UART_RxCpltCallback+0x44>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d113      	bne.n	8002e2a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002e02:	4b0d      	ldr	r3, [pc, #52]	@ (8002e38 <HAL_UART_RxCpltCallback+0x48>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_UART_RxCpltCallback+0x30>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002e14:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <HAL_UART_RxCpltCallback+0x48>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	4807      	ldr	r0, [pc, #28]	@ (8002e3c <HAL_UART_RxCpltCallback+0x4c>)
 8002e1e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002e20:	2201      	movs	r2, #1
 8002e22:	4906      	ldr	r1, [pc, #24]	@ (8002e3c <HAL_UART_RxCpltCallback+0x4c>)
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f005 f8d3 	bl	8007fd0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40004400 	.word	0x40004400
 8002e38:	2000045c 	.word	0x2000045c
 8002e3c:	20000454 	.word	0x20000454

08002e40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e40:	480d      	ldr	r0, [pc, #52]	@ (8002e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e44:	f7ff fac1 	bl	80023ca <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e48:	480c      	ldr	r0, [pc, #48]	@ (8002e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e4a:	490d      	ldr	r1, [pc, #52]	@ (8002e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e84 <LoopForever+0xe>)
  movs r3, #0
 8002e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e50:	e002      	b.n	8002e58 <LoopCopyDataInit>

08002e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e56:	3304      	adds	r3, #4

08002e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e5c:	d3f9      	bcc.n	8002e52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e60:	4c0a      	ldr	r4, [pc, #40]	@ (8002e8c <LoopForever+0x16>)
  movs r3, #0
 8002e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e64:	e001      	b.n	8002e6a <LoopFillZerobss>

08002e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e68:	3204      	adds	r2, #4

08002e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e6c:	d3fb      	bcc.n	8002e66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e6e:	f019 fbad 	bl	801c5cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e72:	f7fe fe7e 	bl	8001b72 <main>

08002e76 <LoopForever>:

LoopForever:
    b LoopForever
 8002e76:	e7fe      	b.n	8002e76 <LoopForever>
  ldr   r0, =_estack
 8002e78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e80:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8002e84:	0801d744 	.word	0x0801d744
  ldr r2, =_sbss
 8002e88:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8002e8c:	20002350 	.word	0x20002350

08002e90 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e90:	e7fe      	b.n	8002e90 <ADC_IRQHandler>

08002e92 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002ea6:	2310      	movs	r3, #16
 8002ea8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ebe:	f002 f8a7 	bl	8005010 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ece:	f002 f89f 	bl	8005010 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2120      	movs	r1, #32
 8002ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eda:	f002 fac7 	bl	800546c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2110      	movs	r1, #16
 8002ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ee6:	f002 fac1 	bl	800546c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d83f      	bhi.n	8002f84 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002f04:	a201      	add	r2, pc, #4	@ (adr r2, 8002f0c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f37 	.word	0x08002f37
 8002f14:	08002f51 	.word	0x08002f51
 8002f18:	08002f6b 	.word	0x08002f6b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2110      	movs	r1, #16
 8002f20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f24:	f002 faa2 	bl	800546c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2120      	movs	r1, #32
 8002f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f30:	f002 fa9c 	bl	800546c <HAL_GPIO_WritePin>
      break;      
 8002f34:	e027      	b.n	8002f86 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002f36:	2201      	movs	r2, #1
 8002f38:	2110      	movs	r1, #16
 8002f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f3e:	f002 fa95 	bl	800546c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002f42:	2200      	movs	r2, #0
 8002f44:	2120      	movs	r1, #32
 8002f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f4a:	f002 fa8f 	bl	800546c <HAL_GPIO_WritePin>
      break;
 8002f4e:	e01a      	b.n	8002f86 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002f50:	2201      	movs	r2, #1
 8002f52:	2110      	movs	r1, #16
 8002f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f58:	f002 fa88 	bl	800546c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	2120      	movs	r1, #32
 8002f60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f64:	f002 fa82 	bl	800546c <HAL_GPIO_WritePin>
      break;
 8002f68:	e00d      	b.n	8002f86 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2110      	movs	r1, #16
 8002f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f72:	f002 fa7b 	bl	800546c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f76:	2201      	movs	r2, #1
 8002f78:	2120      	movs	r1, #32
 8002f7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f7e:	f002 fa75 	bl	800546c <HAL_GPIO_WritePin>
      break;
 8002f82:	e000      	b.n	8002f86 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002f84:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002f94:	2302      	movs	r3, #2
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002fa2:	2301      	movs	r3, #1
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002fb0:	2301      	movs	r3, #1
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002fca:	230f      	movs	r3, #15
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e001      	b.n	8002fd4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002fd0:	2316      	movs	r3, #22
 8002fd2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002fe4:	4b04      	ldr	r3, [pc, #16]	@ (8002ff8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a03      	ldr	r2, [pc, #12]	@ (8002ff8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6053      	str	r3, [r2, #4]
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	e0042000 	.word	0xe0042000

08002ffc <LL_DBGMCU_EnableDBGStopMode>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003000:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a03      	ldr	r2, [pc, #12]	@ (8003014 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003006:	f043 0302 	orr.w	r3, r3, #2
 800300a:	6053      	str	r3, [r2, #4]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr
 8003014:	e0042000 	.word	0xe0042000

08003018 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800301c:	4b04      	ldr	r3, [pc, #16]	@ (8003030 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a03      	ldr	r2, [pc, #12]	@ (8003030 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003022:	f043 0304 	orr.w	r3, r3, #4
 8003026:	6053      	str	r3, [r2, #4]
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr
 8003030:	e0042000 	.word	0xe0042000

08003034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303e:	2003      	movs	r0, #3
 8003040:	f001 f9a0 	bl	8004384 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003044:	f003 fc04 	bl	8006850 <HAL_RCC_GetHCLKFreq>
 8003048:	4603      	mov	r3, r0
 800304a:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <HAL_Init+0x3c>)
 800304c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800304e:	200f      	movs	r0, #15
 8003050:	f7ff f932 	bl	80022b8 <HAL_InitTick>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	71fb      	strb	r3, [r7, #7]
 800305e:	e001      	b.n	8003064 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003060:	f7fe fee9 	bl	8001e36 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003064:	79fb      	ldrb	r3, [r7, #7]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000000 	.word	0x20000000

08003074 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003078:	4b04      	ldr	r3, [pc, #16]	@ (800308c <HAL_SuspendTick+0x18>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a03      	ldr	r2, [pc, #12]	@ (800308c <HAL_SuspendTick+0x18>)
 800307e:	f023 0302 	bic.w	r3, r3, #2
 8003082:	6013      	str	r3, [r2, #0]
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	e000e010 	.word	0xe000e010

08003090 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003094:	4b04      	ldr	r3, [pc, #16]	@ (80030a8 <HAL_ResumeTick+0x18>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a03      	ldr	r2, [pc, #12]	@ (80030a8 <HAL_ResumeTick+0x18>)
 800309a:	f043 0302 	orr.w	r3, r3, #2
 800309e:	6013      	str	r3, [r2, #0]
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	e000e010 	.word	0xe000e010

080030ac <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80030b0:	4b02      	ldr	r3, [pc, #8]	@ (80030bc <HAL_GetUIDw0+0x10>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	1fff7590 	.word	0x1fff7590

080030c0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80030c4:	4b02      	ldr	r3, [pc, #8]	@ (80030d0 <HAL_GetUIDw1+0x10>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	1fff7594 	.word	0x1fff7594

080030d4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80030d8:	4b02      	ldr	r3, [pc, #8]	@ (80030e4 <HAL_GetUIDw2+0x10>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	1fff7598 	.word	0x1fff7598

080030e8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80030ec:	f7ff ff78 	bl	8002fe0 <LL_DBGMCU_EnableDBGSleepMode>
}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80030f8:	f7ff ff80 	bl	8002ffc <LL_DBGMCU_EnableDBGStopMode>
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003104:	f7ff ff88 	bl	8003018 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}

0800310c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	601a      	str	r2, [r3, #0]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2107      	movs	r1, #7
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	401a      	ands	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
 8003176:	431a      	orrs	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2107      	movs	r1, #7
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031da:	b480      	push	{r7}
 80031dc:	b085      	sub	sp, #20
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	210f      	movs	r1, #15
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	401a      	ands	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	0e9b      	lsrs	r3, r3, #26
 80031fe:	f003 010f 	and.w	r1, r3, #15
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003254:	43db      	mvns	r3, r3
 8003256:	401a      	ands	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	43db      	mvns	r3, r3
 800327c:	401a      	ands	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	0219      	lsls	r1, r3, #8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	400b      	ands	r3, r1
 8003286:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800328a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800328e:	431a      	orrs	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032ae:	f023 0317 	bic.w	r3, r3, #23
 80032b2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032d4:	f023 0317 	bic.w	r3, r3, #23
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6093      	str	r3, [r2, #8]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032fa:	d101      	bne.n	8003300 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800331c:	f023 0317 	bic.w	r3, r3, #23
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003342:	f023 0317 	bic.w	r3, r3, #23
 8003346:	f043 0202 	orr.w	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <LL_ADC_IsEnabled+0x18>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <LL_ADC_IsEnabled+0x1a>
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b02      	cmp	r3, #2
 800338e:	d101      	bne.n	8003394 <LL_ADC_IsDisableOngoing+0x18>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <LL_ADC_IsDisableOngoing+0x1a>
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033b0:	f023 0317 	bic.w	r3, r3, #23
 80033b4:	f043 0204 	orr.w	r2, r3, #4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033d6:	f023 0317 	bic.w	r3, r3, #23
 80033da:	f043 0210 	orr.w	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d101      	bne.n	8003404 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800341c:	2300      	movs	r3, #0
 800341e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e17e      	b.n	8003730 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fd fdd7 	bl	8000ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff44 	bl	80032e6 <LL_ADC_IsInternalRegulatorEnabled>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d115      	bne.n	8003490 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff ff18 	bl	800329e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800346e:	4b9e      	ldr	r3, [pc, #632]	@ (80036e8 <HAL_ADC_Init+0x2d8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	4a9d      	ldr	r2, [pc, #628]	@ (80036ec <HAL_ADC_Init+0x2dc>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	3301      	adds	r3, #1
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003482:	e002      	b.n	800348a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3b01      	subs	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f9      	bne.n	8003484 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ff26 	bl	80032e6 <LL_ADC_IsInternalRegulatorEnabled>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10d      	bne.n	80034bc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a4:	f043 0210 	orr.w	r2, r3, #16
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b0:	f043 0201 	orr.w	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff93 	bl	80033ec <LL_ADC_REG_IsConversionOngoing>
 80034c6:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f040 8124 	bne.w	800371e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f040 8120 	bne.w	800371e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034e6:	f043 0202 	orr.w	r2, r3, #2
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff ff30 	bl	8003358 <LL_ADC_IsEnabled>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 80a7 	bne.w	800364e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7e1b      	ldrb	r3, [r3, #24]
 8003508:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800350a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	7e5b      	ldrb	r3, [r3, #25]
 8003510:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003512:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	7e9b      	ldrb	r3, [r3, #26]
 8003518:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800351a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003520:	2a00      	cmp	r2, #0
 8003522:	d002      	beq.n	800352a <HAL_ADC_Init+0x11a>
 8003524:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003528:	e000      	b.n	800352c <HAL_ADC_Init+0x11c>
 800352a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800352c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003532:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	da04      	bge.n	8003546 <HAL_ADC_Init+0x136>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003544:	e001      	b.n	800354a <HAL_ADC_Init+0x13a>
 8003546:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 800354a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003552:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003554:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d114      	bne.n	8003590 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	7e9b      	ldrb	r3, [r3, #26]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	e00b      	b.n	8003590 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003588:	f043 0201 	orr.w	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80035a4:	4313      	orrs	r3, r2
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 80035b6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	69b9      	ldr	r1, [r7, #24]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035d0:	4313      	orrs	r3, r2
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d111      	bne.n	8003606 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035ee:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80035f4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80035fa:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	4b38      	ldr	r3, [pc, #224]	@ (80036f0 <HAL_ADC_Init+0x2e0>)
 800360e:	4013      	ands	r3, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	6979      	ldr	r1, [r7, #20]
 8003616:	430b      	orrs	r3, r1
 8003618:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003622:	d014      	beq.n	800364e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362c:	d00f      	beq.n	800364e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003632:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003636:	d00a      	beq.n	800364e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003638:	4b2e      	ldr	r3, [pc, #184]	@ (80036f4 <HAL_ADC_Init+0x2e4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003648:	492a      	ldr	r1, [pc, #168]	@ (80036f4 <HAL_ADC_Init+0x2e4>)
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003656:	461a      	mov	r2, r3
 8003658:	2100      	movs	r1, #0
 800365a:	f7ff fd76 	bl	800314a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003666:	461a      	mov	r2, r3
 8003668:	4923      	ldr	r1, [pc, #140]	@ (80036f8 <HAL_ADC_Init+0x2e8>)
 800366a:	f7ff fd6e 	bl	800314a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d108      	bne.n	8003688 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f062 020f 	orn	r2, r2, #15
 8003684:	629a      	str	r2, [r3, #40]	@ 0x28
 8003686:	e017      	b.n	80036b8 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003690:	d112      	bne.n	80036b8 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	3b01      	subs	r3, #1
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	f003 031c 	and.w	r3, r3, #28
 80036a4:	f06f 020f 	mvn.w	r2, #15
 80036a8:	fa02 f103 	lsl.w	r1, r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fd61 	bl	8003186 <LL_ADC_GetSamplingTimeCommonChannels>
 80036c4:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d116      	bne.n	80036fc <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d8:	f023 0303 	bic.w	r3, r3, #3
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036e4:	e023      	b.n	800372e <HAL_ADC_Init+0x31e>
 80036e6:	bf00      	nop
 80036e8:	20000000 	.word	0x20000000
 80036ec:	053e2d63 	.word	0x053e2d63
 80036f0:	1ffffc02 	.word	0x1ffffc02
 80036f4:	40012708 	.word	0x40012708
 80036f8:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003700:	f023 0312 	bic.w	r3, r3, #18
 8003704:	f043 0210 	orr.w	r2, r3, #16
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003710:	f043 0201 	orr.w	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800371c:	e007      	b.n	800372e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	f043 0210 	orr.w	r2, r3, #16
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800372e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3720      	adds	r7, #32
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07a      	b.n	8003840 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374e:	f043 0202 	orr.w	r2, r3, #2
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 face 	bl	8003cf8 <ADC_ConversionStop>
 800375c:	4603      	mov	r3, r0
 800375e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fb92 	bl	8003e90 <ADC_Disable>
 800376c:	4603      	mov	r3, r0
 800376e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fd9f 	bl	80032c4 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003794:	f023 0303 	bic.w	r3, r3, #3
 8003798:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f240 329f 	movw	r2, #927	@ 0x39f
 80037a2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68d9      	ldr	r1, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b26      	ldr	r3, [pc, #152]	@ (8003848 <HAL_ADC_DeInit+0x110>)
 80037b0:	400b      	ands	r3, r1
 80037b2:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0207 	bic.w	r2, r2, #7
 80037c2:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2200      	movs	r2, #0
 80037d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80037e0:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80037f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003800:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003810:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003812:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <HAL_ADC_DeInit+0x114>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a0d      	ldr	r2, [pc, #52]	@ (800384c <HAL_ADC_DeInit+0x114>)
 8003818:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800381c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd fc16 	bl	8001050 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	833e0200 	.word	0x833e0200
 800384c:	40012708 	.word	0x40012708

08003850 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fdc5 	bl	80033ec <LL_ADC_REG_IsConversionOngoing>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d132      	bne.n	80038ce <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_ADC_Start+0x26>
 8003872:	2302      	movs	r3, #2
 8003874:	e02e      	b.n	80038d4 <HAL_ADC_Start+0x84>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa80 	bl	8003d84 <ADC_Enable>
 8003884:	4603      	mov	r3, r0
 8003886:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11a      	bne.n	80038c4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	221c      	movs	r2, #28
 80038ae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fd6f 	bl	80033a0 <LL_ADC_REG_StartConversion>
 80038c2:	e006      	b.n	80038d2 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80038cc:	e001      	b.n	80038d2 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
 80038d0:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_ADC_Stop+0x16>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e022      	b.n	8003938 <HAL_ADC_Stop+0x5c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f9fc 	bl	8003cf8 <ADC_ConversionStop>
 8003900:	4603      	mov	r3, r0
 8003902:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d111      	bne.n	800392e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fac0 	bl	8003e90 <ADC_Disable>
 8003910:	4603      	mov	r3, r0
 8003912:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003936:	7bfb      	ldrb	r3, [r7, #15]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2b08      	cmp	r3, #8
 8003950:	d102      	bne.n	8003958 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003952:	2308      	movs	r3, #8
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	e010      	b.n	800397a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e077      	b.n	8003a66 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003976:	2304      	movs	r3, #4
 8003978:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800397a:	f7fe fca7 	bl	80022cc <HAL_GetTick>
 800397e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003980:	e021      	b.n	80039c6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d01d      	beq.n	80039c6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800398a:	f7fe fc9f 	bl	80022cc <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <HAL_ADC_PollForConversion+0x60>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d112      	bne.n	80039c6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10b      	bne.n	80039c6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b2:	f043 0204 	orr.w	r2, r3, #4
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e04f      	b.n	8003a66 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0d6      	beq.n	8003982 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fbe6 	bl	80031b6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d031      	beq.n	8003a54 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	7e9b      	ldrb	r3, [r3, #26]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d12d      	bne.n	8003a54 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d126      	bne.n	8003a54 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fcee 	bl	80033ec <LL_ADC_REG_IsConversionOngoing>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d112      	bne.n	8003a3c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 020c 	bic.w	r2, r2, #12
 8003a24:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	f043 0201 	orr.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a3a:	e00b      	b.n	8003a54 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	f043 0201 	orr.w	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	7e1b      	ldrb	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	220c      	movs	r2, #12
 8003a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr
	...

08003a88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x28>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e110      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x24a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fc95 	bl	80033ec <LL_ADC_REG_IsConversionOngoing>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f040 80f7 	bne.w	8003cb8 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	f000 80b1 	beq.w	8003c36 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003adc:	d004      	beq.n	8003ae8 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8003cdc <HAL_ADC_ConfigChannel+0x254>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d108      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f7ff fb92 	bl	800321c <LL_ADC_REG_SetSequencerChAdd>
 8003af8:	e041      	b.n	8003b7e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	210f      	movs	r1, #15
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	401a      	ands	r2, r3
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d105      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0xa0>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0e9b      	lsrs	r3, r3, #26
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	e011      	b.n	8003b4c <HAL_ADC_ConfigChannel+0xc4>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003b40:	2320      	movs	r3, #32
 8003b42:	e003      	b.n	8003b4c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	6839      	ldr	r1, [r7, #0]
 8003b4e:	6849      	ldr	r1, [r1, #4]
 8003b50:	f001 011f 	and.w	r1, r1, #31
 8003b54:	408b      	lsls	r3, r1
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	089b      	lsrs	r3, r3, #2
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d808      	bhi.n	8003b7e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f7ff fb2e 	bl	80031da <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6819      	ldr	r1, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f7ff fb6b 	bl	8003266 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f280 8097 	bge.w	8003cc8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b9a:	4851      	ldr	r0, [pc, #324]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x258>)
 8003b9c:	f7ff fac8 	bl	8003130 <LL_ADC_GetCommonPathInternalCh>
 8003ba0:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a4f      	ldr	r2, [pc, #316]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x25c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d120      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d11b      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4848      	ldr	r0, [pc, #288]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x258>)
 8003bc0:	f7ff faa4 	bl	800310c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bc4:	4b48      	ldr	r3, [pc, #288]	@ (8003ce8 <HAL_ADC_ConfigChannel+0x260>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	099b      	lsrs	r3, r3, #6
 8003bca:	4a48      	ldr	r2, [pc, #288]	@ (8003cec <HAL_ADC_ConfigChannel+0x264>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	099b      	lsrs	r3, r3, #6
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003bde:	e002      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f9      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bec:	e06c      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a3f      	ldr	r2, [pc, #252]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x268>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10c      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d107      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4835      	ldr	r0, [pc, #212]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x258>)
 8003c0c:	f7ff fa7e 	bl	800310c <LL_ADC_SetCommonPathInternalCh>
 8003c10:	e05a      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a37      	ldr	r2, [pc, #220]	@ (8003cf4 <HAL_ADC_ConfigChannel+0x26c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d155      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d150      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	482c      	ldr	r0, [pc, #176]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x258>)
 8003c30:	f7ff fa6c 	bl	800310c <LL_ADC_SetCommonPathInternalCh>
 8003c34:	e048      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c3e:	d004      	beq.n	8003c4a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c44:	4a25      	ldr	r2, [pc, #148]	@ (8003cdc <HAL_ADC_ConfigChannel+0x254>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d107      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7ff faf3 	bl	8003240 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da32      	bge.n	8003cc8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c62:	481f      	ldr	r0, [pc, #124]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x258>)
 8003c64:	f7ff fa64 	bl	8003130 <LL_ADC_GetCommonPathInternalCh>
 8003c68:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x25c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d107      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4818      	ldr	r0, [pc, #96]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x258>)
 8003c7e:	f7ff fa45 	bl	800310c <LL_ADC_SetCommonPathInternalCh>
 8003c82:	e021      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a19      	ldr	r2, [pc, #100]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x268>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d107      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c94:	4619      	mov	r1, r3
 8003c96:	4812      	ldr	r0, [pc, #72]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x258>)
 8003c98:	f7ff fa38 	bl	800310c <LL_ADC_SetCommonPathInternalCh>
 8003c9c:	e014      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a14      	ldr	r2, [pc, #80]	@ (8003cf4 <HAL_ADC_ConfigChannel+0x26c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003cae:	4619      	mov	r1, r3
 8003cb0:	480b      	ldr	r0, [pc, #44]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x258>)
 8003cb2:	f7ff fa2b 	bl	800310c <LL_ADC_SetCommonPathInternalCh>
 8003cb6:	e007      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003cd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	80000004 	.word	0x80000004
 8003ce0:	40012708 	.word	0x40012708
 8003ce4:	b0001000 	.word	0xb0001000
 8003ce8:	20000000 	.word	0x20000000
 8003cec:	053e2d63 	.word	0x053e2d63
 8003cf0:	b8004000 	.word	0xb8004000
 8003cf4:	b4002000 	.word	0xb4002000

08003cf8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fb71 	bl	80033ec <LL_ADC_REG_IsConversionOngoing>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d033      	beq.n	8003d78 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fb31 	bl	800337c <LL_ADC_IsDisableOngoing>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d104      	bne.n	8003d2a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fb4e 	bl	80033c6 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d2a:	f7fe facf 	bl	80022cc <HAL_GetTick>
 8003d2e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d30:	e01b      	b.n	8003d6a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d32:	f7fe facb 	bl	80022cc <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d914      	bls.n	8003d6a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d52:	f043 0210 	orr.w	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e007      	b.n	8003d7a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1dc      	bne.n	8003d32 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fadf 	bl	8003358 <LL_ADC_IsEnabled>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d169      	bne.n	8003e74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	4b36      	ldr	r3, [pc, #216]	@ (8003e80 <ADC_Enable+0xfc>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00d      	beq.n	8003dca <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db2:	f043 0210 	orr.w	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbe:	f043 0201 	orr.w	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e055      	b.n	8003e76 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fa9c 	bl	800330c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003dd4:	482b      	ldr	r0, [pc, #172]	@ (8003e84 <ADC_Enable+0x100>)
 8003dd6:	f7ff f9ab 	bl	8003130 <LL_ADC_GetCommonPathInternalCh>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00f      	beq.n	8003e04 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003de4:	4b28      	ldr	r3, [pc, #160]	@ (8003e88 <ADC_Enable+0x104>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	099b      	lsrs	r3, r3, #6
 8003dea:	4a28      	ldr	r2, [pc, #160]	@ (8003e8c <ADC_Enable+0x108>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	099b      	lsrs	r3, r3, #6
 8003df2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003df4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003df6:	e002      	b.n	8003dfe <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f9      	bne.n	8003df8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7e5b      	ldrb	r3, [r3, #25]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d033      	beq.n	8003e74 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003e0c:	f7fe fa5e 	bl	80022cc <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e12:	e028      	b.n	8003e66 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fa9d 	bl	8003358 <LL_ADC_IsEnabled>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d104      	bne.n	8003e2e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fa6f 	bl	800330c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e2e:	f7fe fa4d 	bl	80022cc <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d914      	bls.n	8003e66 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d00d      	beq.n	8003e66 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4e:	f043 0210 	orr.w	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5a:	f043 0201 	orr.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e007      	b.n	8003e76 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d1cf      	bne.n	8003e14 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	80000017 	.word	0x80000017
 8003e84:	40012708 	.word	0x40012708
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	053e2d63 	.word	0x053e2d63

08003e90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fa6d 	bl	800337c <LL_ADC_IsDisableOngoing>
 8003ea2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff fa55 	bl	8003358 <LL_ADC_IsEnabled>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d047      	beq.n	8003f44 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d144      	bne.n	8003f44 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0305 	and.w	r3, r3, #5
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d10c      	bne.n	8003ee2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fa30 	bl	8003332 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eda:	f7fe f9f7 	bl	80022cc <HAL_GetTick>
 8003ede:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ee0:	e029      	b.n	8003f36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee6:	f043 0210 	orr.w	r2, r3, #16
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef2:	f043 0201 	orr.w	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e023      	b.n	8003f46 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003efe:	f7fe f9e5 	bl	80022cc <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d914      	bls.n	8003f36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00d      	beq.n	8003f36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1e:	f043 0210 	orr.w	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e007      	b.n	8003f46 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1dc      	bne.n	8003efe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <LL_ADC_SetCalibrationFactor>:
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f5e:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr

08003f76 <LL_ADC_GetCalibrationFactor>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <LL_ADC_Enable>:
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fa2:	f023 0317 	bic.w	r3, r3, #23
 8003fa6:	f043 0201 	orr.w	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	609a      	str	r2, [r3, #8]
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr

08003fb8 <LL_ADC_Disable>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fc8:	f023 0317 	bic.w	r3, r3, #23
 8003fcc:	f043 0202 	orr.w	r2, r3, #2
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <LL_ADC_IsEnabled>:
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <LL_ADC_IsEnabled+0x18>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <LL_ADC_IsEnabled+0x1a>
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <LL_ADC_StartCalibration>:
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004012:	f023 0317 	bic.w	r3, r3, #23
 8004016:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	609a      	str	r2, [r3, #8]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <LL_ADC_IsCalibrationOnGoing>:
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004038:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800403c:	d101      	bne.n	8004042 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b088      	sub	sp, #32
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_ADCEx_Calibration_Start+0x1e>
 8004068:	2302      	movs	r3, #2
 800406a:	e0b9      	b.n	80041e0 <HAL_ADCEx_Calibration_Start+0x192>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff ff0b 	bl	8003e90 <ADC_Disable>
 800407a:	4603      	mov	r3, r0
 800407c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ffab 	bl	8003fde <LL_ADC_IsEnabled>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 809d 	bne.w	80041ca <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004094:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004098:	f043 0202 	orr.w	r2, r3, #2
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	f248 0303 	movw	r3, #32771	@ 0x8003
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80040bc:	f023 0303 	bic.w	r3, r3, #3
 80040c0:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	e02e      	b.n	8004126 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff ff98 	bl	8004002 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040d2:	e014      	b.n	80040fe <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	3301      	adds	r3, #1
 80040d8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 80040e0:	d30d      	bcc.n	80040fe <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	f023 0312 	bic.w	r3, r3, #18
 80040ea:	f043 0210 	orr.w	r2, r3, #16
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e070      	b.n	80041e0 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff ff90 	bl	8004028 <LL_ADC_IsCalibrationOnGoing>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e2      	bne.n	80040d4 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff ff2f 	bl	8003f76 <LL_ADC_GetCalibrationFactor>
 8004118:	4602      	mov	r2, r0
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4413      	add	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	3301      	adds	r3, #1
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b07      	cmp	r3, #7
 800412a:	d9cd      	bls.n	80040c8 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff ff29 	bl	8003f92 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69b9      	ldr	r1, [r7, #24]
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff ff01 	bl	8003f4e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff ff31 	bl	8003fb8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004156:	f7fe f8b9 	bl	80022cc <HAL_GetTick>
 800415a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800415c:	e01c      	b.n	8004198 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800415e:	f7fe f8b5 	bl	80022cc <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d915      	bls.n	8004198 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff34 	bl	8003fde <LL_ADC_IsEnabled>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004180:	f043 0210 	orr.w	r2, r3, #16
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418c:	f043 0201 	orr.w	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e023      	b.n	80041e0 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ff1e 	bl	8003fde <LL_ADC_IsEnabled>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1da      	bne.n	800415e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68d9      	ldr	r1, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041bc:	f023 0303 	bic.w	r3, r3, #3
 80041c0:	f043 0201 	orr.w	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80041c8:	e005      	b.n	80041d6 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ce:	f043 0210 	orr.w	r2, r3, #16
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f8:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <__NVIC_SetPriorityGrouping+0x44>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004204:	4013      	ands	r3, r2
 8004206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004210:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800421a:	4a04      	ldr	r2, [pc, #16]	@ (800422c <__NVIC_SetPriorityGrouping+0x44>)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	60d3      	str	r3, [r2, #12]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004234:	4b04      	ldr	r3, [pc, #16]	@ (8004248 <__NVIC_GetPriorityGrouping+0x18>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	f003 0307 	and.w	r3, r3, #7
}
 800423e:	4618      	mov	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	e000ed00 	.word	0xe000ed00

0800424c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	2b00      	cmp	r3, #0
 800425c:	db0b      	blt.n	8004276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	f003 021f 	and.w	r2, r3, #31
 8004264:	4906      	ldr	r1, [pc, #24]	@ (8004280 <__NVIC_EnableIRQ+0x34>)
 8004266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2001      	movs	r0, #1
 800426e:	fa00 f202 	lsl.w	r2, r0, r2
 8004272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	e000e100 	.word	0xe000e100

08004284 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	2b00      	cmp	r3, #0
 8004294:	db12      	blt.n	80042bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	f003 021f 	and.w	r2, r3, #31
 800429c:	490a      	ldr	r1, [pc, #40]	@ (80042c8 <__NVIC_DisableIRQ+0x44>)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2001      	movs	r0, #1
 80042a6:	fa00 f202 	lsl.w	r2, r0, r2
 80042aa:	3320      	adds	r3, #32
 80042ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80042b0:	f3bf 8f4f 	dsb	sy
}
 80042b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042b6:	f3bf 8f6f 	isb	sy
}
 80042ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	e000e100 	.word	0xe000e100

080042cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	db0a      	blt.n	80042f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	490c      	ldr	r1, [pc, #48]	@ (8004318 <__NVIC_SetPriority+0x4c>)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	440b      	add	r3, r1
 80042f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f4:	e00a      	b.n	800430c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4908      	ldr	r1, [pc, #32]	@ (800431c <__NVIC_SetPriority+0x50>)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	3b04      	subs	r3, #4
 8004304:	0112      	lsls	r2, r2, #4
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	440b      	add	r3, r1
 800430a:	761a      	strb	r2, [r3, #24]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	e000e100 	.word	0xe000e100
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	@ 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f1c3 0307 	rsb	r3, r3, #7
 800433a:	2b04      	cmp	r3, #4
 800433c:	bf28      	it	cs
 800433e:	2304      	movcs	r3, #4
 8004340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3304      	adds	r3, #4
 8004346:	2b06      	cmp	r3, #6
 8004348:	d902      	bls.n	8004350 <NVIC_EncodePriority+0x30>
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3b03      	subs	r3, #3
 800434e:	e000      	b.n	8004352 <NVIC_EncodePriority+0x32>
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	f04f 32ff 	mov.w	r2, #4294967295
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	401a      	ands	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004368:	f04f 31ff 	mov.w	r1, #4294967295
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	43d9      	mvns	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004378:	4313      	orrs	r3, r2
         );
}
 800437a:	4618      	mov	r0, r3
 800437c:	3724      	adds	r7, #36	@ 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ff2b 	bl	80041e8 <__NVIC_SetPriorityGrouping>
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b086      	sub	sp, #24
 800439e:	af00      	add	r7, sp, #0
 80043a0:	4603      	mov	r3, r0
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043a8:	f7ff ff42 	bl	8004230 <__NVIC_GetPriorityGrouping>
 80043ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	6978      	ldr	r0, [r7, #20]
 80043b4:	f7ff ffb4 	bl	8004320 <NVIC_EncodePriority>
 80043b8:	4602      	mov	r2, r0
 80043ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff83 	bl	80042cc <__NVIC_SetPriority>
}
 80043c6:	bf00      	nop
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	4603      	mov	r3, r0
 80043d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff ff35 	bl	800424c <__NVIC_EnableIRQ>
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	4603      	mov	r3, r0
 80043f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80043f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ff43 	bl	8004284 <__NVIC_DisableIRQ>
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e08e      	b.n	8004538 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	4b47      	ldr	r3, [pc, #284]	@ (8004540 <HAL_DMA_Init+0x138>)
 8004422:	429a      	cmp	r2, r3
 8004424:	d80f      	bhi.n	8004446 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	4b45      	ldr	r3, [pc, #276]	@ (8004544 <HAL_DMA_Init+0x13c>)
 800442e:	4413      	add	r3, r2
 8004430:	4a45      	ldr	r2, [pc, #276]	@ (8004548 <HAL_DMA_Init+0x140>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	009a      	lsls	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a42      	ldr	r2, [pc, #264]	@ (800454c <HAL_DMA_Init+0x144>)
 8004442:	641a      	str	r2, [r3, #64]	@ 0x40
 8004444:	e00e      	b.n	8004464 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	4b40      	ldr	r3, [pc, #256]	@ (8004550 <HAL_DMA_Init+0x148>)
 800444e:	4413      	add	r3, r2
 8004450:	4a3d      	ldr	r2, [pc, #244]	@ (8004548 <HAL_DMA_Init+0x140>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	009a      	lsls	r2, r3, #2
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a3c      	ldr	r2, [pc, #240]	@ (8004554 <HAL_DMA_Init+0x14c>)
 8004462:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800447a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fb24 	bl	8004b04 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044c4:	d102      	bne.n	80044cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044d8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044e2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d010      	beq.n	800450e <HAL_DMA_Init+0x106>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d80c      	bhi.n	800450e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fb4d 	bl	8004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800450a:	605a      	str	r2, [r3, #4]
 800450c:	e008      	b.n	8004520 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40020407 	.word	0x40020407
 8004544:	bffdfff8 	.word	0xbffdfff8
 8004548:	cccccccd 	.word	0xcccccccd
 800454c:	40020000 	.word	0x40020000
 8004550:	bffdfbf8 	.word	0xbffdfbf8
 8004554:	40020400 	.word	0x40020400

08004558 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e07b      	b.n	8004662 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0201 	bic.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	4b3a      	ldr	r3, [pc, #232]	@ (800466c <HAL_DMA_DeInit+0x114>)
 8004582:	429a      	cmp	r2, r3
 8004584:	d80f      	bhi.n	80045a6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	4b38      	ldr	r3, [pc, #224]	@ (8004670 <HAL_DMA_DeInit+0x118>)
 800458e:	4413      	add	r3, r2
 8004590:	4a38      	ldr	r2, [pc, #224]	@ (8004674 <HAL_DMA_DeInit+0x11c>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	091b      	lsrs	r3, r3, #4
 8004598:	009a      	lsls	r2, r3, #2
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a35      	ldr	r2, [pc, #212]	@ (8004678 <HAL_DMA_DeInit+0x120>)
 80045a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80045a4:	e00e      	b.n	80045c4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b33      	ldr	r3, [pc, #204]	@ (800467c <HAL_DMA_DeInit+0x124>)
 80045ae:	4413      	add	r3, r2
 80045b0:	4a30      	ldr	r2, [pc, #192]	@ (8004674 <HAL_DMA_DeInit+0x11c>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	009a      	lsls	r2, r3, #2
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004680 <HAL_DMA_DeInit+0x128>)
 80045c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d0:	f003 021c 	and.w	r2, r3, #28
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d8:	2101      	movs	r1, #1
 80045da:	fa01 f202 	lsl.w	r2, r1, r2
 80045de:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fa8f 	bl	8004b04 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045f6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00f      	beq.n	8004620 <HAL_DMA_DeInit+0xc8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b04      	cmp	r3, #4
 8004606:	d80b      	bhi.n	8004620 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fac3 	bl	8004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800461e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40020407 	.word	0x40020407
 8004670:	bffdfff8 	.word	0xbffdfff8
 8004674:	cccccccd 	.word	0xcccccccd
 8004678:	40020000 	.word	0x40020000
 800467c:	bffdfbf8 	.word	0xbffdfbf8
 8004680:	40020400 	.word	0x40020400

08004684 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_DMA_Start_IT+0x20>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e069      	b.n	8004778 <HAL_DMA_Start_IT+0xf4>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d155      	bne.n	8004764 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f9d3 	bl	8004a88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 020e 	orr.w	r2, r2, #14
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e00f      	b.n	800471c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0204 	bic.w	r2, r2, #4
 800470a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 020a 	orr.w	r2, r2, #10
 800471a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d007      	beq.n	800473a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004738:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004750:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	e008      	b.n	8004776 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2280      	movs	r2, #128	@ 0x80
 8004768:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004776:	7dfb      	ldrb	r3, [r7, #23]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e04f      	b.n	8004832 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d008      	beq.n	80047b0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2204      	movs	r2, #4
 80047a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e040      	b.n	8004832 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 020e 	bic.w	r2, r2, #14
 80047be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0201 	bic.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e4:	f003 021c 	and.w	r2, r3, #28
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	2101      	movs	r1, #1
 80047ee:	fa01 f202 	lsl.w	r2, r1, r2
 80047f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00c      	beq.n	8004820 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004810:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004814:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800481e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d005      	beq.n	8004860 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2204      	movs	r2, #4
 8004858:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
 800485e:	e047      	b.n	80048f0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 020e 	bic.w	r2, r2, #14
 800486e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0201 	bic.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800488a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800488e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004894:	f003 021c 	and.w	r2, r3, #28
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	2101      	movs	r1, #1
 800489e:	fa01 f202 	lsl.w	r2, r1, r2
 80048a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00c      	beq.n	80048d0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
    }
  }
  return status;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004918:	f003 031c 	and.w	r3, r3, #28
 800491c:	2204      	movs	r2, #4
 800491e:	409a      	lsls	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d027      	beq.n	8004978 <HAL_DMA_IRQHandler+0x7c>
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d022      	beq.n	8004978 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d107      	bne.n	8004950 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0204 	bic.w	r2, r2, #4
 800494e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004954:	f003 021c 	and.w	r2, r3, #28
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	2104      	movs	r1, #4
 800495e:	fa01 f202 	lsl.w	r2, r1, r2
 8004962:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8081 	beq.w	8004a70 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004976:	e07b      	b.n	8004a70 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497c:	f003 031c 	and.w	r3, r3, #28
 8004980:	2202      	movs	r2, #2
 8004982:	409a      	lsls	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d03d      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x10c>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d038      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10b      	bne.n	80049bc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 020a 	bic.w	r2, r2, #10
 80049b2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	4b2e      	ldr	r3, [pc, #184]	@ (8004a7c <HAL_DMA_IRQHandler+0x180>)
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d909      	bls.n	80049dc <HAL_DMA_IRQHandler+0xe0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049cc:	f003 031c 	and.w	r3, r3, #28
 80049d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004a80 <HAL_DMA_IRQHandler+0x184>)
 80049d2:	2102      	movs	r1, #2
 80049d4:	fa01 f303 	lsl.w	r3, r1, r3
 80049d8:	6053      	str	r3, [r2, #4]
 80049da:	e008      	b.n	80049ee <HAL_DMA_IRQHandler+0xf2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e0:	f003 031c 	and.w	r3, r3, #28
 80049e4:	4a27      	ldr	r2, [pc, #156]	@ (8004a84 <HAL_DMA_IRQHandler+0x188>)
 80049e6:	2102      	movs	r1, #2
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d038      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004a06:	e033      	b.n	8004a70 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0c:	f003 031c 	and.w	r3, r3, #28
 8004a10:	2208      	movs	r2, #8
 8004a12:	409a      	lsls	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d02a      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x176>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d025      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 020e 	bic.w	r2, r2, #14
 8004a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3a:	f003 021c 	and.w	r2, r3, #28
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	2101      	movs	r1, #1
 8004a44:	fa01 f202 	lsl.w	r2, r1, r2
 8004a48:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
}
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40020080 	.word	0x40020080
 8004a80:	40020400 	.word	0x40020400
 8004a84:	40020000 	.word	0x40020000

08004a88 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a9e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ab0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab6:	f003 021c 	and.w	r2, r3, #28
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	2101      	movs	r1, #1
 8004ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d108      	bne.n	8004ae8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ae6:	e007      	b.n	8004af8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	60da      	str	r2, [r3, #12]
}
 8004af8:	bf00      	nop
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
	...

08004b04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	4b1c      	ldr	r3, [pc, #112]	@ (8004b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d813      	bhi.n	8004b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1c:	089b      	lsrs	r3, r3, #2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b24:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	3b08      	subs	r3, #8
 8004b34:	4a14      	ldr	r2, [pc, #80]	@ (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	e011      	b.n	8004b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	009a      	lsls	r2, r3, #2
 8004b48:	4b10      	ldr	r3, [pc, #64]	@ (8004b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004b4a:	4413      	add	r3, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	3b08      	subs	r3, #8
 8004b58:	4a0b      	ldr	r2, [pc, #44]	@ (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	3307      	adds	r3, #7
 8004b62:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a0a      	ldr	r2, [pc, #40]	@ (8004b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004b68:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	2201      	movs	r2, #1
 8004b72:	409a      	lsls	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40020407 	.word	0x40020407
 8004b88:	cccccccd 	.word	0xcccccccd
 8004b8c:	4002081c 	.word	0x4002081c
 8004b90:	40020880 	.word	0x40020880

08004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	461a      	mov	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a08      	ldr	r2, [pc, #32]	@ (8004bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004bb8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	1000823f 	.word	0x1000823f
 8004bd8:	40020940 	.word	0x40020940

08004bdc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004bea:	4b1c      	ldr	r3, [pc, #112]	@ (8004c5c <HAL_FLASH_Program+0x80>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_FLASH_Program+0x1a>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e02d      	b.n	8004c52 <HAL_FLASH_Program+0x76>
 8004bf6:	4b19      	ldr	r3, [pc, #100]	@ (8004c5c <HAL_FLASH_Program+0x80>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bfc:	4b17      	ldr	r3, [pc, #92]	@ (8004c5c <HAL_FLASH_Program+0x80>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c06:	f000 f869 	bl	8004cdc <FLASH_WaitForLastOperation>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11a      	bne.n	8004c4a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d105      	bne.n	8004c26 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c1e:	68b8      	ldr	r0, [r7, #8]
 8004c20:	f000 f8be 	bl	8004da0 <FLASH_Program_DoubleWord>
 8004c24:	e004      	b.n	8004c30 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	68b8      	ldr	r0, [r7, #8]
 8004c2c:	f000 f8de 	bl	8004dec <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c34:	f000 f852 	bl	8004cdc <FLASH_WaitForLastOperation>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004c3c:	4b08      	ldr	r3, [pc, #32]	@ (8004c60 <HAL_FLASH_Program+0x84>)
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	43db      	mvns	r3, r3
 8004c44:	4906      	ldr	r1, [pc, #24]	@ (8004c60 <HAL_FLASH_Program+0x84>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c4a:	4b04      	ldr	r3, [pc, #16]	@ (8004c5c <HAL_FLASH_Program+0x80>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000460 	.word	0x20000460
 8004c60:	58004000 	.word	0x58004000

08004c64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <HAL_FLASH_Unlock+0x38>)
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	da0b      	bge.n	8004c8e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004c76:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <HAL_FLASH_Unlock+0x38>)
 8004c78:	4a09      	ldr	r2, [pc, #36]	@ (8004ca0 <HAL_FLASH_Unlock+0x3c>)
 8004c7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004c7c:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <HAL_FLASH_Unlock+0x38>)
 8004c7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ca4 <HAL_FLASH_Unlock+0x40>)
 8004c80:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004c82:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <HAL_FLASH_Unlock+0x38>)
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	da01      	bge.n	8004c8e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	58004000 	.word	0x58004000
 8004ca0:	45670123 	.word	0x45670123
 8004ca4:	cdef89ab 	.word	0xcdef89ab

08004ca8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004cb2:	4b09      	ldr	r3, [pc, #36]	@ (8004cd8 <HAL_FLASH_Lock+0x30>)
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	4a08      	ldr	r2, [pc, #32]	@ (8004cd8 <HAL_FLASH_Lock+0x30>)
 8004cb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cbc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004cbe:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <HAL_FLASH_Lock+0x30>)
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	db01      	blt.n	8004cca <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004cca:	79fb      	ldrb	r3, [r7, #7]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	58004000 	.word	0x58004000

08004cdc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004ce4:	f7fd faf2 	bl	80022cc <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004cea:	e009      	b.n	8004d00 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004cec:	f7fd faee 	bl	80022cc <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d801      	bhi.n	8004d00 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e046      	b.n	8004d8e <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d00:	4b25      	ldr	r3, [pc, #148]	@ (8004d98 <FLASH_WaitForLastOperation+0xbc>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d0c:	d0ee      	beq.n	8004cec <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004d0e:	4b22      	ldr	r3, [pc, #136]	@ (8004d98 <FLASH_WaitForLastOperation+0xbc>)
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d98 <FLASH_WaitForLastOperation+0xbc>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d34:	d307      	bcc.n	8004d46 <FLASH_WaitForLastOperation+0x6a>
 8004d36:	4b18      	ldr	r3, [pc, #96]	@ (8004d98 <FLASH_WaitForLastOperation+0xbc>)
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d40:	4915      	ldr	r1, [pc, #84]	@ (8004d98 <FLASH_WaitForLastOperation+0xbc>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	618b      	str	r3, [r1, #24]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <FLASH_WaitForLastOperation+0x7e>
 8004d50:	4a11      	ldr	r2, [pc, #68]	@ (8004d98 <FLASH_WaitForLastOperation+0xbc>)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004d58:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004d60:	4a0e      	ldr	r2, [pc, #56]	@ (8004d9c <FLASH_WaitForLastOperation+0xc0>)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e011      	b.n	8004d8e <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004d6a:	f7fd faaf 	bl	80022cc <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d801      	bhi.n	8004d7e <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e007      	b.n	8004d8e <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004d7e:	4b06      	ldr	r3, [pc, #24]	@ (8004d98 <FLASH_WaitForLastOperation+0xbc>)
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d8a:	d0ee      	beq.n	8004d6a <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	58004000 	.word	0x58004000
 8004d9c:	20000460 	.word	0x20000460

08004da0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004dac:	4b0e      	ldr	r3, [pc, #56]	@ (8004de8 <FLASH_Program_DoubleWord+0x48>)
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	4a0d      	ldr	r2, [pc, #52]	@ (8004de8 <FLASH_Program_DoubleWord+0x48>)
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004dbe:	f3bf 8f6f 	isb	sy
}
 8004dc2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	000a      	movs	r2, r1
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	68f9      	ldr	r1, [r7, #12]
 8004dd6:	3104      	adds	r1, #4
 8004dd8:	4613      	mov	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	58004000 	.word	0x58004000

08004dec <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004dec:	b480      	push	{r7}
 8004dee:	b089      	sub	sp, #36	@ 0x24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004df6:	2340      	movs	r3, #64	@ 0x40
 8004df8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004e02:	4b18      	ldr	r3, [pc, #96]	@ (8004e64 <FLASH_Program_Fast+0x78>)
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	4a17      	ldr	r2, [pc, #92]	@ (8004e64 <FLASH_Program_Fast+0x78>)
 8004e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e0c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e12:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e14:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004e16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e18:	b672      	cpsid	i
}
 8004e1a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	3304      	adds	r3, #4
 8004e28:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004e30:	7ffb      	ldrb	r3, [r7, #31]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004e36:	7ffb      	ldrb	r3, [r7, #31]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1ef      	bne.n	8004e1c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004e3c:	bf00      	nop
 8004e3e:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <FLASH_Program_Fast+0x78>)
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e4a:	d0f8      	beq.n	8004e3e <FLASH_Program_Fast+0x52>
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f383 8810 	msr	PRIMASK, r3
}
 8004e56:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004e58:	bf00      	nop
 8004e5a:	3724      	adds	r7, #36	@ 0x24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	58004000 	.word	0x58004000

08004e68 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e72:	4b28      	ldr	r3, [pc, #160]	@ (8004f14 <HAL_FLASHEx_Erase+0xac>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_FLASHEx_Erase+0x16>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e046      	b.n	8004f0c <HAL_FLASHEx_Erase+0xa4>
 8004e7e:	4b25      	ldr	r3, [pc, #148]	@ (8004f14 <HAL_FLASHEx_Erase+0xac>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e84:	4b23      	ldr	r3, [pc, #140]	@ (8004f14 <HAL_FLASHEx_Erase+0xac>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e8e:	f7ff ff25 	bl	8004cdc <FLASH_WaitForLastOperation>
 8004e92:	4603      	mov	r3, r0
 8004e94:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d133      	bne.n	8004f04 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d108      	bne.n	8004eb6 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004ea4:	f000 f838 	bl	8004f18 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ea8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004eac:	f7ff ff16 	bl	8004cdc <FLASH_WaitForLastOperation>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]
 8004eb4:	e024      	b.n	8004f00 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebc:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	60bb      	str	r3, [r7, #8]
 8004ec4:	e012      	b.n	8004eec <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004ec6:	68b8      	ldr	r0, [r7, #8]
 8004ec8:	f000 f836 	bl	8004f38 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ecc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ed0:	f7ff ff04 	bl	8004cdc <FLASH_WaitForLastOperation>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	601a      	str	r2, [r3, #0]
          break;
 8004ee4:	e00a      	b.n	8004efc <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d3e4      	bcc.n	8004ec6 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004efc:	f000 f878 	bl	8004ff0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004f00:	f000 f832 	bl	8004f68 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f04:	4b03      	ldr	r3, [pc, #12]	@ (8004f14 <HAL_FLASHEx_Erase+0xac>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]

  return status;
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000460 	.word	0x20000460

08004f18 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004f1c:	4b05      	ldr	r3, [pc, #20]	@ (8004f34 <FLASH_MassErase+0x1c>)
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	4a04      	ldr	r2, [pc, #16]	@ (8004f34 <FLASH_MassErase+0x1c>)
 8004f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f26:	f043 0304 	orr.w	r3, r3, #4
 8004f2a:	6153      	str	r3, [r2, #20]
#endif
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr
 8004f34:	58004000 	.word	0x58004000

08004f38 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004f40:	4b08      	ldr	r3, [pc, #32]	@ (8004f64 <FLASH_PageErase+0x2c>)
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	4a05      	ldr	r2, [pc, #20]	@ (8004f64 <FLASH_PageErase+0x2c>)
 8004f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f54:	f043 0302 	orr.w	r3, r3, #2
 8004f58:	6153      	str	r3, [r2, #20]
#endif
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr
 8004f64:	58004000 	.word	0x58004000

08004f68 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d117      	bne.n	8004fa8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004f78:	4b1c      	ldr	r3, [pc, #112]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004f7e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f82:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004f84:	4b19      	ldr	r3, [pc, #100]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a18      	ldr	r2, [pc, #96]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004f8a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	4b16      	ldr	r3, [pc, #88]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a15      	ldr	r2, [pc, #84]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004f96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f9a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f9c:	4b13      	ldr	r3, [pc, #76]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a12      	ldr	r2, [pc, #72]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fa6:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004fa8:	4b10      	ldr	r3, [pc, #64]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d117      	bne.n	8004fe4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004fba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fbe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a09      	ldr	r2, [pc, #36]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004fc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a06      	ldr	r2, [pc, #24]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004fd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fd6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fd8:	4b04      	ldr	r3, [pc, #16]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a03      	ldr	r2, [pc, #12]	@ (8004fec <FLASH_FlushCaches+0x84>)
 8004fde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fe2:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr
 8004fec:	58004000 	.word	0x58004000

08004ff0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004ff4:	4b05      	ldr	r3, [pc, #20]	@ (800500c <FLASH_AcknowledgePageErase+0x1c>)
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	4a04      	ldr	r2, [pc, #16]	@ (800500c <FLASH_AcknowledgePageErase+0x1c>)
 8004ffa:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004ffe:	f023 0302 	bic.w	r3, r3, #2
 8005002:	6153      	str	r3, [r2, #20]
#endif
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr
 800500c:	58004000 	.word	0x58004000

08005010 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800501e:	e140      	b.n	80052a2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	2101      	movs	r1, #1
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	4013      	ands	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 8132 	beq.w	800529c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	2b01      	cmp	r3, #1
 8005042:	d005      	beq.n	8005050 <HAL_GPIO_Init+0x40>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d130      	bne.n	80050b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	2203      	movs	r2, #3
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	43db      	mvns	r3, r3
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4013      	ands	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005086:	2201      	movs	r2, #1
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43db      	mvns	r3, r3
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4013      	ands	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	f003 0201 	and.w	r2, r3, #1
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d017      	beq.n	80050ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	2203      	movs	r2, #3
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43db      	mvns	r3, r3
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4013      	ands	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d123      	bne.n	8005142 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	08da      	lsrs	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3208      	adds	r2, #8
 8005102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005106:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	220f      	movs	r2, #15
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43db      	mvns	r3, r3
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4013      	ands	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	08da      	lsrs	r2, r3, #3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3208      	adds	r2, #8
 800513c:	6939      	ldr	r1, [r7, #16]
 800513e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	2203      	movs	r2, #3
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43db      	mvns	r3, r3
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4013      	ands	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 0203 	and.w	r2, r3, #3
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 808c 	beq.w	800529c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005184:	4a4e      	ldr	r2, [pc, #312]	@ (80052c0 <HAL_GPIO_Init+0x2b0>)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	089b      	lsrs	r3, r3, #2
 800518a:	3302      	adds	r3, #2
 800518c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	2207      	movs	r2, #7
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	43db      	mvns	r3, r3
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4013      	ands	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80051ae:	d00d      	beq.n	80051cc <HAL_GPIO_Init+0x1bc>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a44      	ldr	r2, [pc, #272]	@ (80052c4 <HAL_GPIO_Init+0x2b4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d007      	beq.n	80051c8 <HAL_GPIO_Init+0x1b8>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a43      	ldr	r2, [pc, #268]	@ (80052c8 <HAL_GPIO_Init+0x2b8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d101      	bne.n	80051c4 <HAL_GPIO_Init+0x1b4>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e004      	b.n	80051ce <HAL_GPIO_Init+0x1be>
 80051c4:	2307      	movs	r3, #7
 80051c6:	e002      	b.n	80051ce <HAL_GPIO_Init+0x1be>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <HAL_GPIO_Init+0x1be>
 80051cc:	2300      	movs	r3, #0
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	f002 0203 	and.w	r2, r2, #3
 80051d4:	0092      	lsls	r2, r2, #2
 80051d6:	4093      	lsls	r3, r2
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80051de:	4938      	ldr	r1, [pc, #224]	@ (80052c0 <HAL_GPIO_Init+0x2b0>)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	089b      	lsrs	r3, r3, #2
 80051e4:	3302      	adds	r3, #2
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051ec:	4b37      	ldr	r3, [pc, #220]	@ (80052cc <HAL_GPIO_Init+0x2bc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	43db      	mvns	r3, r3
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4013      	ands	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005210:	4a2e      	ldr	r2, [pc, #184]	@ (80052cc <HAL_GPIO_Init+0x2bc>)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005216:	4b2d      	ldr	r3, [pc, #180]	@ (80052cc <HAL_GPIO_Init+0x2bc>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	43db      	mvns	r3, r3
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4013      	ands	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800523a:	4a24      	ldr	r2, [pc, #144]	@ (80052cc <HAL_GPIO_Init+0x2bc>)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005240:	4b22      	ldr	r3, [pc, #136]	@ (80052cc <HAL_GPIO_Init+0x2bc>)
 8005242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005246:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	43db      	mvns	r3, r3
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4013      	ands	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005266:	4a19      	ldr	r2, [pc, #100]	@ (80052cc <HAL_GPIO_Init+0x2bc>)
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800526e:	4b17      	ldr	r3, [pc, #92]	@ (80052cc <HAL_GPIO_Init+0x2bc>)
 8005270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005274:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	43db      	mvns	r3, r3
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4013      	ands	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005294:	4a0d      	ldr	r2, [pc, #52]	@ (80052cc <HAL_GPIO_Init+0x2bc>)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	3301      	adds	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f47f aeb7 	bne.w	8005020 <HAL_GPIO_Init+0x10>
  }
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	48000400 	.word	0x48000400
 80052c8:	48000800 	.word	0x48000800
 80052cc:	58000800 	.word	0x58000800

080052d0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80052de:	e0af      	b.n	8005440 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80052e0:	2201      	movs	r2, #1
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	4013      	ands	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80a2 	beq.w	800543a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80052f6:	4a59      	ldr	r2, [pc, #356]	@ (800545c <HAL_GPIO_DeInit+0x18c>)
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	089b      	lsrs	r3, r3, #2
 80052fc:	3302      	adds	r3, #2
 80052fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005302:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	2207      	movs	r2, #7
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4013      	ands	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800531e:	d00d      	beq.n	800533c <HAL_GPIO_DeInit+0x6c>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a4f      	ldr	r2, [pc, #316]	@ (8005460 <HAL_GPIO_DeInit+0x190>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d007      	beq.n	8005338 <HAL_GPIO_DeInit+0x68>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a4e      	ldr	r2, [pc, #312]	@ (8005464 <HAL_GPIO_DeInit+0x194>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d101      	bne.n	8005334 <HAL_GPIO_DeInit+0x64>
 8005330:	2302      	movs	r3, #2
 8005332:	e004      	b.n	800533e <HAL_GPIO_DeInit+0x6e>
 8005334:	2307      	movs	r3, #7
 8005336:	e002      	b.n	800533e <HAL_GPIO_DeInit+0x6e>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <HAL_GPIO_DeInit+0x6e>
 800533c:	2300      	movs	r3, #0
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	f002 0203 	and.w	r2, r2, #3
 8005344:	0092      	lsls	r2, r2, #2
 8005346:	4093      	lsls	r3, r2
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	429a      	cmp	r2, r3
 800534c:	d136      	bne.n	80053bc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800534e:	4b46      	ldr	r3, [pc, #280]	@ (8005468 <HAL_GPIO_DeInit+0x198>)
 8005350:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	43db      	mvns	r3, r3
 8005358:	4943      	ldr	r1, [pc, #268]	@ (8005468 <HAL_GPIO_DeInit+0x198>)
 800535a:	4013      	ands	r3, r2
 800535c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005360:	4b41      	ldr	r3, [pc, #260]	@ (8005468 <HAL_GPIO_DeInit+0x198>)
 8005362:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	43db      	mvns	r3, r3
 800536a:	493f      	ldr	r1, [pc, #252]	@ (8005468 <HAL_GPIO_DeInit+0x198>)
 800536c:	4013      	ands	r3, r2
 800536e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005372:	4b3d      	ldr	r3, [pc, #244]	@ (8005468 <HAL_GPIO_DeInit+0x198>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	43db      	mvns	r3, r3
 800537a:	493b      	ldr	r1, [pc, #236]	@ (8005468 <HAL_GPIO_DeInit+0x198>)
 800537c:	4013      	ands	r3, r2
 800537e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005380:	4b39      	ldr	r3, [pc, #228]	@ (8005468 <HAL_GPIO_DeInit+0x198>)
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	43db      	mvns	r3, r3
 8005388:	4937      	ldr	r1, [pc, #220]	@ (8005468 <HAL_GPIO_DeInit+0x198>)
 800538a:	4013      	ands	r3, r2
 800538c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	2207      	movs	r2, #7
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800539e:	4a2f      	ldr	r2, [pc, #188]	@ (800545c <HAL_GPIO_DeInit+0x18c>)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	3302      	adds	r3, #2
 80053a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	43da      	mvns	r2, r3
 80053ae:	482b      	ldr	r0, [pc, #172]	@ (800545c <HAL_GPIO_DeInit+0x18c>)
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	089b      	lsrs	r3, r3, #2
 80053b4:	400a      	ands	r2, r1
 80053b6:	3302      	adds	r3, #2
 80053b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	2103      	movs	r1, #3
 80053c6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	08da      	lsrs	r2, r3, #3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3208      	adds	r2, #8
 80053d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	220f      	movs	r2, #15
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	08d2      	lsrs	r2, r2, #3
 80053f0:	4019      	ands	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3208      	adds	r2, #8
 80053f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	2103      	movs	r1, #3
 8005404:	fa01 f303 	lsl.w	r3, r1, r3
 8005408:	43db      	mvns	r3, r3
 800540a:	401a      	ands	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	2101      	movs	r1, #1
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	fa01 f303 	lsl.w	r3, r1, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	401a      	ands	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	2103      	movs	r1, #3
 800542e:	fa01 f303 	lsl.w	r3, r1, r3
 8005432:	43db      	mvns	r3, r3
 8005434:	401a      	ands	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60da      	str	r2, [r3, #12]
    }

    position++;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	3301      	adds	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	f47f af49 	bne.w	80052e0 <HAL_GPIO_DeInit+0x10>
  }
}
 800544e:	bf00      	nop
 8005450:	bf00      	nop
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40010000 	.word	0x40010000
 8005460:	48000400 	.word	0x48000400
 8005464:	48000800 	.word	0x48000800
 8005468:	58000800 	.word	0x58000800

0800546c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	807b      	strh	r3, [r7, #2]
 8005478:	4613      	mov	r3, r2
 800547a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800547c:	787b      	ldrb	r3, [r7, #1]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005482:	887a      	ldrh	r2, [r7, #2]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005488:	e002      	b.n	8005490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800548a:	887a      	ldrh	r2, [r7, #2]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr

0800549a <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	460b      	mov	r3, r1
 80054a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054ac:	887a      	ldrh	r2, [r7, #2]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4013      	ands	r3, r2
 80054b2:	041a      	lsls	r2, r3, #16
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	43d9      	mvns	r1, r3
 80054b8:	887b      	ldrh	r3, [r7, #2]
 80054ba:	400b      	ands	r3, r1
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	619a      	str	r2, [r3, #24]
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e08d      	b.n	80055fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fc facc 	bl	8001a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2224      	movs	r2, #36	@ 0x24
 80054fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0201 	bic.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800551c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800552c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d107      	bne.n	8005546 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005542:	609a      	str	r2, [r3, #8]
 8005544:	e006      	b.n	8005554 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005552:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d108      	bne.n	800556e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800556a:	605a      	str	r2, [r3, #4]
 800556c:	e007      	b.n	800557e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800557c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800558c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005590:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69d9      	ldr	r1, [r3, #28]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1a      	ldr	r2, [r3, #32]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b20      	cmp	r3, #32
 8005616:	d138      	bne.n	800568a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005622:	2302      	movs	r3, #2
 8005624:	e032      	b.n	800568c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2224      	movs	r2, #36	@ 0x24
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005654:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6819      	ldr	r1, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0201 	orr.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	e000      	b.n	800568c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800568a:	2302      	movs	r3, #2
  }
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d139      	bne.n	8005720 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e033      	b.n	8005722 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2224      	movs	r2, #36	@ 0x24
 80056c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0201 	bic.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80056e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	e000      	b.n	8005722 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005720:	2302      	movs	r3, #2
  }
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr

0800572c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005730:	4b04      	ldr	r3, [pc, #16]	@ (8005744 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a03      	ldr	r2, [pc, #12]	@ (8005744 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800573a:	6013      	str	r3, [r2, #0]
}
 800573c:	bf00      	nop
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr
 8005744:	58000400 	.word	0x58000400

08005748 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10c      	bne.n	8005774 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800575a:	4b13      	ldr	r3, [pc, #76]	@ (80057a8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005766:	d10d      	bne.n	8005784 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005768:	f000 f83c 	bl	80057e4 <HAL_PWREx_DisableLowPowerRunMode>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d008      	beq.n	8005784 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8005772:	e015      	b.n	80057a0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005774:	4b0c      	ldr	r3, [pc, #48]	@ (80057a8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005780:	f000 f822 	bl	80057c8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005784:	4b09      	ldr	r3, [pc, #36]	@ (80057ac <HAL_PWR_EnterSLEEPMode+0x64>)
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	4a08      	ldr	r2, [pc, #32]	@ (80057ac <HAL_PWR_EnterSLEEPMode+0x64>)
 800578a:	f023 0304 	bic.w	r3, r3, #4
 800578e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005796:	bf30      	wfi
 8005798:	e002      	b.n	80057a0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800579a:	bf40      	sev
    __WFE();
 800579c:	bf20      	wfe
    __WFE();
 800579e:	bf20      	wfe
  }
}
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	58000400 	.word	0x58000400
 80057ac:	e000ed00 	.word	0xe000ed00

080057b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80057b4:	4b03      	ldr	r3, [pc, #12]	@ (80057c4 <HAL_PWREx_GetVoltageRange+0x14>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80057bc:	4618      	mov	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr
 80057c4:	58000400 	.word	0x58000400

080057c8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80057cc:	4b04      	ldr	r3, [pc, #16]	@ (80057e0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a03      	ldr	r2, [pc, #12]	@ (80057e0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80057d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057d6:	6013      	str	r3, [r2, #0]
}
 80057d8:	bf00      	nop
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	58000400 	.word	0x58000400

080057e4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80057ea:	4b16      	ldr	r3, [pc, #88]	@ (8005844 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a15      	ldr	r2, [pc, #84]	@ (8005844 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80057f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057f4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80057f6:	4b14      	ldr	r3, [pc, #80]	@ (8005848 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2232      	movs	r2, #50	@ 0x32
 80057fc:	fb02 f303 	mul.w	r3, r2, r3
 8005800:	4a12      	ldr	r2, [pc, #72]	@ (800584c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	0c9b      	lsrs	r3, r3, #18
 8005808:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800580a:	e002      	b.n	8005812 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3b01      	subs	r3, #1
 8005810:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005812:	4b0c      	ldr	r3, [pc, #48]	@ (8005844 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800581a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800581e:	d102      	bne.n	8005826 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f2      	bne.n	800580c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005826:	4b07      	ldr	r3, [pc, #28]	@ (8005844 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800582e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005832:	d101      	bne.n	8005838 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e000      	b.n	800583a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr
 8005844:	58000400 	.word	0x58000400
 8005848:	20000000 	.word	0x20000000
 800584c:	431bde83 	.word	0x431bde83

08005850 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800585a:	4b10      	ldr	r3, [pc, #64]	@ (800589c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 0307 	bic.w	r3, r3, #7
 8005862:	4a0e      	ldr	r2, [pc, #56]	@ (800589c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005864:	f043 0302 	orr.w	r3, r3, #2
 8005868:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800586a:	4b0d      	ldr	r3, [pc, #52]	@ (80058a0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	4a0c      	ldr	r2, [pc, #48]	@ (80058a0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005870:	f043 0304 	orr.w	r3, r3, #4
 8005874:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800587c:	bf30      	wfi
 800587e:	e002      	b.n	8005886 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005880:	bf40      	sev
    __WFE();
 8005882:	bf20      	wfe
    __WFE();
 8005884:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005886:	4b06      	ldr	r3, [pc, #24]	@ (80058a0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	4a05      	ldr	r2, [pc, #20]	@ (80058a0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800588c:	f023 0304 	bic.w	r3, r3, #4
 8005890:	6113      	str	r3, [r2, #16]
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr
 800589c:	58000400 	.word	0x58000400
 80058a0:	e000ed00 	.word	0xe000ed00

080058a4 <LL_PWR_IsEnabledBkUpAccess>:
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80058a8:	4b06      	ldr	r3, [pc, #24]	@ (80058c4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058b4:	d101      	bne.n	80058ba <LL_PWR_IsEnabledBkUpAccess+0x16>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr
 80058c4:	58000400 	.word	0x58000400

080058c8 <LL_RCC_HSE_EnableTcxo>:
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80058cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80058da:	6013      	str	r3, [r2, #0]
}
 80058dc:	bf00      	nop
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr

080058e4 <LL_RCC_HSE_DisableTcxo>:
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058f6:	6013      	str	r3, [r2, #0]
}
 80058f8:	bf00      	nop
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800590e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005912:	d101      	bne.n	8005918 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr

08005922 <LL_RCC_HSE_Enable>:
{
 8005922:	b480      	push	{r7}
 8005924:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005934:	6013      	str	r3, [r2, #0]
}
 8005936:	bf00      	nop
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr

0800593e <LL_RCC_HSE_Disable>:
{
 800593e:	b480      	push	{r7}
 8005940:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800594c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005950:	6013      	str	r3, [r2, #0]
}
 8005952:	bf00      	nop
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr

0800595a <LL_RCC_HSE_IsReady>:
{
 800595a:	b480      	push	{r7}
 800595c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800595e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005968:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800596c:	d101      	bne.n	8005972 <LL_RCC_HSE_IsReady+0x18>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <LL_RCC_HSE_IsReady+0x1a>
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <LL_RCC_HSI_Enable>:
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800598a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	bf00      	nop
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr

08005998 <LL_RCC_HSI_Disable>:
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800599c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059aa:	6013      	str	r3, [r2, #0]
}
 80059ac:	bf00      	nop
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr

080059b4 <LL_RCC_HSI_IsReady>:
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80059b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059c6:	d101      	bne.n	80059cc <LL_RCC_HSI_IsReady+0x18>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <LL_RCC_HSI_IsReady+0x1a>
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr

080059d6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80059de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	061b      	lsls	r3, r3, #24
 80059ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059f0:	4313      	orrs	r3, r2
 80059f2:	604b      	str	r3, [r1, #4]
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr

080059fe <LL_RCC_LSE_IsReady>:
{
 80059fe:	b480      	push	{r7}
 8005a00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d101      	bne.n	8005a16 <LL_RCC_LSE_IsReady+0x18>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <LL_RCC_LSE_IsReady+0x1a>
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr

08005a20 <LL_RCC_LSI_Enable>:
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a30:	f043 0301 	orr.w	r3, r3, #1
 8005a34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005a38:	bf00      	nop
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <LL_RCC_LSI_Disable>:
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005a58:	bf00      	nop
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <LL_RCC_LSI_IsReady>:
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d101      	bne.n	8005a78 <LL_RCC_LSI_IsReady+0x18>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <LL_RCC_LSI_IsReady+0x1a>
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr

08005a82 <LL_RCC_MSI_Enable>:
{
 8005a82:	b480      	push	{r7}
 8005a84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	6013      	str	r3, [r2, #0]
}
 8005a96:	bf00      	nop
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr

08005a9e <LL_RCC_MSI_Disable>:
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aac:	f023 0301 	bic.w	r3, r3, #1
 8005ab0:	6013      	str	r3, [r2, #0]
}
 8005ab2:	bf00      	nop
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr

08005aba <LL_RCC_MSI_IsReady>:
{
 8005aba:	b480      	push	{r7}
 8005abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d101      	bne.n	8005ad0 <LL_RCC_MSI_IsReady+0x16>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <LL_RCC_MSI_IsReady+0x18>
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr

08005ada <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005ada:	b480      	push	{r7}
 8005adc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d101      	bne.n	8005af0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr

08005afa <LL_RCC_MSI_GetRange>:
{
 8005afa:	b480      	push	{r7}
 8005afc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005afe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr

08005b28 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <LL_RCC_SetSysClkSource>:
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f023 0203 	bic.w	r2, r3, #3
 8005b62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	608b      	str	r3, [r1, #8]
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr

08005b76 <LL_RCC_GetSysClkSource>:
{
 8005b76:	b480      	push	{r7}
 8005b78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 030c 	and.w	r3, r3, #12
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bc80      	pop	{r7}
 8005b8a:	4770      	bx	lr

08005b8c <LL_RCC_SetAHBPrescaler>:
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	608b      	str	r3, [r1, #8]
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <LL_RCC_SetAHB3Prescaler>:
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005bc2:	f023 020f 	bic.w	r2, r3, #15
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	091b      	lsrs	r3, r3, #4
 8005bca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr

08005bde <LL_RCC_SetAPB1Prescaler>:
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bf0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	608b      	str	r3, [r1, #8]
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <LL_RCC_SetAPB2Prescaler>:
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	608b      	str	r3, [r1, #8]
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <LL_RCC_GetAHBPrescaler>:
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr

08005c40 <LL_RCC_GetAHB3Prescaler>:
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c48:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr

08005c5a <LL_RCC_GetAPB1Prescaler>:
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005c5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <LL_RCC_GetAPB2Prescaler>:
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bc80      	pop	{r7}
 8005c84:	4770      	bx	lr

08005c86 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005c86:	b480      	push	{r7}
 8005c88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c98:	6013      	str	r3, [r2, #0]
}
 8005c9a:	bf00      	nop
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr

08005ca2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cb4:	6013      	str	r3, [r2, #0]
}
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ccc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cd0:	d101      	bne.n	8005cd6 <LL_RCC_PLL_IsReady+0x18>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <LL_RCC_PLL_IsReady+0x1a>
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr

08005ce0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	0a1b      	lsrs	r3, r3, #8
 8005cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr

08005d0e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d4c:	d101      	bne.n	8005d52 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e000      	b.n	8005d54 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d64:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d70:	d101      	bne.n	8005d76 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e000      	b.n	8005d78 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr

08005d80 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d92:	d101      	bne.n	8005d98 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr

08005da2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005da2:	b480      	push	{r7}
 8005da4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005db0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005db4:	d101      	bne.n	8005dba <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e36f      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dd6:	f7ff fece 	bl	8005b76 <LL_RCC_GetSysClkSource>
 8005dda:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ddc:	f7ff ffa2 	bl	8005d24 <LL_RCC_PLL_GetMainSource>
 8005de0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 80c4 	beq.w	8005f78 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_RCC_OscConfig+0x3e>
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	2b0c      	cmp	r3, #12
 8005dfa:	d176      	bne.n	8005eea <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d173      	bne.n	8005eea <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e353      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <HAL_RCC_OscConfig+0x68>
 8005e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e2a:	e006      	b.n	8005e3a <HAL_RCC_OscConfig+0x76>
 8005e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e34:	091b      	lsrs	r3, r3, #4
 8005e36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d222      	bcs.n	8005e84 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fd3c 	bl	80068c0 <RCC_SetFlashLatencyFromMSIRange>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e331      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e5c:	f043 0308 	orr.w	r3, r3, #8
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e74:	4313      	orrs	r3, r2
 8005e76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff fe53 	bl	8005b28 <LL_RCC_MSI_SetCalibTrimming>
 8005e82:	e021      	b.n	8005ec8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e8e:	f043 0308 	orr.w	r3, r3, #8
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fe3a 	bl	8005b28 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fd01 	bl	80068c0 <RCC_SetFlashLatencyFromMSIRange>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e2f6      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ec8:	f000 fcc2 	bl	8006850 <HAL_RCC_GetHCLKFreq>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	4aa7      	ldr	r2, [pc, #668]	@ (800616c <HAL_RCC_OscConfig+0x3a8>)
 8005ed0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8005ed2:	4ba7      	ldr	r3, [pc, #668]	@ (8006170 <HAL_RCC_OscConfig+0x3ac>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fc f9ee 	bl	80022b8 <HAL_InitTick>
 8005edc:	4603      	mov	r3, r0
 8005ede:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005ee0:	7cfb      	ldrb	r3, [r7, #19]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d047      	beq.n	8005f76 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005ee6:	7cfb      	ldrb	r3, [r7, #19]
 8005ee8:	e2e5      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d02c      	beq.n	8005f4c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ef2:	f7ff fdc6 	bl	8005a82 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ef6:	f7fc f9e9 	bl	80022cc <HAL_GetTick>
 8005efa:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005efc:	e008      	b.n	8005f10 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005efe:	f7fc f9e5 	bl	80022cc <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e2d2      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f10:	f7ff fdd3 	bl	8005aba <LL_RCC_MSI_IsReady>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0f1      	beq.n	8005efe <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f24:	f043 0308 	orr.w	r3, r3, #8
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff fdef 	bl	8005b28 <LL_RCC_MSI_SetCalibTrimming>
 8005f4a:	e015      	b.n	8005f78 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f4c:	f7ff fda7 	bl	8005a9e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f50:	f7fc f9bc 	bl	80022cc <HAL_GetTick>
 8005f54:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f58:	f7fc f9b8 	bl	80022cc <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e2a5      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f6a:	f7ff fda6 	bl	8005aba <LL_RCC_MSI_IsReady>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1f1      	bne.n	8005f58 <HAL_RCC_OscConfig+0x194>
 8005f74:	e000      	b.n	8005f78 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005f76:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d058      	beq.n	8006036 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d005      	beq.n	8005f96 <HAL_RCC_OscConfig+0x1d2>
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	2b0c      	cmp	r3, #12
 8005f8e:	d108      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d105      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d14b      	bne.n	8006036 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e289      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc0:	d102      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x204>
 8005fc2:	f7ff fcae 	bl	8005922 <LL_RCC_HSE_Enable>
 8005fc6:	e00d      	b.n	8005fe4 <HAL_RCC_OscConfig+0x220>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005fd0:	d104      	bne.n	8005fdc <HAL_RCC_OscConfig+0x218>
 8005fd2:	f7ff fc79 	bl	80058c8 <LL_RCC_HSE_EnableTcxo>
 8005fd6:	f7ff fca4 	bl	8005922 <LL_RCC_HSE_Enable>
 8005fda:	e003      	b.n	8005fe4 <HAL_RCC_OscConfig+0x220>
 8005fdc:	f7ff fcaf 	bl	800593e <LL_RCC_HSE_Disable>
 8005fe0:	f7ff fc80 	bl	80058e4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d012      	beq.n	8006012 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fec:	f7fc f96e 	bl	80022cc <HAL_GetTick>
 8005ff0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ff4:	f7fc f96a 	bl	80022cc <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b64      	cmp	r3, #100	@ 0x64
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e257      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006006:	f7ff fca8 	bl	800595a <LL_RCC_HSE_IsReady>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f1      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x230>
 8006010:	e011      	b.n	8006036 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006012:	f7fc f95b 	bl	80022cc <HAL_GetTick>
 8006016:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800601a:	f7fc f957 	bl	80022cc <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b64      	cmp	r3, #100	@ 0x64
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e244      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800602c:	f7ff fc95 	bl	800595a <LL_RCC_HSE_IsReady>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f1      	bne.n	800601a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d046      	beq.n	80060d0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	2b04      	cmp	r3, #4
 8006046:	d005      	beq.n	8006054 <HAL_RCC_OscConfig+0x290>
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	2b0c      	cmp	r3, #12
 800604c:	d10e      	bne.n	800606c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d10b      	bne.n	800606c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e22a      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff fcb6 	bl	80059d6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800606a:	e031      	b.n	80060d0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d019      	beq.n	80060a8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006074:	f7ff fc82 	bl	800597c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fc f928 	bl	80022cc <HAL_GetTick>
 800607c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006080:	f7fc f924 	bl	80022cc <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e211      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006092:	f7ff fc8f 	bl	80059b4 <LL_RCC_HSI_IsReady>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0f1      	beq.n	8006080 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff fc98 	bl	80059d6 <LL_RCC_HSI_SetCalibTrimming>
 80060a6:	e013      	b.n	80060d0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060a8:	f7ff fc76 	bl	8005998 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fc f90e 	bl	80022cc <HAL_GetTick>
 80060b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b4:	f7fc f90a 	bl	80022cc <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e1f7      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80060c6:	f7ff fc75 	bl	80059b4 <LL_RCC_HSI_IsReady>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1f1      	bne.n	80060b4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d06e      	beq.n	80061ba <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d056      	beq.n	8006192 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80060e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ec:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69da      	ldr	r2, [r3, #28]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d031      	beq.n	8006160 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d006      	beq.n	8006114 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e1d0      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d013      	beq.n	8006146 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800611e:	f7ff fc8f 	bl	8005a40 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006122:	f7fc f8d3 	bl	80022cc <HAL_GetTick>
 8006126:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800612a:	f7fc f8cf 	bl	80022cc <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b11      	cmp	r3, #17
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e1bc      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800613c:	f7ff fc90 	bl	8005a60 <LL_RCC_LSI_IsReady>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f1      	bne.n	800612a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800614a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800614e:	f023 0210 	bic.w	r2, r3, #16
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006160:	f7ff fc5e 	bl	8005a20 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006164:	f7fc f8b2 	bl	80022cc <HAL_GetTick>
 8006168:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800616a:	e00c      	b.n	8006186 <HAL_RCC_OscConfig+0x3c2>
 800616c:	20000000 	.word	0x20000000
 8006170:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006174:	f7fc f8aa 	bl	80022cc <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b11      	cmp	r3, #17
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e197      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006186:	f7ff fc6b 	bl	8005a60 <LL_RCC_LSI_IsReady>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f1      	beq.n	8006174 <HAL_RCC_OscConfig+0x3b0>
 8006190:	e013      	b.n	80061ba <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006192:	f7ff fc55 	bl	8005a40 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006196:	f7fc f899 	bl	80022cc <HAL_GetTick>
 800619a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800619e:	f7fc f895 	bl	80022cc <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b11      	cmp	r3, #17
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e182      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80061b0:	f7ff fc56 	bl	8005a60 <LL_RCC_LSI_IsReady>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f1      	bne.n	800619e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 80d8 	beq.w	8006378 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80061c8:	f7ff fb6c 	bl	80058a4 <LL_PWR_IsEnabledBkUpAccess>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d113      	bne.n	80061fa <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80061d2:	f7ff faab 	bl	800572c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061d6:	f7fc f879 	bl	80022cc <HAL_GetTick>
 80061da:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061de:	f7fc f875 	bl	80022cc <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e162      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80061f0:	f7ff fb58 	bl	80058a4 <LL_PWR_IsEnabledBkUpAccess>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0f1      	beq.n	80061de <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d07b      	beq.n	80062fa <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	2b85      	cmp	r3, #133	@ 0x85
 8006208:	d003      	beq.n	8006212 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2b05      	cmp	r3, #5
 8006210:	d109      	bne.n	8006226 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800621e:	f043 0304 	orr.w	r3, r3, #4
 8006222:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006226:	f7fc f851 	bl	80022cc <HAL_GetTick>
 800622a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800622c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006234:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006238:	f043 0301 	orr.w	r3, r3, #1
 800623c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006240:	e00a      	b.n	8006258 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006242:	f7fc f843 	bl	80022cc <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006250:	4293      	cmp	r3, r2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e12e      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006258:	f7ff fbd1 	bl	80059fe <LL_RCC_LSE_IsReady>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0ef      	beq.n	8006242 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	2b81      	cmp	r3, #129	@ 0x81
 8006268:	d003      	beq.n	8006272 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	2b85      	cmp	r3, #133	@ 0x85
 8006270:	d121      	bne.n	80062b6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006272:	f7fc f82b 	bl	80022cc <HAL_GetTick>
 8006276:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800627c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800628c:	e00a      	b.n	80062a4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800628e:	f7fc f81d 	bl	80022cc <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800629c:	4293      	cmp	r3, r2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e108      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80062a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0ec      	beq.n	800628e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80062b4:	e060      	b.n	8006378 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b6:	f7fc f809 	bl	80022cc <HAL_GetTick>
 80062ba:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80062bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062d0:	e00a      	b.n	80062e8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d2:	f7fb fffb 	bl	80022cc <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e0e6      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1ec      	bne.n	80062d2 <HAL_RCC_OscConfig+0x50e>
 80062f8:	e03e      	b.n	8006378 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062fa:	f7fb ffe7 	bl	80022cc <HAL_GetTick>
 80062fe:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006308:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800630c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006314:	e00a      	b.n	800632c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006316:	f7fb ffd9 	bl	80022cc <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006324:	4293      	cmp	r3, r2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e0c4      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800632c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1ec      	bne.n	8006316 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800633c:	f7fb ffc6 	bl	80022cc <HAL_GetTick>
 8006340:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006356:	e00a      	b.n	800636e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006358:	f7fb ffb8 	bl	80022cc <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006366:	4293      	cmp	r3, r2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e0a3      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800636e:	f7ff fb46 	bl	80059fe <LL_RCC_LSE_IsReady>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1ef      	bne.n	8006358 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8099 	beq.w	80064b4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	2b0c      	cmp	r3, #12
 8006386:	d06c      	beq.n	8006462 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	2b02      	cmp	r3, #2
 800638e:	d14b      	bne.n	8006428 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006390:	f7ff fc87 	bl	8005ca2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006394:	f7fb ff9a 	bl	80022cc <HAL_GetTick>
 8006398:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800639c:	f7fb ff96 	bl	80022cc <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b0a      	cmp	r3, #10
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e083      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80063ae:	f7ff fc86 	bl	8005cbe <LL_RCC_PLL_IsReady>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f1      	bne.n	800639c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	4b40      	ldr	r3, [pc, #256]	@ (80064c0 <HAL_RCC_OscConfig+0x6fc>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80063ca:	4311      	orrs	r1, r2
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80063d0:	0212      	lsls	r2, r2, #8
 80063d2:	4311      	orrs	r1, r2
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80063d8:	4311      	orrs	r1, r2
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80063de:	4311      	orrs	r1, r2
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80063e4:	430a      	orrs	r2, r1
 80063e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063ee:	f7ff fc4a 	bl	8005c86 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006400:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006402:	f7fb ff63 	bl	80022cc <HAL_GetTick>
 8006406:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640a:	f7fb ff5f 	bl	80022cc <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b0a      	cmp	r3, #10
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e04c      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800641c:	f7ff fc4f 	bl	8005cbe <LL_RCC_PLL_IsReady>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f1      	beq.n	800640a <HAL_RCC_OscConfig+0x646>
 8006426:	e045      	b.n	80064b4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006428:	f7ff fc3b 	bl	8005ca2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642c:	f7fb ff4e 	bl	80022cc <HAL_GetTick>
 8006430:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006434:	f7fb ff4a 	bl	80022cc <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b0a      	cmp	r3, #10
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e037      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006446:	f7ff fc3a 	bl	8005cbe <LL_RCC_PLL_IsReady>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1f1      	bne.n	8006434 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800645a:	4b1a      	ldr	r3, [pc, #104]	@ (80064c4 <HAL_RCC_OscConfig+0x700>)
 800645c:	4013      	ands	r3, r2
 800645e:	60cb      	str	r3, [r1, #12]
 8006460:	e028      	b.n	80064b4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e023      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800646e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	f003 0203 	and.w	r2, r3, #3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006480:	429a      	cmp	r2, r3
 8006482:	d115      	bne.n	80064b0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800648e:	429a      	cmp	r2, r3
 8006490:	d10e      	bne.n	80064b0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649c:	021b      	lsls	r3, r3, #8
 800649e:	429a      	cmp	r2, r3
 80064a0:	d106      	bne.n	80064b0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d001      	beq.n	80064b4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	11c1808c 	.word	0x11c1808c
 80064c4:	eefefffc 	.word	0xeefefffc

080064c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e10f      	b.n	80066fc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064dc:	4b89      	ldr	r3, [pc, #548]	@ (8006704 <HAL_RCC_ClockConfig+0x23c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d91b      	bls.n	8006522 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ea:	4b86      	ldr	r3, [pc, #536]	@ (8006704 <HAL_RCC_ClockConfig+0x23c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f023 0207 	bic.w	r2, r3, #7
 80064f2:	4984      	ldr	r1, [pc, #528]	@ (8006704 <HAL_RCC_ClockConfig+0x23c>)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064fa:	f7fb fee7 	bl	80022cc <HAL_GetTick>
 80064fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006500:	e008      	b.n	8006514 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006502:	f7fb fee3 	bl	80022cc <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e0f3      	b.n	80066fc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006514:	4b7b      	ldr	r3, [pc, #492]	@ (8006704 <HAL_RCC_ClockConfig+0x23c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d1ef      	bne.n	8006502 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d016      	beq.n	800655c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fb2a 	bl	8005b8c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006538:	f7fb fec8 	bl	80022cc <HAL_GetTick>
 800653c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800653e:	e008      	b.n	8006552 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006540:	f7fb fec4 	bl	80022cc <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e0d4      	b.n	80066fc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006552:	f7ff fbf2 	bl	8005d3a <LL_RCC_IsActiveFlag_HPRE>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0f1      	beq.n	8006540 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d016      	beq.n	8006596 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fb20 	bl	8005bb2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006572:	f7fb feab 	bl	80022cc <HAL_GetTick>
 8006576:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006578:	e008      	b.n	800658c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800657a:	f7fb fea7 	bl	80022cc <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e0b7      	b.n	80066fc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800658c:	f7ff fbe6 	bl	8005d5c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0f1      	beq.n	800657a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d016      	beq.n	80065d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff fb19 	bl	8005bde <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065ac:	f7fb fe8e 	bl	80022cc <HAL_GetTick>
 80065b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065b4:	f7fb fe8a 	bl	80022cc <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e09a      	b.n	80066fc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80065c6:	f7ff fbdb 	bl	8005d80 <LL_RCC_IsActiveFlag_PPRE1>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f1      	beq.n	80065b4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d017      	beq.n	800660c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff fb0e 	bl	8005c04 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065e8:	f7fb fe70 	bl	80022cc <HAL_GetTick>
 80065ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065f0:	f7fb fe6c 	bl	80022cc <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e07c      	b.n	80066fc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006602:	f7ff fbce 	bl	8005da2 <LL_RCC_IsActiveFlag_PPRE2>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0f1      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d043      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d106      	bne.n	800662e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006620:	f7ff f99b 	bl	800595a <LL_RCC_HSE_IsReady>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d11e      	bne.n	8006668 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e066      	b.n	80066fc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b03      	cmp	r3, #3
 8006634:	d106      	bne.n	8006644 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006636:	f7ff fb42 	bl	8005cbe <LL_RCC_PLL_IsReady>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d113      	bne.n	8006668 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e05b      	b.n	80066fc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800664c:	f7ff fa35 	bl	8005aba <LL_RCC_MSI_IsReady>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d108      	bne.n	8006668 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e050      	b.n	80066fc <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800665a:	f7ff f9ab 	bl	80059b4 <LL_RCC_HSI_IsReady>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e049      	b.n	80066fc <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff fa6f 	bl	8005b50 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006672:	f7fb fe2b 	bl	80022cc <HAL_GetTick>
 8006676:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006678:	e00a      	b.n	8006690 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800667a:	f7fb fe27 	bl	80022cc <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006688:	4293      	cmp	r3, r2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e035      	b.n	80066fc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006690:	f7ff fa71 	bl	8005b76 <LL_RCC_GetSysClkSource>
 8006694:	4602      	mov	r2, r0
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	429a      	cmp	r2, r3
 800669e:	d1ec      	bne.n	800667a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066a0:	4b18      	ldr	r3, [pc, #96]	@ (8006704 <HAL_RCC_ClockConfig+0x23c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d21b      	bcs.n	80066e6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ae:	4b15      	ldr	r3, [pc, #84]	@ (8006704 <HAL_RCC_ClockConfig+0x23c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f023 0207 	bic.w	r2, r3, #7
 80066b6:	4913      	ldr	r1, [pc, #76]	@ (8006704 <HAL_RCC_ClockConfig+0x23c>)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066be:	f7fb fe05 	bl	80022cc <HAL_GetTick>
 80066c2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80066c6:	f7fb fe01 	bl	80022cc <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e011      	b.n	80066fc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006704 <HAL_RCC_ClockConfig+0x23c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d1ef      	bne.n	80066c6 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80066e6:	f000 f8b3 	bl	8006850 <HAL_RCC_GetHCLKFreq>
 80066ea:	4603      	mov	r3, r0
 80066ec:	4a06      	ldr	r2, [pc, #24]	@ (8006708 <HAL_RCC_ClockConfig+0x240>)
 80066ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80066f0:	4b06      	ldr	r3, [pc, #24]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fb fddf 	bl	80022b8 <HAL_InitTick>
 80066fa:	4603      	mov	r3, r0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	58004000 	.word	0x58004000
 8006708:	20000000 	.word	0x20000000
 800670c:	20000004 	.word	0x20000004

08006710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006710:	b590      	push	{r4, r7, lr}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800671e:	f7ff fa2a 	bl	8005b76 <LL_RCC_GetSysClkSource>
 8006722:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006724:	f7ff fafe 	bl	8005d24 <LL_RCC_PLL_GetMainSource>
 8006728:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <HAL_RCC_GetSysClockFreq+0x2c>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b0c      	cmp	r3, #12
 8006734:	d139      	bne.n	80067aa <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d136      	bne.n	80067aa <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800673c:	f7ff f9cd 	bl	8005ada <LL_RCC_MSI_IsEnabledRangeSelect>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d115      	bne.n	8006772 <HAL_RCC_GetSysClockFreq+0x62>
 8006746:	f7ff f9c8 	bl	8005ada <LL_RCC_MSI_IsEnabledRangeSelect>
 800674a:	4603      	mov	r3, r0
 800674c:	2b01      	cmp	r3, #1
 800674e:	d106      	bne.n	800675e <HAL_RCC_GetSysClockFreq+0x4e>
 8006750:	f7ff f9d3 	bl	8005afa <LL_RCC_MSI_GetRange>
 8006754:	4603      	mov	r3, r0
 8006756:	0a1b      	lsrs	r3, r3, #8
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	e005      	b.n	800676a <HAL_RCC_GetSysClockFreq+0x5a>
 800675e:	f7ff f9d7 	bl	8005b10 <LL_RCC_MSI_GetRangeAfterStandby>
 8006762:	4603      	mov	r3, r0
 8006764:	0a1b      	lsrs	r3, r3, #8
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	4a36      	ldr	r2, [pc, #216]	@ (8006844 <HAL_RCC_GetSysClockFreq+0x134>)
 800676c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006770:	e014      	b.n	800679c <HAL_RCC_GetSysClockFreq+0x8c>
 8006772:	f7ff f9b2 	bl	8005ada <LL_RCC_MSI_IsEnabledRangeSelect>
 8006776:	4603      	mov	r3, r0
 8006778:	2b01      	cmp	r3, #1
 800677a:	d106      	bne.n	800678a <HAL_RCC_GetSysClockFreq+0x7a>
 800677c:	f7ff f9bd 	bl	8005afa <LL_RCC_MSI_GetRange>
 8006780:	4603      	mov	r3, r0
 8006782:	091b      	lsrs	r3, r3, #4
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	e005      	b.n	8006796 <HAL_RCC_GetSysClockFreq+0x86>
 800678a:	f7ff f9c1 	bl	8005b10 <LL_RCC_MSI_GetRangeAfterStandby>
 800678e:	4603      	mov	r3, r0
 8006790:	091b      	lsrs	r3, r3, #4
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	4a2b      	ldr	r2, [pc, #172]	@ (8006844 <HAL_RCC_GetSysClockFreq+0x134>)
 8006798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800679c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d115      	bne.n	80067d0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80067a8:	e012      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d102      	bne.n	80067b6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067b0:	4b25      	ldr	r3, [pc, #148]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x138>)
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e00c      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d109      	bne.n	80067d0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80067bc:	f7ff f8a0 	bl	8005900 <LL_RCC_HSE_IsEnabledDiv2>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d102      	bne.n	80067cc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80067c6:	4b20      	ldr	r3, [pc, #128]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x138>)
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	e001      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80067cc:	4b1f      	ldr	r3, [pc, #124]	@ (800684c <HAL_RCC_GetSysClockFreq+0x13c>)
 80067ce:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067d0:	f7ff f9d1 	bl	8005b76 <LL_RCC_GetSysClkSource>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b0c      	cmp	r3, #12
 80067d8:	d12f      	bne.n	800683a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80067da:	f7ff faa3 	bl	8005d24 <LL_RCC_PLL_GetMainSource>
 80067de:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d003      	beq.n	80067ee <HAL_RCC_GetSysClockFreq+0xde>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d003      	beq.n	80067f4 <HAL_RCC_GetSysClockFreq+0xe4>
 80067ec:	e00d      	b.n	800680a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80067ee:	4b16      	ldr	r3, [pc, #88]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x138>)
 80067f0:	60fb      	str	r3, [r7, #12]
        break;
 80067f2:	e00d      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80067f4:	f7ff f884 	bl	8005900 <LL_RCC_HSE_IsEnabledDiv2>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d102      	bne.n	8006804 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80067fe:	4b12      	ldr	r3, [pc, #72]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x138>)
 8006800:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006802:	e005      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006804:	4b11      	ldr	r3, [pc, #68]	@ (800684c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006806:	60fb      	str	r3, [r7, #12]
        break;
 8006808:	e002      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	60fb      	str	r3, [r7, #12]
        break;
 800680e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006810:	f7ff fa66 	bl	8005ce0 <LL_RCC_PLL_GetN>
 8006814:	4602      	mov	r2, r0
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	fb03 f402 	mul.w	r4, r3, r2
 800681c:	f7ff fa77 	bl	8005d0e <LL_RCC_PLL_GetDivider>
 8006820:	4603      	mov	r3, r0
 8006822:	091b      	lsrs	r3, r3, #4
 8006824:	3301      	adds	r3, #1
 8006826:	fbb4 f4f3 	udiv	r4, r4, r3
 800682a:	f7ff fa65 	bl	8005cf8 <LL_RCC_PLL_GetR>
 800682e:	4603      	mov	r3, r0
 8006830:	0f5b      	lsrs	r3, r3, #29
 8006832:	3301      	adds	r3, #1
 8006834:	fbb4 f3f3 	udiv	r3, r4, r3
 8006838:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800683a:	697b      	ldr	r3, [r7, #20]
}
 800683c:	4618      	mov	r0, r3
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	bd90      	pop	{r4, r7, pc}
 8006844:	0801d088 	.word	0x0801d088
 8006848:	00f42400 	.word	0x00f42400
 800684c:	01e84800 	.word	0x01e84800

08006850 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006850:	b598      	push	{r3, r4, r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006854:	f7ff ff5c 	bl	8006710 <HAL_RCC_GetSysClockFreq>
 8006858:	4604      	mov	r4, r0
 800685a:	f7ff f9e6 	bl	8005c2a <LL_RCC_GetAHBPrescaler>
 800685e:	4603      	mov	r3, r0
 8006860:	091b      	lsrs	r3, r3, #4
 8006862:	f003 030f 	and.w	r3, r3, #15
 8006866:	4a03      	ldr	r2, [pc, #12]	@ (8006874 <HAL_RCC_GetHCLKFreq+0x24>)
 8006868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006870:	4618      	mov	r0, r3
 8006872:	bd98      	pop	{r3, r4, r7, pc}
 8006874:	0801d028 	.word	0x0801d028

08006878 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006878:	b598      	push	{r3, r4, r7, lr}
 800687a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800687c:	f7ff ffe8 	bl	8006850 <HAL_RCC_GetHCLKFreq>
 8006880:	4604      	mov	r4, r0
 8006882:	f7ff f9ea 	bl	8005c5a <LL_RCC_GetAPB1Prescaler>
 8006886:	4603      	mov	r3, r0
 8006888:	0a1b      	lsrs	r3, r3, #8
 800688a:	4a03      	ldr	r2, [pc, #12]	@ (8006898 <HAL_RCC_GetPCLK1Freq+0x20>)
 800688c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006890:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006894:	4618      	mov	r0, r3
 8006896:	bd98      	pop	{r3, r4, r7, pc}
 8006898:	0801d068 	.word	0x0801d068

0800689c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800689c:	b598      	push	{r3, r4, r7, lr}
 800689e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80068a0:	f7ff ffd6 	bl	8006850 <HAL_RCC_GetHCLKFreq>
 80068a4:	4604      	mov	r4, r0
 80068a6:	f7ff f9e3 	bl	8005c70 <LL_RCC_GetAPB2Prescaler>
 80068aa:	4603      	mov	r3, r0
 80068ac:	0adb      	lsrs	r3, r3, #11
 80068ae:	4a03      	ldr	r2, [pc, #12]	@ (80068bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80068b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	bd98      	pop	{r3, r4, r7, pc}
 80068bc:	0801d068 	.word	0x0801d068

080068c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80068c0:	b590      	push	{r4, r7, lr}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	091b      	lsrs	r3, r3, #4
 80068cc:	f003 030f 	and.w	r3, r3, #15
 80068d0:	4a10      	ldr	r2, [pc, #64]	@ (8006914 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80068d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068d6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80068d8:	f7ff f9b2 	bl	8005c40 <LL_RCC_GetAHB3Prescaler>
 80068dc:	4603      	mov	r3, r0
 80068de:	091b      	lsrs	r3, r3, #4
 80068e0:	f003 030f 	and.w	r3, r3, #15
 80068e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006918 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80068e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4a09      	ldr	r2, [pc, #36]	@ (800691c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80068f6:	fba2 2303 	umull	r2, r3, r2, r3
 80068fa:	0c9c      	lsrs	r4, r3, #18
 80068fc:	f7fe ff58 	bl	80057b0 <HAL_PWREx_GetVoltageRange>
 8006900:	4603      	mov	r3, r0
 8006902:	4619      	mov	r1, r3
 8006904:	4620      	mov	r0, r4
 8006906:	f000 f80b 	bl	8006920 <RCC_SetFlashLatency>
 800690a:	4603      	mov	r3, r0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	bd90      	pop	{r4, r7, pc}
 8006914:	0801d088 	.word	0x0801d088
 8006918:	0801d028 	.word	0x0801d028
 800691c:	431bde83 	.word	0x431bde83

08006920 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08e      	sub	sp, #56	@ 0x38
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800692a:	4a3a      	ldr	r2, [pc, #232]	@ (8006a14 <RCC_SetFlashLatency+0xf4>)
 800692c:	f107 0320 	add.w	r3, r7, #32
 8006930:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006934:	6018      	str	r0, [r3, #0]
 8006936:	3304      	adds	r3, #4
 8006938:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800693a:	4a37      	ldr	r2, [pc, #220]	@ (8006a18 <RCC_SetFlashLatency+0xf8>)
 800693c:	f107 0318 	add.w	r3, r7, #24
 8006940:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006944:	6018      	str	r0, [r3, #0]
 8006946:	3304      	adds	r3, #4
 8006948:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800694a:	4a34      	ldr	r2, [pc, #208]	@ (8006a1c <RCC_SetFlashLatency+0xfc>)
 800694c:	f107 030c 	add.w	r3, r7, #12
 8006950:	ca07      	ldmia	r2, {r0, r1, r2}
 8006952:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006956:	2300      	movs	r3, #0
 8006958:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006960:	d11b      	bne.n	800699a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006962:	2300      	movs	r3, #0
 8006964:	633b      	str	r3, [r7, #48]	@ 0x30
 8006966:	e014      	b.n	8006992 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	3338      	adds	r3, #56	@ 0x38
 800696e:	443b      	add	r3, r7
 8006970:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006974:	461a      	mov	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4293      	cmp	r3, r2
 800697a:	d807      	bhi.n	800698c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	3338      	adds	r3, #56	@ 0x38
 8006982:	443b      	add	r3, r7
 8006984:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006988:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800698a:	e021      	b.n	80069d0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	3301      	adds	r3, #1
 8006990:	633b      	str	r3, [r7, #48]	@ 0x30
 8006992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006994:	2b02      	cmp	r3, #2
 8006996:	d9e7      	bls.n	8006968 <RCC_SetFlashLatency+0x48>
 8006998:	e01a      	b.n	80069d0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800699a:	2300      	movs	r3, #0
 800699c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800699e:	e014      	b.n	80069ca <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80069a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	3338      	adds	r3, #56	@ 0x38
 80069a6:	443b      	add	r3, r7
 80069a8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80069ac:	461a      	mov	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d807      	bhi.n	80069c4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80069b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	3338      	adds	r3, #56	@ 0x38
 80069ba:	443b      	add	r3, r7
 80069bc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80069c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069c2:	e005      	b.n	80069d0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80069c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c6:	3301      	adds	r3, #1
 80069c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d9e7      	bls.n	80069a0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80069d0:	4b13      	ldr	r3, [pc, #76]	@ (8006a20 <RCC_SetFlashLatency+0x100>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f023 0207 	bic.w	r2, r3, #7
 80069d8:	4911      	ldr	r1, [pc, #68]	@ (8006a20 <RCC_SetFlashLatency+0x100>)
 80069da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069dc:	4313      	orrs	r3, r2
 80069de:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069e0:	f7fb fc74 	bl	80022cc <HAL_GetTick>
 80069e4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80069e6:	e008      	b.n	80069fa <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069e8:	f7fb fc70 	bl	80022cc <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e007      	b.n	8006a0a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80069fa:	4b09      	ldr	r3, [pc, #36]	@ (8006a20 <RCC_SetFlashLatency+0x100>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d1ef      	bne.n	80069e8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3738      	adds	r7, #56	@ 0x38
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	0801c73c 	.word	0x0801c73c
 8006a18:	0801c744 	.word	0x0801c744
 8006a1c:	0801c74c 	.word	0x0801c74c
 8006a20:	58004000 	.word	0x58004000

08006a24 <LL_RCC_LSE_IsReady>:
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d101      	bne.n	8006a3c <LL_RCC_LSE_IsReady+0x18>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e000      	b.n	8006a3e <LL_RCC_LSE_IsReady+0x1a>
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr

08006a46 <LL_RCC_SetUSARTClockSource>:
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a52:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	0c1b      	lsrs	r3, r3, #16
 8006a5a:	43db      	mvns	r3, r3
 8006a5c:	401a      	ands	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <LL_RCC_SetI2SClockSource>:
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bc80      	pop	{r7}
 8006a9e:	4770      	bx	lr

08006aa0 <LL_RCC_SetLPUARTClockSource>:
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ab4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bc80      	pop	{r7}
 8006ac8:	4770      	bx	lr

08006aca <LL_RCC_SetI2CClockSource>:
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	091b      	lsrs	r3, r3, #4
 8006ade:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006ae2:	43db      	mvns	r3, r3
 8006ae4:	401a      	ands	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006aee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr

08006b02 <LL_RCC_SetLPTIMClockSource>:
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	0c1b      	lsrs	r3, r3, #16
 8006b16:	041b      	lsls	r3, r3, #16
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	401a      	ands	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	041b      	lsls	r3, r3, #16
 8006b20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b24:	4313      	orrs	r3, r2
 8006b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bc80      	pop	{r7}
 8006b32:	4770      	bx	lr

08006b34 <LL_RCC_SetRNGClockSource>:
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b44:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006b48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <LL_RCC_SetADCClockSource>:
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr

08006b88 <LL_RCC_SetRTCClockSource>:
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006b90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr

08006bb2 <LL_RCC_GetRTCClockSource>:
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr

08006bca <LL_RCC_ForceBackupDomainReset>:
{
 8006bca:	b480      	push	{r7}
 8006bcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006be2:	bf00      	nop
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr

08006bea <LL_RCC_ReleaseBackupDomainReset>:
{
 8006bea:	b480      	push	{r7}
 8006bec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006c02:	bf00      	nop
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr
	...

08006c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006c18:	2300      	movs	r3, #0
 8006c1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d058      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006c2c:	f7fe fd7e 	bl	800572c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c30:	f7fb fb4c 	bl	80022cc <HAL_GetTick>
 8006c34:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006c36:	e009      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c38:	f7fb fb48 	bl	80022cc <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d902      	bls.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	74fb      	strb	r3, [r7, #19]
        break;
 8006c4a:	e006      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006c4c:	4b7b      	ldr	r3, [pc, #492]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c58:	d1ee      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006c5a:	7cfb      	ldrb	r3, [r7, #19]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d13c      	bne.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006c60:	f7ff ffa7 	bl	8006bb2 <LL_RCC_GetRTCClockSource>
 8006c64:	4602      	mov	r2, r0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d00f      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c7a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c7c:	f7ff ffa5 	bl	8006bca <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c80:	f7ff ffb3 	bl	8006bea <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d014      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c98:	f7fb fb18 	bl	80022cc <HAL_GetTick>
 8006c9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006c9e:	e00b      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ca0:	f7fb fb14 	bl	80022cc <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d902      	bls.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	74fb      	strb	r3, [r7, #19]
            break;
 8006cb6:	e004      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006cb8:	f7ff feb4 	bl	8006a24 <LL_RCC_LSE_IsReady>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d1ee      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006cc2:	7cfb      	ldrb	r3, [r7, #19]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff ff5b 	bl	8006b88 <LL_RCC_SetRTCClockSource>
 8006cd2:	e004      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cd4:	7cfb      	ldrb	r3, [r7, #19]
 8006cd6:	74bb      	strb	r3, [r7, #18]
 8006cd8:	e001      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cda:	7cfb      	ldrb	r3, [r7, #19]
 8006cdc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d004      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff fea9 	bl	8006a46 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d004      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff fe9e 	bl	8006a46 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0320 	and.w	r3, r3, #32
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d004      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff fec0 	bl	8006aa0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fee6 	bl	8006b02 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff fedb 	bl	8006b02 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff fed0 	bl	8006b02 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d004      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fea9 	bl	8006aca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff fe9e 	bl	8006aca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d004      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff fe93 	bl	8006aca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d011      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff fe5e 	bl	8006a76 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dc2:	d107      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d010      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7ff fea5 	bl	8006b34 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d107      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e00:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d011      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff fea3 	bl	8006b5e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e20:	d107      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e30:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006e32:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	58000400 	.word	0x58000400

08006e40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d071      	beq.n	8006f36 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7fa ff6e 	bl	8001d48 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006e74:	4b32      	ldr	r3, [pc, #200]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f003 0310 	and.w	r3, r3, #16
 8006e7c:	2b10      	cmp	r3, #16
 8006e7e:	d051      	beq.n	8006f24 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e80:	4b2f      	ldr	r3, [pc, #188]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006e82:	22ca      	movs	r2, #202	@ 0xca
 8006e84:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e86:	4b2e      	ldr	r3, [pc, #184]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006e88:	2253      	movs	r2, #83	@ 0x53
 8006e8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fa11 	bl	80072b4 <RTC_EnterInitMode>
 8006e92:	4603      	mov	r3, r0
 8006e94:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d13f      	bne.n	8006f1c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006e9c:	4b28      	ldr	r3, [pc, #160]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	4a27      	ldr	r2, [pc, #156]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006ea2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006ea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eaa:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006eac:	4b24      	ldr	r3, [pc, #144]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006eae:	699a      	ldr	r2, [r3, #24]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6859      	ldr	r1, [r3, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	4319      	orrs	r1, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	491f      	ldr	r1, [pc, #124]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	041b      	lsls	r3, r3, #16
 8006ed0:	491b      	ldr	r1, [pc, #108]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee6:	430b      	orrs	r3, r1
 8006ee8:	4915      	ldr	r1, [pc, #84]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa14 	bl	800731c <RTC_ExitInitMode>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10e      	bne.n	8006f1c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8006efe:	4b10      	ldr	r3, [pc, #64]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a19      	ldr	r1, [r3, #32]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	4319      	orrs	r1, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	430b      	orrs	r3, r1
 8006f16:	490a      	ldr	r1, [pc, #40]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f1c:	4b08      	ldr	r3, [pc, #32]	@ (8006f40 <HAL_RTC_Init+0x100>)
 8006f1e:	22ff      	movs	r2, #255	@ 0xff
 8006f20:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f22:	e001      	b.n	8006f28 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d103      	bne.n	8006f36 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40002800 	.word	0x40002800

08006f44 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006f44:	b590      	push	{r4, r7, lr}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006f50:	2300      	movs	r3, #0
 8006f52:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <HAL_RTC_SetAlarm_IT+0x1e>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	e0f3      	b.n	800714a <HAL_RTC_SetAlarm_IT+0x206>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006f72:	4b78      	ldr	r3, [pc, #480]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f7a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f82:	d06a      	beq.n	800705a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d13a      	bne.n	8007000 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f8a:	4b72      	ldr	r3, [pc, #456]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 f9f5 	bl	8007398 <RTC_ByteToBcd2>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f9ee 	bl	8007398 <RTC_ByteToBcd2>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006fc0:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	789b      	ldrb	r3, [r3, #2]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 f9e6 	bl	8007398 <RTC_ByteToBcd2>
 8006fcc:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006fce:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	78db      	ldrb	r3, [r3, #3]
 8006fd6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006fd8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f9d8 	bl	8007398 <RTC_ByteToBcd2>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006fec:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ff4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	e02c      	b.n	800705a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8007008:	d00d      	beq.n	8007026 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007012:	d008      	beq.n	8007026 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007014:	4b4f      	ldr	r3, [pc, #316]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800701c:	2b00      	cmp	r3, #0
 800701e:	d102      	bne.n	8007026 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2200      	movs	r2, #0
 8007024:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007032:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007038:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	78db      	ldrb	r3, [r3, #3]
 800703e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007040:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007048:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800704a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007050:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007056:	4313      	orrs	r3, r2
 8007058:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800705a:	4b3e      	ldr	r3, [pc, #248]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 800705c:	22ca      	movs	r2, #202	@ 0xca
 800705e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007060:	4b3c      	ldr	r3, [pc, #240]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 8007062:	2253      	movs	r2, #83	@ 0x53
 8007064:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800706e:	d12c      	bne.n	80070ca <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007070:	4b38      	ldr	r3, [pc, #224]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	4a37      	ldr	r2, [pc, #220]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 8007076:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800707a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800707c:	4b35      	ldr	r3, [pc, #212]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 800707e:	2201      	movs	r2, #1
 8007080:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007088:	d107      	bne.n	800709a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	699a      	ldr	r2, [r3, #24]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	4930      	ldr	r1, [pc, #192]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 8007094:	4313      	orrs	r3, r2
 8007096:	644b      	str	r3, [r1, #68]	@ 0x44
 8007098:	e006      	b.n	80070a8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800709a:	4a2e      	ldr	r2, [pc, #184]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80070a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80070a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b4:	f043 0201 	orr.w	r2, r3, #1
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80070bc:	4b25      	ldr	r3, [pc, #148]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	4a24      	ldr	r2, [pc, #144]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 80070c2:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80070c6:	6193      	str	r3, [r2, #24]
 80070c8:	e02b      	b.n	8007122 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80070ca:	4b22      	ldr	r3, [pc, #136]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	4a21      	ldr	r2, [pc, #132]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 80070d0:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80070d4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80070d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 80070d8:	2202      	movs	r2, #2
 80070da:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e2:	d107      	bne.n	80070f4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	699a      	ldr	r2, [r3, #24]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	4919      	ldr	r1, [pc, #100]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80070f2:	e006      	b.n	8007102 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80070f4:	4a17      	ldr	r2, [pc, #92]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80070fa:	4a16      	ldr	r2, [pc, #88]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007102:	4a14      	ldr	r2, [pc, #80]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710e:	f043 0202 	orr.w	r2, r3, #2
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007116:	4b0f      	ldr	r3, [pc, #60]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	4a0e      	ldr	r2, [pc, #56]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 800711c:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8007120:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007122:	4b0d      	ldr	r3, [pc, #52]	@ (8007158 <HAL_RTC_SetAlarm_IT+0x214>)
 8007124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007128:	4a0b      	ldr	r2, [pc, #44]	@ (8007158 <HAL_RTC_SetAlarm_IT+0x214>)
 800712a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800712e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007132:	4b08      	ldr	r3, [pc, #32]	@ (8007154 <HAL_RTC_SetAlarm_IT+0x210>)
 8007134:	22ff      	movs	r2, #255	@ 0xff
 8007136:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	bd90      	pop	{r4, r7, pc}
 8007152:	bf00      	nop
 8007154:	40002800 	.word	0x40002800
 8007158:	58000800 	.word	0x58000800

0800715c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_RTC_DeactivateAlarm+0x18>
 8007170:	2302      	movs	r3, #2
 8007172:	e048      	b.n	8007206 <HAL_RTC_DeactivateAlarm+0xaa>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007184:	4b22      	ldr	r3, [pc, #136]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007186:	22ca      	movs	r2, #202	@ 0xca
 8007188:	625a      	str	r2, [r3, #36]	@ 0x24
 800718a:	4b21      	ldr	r3, [pc, #132]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 800718c:	2253      	movs	r2, #83	@ 0x53
 800718e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007196:	d115      	bne.n	80071c4 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007198:	4b1d      	ldr	r3, [pc, #116]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	4a1c      	ldr	r2, [pc, #112]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 800719e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80071a2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80071a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a8:	4a19      	ldr	r2, [pc, #100]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071ae:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b4:	f023 0201 	bic.w	r2, r3, #1
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80071bc:	4b14      	ldr	r3, [pc, #80]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071be:	2201      	movs	r2, #1
 80071c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80071c2:	e014      	b.n	80071ee <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80071c4:	4b12      	ldr	r3, [pc, #72]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	4a11      	ldr	r2, [pc, #68]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071ca:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80071ce:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80071d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071d4:	4a0e      	ldr	r2, [pc, #56]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071da:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e0:	f023 0202 	bic.w	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80071e8:	4b09      	ldr	r3, [pc, #36]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071ea:	2202      	movs	r2, #2
 80071ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ee:	4b08      	ldr	r3, [pc, #32]	@ (8007210 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071f0:	22ff      	movs	r2, #255	@ 0xff
 80071f2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	bc80      	pop	{r7}
 800720e:	4770      	bx	lr
 8007210:	40002800 	.word	0x40002800

08007214 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800721c:	4b11      	ldr	r3, [pc, #68]	@ (8007264 <HAL_RTC_AlarmIRQHandler+0x50>)
 800721e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007224:	4013      	ands	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007232:	4b0c      	ldr	r3, [pc, #48]	@ (8007264 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007234:	2201      	movs	r2, #1
 8007236:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7fb fa28 	bl	800268e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d005      	beq.n	8007254 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007248:	4b06      	ldr	r3, [pc, #24]	@ (8007264 <HAL_RTC_AlarmIRQHandler+0x50>)
 800724a:	2202      	movs	r2, #2
 800724c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f94a 	bl	80074e8 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800725c:	bf00      	nop
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40002800 	.word	0x40002800

08007268 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007270:	4b0f      	ldr	r3, [pc, #60]	@ (80072b0 <HAL_RTC_WaitForSynchro+0x48>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	4a0e      	ldr	r2, [pc, #56]	@ (80072b0 <HAL_RTC_WaitForSynchro+0x48>)
 8007276:	f023 0320 	bic.w	r3, r3, #32
 800727a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800727c:	f7fb f826 	bl	80022cc <HAL_GetTick>
 8007280:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007282:	e009      	b.n	8007298 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007284:	f7fb f822 	bl	80022cc <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007292:	d901      	bls.n	8007298 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e006      	b.n	80072a6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007298:	4b05      	ldr	r3, [pc, #20]	@ (80072b0 <HAL_RTC_WaitForSynchro+0x48>)
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0ef      	beq.n	8007284 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	40002800 	.word	0x40002800

080072b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80072c0:	4b15      	ldr	r3, [pc, #84]	@ (8007318 <RTC_EnterInitMode+0x64>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d120      	bne.n	800730e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80072cc:	4b12      	ldr	r3, [pc, #72]	@ (8007318 <RTC_EnterInitMode+0x64>)
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	4a11      	ldr	r2, [pc, #68]	@ (8007318 <RTC_EnterInitMode+0x64>)
 80072d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072d6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80072d8:	f7fa fff8 	bl	80022cc <HAL_GetTick>
 80072dc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80072de:	e00d      	b.n	80072fc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80072e0:	f7fa fff4 	bl	80022cc <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072ee:	d905      	bls.n	80072fc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2203      	movs	r2, #3
 80072f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80072fc:	4b06      	ldr	r3, [pc, #24]	@ (8007318 <RTC_EnterInitMode+0x64>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007304:	2b00      	cmp	r3, #0
 8007306:	d102      	bne.n	800730e <RTC_EnterInitMode+0x5a>
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	2b03      	cmp	r3, #3
 800730c:	d1e8      	bne.n	80072e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800730e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40002800 	.word	0x40002800

0800731c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007328:	4b1a      	ldr	r3, [pc, #104]	@ (8007394 <RTC_ExitInitMode+0x78>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	4a19      	ldr	r2, [pc, #100]	@ (8007394 <RTC_ExitInitMode+0x78>)
 800732e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007332:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007334:	4b17      	ldr	r3, [pc, #92]	@ (8007394 <RTC_ExitInitMode+0x78>)
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10c      	bne.n	800735a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff ff91 	bl	8007268 <HAL_RTC_WaitForSynchro>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d01e      	beq.n	800738a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2203      	movs	r2, #3
 8007350:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	73fb      	strb	r3, [r7, #15]
 8007358:	e017      	b.n	800738a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800735a:	4b0e      	ldr	r3, [pc, #56]	@ (8007394 <RTC_ExitInitMode+0x78>)
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	4a0d      	ldr	r2, [pc, #52]	@ (8007394 <RTC_ExitInitMode+0x78>)
 8007360:	f023 0320 	bic.w	r3, r3, #32
 8007364:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff ff7e 	bl	8007268 <HAL_RTC_WaitForSynchro>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2203      	movs	r2, #3
 8007376:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800737e:	4b05      	ldr	r3, [pc, #20]	@ (8007394 <RTC_ExitInitMode+0x78>)
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	4a04      	ldr	r2, [pc, #16]	@ (8007394 <RTC_ExitInitMode+0x78>)
 8007384:	f043 0320 	orr.w	r3, r3, #32
 8007388:	6193      	str	r3, [r2, #24]
  }

  return status;
 800738a:	7bfb      	ldrb	r3, [r7, #15]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	40002800 	.word	0x40002800

08007398 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80073aa:	e005      	b.n	80073b8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3301      	adds	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80073b2:	7afb      	ldrb	r3, [r7, #11]
 80073b4:	3b0a      	subs	r3, #10
 80073b6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80073b8:	7afb      	ldrb	r3, [r7, #11]
 80073ba:	2b09      	cmp	r3, #9
 80073bc:	d8f6      	bhi.n	80073ac <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	7afb      	ldrb	r3, [r7, #11]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	b2db      	uxtb	r3, r3
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr
	...

080073d8 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d101      	bne.n	80073ee <HAL_RTCEx_EnableBypassShadow+0x16>
 80073ea:	2302      	movs	r3, #2
 80073ec:	e01f      	b.n	800742e <HAL_RTCEx_EnableBypassShadow+0x56>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2202      	movs	r2, #2
 80073fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007438 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007400:	22ca      	movs	r2, #202	@ 0xca
 8007402:	625a      	str	r2, [r3, #36]	@ 0x24
 8007404:	4b0c      	ldr	r3, [pc, #48]	@ (8007438 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007406:	2253      	movs	r2, #83	@ 0x53
 8007408:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800740a:	4b0b      	ldr	r3, [pc, #44]	@ (8007438 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	4a0a      	ldr	r2, [pc, #40]	@ (8007438 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007410:	f043 0320 	orr.w	r3, r3, #32
 8007414:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007416:	4b08      	ldr	r3, [pc, #32]	@ (8007438 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007418:	22ff      	movs	r2, #255	@ 0xff
 800741a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr
 8007438:	40002800 	.word	0x40002800

0800743c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <HAL_RTCEx_SetSSRU_IT+0x16>
 800744e:	2302      	movs	r3, #2
 8007450:	e027      	b.n	80074a2 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2202      	movs	r2, #2
 800745e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007462:	4b12      	ldr	r3, [pc, #72]	@ (80074ac <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007464:	22ca      	movs	r2, #202	@ 0xca
 8007466:	625a      	str	r2, [r3, #36]	@ 0x24
 8007468:	4b10      	ldr	r3, [pc, #64]	@ (80074ac <HAL_RTCEx_SetSSRU_IT+0x70>)
 800746a:	2253      	movs	r2, #83	@ 0x53
 800746c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800746e:	4b0f      	ldr	r3, [pc, #60]	@ (80074ac <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	4a0e      	ldr	r2, [pc, #56]	@ (80074ac <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007478:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800747a:	4b0d      	ldr	r3, [pc, #52]	@ (80074b0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800747c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007480:	4a0b      	ldr	r2, [pc, #44]	@ (80074b0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007482:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007486:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800748a:	4b08      	ldr	r3, [pc, #32]	@ (80074ac <HAL_RTCEx_SetSSRU_IT+0x70>)
 800748c:	22ff      	movs	r2, #255	@ 0xff
 800748e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bc80      	pop	{r7}
 80074aa:	4770      	bx	lr
 80074ac:	40002800 	.word	0x40002800
 80074b0:	58000800 	.word	0x58000800

080074b4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80074bc:	4b09      	ldr	r3, [pc, #36]	@ (80074e4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80074be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d005      	beq.n	80074d4 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80074c8:	4b06      	ldr	r3, [pc, #24]	@ (80074e4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80074ca:	2240      	movs	r2, #64	@ 0x40
 80074cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fb f8e7 	bl	80026a2 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	40002800 	.word	0x40002800

080074e8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr
	...

080074fc <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007508:	4b07      	ldr	r3, [pc, #28]	@ (8007528 <HAL_RTCEx_BKUPWrite+0x2c>)
 800750a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4413      	add	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	601a      	str	r2, [r3, #0]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	4000b100 	.word	0x4000b100

0800752c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007536:	4b07      	ldr	r3, [pc, #28]	@ (8007554 <HAL_RTCEx_BKUPRead+0x28>)
 8007538:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4413      	add	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	4000b100 	.word	0x4000b100

08007558 <LL_PWR_SetRadioBusyTrigger>:
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007560:	4b06      	ldr	r3, [pc, #24]	@ (800757c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007568:	4904      	ldr	r1, [pc, #16]	@ (800757c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4313      	orrs	r3, r2
 800756e:	608b      	str	r3, [r1, #8]
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	bc80      	pop	{r7}
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	58000400 	.word	0x58000400

08007580 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007584:	4b05      	ldr	r3, [pc, #20]	@ (800759c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800758a:	4a04      	ldr	r2, [pc, #16]	@ (800759c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800758c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007594:	bf00      	nop
 8007596:	46bd      	mov	sp, r7
 8007598:	bc80      	pop	{r7}
 800759a:	4770      	bx	lr
 800759c:	58000400 	.word	0x58000400

080075a0 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80075a4:	4b05      	ldr	r3, [pc, #20]	@ (80075bc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80075a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075aa:	4a04      	ldr	r2, [pc, #16]	@ (80075bc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80075ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80075b4:	bf00      	nop
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr
 80075bc:	58000400 	.word	0x58000400

080075c0 <LL_PWR_ClearFlag_RFBUSY>:
{
 80075c0:	b480      	push	{r7}
 80075c2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80075c4:	4b03      	ldr	r3, [pc, #12]	@ (80075d4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80075c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075ca:	619a      	str	r2, [r3, #24]
}
 80075cc:	bf00      	nop
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bc80      	pop	{r7}
 80075d2:	4770      	bx	lr
 80075d4:	58000400 	.word	0x58000400

080075d8 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80075dc:	4b06      	ldr	r3, [pc, #24]	@ (80075f8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d101      	bne.n	80075ec <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e000      	b.n	80075ee <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	58000400 	.word	0x58000400

080075fc <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007600:	4b06      	ldr	r3, [pc, #24]	@ (800761c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b04      	cmp	r3, #4
 800760a:	d101      	bne.n	8007610 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800760c:	2301      	movs	r3, #1
 800760e:	e000      	b.n	8007612 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	58000400 	.word	0x58000400

08007620 <LL_RCC_RF_DisableReset>:
{
 8007620:	b480      	push	{r7}
 8007622:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800762c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007630:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007634:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007638:	bf00      	nop
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr

08007640 <LL_RCC_IsRFUnderReset>:
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800764c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007650:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007654:	d101      	bne.n	800765a <LL_RCC_IsRFUnderReset+0x1a>
 8007656:	2301      	movs	r3, #1
 8007658:	e000      	b.n	800765c <LL_RCC_IsRFUnderReset+0x1c>
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr

08007664 <LL_EXTI_EnableIT_32_63>:
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800766c:	4b06      	ldr	r3, [pc, #24]	@ (8007688 <LL_EXTI_EnableIT_32_63+0x24>)
 800766e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007672:	4905      	ldr	r1, [pc, #20]	@ (8007688 <LL_EXTI_EnableIT_32_63+0x24>)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4313      	orrs	r3, r2
 8007678:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	bc80      	pop	{r7}
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	58000800 	.word	0x58000800

0800768c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	73fb      	strb	r3, [r7, #15]
    return status;
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	e052      	b.n	8007748 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	799b      	ldrb	r3, [r3, #6]
 80076aa:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_SUBGHZ_Init+0x2c>
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d109      	bne.n	80076cc <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fa fc5c 	bl	8001f7c <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80076c4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80076c8:	f7ff ffcc 	bl	8007664 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d126      	bne.n	8007720 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2202      	movs	r2, #2
 80076d6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80076d8:	f7ff ffa2 	bl	8007620 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80076dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007750 <HAL_SUBGHZ_Init+0xc4>)
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	4613      	mov	r3, r2
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	1a9b      	subs	r3, r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	0cdb      	lsrs	r3, r3, #19
 80076ea:	2264      	movs	r2, #100	@ 0x64
 80076ec:	fb02 f303 	mul.w	r3, r2, r3
 80076f0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d105      	bne.n	8007704 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	609a      	str	r2, [r3, #8]
        break;
 8007702:	e007      	b.n	8007714 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	3b01      	subs	r3, #1
 8007708:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800770a:	f7ff ff99 	bl	8007640 <LL_RCC_IsRFUnderReset>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1ee      	bne.n	80076f2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007714:	f7ff ff34 	bl	8007580 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007718:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800771c:	f7ff ff1c 	bl	8007558 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007720:	f7ff ff4e 	bl	80075c0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fabc 	bl	8007cac <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	719a      	strb	r2, [r3, #6]

  return status;
 8007746:	7bfb      	ldrb	r3, [r7, #15]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000000 	.word	0x20000000

08007754 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	607a      	str	r2, [r7, #4]
 800775e:	461a      	mov	r2, r3
 8007760:	460b      	mov	r3, r1
 8007762:	817b      	strh	r3, [r7, #10]
 8007764:	4613      	mov	r3, r2
 8007766:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	799b      	ldrb	r3, [r3, #6]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b01      	cmp	r3, #1
 8007770:	d14a      	bne.n	8007808 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	795b      	ldrb	r3, [r3, #5]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d101      	bne.n	800777e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800777a:	2302      	movs	r3, #2
 800777c:	e045      	b.n	800780a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2202      	movs	r2, #2
 8007788:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 fb5c 	bl	8007e48 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007790:	f7ff ff06 	bl	80075a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007794:	210d      	movs	r1, #13
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 faa8 	bl	8007cec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800779c:	897b      	ldrh	r3, [r7, #10]
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	4619      	mov	r1, r3
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 faa0 	bl	8007cec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80077ac:	897b      	ldrh	r3, [r7, #10]
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	4619      	mov	r1, r3
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fa9a 	bl	8007cec <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80077b8:	2300      	movs	r3, #0
 80077ba:	82bb      	strh	r3, [r7, #20]
 80077bc:	e00a      	b.n	80077d4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80077be:	8abb      	ldrh	r3, [r7, #20]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	4413      	add	r3, r2
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	4619      	mov	r1, r3
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 fa8f 	bl	8007cec <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80077ce:	8abb      	ldrh	r3, [r7, #20]
 80077d0:	3301      	adds	r3, #1
 80077d2:	82bb      	strh	r3, [r7, #20]
 80077d4:	8aba      	ldrh	r2, [r7, #20]
 80077d6:	893b      	ldrh	r3, [r7, #8]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d3f0      	bcc.n	80077be <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80077dc:	f7ff fed0 	bl	8007580 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 fb55 	bl	8007e90 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	75fb      	strb	r3, [r7, #23]
 80077f2:	e001      	b.n	80077f8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	715a      	strb	r2, [r3, #5]

    return status;
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	e000      	b.n	800780a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007808:	2302      	movs	r3, #2
  }
}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b088      	sub	sp, #32
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	461a      	mov	r2, r3
 800781e:	460b      	mov	r3, r1
 8007820:	817b      	strh	r3, [r7, #10]
 8007822:	4613      	mov	r3, r2
 8007824:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	799b      	ldrb	r3, [r3, #6]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d14a      	bne.n	80078ca <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	795b      	ldrb	r3, [r3, #5]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d101      	bne.n	8007840 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800783c:	2302      	movs	r3, #2
 800783e:	e045      	b.n	80078cc <HAL_SUBGHZ_ReadRegisters+0xba>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 fafe 	bl	8007e48 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800784c:	f7ff fea8 	bl	80075a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007850:	211d      	movs	r1, #29
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 fa4a 	bl	8007cec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007858:	897b      	ldrh	r3, [r7, #10]
 800785a:	0a1b      	lsrs	r3, r3, #8
 800785c:	b29b      	uxth	r3, r3
 800785e:	b2db      	uxtb	r3, r3
 8007860:	4619      	mov	r1, r3
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fa42 	bl	8007cec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007868:	897b      	ldrh	r3, [r7, #10]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	4619      	mov	r1, r3
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fa3c 	bl	8007cec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007874:	2100      	movs	r1, #0
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 fa38 	bl	8007cec <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800787c:	2300      	movs	r3, #0
 800787e:	82fb      	strh	r3, [r7, #22]
 8007880:	e009      	b.n	8007896 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007882:	69b9      	ldr	r1, [r7, #24]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fa87 	bl	8007d98 <SUBGHZSPI_Receive>
      pData++;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	3301      	adds	r3, #1
 800788e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007890:	8afb      	ldrh	r3, [r7, #22]
 8007892:	3301      	adds	r3, #1
 8007894:	82fb      	strh	r3, [r7, #22]
 8007896:	8afa      	ldrh	r2, [r7, #22]
 8007898:	893b      	ldrh	r3, [r7, #8]
 800789a:	429a      	cmp	r2, r3
 800789c:	d3f1      	bcc.n	8007882 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800789e:	f7ff fe6f 	bl	8007580 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 faf4 	bl	8007e90 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	e001      	b.n	80078ba <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	715a      	strb	r2, [r3, #5]

    return status;
 80078c6:	7ffb      	ldrb	r3, [r7, #31]
 80078c8:	e000      	b.n	80078cc <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80078ca:	2302      	movs	r3, #2
  }
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3720      	adds	r7, #32
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	607a      	str	r2, [r7, #4]
 80078de:	461a      	mov	r2, r3
 80078e0:	460b      	mov	r3, r1
 80078e2:	72fb      	strb	r3, [r7, #11]
 80078e4:	4613      	mov	r3, r2
 80078e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	799b      	ldrb	r3, [r3, #6]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d14a      	bne.n	8007988 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	795b      	ldrb	r3, [r3, #5]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80078fa:	2302      	movs	r3, #2
 80078fc:	e045      	b.n	800798a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 fa9f 	bl	8007e48 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800790a:	7afb      	ldrb	r3, [r7, #11]
 800790c:	2b84      	cmp	r3, #132	@ 0x84
 800790e:	d002      	beq.n	8007916 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007910:	7afb      	ldrb	r3, [r7, #11]
 8007912:	2b94      	cmp	r3, #148	@ 0x94
 8007914:	d103      	bne.n	800791e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	711a      	strb	r2, [r3, #4]
 800791c:	e002      	b.n	8007924 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007924:	f7ff fe3c 	bl	80075a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007928:	7afb      	ldrb	r3, [r7, #11]
 800792a:	4619      	mov	r1, r3
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 f9dd 	bl	8007cec <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007932:	2300      	movs	r3, #0
 8007934:	82bb      	strh	r3, [r7, #20]
 8007936:	e00a      	b.n	800794e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007938:	8abb      	ldrh	r3, [r7, #20]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	4619      	mov	r1, r3
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 f9d2 	bl	8007cec <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007948:	8abb      	ldrh	r3, [r7, #20]
 800794a:	3301      	adds	r3, #1
 800794c:	82bb      	strh	r3, [r7, #20]
 800794e:	8aba      	ldrh	r2, [r7, #20]
 8007950:	893b      	ldrh	r3, [r7, #8]
 8007952:	429a      	cmp	r2, r3
 8007954:	d3f0      	bcc.n	8007938 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007956:	f7ff fe13 	bl	8007580 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	2b84      	cmp	r3, #132	@ 0x84
 800795e:	d002      	beq.n	8007966 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fa95 	bl	8007e90 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	75fb      	strb	r3, [r7, #23]
 8007972:	e001      	b.n	8007978 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2201      	movs	r2, #1
 800797c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	715a      	strb	r2, [r3, #5]

    return status;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	e000      	b.n	800798a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007988:	2302      	movs	r3, #2
  }
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b088      	sub	sp, #32
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	461a      	mov	r2, r3
 800799e:	460b      	mov	r3, r1
 80079a0:	72fb      	strb	r3, [r7, #11]
 80079a2:	4613      	mov	r3, r2
 80079a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	799b      	ldrb	r3, [r3, #6]
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d13d      	bne.n	8007a30 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	795b      	ldrb	r3, [r3, #5]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d101      	bne.n	80079c0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80079bc:	2302      	movs	r3, #2
 80079be:	e038      	b.n	8007a32 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2201      	movs	r2, #1
 80079c4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fa3e 	bl	8007e48 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80079cc:	f7ff fde8 	bl	80075a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	4619      	mov	r1, r3
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 f989 	bl	8007cec <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80079da:	2100      	movs	r1, #0
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f985 	bl	8007cec <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80079e2:	2300      	movs	r3, #0
 80079e4:	82fb      	strh	r3, [r7, #22]
 80079e6:	e009      	b.n	80079fc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80079e8:	69b9      	ldr	r1, [r7, #24]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f9d4 	bl	8007d98 <SUBGHZSPI_Receive>
      pData++;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	3301      	adds	r3, #1
 80079f4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80079f6:	8afb      	ldrh	r3, [r7, #22]
 80079f8:	3301      	adds	r3, #1
 80079fa:	82fb      	strh	r3, [r7, #22]
 80079fc:	8afa      	ldrh	r2, [r7, #22]
 80079fe:	893b      	ldrh	r3, [r7, #8]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d3f1      	bcc.n	80079e8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a04:	f7ff fdbc 	bl	8007580 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 fa41 	bl	8007e90 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	77fb      	strb	r3, [r7, #31]
 8007a1a:	e001      	b.n	8007a20 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	715a      	strb	r2, [r3, #5]

    return status;
 8007a2c:	7ffb      	ldrb	r3, [r7, #31]
 8007a2e:	e000      	b.n	8007a32 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a30:	2302      	movs	r3, #2
  }
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b086      	sub	sp, #24
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	461a      	mov	r2, r3
 8007a46:	460b      	mov	r3, r1
 8007a48:	72fb      	strb	r3, [r7, #11]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	799b      	ldrb	r3, [r3, #6]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d13e      	bne.n	8007ad6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	795b      	ldrb	r3, [r3, #5]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e039      	b.n	8007ad8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f9ec 	bl	8007e48 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a70:	f7ff fd96 	bl	80075a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007a74:	210e      	movs	r1, #14
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 f938 	bl	8007cec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007a7c:	7afb      	ldrb	r3, [r7, #11]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f933 	bl	8007cec <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a86:	2300      	movs	r3, #0
 8007a88:	82bb      	strh	r3, [r7, #20]
 8007a8a:	e00a      	b.n	8007aa2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007a8c:	8abb      	ldrh	r3, [r7, #20]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	4619      	mov	r1, r3
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f928 	bl	8007cec <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a9c:	8abb      	ldrh	r3, [r7, #20]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	82bb      	strh	r3, [r7, #20]
 8007aa2:	8aba      	ldrh	r2, [r7, #20]
 8007aa4:	893b      	ldrh	r3, [r7, #8]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d3f0      	bcc.n	8007a8c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007aaa:	f7ff fd69 	bl	8007580 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f9ee 	bl	8007e90 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	75fb      	strb	r3, [r7, #23]
 8007ac0:	e001      	b.n	8007ac6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	715a      	strb	r2, [r3, #5]

    return status;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	e000      	b.n	8007ad8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007ad6:	2302      	movs	r3, #2
  }
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	607a      	str	r2, [r7, #4]
 8007aea:	461a      	mov	r2, r3
 8007aec:	460b      	mov	r3, r1
 8007aee:	72fb      	strb	r3, [r7, #11]
 8007af0:	4613      	mov	r3, r2
 8007af2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	799b      	ldrb	r3, [r3, #6]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d141      	bne.n	8007b86 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	795b      	ldrb	r3, [r3, #5]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d101      	bne.n	8007b0e <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e03c      	b.n	8007b88 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2201      	movs	r2, #1
 8007b12:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f997 	bl	8007e48 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007b1a:	f7ff fd41 	bl	80075a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007b1e:	211e      	movs	r1, #30
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 f8e3 	bl	8007cec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007b26:	7afb      	ldrb	r3, [r7, #11]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 f8de 	bl	8007cec <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007b30:	2100      	movs	r1, #0
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 f8da 	bl	8007cec <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b38:	2300      	movs	r3, #0
 8007b3a:	82fb      	strh	r3, [r7, #22]
 8007b3c:	e009      	b.n	8007b52 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007b3e:	69b9      	ldr	r1, [r7, #24]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f929 	bl	8007d98 <SUBGHZSPI_Receive>
      pData++;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007b4c:	8afb      	ldrh	r3, [r7, #22]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	82fb      	strh	r3, [r7, #22]
 8007b52:	8afa      	ldrh	r2, [r7, #22]
 8007b54:	893b      	ldrh	r3, [r7, #8]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d3f1      	bcc.n	8007b3e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b5a:	f7ff fd11 	bl	8007580 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 f996 	bl	8007e90 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	77fb      	strb	r3, [r7, #31]
 8007b70:	e001      	b.n	8007b76 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	715a      	strb	r2, [r3, #5]

    return status;
 8007b82:	7ffb      	ldrb	r3, [r7, #31]
 8007b84:	e000      	b.n	8007b88 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007b86:	2302      	movs	r3, #2
  }
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3720      	adds	r7, #32
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007b98:	2300      	movs	r3, #0
 8007b9a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007b9c:	f107 020c 	add.w	r2, r7, #12
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	2112      	movs	r1, #18
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff fef4 	bl	8007992 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007baa:	7b3b      	ldrb	r3, [r7, #12]
 8007bac:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007bae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bb2:	021b      	lsls	r3, r3, #8
 8007bb4:	b21a      	sxth	r2, r3
 8007bb6:	7b7b      	ldrb	r3, [r7, #13]
 8007bb8:	b21b      	sxth	r3, r3
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	b21b      	sxth	r3, r3
 8007bbe:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007bc0:	f107 020c 	add.w	r2, r7, #12
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	2102      	movs	r1, #2
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff fe83 	bl	80078d4 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007bce:	89fb      	ldrh	r3, [r7, #14]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f013 f811 	bl	801ac00 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8007bde:	89fb      	ldrh	r3, [r7, #14]
 8007be0:	085b      	lsrs	r3, r3, #1
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d008      	beq.n	8007bfc <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8007bea:	89fb      	ldrh	r3, [r7, #14]
 8007bec:	099b      	lsrs	r3, r3, #6
 8007bee:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d102      	bne.n	8007bfc <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f013 f810 	bl	801ac1c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007bfc:	89fb      	ldrh	r3, [r7, #14]
 8007bfe:	089b      	lsrs	r3, r3, #2
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f013 f85f 	bl	801accc <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007c0e:	89fb      	ldrh	r3, [r7, #14]
 8007c10:	08db      	lsrs	r3, r3, #3
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f013 f864 	bl	801ace8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007c20:	89fb      	ldrh	r3, [r7, #14]
 8007c22:	091b      	lsrs	r3, r3, #4
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f013 f869 	bl	801ad04 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007c32:	89fb      	ldrh	r3, [r7, #14]
 8007c34:	095b      	lsrs	r3, r3, #5
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f013 f836 	bl	801acb0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007c44:	89fb      	ldrh	r3, [r7, #14]
 8007c46:	099b      	lsrs	r3, r3, #6
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f012 fff1 	bl	801ac38 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007c56:	89fb      	ldrh	r3, [r7, #14]
 8007c58:	09db      	lsrs	r3, r3, #7
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00e      	beq.n	8007c80 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007c62:	89fb      	ldrh	r3, [r7, #14]
 8007c64:	0a1b      	lsrs	r3, r3, #8
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007c6e:	2101      	movs	r1, #1
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f012 ffef 	bl	801ac54 <HAL_SUBGHZ_CADStatusCallback>
 8007c76:	e003      	b.n	8007c80 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007c78:	2100      	movs	r1, #0
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f012 ffea 	bl	801ac54 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007c80:	89fb      	ldrh	r3, [r7, #14]
 8007c82:	0a5b      	lsrs	r3, r3, #9
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f012 ffff 	bl	801ac90 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007c92:	89fb      	ldrh	r3, [r7, #14]
 8007c94:	0b9b      	lsrs	r3, r3, #14
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f013 f83e 	bl	801ad20 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007ca4:	bf00      	nop
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce8 <SUBGHZSPI_Init+0x3c>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8007ce8 <SUBGHZSPI_Init+0x3c>)
 8007cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cbe:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007cc0:	4a09      	ldr	r2, [pc, #36]	@ (8007ce8 <SUBGHZSPI_Init+0x3c>)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007cc8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007cca:	4b07      	ldr	r3, [pc, #28]	@ (8007ce8 <SUBGHZSPI_Init+0x3c>)
 8007ccc:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007cd0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007cd2:	4b05      	ldr	r3, [pc, #20]	@ (8007ce8 <SUBGHZSPI_Init+0x3c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a04      	ldr	r2, [pc, #16]	@ (8007ce8 <SUBGHZSPI_Init+0x3c>)
 8007cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cdc:	6013      	str	r3, [r2, #0]
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bc80      	pop	{r7}
 8007ce6:	4770      	bx	lr
 8007ce8:	58010000 	.word	0x58010000

08007cec <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007cfc:	4b23      	ldr	r3, [pc, #140]	@ (8007d8c <SUBGHZSPI_Transmit+0xa0>)
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	4613      	mov	r3, r2
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	0cdb      	lsrs	r3, r3, #19
 8007d0a:	2264      	movs	r2, #100	@ 0x64
 8007d0c:	fb02 f303 	mul.w	r3, r2, r3
 8007d10:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d105      	bne.n	8007d24 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	609a      	str	r2, [r3, #8]
      break;
 8007d22:	e008      	b.n	8007d36 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007d2a:	4b19      	ldr	r3, [pc, #100]	@ (8007d90 <SUBGHZSPI_Transmit+0xa4>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d1ed      	bne.n	8007d12 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007d36:	4b17      	ldr	r3, [pc, #92]	@ (8007d94 <SUBGHZSPI_Transmit+0xa8>)
 8007d38:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	78fa      	ldrb	r2, [r7, #3]
 8007d3e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d40:	4b12      	ldr	r3, [pc, #72]	@ (8007d8c <SUBGHZSPI_Transmit+0xa0>)
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	1a9b      	subs	r3, r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	0cdb      	lsrs	r3, r3, #19
 8007d4e:	2264      	movs	r2, #100	@ 0x64
 8007d50:	fb02 f303 	mul.w	r3, r2, r3
 8007d54:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d105      	bne.n	8007d68 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	609a      	str	r2, [r3, #8]
      break;
 8007d66:	e008      	b.n	8007d7a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007d6e:	4b08      	ldr	r3, [pc, #32]	@ (8007d90 <SUBGHZSPI_Transmit+0xa4>)
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d1ed      	bne.n	8007d56 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007d7a:	4b05      	ldr	r3, [pc, #20]	@ (8007d90 <SUBGHZSPI_Transmit+0xa4>)
 8007d7c:	68db      	ldr	r3, [r3, #12]

  return status;
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	371c      	adds	r7, #28
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bc80      	pop	{r7}
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	20000000 	.word	0x20000000
 8007d90:	58010000 	.word	0x58010000
 8007d94:	5801000c 	.word	0x5801000c

08007d98 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007da6:	4b25      	ldr	r3, [pc, #148]	@ (8007e3c <SUBGHZSPI_Receive+0xa4>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	4613      	mov	r3, r2
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	1a9b      	subs	r3, r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	0cdb      	lsrs	r3, r3, #19
 8007db4:	2264      	movs	r2, #100	@ 0x64
 8007db6:	fb02 f303 	mul.w	r3, r2, r3
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d105      	bne.n	8007dce <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	609a      	str	r2, [r3, #8]
      break;
 8007dcc:	e008      	b.n	8007de0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e40 <SUBGHZSPI_Receive+0xa8>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d1ed      	bne.n	8007dbc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007de0:	4b18      	ldr	r3, [pc, #96]	@ (8007e44 <SUBGHZSPI_Receive+0xac>)
 8007de2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	22ff      	movs	r2, #255	@ 0xff
 8007de8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007dea:	4b14      	ldr	r3, [pc, #80]	@ (8007e3c <SUBGHZSPI_Receive+0xa4>)
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4613      	mov	r3, r2
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	1a9b      	subs	r3, r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	0cdb      	lsrs	r3, r3, #19
 8007df8:	2264      	movs	r2, #100	@ 0x64
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d105      	bne.n	8007e12 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	609a      	str	r2, [r3, #8]
      break;
 8007e10:	e008      	b.n	8007e24 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007e18:	4b09      	ldr	r3, [pc, #36]	@ (8007e40 <SUBGHZSPI_Receive+0xa8>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d1ed      	bne.n	8007e00 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007e24:	4b06      	ldr	r3, [pc, #24]	@ (8007e40 <SUBGHZSPI_Receive+0xa8>)
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	701a      	strb	r2, [r3, #0]

  return status;
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bc80      	pop	{r7}
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	20000000 	.word	0x20000000
 8007e40:	58010000 	.word	0x58010000
 8007e44:	5801000c 	.word	0x5801000c

08007e48 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	791b      	ldrb	r3, [r3, #4]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d111      	bne.n	8007e7c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007e58:	4b0c      	ldr	r3, [pc, #48]	@ (8007e8c <SUBGHZ_CheckDeviceReady+0x44>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	4413      	add	r3, r2
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	0c1b      	lsrs	r3, r3, #16
 8007e66:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007e68:	f7ff fb9a 	bl	80075a0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1f9      	bne.n	8007e6c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007e78:	f7ff fb82 	bl	8007580 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f807 	bl	8007e90 <SUBGHZ_WaitOnBusy>
 8007e82:	4603      	mov	r3, r0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	20000000 	.word	0x20000000

08007e90 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007e9c:	4b12      	ldr	r3, [pc, #72]	@ (8007ee8 <SUBGHZ_WaitOnBusy+0x58>)
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	4413      	add	r3, r2
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	0d1b      	lsrs	r3, r3, #20
 8007eaa:	2264      	movs	r2, #100	@ 0x64
 8007eac:	fb02 f303 	mul.w	r3, r2, r3
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007eb2:	f7ff fba3 	bl	80075fc <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007eb6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d105      	bne.n	8007eca <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	609a      	str	r2, [r3, #8]
      break;
 8007ec8:	e009      	b.n	8007ede <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007ed0:	f7ff fb82 	bl	80075d8 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	4013      	ands	r3, r2
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d0e9      	beq.n	8007eb2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	20000000 	.word	0x20000000

08007eec <LL_RCC_GetUSARTClockSource>:
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ef8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	401a      	ands	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	041b      	lsls	r3, r3, #16
 8007f04:	4313      	orrs	r3, r2
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr

08007f10 <LL_RCC_GetLPUARTClockSource>:
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4013      	ands	r3, r2
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bc80      	pop	{r7}
 8007f2c:	4770      	bx	lr

08007f2e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e042      	b.n	8007fc6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d106      	bne.n	8007f58 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7fa fd34 	bl	80029c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2224      	movs	r2, #36	@ 0x24
 8007f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 0201 	bic.w	r2, r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 feab 	bl	8008cd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fc34 	bl	80087ec <UART_SetConfig>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e01b      	b.n	8007fc6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007fac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 0201 	orr.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 ff29 	bl	8008e16 <UART_CheckIdleState>
 8007fc4:	4603      	mov	r3, r0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	@ 0x28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	d137      	bne.n	8008058 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <HAL_UART_Receive_IT+0x24>
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e030      	b.n	800805a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a18      	ldr	r2, [pc, #96]	@ (8008064 <HAL_UART_Receive_IT+0x94>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d01f      	beq.n	8008048 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d018      	beq.n	8008048 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	613b      	str	r3, [r7, #16]
   return(result);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800802a:	627b      	str	r3, [r7, #36]	@ 0x24
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	461a      	mov	r2, r3
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	623b      	str	r3, [r7, #32]
 8008036:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	69f9      	ldr	r1, [r7, #28]
 800803a:	6a3a      	ldr	r2, [r7, #32]
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	61bb      	str	r3, [r7, #24]
   return(result);
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e6      	bne.n	8008016 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008048:	88fb      	ldrh	r3, [r7, #6]
 800804a:	461a      	mov	r2, r3
 800804c:	68b9      	ldr	r1, [r7, #8]
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 fffe 	bl	8009050 <UART_Start_Receive_IT>
 8008054:	4603      	mov	r3, r0
 8008056:	e000      	b.n	800805a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008058:	2302      	movs	r3, #2
  }
}
 800805a:	4618      	mov	r0, r3
 800805c:	3728      	adds	r7, #40	@ 0x28
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	40008000 	.word	0x40008000

08008068 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	@ 0x28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800807c:	2b20      	cmp	r3, #32
 800807e:	d167      	bne.n	8008150 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d002      	beq.n	800808c <HAL_UART_Transmit_DMA+0x24>
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e060      	b.n	8008152 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	88fa      	ldrh	r2, [r7, #6]
 800809a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	88fa      	ldrh	r2, [r7, #6]
 80080a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2221      	movs	r2, #33	@ 0x21
 80080b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d028      	beq.n	8008110 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080c2:	4a26      	ldr	r2, [pc, #152]	@ (800815c <HAL_UART_Transmit_DMA+0xf4>)
 80080c4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080ca:	4a25      	ldr	r2, [pc, #148]	@ (8008160 <HAL_UART_Transmit_DMA+0xf8>)
 80080cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080d2:	4a24      	ldr	r2, [pc, #144]	@ (8008164 <HAL_UART_Transmit_DMA+0xfc>)
 80080d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080da:	2200      	movs	r2, #0
 80080dc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e6:	4619      	mov	r1, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3328      	adds	r3, #40	@ 0x28
 80080ee:	461a      	mov	r2, r3
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	f7fc fac7 	bl	8004684 <HAL_DMA_Start_IT>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d009      	beq.n	8008110 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2210      	movs	r2, #16
 8008100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2220      	movs	r2, #32
 8008108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e020      	b.n	8008152 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2240      	movs	r2, #64	@ 0x40
 8008116:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3308      	adds	r3, #8
 800811e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	613b      	str	r3, [r7, #16]
   return(result);
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800812e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008138:	623a      	str	r2, [r7, #32]
 800813a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	69f9      	ldr	r1, [r7, #28]
 800813e:	6a3a      	ldr	r2, [r7, #32]
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	61bb      	str	r3, [r7, #24]
   return(result);
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e5      	bne.n	8008118 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	e000      	b.n	8008152 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008150:	2302      	movs	r3, #2
  }
}
 8008152:	4618      	mov	r0, r3
 8008154:	3728      	adds	r7, #40	@ 0x28
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	080093db 	.word	0x080093db
 8008160:	08009475 	.word	0x08009475
 8008164:	08009491 	.word	0x08009491

08008168 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b0ba      	sub	sp, #232	@ 0xe8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800818e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008192:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008196:	4013      	ands	r3, r2
 8008198:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800819c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d11b      	bne.n	80081dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d015      	beq.n	80081dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081b4:	f003 0320 	and.w	r3, r3, #32
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d105      	bne.n	80081c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d009      	beq.n	80081dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 82e3 	beq.w	8008798 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
      }
      return;
 80081da:	e2dd      	b.n	8008798 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 8123 	beq.w	800842c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80081e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80081ea:	4b8d      	ldr	r3, [pc, #564]	@ (8008420 <HAL_UART_IRQHandler+0x2b8>)
 80081ec:	4013      	ands	r3, r2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80081f6:	4b8b      	ldr	r3, [pc, #556]	@ (8008424 <HAL_UART_IRQHandler+0x2bc>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8116 	beq.w	800842c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d011      	beq.n	8008230 <HAL_UART_IRQHandler+0xc8>
 800820c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2201      	movs	r2, #1
 800821e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008226:	f043 0201 	orr.w	r2, r3, #1
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d011      	beq.n	8008260 <HAL_UART_IRQHandler+0xf8>
 800823c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00b      	beq.n	8008260 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2202      	movs	r2, #2
 800824e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008256:	f043 0204 	orr.w	r2, r3, #4
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d011      	beq.n	8008290 <HAL_UART_IRQHandler+0x128>
 800826c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00b      	beq.n	8008290 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2204      	movs	r2, #4
 800827e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008286:	f043 0202 	orr.w	r2, r3, #2
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008294:	f003 0308 	and.w	r3, r3, #8
 8008298:	2b00      	cmp	r3, #0
 800829a:	d017      	beq.n	80082cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800829c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d105      	bne.n	80082b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80082a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80082ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008420 <HAL_UART_IRQHandler+0x2b8>)
 80082ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00b      	beq.n	80082cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2208      	movs	r2, #8
 80082ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082c2:	f043 0208 	orr.w	r2, r3, #8
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d012      	beq.n	80082fe <HAL_UART_IRQHandler+0x196>
 80082d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00c      	beq.n	80082fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082f4:	f043 0220 	orr.w	r2, r3, #32
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 8249 	beq.w	800879c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800830a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800830e:	f003 0320 	and.w	r3, r3, #32
 8008312:	2b00      	cmp	r3, #0
 8008314:	d013      	beq.n	800833e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800831a:	f003 0320 	and.w	r3, r3, #32
 800831e:	2b00      	cmp	r3, #0
 8008320:	d105      	bne.n	800832e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d007      	beq.n	800833e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008344:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008352:	2b40      	cmp	r3, #64	@ 0x40
 8008354:	d005      	beq.n	8008362 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800835a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800835e:	2b00      	cmp	r3, #0
 8008360:	d054      	beq.n	800840c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 ffd4 	bl	8009310 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008372:	2b40      	cmp	r3, #64	@ 0x40
 8008374:	d146      	bne.n	8008404 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3308      	adds	r3, #8
 800837c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008380:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800838c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008394:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3308      	adds	r3, #8
 800839e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80083a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80083a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80083ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80083ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1d9      	bne.n	8008376 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d017      	beq.n	80083fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083d2:	4a15      	ldr	r2, [pc, #84]	@ (8008428 <HAL_UART_IRQHandler+0x2c0>)
 80083d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fc fa2d 	bl	800483c <HAL_DMA_Abort_IT>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d019      	beq.n	800841c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80083f6:	4610      	mov	r0, r2
 80083f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fa:	e00f      	b.n	800841c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f9e0 	bl	80087c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008402:	e00b      	b.n	800841c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f9dc 	bl	80087c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800840a:	e007      	b.n	800841c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f9d8 	bl	80087c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800841a:	e1bf      	b.n	800879c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841c:	bf00      	nop
    return;
 800841e:	e1bd      	b.n	800879c <HAL_UART_IRQHandler+0x634>
 8008420:	10000001 	.word	0x10000001
 8008424:	04000120 	.word	0x04000120
 8008428:	08009511 	.word	0x08009511

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008430:	2b01      	cmp	r3, #1
 8008432:	f040 8153 	bne.w	80086dc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800843a:	f003 0310 	and.w	r3, r3, #16
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 814c 	beq.w	80086dc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008448:	f003 0310 	and.w	r3, r3, #16
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 8145 	beq.w	80086dc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2210      	movs	r2, #16
 8008458:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008464:	2b40      	cmp	r3, #64	@ 0x40
 8008466:	f040 80bb 	bne.w	80085e0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008478:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 818f 	beq.w	80087a0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008488:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800848c:	429a      	cmp	r2, r3
 800848e:	f080 8187 	bcs.w	80087a0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008498:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f040 8087 	bne.w	80085be <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80084c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80084de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80084e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80084ea:	e841 2300 	strex	r3, r2, [r1]
 80084ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80084f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1da      	bne.n	80084b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3308      	adds	r3, #8
 8008500:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800850a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800850c:	f023 0301 	bic.w	r3, r3, #1
 8008510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3308      	adds	r3, #8
 800851a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800851e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008522:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008526:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e1      	bne.n	80084fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3308      	adds	r3, #8
 800853c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800854c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3308      	adds	r3, #8
 8008556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800855a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800855c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008560:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008562:	e841 2300 	strex	r3, r2, [r1]
 8008566:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1e3      	bne.n	8008536 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2220      	movs	r2, #32
 8008572:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800858a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800858c:	f023 0310 	bic.w	r3, r3, #16
 8008590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	461a      	mov	r2, r3
 800859a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800859e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1e4      	bne.n	800857c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fc f8e1 	bl	8004780 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2202      	movs	r2, #2
 80085c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f8fb 	bl	80087d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085de:	e0df      	b.n	80087a0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 80d1 	beq.w	80087a4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 80cc 	beq.w	80087a4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800861a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800861c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008620:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800862e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008630:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008632:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008634:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008636:	e841 2300 	strex	r3, r2, [r1]
 800863a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800863c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1e4      	bne.n	800860c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3308      	adds	r3, #8
 8008648:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	623b      	str	r3, [r7, #32]
   return(result);
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008658:	f023 0301 	bic.w	r3, r3, #1
 800865c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3308      	adds	r3, #8
 8008666:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800866a:	633a      	str	r2, [r7, #48]	@ 0x30
 800866c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e1      	bne.n	8008642 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2220      	movs	r2, #32
 8008682:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	60fb      	str	r3, [r7, #12]
   return(result);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f023 0310 	bic.w	r3, r3, #16
 80086a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80086b4:	61fb      	str	r3, [r7, #28]
 80086b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b8:	69b9      	ldr	r1, [r7, #24]
 80086ba:	69fa      	ldr	r2, [r7, #28]
 80086bc:	e841 2300 	strex	r3, r2, [r1]
 80086c0:	617b      	str	r3, [r7, #20]
   return(result);
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1e4      	bne.n	8008692 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2202      	movs	r2, #2
 80086cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f87d 	bl	80087d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086da:	e063      	b.n	80087a4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80086dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00e      	beq.n	8008706 <HAL_UART_IRQHandler+0x59e>
 80086e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d008      	beq.n	8008706 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80086fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 fc64 	bl	8009fcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008704:	e051      	b.n	80087aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800870a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800870e:	2b00      	cmp	r3, #0
 8008710:	d014      	beq.n	800873c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800871a:	2b00      	cmp	r3, #0
 800871c:	d105      	bne.n	800872a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800871e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008722:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d008      	beq.n	800873c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800872e:	2b00      	cmp	r3, #0
 8008730:	d03a      	beq.n	80087a8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	4798      	blx	r3
    }
    return;
 800873a:	e035      	b.n	80087a8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800873c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	d009      	beq.n	800875c <HAL_UART_IRQHandler+0x5f4>
 8008748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800874c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fef1 	bl	800953c <UART_EndTransmit_IT>
    return;
 800875a:	e026      	b.n	80087aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800875c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008760:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d009      	beq.n	800877c <HAL_UART_IRQHandler+0x614>
 8008768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800876c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f001 fc3b 	bl	8009ff0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800877a:	e016      	b.n	80087aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800877c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008780:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d010      	beq.n	80087aa <HAL_UART_IRQHandler+0x642>
 8008788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800878c:	2b00      	cmp	r3, #0
 800878e:	da0c      	bge.n	80087aa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 fc24 	bl	8009fde <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008796:	e008      	b.n	80087aa <HAL_UART_IRQHandler+0x642>
      return;
 8008798:	bf00      	nop
 800879a:	e006      	b.n	80087aa <HAL_UART_IRQHandler+0x642>
    return;
 800879c:	bf00      	nop
 800879e:	e004      	b.n	80087aa <HAL_UART_IRQHandler+0x642>
      return;
 80087a0:	bf00      	nop
 80087a2:	e002      	b.n	80087aa <HAL_UART_IRQHandler+0x642>
      return;
 80087a4:	bf00      	nop
 80087a6:	e000      	b.n	80087aa <HAL_UART_IRQHandler+0x642>
    return;
 80087a8:	bf00      	nop
  }
}
 80087aa:	37e8      	adds	r7, #232	@ 0xe8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr

080087c2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b083      	sub	sp, #12
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80087ca:	bf00      	nop
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bc80      	pop	{r7}
 80087e8:	4770      	bx	lr
	...

080087ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087f0:	b08c      	sub	sp, #48	@ 0x30
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	689a      	ldr	r2, [r3, #8]
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	431a      	orrs	r2, r3
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	431a      	orrs	r2, r3
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	4313      	orrs	r3, r2
 8008812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	4b94      	ldr	r3, [pc, #592]	@ (8008a6c <UART_SetConfig+0x280>)
 800881c:	4013      	ands	r3, r2
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	6812      	ldr	r2, [r2, #0]
 8008822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008824:	430b      	orrs	r3, r1
 8008826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a89      	ldr	r2, [pc, #548]	@ (8008a70 <UART_SetConfig+0x284>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d004      	beq.n	8008858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008854:	4313      	orrs	r3, r2
 8008856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008862:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	6812      	ldr	r2, [r2, #0]
 800886a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800886c:	430b      	orrs	r3, r1
 800886e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008876:	f023 010f 	bic.w	r1, r3, #15
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	430a      	orrs	r2, r1
 8008884:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a7a      	ldr	r2, [pc, #488]	@ (8008a74 <UART_SetConfig+0x288>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d127      	bne.n	80088e0 <UART_SetConfig+0xf4>
 8008890:	2003      	movs	r0, #3
 8008892:	f7ff fb2b 	bl	8007eec <LL_RCC_GetUSARTClockSource>
 8008896:	4603      	mov	r3, r0
 8008898:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800889c:	2b03      	cmp	r3, #3
 800889e:	d81b      	bhi.n	80088d8 <UART_SetConfig+0xec>
 80088a0:	a201      	add	r2, pc, #4	@ (adr r2, 80088a8 <UART_SetConfig+0xbc>)
 80088a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a6:	bf00      	nop
 80088a8:	080088b9 	.word	0x080088b9
 80088ac:	080088c9 	.word	0x080088c9
 80088b0:	080088c1 	.word	0x080088c1
 80088b4:	080088d1 	.word	0x080088d1
 80088b8:	2301      	movs	r3, #1
 80088ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088be:	e080      	b.n	80089c2 <UART_SetConfig+0x1d6>
 80088c0:	2302      	movs	r3, #2
 80088c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088c6:	e07c      	b.n	80089c2 <UART_SetConfig+0x1d6>
 80088c8:	2304      	movs	r3, #4
 80088ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ce:	e078      	b.n	80089c2 <UART_SetConfig+0x1d6>
 80088d0:	2308      	movs	r3, #8
 80088d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088d6:	e074      	b.n	80089c2 <UART_SetConfig+0x1d6>
 80088d8:	2310      	movs	r3, #16
 80088da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088de:	e070      	b.n	80089c2 <UART_SetConfig+0x1d6>
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a64      	ldr	r2, [pc, #400]	@ (8008a78 <UART_SetConfig+0x28c>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d138      	bne.n	800895c <UART_SetConfig+0x170>
 80088ea:	200c      	movs	r0, #12
 80088ec:	f7ff fafe 	bl	8007eec <LL_RCC_GetUSARTClockSource>
 80088f0:	4603      	mov	r3, r0
 80088f2:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80088f6:	2b0c      	cmp	r3, #12
 80088f8:	d82c      	bhi.n	8008954 <UART_SetConfig+0x168>
 80088fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008900 <UART_SetConfig+0x114>)
 80088fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008900:	08008935 	.word	0x08008935
 8008904:	08008955 	.word	0x08008955
 8008908:	08008955 	.word	0x08008955
 800890c:	08008955 	.word	0x08008955
 8008910:	08008945 	.word	0x08008945
 8008914:	08008955 	.word	0x08008955
 8008918:	08008955 	.word	0x08008955
 800891c:	08008955 	.word	0x08008955
 8008920:	0800893d 	.word	0x0800893d
 8008924:	08008955 	.word	0x08008955
 8008928:	08008955 	.word	0x08008955
 800892c:	08008955 	.word	0x08008955
 8008930:	0800894d 	.word	0x0800894d
 8008934:	2300      	movs	r3, #0
 8008936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800893a:	e042      	b.n	80089c2 <UART_SetConfig+0x1d6>
 800893c:	2302      	movs	r3, #2
 800893e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008942:	e03e      	b.n	80089c2 <UART_SetConfig+0x1d6>
 8008944:	2304      	movs	r3, #4
 8008946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800894a:	e03a      	b.n	80089c2 <UART_SetConfig+0x1d6>
 800894c:	2308      	movs	r3, #8
 800894e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008952:	e036      	b.n	80089c2 <UART_SetConfig+0x1d6>
 8008954:	2310      	movs	r3, #16
 8008956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800895a:	e032      	b.n	80089c2 <UART_SetConfig+0x1d6>
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a43      	ldr	r2, [pc, #268]	@ (8008a70 <UART_SetConfig+0x284>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d12a      	bne.n	80089bc <UART_SetConfig+0x1d0>
 8008966:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800896a:	f7ff fad1 	bl	8007f10 <LL_RCC_GetLPUARTClockSource>
 800896e:	4603      	mov	r3, r0
 8008970:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008974:	d01a      	beq.n	80089ac <UART_SetConfig+0x1c0>
 8008976:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800897a:	d81b      	bhi.n	80089b4 <UART_SetConfig+0x1c8>
 800897c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008980:	d00c      	beq.n	800899c <UART_SetConfig+0x1b0>
 8008982:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008986:	d815      	bhi.n	80089b4 <UART_SetConfig+0x1c8>
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <UART_SetConfig+0x1a8>
 800898c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008990:	d008      	beq.n	80089a4 <UART_SetConfig+0x1b8>
 8008992:	e00f      	b.n	80089b4 <UART_SetConfig+0x1c8>
 8008994:	2300      	movs	r3, #0
 8008996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800899a:	e012      	b.n	80089c2 <UART_SetConfig+0x1d6>
 800899c:	2302      	movs	r3, #2
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089a2:	e00e      	b.n	80089c2 <UART_SetConfig+0x1d6>
 80089a4:	2304      	movs	r3, #4
 80089a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089aa:	e00a      	b.n	80089c2 <UART_SetConfig+0x1d6>
 80089ac:	2308      	movs	r3, #8
 80089ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089b2:	e006      	b.n	80089c2 <UART_SetConfig+0x1d6>
 80089b4:	2310      	movs	r3, #16
 80089b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ba:	e002      	b.n	80089c2 <UART_SetConfig+0x1d6>
 80089bc:	2310      	movs	r3, #16
 80089be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008a70 <UART_SetConfig+0x284>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	f040 80a4 	bne.w	8008b16 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80089d2:	2b08      	cmp	r3, #8
 80089d4:	d823      	bhi.n	8008a1e <UART_SetConfig+0x232>
 80089d6:	a201      	add	r2, pc, #4	@ (adr r2, 80089dc <UART_SetConfig+0x1f0>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	08008a01 	.word	0x08008a01
 80089e0:	08008a1f 	.word	0x08008a1f
 80089e4:	08008a09 	.word	0x08008a09
 80089e8:	08008a1f 	.word	0x08008a1f
 80089ec:	08008a0f 	.word	0x08008a0f
 80089f0:	08008a1f 	.word	0x08008a1f
 80089f4:	08008a1f 	.word	0x08008a1f
 80089f8:	08008a1f 	.word	0x08008a1f
 80089fc:	08008a17 	.word	0x08008a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a00:	f7fd ff3a 	bl	8006878 <HAL_RCC_GetPCLK1Freq>
 8008a04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a06:	e010      	b.n	8008a2a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a08:	4b1c      	ldr	r3, [pc, #112]	@ (8008a7c <UART_SetConfig+0x290>)
 8008a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a0c:	e00d      	b.n	8008a2a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a0e:	f7fd fe7f 	bl	8006710 <HAL_RCC_GetSysClockFreq>
 8008a12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a14:	e009      	b.n	8008a2a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a1c:	e005      	b.n	8008a2a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 8137 	beq.w	8008ca0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a36:	4a12      	ldr	r2, [pc, #72]	@ (8008a80 <UART_SetConfig+0x294>)
 8008a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	4413      	add	r3, r2
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d305      	bcc.n	8008a62 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d910      	bls.n	8008a84 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a68:	e11a      	b.n	8008ca0 <UART_SetConfig+0x4b4>
 8008a6a:	bf00      	nop
 8008a6c:	cfff69f3 	.word	0xcfff69f3
 8008a70:	40008000 	.word	0x40008000
 8008a74:	40013800 	.word	0x40013800
 8008a78:	40004400 	.word	0x40004400
 8008a7c:	00f42400 	.word	0x00f42400
 8008a80:	0801d118 	.word	0x0801d118
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a86:	2200      	movs	r2, #0
 8008a88:	60bb      	str	r3, [r7, #8]
 8008a8a:	60fa      	str	r2, [r7, #12]
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a90:	4a8e      	ldr	r2, [pc, #568]	@ (8008ccc <UART_SetConfig+0x4e0>)
 8008a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	2200      	movs	r2, #0
 8008a9a:	603b      	str	r3, [r7, #0]
 8008a9c:	607a      	str	r2, [r7, #4]
 8008a9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008aa6:	f7f8 f87f 	bl	8000ba8 <__aeabi_uldivmod>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	f04f 0200 	mov.w	r2, #0
 8008ab6:	f04f 0300 	mov.w	r3, #0
 8008aba:	020b      	lsls	r3, r1, #8
 8008abc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ac0:	0202      	lsls	r2, r0, #8
 8008ac2:	6979      	ldr	r1, [r7, #20]
 8008ac4:	6849      	ldr	r1, [r1, #4]
 8008ac6:	0849      	lsrs	r1, r1, #1
 8008ac8:	2000      	movs	r0, #0
 8008aca:	460c      	mov	r4, r1
 8008acc:	4605      	mov	r5, r0
 8008ace:	eb12 0804 	adds.w	r8, r2, r4
 8008ad2:	eb43 0905 	adc.w	r9, r3, r5
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	469a      	mov	sl, r3
 8008ade:	4693      	mov	fp, r2
 8008ae0:	4652      	mov	r2, sl
 8008ae2:	465b      	mov	r3, fp
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	f7f8 f85e 	bl	8000ba8 <__aeabi_uldivmod>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4613      	mov	r3, r2
 8008af2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008afa:	d308      	bcc.n	8008b0e <UART_SetConfig+0x322>
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b02:	d204      	bcs.n	8008b0e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6a3a      	ldr	r2, [r7, #32]
 8008b0a:	60da      	str	r2, [r3, #12]
 8008b0c:	e0c8      	b.n	8008ca0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b14:	e0c4      	b.n	8008ca0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b1e:	d167      	bne.n	8008bf0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8008b20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b24:	2b08      	cmp	r3, #8
 8008b26:	d828      	bhi.n	8008b7a <UART_SetConfig+0x38e>
 8008b28:	a201      	add	r2, pc, #4	@ (adr r2, 8008b30 <UART_SetConfig+0x344>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008b55 	.word	0x08008b55
 8008b34:	08008b5d 	.word	0x08008b5d
 8008b38:	08008b65 	.word	0x08008b65
 8008b3c:	08008b7b 	.word	0x08008b7b
 8008b40:	08008b6b 	.word	0x08008b6b
 8008b44:	08008b7b 	.word	0x08008b7b
 8008b48:	08008b7b 	.word	0x08008b7b
 8008b4c:	08008b7b 	.word	0x08008b7b
 8008b50:	08008b73 	.word	0x08008b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b54:	f7fd fe90 	bl	8006878 <HAL_RCC_GetPCLK1Freq>
 8008b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b5a:	e014      	b.n	8008b86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b5c:	f7fd fe9e 	bl	800689c <HAL_RCC_GetPCLK2Freq>
 8008b60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b62:	e010      	b.n	8008b86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b64:	4b5a      	ldr	r3, [pc, #360]	@ (8008cd0 <UART_SetConfig+0x4e4>)
 8008b66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b68:	e00d      	b.n	8008b86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b6a:	f7fd fdd1 	bl	8006710 <HAL_RCC_GetSysClockFreq>
 8008b6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b70:	e009      	b.n	8008b86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b78:	e005      	b.n	8008b86 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 8089 	beq.w	8008ca0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b92:	4a4e      	ldr	r2, [pc, #312]	@ (8008ccc <UART_SetConfig+0x4e0>)
 8008b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ba0:	005a      	lsls	r2, r3, #1
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	441a      	add	r2, r3
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	2b0f      	cmp	r3, #15
 8008bb8:	d916      	bls.n	8008be8 <UART_SetConfig+0x3fc>
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bc0:	d212      	bcs.n	8008be8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	f023 030f 	bic.w	r3, r3, #15
 8008bca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	085b      	lsrs	r3, r3, #1
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	8bfb      	ldrh	r3, [r7, #30]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	8bfa      	ldrh	r2, [r7, #30]
 8008be4:	60da      	str	r2, [r3, #12]
 8008be6:	e05b      	b.n	8008ca0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008bee:	e057      	b.n	8008ca0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008bf4:	2b08      	cmp	r3, #8
 8008bf6:	d828      	bhi.n	8008c4a <UART_SetConfig+0x45e>
 8008bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8008c00 <UART_SetConfig+0x414>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008c25 	.word	0x08008c25
 8008c04:	08008c2d 	.word	0x08008c2d
 8008c08:	08008c35 	.word	0x08008c35
 8008c0c:	08008c4b 	.word	0x08008c4b
 8008c10:	08008c3b 	.word	0x08008c3b
 8008c14:	08008c4b 	.word	0x08008c4b
 8008c18:	08008c4b 	.word	0x08008c4b
 8008c1c:	08008c4b 	.word	0x08008c4b
 8008c20:	08008c43 	.word	0x08008c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c24:	f7fd fe28 	bl	8006878 <HAL_RCC_GetPCLK1Freq>
 8008c28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c2a:	e014      	b.n	8008c56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c2c:	f7fd fe36 	bl	800689c <HAL_RCC_GetPCLK2Freq>
 8008c30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c32:	e010      	b.n	8008c56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c34:	4b26      	ldr	r3, [pc, #152]	@ (8008cd0 <UART_SetConfig+0x4e4>)
 8008c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c38:	e00d      	b.n	8008c56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c3a:	f7fd fd69 	bl	8006710 <HAL_RCC_GetSysClockFreq>
 8008c3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c40:	e009      	b.n	8008c56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c48:	e005      	b.n	8008c56 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c54:	bf00      	nop
    }

    if (pclk != 0U)
 8008c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d021      	beq.n	8008ca0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c60:	4a1a      	ldr	r2, [pc, #104]	@ (8008ccc <UART_SetConfig+0x4e0>)
 8008c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c66:	461a      	mov	r2, r3
 8008c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	085b      	lsrs	r3, r3, #1
 8008c74:	441a      	add	r2, r3
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	2b0f      	cmp	r3, #15
 8008c84:	d909      	bls.n	8008c9a <UART_SetConfig+0x4ae>
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c8c:	d205      	bcs.n	8008c9a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60da      	str	r2, [r3, #12]
 8008c98:	e002      	b.n	8008ca0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008cbc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3730      	adds	r7, #48	@ 0x30
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cca:	bf00      	nop
 8008ccc:	0801d118 	.word	0x0801d118
 8008cd0:	00f42400 	.word	0x00f42400

08008cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce0:	f003 0308 	and.w	r3, r3, #8
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00a      	beq.n	8008cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	430a      	orrs	r2, r1
 8008d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00a      	beq.n	8008d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d46:	f003 0304 	and.w	r3, r3, #4
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00a      	beq.n	8008d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	430a      	orrs	r2, r1
 8008d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d68:	f003 0310 	and.w	r3, r3, #16
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00a      	beq.n	8008d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d8a:	f003 0320 	and.w	r3, r3, #32
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00a      	beq.n	8008da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d01a      	beq.n	8008dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dd2:	d10a      	bne.n	8008dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	430a      	orrs	r2, r1
 8008de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	605a      	str	r2, [r3, #4]
  }
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bc80      	pop	{r7}
 8008e14:	4770      	bx	lr

08008e16 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b086      	sub	sp, #24
 8008e1a:	af02      	add	r7, sp, #8
 8008e1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e26:	f7f9 fa51 	bl	80022cc <HAL_GetTick>
 8008e2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0308 	and.w	r3, r3, #8
 8008e36:	2b08      	cmp	r3, #8
 8008e38:	d10e      	bne.n	8008e58 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f832 	bl	8008eb2 <UART_WaitOnFlagUntilTimeout>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	e028      	b.n	8008eaa <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0304 	and.w	r3, r3, #4
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	d10e      	bne.n	8008e84 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f81c 	bl	8008eb2 <UART_WaitOnFlagUntilTimeout>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e012      	b.n	8008eaa <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b09c      	sub	sp, #112	@ 0x70
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	60f8      	str	r0, [r7, #12]
 8008eba:	60b9      	str	r1, [r7, #8]
 8008ebc:	603b      	str	r3, [r7, #0]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec2:	e0af      	b.n	8009024 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eca:	f000 80ab 	beq.w	8009024 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ece:	f7f9 f9fd 	bl	80022cc <HAL_GetTick>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d302      	bcc.n	8008ee4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ede:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d140      	bne.n	8008f66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ef4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008ef8:	667b      	str	r3, [r7, #100]	@ 0x64
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f04:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008f08:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1e6      	bne.n	8008ee4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f28:	f023 0301 	bic.w	r3, r3, #1
 8008f2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3308      	adds	r3, #8
 8008f34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008f36:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008f38:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e5      	bne.n	8008f16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e06f      	b.n	8009046 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0304 	and.w	r3, r3, #4
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d057      	beq.n	8009024 <UART_WaitOnFlagUntilTimeout+0x172>
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2b80      	cmp	r3, #128	@ 0x80
 8008f78:	d054      	beq.n	8009024 <UART_WaitOnFlagUntilTimeout+0x172>
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2b40      	cmp	r3, #64	@ 0x40
 8008f7e:	d051      	beq.n	8009024 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f8e:	d149      	bne.n	8009024 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa2:	e853 3f00 	ldrex	r3, [r3]
 8008fa6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008faa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fba:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008fbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fc0:	e841 2300 	strex	r3, r2, [r1]
 8008fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1e6      	bne.n	8008f9a <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3308      	adds	r3, #8
 8008fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	e853 3f00 	ldrex	r3, [r3]
 8008fda:	613b      	str	r3, [r7, #16]
   return(result);
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	f023 0301 	bic.w	r3, r3, #1
 8008fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3308      	adds	r3, #8
 8008fea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008fec:	623a      	str	r2, [r7, #32]
 8008fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff0:	69f9      	ldr	r1, [r7, #28]
 8008ff2:	6a3a      	ldr	r2, [r7, #32]
 8008ff4:	e841 2300 	strex	r3, r2, [r1]
 8008ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e5      	bne.n	8008fcc <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2220      	movs	r2, #32
 8009004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2220      	movs	r2, #32
 800900c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2220      	movs	r2, #32
 8009014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e010      	b.n	8009046 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	69da      	ldr	r2, [r3, #28]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	4013      	ands	r3, r2
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	429a      	cmp	r2, r3
 8009032:	bf0c      	ite	eq
 8009034:	2301      	moveq	r3, #1
 8009036:	2300      	movne	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	461a      	mov	r2, r3
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	429a      	cmp	r2, r3
 8009040:	f43f af40 	beq.w	8008ec4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3770      	adds	r7, #112	@ 0x70
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009050:	b480      	push	{r7}
 8009052:	b0a3      	sub	sp, #140	@ 0x8c
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	88fa      	ldrh	r2, [r7, #6]
 8009068:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	88fa      	ldrh	r2, [r7, #6]
 8009070:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009082:	d10e      	bne.n	80090a2 <UART_Start_Receive_IT+0x52>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d105      	bne.n	8009098 <UART_Start_Receive_IT+0x48>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009092:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009096:	e02d      	b.n	80090f4 <UART_Start_Receive_IT+0xa4>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	22ff      	movs	r2, #255	@ 0xff
 800909c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80090a0:	e028      	b.n	80090f4 <UART_Start_Receive_IT+0xa4>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10d      	bne.n	80090c6 <UART_Start_Receive_IT+0x76>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d104      	bne.n	80090bc <UART_Start_Receive_IT+0x6c>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	22ff      	movs	r2, #255	@ 0xff
 80090b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80090ba:	e01b      	b.n	80090f4 <UART_Start_Receive_IT+0xa4>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	227f      	movs	r2, #127	@ 0x7f
 80090c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80090c4:	e016      	b.n	80090f4 <UART_Start_Receive_IT+0xa4>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090ce:	d10d      	bne.n	80090ec <UART_Start_Receive_IT+0x9c>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d104      	bne.n	80090e2 <UART_Start_Receive_IT+0x92>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	227f      	movs	r2, #127	@ 0x7f
 80090dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80090e0:	e008      	b.n	80090f4 <UART_Start_Receive_IT+0xa4>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	223f      	movs	r2, #63	@ 0x3f
 80090e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80090ea:	e003      	b.n	80090f4 <UART_Start_Receive_IT+0xa4>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2222      	movs	r2, #34	@ 0x22
 8009100:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3308      	adds	r3, #8
 800910a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800910e:	e853 3f00 	ldrex	r3, [r3]
 8009112:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009116:	f043 0301 	orr.w	r3, r3, #1
 800911a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3308      	adds	r3, #8
 8009124:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009128:	673a      	str	r2, [r7, #112]	@ 0x70
 800912a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800912e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009136:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e3      	bne.n	8009104 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009144:	d14f      	bne.n	80091e6 <UART_Start_Receive_IT+0x196>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800914c:	88fa      	ldrh	r2, [r7, #6]
 800914e:	429a      	cmp	r2, r3
 8009150:	d349      	bcc.n	80091e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800915a:	d107      	bne.n	800916c <UART_Start_Receive_IT+0x11c>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d103      	bne.n	800916c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4a46      	ldr	r2, [pc, #280]	@ (8009280 <UART_Start_Receive_IT+0x230>)
 8009168:	675a      	str	r2, [r3, #116]	@ 0x74
 800916a:	e002      	b.n	8009172 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4a45      	ldr	r2, [pc, #276]	@ (8009284 <UART_Start_Receive_IT+0x234>)
 8009170:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d01a      	beq.n	80091b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009182:	e853 3f00 	ldrex	r3, [r3]
 8009186:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800918a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800918e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	461a      	mov	r2, r3
 8009198:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800919c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800919e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80091a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80091aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e4      	bne.n	800917a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3308      	adds	r3, #8
 80091b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80091d0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80091d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80091d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80091de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e5      	bne.n	80091b0 <UART_Start_Receive_IT+0x160>
 80091e4:	e046      	b.n	8009274 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091ee:	d107      	bne.n	8009200 <UART_Start_Receive_IT+0x1b0>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d103      	bne.n	8009200 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4a23      	ldr	r2, [pc, #140]	@ (8009288 <UART_Start_Receive_IT+0x238>)
 80091fc:	675a      	str	r2, [r3, #116]	@ 0x74
 80091fe:	e002      	b.n	8009206 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4a22      	ldr	r2, [pc, #136]	@ (800928c <UART_Start_Receive_IT+0x23c>)
 8009204:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d019      	beq.n	8009242 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009216:	e853 3f00 	ldrex	r3, [r3]
 800921a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800921c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009222:	677b      	str	r3, [r7, #116]	@ 0x74
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
 800922a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800922c:	637b      	str	r3, [r7, #52]	@ 0x34
 800922e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009230:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009234:	e841 2300 	strex	r3, r2, [r1]
 8009238:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800923a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1e6      	bne.n	800920e <UART_Start_Receive_IT+0x1be>
 8009240:	e018      	b.n	8009274 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	e853 3f00 	ldrex	r3, [r3]
 800924e:	613b      	str	r3, [r7, #16]
   return(result);
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f043 0320 	orr.w	r3, r3, #32
 8009256:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	461a      	mov	r2, r3
 800925e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009260:	623b      	str	r3, [r7, #32]
 8009262:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	69f9      	ldr	r1, [r7, #28]
 8009266:	6a3a      	ldr	r2, [r7, #32]
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	61bb      	str	r3, [r7, #24]
   return(result);
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e6      	bne.n	8009242 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	378c      	adds	r7, #140	@ 0x8c
 800927a:	46bd      	mov	sp, r7
 800927c:	bc80      	pop	{r7}
 800927e:	4770      	bx	lr
 8009280:	08009c65 	.word	0x08009c65
 8009284:	08009905 	.word	0x08009905
 8009288:	0800974d 	.word	0x0800974d
 800928c:	08009595 	.word	0x08009595

08009290 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009290:	b480      	push	{r7}
 8009292:	b08f      	sub	sp, #60	@ 0x3c
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	e853 3f00 	ldrex	r3, [r3]
 80092a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80092ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	461a      	mov	r2, r3
 80092b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092b8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e6      	bne.n	8009298 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3308      	adds	r3, #8
 80092d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80092e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3308      	adds	r3, #8
 80092e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ea:	61ba      	str	r2, [r7, #24]
 80092ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	6979      	ldr	r1, [r7, #20]
 80092f0:	69ba      	ldr	r2, [r7, #24]
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	613b      	str	r3, [r7, #16]
   return(result);
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e5      	bne.n	80092ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2220      	movs	r2, #32
 8009302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009306:	bf00      	nop
 8009308:	373c      	adds	r7, #60	@ 0x3c
 800930a:	46bd      	mov	sp, r7
 800930c:	bc80      	pop	{r7}
 800930e:	4770      	bx	lr

08009310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009310:	b480      	push	{r7}
 8009312:	b095      	sub	sp, #84	@ 0x54
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800932c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009336:	643b      	str	r3, [r7, #64]	@ 0x40
 8009338:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800933c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e6      	bne.n	8009318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3308      	adds	r3, #8
 8009350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	61fb      	str	r3, [r7, #28]
   return(result);
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009360:	f023 0301 	bic.w	r3, r3, #1
 8009364:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3308      	adds	r3, #8
 800936c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800936e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009370:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1e3      	bne.n	800934a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009386:	2b01      	cmp	r3, #1
 8009388:	d118      	bne.n	80093bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	e853 3f00 	ldrex	r3, [r3]
 8009396:	60bb      	str	r3, [r7, #8]
   return(result);
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f023 0310 	bic.w	r3, r3, #16
 800939e:	647b      	str	r3, [r7, #68]	@ 0x44
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	461a      	mov	r2, r3
 80093a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093a8:	61bb      	str	r3, [r7, #24]
 80093aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	6979      	ldr	r1, [r7, #20]
 80093ae:	69ba      	ldr	r2, [r7, #24]
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	613b      	str	r3, [r7, #16]
   return(result);
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e6      	bne.n	800938a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2220      	movs	r2, #32
 80093c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80093d0:	bf00      	nop
 80093d2:	3754      	adds	r7, #84	@ 0x54
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr

080093da <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b090      	sub	sp, #64	@ 0x40
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0320 	and.w	r3, r3, #32
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d137      	bne.n	8009466 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80093f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f8:	2200      	movs	r2, #0
 80093fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3308      	adds	r3, #8
 8009404:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009408:	e853 3f00 	ldrex	r3, [r3]
 800940c:	623b      	str	r3, [r7, #32]
   return(result);
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009414:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3308      	adds	r3, #8
 800941c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800941e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009420:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009426:	e841 2300 	strex	r3, r2, [r1]
 800942a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800942c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1e5      	bne.n	80093fe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009446:	637b      	str	r3, [r7, #52]	@ 0x34
 8009448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	461a      	mov	r2, r3
 800944e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009450:	61fb      	str	r3, [r7, #28]
 8009452:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	69b9      	ldr	r1, [r7, #24]
 8009456:	69fa      	ldr	r2, [r7, #28]
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	617b      	str	r3, [r7, #20]
   return(result);
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e6      	bne.n	8009432 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009464:	e002      	b.n	800946c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009466:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009468:	f7f9 fcac 	bl	8002dc4 <HAL_UART_TxCpltCallback>
}
 800946c:	bf00      	nop
 800946e:	3740      	adds	r7, #64	@ 0x40
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009480:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f7ff f994 	bl	80087b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009488:	bf00      	nop
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800949c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094a4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094ac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094b8:	2b80      	cmp	r3, #128	@ 0x80
 80094ba:	d109      	bne.n	80094d0 <UART_DMAError+0x40>
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	2b21      	cmp	r3, #33	@ 0x21
 80094c0:	d106      	bne.n	80094d0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80094ca:	6978      	ldr	r0, [r7, #20]
 80094cc:	f7ff fee0 	bl	8009290 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094da:	2b40      	cmp	r3, #64	@ 0x40
 80094dc:	d109      	bne.n	80094f2 <UART_DMAError+0x62>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2b22      	cmp	r3, #34	@ 0x22
 80094e2:	d106      	bne.n	80094f2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80094ec:	6978      	ldr	r0, [r7, #20]
 80094ee:	f7ff ff0f 	bl	8009310 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094f8:	f043 0210 	orr.w	r2, r3, #16
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009502:	6978      	ldr	r0, [r7, #20]
 8009504:	f7ff f95d 	bl	80087c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009508:	bf00      	nop
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f7ff f947 	bl	80087c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009534:	bf00      	nop
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	60bb      	str	r3, [r7, #8]
   return(result);
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009558:	61fb      	str	r3, [r7, #28]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	61bb      	str	r3, [r7, #24]
 8009564:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6979      	ldr	r1, [r7, #20]
 8009568:	69ba      	ldr	r2, [r7, #24]
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	613b      	str	r3, [r7, #16]
   return(result);
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e6      	bne.n	8009544 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7f9 fc1d 	bl	8002dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800958a:	bf00      	nop
 800958c:	3720      	adds	r7, #32
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b09c      	sub	sp, #112	@ 0x70
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095ac:	2b22      	cmp	r3, #34	@ 0x22
 80095ae:	f040 80be 	bne.w	800972e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80095c0:	b2d9      	uxtb	r1, r3
 80095c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095cc:	400a      	ands	r2, r1
 80095ce:	b2d2      	uxtb	r2, r2
 80095d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f040 80a1 	bne.w	800973e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009604:	e853 3f00 	ldrex	r3, [r3]
 8009608:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800960a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800960c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009610:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800961a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800961c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009620:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009622:	e841 2300 	strex	r3, r2, [r1]
 8009626:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1e6      	bne.n	80095fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3308      	adds	r3, #8
 8009634:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800963e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009640:	f023 0301 	bic.w	r3, r3, #1
 8009644:	667b      	str	r3, [r7, #100]	@ 0x64
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3308      	adds	r3, #8
 800964c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800964e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009650:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800965c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e5      	bne.n	800962e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2220      	movs	r2, #32
 8009666:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a33      	ldr	r2, [pc, #204]	@ (8009748 <UART_RxISR_8BIT+0x1b4>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d01f      	beq.n	80096c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d018      	beq.n	80096c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009696:	e853 3f00 	ldrex	r3, [r3]
 800969a:	623b      	str	r3, [r7, #32]
   return(result);
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	461a      	mov	r2, r3
 80096aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80096ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096b4:	e841 2300 	strex	r3, r2, [r1]
 80096b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e6      	bne.n	800968e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d12e      	bne.n	8009726 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	e853 3f00 	ldrex	r3, [r3]
 80096da:	60fb      	str	r3, [r7, #12]
   return(result);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f023 0310 	bic.w	r3, r3, #16
 80096e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	461a      	mov	r2, r3
 80096ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096ec:	61fb      	str	r3, [r7, #28]
 80096ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	69b9      	ldr	r1, [r7, #24]
 80096f2:	69fa      	ldr	r2, [r7, #28]
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	617b      	str	r3, [r7, #20]
   return(result);
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e6      	bne.n	80096ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	f003 0310 	and.w	r3, r3, #16
 800970a:	2b10      	cmp	r3, #16
 800970c:	d103      	bne.n	8009716 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2210      	movs	r2, #16
 8009714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7ff f858 	bl	80087d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009724:	e00b      	b.n	800973e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7f9 fb62 	bl	8002df0 <HAL_UART_RxCpltCallback>
}
 800972c:	e007      	b.n	800973e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	699a      	ldr	r2, [r3, #24]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f042 0208 	orr.w	r2, r2, #8
 800973c:	619a      	str	r2, [r3, #24]
}
 800973e:	bf00      	nop
 8009740:	3770      	adds	r7, #112	@ 0x70
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	40008000 	.word	0x40008000

0800974c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b09c      	sub	sp, #112	@ 0x70
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800975a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009764:	2b22      	cmp	r3, #34	@ 0x22
 8009766:	f040 80be 	bne.w	80098e6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009770:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009778:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800977a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800977e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009782:	4013      	ands	r3, r2
 8009784:	b29a      	uxth	r2, r3
 8009786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009788:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800978e:	1c9a      	adds	r2, r3, #2
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800979a:	b29b      	uxth	r3, r3
 800979c:	3b01      	subs	r3, #1
 800979e:	b29a      	uxth	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f040 80a1 	bne.w	80098f6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80097c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80097d4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80097e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e6      	bne.n	80097b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3308      	adds	r3, #8
 80097ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f8:	f023 0301 	bic.w	r3, r3, #1
 80097fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3308      	adds	r3, #8
 8009804:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009806:	643a      	str	r2, [r7, #64]	@ 0x40
 8009808:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800980c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800980e:	e841 2300 	strex	r3, r2, [r1]
 8009812:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e5      	bne.n	80097e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2220      	movs	r2, #32
 800981e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a33      	ldr	r2, [pc, #204]	@ (8009900 <UART_RxISR_16BIT+0x1b4>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d01f      	beq.n	8009878 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d018      	beq.n	8009878 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984c:	6a3b      	ldr	r3, [r7, #32]
 800984e:	e853 3f00 	ldrex	r3, [r3]
 8009852:	61fb      	str	r3, [r7, #28]
   return(result);
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800985a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	461a      	mov	r2, r3
 8009862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009866:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009868:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800986a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800986c:	e841 2300 	strex	r3, r2, [r1]
 8009870:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1e6      	bne.n	8009846 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800987c:	2b01      	cmp	r3, #1
 800987e:	d12e      	bne.n	80098de <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	e853 3f00 	ldrex	r3, [r3]
 8009892:	60bb      	str	r3, [r7, #8]
   return(result);
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f023 0310 	bic.w	r3, r3, #16
 800989a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	461a      	mov	r2, r3
 80098a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098a4:	61bb      	str	r3, [r7, #24]
 80098a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a8:	6979      	ldr	r1, [r7, #20]
 80098aa:	69ba      	ldr	r2, [r7, #24]
 80098ac:	e841 2300 	strex	r3, r2, [r1]
 80098b0:	613b      	str	r3, [r7, #16]
   return(result);
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1e6      	bne.n	8009886 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	f003 0310 	and.w	r3, r3, #16
 80098c2:	2b10      	cmp	r3, #16
 80098c4:	d103      	bne.n	80098ce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2210      	movs	r2, #16
 80098cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7fe ff7c 	bl	80087d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098dc:	e00b      	b.n	80098f6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7f9 fa86 	bl	8002df0 <HAL_UART_RxCpltCallback>
}
 80098e4:	e007      	b.n	80098f6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	699a      	ldr	r2, [r3, #24]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f042 0208 	orr.w	r2, r2, #8
 80098f4:	619a      	str	r2, [r3, #24]
}
 80098f6:	bf00      	nop
 80098f8:	3770      	adds	r7, #112	@ 0x70
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	40008000 	.word	0x40008000

08009904 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b0ac      	sub	sp, #176	@ 0xb0
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009912:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800993a:	2b22      	cmp	r3, #34	@ 0x22
 800993c:	f040 8182 	bne.w	8009c44 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009946:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800994a:	e125      	b.n	8009b98 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009952:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009956:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800995a:	b2d9      	uxtb	r1, r3
 800995c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009960:	b2da      	uxtb	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009966:	400a      	ands	r2, r1
 8009968:	b2d2      	uxtb	r2, r2
 800996a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009970:	1c5a      	adds	r2, r3, #1
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800997c:	b29b      	uxth	r3, r3
 800997e:	3b01      	subs	r3, #1
 8009980:	b29a      	uxth	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	69db      	ldr	r3, [r3, #28]
 800998e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	2b00      	cmp	r3, #0
 800999c:	d053      	beq.n	8009a46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800999e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d011      	beq.n	80099ce <UART_RxISR_8BIT_FIFOEN+0xca>
 80099aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80099ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00b      	beq.n	80099ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2201      	movs	r2, #1
 80099bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099c4:	f043 0201 	orr.w	r2, r3, #1
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099d2:	f003 0302 	and.w	r3, r3, #2
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d011      	beq.n	80099fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 80099da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00b      	beq.n	80099fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2202      	movs	r2, #2
 80099ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099f4:	f043 0204 	orr.w	r2, r3, #4
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a02:	f003 0304 	and.w	r3, r3, #4
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d011      	beq.n	8009a2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00b      	beq.n	8009a2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2204      	movs	r2, #4
 8009a1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a24:	f043 0202 	orr.w	r2, r3, #2
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d006      	beq.n	8009a46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7fe fec2 	bl	80087c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f040 80a2 	bne.w	8009b98 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a5c:	e853 3f00 	ldrex	r3, [r3]
 8009a60:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009a62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a78:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009a7c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009a84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e4      	bne.n	8009a54 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3308      	adds	r3, #8
 8009a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a94:	e853 3f00 	ldrex	r3, [r3]
 8009a98:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009a9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009aa0:	f023 0301 	bic.w	r3, r3, #1
 8009aa4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3308      	adds	r3, #8
 8009aae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ab2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009ab4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009ab8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009ac0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e1      	bne.n	8009a8a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2220      	movs	r2, #32
 8009aca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a5f      	ldr	r2, [pc, #380]	@ (8009c5c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d021      	beq.n	8009b28 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d01a      	beq.n	8009b28 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b14:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b16:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b18:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b1c:	e841 2300 	strex	r3, r2, [r1]
 8009b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009b22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1e4      	bne.n	8009af2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d130      	bne.n	8009b92 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b3e:	e853 3f00 	ldrex	r3, [r3]
 8009b42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b46:	f023 0310 	bic.w	r3, r3, #16
 8009b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b58:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b60:	e841 2300 	strex	r3, r2, [r1]
 8009b64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e4      	bne.n	8009b36 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	f003 0310 	and.w	r3, r3, #16
 8009b76:	2b10      	cmp	r3, #16
 8009b78:	d103      	bne.n	8009b82 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2210      	movs	r2, #16
 8009b80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7fe fe22 	bl	80087d4 <HAL_UARTEx_RxEventCallback>
 8009b90:	e002      	b.n	8009b98 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7f9 f92c 	bl	8002df0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b98:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d006      	beq.n	8009bae <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ba4:	f003 0320 	and.w	r3, r3, #32
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f47f aecf 	bne.w	800994c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bb4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009bb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d049      	beq.n	8009c54 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009bc6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d242      	bcs.n	8009c54 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	e853 3f00 	ldrex	r3, [r3]
 8009bdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009be4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3308      	adds	r3, #8
 8009bee:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009bf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1e3      	bne.n	8009bce <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a15      	ldr	r2, [pc, #84]	@ (8009c60 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009c0a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	f043 0320 	orr.w	r3, r3, #32
 8009c20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c2e:	61bb      	str	r3, [r7, #24]
 8009c30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	6979      	ldr	r1, [r7, #20]
 8009c34:	69ba      	ldr	r2, [r7, #24]
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e4      	bne.n	8009c0c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c42:	e007      	b.n	8009c54 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	699a      	ldr	r2, [r3, #24]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f042 0208 	orr.w	r2, r2, #8
 8009c52:	619a      	str	r2, [r3, #24]
}
 8009c54:	bf00      	nop
 8009c56:	37b0      	adds	r7, #176	@ 0xb0
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	40008000 	.word	0x40008000
 8009c60:	08009595 	.word	0x08009595

08009c64 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b0ae      	sub	sp, #184	@ 0xb8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009c72:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	69db      	ldr	r3, [r3, #28]
 8009c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c9a:	2b22      	cmp	r3, #34	@ 0x22
 8009c9c:	f040 8186 	bne.w	8009fac <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ca6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009caa:	e129      	b.n	8009f00 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009cbe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009cc2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd4:	1c9a      	adds	r2, r3, #2
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009cf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cfa:	f003 0307 	and.w	r3, r3, #7
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d053      	beq.n	8009daa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d011      	beq.n	8009d32 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00b      	beq.n	8009d32 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d28:	f043 0201 	orr.w	r2, r3, #1
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d36:	f003 0302 	and.w	r3, r3, #2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d011      	beq.n	8009d62 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009d3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00b      	beq.n	8009d62 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d58:	f043 0204 	orr.w	r2, r3, #4
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d66:	f003 0304 	and.w	r3, r3, #4
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d011      	beq.n	8009d92 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009d6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d72:	f003 0301 	and.w	r3, r3, #1
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00b      	beq.n	8009d92 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2204      	movs	r2, #4
 8009d80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d88:	f043 0202 	orr.w	r2, r3, #2
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d006      	beq.n	8009daa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7fe fd10 	bl	80087c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f040 80a4 	bne.w	8009f00 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009dc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009dda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009dde:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009de2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009de6:	e841 2300 	strex	r3, r2, [r1]
 8009dea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1e2      	bne.n	8009db8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	3308      	adds	r3, #8
 8009df8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009dfc:	e853 3f00 	ldrex	r3, [r3]
 8009e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e08:	f023 0301 	bic.w	r3, r3, #1
 8009e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3308      	adds	r3, #8
 8009e16:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009e1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e22:	e841 2300 	strex	r3, r2, [r1]
 8009e26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1e1      	bne.n	8009df2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2220      	movs	r2, #32
 8009e32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a5f      	ldr	r2, [pc, #380]	@ (8009fc4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d021      	beq.n	8009e90 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d01a      	beq.n	8009e90 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e62:	e853 3f00 	ldrex	r3, [r3]
 8009e66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e7e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e4      	bne.n	8009e5a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d130      	bne.n	8009efa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea6:	e853 3f00 	ldrex	r3, [r3]
 8009eaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eae:	f023 0310 	bic.w	r3, r3, #16
 8009eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ec2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ec6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ec8:	e841 2300 	strex	r3, r2, [r1]
 8009ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e4      	bne.n	8009e9e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	f003 0310 	and.w	r3, r3, #16
 8009ede:	2b10      	cmp	r3, #16
 8009ee0:	d103      	bne.n	8009eea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2210      	movs	r2, #16
 8009ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7fe fc6e 	bl	80087d4 <HAL_UARTEx_RxEventCallback>
 8009ef8:	e002      	b.n	8009f00 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7f8 ff78 	bl	8002df0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f00:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d006      	beq.n	8009f16 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009f08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f0c:	f003 0320 	and.w	r3, r3, #32
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f47f aecb 	bne.w	8009cac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f1c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f20:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d049      	beq.n	8009fbc <UART_RxISR_16BIT_FIFOEN+0x358>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f2e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d242      	bcs.n	8009fbc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3308      	adds	r3, #8
 8009f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f40:	e853 3f00 	ldrex	r3, [r3]
 8009f44:	623b      	str	r3, [r7, #32]
   return(result);
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3308      	adds	r3, #8
 8009f56:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f62:	e841 2300 	strex	r3, r2, [r1]
 8009f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1e3      	bne.n	8009f36 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a15      	ldr	r2, [pc, #84]	@ (8009fc8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009f72:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	e853 3f00 	ldrex	r3, [r3]
 8009f80:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f043 0320 	orr.w	r3, r3, #32
 8009f88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f96:	61fb      	str	r3, [r7, #28]
 8009f98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9a:	69b9      	ldr	r1, [r7, #24]
 8009f9c:	69fa      	ldr	r2, [r7, #28]
 8009f9e:	e841 2300 	strex	r3, r2, [r1]
 8009fa2:	617b      	str	r3, [r7, #20]
   return(result);
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1e4      	bne.n	8009f74 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009faa:	e007      	b.n	8009fbc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699a      	ldr	r2, [r3, #24]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f042 0208 	orr.w	r2, r2, #8
 8009fba:	619a      	str	r2, [r3, #24]
}
 8009fbc:	bf00      	nop
 8009fbe:	37b8      	adds	r7, #184	@ 0xb8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	40008000 	.word	0x40008000
 8009fc8:	0800974d 	.word	0x0800974d

08009fcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bc80      	pop	{r7}
 8009fdc:	4770      	bx	lr

08009fde <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009fe6:	bf00      	nop
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bc80      	pop	{r7}
 8009fee:	4770      	bx	lr

08009ff0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bc80      	pop	{r7}
 800a000:	4770      	bx	lr

0800a002 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b088      	sub	sp, #32
 800a006:	af02      	add	r7, sp, #8
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	1d3b      	adds	r3, r7, #4
 800a00c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a01e:	2302      	movs	r3, #2
 800a020:	e046      	b.n	800a0b0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2224      	movs	r2, #36	@ 0x24
 800a02e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f022 0201 	bic.w	r2, r2, #1
 800a040:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	430a      	orrs	r2, r1
 800a054:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d105      	bne.n	800a068 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a05c:	1d3b      	adds	r3, r7, #4
 800a05e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 f90e 	bl	800a284 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f042 0201 	orr.w	r2, r2, #1
 800a076:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a078:	f7f8 f928 	bl	80022cc <HAL_GetTick>
 800a07c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a07e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	2200      	movs	r2, #0
 800a088:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f7fe ff10 	bl	8008eb2 <UART_WaitOnFlagUntilTimeout>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	75fb      	strb	r3, [r7, #23]
 800a09c:	e003      	b.n	800a0a6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b089      	sub	sp, #36	@ 0x24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d101      	bne.n	800a0ce <HAL_UARTEx_EnableStopMode+0x16>
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	e021      	b.n	800a112 <HAL_UARTEx_EnableStopMode+0x5a>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	f043 0302 	orr.w	r3, r3, #2
 800a0ea:	61fb      	str	r3, [r7, #28]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	61bb      	str	r3, [r7, #24]
 800a0f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	6979      	ldr	r1, [r7, #20]
 800a0fa:	69ba      	ldr	r2, [r7, #24]
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	613b      	str	r3, [r7, #16]
   return(result);
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e6      	bne.n	800a0d6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3724      	adds	r7, #36	@ 0x24
 800a116:	46bd      	mov	sp, r7
 800a118:	bc80      	pop	{r7}
 800a11a:	4770      	bx	lr

0800a11c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d101      	bne.n	800a132 <HAL_UARTEx_DisableFifoMode+0x16>
 800a12e:	2302      	movs	r3, #2
 800a130:	e027      	b.n	800a182 <HAL_UARTEx_DisableFifoMode+0x66>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2224      	movs	r2, #36	@ 0x24
 800a13e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 0201 	bic.w	r2, r2, #1
 800a158:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a160:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2220      	movs	r2, #32
 800a174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	bc80      	pop	{r7}
 800a18a:	4770      	bx	lr

0800a18c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d101      	bne.n	800a1a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	e02d      	b.n	800a200 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2224      	movs	r2, #36	@ 0x24
 800a1b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f022 0201 	bic.w	r2, r2, #1
 800a1ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f871 	bl	800a2c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d101      	bne.n	800a220 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a21c:	2302      	movs	r3, #2
 800a21e:	e02d      	b.n	800a27c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2224      	movs	r2, #36	@ 0x24
 800a22c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f022 0201 	bic.w	r2, r2, #1
 800a246:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f833 	bl	800a2c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	1d3b      	adds	r3, r7, #4
 800a28e:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f023 0210 	bic.w	r2, r3, #16
 800a29c:	893b      	ldrh	r3, [r7, #8]
 800a29e:	4619      	mov	r1, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a2b2:	7abb      	ldrb	r3, [r7, #10]
 800a2b4:	061a      	lsls	r2, r3, #24
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	605a      	str	r2, [r3, #4]
}
 800a2be:	bf00      	nop
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bc80      	pop	{r7}
 800a2c6:	4770      	bx	lr

0800a2c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d108      	bne.n	800a2ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a2e8:	e031      	b.n	800a34e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a2ea:	2308      	movs	r3, #8
 800a2ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2ee:	2308      	movs	r3, #8
 800a2f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	0e5b      	lsrs	r3, r3, #25
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	f003 0307 	and.w	r3, r3, #7
 800a300:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	0f5b      	lsrs	r3, r3, #29
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	f003 0307 	and.w	r3, r3, #7
 800a310:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	7b3a      	ldrb	r2, [r7, #12]
 800a316:	4910      	ldr	r1, [pc, #64]	@ (800a358 <UARTEx_SetNbDataToProcess+0x90>)
 800a318:	5c8a      	ldrb	r2, [r1, r2]
 800a31a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a31e:	7b3a      	ldrb	r2, [r7, #12]
 800a320:	490e      	ldr	r1, [pc, #56]	@ (800a35c <UARTEx_SetNbDataToProcess+0x94>)
 800a322:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a324:	fb93 f3f2 	sdiv	r3, r3, r2
 800a328:	b29a      	uxth	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	7b7a      	ldrb	r2, [r7, #13]
 800a334:	4908      	ldr	r1, [pc, #32]	@ (800a358 <UARTEx_SetNbDataToProcess+0x90>)
 800a336:	5c8a      	ldrb	r2, [r1, r2]
 800a338:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a33c:	7b7a      	ldrb	r2, [r7, #13]
 800a33e:	4907      	ldr	r1, [pc, #28]	@ (800a35c <UARTEx_SetNbDataToProcess+0x94>)
 800a340:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a342:	fb93 f3f2 	sdiv	r3, r3, r2
 800a346:	b29a      	uxth	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a34e:	bf00      	nop
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	bc80      	pop	{r7}
 800a356:	4770      	bx	lr
 800a358:	0801d130 	.word	0x0801d130
 800a35c:	0801d138 	.word	0x0801d138

0800a360 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a364:	f7f7 fe52 	bl	800200c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a368:	f000 f820 	bl	800a3ac <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a36c:	bf00      	nop
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a374:	f04f 30ff 	mov.w	r0, #4294967295
 800a378:	f011 fa5c 	bl	801b834 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a37c:	bf00      	nop
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a380:	b480      	push	{r7}
 800a382:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a384:	f3bf 8f4f 	dsb	sy
}
 800a388:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a38a:	4b06      	ldr	r3, [pc, #24]	@ (800a3a4 <__NVIC_SystemReset+0x24>)
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a392:	4904      	ldr	r1, [pc, #16]	@ (800a3a4 <__NVIC_SystemReset+0x24>)
 800a394:	4b04      	ldr	r3, [pc, #16]	@ (800a3a8 <__NVIC_SystemReset+0x28>)
 800a396:	4313      	orrs	r3, r2
 800a398:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a39a:	f3bf 8f4f 	dsb	sy
}
 800a39e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a3a0:	bf00      	nop
 800a3a2:	e7fd      	b.n	800a3a0 <__NVIC_SystemReset+0x20>
 800a3a4:	e000ed00 	.word	0xe000ed00
 800a3a8:	05fa0004 	.word	0x05fa0004

0800a3ac <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	9302      	str	r3, [sp, #8]
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	2301      	movs	r3, #1
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	4b59      	ldr	r3, [pc, #356]	@ (800a528 <LoRaWAN_Init+0x17c>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	2002      	movs	r0, #2
 800a3ca:	f011 fe7f 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	9302      	str	r3, [sp, #8]
 800a3d2:	2306      	movs	r3, #6
 800a3d4:	9301      	str	r3, [sp, #4]
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	4b54      	ldr	r3, [pc, #336]	@ (800a52c <LoRaWAN_Init+0x180>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2100      	movs	r1, #0
 800a3e0:	2002      	movs	r0, #2
 800a3e2:	f011 fe73 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	9302      	str	r3, [sp, #8]
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	9301      	str	r3, [sp, #4]
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	4b4f      	ldr	r3, [pc, #316]	@ (800a530 <LoRaWAN_Init+0x184>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	2002      	movs	r0, #2
 800a3fa:	f011 fe67 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a3fe:	1d3b      	adds	r3, r7, #4
 800a400:	4619      	mov	r1, r3
 800a402:	2000      	movs	r0, #0
 800a404:	f003 fa98 	bl	800d938 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	0e1b      	lsrs	r3, r3, #24
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	461a      	mov	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	0c1b      	lsrs	r3, r3, #16
 800a414:	b2db      	uxtb	r3, r3
 800a416:	4619      	mov	r1, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	0a1b      	lsrs	r3, r3, #8
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	9302      	str	r3, [sp, #8]
 800a420:	9101      	str	r1, [sp, #4]
 800a422:	9200      	str	r2, [sp, #0]
 800a424:	4b43      	ldr	r3, [pc, #268]	@ (800a534 <LoRaWAN_Init+0x188>)
 800a426:	2200      	movs	r2, #0
 800a428:	2100      	movs	r1, #0
 800a42a:	2002      	movs	r0, #2
 800a42c:	f011 fe4e 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a430:	1d3b      	adds	r3, r7, #4
 800a432:	4619      	mov	r1, r3
 800a434:	2001      	movs	r0, #1
 800a436:	f003 fa7f 	bl	800d938 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	0e1b      	lsrs	r3, r3, #24
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	461a      	mov	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	0c1b      	lsrs	r3, r3, #16
 800a446:	b2db      	uxtb	r3, r3
 800a448:	4619      	mov	r1, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	0a1b      	lsrs	r3, r3, #8
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	b2c0      	uxtb	r0, r0
 800a454:	9003      	str	r0, [sp, #12]
 800a456:	9302      	str	r3, [sp, #8]
 800a458:	9101      	str	r1, [sp, #4]
 800a45a:	9200      	str	r2, [sp, #0]
 800a45c:	4b36      	ldr	r3, [pc, #216]	@ (800a538 <LoRaWAN_Init+0x18c>)
 800a45e:	2200      	movs	r2, #0
 800a460:	2100      	movs	r1, #0
 800a462:	2002      	movs	r0, #2
 800a464:	f011 fe32 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a468:	2300      	movs	r3, #0
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	4b33      	ldr	r3, [pc, #204]	@ (800a53c <LoRaWAN_Init+0x190>)
 800a46e:	2200      	movs	r2, #0
 800a470:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a474:	4832      	ldr	r0, [pc, #200]	@ (800a540 <LoRaWAN_Init+0x194>)
 800a476:	f011 fb7b 	bl	801bb70 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a47a:	2300      	movs	r3, #0
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	4b31      	ldr	r3, [pc, #196]	@ (800a544 <LoRaWAN_Init+0x198>)
 800a480:	2200      	movs	r2, #0
 800a482:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a486:	4830      	ldr	r0, [pc, #192]	@ (800a548 <LoRaWAN_Init+0x19c>)
 800a488:	f011 fb72 	bl	801bb70 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a48c:	2300      	movs	r3, #0
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	4b2e      	ldr	r3, [pc, #184]	@ (800a54c <LoRaWAN_Init+0x1a0>)
 800a492:	2201      	movs	r2, #1
 800a494:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a498:	482d      	ldr	r0, [pc, #180]	@ (800a550 <LoRaWAN_Init+0x1a4>)
 800a49a:	f011 fb69 	bl	801bb70 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a49e:	2300      	movs	r3, #0
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	4b2c      	ldr	r3, [pc, #176]	@ (800a554 <LoRaWAN_Init+0x1a8>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a4aa:	482b      	ldr	r0, [pc, #172]	@ (800a558 <LoRaWAN_Init+0x1ac>)
 800a4ac:	f011 fb60 	bl	801bb70 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a4b0:	4a2a      	ldr	r2, [pc, #168]	@ (800a55c <LoRaWAN_Init+0x1b0>)
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	2001      	movs	r0, #1
 800a4b6:	f011 fab9 	bl	801ba2c <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a4ba:	4a29      	ldr	r2, [pc, #164]	@ (800a560 <LoRaWAN_Init+0x1b4>)
 800a4bc:	2100      	movs	r1, #0
 800a4be:	2002      	movs	r0, #2
 800a4c0:	f011 fab4 	bl	801ba2c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a4c4:	4a27      	ldr	r2, [pc, #156]	@ (800a564 <LoRaWAN_Init+0x1b8>)
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	2004      	movs	r0, #4
 800a4ca:	f011 faaf 	bl	801ba2c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a4ce:	4a26      	ldr	r2, [pc, #152]	@ (800a568 <LoRaWAN_Init+0x1bc>)
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	2008      	movs	r0, #8
 800a4d4:	f011 faaa 	bl	801ba2c <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a4d8:	f000 fd7e 	bl	800afd8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a4dc:	4923      	ldr	r1, [pc, #140]	@ (800a56c <LoRaWAN_Init+0x1c0>)
 800a4de:	4824      	ldr	r0, [pc, #144]	@ (800a570 <LoRaWAN_Init+0x1c4>)
 800a4e0:	f002 fa90 	bl	800ca04 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a4e4:	4823      	ldr	r0, [pc, #140]	@ (800a574 <LoRaWAN_Init+0x1c8>)
 800a4e6:	f002 fafb 	bl	800cae0 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a4ea:	4819      	ldr	r0, [pc, #100]	@ (800a550 <LoRaWAN_Init+0x1a4>)
 800a4ec:	f011 fb76 	bl	801bbdc <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a4f0:	4b21      	ldr	r3, [pc, #132]	@ (800a578 <LoRaWAN_Init+0x1cc>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	4a21      	ldr	r2, [pc, #132]	@ (800a57c <LoRaWAN_Init+0x1d0>)
 800a4f6:	7812      	ldrb	r2, [r2, #0]
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f002 fc54 	bl	800cda8 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a500:	4b1f      	ldr	r3, [pc, #124]	@ (800a580 <LoRaWAN_Init+0x1d4>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10b      	bne.n	800a520 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a508:	4b1e      	ldr	r3, [pc, #120]	@ (800a584 <LoRaWAN_Init+0x1d8>)
 800a50a:	6819      	ldr	r1, [r3, #0]
 800a50c:	2300      	movs	r3, #0
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	4b1d      	ldr	r3, [pc, #116]	@ (800a588 <LoRaWAN_Init+0x1dc>)
 800a512:	2200      	movs	r2, #0
 800a514:	481d      	ldr	r0, [pc, #116]	@ (800a58c <LoRaWAN_Init+0x1e0>)
 800a516:	f011 fb2b 	bl	801bb70 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a51a:	481c      	ldr	r0, [pc, #112]	@ (800a58c <LoRaWAN_Init+0x1e0>)
 800a51c:	f011 fb5e 	bl	801bbdc <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a520:	bf00      	nop
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	0801c778 	.word	0x0801c778
 800a52c:	0801c79c 	.word	0x0801c79c
 800a530:	0801c7c0 	.word	0x0801c7c0
 800a534:	0801c7e4 	.word	0x0801c7e4
 800a538:	0801c808 	.word	0x0801c808
 800a53c:	0800aa99 	.word	0x0800aa99
 800a540:	200005a0 	.word	0x200005a0
 800a544:	0800aab7 	.word	0x0800aab7
 800a548:	200005b8 	.word	0x200005b8
 800a54c:	0800aac9 	.word	0x0800aac9
 800a550:	200005d0 	.word	0x200005d0
 800a554:	0800aeb9 	.word	0x0800aeb9
 800a558:	20000494 	.word	0x20000494
 800a55c:	0800cd3d 	.word	0x0800cd3d
 800a560:	0800a6ed 	.word	0x0800a6ed
 800a564:	0800aefd 	.word	0x0800aefd
 800a568:	0800ae1d 	.word	0x0800ae1d
 800a56c:	01030100 	.word	0x01030100
 800a570:	20000024 	.word	0x20000024
 800a574:	20000070 	.word	0x20000070
 800a578:	20000020 	.word	0x20000020
 800a57c:	20000021 	.word	0x20000021
 800a580:	20000478 	.word	0x20000478
 800a584:	20000088 	.word	0x20000088
 800a588:	0800aa75 	.word	0x0800aa75
 800a58c:	2000047c 	.word	0x2000047c

0800a590 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a590:	b5b0      	push	{r4, r5, r7, lr}
 800a592:	b08a      	sub	sp, #40	@ 0x28
 800a594:	af06      	add	r7, sp, #24
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 8090 	beq.w	800a6c6 <OnRxData+0x136>
  {
#if defined(DBG)   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a5ac:	4848      	ldr	r0, [pc, #288]	@ (800a6d0 <OnRxData+0x140>)
 800a5ae:	f7fa ff5d 	bl	800546c <HAL_GPIO_WritePin>
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800a5b2:	4848      	ldr	r0, [pc, #288]	@ (800a6d4 <OnRxData+0x144>)
 800a5b4:	f011 fb12 	bl	801bbdc <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d05e      	beq.n	800a67e <OnRxData+0xee>
    {
      if (appData != NULL)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d05b      	beq.n	800a67e <OnRxData+0xee>
      {
        RxPort = appData->Port;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d054      	beq.n	800a67e <OnRxData+0xee>
        {
          switch (appData->Port)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d01f      	beq.n	800a61c <OnRxData+0x8c>
 800a5dc:	2b03      	cmp	r3, #3
 800a5de:	d149      	bne.n	800a674 <OnRxData+0xe4>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	785b      	ldrb	r3, [r3, #1]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d147      	bne.n	800a678 <OnRxData+0xe8>
              {
                switch (appData->Buffer[0])
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d00e      	beq.n	800a610 <OnRxData+0x80>
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	dc10      	bgt.n	800a618 <OnRxData+0x88>
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d002      	beq.n	800a600 <OnRxData+0x70>
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d004      	beq.n	800a608 <OnRxData+0x78>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800a5fe:	e00b      	b.n	800a618 <OnRxData+0x88>
                    LmHandlerRequestClass(CLASS_A);
 800a600:	2000      	movs	r0, #0
 800a602:	f002 fd85 	bl	800d110 <LmHandlerRequestClass>
                    break;
 800a606:	e008      	b.n	800a61a <OnRxData+0x8a>
                    LmHandlerRequestClass(CLASS_B);
 800a608:	2001      	movs	r0, #1
 800a60a:	f002 fd81 	bl	800d110 <LmHandlerRequestClass>
                    break;
 800a60e:	e004      	b.n	800a61a <OnRxData+0x8a>
                    LmHandlerRequestClass(CLASS_C);
 800a610:	2002      	movs	r0, #2
 800a612:	f002 fd7d 	bl	800d110 <LmHandlerRequestClass>
                    break;
 800a616:	e000      	b.n	800a61a <OnRxData+0x8a>
                    break;
 800a618:	bf00      	nop
                }
              }
              break;
 800a61a:	e02d      	b.n	800a678 <OnRxData+0xe8>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	785b      	ldrb	r3, [r3, #1]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d12b      	bne.n	800a67c <OnRxData+0xec>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	4b29      	ldr	r3, [pc, #164]	@ (800a6d8 <OnRxData+0x148>)
 800a632:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800a634:	4b28      	ldr	r3, [pc, #160]	@ (800a6d8 <OnRxData+0x148>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10d      	bne.n	800a658 <OnRxData+0xc8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800a63c:	4b27      	ldr	r3, [pc, #156]	@ (800a6dc <OnRxData+0x14c>)
 800a63e:	2200      	movs	r2, #0
 800a640:	2100      	movs	r1, #0
 800a642:	2003      	movs	r0, #3
 800a644:	f011 fd42 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800a648:	2201      	movs	r2, #1
 800a64a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a64e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a652:	f7fa ff0b 	bl	800546c <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800a656:	e011      	b.n	800a67c <OnRxData+0xec>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a658:	4b21      	ldr	r3, [pc, #132]	@ (800a6e0 <OnRxData+0x150>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	2100      	movs	r1, #0
 800a65e:	2003      	movs	r0, #3
 800a660:	f011 fd34 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800a664:	2200      	movs	r2, #0
 800a666:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a66a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a66e:	f7fa fefd 	bl	800546c <HAL_GPIO_WritePin>
              break;
 800a672:	e003      	b.n	800a67c <OnRxData+0xec>

            default:

              break;
 800a674:	bf00      	nop
 800a676:	e002      	b.n	800a67e <OnRxData+0xee>
              break;
 800a678:	bf00      	nop
 800a67a:	e000      	b.n	800a67e <OnRxData+0xee>
              break;
 800a67c:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	7c1b      	ldrb	r3, [r3, #16]
 800a682:	2b05      	cmp	r3, #5
 800a684:	d81f      	bhi.n	800a6c6 <OnRxData+0x136>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	7bfa      	ldrb	r2, [r7, #15]
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800a692:	460c      	mov	r4, r1
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	7c09      	ldrb	r1, [r1, #16]
 800a698:	4608      	mov	r0, r1
 800a69a:	4912      	ldr	r1, [pc, #72]	@ (800a6e4 <OnRxData+0x154>)
 800a69c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a6a0:	6838      	ldr	r0, [r7, #0]
 800a6a2:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	6838      	ldr	r0, [r7, #0]
 800a6aa:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800a6ae:	9005      	str	r0, [sp, #20]
 800a6b0:	9504      	str	r5, [sp, #16]
 800a6b2:	9103      	str	r1, [sp, #12]
 800a6b4:	9402      	str	r4, [sp, #8]
 800a6b6:	9201      	str	r2, [sp, #4]
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e8 <OnRxData+0x158>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	2100      	movs	r1, #0
 800a6c0:	2003      	movs	r0, #3
 800a6c2:	f011 fd03 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a6c6:	bf00      	nop
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	48000400 	.word	0x48000400
 800a6d4:	200005b8 	.word	0x200005b8
 800a6d8:	2000059e 	.word	0x2000059e
 800a6dc:	0801c82c 	.word	0x0801c82c
 800a6e0:	0801c838 	.word	0x0801c838
 800a6e4:	20000008 	.word	0x20000008
 800a6e8:	0801c844 	.word	0x0801c844

0800a6ec <SendTxData>:

static void SendTxData(void)
{
 800a6ec:	b590      	push	{r4, r7, lr}
 800a6ee:	b091      	sub	sp, #68	@ 0x44
 800a6f0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a6f2:	23ff      	movs	r3, #255	@ 0xff
 800a6f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800a6f8:	f7f7 fcb8 	bl	800206c <GetBatteryLevel>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a702:	2300      	movs	r3, #0
 800a704:	637b      	str	r3, [r7, #52]	@ 0x34

  uint16_t pressure = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  int16_t temperature = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t humidity = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint32_t i = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t latitude = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	627b      	str	r3, [r7, #36]	@ 0x24
  int32_t longitude = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	83fb      	strh	r3, [r7, #30]

  EnvSensors_Read(&sensor_data);
 800a722:	1d3b      	adds	r3, r7, #4
 800a724:	4618      	mov	r0, r3
 800a726:	f7f7 fe13 	bl	8002350 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800a72a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	4b64      	ldr	r3, [pc, #400]	@ (800a8c4 <SendTxData+0x1d8>)
 800a732:	2201      	movs	r2, #1
 800a734:	2100      	movs	r1, #0
 800a736:	2002      	movs	r0, #2
 800a738:	f011 fcc8 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	4618      	mov	r0, r3
 800a740:	f7f6 f9ec 	bl	8000b1c <__aeabi_f2iz>
 800a744:	4603      	mov	r3, r0
 800a746:	b21b      	sxth	r3, r3
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	4b5f      	ldr	r3, [pc, #380]	@ (800a8c8 <SendTxData+0x1dc>)
 800a74c:	2201      	movs	r2, #1
 800a74e:	2100      	movs	r1, #0
 800a750:	2002      	movs	r0, #2
 800a752:	f011 fcbb 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC0 - Temp : %d\r\n", (int16_t)(SYS_GetADC0()));
 800a756:	f7f6 fd49 	bl	80011ec <SYS_GetADC0>
 800a75a:	4603      	mov	r3, r0
 800a75c:	b21b      	sxth	r3, r3
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	4b5a      	ldr	r3, [pc, #360]	@ (800a8cc <SendTxData+0x1e0>)
 800a762:	2201      	movs	r2, #1
 800a764:	2100      	movs	r1, #0
 800a766:	2002      	movs	r0, #2
 800a768:	f011 fcb0 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC1 - Out V: %d\r\n", (int16_t)(SYS_GetADC1()));
 800a76c:	f7f6 fd60 	bl	8001230 <SYS_GetADC1>
 800a770:	4603      	mov	r3, r0
 800a772:	b21b      	sxth	r3, r3
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	4b56      	ldr	r3, [pc, #344]	@ (800a8d0 <SendTxData+0x1e4>)
 800a778:	2201      	movs	r2, #1
 800a77a:	2100      	movs	r1, #0
 800a77c:	2002      	movs	r0, #2
 800a77e:	f011 fca5 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC2 - Out A: %d\r\n", (int16_t)(SYS_GetADC2()));
 800a782:	f7f6 fd79 	bl	8001278 <SYS_GetADC2>
 800a786:	4603      	mov	r3, r0
 800a788:	b21b      	sxth	r3, r3
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	4b51      	ldr	r3, [pc, #324]	@ (800a8d4 <SendTxData+0x1e8>)
 800a78e:	2201      	movs	r2, #1
 800a790:	2100      	movs	r1, #0
 800a792:	2002      	movs	r0, #2
 800a794:	f011 fc9a 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC3 - In V : %d\r\n", (int16_t)(SYS_GetADC3()));
 800a798:	f7f6 fd92 	bl	80012c0 <SYS_GetADC3>
 800a79c:	4603      	mov	r3, r0
 800a79e:	b21b      	sxth	r3, r3
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	4b4d      	ldr	r3, [pc, #308]	@ (800a8d8 <SendTxData+0x1ec>)
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	2002      	movs	r0, #2
 800a7aa:	f011 fc8f 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a7ae:	4b4b      	ldr	r3, [pc, #300]	@ (800a8dc <SendTxData+0x1f0>)
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	701a      	strb	r2, [r3, #0]


  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	494a      	ldr	r1, [pc, #296]	@ (800a8e0 <SendTxData+0x1f4>)
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7f6 f85f 	bl	800087c <__aeabi_fmul>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7f6 f9d1 	bl	8000b68 <__aeabi_f2uiz>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	853b      	strh	r3, [r7, #40]	@ 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7f6 f9a5 	bl	8000b1c <__aeabi_f2iz>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4942      	ldr	r1, [pc, #264]	@ (800a8e4 <SendTxData+0x1f8>)
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7f6 f84e 	bl	800087c <__aeabi_fmul>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	493f      	ldr	r1, [pc, #252]	@ (800a8e0 <SendTxData+0x1f4>)
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7f6 f8fd 	bl	80009e4 <__aeabi_fdiv>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7f6 f9bb 	bl	8000b68 <__aeabi_f2uiz>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800a7f6:	4b39      	ldr	r3, [pc, #228]	@ (800a8dc <SendTxData+0x1f0>)
 800a7f8:	685a      	ldr	r2, [r3, #4]
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	1c59      	adds	r1, r3, #1
 800a7fe:	6339      	str	r1, [r7, #48]	@ 0x30
 800a800:	4413      	add	r3, r2
 800a802:	4a39      	ldr	r2, [pc, #228]	@ (800a8e8 <SendTxData+0x1fc>)
 800a804:	7812      	ldrb	r2, [r2, #0]
 800a806:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a808:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a80a:	0a1b      	lsrs	r3, r3, #8
 800a80c:	b298      	uxth	r0, r3
 800a80e:	4b33      	ldr	r3, [pc, #204]	@ (800a8dc <SendTxData+0x1f0>)
 800a810:	685a      	ldr	r2, [r3, #4]
 800a812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a814:	1c59      	adds	r1, r3, #1
 800a816:	6339      	str	r1, [r7, #48]	@ 0x30
 800a818:	4413      	add	r3, r2
 800a81a:	b2c2      	uxtb	r2, r0
 800a81c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a81e:	4b2f      	ldr	r3, [pc, #188]	@ (800a8dc <SendTxData+0x1f0>)
 800a820:	685a      	ldr	r2, [r3, #4]
 800a822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a824:	1c59      	adds	r1, r3, #1
 800a826:	6339      	str	r1, [r7, #48]	@ 0x30
 800a828:	4413      	add	r3, r2
 800a82a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a82c:	b2d2      	uxtb	r2, r2
 800a82e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a830:	4b2a      	ldr	r3, [pc, #168]	@ (800a8dc <SendTxData+0x1f0>)
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a836:	1c59      	adds	r1, r3, #1
 800a838:	6339      	str	r1, [r7, #48]	@ 0x30
 800a83a:	4413      	add	r3, r2
 800a83c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800a83e:	b2d2      	uxtb	r2, r2
 800a840:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a842:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a844:	0a1b      	lsrs	r3, r3, #8
 800a846:	b298      	uxth	r0, r3
 800a848:	4b24      	ldr	r3, [pc, #144]	@ (800a8dc <SendTxData+0x1f0>)
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84e:	1c59      	adds	r1, r3, #1
 800a850:	6339      	str	r1, [r7, #48]	@ 0x30
 800a852:	4413      	add	r3, r2
 800a854:	b2c2      	uxtb	r2, r0
 800a856:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a858:	4b20      	ldr	r3, [pc, #128]	@ (800a8dc <SendTxData+0x1f0>)
 800a85a:	685a      	ldr	r2, [r3, #4]
 800a85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85e:	1c59      	adds	r1, r3, #1
 800a860:	6339      	str	r1, [r7, #48]	@ 0x30
 800a862:	4413      	add	r3, r2
 800a864:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a866:	b2d2      	uxtb	r2, r2
 800a868:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a86a:	4b20      	ldr	r3, [pc, #128]	@ (800a8ec <SendTxData+0x200>)
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	2b08      	cmp	r3, #8
 800a870:	d007      	beq.n	800a882 <SendTxData+0x196>
 800a872:	4b1e      	ldr	r3, [pc, #120]	@ (800a8ec <SendTxData+0x200>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d003      	beq.n	800a882 <SendTxData+0x196>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a87a:	4b1c      	ldr	r3, [pc, #112]	@ (800a8ec <SendTxData+0x200>)
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d136      	bne.n	800a8f0 <SendTxData+0x204>
  {
    AppData.Buffer[i++] = 0;
 800a882:	4b16      	ldr	r3, [pc, #88]	@ (800a8dc <SendTxData+0x1f0>)
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a888:	1c59      	adds	r1, r3, #1
 800a88a:	6339      	str	r1, [r7, #48]	@ 0x30
 800a88c:	4413      	add	r3, r2
 800a88e:	2200      	movs	r2, #0
 800a890:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a892:	4b12      	ldr	r3, [pc, #72]	@ (800a8dc <SendTxData+0x1f0>)
 800a894:	685a      	ldr	r2, [r3, #4]
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	1c59      	adds	r1, r3, #1
 800a89a:	6339      	str	r1, [r7, #48]	@ 0x30
 800a89c:	4413      	add	r3, r2
 800a89e:	2200      	movs	r2, #0
 800a8a0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a8a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a8dc <SendTxData+0x1f0>)
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a8:	1c59      	adds	r1, r3, #1
 800a8aa:	6339      	str	r1, [r7, #48]	@ 0x30
 800a8ac:	4413      	add	r3, r2
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a8dc <SendTxData+0x1f0>)
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b8:	1c59      	adds	r1, r3, #1
 800a8ba:	6339      	str	r1, [r7, #48]	@ 0x30
 800a8bc:	4413      	add	r3, r2
 800a8be:	2200      	movs	r2, #0
 800a8c0:	701a      	strb	r2, [r3, #0]
 800a8c2:	e071      	b.n	800a9a8 <SendTxData+0x2bc>
 800a8c4:	0801c88c 	.word	0x0801c88c
 800a8c8:	0801c898 	.word	0x0801c898
 800a8cc:	0801c8a4 	.word	0x0801c8a4
 800a8d0:	0801c8b8 	.word	0x0801c8b8
 800a8d4:	0801c8cc 	.word	0x0801c8cc
 800a8d8:	0801c8e0 	.word	0x0801c8e0
 800a8dc:	2000008c 	.word	0x2000008c
 800a8e0:	41200000 	.word	0x41200000
 800a8e4:	42c80000 	.word	0x42c80000
 800a8e8:	2000059e 	.word	0x2000059e
 800a8ec:	20000070 	.word	0x20000070
  }
  else
  {
    latitude = sensor_data.latitude;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	627b      	str	r3, [r7, #36]	@ 0x24
    longitude = sensor_data.longitude;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a8f8:	4b55      	ldr	r3, [pc, #340]	@ (800aa50 <SendTxData+0x364>)
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fe:	1c59      	adds	r1, r3, #1
 800a900:	6339      	str	r1, [r7, #48]	@ 0x30
 800a902:	18d4      	adds	r4, r2, r3
 800a904:	f7f7 fbb2 	bl	800206c <GetBatteryLevel>
 800a908:	4603      	mov	r3, r0
 800a90a:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90e:	1418      	asrs	r0, r3, #16
 800a910:	4b4f      	ldr	r3, [pc, #316]	@ (800aa50 <SendTxData+0x364>)
 800a912:	685a      	ldr	r2, [r3, #4]
 800a914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a916:	1c59      	adds	r1, r3, #1
 800a918:	6339      	str	r1, [r7, #48]	@ 0x30
 800a91a:	4413      	add	r3, r2
 800a91c:	b2c2      	uxtb	r2, r0
 800a91e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a922:	1218      	asrs	r0, r3, #8
 800a924:	4b4a      	ldr	r3, [pc, #296]	@ (800aa50 <SendTxData+0x364>)
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92a:	1c59      	adds	r1, r3, #1
 800a92c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a92e:	4413      	add	r3, r2
 800a930:	b2c2      	uxtb	r2, r0
 800a932:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a934:	4b46      	ldr	r3, [pc, #280]	@ (800aa50 <SendTxData+0x364>)
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93a:	1c59      	adds	r1, r3, #1
 800a93c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a93e:	4413      	add	r3, r2
 800a940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	1418      	asrs	r0, r3, #16
 800a94a:	4b41      	ldr	r3, [pc, #260]	@ (800aa50 <SendTxData+0x364>)
 800a94c:	685a      	ldr	r2, [r3, #4]
 800a94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a950:	1c59      	adds	r1, r3, #1
 800a952:	6339      	str	r1, [r7, #48]	@ 0x30
 800a954:	4413      	add	r3, r2
 800a956:	b2c2      	uxtb	r2, r0
 800a958:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	1218      	asrs	r0, r3, #8
 800a95e:	4b3c      	ldr	r3, [pc, #240]	@ (800aa50 <SendTxData+0x364>)
 800a960:	685a      	ldr	r2, [r3, #4]
 800a962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a964:	1c59      	adds	r1, r3, #1
 800a966:	6339      	str	r1, [r7, #48]	@ 0x30
 800a968:	4413      	add	r3, r2
 800a96a:	b2c2      	uxtb	r2, r0
 800a96c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a96e:	4b38      	ldr	r3, [pc, #224]	@ (800aa50 <SendTxData+0x364>)
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a974:	1c59      	adds	r1, r3, #1
 800a976:	6339      	str	r1, [r7, #48]	@ 0x30
 800a978:	4413      	add	r3, r2
 800a97a:	6a3a      	ldr	r2, [r7, #32]
 800a97c:	b2d2      	uxtb	r2, r2
 800a97e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a980:	8bfb      	ldrh	r3, [r7, #30]
 800a982:	0a1b      	lsrs	r3, r3, #8
 800a984:	b298      	uxth	r0, r3
 800a986:	4b32      	ldr	r3, [pc, #200]	@ (800aa50 <SendTxData+0x364>)
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98c:	1c59      	adds	r1, r3, #1
 800a98e:	6339      	str	r1, [r7, #48]	@ 0x30
 800a990:	4413      	add	r3, r2
 800a992:	b2c2      	uxtb	r2, r0
 800a994:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a996:	4b2e      	ldr	r3, [pc, #184]	@ (800aa50 <SendTxData+0x364>)
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99c:	1c59      	adds	r1, r3, #1
 800a99e:	6339      	str	r1, [r7, #48]	@ 0x30
 800a9a0:	4413      	add	r3, r2
 800a9a2:	8bfa      	ldrh	r2, [r7, #30]
 800a9a4:	b2d2      	uxtb	r2, r2
 800a9a6:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	4b28      	ldr	r3, [pc, #160]	@ (800aa50 <SendTxData+0x364>)
 800a9ae:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a9b0:	4b28      	ldr	r3, [pc, #160]	@ (800aa54 <SendTxData+0x368>)
 800a9b2:	7a5b      	ldrb	r3, [r3, #9]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d007      	beq.n	800a9c8 <SendTxData+0x2dc>
 800a9b8:	f002 fa98 	bl	800ceec <LmHandlerJoinStatus>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d102      	bne.n	800a9c8 <SendTxData+0x2dc>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a9c2:	4824      	ldr	r0, [pc, #144]	@ (800aa54 <SendTxData+0x368>)
 800a9c4:	f011 f978 	bl	801bcb8 <UTIL_TIMER_Stop>
#if defined(DBG)   // XXX:
    //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a9c8:	4b23      	ldr	r3, [pc, #140]	@ (800aa58 <SendTxData+0x36c>)
 800a9ca:	78db      	ldrb	r3, [r3, #3]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	481f      	ldr	r0, [pc, #124]	@ (800aa50 <SendTxData+0x364>)
 800a9d2:	f002 faa7 	bl	800cf24 <LmHandlerSend>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a9dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d106      	bne.n	800a9f2 <SendTxData+0x306>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a9e4:	4b1d      	ldr	r3, [pc, #116]	@ (800aa5c <SendTxData+0x370>)
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	2001      	movs	r0, #1
 800a9ec:	f011 fb6e 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
 800a9f0:	e016      	b.n	800aa20 <SendTxData+0x334>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a9f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a9f6:	f113 0f06 	cmn.w	r3, #6
 800a9fa:	d111      	bne.n	800aa20 <SendTxData+0x334>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a9fc:	f002 f9ca 	bl	800cd94 <LmHandlerGetDutyCycleWaitTime>
 800aa00:	6378      	str	r0, [r7, #52]	@ 0x34
    if (nextTxIn > 0)
 800aa02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00b      	beq.n	800aa20 <SendTxData+0x334>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800aa08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa0a:	4a15      	ldr	r2, [pc, #84]	@ (800aa60 <SendTxData+0x374>)
 800aa0c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa10:	099b      	lsrs	r3, r3, #6
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	4b13      	ldr	r3, [pc, #76]	@ (800aa64 <SendTxData+0x378>)
 800aa16:	2201      	movs	r2, #1
 800aa18:	2100      	movs	r1, #0
 800aa1a:	2001      	movs	r0, #1
 800aa1c:	f011 fb56 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800aa20:	4b11      	ldr	r3, [pc, #68]	@ (800aa68 <SendTxData+0x37c>)
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10f      	bne.n	800aa48 <SendTxData+0x35c>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800aa28:	4810      	ldr	r0, [pc, #64]	@ (800aa6c <SendTxData+0x380>)
 800aa2a:	f011 f945 	bl	801bcb8 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800aa2e:	4b10      	ldr	r3, [pc, #64]	@ (800aa70 <SendTxData+0x384>)
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa34:	4293      	cmp	r3, r2
 800aa36:	bf38      	it	cc
 800aa38:	4613      	movcc	r3, r2
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	480b      	ldr	r0, [pc, #44]	@ (800aa6c <SendTxData+0x380>)
 800aa3e:	f011 f9ab 	bl	801bd98 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800aa42:	480a      	ldr	r0, [pc, #40]	@ (800aa6c <SendTxData+0x380>)
 800aa44:	f011 f8ca 	bl	801bbdc <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800aa48:	bf00      	nop
 800aa4a:	373c      	adds	r7, #60	@ 0x3c
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd90      	pop	{r4, r7, pc}
 800aa50:	2000008c 	.word	0x2000008c
 800aa54:	200005d0 	.word	0x200005d0
 800aa58:	20000070 	.word	0x20000070
 800aa5c:	0801c8f4 	.word	0x0801c8f4
 800aa60:	10624dd3 	.word	0x10624dd3
 800aa64:	0801c904 	.word	0x0801c904
 800aa68:	20000478 	.word	0x20000478
 800aa6c:	2000047c 	.word	0x2000047c
 800aa70:	20000088 	.word	0x20000088

0800aa74 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	2002      	movs	r0, #2
 800aa80:	f010 fff6 	bl	801ba70 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800aa84:	4803      	ldr	r0, [pc, #12]	@ (800aa94 <OnTxTimerEvent+0x20>)
 800aa86:	f011 f8a9 	bl	801bbdc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800aa8a:	bf00      	nop
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	2000047c 	.word	0x2000047c

0800aa98 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
#if defined(DBG)	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aaa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800aaaa:	f7fa fcdf 	bl	800546c <HAL_GPIO_WritePin>
#endif
}
 800aaae:	bf00      	nop
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
#if defined(DBG)   // XXX: No LED available
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800aabe:	bf00      	nop
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bc80      	pop	{r7}
 800aac6:	4770      	bx	lr

0800aac8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
#if defined(DBG)   // XXX: No LED available
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); /* LED_RED */
 800aad0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aad4:	4803      	ldr	r0, [pc, #12]	@ (800aae4 <OnJoinTimerLedEvent+0x1c>)
 800aad6:	f7fa fce0 	bl	800549a <HAL_GPIO_TogglePin>
#endif
}
 800aada:	bf00      	nop
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	48000400 	.word	0x48000400

0800aae8 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af04      	add	r7, sp, #16
 800aaee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d048      	beq.n	800ab88 <OnTxData+0xa0>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d044      	beq.n	800ab88 <OnTxData+0xa0>
    {
#if defined(DBG)	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800aafe:	2201      	movs	r2, #1
 800ab00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ab04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ab08:	f7fa fcb0 	bl	800546c <HAL_GPIO_WritePin>
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800ab0c:	4820      	ldr	r0, [pc, #128]	@ (800ab90 <OnTxData+0xa8>)
 800ab0e:	f011 f865 	bl	801bbdc <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800ab12:	4b20      	ldr	r3, [pc, #128]	@ (800ab94 <OnTxData+0xac>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	2100      	movs	r1, #0
 800ab18:	2002      	movs	r0, #2
 800ab1a:	f011 fad7 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	7c12      	ldrb	r2, [r2, #16]
 800ab26:	4611      	mov	r1, r2
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800ab2e:	4610      	mov	r0, r2
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800ab36:	9203      	str	r2, [sp, #12]
 800ab38:	9002      	str	r0, [sp, #8]
 800ab3a:	9101      	str	r1, [sp, #4]
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	4b16      	ldr	r3, [pc, #88]	@ (800ab98 <OnTxData+0xb0>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	2100      	movs	r1, #0
 800ab44:	2003      	movs	r0, #3
 800ab46:	f011 fac1 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800ab4a:	4b14      	ldr	r3, [pc, #80]	@ (800ab9c <OnTxData+0xb4>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2100      	movs	r1, #0
 800ab50:	2003      	movs	r0, #3
 800ab52:	f011 fabb 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	7a1b      	ldrb	r3, [r3, #8]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d10e      	bne.n	800ab7c <OnTxData+0x94>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	7a5b      	ldrb	r3, [r3, #9]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <OnTxData+0x82>
 800ab66:	4b0e      	ldr	r3, [pc, #56]	@ (800aba0 <OnTxData+0xb8>)
 800ab68:	e000      	b.n	800ab6c <OnTxData+0x84>
 800ab6a:	4b0e      	ldr	r3, [pc, #56]	@ (800aba4 <OnTxData+0xbc>)
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	4b0e      	ldr	r3, [pc, #56]	@ (800aba8 <OnTxData+0xc0>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	2100      	movs	r1, #0
 800ab74:	2003      	movs	r0, #3
 800ab76:	f011 faa9 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800ab7a:	e005      	b.n	800ab88 <OnTxData+0xa0>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800ab7c:	4b0b      	ldr	r3, [pc, #44]	@ (800abac <OnTxData+0xc4>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2100      	movs	r1, #0
 800ab82:	2003      	movs	r0, #3
 800ab84:	f011 faa2 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
}
 800ab88:	bf00      	nop
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	200005a0 	.word	0x200005a0
 800ab94:	0801c924 	.word	0x0801c924
 800ab98:	0801c958 	.word	0x0801c958
 800ab9c:	0801c98c 	.word	0x0801c98c
 800aba0:	0801c99c 	.word	0x0801c99c
 800aba4:	0801c9a0 	.word	0x0801c9a0
 800aba8:	0801c9a8 	.word	0x0801c9a8
 800abac:	0801c9bc 	.word	0x0801c9bc

0800abb0 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d039      	beq.n	800ac32 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d11e      	bne.n	800ac06 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800abc8:	2100      	movs	r1, #0
 800abca:	2004      	movs	r0, #4
 800abcc:	f010 ff50 	bl	801ba70 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800abd0:	481a      	ldr	r0, [pc, #104]	@ (800ac3c <OnJoinRequest+0x8c>)
 800abd2:	f011 f871 	bl	801bcb8 <UTIL_TIMER_Stop>
#if defined(DBG)   // XXX:
      //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800abd6:	4b1a      	ldr	r3, [pc, #104]	@ (800ac40 <OnJoinRequest+0x90>)
 800abd8:	2200      	movs	r2, #0
 800abda:	2100      	movs	r1, #0
 800abdc:	2002      	movs	r0, #2
 800abde:	f011 fa75 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	79db      	ldrb	r3, [r3, #7]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d106      	bne.n	800abf8 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800abea:	4b16      	ldr	r3, [pc, #88]	@ (800ac44 <OnJoinRequest+0x94>)
 800abec:	2200      	movs	r2, #0
 800abee:	2100      	movs	r1, #0
 800abf0:	2002      	movs	r0, #2
 800abf2:	f011 fa6b 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800abf6:	e01c      	b.n	800ac32 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800abf8:	4b13      	ldr	r3, [pc, #76]	@ (800ac48 <OnJoinRequest+0x98>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	2100      	movs	r1, #0
 800abfe:	2002      	movs	r0, #2
 800ac00:	f011 fa64 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
}
 800ac04:	e015      	b.n	800ac32 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800ac06:	4b11      	ldr	r3, [pc, #68]	@ (800ac4c <OnJoinRequest+0x9c>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	2002      	movs	r0, #2
 800ac0e:	f011 fa5d 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	79db      	ldrb	r3, [r3, #7]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d10b      	bne.n	800ac32 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800ac1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac50 <OnJoinRequest+0xa0>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2100      	movs	r1, #0
 800ac20:	2002      	movs	r0, #2
 800ac22:	f011 fa53 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800ac26:	4b0b      	ldr	r3, [pc, #44]	@ (800ac54 <OnJoinRequest+0xa4>)
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f002 f8bb 	bl	800cda8 <LmHandlerJoin>
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	200005d0 	.word	0x200005d0
 800ac40:	0801c9cc 	.word	0x0801c9cc
 800ac44:	0801c9e4 	.word	0x0801c9e4
 800ac48:	0801ca04 	.word	0x0801ca04
 800ac4c:	0801ca24 	.word	0x0801ca24
 800ac50:	0801ca40 	.word	0x0801ca40
 800ac54:	20000020 	.word	0x20000020

0800ac58 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800ac58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac5a:	b093      	sub	sp, #76	@ 0x4c
 800ac5c:	af0c      	add	r7, sp, #48	@ 0x30
 800ac5e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d056      	beq.n	800ad14 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	785b      	ldrb	r3, [r3, #1]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d008      	beq.n	800ac80 <OnBeaconStatusChange+0x28>
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d049      	beq.n	800ad06 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800ac72:	4b2a      	ldr	r3, [pc, #168]	@ (800ad1c <OnBeaconStatusChange+0xc4>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	2100      	movs	r1, #0
 800ac78:	2002      	movs	r0, #2
 800ac7a:	f011 fa27 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ac7e:	e049      	b.n	800ad14 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	7c1b      	ldrb	r3, [r3, #16]
 800ac84:	4618      	mov	r0, r3
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ac8c:	461c      	mov	r4, r3
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800ac94:	461d      	mov	r5, r3
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	6852      	ldr	r2, [r2, #4]
 800ac9e:	6979      	ldr	r1, [r7, #20]
 800aca0:	7d89      	ldrb	r1, [r1, #22]
 800aca2:	460e      	mov	r6, r1
 800aca4:	6979      	ldr	r1, [r7, #20]
 800aca6:	7dc9      	ldrb	r1, [r1, #23]
 800aca8:	6139      	str	r1, [r7, #16]
 800acaa:	6979      	ldr	r1, [r7, #20]
 800acac:	7e09      	ldrb	r1, [r1, #24]
 800acae:	60f9      	str	r1, [r7, #12]
 800acb0:	6979      	ldr	r1, [r7, #20]
 800acb2:	7e49      	ldrb	r1, [r1, #25]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	6979      	ldr	r1, [r7, #20]
 800acb8:	7e89      	ldrb	r1, [r1, #26]
 800acba:	6079      	str	r1, [r7, #4]
 800acbc:	6979      	ldr	r1, [r7, #20]
 800acbe:	7ec9      	ldrb	r1, [r1, #27]
 800acc0:	6039      	str	r1, [r7, #0]
 800acc2:	6979      	ldr	r1, [r7, #20]
 800acc4:	7f09      	ldrb	r1, [r1, #28]
 800acc6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800acc8:	f8d7 c000 	ldr.w	ip, [r7]
 800accc:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800acd0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800acd4:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800acd8:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800acdc:	f8cd c020 	str.w	ip, [sp, #32]
 800ace0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800ace4:	f8cd c01c 	str.w	ip, [sp, #28]
 800ace8:	6939      	ldr	r1, [r7, #16]
 800acea:	9106      	str	r1, [sp, #24]
 800acec:	9605      	str	r6, [sp, #20]
 800acee:	9204      	str	r2, [sp, #16]
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	9502      	str	r5, [sp, #8]
 800acf4:	9401      	str	r4, [sp, #4]
 800acf6:	9000      	str	r0, [sp, #0]
 800acf8:	4b09      	ldr	r3, [pc, #36]	@ (800ad20 <OnBeaconStatusChange+0xc8>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	2100      	movs	r1, #0
 800acfe:	2002      	movs	r0, #2
 800ad00:	f011 f9e4 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800ad04:	e006      	b.n	800ad14 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800ad06:	4b07      	ldr	r3, [pc, #28]	@ (800ad24 <OnBeaconStatusChange+0xcc>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	2002      	movs	r0, #2
 800ad0e:	f011 f9dd 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ad12:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800ad14:	bf00      	nop
 800ad16:	371c      	adds	r7, #28
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad1c:	0801ca64 	.word	0x0801ca64
 800ad20:	0801ca7c 	.word	0x0801ca7c
 800ad24:	0801caf0 	.word	0x0801caf0

0800ad28 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800ad2c:	bf00      	nop
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bc80      	pop	{r7}
 800ad32:	4770      	bx	lr

0800ad34 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af02      	add	r7, sp, #8
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
 800ad40:	4a06      	ldr	r2, [pc, #24]	@ (800ad5c <OnClassChange+0x28>)
 800ad42:	5cd3      	ldrb	r3, [r2, r3]
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	4b06      	ldr	r3, [pc, #24]	@ (800ad60 <OnClassChange+0x2c>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	2002      	movs	r0, #2
 800ad4e:	f011 f9bd 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800ad52:	bf00      	nop
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	0801cb2c 	.word	0x0801cb2c
 800ad60:	0801cb10 	.word	0x0801cb10

0800ad64 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800ad68:	2100      	movs	r1, #0
 800ad6a:	2001      	movs	r0, #1
 800ad6c:	f010 fe80 	bl	801ba70 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800ad70:	bf00      	nop
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800ad7c:	4a0d      	ldr	r2, [pc, #52]	@ (800adb4 <OnTxPeriodicityChanged+0x40>)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800ad82:	4b0c      	ldr	r3, [pc, #48]	@ (800adb4 <OnTxPeriodicityChanged+0x40>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d103      	bne.n	800ad92 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800ad8a:	4b0a      	ldr	r3, [pc, #40]	@ (800adb4 <OnTxPeriodicityChanged+0x40>)
 800ad8c:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ad90:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800ad92:	4809      	ldr	r0, [pc, #36]	@ (800adb8 <OnTxPeriodicityChanged+0x44>)
 800ad94:	f010 ff90 	bl	801bcb8 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800ad98:	4b06      	ldr	r3, [pc, #24]	@ (800adb4 <OnTxPeriodicityChanged+0x40>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4806      	ldr	r0, [pc, #24]	@ (800adb8 <OnTxPeriodicityChanged+0x44>)
 800ada0:	f010 fffa 	bl	801bd98 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800ada4:	4804      	ldr	r0, [pc, #16]	@ (800adb8 <OnTxPeriodicityChanged+0x44>)
 800ada6:	f010 ff19 	bl	801bbdc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20000088 	.word	0x20000088
 800adb8:	2000047c 	.word	0x2000047c

0800adbc <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	4603      	mov	r3, r0
 800adc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800adc6:	4a04      	ldr	r2, [pc, #16]	@ (800add8 <OnTxFrameCtrlChanged+0x1c>)
 800adc8:	79fb      	ldrb	r3, [r7, #7]
 800adca:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	bc80      	pop	{r7}
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	20000070 	.word	0x20000070

0800addc <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4603      	mov	r3, r0
 800ade4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800ade6:	4a04      	ldr	r2, [pc, #16]	@ (800adf8 <OnPingSlotPeriodicityChanged+0x1c>)
 800ade8:	79fb      	ldrb	r3, [r7, #7]
 800adea:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bc80      	pop	{r7}
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	20000070 	.word	0x20000070

0800adfc <OnSystemReset>:

static void OnSystemReset(void)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800ae00:	f002 fdcb 	bl	800d99a <LmHandlerHalt>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d106      	bne.n	800ae18 <OnSystemReset+0x1c>
 800ae0a:	f002 f86f 	bl	800ceec <LmHandlerJoinStatus>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d101      	bne.n	800ae18 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800ae14:	f7ff fab4 	bl	800a380 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800ae18:	bf00      	nop
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <StopJoin>:

static void StopJoin(void)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */
#if defined(DBG)   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800ae20:	2201      	movs	r2, #1
 800ae22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ae26:	481c      	ldr	r0, [pc, #112]	@ (800ae98 <StopJoin+0x7c>)
 800ae28:	f7fa fb20 	bl	800546c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ae32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ae36:	f7fa fb19 	bl	800546c <HAL_GPIO_WritePin>
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800ae3a:	4818      	ldr	r0, [pc, #96]	@ (800ae9c <StopJoin+0x80>)
 800ae3c:	f010 ff3c 	bl	801bcb8 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800ae40:	f002 fd9e 	bl	800d980 <LmHandlerStop>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d006      	beq.n	800ae58 <StopJoin+0x3c>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800ae4a:	4b15      	ldr	r3, [pc, #84]	@ (800aea0 <StopJoin+0x84>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2100      	movs	r1, #0
 800ae50:	2002      	movs	r0, #2
 800ae52:	f011 f93b 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
 800ae56:	e01a      	b.n	800ae8e <StopJoin+0x72>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800ae58:	4b12      	ldr	r3, [pc, #72]	@ (800aea4 <StopJoin+0x88>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	2002      	movs	r0, #2
 800ae60:	f011 f934 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800ae64:	4b10      	ldr	r3, [pc, #64]	@ (800aea8 <StopJoin+0x8c>)
 800ae66:	2201      	movs	r2, #1
 800ae68:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800ae6a:	4b10      	ldr	r3, [pc, #64]	@ (800aeac <StopJoin+0x90>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	2100      	movs	r1, #0
 800ae70:	2002      	movs	r0, #2
 800ae72:	f011 f92b 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800ae76:	480e      	ldr	r0, [pc, #56]	@ (800aeb0 <StopJoin+0x94>)
 800ae78:	f001 fe32 	bl	800cae0 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800ae7c:	4b0a      	ldr	r3, [pc, #40]	@ (800aea8 <StopJoin+0x8c>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	2101      	movs	r1, #1
 800ae82:	4618      	mov	r0, r3
 800ae84:	f001 ff90 	bl	800cda8 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800ae88:	4804      	ldr	r0, [pc, #16]	@ (800ae9c <StopJoin+0x80>)
 800ae8a:	f010 fea7 	bl	801bbdc <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800ae8e:	4809      	ldr	r0, [pc, #36]	@ (800aeb4 <StopJoin+0x98>)
 800ae90:	f010 fea4 	bl	801bbdc <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800ae94:	bf00      	nop
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	48000400 	.word	0x48000400
 800ae9c:	2000047c 	.word	0x2000047c
 800aea0:	0801cb30 	.word	0x0801cb30
 800aea4:	0801cb50 	.word	0x0801cb50
 800aea8:	20000020 	.word	0x20000020
 800aeac:	0801cb64 	.word	0x0801cb64
 800aeb0:	20000070 	.word	0x20000070
 800aeb4:	20000494 	.word	0x20000494

0800aeb8 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800aec0:	4b0c      	ldr	r3, [pc, #48]	@ (800aef4 <OnStopJoinTimerEvent+0x3c>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d103      	bne.n	800aed0 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800aec8:	2100      	movs	r1, #0
 800aeca:	2008      	movs	r0, #8
 800aecc:	f010 fdd0 	bl	801ba70 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */
#if defined(DBG)   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800aed0:	2200      	movs	r2, #0
 800aed2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aed6:	4808      	ldr	r0, [pc, #32]	@ (800aef8 <OnStopJoinTimerEvent+0x40>)
 800aed8:	f7fa fac8 	bl	800546c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800aedc:	2200      	movs	r2, #0
 800aede:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800aee6:	f7fa fac1 	bl	800546c <HAL_GPIO_WritePin>
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	20000020 	.word	0x20000020
 800aef8:	48000400 	.word	0x48000400

0800aefc <StoreContext>:

static void StoreContext(void)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800af02:	23ff      	movs	r3, #255	@ 0xff
 800af04:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800af06:	f002 fd7d 	bl	800da04 <LmHandlerNvmDataStore>
 800af0a:	4603      	mov	r3, r0
 800af0c:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800af0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af12:	f113 0f08 	cmn.w	r3, #8
 800af16:	d106      	bne.n	800af26 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800af18:	4b0a      	ldr	r3, [pc, #40]	@ (800af44 <StoreContext+0x48>)
 800af1a:	2200      	movs	r2, #0
 800af1c:	2100      	movs	r1, #0
 800af1e:	2002      	movs	r0, #2
 800af20:	f011 f8d4 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800af24:	e00a      	b.n	800af3c <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800af26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af2e:	d105      	bne.n	800af3c <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800af30:	4b05      	ldr	r3, [pc, #20]	@ (800af48 <StoreContext+0x4c>)
 800af32:	2200      	movs	r2, #0
 800af34:	2100      	movs	r1, #0
 800af36:	2002      	movs	r0, #2
 800af38:	f011 f8c8 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
}
 800af3c:	bf00      	nop
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	0801cb84 	.word	0x0801cb84
 800af48:	0801cb9c 	.word	0x0801cb9c

0800af4c <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	4603      	mov	r3, r0
 800af54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d106      	bne.n	800af6a <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800af5c:	4b08      	ldr	r3, [pc, #32]	@ (800af80 <OnNvmDataChange+0x34>)
 800af5e:	2200      	movs	r2, #0
 800af60:	2100      	movs	r1, #0
 800af62:	2002      	movs	r0, #2
 800af64:	f011 f8b2 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800af68:	e005      	b.n	800af76 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800af6a:	4b06      	ldr	r3, [pc, #24]	@ (800af84 <OnNvmDataChange+0x38>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	2100      	movs	r1, #0
 800af70:	2002      	movs	r0, #2
 800af72:	f011 f8ab 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
}
 800af76:	bf00      	nop
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	0801cbb4 	.word	0x0801cbb4
 800af84:	0801cbc8 	.word	0x0801cbc8

0800af88 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800af92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800af96:	4807      	ldr	r0, [pc, #28]	@ (800afb4 <OnStoreContextRequest+0x2c>)
 800af98:	f7f6 fa7e 	bl	8001498 <FLASH_IF_Erase>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d104      	bne.n	800afac <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	4803      	ldr	r0, [pc, #12]	@ (800afb4 <OnStoreContextRequest+0x2c>)
 800afa8:	f7f6 fa26 	bl	80013f8 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800afac:	bf00      	nop
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	0803f000 	.word	0x0803f000

0800afb8 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	4903      	ldr	r1, [pc, #12]	@ (800afd4 <OnRestoreContextRequest+0x1c>)
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7f6 fa3e 	bl	8001448 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800afcc:	bf00      	nop
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	0803f000 	.word	0x0803f000

0800afd8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800afdc:	4b15      	ldr	r3, [pc, #84]	@ (800b034 <LoraInfo_Init+0x5c>)
 800afde:	2200      	movs	r2, #0
 800afe0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800afe2:	4b14      	ldr	r3, [pc, #80]	@ (800b034 <LoraInfo_Init+0x5c>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800afe8:	4b12      	ldr	r3, [pc, #72]	@ (800b034 <LoraInfo_Init+0x5c>)
 800afea:	2200      	movs	r2, #0
 800afec:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800afee:	4b11      	ldr	r3, [pc, #68]	@ (800b034 <LoraInfo_Init+0x5c>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800aff4:	4b0f      	ldr	r3, [pc, #60]	@ (800b034 <LoraInfo_Init+0x5c>)
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	f043 0320 	orr.w	r3, r3, #32
 800affc:	4a0d      	ldr	r2, [pc, #52]	@ (800b034 <LoraInfo_Init+0x5c>)
 800affe:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800b000:	4b0c      	ldr	r3, [pc, #48]	@ (800b034 <LoraInfo_Init+0x5c>)
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10d      	bne.n	800b024 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800b008:	4b0b      	ldr	r3, [pc, #44]	@ (800b038 <LoraInfo_Init+0x60>)
 800b00a:	2200      	movs	r2, #0
 800b00c:	2100      	movs	r1, #0
 800b00e:	2000      	movs	r0, #0
 800b010:	f011 f85c 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800b014:	bf00      	nop
 800b016:	f011 f847 	bl	801c0a8 <UTIL_ADV_TRACE_IsBufferEmpty>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d1fa      	bne.n	800b016 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800b020:	bf00      	nop
 800b022:	e7fd      	b.n	800b020 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800b024:	4b03      	ldr	r3, [pc, #12]	@ (800b034 <LoraInfo_Init+0x5c>)
 800b026:	2200      	movs	r2, #0
 800b028:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800b02a:	4b02      	ldr	r3, [pc, #8]	@ (800b034 <LoraInfo_Init+0x5c>)
 800b02c:	2201      	movs	r2, #1
 800b02e:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800b030:	bf00      	nop
 800b032:	bd80      	pop	{r7, pc}
 800b034:	200005e8 	.word	0x200005e8
 800b038:	0801cbdc 	.word	0x0801cbdc

0800b03c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800b03c:	b480      	push	{r7}
 800b03e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800b040:	4b02      	ldr	r3, [pc, #8]	@ (800b04c <LoraInfo_GetPtr+0x10>)
}
 800b042:	4618      	mov	r0, r3
 800b044:	46bd      	mov	sp, r7
 800b046:	bc80      	pop	{r7}
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	200005e8 	.word	0x200005e8

0800b050 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800b054:	f7f7 ff1d 	bl	8002e92 <BSP_RADIO_Init>
 800b058:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b082      	sub	sp, #8
 800b062:	af00      	add	r7, sp, #0
 800b064:	4603      	mov	r3, r0
 800b066:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800b068:	79fb      	ldrb	r3, [r7, #7]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7f7 ff42 	bl	8002ef4 <BSP_RADIO_ConfigRFSwitch>
 800b070:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800b07e:	f7f7 ff87 	bl	8002f90 <BSP_RADIO_GetTxConfig>
 800b082:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b084:	4618      	mov	r0, r3
 800b086:	bd80      	pop	{r7, pc}

0800b088 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800b08c:	f7f7 ff87 	bl	8002f9e <BSP_RADIO_IsTCXO>
 800b090:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b092:	4618      	mov	r0, r3
 800b094:	bd80      	pop	{r7, pc}

0800b096 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800b09a:	f7f7 ff87 	bl	8002fac <BSP_RADIO_IsDCDC>
 800b09e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800b0ae:	79fb      	ldrb	r3, [r7, #7]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7f7 ff82 	bl	8002fba <BSP_RADIO_GetRFOMaxPowerConfig>
 800b0b6:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	33f1      	adds	r3, #241	@ 0xf1
 800b0cc:	2210      	movs	r2, #16
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f00c fcd9 	bl	8017a88 <memset1>
    ctx->M_n = 0;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	22f0      	movs	r2, #240	@ 0xf0
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f00c fccf 	bl	8017a88 <memset1>
}
 800b0ea:	bf00      	nop
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b082      	sub	sp, #8
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	461a      	mov	r2, r3
 800b100:	2110      	movs	r1, #16
 800b102:	6838      	ldr	r0, [r7, #0]
 800b104:	f000 fe60 	bl	800bdc8 <lorawan_aes_set_key>
}
 800b108:	bf00      	nop
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b08c      	sub	sp, #48	@ 0x30
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b122:	2b00      	cmp	r3, #0
 800b124:	f000 80a1 	beq.w	800b26a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b12e:	f1c3 0310 	rsb	r3, r3, #16
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	4293      	cmp	r3, r2
 800b136:	bf28      	it	cs
 800b138:	4613      	movcs	r3, r2
 800b13a:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b148:	4413      	add	r3, r2
 800b14a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b14c:	b292      	uxth	r2, r2
 800b14e:	68b9      	ldr	r1, [r7, #8]
 800b150:	4618      	mov	r0, r3
 800b152:	f00c fc5e 	bl	8017a12 <memcpy1>
        ctx->M_n += mlen;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800b15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15e:	441a      	add	r2, r3
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b16c:	2b0f      	cmp	r3, #15
 800b16e:	f240 808d 	bls.w	800b28c <AES_CMAC_Update+0x17c>
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b176:	429a      	cmp	r2, r3
 800b178:	f000 8088 	beq.w	800b28c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800b17c:	2300      	movs	r3, #0
 800b17e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b180:	e015      	b.n	800b1ae <AES_CMAC_Update+0x9e>
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b186:	4413      	add	r3, r2
 800b188:	33f1      	adds	r3, #241	@ 0xf1
 800b18a:	781a      	ldrb	r2, [r3, #0]
 800b18c:	68f9      	ldr	r1, [r7, #12]
 800b18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b190:	440b      	add	r3, r1
 800b192:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	4053      	eors	r3, r2
 800b19a:	b2d9      	uxtb	r1, r3
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a0:	4413      	add	r3, r2
 800b1a2:	33f1      	adds	r3, #241	@ 0xf1
 800b1a4:	460a      	mov	r2, r1
 800b1a6:	701a      	strb	r2, [r3, #0]
 800b1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b0:	2b0f      	cmp	r3, #15
 800b1b2:	dde6      	ble.n	800b182 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b1ba:	f107 0314 	add.w	r3, r7, #20
 800b1be:	2210      	movs	r2, #16
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f00c fc26 	bl	8017a12 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	f107 0114 	add.w	r1, r7, #20
 800b1cc:	f107 0314 	add.w	r3, r7, #20
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 fed7 	bl	800bf84 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	33f1      	adds	r3, #241	@ 0xf1
 800b1da:	f107 0114 	add.w	r1, r7, #20
 800b1de:	2210      	movs	r2, #16
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f00c fc16 	bl	8017a12 <memcpy1>

        data += mlen;
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ea:	4413      	add	r3, r2
 800b1ec:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800b1f6:	e038      	b.n	800b26a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1fc:	e013      	b.n	800b226 <AES_CMAC_Update+0x116>
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b202:	4413      	add	r3, r2
 800b204:	33f1      	adds	r3, #241	@ 0xf1
 800b206:	781a      	ldrb	r2, [r3, #0]
 800b208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20a:	68b9      	ldr	r1, [r7, #8]
 800b20c:	440b      	add	r3, r1
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	4053      	eors	r3, r2
 800b212:	b2d9      	uxtb	r1, r3
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b218:	4413      	add	r3, r2
 800b21a:	33f1      	adds	r3, #241	@ 0xf1
 800b21c:	460a      	mov	r2, r1
 800b21e:	701a      	strb	r2, [r3, #0]
 800b220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b222:	3301      	adds	r3, #1
 800b224:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b228:	2b0f      	cmp	r3, #15
 800b22a:	dde8      	ble.n	800b1fe <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b232:	f107 0314 	add.w	r3, r7, #20
 800b236:	2210      	movs	r2, #16
 800b238:	4618      	mov	r0, r3
 800b23a:	f00c fbea 	bl	8017a12 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	f107 0114 	add.w	r1, r7, #20
 800b244:	f107 0314 	add.w	r3, r7, #20
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 fe9b 	bl	800bf84 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	33f1      	adds	r3, #241	@ 0xf1
 800b252:	f107 0114 	add.w	r1, r7, #20
 800b256:	2210      	movs	r2, #16
 800b258:	4618      	mov	r0, r3
 800b25a:	f00c fbda 	bl	8017a12 <memcpy1>

        data += 16;
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	3310      	adds	r3, #16
 800b262:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3b10      	subs	r3, #16
 800b268:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b10      	cmp	r3, #16
 800b26e:	d8c3      	bhi.n	800b1f8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	b292      	uxth	r2, r2
 800b27a:	68b9      	ldr	r1, [r7, #8]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f00c fbc8 	bl	8017a12 <memcpy1>
    ctx->M_n = len;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b28a:	e000      	b.n	800b28e <AES_CMAC_Update+0x17e>
            return;
 800b28c:	bf00      	nop
}
 800b28e:	3730      	adds	r7, #48	@ 0x30
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b092      	sub	sp, #72	@ 0x48
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b29e:	f107 031c 	add.w	r3, r7, #28
 800b2a2:	2210      	movs	r2, #16
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f00c fbee 	bl	8017a88 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	f107 011c 	add.w	r1, r7, #28
 800b2b2:	f107 031c 	add.w	r3, r7, #28
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fe64 	bl	800bf84 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b2bc:	7f3b      	ldrb	r3, [r7, #28]
 800b2be:	b25b      	sxtb	r3, r3
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	da31      	bge.n	800b328 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2c8:	e01c      	b.n	800b304 <AES_CMAC_Final+0x70>
 800b2ca:	f107 021c 	add.w	r2, r7, #28
 800b2ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2d0:	4413      	add	r3, r2
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	b25b      	sxtb	r3, r3
 800b2d6:	005b      	lsls	r3, r3, #1
 800b2d8:	b25a      	sxtb	r2, r3
 800b2da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2dc:	3301      	adds	r3, #1
 800b2de:	3348      	adds	r3, #72	@ 0x48
 800b2e0:	443b      	add	r3, r7
 800b2e2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b2e6:	09db      	lsrs	r3, r3, #7
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	b25b      	sxtb	r3, r3
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	b25b      	sxtb	r3, r3
 800b2f0:	b2d9      	uxtb	r1, r3
 800b2f2:	f107 021c 	add.w	r2, r7, #28
 800b2f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2f8:	4413      	add	r3, r2
 800b2fa:	460a      	mov	r2, r1
 800b2fc:	701a      	strb	r2, [r3, #0]
 800b2fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b300:	3301      	adds	r3, #1
 800b302:	647b      	str	r3, [r7, #68]	@ 0x44
 800b304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b306:	2b0e      	cmp	r3, #14
 800b308:	dddf      	ble.n	800b2ca <AES_CMAC_Final+0x36>
 800b30a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b30e:	005b      	lsls	r3, r3, #1
 800b310:	b2db      	uxtb	r3, r3
 800b312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800b316:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b31a:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800b31e:	43db      	mvns	r3, r3
 800b320:	b2db      	uxtb	r3, r3
 800b322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b326:	e028      	b.n	800b37a <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800b328:	2300      	movs	r3, #0
 800b32a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b32c:	e01c      	b.n	800b368 <AES_CMAC_Final+0xd4>
 800b32e:	f107 021c 	add.w	r2, r7, #28
 800b332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b334:	4413      	add	r3, r2
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	b25b      	sxtb	r3, r3
 800b33a:	005b      	lsls	r3, r3, #1
 800b33c:	b25a      	sxtb	r2, r3
 800b33e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b340:	3301      	adds	r3, #1
 800b342:	3348      	adds	r3, #72	@ 0x48
 800b344:	443b      	add	r3, r7
 800b346:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b34a:	09db      	lsrs	r3, r3, #7
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	b25b      	sxtb	r3, r3
 800b350:	4313      	orrs	r3, r2
 800b352:	b25b      	sxtb	r3, r3
 800b354:	b2d9      	uxtb	r1, r3
 800b356:	f107 021c 	add.w	r2, r7, #28
 800b35a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b35c:	4413      	add	r3, r2
 800b35e:	460a      	mov	r2, r1
 800b360:	701a      	strb	r2, [r3, #0]
 800b362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b364:	3301      	adds	r3, #1
 800b366:	643b      	str	r3, [r7, #64]	@ 0x40
 800b368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b36a:	2b0e      	cmp	r3, #14
 800b36c:	dddf      	ble.n	800b32e <AES_CMAC_Final+0x9a>
 800b36e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b372:	005b      	lsls	r3, r3, #1
 800b374:	b2db      	uxtb	r3, r3
 800b376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b380:	2b10      	cmp	r3, #16
 800b382:	d11d      	bne.n	800b3c0 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b384:	2300      	movs	r3, #0
 800b386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b388:	e016      	b.n	800b3b8 <AES_CMAC_Final+0x124>
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b38e:	4413      	add	r3, r2
 800b390:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b394:	781a      	ldrb	r2, [r3, #0]
 800b396:	f107 011c 	add.w	r1, r7, #28
 800b39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b39c:	440b      	add	r3, r1
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	4053      	eors	r3, r2
 800b3a2:	b2d9      	uxtb	r1, r3
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b3ae:	460a      	mov	r2, r1
 800b3b0:	701a      	strb	r2, [r3, #0]
 800b3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ba:	2b0f      	cmp	r3, #15
 800b3bc:	dde5      	ble.n	800b38a <AES_CMAC_Final+0xf6>
 800b3be:	e098      	b.n	800b4f2 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b3c0:	7f3b      	ldrb	r3, [r7, #28]
 800b3c2:	b25b      	sxtb	r3, r3
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	da31      	bge.n	800b42c <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b3cc:	e01c      	b.n	800b408 <AES_CMAC_Final+0x174>
 800b3ce:	f107 021c 	add.w	r2, r7, #28
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d4:	4413      	add	r3, r2
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	b25b      	sxtb	r3, r3
 800b3da:	005b      	lsls	r3, r3, #1
 800b3dc:	b25a      	sxtb	r2, r3
 800b3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	3348      	adds	r3, #72	@ 0x48
 800b3e4:	443b      	add	r3, r7
 800b3e6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b3ea:	09db      	lsrs	r3, r3, #7
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	b25b      	sxtb	r3, r3
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	b25b      	sxtb	r3, r3
 800b3f4:	b2d9      	uxtb	r1, r3
 800b3f6:	f107 021c 	add.w	r2, r7, #28
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fc:	4413      	add	r3, r2
 800b3fe:	460a      	mov	r2, r1
 800b400:	701a      	strb	r2, [r3, #0]
 800b402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b404:	3301      	adds	r3, #1
 800b406:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40a:	2b0e      	cmp	r3, #14
 800b40c:	dddf      	ble.n	800b3ce <AES_CMAC_Final+0x13a>
 800b40e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	b2db      	uxtb	r3, r3
 800b416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800b41a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b41e:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800b422:	43db      	mvns	r3, r3
 800b424:	b2db      	uxtb	r3, r3
 800b426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b42a:	e028      	b.n	800b47e <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800b42c:	2300      	movs	r3, #0
 800b42e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b430:	e01c      	b.n	800b46c <AES_CMAC_Final+0x1d8>
 800b432:	f107 021c 	add.w	r2, r7, #28
 800b436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b438:	4413      	add	r3, r2
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	b25b      	sxtb	r3, r3
 800b43e:	005b      	lsls	r3, r3, #1
 800b440:	b25a      	sxtb	r2, r3
 800b442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b444:	3301      	adds	r3, #1
 800b446:	3348      	adds	r3, #72	@ 0x48
 800b448:	443b      	add	r3, r7
 800b44a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b44e:	09db      	lsrs	r3, r3, #7
 800b450:	b2db      	uxtb	r3, r3
 800b452:	b25b      	sxtb	r3, r3
 800b454:	4313      	orrs	r3, r2
 800b456:	b25b      	sxtb	r3, r3
 800b458:	b2d9      	uxtb	r1, r3
 800b45a:	f107 021c 	add.w	r2, r7, #28
 800b45e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b460:	4413      	add	r3, r2
 800b462:	460a      	mov	r2, r1
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b468:	3301      	adds	r3, #1
 800b46a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46e:	2b0e      	cmp	r3, #14
 800b470:	dddf      	ble.n	800b432 <AES_CMAC_Final+0x19e>
 800b472:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b476:	005b      	lsls	r3, r3, #1
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	4413      	add	r3, r2
 800b488:	2280      	movs	r2, #128	@ 0x80
 800b48a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b48e:	e007      	b.n	800b4a0 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	4413      	add	r3, r2
 800b49a:	2200      	movs	r2, #0
 800b49c:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b4a6:	1c5a      	adds	r2, r3, #1
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b4b4:	2b0f      	cmp	r3, #15
 800b4b6:	d9eb      	bls.n	800b490 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4bc:	e016      	b.n	800b4ec <AES_CMAC_Final+0x258>
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c2:	4413      	add	r3, r2
 800b4c4:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b4c8:	781a      	ldrb	r2, [r3, #0]
 800b4ca:	f107 011c 	add.w	r1, r7, #28
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d0:	440b      	add	r3, r1
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	4053      	eors	r3, r2
 800b4d6:	b2d9      	uxtb	r1, r3
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	4413      	add	r3, r2
 800b4de:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b4e2:	460a      	mov	r2, r1
 800b4e4:	701a      	strb	r2, [r3, #0]
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ee:	2b0f      	cmp	r3, #15
 800b4f0:	dde5      	ble.n	800b4be <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4f6:	e015      	b.n	800b524 <AES_CMAC_Final+0x290>
 800b4f8:	683a      	ldr	r2, [r7, #0]
 800b4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fc:	4413      	add	r3, r2
 800b4fe:	33f1      	adds	r3, #241	@ 0xf1
 800b500:	781a      	ldrb	r2, [r3, #0]
 800b502:	6839      	ldr	r1, [r7, #0]
 800b504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b506:	440b      	add	r3, r1
 800b508:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	4053      	eors	r3, r2
 800b510:	b2d9      	uxtb	r1, r3
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b516:	4413      	add	r3, r2
 800b518:	33f1      	adds	r3, #241	@ 0xf1
 800b51a:	460a      	mov	r2, r1
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b520:	3301      	adds	r3, #1
 800b522:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b526:	2b0f      	cmp	r3, #15
 800b528:	dde6      	ble.n	800b4f8 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b530:	f107 030c 	add.w	r3, r7, #12
 800b534:	2210      	movs	r2, #16
 800b536:	4618      	mov	r0, r3
 800b538:	f00c fa6b 	bl	8017a12 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	f107 030c 	add.w	r3, r7, #12
 800b542:	6879      	ldr	r1, [r7, #4]
 800b544:	4618      	mov	r0, r3
 800b546:	f000 fd1d 	bl	800bf84 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b54a:	f107 031c 	add.w	r3, r7, #28
 800b54e:	2210      	movs	r2, #16
 800b550:	2100      	movs	r1, #0
 800b552:	4618      	mov	r0, r3
 800b554:	f00c fa98 	bl	8017a88 <memset1>
}
 800b558:	bf00      	nop
 800b55a:	3748      	adds	r7, #72	@ 0x48
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	781a      	ldrb	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	3301      	adds	r3, #1
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	7852      	ldrb	r2, [r2, #1]
 800b57a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3302      	adds	r3, #2
 800b580:	683a      	ldr	r2, [r7, #0]
 800b582:	7892      	ldrb	r2, [r2, #2]
 800b584:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	3303      	adds	r3, #3
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	78d2      	ldrb	r2, [r2, #3]
 800b58e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	3304      	adds	r3, #4
 800b594:	683a      	ldr	r2, [r7, #0]
 800b596:	7912      	ldrb	r2, [r2, #4]
 800b598:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	3305      	adds	r3, #5
 800b59e:	683a      	ldr	r2, [r7, #0]
 800b5a0:	7952      	ldrb	r2, [r2, #5]
 800b5a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3306      	adds	r3, #6
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	7992      	ldrb	r2, [r2, #6]
 800b5ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	3307      	adds	r3, #7
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	79d2      	ldrb	r2, [r2, #7]
 800b5b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	3308      	adds	r3, #8
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	7a12      	ldrb	r2, [r2, #8]
 800b5c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3309      	adds	r3, #9
 800b5c6:	683a      	ldr	r2, [r7, #0]
 800b5c8:	7a52      	ldrb	r2, [r2, #9]
 800b5ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	330a      	adds	r3, #10
 800b5d0:	683a      	ldr	r2, [r7, #0]
 800b5d2:	7a92      	ldrb	r2, [r2, #10]
 800b5d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	330b      	adds	r3, #11
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	7ad2      	ldrb	r2, [r2, #11]
 800b5de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	330c      	adds	r3, #12
 800b5e4:	683a      	ldr	r2, [r7, #0]
 800b5e6:	7b12      	ldrb	r2, [r2, #12]
 800b5e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	330d      	adds	r3, #13
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	7b52      	ldrb	r2, [r2, #13]
 800b5f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	330e      	adds	r3, #14
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	7b92      	ldrb	r2, [r2, #14]
 800b5fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	330f      	adds	r3, #15
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	7bd2      	ldrb	r2, [r2, #15]
 800b606:	701a      	strb	r2, [r3, #0]
#endif
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bc80      	pop	{r7}
 800b610:	4770      	bx	lr

0800b612 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b612:	b480      	push	{r7}
 800b614:	b085      	sub	sp, #20
 800b616:	af00      	add	r7, sp, #0
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	60b9      	str	r1, [r7, #8]
 800b61c:	4613      	mov	r3, r2
 800b61e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b620:	e007      	b.n	800b632 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	1c53      	adds	r3, r2, #1
 800b626:	60bb      	str	r3, [r7, #8]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	1c59      	adds	r1, r3, #1
 800b62c:	60f9      	str	r1, [r7, #12]
 800b62e:	7812      	ldrb	r2, [r2, #0]
 800b630:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b632:	79fb      	ldrb	r3, [r7, #7]
 800b634:	1e5a      	subs	r2, r3, #1
 800b636:	71fa      	strb	r2, [r7, #7]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1f2      	bne.n	800b622 <copy_block_nn+0x10>
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	bc80      	pop	{r7}
 800b646:	4770      	bx	lr

0800b648 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	781a      	ldrb	r2, [r3, #0]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	4053      	eors	r3, r2
 800b65c:	b2da      	uxtb	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3301      	adds	r3, #1
 800b666:	7819      	ldrb	r1, [r3, #0]
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	3301      	adds	r3, #1
 800b66c:	781a      	ldrb	r2, [r3, #0]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	3301      	adds	r3, #1
 800b672:	404a      	eors	r2, r1
 800b674:	b2d2      	uxtb	r2, r2
 800b676:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	3302      	adds	r3, #2
 800b67c:	7819      	ldrb	r1, [r3, #0]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	3302      	adds	r3, #2
 800b682:	781a      	ldrb	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	3302      	adds	r3, #2
 800b688:	404a      	eors	r2, r1
 800b68a:	b2d2      	uxtb	r2, r2
 800b68c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	3303      	adds	r3, #3
 800b692:	7819      	ldrb	r1, [r3, #0]
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	3303      	adds	r3, #3
 800b698:	781a      	ldrb	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	3303      	adds	r3, #3
 800b69e:	404a      	eors	r2, r1
 800b6a0:	b2d2      	uxtb	r2, r2
 800b6a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	3304      	adds	r3, #4
 800b6a8:	7819      	ldrb	r1, [r3, #0]
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	781a      	ldrb	r2, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	404a      	eors	r2, r1
 800b6b6:	b2d2      	uxtb	r2, r2
 800b6b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3305      	adds	r3, #5
 800b6be:	7819      	ldrb	r1, [r3, #0]
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	3305      	adds	r3, #5
 800b6c4:	781a      	ldrb	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	3305      	adds	r3, #5
 800b6ca:	404a      	eors	r2, r1
 800b6cc:	b2d2      	uxtb	r2, r2
 800b6ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3306      	adds	r3, #6
 800b6d4:	7819      	ldrb	r1, [r3, #0]
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	3306      	adds	r3, #6
 800b6da:	781a      	ldrb	r2, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	3306      	adds	r3, #6
 800b6e0:	404a      	eors	r2, r1
 800b6e2:	b2d2      	uxtb	r2, r2
 800b6e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	3307      	adds	r3, #7
 800b6ea:	7819      	ldrb	r1, [r3, #0]
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	3307      	adds	r3, #7
 800b6f0:	781a      	ldrb	r2, [r3, #0]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	3307      	adds	r3, #7
 800b6f6:	404a      	eors	r2, r1
 800b6f8:	b2d2      	uxtb	r2, r2
 800b6fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	3308      	adds	r3, #8
 800b700:	7819      	ldrb	r1, [r3, #0]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	3308      	adds	r3, #8
 800b706:	781a      	ldrb	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3308      	adds	r3, #8
 800b70c:	404a      	eors	r2, r1
 800b70e:	b2d2      	uxtb	r2, r2
 800b710:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	3309      	adds	r3, #9
 800b716:	7819      	ldrb	r1, [r3, #0]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	3309      	adds	r3, #9
 800b71c:	781a      	ldrb	r2, [r3, #0]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3309      	adds	r3, #9
 800b722:	404a      	eors	r2, r1
 800b724:	b2d2      	uxtb	r2, r2
 800b726:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	330a      	adds	r3, #10
 800b72c:	7819      	ldrb	r1, [r3, #0]
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	330a      	adds	r3, #10
 800b732:	781a      	ldrb	r2, [r3, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	330a      	adds	r3, #10
 800b738:	404a      	eors	r2, r1
 800b73a:	b2d2      	uxtb	r2, r2
 800b73c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	330b      	adds	r3, #11
 800b742:	7819      	ldrb	r1, [r3, #0]
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	330b      	adds	r3, #11
 800b748:	781a      	ldrb	r2, [r3, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	330b      	adds	r3, #11
 800b74e:	404a      	eors	r2, r1
 800b750:	b2d2      	uxtb	r2, r2
 800b752:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	330c      	adds	r3, #12
 800b758:	7819      	ldrb	r1, [r3, #0]
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	330c      	adds	r3, #12
 800b75e:	781a      	ldrb	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	330c      	adds	r3, #12
 800b764:	404a      	eors	r2, r1
 800b766:	b2d2      	uxtb	r2, r2
 800b768:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	330d      	adds	r3, #13
 800b76e:	7819      	ldrb	r1, [r3, #0]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	330d      	adds	r3, #13
 800b774:	781a      	ldrb	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	330d      	adds	r3, #13
 800b77a:	404a      	eors	r2, r1
 800b77c:	b2d2      	uxtb	r2, r2
 800b77e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	330e      	adds	r3, #14
 800b784:	7819      	ldrb	r1, [r3, #0]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	330e      	adds	r3, #14
 800b78a:	781a      	ldrb	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	330e      	adds	r3, #14
 800b790:	404a      	eors	r2, r1
 800b792:	b2d2      	uxtb	r2, r2
 800b794:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	330f      	adds	r3, #15
 800b79a:	7819      	ldrb	r1, [r3, #0]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	330f      	adds	r3, #15
 800b7a0:	781a      	ldrb	r2, [r3, #0]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	330f      	adds	r3, #15
 800b7a6:	404a      	eors	r2, r1
 800b7a8:	b2d2      	uxtb	r2, r2
 800b7aa:	701a      	strb	r2, [r3, #0]
#endif
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bc80      	pop	{r7}
 800b7b4:	4770      	bx	lr

0800b7b6 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b085      	sub	sp, #20
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	60f8      	str	r0, [r7, #12]
 800b7be:	60b9      	str	r1, [r7, #8]
 800b7c0:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	781a      	ldrb	r2, [r3, #0]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	4053      	eors	r3, r2
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	7819      	ldrb	r1, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	781a      	ldrb	r2, [r3, #0]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	404a      	eors	r2, r1
 800b7e4:	b2d2      	uxtb	r2, r2
 800b7e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	3302      	adds	r3, #2
 800b7ec:	7819      	ldrb	r1, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	3302      	adds	r3, #2
 800b7f2:	781a      	ldrb	r2, [r3, #0]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	3302      	adds	r3, #2
 800b7f8:	404a      	eors	r2, r1
 800b7fa:	b2d2      	uxtb	r2, r2
 800b7fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	3303      	adds	r3, #3
 800b802:	7819      	ldrb	r1, [r3, #0]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	3303      	adds	r3, #3
 800b808:	781a      	ldrb	r2, [r3, #0]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	3303      	adds	r3, #3
 800b80e:	404a      	eors	r2, r1
 800b810:	b2d2      	uxtb	r2, r2
 800b812:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	3304      	adds	r3, #4
 800b818:	7819      	ldrb	r1, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3304      	adds	r3, #4
 800b81e:	781a      	ldrb	r2, [r3, #0]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	3304      	adds	r3, #4
 800b824:	404a      	eors	r2, r1
 800b826:	b2d2      	uxtb	r2, r2
 800b828:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	3305      	adds	r3, #5
 800b82e:	7819      	ldrb	r1, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	3305      	adds	r3, #5
 800b834:	781a      	ldrb	r2, [r3, #0]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	3305      	adds	r3, #5
 800b83a:	404a      	eors	r2, r1
 800b83c:	b2d2      	uxtb	r2, r2
 800b83e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	3306      	adds	r3, #6
 800b844:	7819      	ldrb	r1, [r3, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3306      	adds	r3, #6
 800b84a:	781a      	ldrb	r2, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	3306      	adds	r3, #6
 800b850:	404a      	eors	r2, r1
 800b852:	b2d2      	uxtb	r2, r2
 800b854:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	3307      	adds	r3, #7
 800b85a:	7819      	ldrb	r1, [r3, #0]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3307      	adds	r3, #7
 800b860:	781a      	ldrb	r2, [r3, #0]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	3307      	adds	r3, #7
 800b866:	404a      	eors	r2, r1
 800b868:	b2d2      	uxtb	r2, r2
 800b86a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	3308      	adds	r3, #8
 800b870:	7819      	ldrb	r1, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	3308      	adds	r3, #8
 800b876:	781a      	ldrb	r2, [r3, #0]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	3308      	adds	r3, #8
 800b87c:	404a      	eors	r2, r1
 800b87e:	b2d2      	uxtb	r2, r2
 800b880:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	3309      	adds	r3, #9
 800b886:	7819      	ldrb	r1, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3309      	adds	r3, #9
 800b88c:	781a      	ldrb	r2, [r3, #0]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	3309      	adds	r3, #9
 800b892:	404a      	eors	r2, r1
 800b894:	b2d2      	uxtb	r2, r2
 800b896:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	330a      	adds	r3, #10
 800b89c:	7819      	ldrb	r1, [r3, #0]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	330a      	adds	r3, #10
 800b8a2:	781a      	ldrb	r2, [r3, #0]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	330a      	adds	r3, #10
 800b8a8:	404a      	eors	r2, r1
 800b8aa:	b2d2      	uxtb	r2, r2
 800b8ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	330b      	adds	r3, #11
 800b8b2:	7819      	ldrb	r1, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	330b      	adds	r3, #11
 800b8b8:	781a      	ldrb	r2, [r3, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	330b      	adds	r3, #11
 800b8be:	404a      	eors	r2, r1
 800b8c0:	b2d2      	uxtb	r2, r2
 800b8c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	330c      	adds	r3, #12
 800b8c8:	7819      	ldrb	r1, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	330c      	adds	r3, #12
 800b8ce:	781a      	ldrb	r2, [r3, #0]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	330c      	adds	r3, #12
 800b8d4:	404a      	eors	r2, r1
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	330d      	adds	r3, #13
 800b8de:	7819      	ldrb	r1, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	330d      	adds	r3, #13
 800b8e4:	781a      	ldrb	r2, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	330d      	adds	r3, #13
 800b8ea:	404a      	eors	r2, r1
 800b8ec:	b2d2      	uxtb	r2, r2
 800b8ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	330e      	adds	r3, #14
 800b8f4:	7819      	ldrb	r1, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	330e      	adds	r3, #14
 800b8fa:	781a      	ldrb	r2, [r3, #0]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	330e      	adds	r3, #14
 800b900:	404a      	eors	r2, r1
 800b902:	b2d2      	uxtb	r2, r2
 800b904:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	330f      	adds	r3, #15
 800b90a:	7819      	ldrb	r1, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	330f      	adds	r3, #15
 800b910:	781a      	ldrb	r2, [r3, #0]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	330f      	adds	r3, #15
 800b916:	404a      	eors	r2, r1
 800b918:	b2d2      	uxtb	r2, r2
 800b91a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b91c:	bf00      	nop
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	bc80      	pop	{r7}
 800b924:	4770      	bx	lr

0800b926 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b082      	sub	sp, #8
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7ff fe88 	bl	800b648 <xor_block>
}
 800b938:	bf00      	nop
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	461a      	mov	r2, r3
 800b94e:	4b48      	ldr	r3, [pc, #288]	@ (800ba70 <shift_sub_rows+0x130>)
 800b950:	5c9a      	ldrb	r2, [r3, r2]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	701a      	strb	r2, [r3, #0]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	3304      	adds	r3, #4
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	4619      	mov	r1, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3304      	adds	r3, #4
 800b962:	4a43      	ldr	r2, [pc, #268]	@ (800ba70 <shift_sub_rows+0x130>)
 800b964:	5c52      	ldrb	r2, [r2, r1]
 800b966:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	3308      	adds	r3, #8
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	4619      	mov	r1, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3308      	adds	r3, #8
 800b974:	4a3e      	ldr	r2, [pc, #248]	@ (800ba70 <shift_sub_rows+0x130>)
 800b976:	5c52      	ldrb	r2, [r2, r1]
 800b978:	701a      	strb	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	330c      	adds	r3, #12
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	4619      	mov	r1, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	330c      	adds	r3, #12
 800b986:	4a3a      	ldr	r2, [pc, #232]	@ (800ba70 <shift_sub_rows+0x130>)
 800b988:	5c52      	ldrb	r2, [r2, r1]
 800b98a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	785b      	ldrb	r3, [r3, #1]
 800b990:	73fb      	strb	r3, [r7, #15]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	3305      	adds	r3, #5
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	4619      	mov	r1, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	3301      	adds	r3, #1
 800b99e:	4a34      	ldr	r2, [pc, #208]	@ (800ba70 <shift_sub_rows+0x130>)
 800b9a0:	5c52      	ldrb	r2, [r2, r1]
 800b9a2:	701a      	strb	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	3309      	adds	r3, #9
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	3305      	adds	r3, #5
 800b9b0:	4a2f      	ldr	r2, [pc, #188]	@ (800ba70 <shift_sub_rows+0x130>)
 800b9b2:	5c52      	ldrb	r2, [r2, r1]
 800b9b4:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	330d      	adds	r3, #13
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	4619      	mov	r1, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	3309      	adds	r3, #9
 800b9c2:	4a2b      	ldr	r2, [pc, #172]	@ (800ba70 <shift_sub_rows+0x130>)
 800b9c4:	5c52      	ldrb	r2, [r2, r1]
 800b9c6:	701a      	strb	r2, [r3, #0]
 800b9c8:	7bfa      	ldrb	r2, [r7, #15]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	330d      	adds	r3, #13
 800b9ce:	4928      	ldr	r1, [pc, #160]	@ (800ba70 <shift_sub_rows+0x130>)
 800b9d0:	5c8a      	ldrb	r2, [r1, r2]
 800b9d2:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	789b      	ldrb	r3, [r3, #2]
 800b9d8:	73fb      	strb	r3, [r7, #15]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	330a      	adds	r3, #10
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	3302      	adds	r3, #2
 800b9e6:	4a22      	ldr	r2, [pc, #136]	@ (800ba70 <shift_sub_rows+0x130>)
 800b9e8:	5c52      	ldrb	r2, [r2, r1]
 800b9ea:	701a      	strb	r2, [r3, #0]
 800b9ec:	7bfa      	ldrb	r2, [r7, #15]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	330a      	adds	r3, #10
 800b9f2:	491f      	ldr	r1, [pc, #124]	@ (800ba70 <shift_sub_rows+0x130>)
 800b9f4:	5c8a      	ldrb	r2, [r1, r2]
 800b9f6:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	799b      	ldrb	r3, [r3, #6]
 800b9fc:	73fb      	strb	r3, [r7, #15]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	330e      	adds	r3, #14
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	4619      	mov	r1, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	3306      	adds	r3, #6
 800ba0a:	4a19      	ldr	r2, [pc, #100]	@ (800ba70 <shift_sub_rows+0x130>)
 800ba0c:	5c52      	ldrb	r2, [r2, r1]
 800ba0e:	701a      	strb	r2, [r3, #0]
 800ba10:	7bfa      	ldrb	r2, [r7, #15]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	330e      	adds	r3, #14
 800ba16:	4916      	ldr	r1, [pc, #88]	@ (800ba70 <shift_sub_rows+0x130>)
 800ba18:	5c8a      	ldrb	r2, [r1, r2]
 800ba1a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	7bdb      	ldrb	r3, [r3, #15]
 800ba20:	73fb      	strb	r3, [r7, #15]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	330b      	adds	r3, #11
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	4619      	mov	r1, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	330f      	adds	r3, #15
 800ba2e:	4a10      	ldr	r2, [pc, #64]	@ (800ba70 <shift_sub_rows+0x130>)
 800ba30:	5c52      	ldrb	r2, [r2, r1]
 800ba32:	701a      	strb	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3307      	adds	r3, #7
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	330b      	adds	r3, #11
 800ba40:	4a0b      	ldr	r2, [pc, #44]	@ (800ba70 <shift_sub_rows+0x130>)
 800ba42:	5c52      	ldrb	r2, [r2, r1]
 800ba44:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	3303      	adds	r3, #3
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	3307      	adds	r3, #7
 800ba52:	4a07      	ldr	r2, [pc, #28]	@ (800ba70 <shift_sub_rows+0x130>)
 800ba54:	5c52      	ldrb	r2, [r2, r1]
 800ba56:	701a      	strb	r2, [r3, #0]
 800ba58:	7bfa      	ldrb	r2, [r7, #15]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	3303      	adds	r3, #3
 800ba5e:	4904      	ldr	r1, [pc, #16]	@ (800ba70 <shift_sub_rows+0x130>)
 800ba60:	5c8a      	ldrb	r2, [r1, r2]
 800ba62:	701a      	strb	r2, [r3, #0]
}
 800ba64:	bf00      	nop
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bc80      	pop	{r7}
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	0801d140 	.word	0x0801d140

0800ba74 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800ba7c:	f107 0308 	add.w	r3, r7, #8
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7ff fd6c 	bl	800b560 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ba88:	7a3b      	ldrb	r3, [r7, #8]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	4b9a      	ldr	r3, [pc, #616]	@ (800bcf8 <mix_sub_columns+0x284>)
 800ba8e:	5c9a      	ldrb	r2, [r3, r2]
 800ba90:	7b7b      	ldrb	r3, [r7, #13]
 800ba92:	4619      	mov	r1, r3
 800ba94:	4b99      	ldr	r3, [pc, #612]	@ (800bcfc <mix_sub_columns+0x288>)
 800ba96:	5c5b      	ldrb	r3, [r3, r1]
 800ba98:	4053      	eors	r3, r2
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	7cbb      	ldrb	r3, [r7, #18]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4b97      	ldr	r3, [pc, #604]	@ (800bd00 <mix_sub_columns+0x28c>)
 800baa2:	5c5b      	ldrb	r3, [r3, r1]
 800baa4:	4053      	eors	r3, r2
 800baa6:	b2da      	uxtb	r2, r3
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
 800baaa:	4619      	mov	r1, r3
 800baac:	4b94      	ldr	r3, [pc, #592]	@ (800bd00 <mix_sub_columns+0x28c>)
 800baae:	5c5b      	ldrb	r3, [r3, r1]
 800bab0:	4053      	eors	r3, r2
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800bab8:	7a3b      	ldrb	r3, [r7, #8]
 800baba:	461a      	mov	r2, r3
 800babc:	4b90      	ldr	r3, [pc, #576]	@ (800bd00 <mix_sub_columns+0x28c>)
 800babe:	5c9a      	ldrb	r2, [r3, r2]
 800bac0:	7b7b      	ldrb	r3, [r7, #13]
 800bac2:	4619      	mov	r1, r3
 800bac4:	4b8c      	ldr	r3, [pc, #560]	@ (800bcf8 <mix_sub_columns+0x284>)
 800bac6:	5c5b      	ldrb	r3, [r3, r1]
 800bac8:	4053      	eors	r3, r2
 800baca:	b2da      	uxtb	r2, r3
 800bacc:	7cbb      	ldrb	r3, [r7, #18]
 800bace:	4619      	mov	r1, r3
 800bad0:	4b8a      	ldr	r3, [pc, #552]	@ (800bcfc <mix_sub_columns+0x288>)
 800bad2:	5c5b      	ldrb	r3, [r3, r1]
 800bad4:	4053      	eors	r3, r2
 800bad6:	b2d9      	uxtb	r1, r3
 800bad8:	7dfb      	ldrb	r3, [r7, #23]
 800bada:	461a      	mov	r2, r3
 800badc:	4b88      	ldr	r3, [pc, #544]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bade:	5c9a      	ldrb	r2, [r3, r2]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	3301      	adds	r3, #1
 800bae4:	404a      	eors	r2, r1
 800bae6:	b2d2      	uxtb	r2, r2
 800bae8:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800baea:	7a3b      	ldrb	r3, [r7, #8]
 800baec:	461a      	mov	r2, r3
 800baee:	4b84      	ldr	r3, [pc, #528]	@ (800bd00 <mix_sub_columns+0x28c>)
 800baf0:	5c9a      	ldrb	r2, [r3, r2]
 800baf2:	7b7b      	ldrb	r3, [r7, #13]
 800baf4:	4619      	mov	r1, r3
 800baf6:	4b82      	ldr	r3, [pc, #520]	@ (800bd00 <mix_sub_columns+0x28c>)
 800baf8:	5c5b      	ldrb	r3, [r3, r1]
 800bafa:	4053      	eors	r3, r2
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	7cbb      	ldrb	r3, [r7, #18]
 800bb00:	4619      	mov	r1, r3
 800bb02:	4b7d      	ldr	r3, [pc, #500]	@ (800bcf8 <mix_sub_columns+0x284>)
 800bb04:	5c5b      	ldrb	r3, [r3, r1]
 800bb06:	4053      	eors	r3, r2
 800bb08:	b2d9      	uxtb	r1, r3
 800bb0a:	7dfb      	ldrb	r3, [r7, #23]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	4b7b      	ldr	r3, [pc, #492]	@ (800bcfc <mix_sub_columns+0x288>)
 800bb10:	5c9a      	ldrb	r2, [r3, r2]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	3302      	adds	r3, #2
 800bb16:	404a      	eors	r2, r1
 800bb18:	b2d2      	uxtb	r2, r2
 800bb1a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800bb1c:	7a3b      	ldrb	r3, [r7, #8]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	4b76      	ldr	r3, [pc, #472]	@ (800bcfc <mix_sub_columns+0x288>)
 800bb22:	5c9a      	ldrb	r2, [r3, r2]
 800bb24:	7b7b      	ldrb	r3, [r7, #13]
 800bb26:	4619      	mov	r1, r3
 800bb28:	4b75      	ldr	r3, [pc, #468]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bb2a:	5c5b      	ldrb	r3, [r3, r1]
 800bb2c:	4053      	eors	r3, r2
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	7cbb      	ldrb	r3, [r7, #18]
 800bb32:	4619      	mov	r1, r3
 800bb34:	4b72      	ldr	r3, [pc, #456]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bb36:	5c5b      	ldrb	r3, [r3, r1]
 800bb38:	4053      	eors	r3, r2
 800bb3a:	b2d9      	uxtb	r1, r3
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	4b6d      	ldr	r3, [pc, #436]	@ (800bcf8 <mix_sub_columns+0x284>)
 800bb42:	5c9a      	ldrb	r2, [r3, r2]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3303      	adds	r3, #3
 800bb48:	404a      	eors	r2, r1
 800bb4a:	b2d2      	uxtb	r2, r2
 800bb4c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800bb4e:	7b3b      	ldrb	r3, [r7, #12]
 800bb50:	461a      	mov	r2, r3
 800bb52:	4b69      	ldr	r3, [pc, #420]	@ (800bcf8 <mix_sub_columns+0x284>)
 800bb54:	5c9a      	ldrb	r2, [r3, r2]
 800bb56:	7c7b      	ldrb	r3, [r7, #17]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	4b68      	ldr	r3, [pc, #416]	@ (800bcfc <mix_sub_columns+0x288>)
 800bb5c:	5c5b      	ldrb	r3, [r3, r1]
 800bb5e:	4053      	eors	r3, r2
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	7dbb      	ldrb	r3, [r7, #22]
 800bb64:	4619      	mov	r1, r3
 800bb66:	4b66      	ldr	r3, [pc, #408]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bb68:	5c5b      	ldrb	r3, [r3, r1]
 800bb6a:	4053      	eors	r3, r2
 800bb6c:	b2d9      	uxtb	r1, r3
 800bb6e:	7afb      	ldrb	r3, [r7, #11]
 800bb70:	461a      	mov	r2, r3
 800bb72:	4b63      	ldr	r3, [pc, #396]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bb74:	5c9a      	ldrb	r2, [r3, r2]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	3304      	adds	r3, #4
 800bb7a:	404a      	eors	r2, r1
 800bb7c:	b2d2      	uxtb	r2, r2
 800bb7e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800bb80:	7b3b      	ldrb	r3, [r7, #12]
 800bb82:	461a      	mov	r2, r3
 800bb84:	4b5e      	ldr	r3, [pc, #376]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bb86:	5c9a      	ldrb	r2, [r3, r2]
 800bb88:	7c7b      	ldrb	r3, [r7, #17]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	4b5a      	ldr	r3, [pc, #360]	@ (800bcf8 <mix_sub_columns+0x284>)
 800bb8e:	5c5b      	ldrb	r3, [r3, r1]
 800bb90:	4053      	eors	r3, r2
 800bb92:	b2da      	uxtb	r2, r3
 800bb94:	7dbb      	ldrb	r3, [r7, #22]
 800bb96:	4619      	mov	r1, r3
 800bb98:	4b58      	ldr	r3, [pc, #352]	@ (800bcfc <mix_sub_columns+0x288>)
 800bb9a:	5c5b      	ldrb	r3, [r3, r1]
 800bb9c:	4053      	eors	r3, r2
 800bb9e:	b2d9      	uxtb	r1, r3
 800bba0:	7afb      	ldrb	r3, [r7, #11]
 800bba2:	461a      	mov	r2, r3
 800bba4:	4b56      	ldr	r3, [pc, #344]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bba6:	5c9a      	ldrb	r2, [r3, r2]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	3305      	adds	r3, #5
 800bbac:	404a      	eors	r2, r1
 800bbae:	b2d2      	uxtb	r2, r2
 800bbb0:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800bbb2:	7b3b      	ldrb	r3, [r7, #12]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	4b52      	ldr	r3, [pc, #328]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bbb8:	5c9a      	ldrb	r2, [r3, r2]
 800bbba:	7c7b      	ldrb	r3, [r7, #17]
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4b50      	ldr	r3, [pc, #320]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bbc0:	5c5b      	ldrb	r3, [r3, r1]
 800bbc2:	4053      	eors	r3, r2
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	7dbb      	ldrb	r3, [r7, #22]
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4b4b      	ldr	r3, [pc, #300]	@ (800bcf8 <mix_sub_columns+0x284>)
 800bbcc:	5c5b      	ldrb	r3, [r3, r1]
 800bbce:	4053      	eors	r3, r2
 800bbd0:	b2d9      	uxtb	r1, r3
 800bbd2:	7afb      	ldrb	r3, [r7, #11]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	4b49      	ldr	r3, [pc, #292]	@ (800bcfc <mix_sub_columns+0x288>)
 800bbd8:	5c9a      	ldrb	r2, [r3, r2]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	3306      	adds	r3, #6
 800bbde:	404a      	eors	r2, r1
 800bbe0:	b2d2      	uxtb	r2, r2
 800bbe2:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800bbe4:	7b3b      	ldrb	r3, [r7, #12]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	4b44      	ldr	r3, [pc, #272]	@ (800bcfc <mix_sub_columns+0x288>)
 800bbea:	5c9a      	ldrb	r2, [r3, r2]
 800bbec:	7c7b      	ldrb	r3, [r7, #17]
 800bbee:	4619      	mov	r1, r3
 800bbf0:	4b43      	ldr	r3, [pc, #268]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bbf2:	5c5b      	ldrb	r3, [r3, r1]
 800bbf4:	4053      	eors	r3, r2
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	7dbb      	ldrb	r3, [r7, #22]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	4b40      	ldr	r3, [pc, #256]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bbfe:	5c5b      	ldrb	r3, [r3, r1]
 800bc00:	4053      	eors	r3, r2
 800bc02:	b2d9      	uxtb	r1, r3
 800bc04:	7afb      	ldrb	r3, [r7, #11]
 800bc06:	461a      	mov	r2, r3
 800bc08:	4b3b      	ldr	r3, [pc, #236]	@ (800bcf8 <mix_sub_columns+0x284>)
 800bc0a:	5c9a      	ldrb	r2, [r3, r2]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	3307      	adds	r3, #7
 800bc10:	404a      	eors	r2, r1
 800bc12:	b2d2      	uxtb	r2, r2
 800bc14:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800bc16:	7c3b      	ldrb	r3, [r7, #16]
 800bc18:	461a      	mov	r2, r3
 800bc1a:	4b37      	ldr	r3, [pc, #220]	@ (800bcf8 <mix_sub_columns+0x284>)
 800bc1c:	5c9a      	ldrb	r2, [r3, r2]
 800bc1e:	7d7b      	ldrb	r3, [r7, #21]
 800bc20:	4619      	mov	r1, r3
 800bc22:	4b36      	ldr	r3, [pc, #216]	@ (800bcfc <mix_sub_columns+0x288>)
 800bc24:	5c5b      	ldrb	r3, [r3, r1]
 800bc26:	4053      	eors	r3, r2
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	7abb      	ldrb	r3, [r7, #10]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4b34      	ldr	r3, [pc, #208]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bc30:	5c5b      	ldrb	r3, [r3, r1]
 800bc32:	4053      	eors	r3, r2
 800bc34:	b2d9      	uxtb	r1, r3
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	4b31      	ldr	r3, [pc, #196]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bc3c:	5c9a      	ldrb	r2, [r3, r2]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	3308      	adds	r3, #8
 800bc42:	404a      	eors	r2, r1
 800bc44:	b2d2      	uxtb	r2, r2
 800bc46:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800bc48:	7c3b      	ldrb	r3, [r7, #16]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	4b2c      	ldr	r3, [pc, #176]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bc4e:	5c9a      	ldrb	r2, [r3, r2]
 800bc50:	7d7b      	ldrb	r3, [r7, #21]
 800bc52:	4619      	mov	r1, r3
 800bc54:	4b28      	ldr	r3, [pc, #160]	@ (800bcf8 <mix_sub_columns+0x284>)
 800bc56:	5c5b      	ldrb	r3, [r3, r1]
 800bc58:	4053      	eors	r3, r2
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	7abb      	ldrb	r3, [r7, #10]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	4b26      	ldr	r3, [pc, #152]	@ (800bcfc <mix_sub_columns+0x288>)
 800bc62:	5c5b      	ldrb	r3, [r3, r1]
 800bc64:	4053      	eors	r3, r2
 800bc66:	b2d9      	uxtb	r1, r3
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	4b24      	ldr	r3, [pc, #144]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bc6e:	5c9a      	ldrb	r2, [r3, r2]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	3309      	adds	r3, #9
 800bc74:	404a      	eors	r2, r1
 800bc76:	b2d2      	uxtb	r2, r2
 800bc78:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800bc7a:	7c3b      	ldrb	r3, [r7, #16]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	4b20      	ldr	r3, [pc, #128]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bc80:	5c9a      	ldrb	r2, [r3, r2]
 800bc82:	7d7b      	ldrb	r3, [r7, #21]
 800bc84:	4619      	mov	r1, r3
 800bc86:	4b1e      	ldr	r3, [pc, #120]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bc88:	5c5b      	ldrb	r3, [r3, r1]
 800bc8a:	4053      	eors	r3, r2
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	7abb      	ldrb	r3, [r7, #10]
 800bc90:	4619      	mov	r1, r3
 800bc92:	4b19      	ldr	r3, [pc, #100]	@ (800bcf8 <mix_sub_columns+0x284>)
 800bc94:	5c5b      	ldrb	r3, [r3, r1]
 800bc96:	4053      	eors	r3, r2
 800bc98:	b2d9      	uxtb	r1, r3
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	4b17      	ldr	r3, [pc, #92]	@ (800bcfc <mix_sub_columns+0x288>)
 800bca0:	5c9a      	ldrb	r2, [r3, r2]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	330a      	adds	r3, #10
 800bca6:	404a      	eors	r2, r1
 800bca8:	b2d2      	uxtb	r2, r2
 800bcaa:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800bcac:	7c3b      	ldrb	r3, [r7, #16]
 800bcae:	461a      	mov	r2, r3
 800bcb0:	4b12      	ldr	r3, [pc, #72]	@ (800bcfc <mix_sub_columns+0x288>)
 800bcb2:	5c9a      	ldrb	r2, [r3, r2]
 800bcb4:	7d7b      	ldrb	r3, [r7, #21]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	4b11      	ldr	r3, [pc, #68]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bcba:	5c5b      	ldrb	r3, [r3, r1]
 800bcbc:	4053      	eors	r3, r2
 800bcbe:	b2da      	uxtb	r2, r3
 800bcc0:	7abb      	ldrb	r3, [r7, #10]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	4b0e      	ldr	r3, [pc, #56]	@ (800bd00 <mix_sub_columns+0x28c>)
 800bcc6:	5c5b      	ldrb	r3, [r3, r1]
 800bcc8:	4053      	eors	r3, r2
 800bcca:	b2d9      	uxtb	r1, r3
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	4b09      	ldr	r3, [pc, #36]	@ (800bcf8 <mix_sub_columns+0x284>)
 800bcd2:	5c9a      	ldrb	r2, [r3, r2]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	330b      	adds	r3, #11
 800bcd8:	404a      	eors	r2, r1
 800bcda:	b2d2      	uxtb	r2, r2
 800bcdc:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800bcde:	7d3b      	ldrb	r3, [r7, #20]
 800bce0:	461a      	mov	r2, r3
 800bce2:	4b05      	ldr	r3, [pc, #20]	@ (800bcf8 <mix_sub_columns+0x284>)
 800bce4:	5c9a      	ldrb	r2, [r3, r2]
 800bce6:	7a7b      	ldrb	r3, [r7, #9]
 800bce8:	4619      	mov	r1, r3
 800bcea:	4b04      	ldr	r3, [pc, #16]	@ (800bcfc <mix_sub_columns+0x288>)
 800bcec:	5c5b      	ldrb	r3, [r3, r1]
 800bcee:	4053      	eors	r3, r2
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	7bbb      	ldrb	r3, [r7, #14]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	e005      	b.n	800bd04 <mix_sub_columns+0x290>
 800bcf8:	0801d240 	.word	0x0801d240
 800bcfc:	0801d340 	.word	0x0801d340
 800bd00:	0801d140 	.word	0x0801d140
 800bd04:	4b2d      	ldr	r3, [pc, #180]	@ (800bdbc <mix_sub_columns+0x348>)
 800bd06:	5c5b      	ldrb	r3, [r3, r1]
 800bd08:	4053      	eors	r3, r2
 800bd0a:	b2d9      	uxtb	r1, r3
 800bd0c:	7cfb      	ldrb	r3, [r7, #19]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	4b2a      	ldr	r3, [pc, #168]	@ (800bdbc <mix_sub_columns+0x348>)
 800bd12:	5c9a      	ldrb	r2, [r3, r2]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	330c      	adds	r3, #12
 800bd18:	404a      	eors	r2, r1
 800bd1a:	b2d2      	uxtb	r2, r2
 800bd1c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800bd1e:	7d3b      	ldrb	r3, [r7, #20]
 800bd20:	461a      	mov	r2, r3
 800bd22:	4b26      	ldr	r3, [pc, #152]	@ (800bdbc <mix_sub_columns+0x348>)
 800bd24:	5c9a      	ldrb	r2, [r3, r2]
 800bd26:	7a7b      	ldrb	r3, [r7, #9]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4b25      	ldr	r3, [pc, #148]	@ (800bdc0 <mix_sub_columns+0x34c>)
 800bd2c:	5c5b      	ldrb	r3, [r3, r1]
 800bd2e:	4053      	eors	r3, r2
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	7bbb      	ldrb	r3, [r7, #14]
 800bd34:	4619      	mov	r1, r3
 800bd36:	4b23      	ldr	r3, [pc, #140]	@ (800bdc4 <mix_sub_columns+0x350>)
 800bd38:	5c5b      	ldrb	r3, [r3, r1]
 800bd3a:	4053      	eors	r3, r2
 800bd3c:	b2d9      	uxtb	r1, r3
 800bd3e:	7cfb      	ldrb	r3, [r7, #19]
 800bd40:	461a      	mov	r2, r3
 800bd42:	4b1e      	ldr	r3, [pc, #120]	@ (800bdbc <mix_sub_columns+0x348>)
 800bd44:	5c9a      	ldrb	r2, [r3, r2]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	330d      	adds	r3, #13
 800bd4a:	404a      	eors	r2, r1
 800bd4c:	b2d2      	uxtb	r2, r2
 800bd4e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800bd50:	7d3b      	ldrb	r3, [r7, #20]
 800bd52:	461a      	mov	r2, r3
 800bd54:	4b19      	ldr	r3, [pc, #100]	@ (800bdbc <mix_sub_columns+0x348>)
 800bd56:	5c9a      	ldrb	r2, [r3, r2]
 800bd58:	7a7b      	ldrb	r3, [r7, #9]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	4b17      	ldr	r3, [pc, #92]	@ (800bdbc <mix_sub_columns+0x348>)
 800bd5e:	5c5b      	ldrb	r3, [r3, r1]
 800bd60:	4053      	eors	r3, r2
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	7bbb      	ldrb	r3, [r7, #14]
 800bd66:	4619      	mov	r1, r3
 800bd68:	4b15      	ldr	r3, [pc, #84]	@ (800bdc0 <mix_sub_columns+0x34c>)
 800bd6a:	5c5b      	ldrb	r3, [r3, r1]
 800bd6c:	4053      	eors	r3, r2
 800bd6e:	b2d9      	uxtb	r1, r3
 800bd70:	7cfb      	ldrb	r3, [r7, #19]
 800bd72:	461a      	mov	r2, r3
 800bd74:	4b13      	ldr	r3, [pc, #76]	@ (800bdc4 <mix_sub_columns+0x350>)
 800bd76:	5c9a      	ldrb	r2, [r3, r2]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	330e      	adds	r3, #14
 800bd7c:	404a      	eors	r2, r1
 800bd7e:	b2d2      	uxtb	r2, r2
 800bd80:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800bd82:	7d3b      	ldrb	r3, [r7, #20]
 800bd84:	461a      	mov	r2, r3
 800bd86:	4b0f      	ldr	r3, [pc, #60]	@ (800bdc4 <mix_sub_columns+0x350>)
 800bd88:	5c9a      	ldrb	r2, [r3, r2]
 800bd8a:	7a7b      	ldrb	r3, [r7, #9]
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bdbc <mix_sub_columns+0x348>)
 800bd90:	5c5b      	ldrb	r3, [r3, r1]
 800bd92:	4053      	eors	r3, r2
 800bd94:	b2da      	uxtb	r2, r3
 800bd96:	7bbb      	ldrb	r3, [r7, #14]
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4b08      	ldr	r3, [pc, #32]	@ (800bdbc <mix_sub_columns+0x348>)
 800bd9c:	5c5b      	ldrb	r3, [r3, r1]
 800bd9e:	4053      	eors	r3, r2
 800bda0:	b2d9      	uxtb	r1, r3
 800bda2:	7cfb      	ldrb	r3, [r7, #19]
 800bda4:	461a      	mov	r2, r3
 800bda6:	4b06      	ldr	r3, [pc, #24]	@ (800bdc0 <mix_sub_columns+0x34c>)
 800bda8:	5c9a      	ldrb	r2, [r3, r2]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	330f      	adds	r3, #15
 800bdae:	404a      	eors	r2, r1
 800bdb0:	b2d2      	uxtb	r2, r2
 800bdb2:	701a      	strb	r2, [r3, #0]
  }
 800bdb4:	bf00      	nop
 800bdb6:	3718      	adds	r7, #24
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	0801d140 	.word	0x0801d140
 800bdc0:	0801d240 	.word	0x0801d240
 800bdc4:	0801d340 	.word	0x0801d340

0800bdc8 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	607a      	str	r2, [r7, #4]
 800bdd4:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800bdd6:	7afb      	ldrb	r3, [r7, #11]
 800bdd8:	3b10      	subs	r3, #16
 800bdda:	2b10      	cmp	r3, #16
 800bddc:	bf8c      	ite	hi
 800bdde:	2201      	movhi	r2, #1
 800bde0:	2200      	movls	r2, #0
 800bde2:	b2d2      	uxtb	r2, r2
 800bde4:	2a00      	cmp	r2, #0
 800bde6:	d10b      	bne.n	800be00 <lorawan_aes_set_key+0x38>
 800bde8:	4a64      	ldr	r2, [pc, #400]	@ (800bf7c <lorawan_aes_set_key+0x1b4>)
 800bdea:	fa22 f303 	lsr.w	r3, r2, r3
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	bf14      	ite	ne
 800bdf6:	2301      	movne	r3, #1
 800bdf8:	2300      	moveq	r3, #0
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d105      	bne.n	800be0c <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800be08:	23ff      	movs	r3, #255	@ 0xff
 800be0a:	e0b3      	b.n	800bf74 <lorawan_aes_set_key+0x1ac>
        break;
 800be0c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	7afa      	ldrb	r2, [r7, #11]
 800be12:	68f9      	ldr	r1, [r7, #12]
 800be14:	4618      	mov	r0, r3
 800be16:	f7ff fbfc 	bl	800b612 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800be1a:	7afb      	ldrb	r3, [r7, #11]
 800be1c:	331c      	adds	r3, #28
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800be24:	7c7b      	ldrb	r3, [r7, #17]
 800be26:	091b      	lsrs	r3, r3, #4
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	3b01      	subs	r3, #1
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800be34:	7afb      	ldrb	r3, [r7, #11]
 800be36:	75fb      	strb	r3, [r7, #23]
 800be38:	2301      	movs	r3, #1
 800be3a:	75bb      	strb	r3, [r7, #22]
 800be3c:	e094      	b.n	800bf68 <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800be3e:	7dfb      	ldrb	r3, [r7, #23]
 800be40:	3b04      	subs	r3, #4
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	5cd3      	ldrb	r3, [r2, r3]
 800be46:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800be48:	7dfb      	ldrb	r3, [r7, #23]
 800be4a:	3b03      	subs	r3, #3
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	5cd3      	ldrb	r3, [r2, r3]
 800be50:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800be52:	7dfb      	ldrb	r3, [r7, #23]
 800be54:	3b02      	subs	r3, #2
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	5cd3      	ldrb	r3, [r2, r3]
 800be5a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800be5c:	7dfb      	ldrb	r3, [r7, #23]
 800be5e:	3b01      	subs	r3, #1
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	5cd3      	ldrb	r3, [r2, r3]
 800be64:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800be66:	7dfb      	ldrb	r3, [r7, #23]
 800be68:	7afa      	ldrb	r2, [r7, #11]
 800be6a:	fbb3 f1f2 	udiv	r1, r3, r2
 800be6e:	fb01 f202 	mul.w	r2, r1, r2
 800be72:	1a9b      	subs	r3, r3, r2
 800be74:	b2db      	uxtb	r3, r3
 800be76:	2b00      	cmp	r3, #0
 800be78:	d128      	bne.n	800becc <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 800be7a:	7d7b      	ldrb	r3, [r7, #21]
 800be7c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800be7e:	7d3b      	ldrb	r3, [r7, #20]
 800be80:	4a3f      	ldr	r2, [pc, #252]	@ (800bf80 <lorawan_aes_set_key+0x1b8>)
 800be82:	5cd2      	ldrb	r2, [r2, r3]
 800be84:	7dbb      	ldrb	r3, [r7, #22]
 800be86:	4053      	eors	r3, r2
 800be88:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800be8a:	7cfb      	ldrb	r3, [r7, #19]
 800be8c:	4a3c      	ldr	r2, [pc, #240]	@ (800bf80 <lorawan_aes_set_key+0x1b8>)
 800be8e:	5cd3      	ldrb	r3, [r2, r3]
 800be90:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800be92:	7cbb      	ldrb	r3, [r7, #18]
 800be94:	4a3a      	ldr	r2, [pc, #232]	@ (800bf80 <lorawan_aes_set_key+0x1b8>)
 800be96:	5cd3      	ldrb	r3, [r2, r3]
 800be98:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800be9a:	7c3b      	ldrb	r3, [r7, #16]
 800be9c:	4a38      	ldr	r2, [pc, #224]	@ (800bf80 <lorawan_aes_set_key+0x1b8>)
 800be9e:	5cd3      	ldrb	r3, [r2, r3]
 800bea0:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800bea2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800bea6:	005b      	lsls	r3, r3, #1
 800bea8:	b25a      	sxtb	r2, r3
 800beaa:	7dbb      	ldrb	r3, [r7, #22]
 800beac:	09db      	lsrs	r3, r3, #7
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	b25b      	sxtb	r3, r3
 800beb2:	4619      	mov	r1, r3
 800beb4:	0049      	lsls	r1, r1, #1
 800beb6:	440b      	add	r3, r1
 800beb8:	4619      	mov	r1, r3
 800beba:	00c8      	lsls	r0, r1, #3
 800bebc:	4619      	mov	r1, r3
 800bebe:	4603      	mov	r3, r0
 800bec0:	440b      	add	r3, r1
 800bec2:	b25b      	sxtb	r3, r3
 800bec4:	4053      	eors	r3, r2
 800bec6:	b25b      	sxtb	r3, r3
 800bec8:	75bb      	strb	r3, [r7, #22]
 800beca:	e01c      	b.n	800bf06 <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800becc:	7afb      	ldrb	r3, [r7, #11]
 800bece:	2b18      	cmp	r3, #24
 800bed0:	d919      	bls.n	800bf06 <lorawan_aes_set_key+0x13e>
 800bed2:	7dfb      	ldrb	r3, [r7, #23]
 800bed4:	7afa      	ldrb	r2, [r7, #11]
 800bed6:	fbb3 f1f2 	udiv	r1, r3, r2
 800beda:	fb01 f202 	mul.w	r2, r1, r2
 800bede:	1a9b      	subs	r3, r3, r2
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b10      	cmp	r3, #16
 800bee4:	d10f      	bne.n	800bf06 <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 800bee6:	7d7b      	ldrb	r3, [r7, #21]
 800bee8:	4a25      	ldr	r2, [pc, #148]	@ (800bf80 <lorawan_aes_set_key+0x1b8>)
 800beea:	5cd3      	ldrb	r3, [r2, r3]
 800beec:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800beee:	7d3b      	ldrb	r3, [r7, #20]
 800bef0:	4a23      	ldr	r2, [pc, #140]	@ (800bf80 <lorawan_aes_set_key+0x1b8>)
 800bef2:	5cd3      	ldrb	r3, [r2, r3]
 800bef4:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800bef6:	7cfb      	ldrb	r3, [r7, #19]
 800bef8:	4a21      	ldr	r2, [pc, #132]	@ (800bf80 <lorawan_aes_set_key+0x1b8>)
 800befa:	5cd3      	ldrb	r3, [r2, r3]
 800befc:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800befe:	7cbb      	ldrb	r3, [r7, #18]
 800bf00:	4a1f      	ldr	r2, [pc, #124]	@ (800bf80 <lorawan_aes_set_key+0x1b8>)
 800bf02:	5cd3      	ldrb	r3, [r2, r3]
 800bf04:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800bf06:	7dfa      	ldrb	r2, [r7, #23]
 800bf08:	7afb      	ldrb	r3, [r7, #11]
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800bf0e:	7c3b      	ldrb	r3, [r7, #16]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	5cd1      	ldrb	r1, [r2, r3]
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
 800bf16:	7d7a      	ldrb	r2, [r7, #21]
 800bf18:	404a      	eors	r2, r1
 800bf1a:	b2d1      	uxtb	r1, r2
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800bf20:	7c3b      	ldrb	r3, [r7, #16]
 800bf22:	3301      	adds	r3, #1
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	5cd1      	ldrb	r1, [r2, r3]
 800bf28:	7dfb      	ldrb	r3, [r7, #23]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	7d3a      	ldrb	r2, [r7, #20]
 800bf2e:	404a      	eors	r2, r1
 800bf30:	b2d1      	uxtb	r1, r2
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800bf36:	7c3b      	ldrb	r3, [r7, #16]
 800bf38:	3302      	adds	r3, #2
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	5cd1      	ldrb	r1, [r2, r3]
 800bf3e:	7dfb      	ldrb	r3, [r7, #23]
 800bf40:	3302      	adds	r3, #2
 800bf42:	7cfa      	ldrb	r2, [r7, #19]
 800bf44:	404a      	eors	r2, r1
 800bf46:	b2d1      	uxtb	r1, r2
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bf4c:	7c3b      	ldrb	r3, [r7, #16]
 800bf4e:	3303      	adds	r3, #3
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	5cd1      	ldrb	r1, [r2, r3]
 800bf54:	7dfb      	ldrb	r3, [r7, #23]
 800bf56:	3303      	adds	r3, #3
 800bf58:	7cba      	ldrb	r2, [r7, #18]
 800bf5a:	404a      	eors	r2, r1
 800bf5c:	b2d1      	uxtb	r1, r2
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bf62:	7dfb      	ldrb	r3, [r7, #23]
 800bf64:	3304      	adds	r3, #4
 800bf66:	75fb      	strb	r3, [r7, #23]
 800bf68:	7dfa      	ldrb	r2, [r7, #23]
 800bf6a:	7c7b      	ldrb	r3, [r7, #17]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	f4ff af66 	bcc.w	800be3e <lorawan_aes_set_key+0x76>
    }
    return 0;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	00010101 	.word	0x00010101
 800bf80:	0801d140 	.word	0x0801d140

0800bf84 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08a      	sub	sp, #40	@ 0x28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d038      	beq.n	800c00c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	f107 0314 	add.w	r3, r7, #20
 800bfa0:	68f9      	ldr	r1, [r7, #12]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7ff fc07 	bl	800b7b6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bfae:	e014      	b.n	800bfda <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bfb0:	f107 0314 	add.w	r3, r7, #20
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7ff fd5d 	bl	800ba74 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bfc0:	0112      	lsls	r2, r2, #4
 800bfc2:	441a      	add	r2, r3
 800bfc4:	f107 0314 	add.w	r3, r7, #20
 800bfc8:	4611      	mov	r1, r2
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7ff fcab 	bl	800b926 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bfd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bfe0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d3e3      	bcc.n	800bfb0 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bfe8:	f107 0314 	add.w	r3, r7, #20
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7ff fca7 	bl	800b940 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bff8:	0112      	lsls	r2, r2, #4
 800bffa:	441a      	add	r2, r3
 800bffc:	f107 0314 	add.w	r3, r7, #20
 800c000:	4619      	mov	r1, r3
 800c002:	68b8      	ldr	r0, [r7, #8]
 800c004:	f7ff fbd7 	bl	800b7b6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800c008:	2300      	movs	r3, #0
 800c00a:	e000      	b.n	800c00e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800c00c:	23ff      	movs	r3, #255	@ 0xff
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3728      	adds	r7, #40	@ 0x28
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
	...

0800c018 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800c018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c01a:	b0a1      	sub	sp, #132	@ 0x84
 800c01c:	af12      	add	r7, sp, #72	@ 0x48
 800c01e:	4603      	mov	r3, r0
 800c020:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800c024:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800c028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c02c:	4611      	mov	r1, r2
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 fa12 	bl	800c458 <SecureElementGetKeyByID>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d174      	bne.n	800c124 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c03a:	2300      	movs	r3, #0
 800c03c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c040:	e06c      	b.n	800c11c <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800c042:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800c046:	4939      	ldr	r1, [pc, #228]	@ (800c12c <PrintKey+0x114>)
 800c048:	4613      	mov	r3, r2
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	4413      	add	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	440b      	add	r3, r1
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c058:	429a      	cmp	r2, r3
 800c05a:	d15a      	bne.n	800c112 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800c05c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800c060:	4932      	ldr	r1, [pc, #200]	@ (800c12c <PrintKey+0x114>)
 800c062:	4613      	mov	r3, r2
 800c064:	005b      	lsls	r3, r3, #1
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	440b      	add	r3, r1
 800c06c:	3308      	adds	r3, #8
 800c06e:	6819      	ldr	r1, [r3, #0]
 800c070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c072:	785b      	ldrb	r3, [r3, #1]
 800c074:	461d      	mov	r5, r3
 800c076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c078:	789b      	ldrb	r3, [r3, #2]
 800c07a:	461e      	mov	r6, r3
 800c07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07e:	78db      	ldrb	r3, [r3, #3]
 800c080:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c084:	791b      	ldrb	r3, [r3, #4]
 800c086:	627b      	str	r3, [r7, #36]	@ 0x24
 800c088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08a:	795b      	ldrb	r3, [r3, #5]
 800c08c:	623b      	str	r3, [r7, #32]
 800c08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c090:	799b      	ldrb	r3, [r3, #6]
 800c092:	61fb      	str	r3, [r7, #28]
 800c094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c096:	79db      	ldrb	r3, [r3, #7]
 800c098:	61bb      	str	r3, [r7, #24]
 800c09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09c:	7a1b      	ldrb	r3, [r3, #8]
 800c09e:	617b      	str	r3, [r7, #20]
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a2:	7a5b      	ldrb	r3, [r3, #9]
 800c0a4:	613b      	str	r3, [r7, #16]
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a8:	7a9b      	ldrb	r3, [r3, #10]
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ae:	7adb      	ldrb	r3, [r3, #11]
 800c0b0:	60bb      	str	r3, [r7, #8]
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b4:	7b1b      	ldrb	r3, [r3, #12]
 800c0b6:	607b      	str	r3, [r7, #4]
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ba:	7b5b      	ldrb	r3, [r3, #13]
 800c0bc:	461c      	mov	r4, r3
 800c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c0:	7b9b      	ldrb	r3, [r3, #14]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c6:	7bdb      	ldrb	r3, [r3, #15]
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0cc:	7c1b      	ldrb	r3, [r3, #16]
 800c0ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800c0d0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c0d2:	900e      	str	r0, [sp, #56]	@ 0x38
 800c0d4:	940d      	str	r4, [sp, #52]	@ 0x34
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	920c      	str	r2, [sp, #48]	@ 0x30
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	920a      	str	r2, [sp, #40]	@ 0x28
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	9208      	str	r2, [sp, #32]
 800c0ea:	69ba      	ldr	r2, [r7, #24]
 800c0ec:	9207      	str	r2, [sp, #28]
 800c0ee:	69fa      	ldr	r2, [r7, #28]
 800c0f0:	9206      	str	r2, [sp, #24]
 800c0f2:	6a3a      	ldr	r2, [r7, #32]
 800c0f4:	9205      	str	r2, [sp, #20]
 800c0f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0f8:	9204      	str	r2, [sp, #16]
 800c0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fc:	9303      	str	r3, [sp, #12]
 800c0fe:	9602      	str	r6, [sp, #8]
 800c100:	9501      	str	r5, [sp, #4]
 800c102:	9100      	str	r1, [sp, #0]
 800c104:	4b0a      	ldr	r3, [pc, #40]	@ (800c130 <PrintKey+0x118>)
 800c106:	2200      	movs	r2, #0
 800c108:	2100      	movs	r1, #0
 800c10a:	2002      	movs	r0, #2
 800c10c:	f00f ffde 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
 800c110:	e008      	b.n	800c124 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c112:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c116:	3301      	adds	r3, #1
 800c118:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c11c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c120:	2b0a      	cmp	r3, #10
 800c122:	d98e      	bls.n	800c042 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800c124:	373c      	adds	r7, #60	@ 0x3c
 800c126:	46bd      	mov	sp, r7
 800c128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c12a:	bf00      	nop
 800c12c:	0801d440 	.word	0x0801d440
 800c130:	0801ccc0 	.word	0x0801ccc0

0800c134 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800c134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c136:	b091      	sub	sp, #68	@ 0x44
 800c138:	af08      	add	r7, sp, #32
 800c13a:	4603      	mov	r3, r0
 800c13c:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800c13e:	2300      	movs	r3, #0
 800c140:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800c142:	f107 0310 	add.w	r3, r7, #16
 800c146:	4618      	mov	r0, r3
 800c148:	f000 fbd8 	bl	800c8fc <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800c14c:	7c3b      	ldrb	r3, [r7, #16]
 800c14e:	7c7a      	ldrb	r2, [r7, #17]
 800c150:	7cb9      	ldrb	r1, [r7, #18]
 800c152:	7cf8      	ldrb	r0, [r7, #19]
 800c154:	7d3c      	ldrb	r4, [r7, #20]
 800c156:	7d7d      	ldrb	r5, [r7, #21]
 800c158:	7dbe      	ldrb	r6, [r7, #22]
 800c15a:	f897 c017 	ldrb.w	ip, [r7, #23]
 800c15e:	f8cd c01c 	str.w	ip, [sp, #28]
 800c162:	9606      	str	r6, [sp, #24]
 800c164:	9505      	str	r5, [sp, #20]
 800c166:	9404      	str	r4, [sp, #16]
 800c168:	9003      	str	r0, [sp, #12]
 800c16a:	9102      	str	r1, [sp, #8]
 800c16c:	9201      	str	r2, [sp, #4]
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	4b24      	ldr	r3, [pc, #144]	@ (800c204 <PrintIds+0xd0>)
 800c172:	2200      	movs	r2, #0
 800c174:	2100      	movs	r1, #0
 800c176:	2002      	movs	r0, #2
 800c178:	f00f ffa8 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800c17c:	f107 0318 	add.w	r3, r7, #24
 800c180:	4618      	mov	r0, r3
 800c182:	f000 fbeb 	bl	800c95c <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800c186:	7e3b      	ldrb	r3, [r7, #24]
 800c188:	7e7a      	ldrb	r2, [r7, #25]
 800c18a:	7eb9      	ldrb	r1, [r7, #26]
 800c18c:	7ef8      	ldrb	r0, [r7, #27]
 800c18e:	7f3c      	ldrb	r4, [r7, #28]
 800c190:	7f7d      	ldrb	r5, [r7, #29]
 800c192:	7fbe      	ldrb	r6, [r7, #30]
 800c194:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800c198:	f8cd c01c 	str.w	ip, [sp, #28]
 800c19c:	9606      	str	r6, [sp, #24]
 800c19e:	9505      	str	r5, [sp, #20]
 800c1a0:	9404      	str	r4, [sp, #16]
 800c1a2:	9003      	str	r0, [sp, #12]
 800c1a4:	9102      	str	r1, [sp, #8]
 800c1a6:	9201      	str	r2, [sp, #4]
 800c1a8:	9300      	str	r3, [sp, #0]
 800c1aa:	4b17      	ldr	r3, [pc, #92]	@ (800c208 <PrintIds+0xd4>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	2002      	movs	r0, #2
 800c1b2:	f00f ff8b 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800c1b6:	f107 020c 	add.w	r2, r7, #12
 800c1ba:	79fb      	ldrb	r3, [r7, #7]
 800c1bc:	4611      	mov	r1, r2
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 fbfe 	bl	800c9c0 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c1c4:	f107 030c 	add.w	r3, r7, #12
 800c1c8:	3303      	adds	r3, #3
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	f107 030c 	add.w	r3, r7, #12
 800c1d2:	3302      	adds	r3, #2
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	f107 030c 	add.w	r3, r7, #12
 800c1dc:	3301      	adds	r3, #1
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f107 030c 	add.w	r3, r7, #12
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	9303      	str	r3, [sp, #12]
 800c1ea:	9002      	str	r0, [sp, #8]
 800c1ec:	9101      	str	r1, [sp, #4]
 800c1ee:	9200      	str	r2, [sp, #0]
 800c1f0:	4b06      	ldr	r3, [pc, #24]	@ (800c20c <PrintIds+0xd8>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	2002      	movs	r0, #2
 800c1f8:	f00f ff68 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800c1fc:	bf00      	nop
 800c1fe:	3724      	adds	r7, #36	@ 0x24
 800c200:	46bd      	mov	sp, r7
 800c202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c204:	0801cd1c 	.word	0x0801cd1c
 800c208:	0801cd5c 	.word	0x0801cd5c
 800c20c:	0801cd9c 	.word	0x0801cd9c

0800c210 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	6039      	str	r1, [r7, #0]
 800c21a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c21c:	2300      	movs	r3, #0
 800c21e:	73fb      	strb	r3, [r7, #15]
 800c220:	e01a      	b.n	800c258 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c222:	4b12      	ldr	r3, [pc, #72]	@ (800c26c <GetKeyByID+0x5c>)
 800c224:	6819      	ldr	r1, [r3, #0]
 800c226:	7bfa      	ldrb	r2, [r7, #15]
 800c228:	4613      	mov	r3, r2
 800c22a:	011b      	lsls	r3, r3, #4
 800c22c:	4413      	add	r3, r2
 800c22e:	440b      	add	r3, r1
 800c230:	3318      	adds	r3, #24
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	79fa      	ldrb	r2, [r7, #7]
 800c236:	429a      	cmp	r2, r3
 800c238:	d10b      	bne.n	800c252 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c23a:	4b0c      	ldr	r3, [pc, #48]	@ (800c26c <GetKeyByID+0x5c>)
 800c23c:	6819      	ldr	r1, [r3, #0]
 800c23e:	7bfa      	ldrb	r2, [r7, #15]
 800c240:	4613      	mov	r3, r2
 800c242:	011b      	lsls	r3, r3, #4
 800c244:	4413      	add	r3, r2
 800c246:	3318      	adds	r3, #24
 800c248:	18ca      	adds	r2, r1, r3
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c24e:	2300      	movs	r3, #0
 800c250:	e006      	b.n	800c260 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c252:	7bfb      	ldrb	r3, [r7, #15]
 800c254:	3301      	adds	r3, #1
 800c256:	73fb      	strb	r3, [r7, #15]
 800c258:	7bfb      	ldrb	r3, [r7, #15]
 800c25a:	2b0a      	cmp	r3, #10
 800c25c:	d9e1      	bls.n	800c222 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c25e:	2303      	movs	r3, #3
}
 800c260:	4618      	mov	r0, r3
 800c262:	3714      	adds	r7, #20
 800c264:	46bd      	mov	sp, r7
 800c266:	bc80      	pop	{r7}
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	200005f8 	.word	0x200005f8

0800c270 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800c270:	b590      	push	{r4, r7, lr}
 800c272:	b0d1      	sub	sp, #324	@ 0x144
 800c274:	af00      	add	r7, sp, #0
 800c276:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800c27a:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800c27e:	6020      	str	r0, [r4, #0]
 800c280:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800c284:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800c288:	6001      	str	r1, [r0, #0]
 800c28a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800c28e:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800c292:	600a      	str	r2, [r1, #0]
 800c294:	461a      	mov	r2, r3
 800c296:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c29a:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800c29e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800c2a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c2a4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <ComputeCmac+0x46>
 800c2ae:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d101      	bne.n	800c2ba <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c2b6:	2302      	movs	r3, #2
 800c2b8:	e05d      	b.n	800c376 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800c2ba:	f107 0314 	add.w	r3, r7, #20
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fe fefe 	bl	800b0c0 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800c2c4:	f107 0210 	add.w	r2, r7, #16
 800c2c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c2cc:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	4611      	mov	r1, r2
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff ff9b 	bl	800c210 <GetKeyByID>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c2e0:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d144      	bne.n	800c372 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800c2e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c2ec:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	1c5a      	adds	r2, r3, #1
 800c2f4:	f107 0314 	add.w	r3, r7, #20
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fe fef9 	bl	800b0f2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800c300:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c304:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d009      	beq.n	800c322 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800c30e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c312:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c316:	f107 0014 	add.w	r0, r7, #20
 800c31a:	2210      	movs	r2, #16
 800c31c:	6819      	ldr	r1, [r3, #0]
 800c31e:	f7fe fef7 	bl	800b110 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800c322:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c326:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800c32a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c32e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c332:	f107 0014 	add.w	r0, r7, #20
 800c336:	6812      	ldr	r2, [r2, #0]
 800c338:	6819      	ldr	r1, [r3, #0]
 800c33a:	f7fe fee9 	bl	800b110 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800c33e:	f107 0214 	add.w	r2, r7, #20
 800c342:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800c346:	4611      	mov	r1, r2
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fe ffa3 	bl	800b294 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800c34e:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800c352:	461a      	mov	r2, r3
 800c354:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c358:	021b      	lsls	r3, r3, #8
 800c35a:	431a      	orrs	r2, r3
 800c35c:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800c360:	041b      	lsls	r3, r3, #16
 800c362:	431a      	orrs	r2, r3
 800c364:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c368:	061b      	lsls	r3, r3, #24
 800c36a:	431a      	orrs	r2, r3
 800c36c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c370:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800c372:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800c376:	4618      	mov	r0, r3
 800c378:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd90      	pop	{r4, r7, pc}

0800c380 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d101      	bne.n	800c392 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c38e:	2302      	movs	r3, #2
 800c390:	e00a      	b.n	800c3a8 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800c392:	4a07      	ldr	r2, [pc, #28]	@ (800c3b0 <SecureElementInit+0x30>)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800c398:	4b05      	ldr	r3, [pc, #20]	@ (800c3b0 <SecureElementInit+0x30>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	22d8      	movs	r2, #216	@ 0xd8
 800c39e:	4905      	ldr	r1, [pc, #20]	@ (800c3b4 <SecureElementInit+0x34>)
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f00b fb36 	bl	8017a12 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	200005f8 	.word	0x200005f8
 800c3b4:	0801d65c 	.word	0x0801d65c

0800c3b8 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800c3c6:	f107 030c 	add.w	r3, r7, #12
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 fa96 	bl	800c8fc <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800c3d0:	f107 0308 	add.w	r3, r7, #8
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	2001      	movs	r0, #1
 800c3d8:	f000 faf2 	bl	800c9c0 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d024      	beq.n	800c42c <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	75bb      	strb	r3, [r7, #22]
 800c3ea:	e00c      	b.n	800c406 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800c3ec:	7dbb      	ldrb	r3, [r7, #22]
 800c3ee:	3318      	adds	r3, #24
 800c3f0:	443b      	add	r3, r7
 800c3f2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d002      	beq.n	800c400 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	75fb      	strb	r3, [r7, #23]
                break;
 800c3fe:	e005      	b.n	800c40c <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c400:	7dbb      	ldrb	r3, [r7, #22]
 800c402:	3301      	adds	r3, #1
 800c404:	75bb      	strb	r3, [r7, #22]
 800c406:	7dbb      	ldrb	r3, [r7, #22]
 800c408:	2b07      	cmp	r3, #7
 800c40a:	d9ef      	bls.n	800c3ec <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
 800c40e:	f083 0301 	eor.w	r3, r3, #1
 800c412:	b2db      	uxtb	r3, r3
 800c414:	2b00      	cmp	r3, #0
 800c416:	d009      	beq.n	800c42c <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800c418:	f107 020c 	add.w	r2, r7, #12
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4610      	mov	r0, r2
 800c420:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800c422:	f107 030c 	add.w	r3, r7, #12
 800c426:	4618      	mov	r0, r3
 800c428:	f000 fa50 	bl	800c8cc <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00c      	beq.n	800c44c <SecureElementInitMcuID+0x94>
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d109      	bne.n	800c44c <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800c438:	f107 0208 	add.w	r2, r7, #8
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	4610      	mov	r0, r2
 800c440:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	4619      	mov	r1, r3
 800c446:	2001      	movs	r0, #1
 800c448:	f000 faa0 	bl	800c98c <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3718      	adds	r7, #24
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
	...

0800c458 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	4603      	mov	r3, r0
 800c460:	6039      	str	r1, [r7, #0]
 800c462:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c464:	2300      	movs	r3, #0
 800c466:	73fb      	strb	r3, [r7, #15]
 800c468:	e01a      	b.n	800c4a0 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c46a:	4b12      	ldr	r3, [pc, #72]	@ (800c4b4 <SecureElementGetKeyByID+0x5c>)
 800c46c:	6819      	ldr	r1, [r3, #0]
 800c46e:	7bfa      	ldrb	r2, [r7, #15]
 800c470:	4613      	mov	r3, r2
 800c472:	011b      	lsls	r3, r3, #4
 800c474:	4413      	add	r3, r2
 800c476:	440b      	add	r3, r1
 800c478:	3318      	adds	r3, #24
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	79fa      	ldrb	r2, [r7, #7]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d10b      	bne.n	800c49a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c482:	4b0c      	ldr	r3, [pc, #48]	@ (800c4b4 <SecureElementGetKeyByID+0x5c>)
 800c484:	6819      	ldr	r1, [r3, #0]
 800c486:	7bfa      	ldrb	r2, [r7, #15]
 800c488:	4613      	mov	r3, r2
 800c48a:	011b      	lsls	r3, r3, #4
 800c48c:	4413      	add	r3, r2
 800c48e:	3318      	adds	r3, #24
 800c490:	18ca      	adds	r2, r1, r3
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c496:	2300      	movs	r3, #0
 800c498:	e006      	b.n	800c4a8 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
 800c49c:	3301      	adds	r3, #1
 800c49e:	73fb      	strb	r3, [r7, #15]
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
 800c4a2:	2b0a      	cmp	r3, #10
 800c4a4:	d9e1      	bls.n	800c46a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c4a6:	2303      	movs	r3, #3
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3714      	adds	r7, #20
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bc80      	pop	{r7}
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	200005f8 	.word	0x200005f8

0800c4b8 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800c4bc:	2000      	movs	r0, #0
 800c4be:	f7ff fdab 	bl	800c018 <PrintKey>
    PrintKey( NWK_KEY );
 800c4c2:	2001      	movs	r0, #1
 800c4c4:	f7ff fda8 	bl	800c018 <PrintKey>
    PrintKey( APP_S_KEY );
 800c4c8:	2009      	movs	r0, #9
 800c4ca:	f7ff fda5 	bl	800c018 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800c4ce:	2008      	movs	r0, #8
 800c4d0:	f7ff fda2 	bl	800c018 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	f7ff fe2d 	bl	800c134 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800c4ea:	200b      	movs	r0, #11
 800c4ec:	f7ff fd94 	bl	800c018 <PrintKey>
    PrintKey( MC_KE_KEY );
 800c4f0:	200c      	movs	r0, #12
 800c4f2:	f7ff fd91 	bl	800c018 <PrintKey>
    PrintKey( APP_S_KEY );
 800c4f6:	2009      	movs	r0, #9
 800c4f8:	f7ff fd8e 	bl	800c018 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800c4fc:	2008      	movs	r0, #8
 800c4fe:	f7ff fd8b 	bl	800c018 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800c502:	200a      	movs	r0, #10
 800c504:	f7ff fd88 	bl	800c018 <PrintKey>
    PrintIds( mode );
 800c508:	79fb      	ldrb	r3, [r7, #7]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7ff fe12 	bl	800c134 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800c510:	2300      	movs	r3, #0
}
 800c512:	4618      	mov	r0, r3
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
	...

0800c51c <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b088      	sub	sp, #32
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	6039      	str	r1, [r7, #0]
 800c526:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d101      	bne.n	800c532 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c52e:	2302      	movs	r3, #2
 800c530:	e04b      	b.n	800c5ca <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c532:	2300      	movs	r3, #0
 800c534:	77fb      	strb	r3, [r7, #31]
 800c536:	e044      	b.n	800c5c2 <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c538:	4b26      	ldr	r3, [pc, #152]	@ (800c5d4 <SecureElementSetKey+0xb8>)
 800c53a:	6819      	ldr	r1, [r3, #0]
 800c53c:	7ffa      	ldrb	r2, [r7, #31]
 800c53e:	4613      	mov	r3, r2
 800c540:	011b      	lsls	r3, r3, #4
 800c542:	4413      	add	r3, r2
 800c544:	440b      	add	r3, r1
 800c546:	3318      	adds	r3, #24
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	79fa      	ldrb	r2, [r7, #7]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d135      	bne.n	800c5bc <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800c550:	79fb      	ldrb	r3, [r7, #7]
 800c552:	2b0d      	cmp	r3, #13
 800c554:	d122      	bne.n	800c59c <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c556:	2306      	movs	r3, #6
 800c558:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800c55a:	f107 030c 	add.w	r3, r7, #12
 800c55e:	2200      	movs	r2, #0
 800c560:	601a      	str	r2, [r3, #0]
 800c562:	605a      	str	r2, [r3, #4]
 800c564:	609a      	str	r2, [r3, #8]
 800c566:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800c568:	f107 030c 	add.w	r3, r7, #12
 800c56c:	220c      	movs	r2, #12
 800c56e:	2110      	movs	r1, #16
 800c570:	6838      	ldr	r0, [r7, #0]
 800c572:	f000 f877 	bl	800c664 <SecureElementAesEncrypt>
 800c576:	4603      	mov	r3, r0
 800c578:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c57a:	4b16      	ldr	r3, [pc, #88]	@ (800c5d4 <SecureElementSetKey+0xb8>)
 800c57c:	6819      	ldr	r1, [r3, #0]
 800c57e:	7ffa      	ldrb	r2, [r7, #31]
 800c580:	4613      	mov	r3, r2
 800c582:	011b      	lsls	r3, r3, #4
 800c584:	4413      	add	r3, r2
 800c586:	3318      	adds	r3, #24
 800c588:	440b      	add	r3, r1
 800c58a:	3301      	adds	r3, #1
 800c58c:	f107 010c 	add.w	r1, r7, #12
 800c590:	2210      	movs	r2, #16
 800c592:	4618      	mov	r0, r3
 800c594:	f00b fa3d 	bl	8017a12 <memcpy1>
                return retval;
 800c598:	7fbb      	ldrb	r3, [r7, #30]
 800c59a:	e016      	b.n	800c5ca <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c59c:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d4 <SecureElementSetKey+0xb8>)
 800c59e:	6819      	ldr	r1, [r3, #0]
 800c5a0:	7ffa      	ldrb	r2, [r7, #31]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	011b      	lsls	r3, r3, #4
 800c5a6:	4413      	add	r3, r2
 800c5a8:	3318      	adds	r3, #24
 800c5aa:	440b      	add	r3, r1
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	2210      	movs	r2, #16
 800c5b0:	6839      	ldr	r1, [r7, #0]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f00b fa2d 	bl	8017a12 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	e006      	b.n	800c5ca <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c5bc:	7ffb      	ldrb	r3, [r7, #31]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	77fb      	strb	r3, [r7, #31]
 800c5c2:	7ffb      	ldrb	r3, [r7, #31]
 800c5c4:	2b0a      	cmp	r3, #10
 800c5c6:	d9b7      	bls.n	800c538 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c5c8:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3720      	adds	r7, #32
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	200005f8 	.word	0x200005f8

0800c5d8 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af02      	add	r7, sp, #8
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
 800c5e4:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800c5e6:	78fb      	ldrb	r3, [r7, #3]
 800c5e8:	2b0b      	cmp	r3, #11
 800c5ea:	d901      	bls.n	800c5f0 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c5ec:	2303      	movs	r3, #3
 800c5ee:	e009      	b.n	800c604 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c5f0:	78fa      	ldrb	r2, [r7, #3]
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	68b9      	ldr	r1, [r7, #8]
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f7ff fe37 	bl	800c270 <ComputeCmac>
 800c602:	4603      	mov	r3, r0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b088      	sub	sp, #32
 800c610:	af02      	add	r7, sp, #8
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
 800c618:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d101      	bne.n	800c624 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c620:	2302      	movs	r3, #2
 800c622:	e01b      	b.n	800c65c <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c624:	2306      	movs	r3, #6
 800c626:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800c628:	2300      	movs	r3, #0
 800c62a:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c62c:	78fa      	ldrb	r2, [r7, #3]
 800c62e:	f107 0310 	add.w	r3, r7, #16
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	4613      	mov	r3, r2
 800c636:	68ba      	ldr	r2, [r7, #8]
 800c638:	68f9      	ldr	r1, [r7, #12]
 800c63a:	2000      	movs	r0, #0
 800c63c:	f7ff fe18 	bl	800c270 <ComputeCmac>
 800c640:	4603      	mov	r3, r0
 800c642:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c644:	7dfb      	ldrb	r3, [r7, #23]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d001      	beq.n	800c64e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800c64a:	7dfb      	ldrb	r3, [r7, #23]
 800c64c:	e006      	b.n	800c65c <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	429a      	cmp	r2, r3
 800c654:	d001      	beq.n	800c65a <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c656:	2301      	movs	r3, #1
 800c658:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c65a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b0c2      	sub	sp, #264	@ 0x108
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c670:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800c674:	6001      	str	r1, [r0, #0]
 800c676:	4611      	mov	r1, r2
 800c678:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c67c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800c680:	6013      	str	r3, [r2, #0]
 800c682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c686:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800c68a:	460a      	mov	r2, r1
 800c68c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d006      	beq.n	800c6a2 <SecureElementAesEncrypt+0x3e>
 800c694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d101      	bne.n	800c6a6 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c6a2:	2302      	movs	r3, #2
 800c6a4:	e059      	b.n	800c75a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800c6a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6aa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f003 030f 	and.w	r3, r3, #15
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d001      	beq.n	800c6bc <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c6b8:	2305      	movs	r3, #5
 800c6ba:	e04e      	b.n	800c75a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c6bc:	f107 0314 	add.w	r3, r7, #20
 800c6c0:	22f0      	movs	r2, #240	@ 0xf0
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f00b f9df 	bl	8017a88 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c6ca:	f107 0210 	add.w	r2, r7, #16
 800c6ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6d2:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	4611      	mov	r1, r2
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7ff fd98 	bl	800c210 <GetKeyByID>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c6e6:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d133      	bne.n	800c756 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	f107 0214 	add.w	r2, r7, #20
 800c6f6:	2110      	movs	r1, #16
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff fb65 	bl	800bdc8 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c6fe:	2300      	movs	r3, #0
 800c700:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800c704:	e020      	b.n	800c748 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800c706:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	18d0      	adds	r0, r2, r3
 800c70e:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c712:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c716:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800c71a:	6812      	ldr	r2, [r2, #0]
 800c71c:	4413      	add	r3, r2
 800c71e:	f107 0214 	add.w	r2, r7, #20
 800c722:	4619      	mov	r1, r3
 800c724:	f7ff fc2e 	bl	800bf84 <lorawan_aes_encrypt>
            block = block + 16;
 800c728:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c72c:	3310      	adds	r3, #16
 800c72e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800c732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c736:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800c73a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c73e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800c742:	6812      	ldr	r2, [r2, #0]
 800c744:	3a10      	subs	r2, #16
 800c746:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800c748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c74c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1d7      	bne.n	800c706 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c756:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b088      	sub	sp, #32
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	460b      	mov	r3, r1
 800c76e:	70fb      	strb	r3, [r7, #3]
 800c770:	4613      	mov	r3, r2
 800c772:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d101      	bne.n	800c77e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c77a:	2302      	movs	r3, #2
 800c77c:	e02d      	b.n	800c7da <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c77e:	2306      	movs	r3, #6
 800c780:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800c782:	78bb      	ldrb	r3, [r7, #2]
 800c784:	2b0c      	cmp	r3, #12
 800c786:	d104      	bne.n	800c792 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c788:	78fb      	ldrb	r3, [r7, #3]
 800c78a:	2b0b      	cmp	r3, #11
 800c78c:	d001      	beq.n	800c792 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c78e:	2303      	movs	r3, #3
 800c790:	e023      	b.n	800c7da <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800c792:	f107 030c 	add.w	r3, r7, #12
 800c796:	2200      	movs	r2, #0
 800c798:	601a      	str	r2, [r3, #0]
 800c79a:	605a      	str	r2, [r3, #4]
 800c79c:	609a      	str	r2, [r3, #8]
 800c79e:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800c7a0:	f107 030c 	add.w	r3, r7, #12
 800c7a4:	78fa      	ldrb	r2, [r7, #3]
 800c7a6:	2110      	movs	r1, #16
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7ff ff5b 	bl	800c664 <SecureElementAesEncrypt>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c7b2:	7ffb      	ldrb	r3, [r7, #31]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d001      	beq.n	800c7bc <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 800c7b8:	7ffb      	ldrb	r3, [r7, #31]
 800c7ba:	e00e      	b.n	800c7da <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800c7bc:	f107 020c 	add.w	r2, r7, #12
 800c7c0:	78bb      	ldrb	r3, [r7, #2]
 800c7c2:	4611      	mov	r1, r2
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7ff fea9 	bl	800c51c <SecureElementSetKey>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c7ce:	7ffb      	ldrb	r3, [r7, #31]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 800c7d4:	7ffb      	ldrb	r3, [r7, #31]
 800c7d6:	e000      	b.n	800c7da <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c7d8:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3720      	adds	r7, #32
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b086      	sub	sp, #24
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607b      	str	r3, [r7, #4]
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	73fb      	strb	r3, [r7, #15]
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d005      	beq.n	800c806 <SecureElementProcessJoinAccept+0x24>
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <SecureElementProcessJoinAccept+0x24>
 800c800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c802:	2b00      	cmp	r3, #0
 800c804:	d101      	bne.n	800c80a <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c806:	2302      	movs	r3, #2
 800c808:	e05c      	b.n	800c8c4 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c80a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c80e:	2b21      	cmp	r3, #33	@ 0x21
 800c810:	d901      	bls.n	800c816 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c812:	2305      	movs	r3, #5
 800c814:	e056      	b.n	800c8c4 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c816:	2301      	movs	r3, #1
 800c818:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c81a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c81e:	b29b      	uxth	r3, r3
 800c820:	461a      	mov	r2, r3
 800c822:	6879      	ldr	r1, [r7, #4]
 800c824:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c826:	f00b f8f4 	bl	8017a12 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	1c58      	adds	r0, r3, #1
 800c82e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c832:	3b01      	subs	r3, #1
 800c834:	4619      	mov	r1, r3
 800c836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c838:	3301      	adds	r3, #1
 800c83a:	7dfa      	ldrb	r2, [r7, #23]
 800c83c:	f7ff ff12 	bl	800c664 <SecureElementAesEncrypt>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d001      	beq.n	800c84a <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c846:	2307      	movs	r3, #7
 800c848:	e03c      	b.n	800c8c4 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84c:	330b      	adds	r3, #11
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	09db      	lsrs	r3, r3, #7
 800c852:	b2da      	uxtb	r2, r3
 800c854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c856:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800c858:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c85c:	3b04      	subs	r3, #4
 800c85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c860:	4413      	add	r3, r2
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	4619      	mov	r1, r3
 800c866:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c86a:	3b03      	subs	r3, #3
 800c86c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c86e:	4413      	add	r3, r2
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	021b      	lsls	r3, r3, #8
 800c874:	ea41 0203 	orr.w	r2, r1, r3
 800c878:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c87c:	3b02      	subs	r3, #2
 800c87e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c880:	440b      	add	r3, r1
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	041b      	lsls	r3, r3, #16
 800c886:	431a      	orrs	r2, r3
 800c888:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c88c:	3b01      	subs	r3, #1
 800c88e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c890:	440b      	add	r3, r1
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	061b      	lsls	r3, r3, #24
 800c896:	4313      	orrs	r3, r2
 800c898:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800c89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10d      	bne.n	800c8be <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c8a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c8a6:	3b04      	subs	r3, #4
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c8b0:	f7ff feac 	bl	800c60c <SecureElementVerifyAesCmac>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d003      	beq.n	800c8c2 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e002      	b.n	800c8c4 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c8be:	2304      	movs	r3, #4
 800c8c0:	e000      	b.n	800c8c4 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d101      	bne.n	800c8de <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c8da:	2302      	movs	r3, #2
 800c8dc:	e007      	b.n	800c8ee <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800c8de:	4b06      	ldr	r3, [pc, #24]	@ (800c8f8 <SecureElementSetDevEui+0x2c>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2208      	movs	r2, #8
 800c8e4:	6879      	ldr	r1, [r7, #4]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f00b f893 	bl	8017a12 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c8ec:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3708      	adds	r7, #8
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	200005f8 	.word	0x200005f8

0800c8fc <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d101      	bne.n	800c90e <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c90a:	2302      	movs	r3, #2
 800c90c:	e007      	b.n	800c91e <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800c90e:	4b06      	ldr	r3, [pc, #24]	@ (800c928 <SecureElementGetDevEui+0x2c>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2208      	movs	r2, #8
 800c914:	4619      	mov	r1, r3
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f00b f87b 	bl	8017a12 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c91c:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	200005f8 	.word	0x200005f8

0800c92c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d101      	bne.n	800c93e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c93a:	2302      	movs	r3, #2
 800c93c:	e008      	b.n	800c950 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800c93e:	4b06      	ldr	r3, [pc, #24]	@ (800c958 <SecureElementSetJoinEui+0x2c>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	3308      	adds	r3, #8
 800c944:	2208      	movs	r2, #8
 800c946:	6879      	ldr	r1, [r7, #4]
 800c948:	4618      	mov	r0, r3
 800c94a:	f00b f862 	bl	8017a12 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c94e:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c950:	4618      	mov	r0, r3
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	200005f8 	.word	0x200005f8

0800c95c <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d101      	bne.n	800c96e <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c96a:	2302      	movs	r3, #2
 800c96c:	e008      	b.n	800c980 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800c96e:	4b06      	ldr	r3, [pc, #24]	@ (800c988 <SecureElementGetJoinEui+0x2c>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3308      	adds	r3, #8
 800c974:	2208      	movs	r2, #8
 800c976:	4619      	mov	r1, r3
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f00b f84a 	bl	8017a12 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c97e:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c980:	4618      	mov	r0, r3
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	200005f8 	.word	0x200005f8

0800c98c <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	4603      	mov	r3, r0
 800c994:	6039      	str	r1, [r7, #0]
 800c996:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800c998:	79fb      	ldrb	r3, [r7, #7]
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	d104      	bne.n	800c9a8 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800c99e:	4b07      	ldr	r3, [pc, #28]	@ (800c9bc <SecureElementSetDevAddr+0x30>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	611a      	str	r2, [r3, #16]
 800c9a6:	e003      	b.n	800c9b0 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800c9a8:	4b04      	ldr	r3, [pc, #16]	@ (800c9bc <SecureElementSetDevAddr+0x30>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	683a      	ldr	r2, [r7, #0]
 800c9ae:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800c9b0:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	370c      	adds	r7, #12
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bc80      	pop	{r7}
 800c9ba:	4770      	bx	lr
 800c9bc:	200005f8 	.word	0x200005f8

0800c9c0 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	6039      	str	r1, [r7, #0]
 800c9ca:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d101      	bne.n	800c9d6 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c9d2:	2302      	movs	r3, #2
 800c9d4:	e00e      	b.n	800c9f4 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800c9d6:	79fb      	ldrb	r3, [r7, #7]
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d105      	bne.n	800c9e8 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800c9dc:	4b08      	ldr	r3, [pc, #32]	@ (800ca00 <SecureElementGetDevAddr+0x40>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	691a      	ldr	r2, [r3, #16]
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	e004      	b.n	800c9f2 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800c9e8:	4b05      	ldr	r3, [pc, #20]	@ (800ca00 <SecureElementGetDevAddr+0x40>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	695a      	ldr	r2, [r3, #20]
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800c9f2:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bc80      	pop	{r7}
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	200005f8 	.word	0x200005f8

0800ca04 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800ca0e:	4a29      	ldr	r2, [pc, #164]	@ (800cab4 <LmHandlerInit+0xb0>)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800ca14:	4b28      	ldr	r3, [pc, #160]	@ (800cab8 <LmHandlerInit+0xb4>)
 800ca16:	4a29      	ldr	r2, [pc, #164]	@ (800cabc <LmHandlerInit+0xb8>)
 800ca18:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800ca1a:	4b27      	ldr	r3, [pc, #156]	@ (800cab8 <LmHandlerInit+0xb4>)
 800ca1c:	4a28      	ldr	r2, [pc, #160]	@ (800cac0 <LmHandlerInit+0xbc>)
 800ca1e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800ca20:	4b25      	ldr	r3, [pc, #148]	@ (800cab8 <LmHandlerInit+0xb4>)
 800ca22:	4a28      	ldr	r2, [pc, #160]	@ (800cac4 <LmHandlerInit+0xc0>)
 800ca24:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800ca26:	4b24      	ldr	r3, [pc, #144]	@ (800cab8 <LmHandlerInit+0xb4>)
 800ca28:	4a27      	ldr	r2, [pc, #156]	@ (800cac8 <LmHandlerInit+0xc4>)
 800ca2a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800ca2c:	4b21      	ldr	r3, [pc, #132]	@ (800cab4 <LmHandlerInit+0xb0>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a26      	ldr	r2, [pc, #152]	@ (800cacc <LmHandlerInit+0xc8>)
 800ca34:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800ca36:	4b1f      	ldr	r3, [pc, #124]	@ (800cab4 <LmHandlerInit+0xb0>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	4a23      	ldr	r2, [pc, #140]	@ (800cacc <LmHandlerInit+0xc8>)
 800ca3e:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800ca40:	4b1c      	ldr	r3, [pc, #112]	@ (800cab4 <LmHandlerInit+0xb0>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	4a21      	ldr	r2, [pc, #132]	@ (800cacc <LmHandlerInit+0xc8>)
 800ca48:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800ca4a:	4b1a      	ldr	r3, [pc, #104]	@ (800cab4 <LmHandlerInit+0xb0>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	4a1e      	ldr	r2, [pc, #120]	@ (800cacc <LmHandlerInit+0xc8>)
 800ca52:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800ca54:	4b1d      	ldr	r3, [pc, #116]	@ (800cacc <LmHandlerInit+0xc8>)
 800ca56:	4a1e      	ldr	r2, [pc, #120]	@ (800cad0 <LmHandlerInit+0xcc>)
 800ca58:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800ca5a:	4b16      	ldr	r3, [pc, #88]	@ (800cab4 <LmHandlerInit+0xb0>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	699b      	ldr	r3, [r3, #24]
 800ca60:	4a1a      	ldr	r2, [pc, #104]	@ (800cacc <LmHandlerInit+0xc8>)
 800ca62:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	4a1b      	ldr	r2, [pc, #108]	@ (800cad4 <LmHandlerInit+0xd0>)
 800ca68:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800ca6a:	4b12      	ldr	r3, [pc, #72]	@ (800cab4 <LmHandlerInit+0xb0>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca70:	4a18      	ldr	r2, [pc, #96]	@ (800cad4 <LmHandlerInit+0xd0>)
 800ca72:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800ca74:	4b17      	ldr	r3, [pc, #92]	@ (800cad4 <LmHandlerInit+0xd0>)
 800ca76:	4a18      	ldr	r2, [pc, #96]	@ (800cad8 <LmHandlerInit+0xd4>)
 800ca78:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800ca7a:	4b16      	ldr	r3, [pc, #88]	@ (800cad4 <LmHandlerInit+0xd0>)
 800ca7c:	4a17      	ldr	r2, [pc, #92]	@ (800cadc <LmHandlerInit+0xd8>)
 800ca7e:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800ca80:	4914      	ldr	r1, [pc, #80]	@ (800cad4 <LmHandlerInit+0xd0>)
 800ca82:	2000      	movs	r0, #0
 800ca84:	f000 fdc0 	bl	800d608 <LmHandlerPackageRegister>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d002      	beq.n	800ca94 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800ca8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca92:	e00a      	b.n	800caaa <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800ca94:	463b      	mov	r3, r7
 800ca96:	4618      	mov	r0, r3
 800ca98:	f001 fd36 	bl	800e508 <LmhpPackagesRegistrationInit>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d002      	beq.n	800caa8 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800caa2:	f04f 33ff 	mov.w	r3, #4294967295
 800caa6:	e000      	b.n	800caaa <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800caa8:	2300      	movs	r3, #0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3708      	adds	r7, #8
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20000650 	.word	0x20000650
 800cab8:	20000654 	.word	0x20000654
 800cabc:	0800d2e1 	.word	0x0800d2e1
 800cac0:	0800d355 	.word	0x0800d355
 800cac4:	0800d425 	.word	0x0800d425
 800cac8:	0800d575 	.word	0x0800d575
 800cacc:	20000664 	.word	0x20000664
 800cad0:	0800dab5 	.word	0x0800dab5
 800cad4:	20000614 	.word	0x20000614
 800cad8:	0800d8c9 	.word	0x0800d8c9
 800cadc:	0800d901 	.word	0x0800d901

0800cae0 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b092      	sub	sp, #72	@ 0x48
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800cae8:	2218      	movs	r2, #24
 800caea:	6879      	ldr	r1, [r7, #4]
 800caec:	488a      	ldr	r0, [pc, #552]	@ (800cd18 <LmHandlerConfigure+0x238>)
 800caee:	f00a ff90 	bl	8017a12 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800caf2:	4b8a      	ldr	r3, [pc, #552]	@ (800cd1c <LmHandlerConfigure+0x23c>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800caf8:	f7fe faa0 	bl	800b03c <LoraInfo_GetPtr>
 800cafc:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800cafe:	4b86      	ldr	r3, [pc, #536]	@ (800cd18 <LmHandlerConfigure+0x238>)
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	461a      	mov	r2, r3
 800cb04:	2301      	movs	r3, #1
 800cb06:	4093      	lsls	r3, r2
 800cb08:	461a      	mov	r2, r3
 800cb0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	4013      	ands	r3, r2
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d107      	bne.n	800cb24 <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800cb14:	4b82      	ldr	r3, [pc, #520]	@ (800cd20 <LmHandlerConfigure+0x240>)
 800cb16:	2201      	movs	r2, #1
 800cb18:	2100      	movs	r1, #0
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	f00f fad6 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800cb20:	bf00      	nop
 800cb22:	e7fd      	b.n	800cb20 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800cb24:	4b7c      	ldr	r3, [pc, #496]	@ (800cd18 <LmHandlerConfigure+0x238>)
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	461a      	mov	r2, r3
 800cb2a:	497e      	ldr	r1, [pc, #504]	@ (800cd24 <LmHandlerConfigure+0x244>)
 800cb2c:	487e      	ldr	r0, [pc, #504]	@ (800cd28 <LmHandlerConfigure+0x248>)
 800cb2e:	f005 f80d 	bl	8011b4c <LoRaMacInitialization>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d002      	beq.n	800cb3e <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cb38:	f04f 33ff 	mov.w	r3, #4294967295
 800cb3c:	e0e8      	b.n	800cd10 <LmHandlerConfigure+0x230>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800cb3e:	2327      	movs	r3, #39	@ 0x27
 800cb40:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cb42:	f107 0318 	add.w	r3, r7, #24
 800cb46:	4618      	mov	r0, r3
 800cb48:	f005 fd8c 	bl	8012664 <LoRaMacMibSetRequestConfirm>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d103      	bne.n	800cb5a <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800cb52:	4b76      	ldr	r3, [pc, #472]	@ (800cd2c <LmHandlerConfigure+0x24c>)
 800cb54:	2201      	movs	r2, #1
 800cb56:	701a      	strb	r2, [r3, #0]
 800cb58:	e02a      	b.n	800cbb0 <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800cb5a:	2328      	movs	r3, #40	@ 0x28
 800cb5c:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800cb5e:	4b74      	ldr	r3, [pc, #464]	@ (800cd30 <LmHandlerConfigure+0x250>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	691b      	ldr	r3, [r3, #16]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00c      	beq.n	800cb82 <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cb68:	f107 0318 	add.w	r3, r7, #24
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f005 fba1 	bl	80122b4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800cb72:	4b6f      	ldr	r3, [pc, #444]	@ (800cd30 <LmHandlerConfigure+0x250>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	691b      	ldr	r3, [r3, #16]
 800cb78:	69fa      	ldr	r2, [r7, #28]
 800cb7a:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800cb7e:	4610      	mov	r0, r2
 800cb80:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800cb82:	2327      	movs	r3, #39	@ 0x27
 800cb84:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cb86:	f107 0318 	add.w	r3, r7, #24
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f005 fd6a 	bl	8012664 <LoRaMacMibSetRequestConfirm>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10c      	bne.n	800cbb0 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cb96:	2301      	movs	r3, #1
 800cb98:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cb9a:	f107 0318 	add.w	r3, r7, #24
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f005 fb88 	bl	80122b4 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800cba4:	7f3b      	ldrb	r3, [r7, #28]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800cbaa:	4b60      	ldr	r3, [pc, #384]	@ (800cd2c <LmHandlerConfigure+0x24c>)
 800cbac:	2201      	movs	r2, #1
 800cbae:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800cbb0:	4b5e      	ldr	r3, [pc, #376]	@ (800cd2c <LmHandlerConfigure+0x24c>)
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d02e      	beq.n	800cc16 <LmHandlerConfigure+0x136>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800cbb8:	4b5d      	ldr	r3, [pc, #372]	@ (800cd30 <LmHandlerConfigure+0x250>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	69db      	ldr	r3, [r3, #28]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d004      	beq.n	800cbcc <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800cbc2:	4b5b      	ldr	r3, [pc, #364]	@ (800cd30 <LmHandlerConfigure+0x250>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	69db      	ldr	r3, [r3, #28]
 800cbc8:	2000      	movs	r0, #0
 800cbca:	4798      	blx	r3
        }

        //BZ #156695
        if(( LmHandlerJoinStatus() == LORAMAC_HANDLER_SET) && LoRaMacIsStopped())
 800cbcc:	f000 f98e 	bl	800ceec <LmHandlerJoinStatus>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d106      	bne.n	800cbe4 <LmHandlerConfigure+0x104>
 800cbd6:	f002 fc99 	bl	800f50c <LoRaMacIsStopped>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <LmHandlerConfigure+0x104>
        { 
            LoRaMacStart();
 800cbe0:	f005 fa6a 	bl	80120b8 <LoRaMacStart>
        }

        mibReq.Type = MIB_NVM_CTXS;
 800cbe4:	2327      	movs	r3, #39	@ 0x27
 800cbe6:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800cbe8:	f107 0318 	add.w	r3, r7, #24
 800cbec:	4618      	mov	r0, r3
 800cbee:	f005 fb61 	bl	80122b4 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800cbf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbf8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800cbfc:	4b46      	ldr	r3, [pc, #280]	@ (800cd18 <LmHandlerConfigure+0x238>)
 800cbfe:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800cc00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc02:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800cc06:	4b44      	ldr	r3, [pc, #272]	@ (800cd18 <LmHandlerConfigure+0x238>)
 800cc08:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800cc0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc0c:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800cc10:	4b41      	ldr	r3, [pc, #260]	@ (800cd18 <LmHandlerConfigure+0x238>)
 800cc12:	709a      	strb	r2, [r3, #2]
 800cc14:	e008      	b.n	800cc28 <LmHandlerConfigure+0x148>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800cc16:	2305      	movs	r3, #5
 800cc18:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800cc1e:	f107 0318 	add.w	r3, r7, #24
 800cc22:	4618      	mov	r0, r3
 800cc24:	f005 fd1e 	bl	8012664 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800cc28:	4b3e      	ldr	r3, [pc, #248]	@ (800cd24 <LmHandlerConfigure+0x244>)
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	4a3d      	ldr	r2, [pc, #244]	@ (800cd24 <LmHandlerConfigure+0x244>)
 800cc2e:	68d2      	ldr	r2, [r2, #12]
 800cc30:	4611      	mov	r1, r2
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7ff fbc0 	bl	800c3b8 <SecureElementInitMcuID>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d002      	beq.n	800cc44 <LmHandlerConfigure+0x164>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc3e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc42:	e065      	b.n	800cd10 <LmHandlerConfigure+0x230>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800cc44:	2306      	movs	r3, #6
 800cc46:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800cc48:	f107 0318 	add.w	r3, r7, #24
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f005 fb31 	bl	80122b4 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	4a37      	ldr	r2, [pc, #220]	@ (800cd34 <LmHandlerConfigure+0x254>)
 800cc56:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cc58:	f107 0318 	add.w	r3, r7, #24
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f005 fd01 	bl	8012664 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800cc62:	2302      	movs	r3, #2
 800cc64:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800cc66:	4b33      	ldr	r3, [pc, #204]	@ (800cd34 <LmHandlerConfigure+0x254>)
 800cc68:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800cc6a:	f107 0318 	add.w	r3, r7, #24
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f005 fb20 	bl	80122b4 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800cc74:	2303      	movs	r3, #3
 800cc76:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800cc78:	4b2f      	ldr	r3, [pc, #188]	@ (800cd38 <LmHandlerConfigure+0x258>)
 800cc7a:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800cc7c:	f107 0318 	add.w	r3, r7, #24
 800cc80:	4618      	mov	r0, r3
 800cc82:	f005 fb17 	bl	80122b4 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800cc86:	f7ff fc17 	bl	800c4b8 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800cc8a:	230f      	movs	r3, #15
 800cc8c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cc92:	f107 0318 	add.w	r3, r7, #24
 800cc96:	4618      	mov	r0, r3
 800cc98:	f005 fce4 	bl	8012664 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800cc9c:	2310      	movs	r3, #16
 800cc9e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800cca0:	2300      	movs	r3, #0
 800cca2:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cca4:	f107 0318 	add.w	r3, r7, #24
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f005 fcdb 	bl	8012664 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800ccae:	2304      	movs	r3, #4
 800ccb0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800ccb2:	4b19      	ldr	r3, [pc, #100]	@ (800cd18 <LmHandlerConfigure+0x238>)
 800ccb4:	789b      	ldrb	r3, [r3, #2]
 800ccb6:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ccb8:	f107 0318 	add.w	r3, r7, #24
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f005 fcd1 	bl	8012664 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800ccc2:	233a      	movs	r3, #58	@ 0x3a
 800ccc4:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800ccc6:	4b14      	ldr	r3, [pc, #80]	@ (800cd18 <LmHandlerConfigure+0x238>)
 800ccc8:	695b      	ldr	r3, [r3, #20]
 800ccca:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cccc:	f107 0318 	add.w	r3, r7, #24
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f005 fcc7 	bl	8012664 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800ccd6:	230f      	movs	r3, #15
 800ccd8:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800ccda:	4b0f      	ldr	r3, [pc, #60]	@ (800cd18 <LmHandlerConfigure+0x238>)
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	f107 0210 	add.w	r2, r7, #16
 800cce2:	4611      	mov	r1, r2
 800cce4:	4618      	mov	r0, r3
 800cce6:	f008 fc69 	bl	80155bc <RegionGetPhyParam>
 800ccea:	4603      	mov	r3, r0
 800ccec:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	bf14      	ite	ne
 800ccf4:	2301      	movne	r3, #1
 800ccf6:	2300      	moveq	r3, #0
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	4b07      	ldr	r3, [pc, #28]	@ (800cd18 <LmHandlerConfigure+0x238>)
 800ccfc:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800ccfe:	2014      	movs	r0, #20
 800cd00:	f000 fad6 	bl	800d2b0 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800cd04:	4b04      	ldr	r3, [pc, #16]	@ (800cd18 <LmHandlerConfigure+0x238>)
 800cd06:	79db      	ldrb	r3, [r3, #7]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f006 fb89 	bl	8013420 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3748      	adds	r7, #72	@ 0x48
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	20000638 	.word	0x20000638
 800cd1c:	20000680 	.word	0x20000680
 800cd20:	0801cdc8 	.word	0x0801cdc8
 800cd24:	20000664 	.word	0x20000664
 800cd28:	20000654 	.word	0x20000654
 800cd2c:	20000776 	.word	0x20000776
 800cd30:	20000650 	.word	0x20000650
 800cd34:	200005fc 	.word	0x200005fc
 800cd38:	20000604 	.word	0x20000604

0800cd3c <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800cd42:	f002 fe61 	bl	800fa08 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800cd46:	f000 fd8b 	bl	800d860 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800cd4a:	f000 fd5f 	bl	800d80c <LmHandlerPackageIsTxPending>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d117      	bne.n	800cd84 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800cd54:	4b0d      	ldr	r3, [pc, #52]	@ (800cd8c <LmHandlerProcess+0x50>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d014      	beq.n	800cd86 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	703b      	strb	r3, [r7, #0]
 800cd60:	2300      	movs	r3, #0
 800cd62:	707b      	strb	r3, [r7, #1]
 800cd64:	2300      	movs	r3, #0
 800cd66:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800cd68:	4b09      	ldr	r3, [pc, #36]	@ (800cd90 <LmHandlerProcess+0x54>)
 800cd6a:	78d9      	ldrb	r1, [r3, #3]
 800cd6c:	463b      	mov	r3, r7
 800cd6e:	2200      	movs	r2, #0
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 f8d7 	bl	800cf24 <LmHandlerSend>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d104      	bne.n	800cd86 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800cd7c:	4b03      	ldr	r3, [pc, #12]	@ (800cd8c <LmHandlerProcess+0x50>)
 800cd7e:	2200      	movs	r2, #0
 800cd80:	701a      	strb	r2, [r3, #0]
 800cd82:	e000      	b.n	800cd86 <LmHandlerProcess+0x4a>
        return;
 800cd84:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	20000680 	.word	0x20000680
 800cd90:	20000638 	.word	0x20000638

0800cd94 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800cd94:	b480      	push	{r7}
 800cd96:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800cd98:	4b02      	ldr	r3, [pc, #8]	@ (800cda4 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bc80      	pop	{r7}
 800cda2:	4770      	bx	lr
 800cda4:	2000067c 	.word	0x2000067c

0800cda8 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b092      	sub	sp, #72	@ 0x48
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	4603      	mov	r3, r0
 800cdb0:	460a      	mov	r2, r1
 800cdb2:	71fb      	strb	r3, [r7, #7]
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800cdbe:	4b46      	ldr	r3, [pc, #280]	@ (800ced8 <LmHandlerJoin+0x130>)
 800cdc0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800cdca:	4b43      	ldr	r3, [pc, #268]	@ (800ced8 <LmHandlerJoin+0x130>)
 800cdcc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cdd0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800cdd4:	79fb      	ldrb	r3, [r7, #7]
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	d10b      	bne.n	800cdf2 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cdda:	2302      	movs	r3, #2
 800cddc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800cde0:	4b3e      	ldr	r3, [pc, #248]	@ (800cedc <LmHandlerJoin+0x134>)
 800cde2:	2202      	movs	r2, #2
 800cde4:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800cde6:	4a3d      	ldr	r2, [pc, #244]	@ (800cedc <LmHandlerJoin+0x134>)
 800cde8:	79bb      	ldrb	r3, [r7, #6]
 800cdea:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800cdec:	f005 f964 	bl	80120b8 <LoRaMacStart>
 800cdf0:	e05c      	b.n	800ceac <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800cdf8:	4b38      	ldr	r3, [pc, #224]	@ (800cedc <LmHandlerJoin+0x134>)
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800cdfe:	4b36      	ldr	r3, [pc, #216]	@ (800ced8 <LmHandlerJoin+0x130>)
 800ce00:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ce04:	4b35      	ldr	r3, [pc, #212]	@ (800cedc <LmHandlerJoin+0x134>)
 800ce06:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800ce08:	4b33      	ldr	r3, [pc, #204]	@ (800ced8 <LmHandlerJoin+0x130>)
 800ce0a:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800ce0e:	4b33      	ldr	r3, [pc, #204]	@ (800cedc <LmHandlerJoin+0x134>)
 800ce10:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ce12:	4b32      	ldr	r3, [pc, #200]	@ (800cedc <LmHandlerJoin+0x134>)
 800ce14:	2200      	movs	r2, #0
 800ce16:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800ce18:	4a30      	ldr	r2, [pc, #192]	@ (800cedc <LmHandlerJoin+0x134>)
 800ce1a:	79bb      	ldrb	r3, [r7, #6]
 800ce1c:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800ce1e:	4b30      	ldr	r3, [pc, #192]	@ (800cee0 <LmHandlerJoin+0x138>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	f083 0301 	eor.w	r3, r3, #1
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d034      	beq.n	800ce96 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800ce2c:	231f      	movs	r3, #31
 800ce2e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800ce30:	4b29      	ldr	r3, [pc, #164]	@ (800ced8 <LmHandlerJoin+0x130>)
 800ce32:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ce36:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ce38:	f107 030c 	add.w	r3, r7, #12
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f005 fc11 	bl	8012664 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800ce42:	2320      	movs	r3, #32
 800ce44:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800ce46:	4b24      	ldr	r3, [pc, #144]	@ (800ced8 <LmHandlerJoin+0x130>)
 800ce48:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ce4c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ce4e:	f107 030c 	add.w	r3, r7, #12
 800ce52:	4618      	mov	r0, r3
 800ce54:	f005 fc06 	bl	8012664 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800ce58:	2322      	movs	r3, #34	@ 0x22
 800ce5a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800ce5c:	4b1e      	ldr	r3, [pc, #120]	@ (800ced8 <LmHandlerJoin+0x130>)
 800ce5e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ce62:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ce64:	f107 030c 	add.w	r3, r7, #12
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f005 fbfb 	bl	8012664 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800ce6e:	2321      	movs	r3, #33	@ 0x21
 800ce70:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800ce72:	4b19      	ldr	r3, [pc, #100]	@ (800ced8 <LmHandlerJoin+0x130>)
 800ce74:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ce78:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ce7a:	f107 030c 	add.w	r3, r7, #12
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f005 fbf0 	bl	8012664 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800ce84:	2329      	movs	r3, #41	@ 0x29
 800ce86:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800ce88:	4b16      	ldr	r3, [pc, #88]	@ (800cee4 <LmHandlerJoin+0x13c>)
 800ce8a:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ce8c:	f107 030c 	add.w	r3, r7, #12
 800ce90:	4618      	mov	r0, r3
 800ce92:	f005 fbe7 	bl	8012664 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800ce96:	f005 f90f 	bl	80120b8 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800cea2:	f107 030c 	add.w	r3, r7, #12
 800cea6:	4618      	mov	r0, r3
 800cea8:	f005 fbdc 	bl	8012664 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800ceac:	4b0c      	ldr	r3, [pc, #48]	@ (800cee0 <LmHandlerJoin+0x138>)
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	f083 0301 	eor.w	r3, r3, #1
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d102      	bne.n	800cec0 <LmHandlerJoin+0x118>
 800ceba:	79bb      	ldrb	r3, [r7, #6]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d004      	beq.n	800ceca <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800cec0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800cec4:	4618      	mov	r0, r3
 800cec6:	f005 ffcf 	bl	8012e68 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800ceca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cecc:	4a06      	ldr	r2, [pc, #24]	@ (800cee8 <LmHandlerJoin+0x140>)
 800cece:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800ced0:	bf00      	nop
 800ced2:	3748      	adds	r7, #72	@ 0x48
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	20000638 	.word	0x20000638
 800cedc:	20000094 	.word	0x20000094
 800cee0:	20000776 	.word	0x20000776
 800cee4:	01000400 	.word	0x01000400
 800cee8:	2000067c 	.word	0x2000067c

0800ceec <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b08c      	sub	sp, #48	@ 0x30
 800cef0:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cef2:	2301      	movs	r3, #1
 800cef4:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800cef6:	1d3b      	adds	r3, r7, #4
 800cef8:	4618      	mov	r0, r3
 800cefa:	f005 f9db 	bl	80122b4 <LoRaMacMibGetRequestConfirm>
 800cefe:	4603      	mov	r3, r0
 800cf00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800cf04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d106      	bne.n	800cf1a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cf0c:	7a3b      	ldrb	r3, [r7, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d101      	bne.n	800cf16 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800cf12:	2300      	movs	r3, #0
 800cf14:	e002      	b.n	800cf1c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800cf16:	2301      	movs	r3, #1
 800cf18:	e000      	b.n	800cf1c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800cf1a:	2300      	movs	r3, #0
    }
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3730      	adds	r7, #48	@ 0x30
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b08a      	sub	sp, #40	@ 0x28
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	70fb      	strb	r3, [r7, #3]
 800cf30:	4613      	mov	r3, r2
 800cf32:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800cf34:	23ff      	movs	r3, #255	@ 0xff
 800cf36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800cf3a:	f002 fabf 	bl	800f4bc <LoRaMacIsBusy>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cf44:	f06f 0301 	mvn.w	r3, #1
 800cf48:	e0ab      	b.n	800d0a2 <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800cf4a:	f002 fadf 	bl	800f50c <LoRaMacIsStopped>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d002      	beq.n	800cf5a <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cf54:	f06f 0302 	mvn.w	r3, #2
 800cf58:	e0a3      	b.n	800d0a2 <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800cf5a:	f7ff ffc7 	bl	800ceec <LmHandlerJoinStatus>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d00a      	beq.n	800cf7a <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800cf64:	4b51      	ldr	r3, [pc, #324]	@ (800d0ac <LmHandlerSend+0x188>)
 800cf66:	79db      	ldrb	r3, [r3, #7]
 800cf68:	4a50      	ldr	r2, [pc, #320]	@ (800d0ac <LmHandlerSend+0x188>)
 800cf6a:	7a12      	ldrb	r2, [r2, #8]
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff ff1a 	bl	800cda8 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cf74:	f06f 0302 	mvn.w	r3, #2
 800cf78:	e093      	b.n	800d0a2 <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800cf7a:	4a4d      	ldr	r2, [pc, #308]	@ (800d0b0 <LmHandlerSend+0x18c>)
 800cf7c:	78fb      	ldrb	r3, [r7, #3]
 800cf7e:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800cf80:	78fb      	ldrb	r3, [r7, #3]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	bf14      	ite	ne
 800cf86:	2301      	movne	r3, #1
 800cf88:	2300      	moveq	r3, #0
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800cf8e:	4b49      	ldr	r3, [pc, #292]	@ (800d0b4 <LmHandlerSend+0x190>)
 800cf90:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cf94:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	785b      	ldrb	r3, [r3, #1]
 800cf9a:	f107 020c 	add.w	r2, r7, #12
 800cf9e:	4611      	mov	r1, r2
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f005 f8f7 	bl	8012194 <LoRaMacQueryTxPossible>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d009      	beq.n	800cfc0 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800cfac:	2300      	movs	r3, #0
 800cfae:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800cfb8:	23f9      	movs	r3, #249	@ 0xf9
 800cfba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cfbe:	e008      	b.n	800cfd2 <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	785b      	ldrb	r3, [r3, #1]
 800cfca:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800cfd2:	4b37      	ldr	r3, [pc, #220]	@ (800d0b0 <LmHandlerSend+0x18c>)
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	3310      	adds	r3, #16
 800cfd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfdc:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800cfe0:	4b34      	ldr	r3, [pc, #208]	@ (800d0b4 <LmHandlerSend+0x190>)
 800cfe2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cfe6:	4b32      	ldr	r3, [pc, #200]	@ (800d0b0 <LmHandlerSend+0x18c>)
 800cfe8:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800cfea:	78ba      	ldrb	r2, [r7, #2]
 800cfec:	f107 0310 	add.w	r3, r7, #16
 800cff0:	4611      	mov	r1, r2
 800cff2:	4618      	mov	r0, r3
 800cff4:	f006 f8dc 	bl	80131b0 <LoRaMacMcpsRequest>
 800cff8:	4603      	mov	r3, r0
 800cffa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800cffe:	6a3b      	ldr	r3, [r7, #32]
 800d000:	4a2d      	ldr	r2, [pc, #180]	@ (800d0b8 <LmHandlerSend+0x194>)
 800d002:	6013      	str	r3, [r2, #0]

    switch( status )
 800d004:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d008:	2b11      	cmp	r3, #17
 800d00a:	d843      	bhi.n	800d094 <LmHandlerSend+0x170>
 800d00c:	a201      	add	r2, pc, #4	@ (adr r2, 800d014 <LmHandlerSend+0xf0>)
 800d00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d012:	bf00      	nop
 800d014:	0800d05d 	.word	0x0800d05d
 800d018:	0800d075 	.word	0x0800d075
 800d01c:	0800d095 	.word	0x0800d095
 800d020:	0800d095 	.word	0x0800d095
 800d024:	0800d095 	.word	0x0800d095
 800d028:	0800d095 	.word	0x0800d095
 800d02c:	0800d095 	.word	0x0800d095
 800d030:	0800d07d 	.word	0x0800d07d
 800d034:	0800d095 	.word	0x0800d095
 800d038:	0800d095 	.word	0x0800d095
 800d03c:	0800d095 	.word	0x0800d095
 800d040:	0800d08d 	.word	0x0800d08d
 800d044:	0800d095 	.word	0x0800d095
 800d048:	0800d095 	.word	0x0800d095
 800d04c:	0800d075 	.word	0x0800d075
 800d050:	0800d075 	.word	0x0800d075
 800d054:	0800d075 	.word	0x0800d075
 800d058:	0800d085 	.word	0x0800d085
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800d05c:	4b17      	ldr	r3, [pc, #92]	@ (800d0bc <LmHandlerSend+0x198>)
 800d05e:	2200      	movs	r2, #0
 800d060:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800d062:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d066:	f113 0f07 	cmn.w	r3, #7
 800d06a:	d017      	beq.n	800d09c <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d06c:	2300      	movs	r3, #0
 800d06e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800d072:	e013      	b.n	800d09c <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800d074:	23fe      	movs	r3, #254	@ 0xfe
 800d076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d07a:	e010      	b.n	800d09e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d07c:	23fd      	movs	r3, #253	@ 0xfd
 800d07e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d082:	e00c      	b.n	800d09e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d084:	23fb      	movs	r3, #251	@ 0xfb
 800d086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d08a:	e008      	b.n	800d09e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d08c:	23fa      	movs	r3, #250	@ 0xfa
 800d08e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d092:	e004      	b.n	800d09e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d094:	23ff      	movs	r3, #255	@ 0xff
 800d096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d09a:	e000      	b.n	800d09e <LmHandlerSend+0x17a>
            break;
 800d09c:	bf00      	nop
    }

    return lmhStatus;
 800d09e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3728      	adds	r7, #40	@ 0x28
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	20000094 	.word	0x20000094
 800d0b0:	200000a0 	.word	0x200000a0
 800d0b4:	20000638 	.word	0x20000638
 800d0b8:	2000067c 	.word	0x2000067c
 800d0bc:	20000680 	.word	0x20000680

0800d0c0 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b086      	sub	sp, #24
 800d0c4:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800d0c6:	2309      	movs	r3, #9
 800d0c8:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800d0ca:	463b      	mov	r3, r7
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f005 fecb 	bl	8012e68 <LoRaMacMlmeRequest>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	4a06      	ldr	r2, [pc, #24]	@ (800d0f4 <LmHandlerDeviceTimeReq+0x34>)
 800d0da:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800d0dc:	7dfb      	ldrb	r3, [r7, #23]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	e001      	b.n	800d0ea <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d0e6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3718      	adds	r7, #24
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	2000067c 	.word	0x2000067c

0800d0f8 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	4603      	mov	r3, r0
 800d100:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800d102:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d106:	4618      	mov	r0, r3
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bc80      	pop	{r7}
 800d10e:	4770      	bx	lr

0800d110 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b08e      	sub	sp, #56	@ 0x38
 800d114:	af00      	add	r7, sp, #0
 800d116:	4603      	mov	r3, r0
 800d118:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d11a:	2300      	movs	r3, #0
 800d11c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800d120:	f002 f9cc 	bl	800f4bc <LoRaMacIsBusy>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d002      	beq.n	800d130 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d12a:	f06f 0301 	mvn.w	r3, #1
 800d12e:	e071      	b.n	800d214 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800d130:	f7ff fedc 	bl	800ceec <LmHandlerJoinStatus>
 800d134:	4603      	mov	r3, r0
 800d136:	2b01      	cmp	r3, #1
 800d138:	d002      	beq.n	800d140 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d13a:	f06f 0302 	mvn.w	r3, #2
 800d13e:	e069      	b.n	800d214 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d140:	2300      	movs	r3, #0
 800d142:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d144:	f107 030c 	add.w	r3, r7, #12
 800d148:	4618      	mov	r0, r3
 800d14a:	f005 f8b3 	bl	80122b4 <LoRaMacMibGetRequestConfirm>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d002      	beq.n	800d15a <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d154:	f04f 33ff 	mov.w	r3, #4294967295
 800d158:	e05c      	b.n	800d214 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800d15a:	7c3b      	ldrb	r3, [r7, #16]
 800d15c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800d160:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800d164:	79fb      	ldrb	r3, [r7, #7]
 800d166:	429a      	cmp	r2, r3
 800d168:	d052      	beq.n	800d210 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800d16a:	79fb      	ldrb	r3, [r7, #7]
 800d16c:	2b02      	cmp	r3, #2
 800d16e:	d028      	beq.n	800d1c2 <LmHandlerRequestClass+0xb2>
 800d170:	2b02      	cmp	r3, #2
 800d172:	dc48      	bgt.n	800d206 <LmHandlerRequestClass+0xf6>
 800d174:	2b00      	cmp	r3, #0
 800d176:	d002      	beq.n	800d17e <LmHandlerRequestClass+0x6e>
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d01e      	beq.n	800d1ba <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800d17c:	e043      	b.n	800d206 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800d17e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d182:	2b00      	cmp	r3, #0
 800d184:	d041      	beq.n	800d20a <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800d186:	79fb      	ldrb	r3, [r7, #7]
 800d188:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d18a:	f107 030c 	add.w	r3, r7, #12
 800d18e:	4618      	mov	r0, r3
 800d190:	f005 fa68 	bl	8012664 <LoRaMacMibSetRequestConfirm>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d10b      	bne.n	800d1b2 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800d19a:	4b20      	ldr	r3, [pc, #128]	@ (800d21c <LmHandlerRequestClass+0x10c>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d032      	beq.n	800d20a <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800d1a4:	4b1d      	ldr	r3, [pc, #116]	@ (800d21c <LmHandlerRequestClass+0x10c>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1aa:	79fa      	ldrb	r2, [r7, #7]
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	4798      	blx	r3
                break;
 800d1b0:	e02b      	b.n	800d20a <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800d1b2:	23ff      	movs	r3, #255	@ 0xff
 800d1b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800d1b8:	e027      	b.n	800d20a <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800d1ba:	23ff      	movs	r3, #255	@ 0xff
 800d1bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800d1c0:	e026      	b.n	800d210 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800d1c2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d003      	beq.n	800d1d2 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d1ca:	23ff      	movs	r3, #255	@ 0xff
 800d1cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800d1d0:	e01d      	b.n	800d20e <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800d1d2:	79fb      	ldrb	r3, [r7, #7]
 800d1d4:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d1d6:	f107 030c 	add.w	r3, r7, #12
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f005 fa42 	bl	8012664 <LoRaMacMibSetRequestConfirm>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d10b      	bne.n	800d1fe <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800d1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d21c <LmHandlerRequestClass+0x10c>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d00e      	beq.n	800d20e <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800d1f0:	4b0a      	ldr	r3, [pc, #40]	@ (800d21c <LmHandlerRequestClass+0x10c>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1f6:	79fa      	ldrb	r2, [r7, #7]
 800d1f8:	4610      	mov	r0, r2
 800d1fa:	4798      	blx	r3
                break;
 800d1fc:	e007      	b.n	800d20e <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800d1fe:	23ff      	movs	r3, #255	@ 0xff
 800d200:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800d204:	e003      	b.n	800d20e <LmHandlerRequestClass+0xfe>
                break;
 800d206:	bf00      	nop
 800d208:	e002      	b.n	800d210 <LmHandlerRequestClass+0x100>
                break;
 800d20a:	bf00      	nop
 800d20c:	e000      	b.n	800d210 <LmHandlerRequestClass+0x100>
                break;
 800d20e:	bf00      	nop
        }
    }
    return errorStatus;
 800d210:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d214:	4618      	mov	r0, r3
 800d216:	3738      	adds	r7, #56	@ 0x38
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	20000650 	.word	0x20000650

0800d220 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b08c      	sub	sp, #48	@ 0x30
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d102      	bne.n	800d234 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d22e:	f04f 33ff 	mov.w	r3, #4294967295
 800d232:	e010      	b.n	800d256 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d234:	2300      	movs	r3, #0
 800d236:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d238:	f107 0308 	add.w	r3, r7, #8
 800d23c:	4618      	mov	r0, r3
 800d23e:	f005 f839 	bl	80122b4 <LoRaMacMibGetRequestConfirm>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d002      	beq.n	800d24e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d248:	f04f 33ff 	mov.w	r3, #4294967295
 800d24c:	e003      	b.n	800d256 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800d24e:	7b3a      	ldrb	r2, [r7, #12]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3730      	adds	r7, #48	@ 0x30
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
	...

0800d260 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b08c      	sub	sp, #48	@ 0x30
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d102      	bne.n	800d274 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d26e:	f04f 33ff 	mov.w	r3, #4294967295
 800d272:	e016      	b.n	800d2a2 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d274:	2320      	movs	r3, #32
 800d276:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800d278:	f107 0308 	add.w	r3, r7, #8
 800d27c:	4618      	mov	r0, r3
 800d27e:	f005 f819 	bl	80122b4 <LoRaMacMibGetRequestConfirm>
 800d282:	4603      	mov	r3, r0
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d288:	f04f 33ff 	mov.w	r3, #4294967295
 800d28c:	e009      	b.n	800d2a2 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d28e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f993 2000 	ldrsb.w	r2, [r3]
 800d29c:	4b03      	ldr	r3, [pc, #12]	@ (800d2ac <LmHandlerGetTxDatarate+0x4c>)
 800d29e:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3730      	adds	r7, #48	@ 0x30
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	20000638 	.word	0x20000638

0800d2b0 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b08c      	sub	sp, #48	@ 0x30
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d2b8:	2323      	movs	r3, #35	@ 0x23
 800d2ba:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d2c0:	f107 0308 	add.w	r3, r7, #8
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f005 f9cd 	bl	8012664 <LoRaMacMibSetRequestConfirm>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d002      	beq.n	800d2d6 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800d2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2d4:	e000      	b.n	800d2d8 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3730      	adds	r7, #48	@ 0x30
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800d2e8:	4b18      	ldr	r3, [pc, #96]	@ (800d34c <McpsConfirm+0x6c>)
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	785a      	ldrb	r2, [r3, #1]
 800d2f2:	4b16      	ldr	r3, [pc, #88]	@ (800d34c <McpsConfirm+0x6c>)
 800d2f4:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	789b      	ldrb	r3, [r3, #2]
 800d2fa:	b25a      	sxtb	r2, r3
 800d2fc:	4b13      	ldr	r3, [pc, #76]	@ (800d34c <McpsConfirm+0x6c>)
 800d2fe:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	4a11      	ldr	r2, [pc, #68]	@ (800d34c <McpsConfirm+0x6c>)
 800d306:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d30e:	4b0f      	ldr	r3, [pc, #60]	@ (800d34c <McpsConfirm+0x6c>)
 800d310:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	b2da      	uxtb	r2, r3
 800d318:	4b0c      	ldr	r3, [pc, #48]	@ (800d34c <McpsConfirm+0x6c>)
 800d31a:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	791b      	ldrb	r3, [r3, #4]
 800d320:	461a      	mov	r2, r3
 800d322:	4b0a      	ldr	r3, [pc, #40]	@ (800d34c <McpsConfirm+0x6c>)
 800d324:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800d326:	4b0a      	ldr	r3, [pc, #40]	@ (800d350 <McpsConfirm+0x70>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d004      	beq.n	800d33a <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d330:	4b07      	ldr	r3, [pc, #28]	@ (800d350 <McpsConfirm+0x70>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d336:	4805      	ldr	r0, [pc, #20]	@ (800d34c <McpsConfirm+0x6c>)
 800d338:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d33a:	6879      	ldr	r1, [r7, #4]
 800d33c:	2000      	movs	r0, #0
 800d33e:	f000 f9e9 	bl	800d714 <LmHandlerPackagesNotify>
}
 800d342:	bf00      	nop
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	200000a0 	.word	0x200000a0
 800d350:	20000650 	.word	0x20000650

0800d354 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800d35e:	2300      	movs	r3, #0
 800d360:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800d362:	4b2d      	ldr	r3, [pc, #180]	@ (800d418 <McpsIndication+0xc4>)
 800d364:	2201      	movs	r2, #1
 800d366:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	785a      	ldrb	r2, [r3, #1]
 800d36c:	4b2a      	ldr	r3, [pc, #168]	@ (800d418 <McpsIndication+0xc4>)
 800d36e:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d370:	4b29      	ldr	r3, [pc, #164]	@ (800d418 <McpsIndication+0xc4>)
 800d372:	785b      	ldrb	r3, [r3, #1]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d14b      	bne.n	800d410 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	791b      	ldrb	r3, [r3, #4]
 800d37c:	b25a      	sxtb	r2, r3
 800d37e:	4b26      	ldr	r3, [pc, #152]	@ (800d418 <McpsIndication+0xc4>)
 800d380:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d388:	b25a      	sxtb	r2, r3
 800d38a:	4b23      	ldr	r3, [pc, #140]	@ (800d418 <McpsIndication+0xc4>)
 800d38c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d394:	4b20      	ldr	r3, [pc, #128]	@ (800d418 <McpsIndication+0xc4>)
 800d396:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	78da      	ldrb	r2, [r3, #3]
 800d39c:	4b1e      	ldr	r3, [pc, #120]	@ (800d418 <McpsIndication+0xc4>)
 800d39e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d418 <McpsIndication+0xc4>)
 800d3a6:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	78db      	ldrb	r3, [r3, #3]
 800d3ac:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	7b1b      	ldrb	r3, [r3, #12]
 800d3b2:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800d3ba:	4b18      	ldr	r3, [pc, #96]	@ (800d41c <McpsIndication+0xc8>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d007      	beq.n	800d3d4 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800d3c4:	4b15      	ldr	r3, [pc, #84]	@ (800d41c <McpsIndication+0xc8>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ca:	f107 0210 	add.w	r2, r7, #16
 800d3ce:	4912      	ldr	r1, [pc, #72]	@ (800d418 <McpsIndication+0xc4>)
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800d3d4:	4b11      	ldr	r3, [pc, #68]	@ (800d41c <McpsIndication+0xc8>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d007      	beq.n	800d3ee <McpsIndication+0x9a>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	7e1b      	ldrb	r3, [r3, #24]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d003      	beq.n	800d3ee <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d3e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d41c <McpsIndication+0xc8>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3ec:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d3ee:	6879      	ldr	r1, [r7, #4]
 800d3f0:	2001      	movs	r0, #1
 800d3f2:	f000 f98f 	bl	800d714 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800d3f6:	f107 030f 	add.w	r3, r7, #15
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff ff10 	bl	800d220 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	795b      	ldrb	r3, [r3, #5]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d004      	beq.n	800d412 <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800d408:	4b05      	ldr	r3, [pc, #20]	@ (800d420 <McpsIndication+0xcc>)
 800d40a:	2201      	movs	r2, #1
 800d40c:	701a      	strb	r2, [r3, #0]
 800d40e:	e000      	b.n	800d412 <McpsIndication+0xbe>
        return;
 800d410:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800d412:	3718      	adds	r7, #24
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	200000bc 	.word	0x200000bc
 800d41c:	20000650 	.word	0x20000650
 800d420:	20000680 	.word	0x20000680

0800d424 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b08c      	sub	sp, #48	@ 0x30
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800d42c:	4b49      	ldr	r3, [pc, #292]	@ (800d554 <MlmeConfirm+0x130>)
 800d42e:	2200      	movs	r2, #0
 800d430:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	785a      	ldrb	r2, [r3, #1]
 800d436:	4b47      	ldr	r3, [pc, #284]	@ (800d554 <MlmeConfirm+0x130>)
 800d438:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800d43a:	4b47      	ldr	r3, [pc, #284]	@ (800d558 <MlmeConfirm+0x134>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d440:	2b00      	cmp	r3, #0
 800d442:	d004      	beq.n	800d44e <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d444:	4b44      	ldr	r3, [pc, #272]	@ (800d558 <MlmeConfirm+0x134>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d44a:	4842      	ldr	r0, [pc, #264]	@ (800d554 <MlmeConfirm+0x130>)
 800d44c:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d44e:	6879      	ldr	r1, [r7, #4]
 800d450:	2002      	movs	r0, #2
 800d452:	f000 f95f 	bl	800d714 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	3b01      	subs	r3, #1
 800d45c:	2b0b      	cmp	r3, #11
 800d45e:	d872      	bhi.n	800d546 <MlmeConfirm+0x122>
 800d460:	a201      	add	r2, pc, #4	@ (adr r2, 800d468 <MlmeConfirm+0x44>)
 800d462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d466:	bf00      	nop
 800d468:	0800d499 	.word	0x0800d499
 800d46c:	0800d547 	.word	0x0800d547
 800d470:	0800d547 	.word	0x0800d547
 800d474:	0800d547 	.word	0x0800d547
 800d478:	0800d515 	.word	0x0800d515
 800d47c:	0800d547 	.word	0x0800d547
 800d480:	0800d547 	.word	0x0800d547
 800d484:	0800d547 	.word	0x0800d547
 800d488:	0800d547 	.word	0x0800d547
 800d48c:	0800d547 	.word	0x0800d547
 800d490:	0800d52d 	.word	0x0800d52d
 800d494:	0800d547 	.word	0x0800d547
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800d498:	2306      	movs	r3, #6
 800d49a:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800d49c:	f107 0308 	add.w	r3, r7, #8
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f004 ff07 	bl	80122b4 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800d4a6:	4b2d      	ldr	r3, [pc, #180]	@ (800d55c <MlmeConfirm+0x138>)
 800d4a8:	79db      	ldrb	r3, [r3, #7]
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	4611      	mov	r1, r2
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7ff fa6c 	bl	800c98c <SecureElementSetDevAddr>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d102      	bne.n	800d4c0 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	4a28      	ldr	r2, [pc, #160]	@ (800d560 <MlmeConfirm+0x13c>)
 800d4be:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d4c0:	4828      	ldr	r0, [pc, #160]	@ (800d564 <MlmeConfirm+0x140>)
 800d4c2:	f7ff fecd 	bl	800d260 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800d4c6:	4828      	ldr	r0, [pc, #160]	@ (800d568 <MlmeConfirm+0x144>)
 800d4c8:	f000 fa74 	bl	800d9b4 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d4cc:	4b21      	ldr	r3, [pc, #132]	@ (800d554 <MlmeConfirm+0x130>)
 800d4ce:	785b      	ldrb	r3, [r3, #1]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d108      	bne.n	800d4e6 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d4d4:	4b21      	ldr	r3, [pc, #132]	@ (800d55c <MlmeConfirm+0x138>)
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800d4da:	4b24      	ldr	r3, [pc, #144]	@ (800d56c <MlmeConfirm+0x148>)
 800d4dc:	785b      	ldrb	r3, [r3, #1]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7ff fe16 	bl	800d110 <LmHandlerRequestClass>
 800d4e4:	e002      	b.n	800d4ec <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d4e6:	4b1d      	ldr	r3, [pc, #116]	@ (800d55c <MlmeConfirm+0x138>)
 800d4e8:	22ff      	movs	r2, #255	@ 0xff
 800d4ea:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800d4ec:	4b1a      	ldr	r3, [pc, #104]	@ (800d558 <MlmeConfirm+0x134>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d004      	beq.n	800d500 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d4f6:	4b18      	ldr	r3, [pc, #96]	@ (800d558 <MlmeConfirm+0x134>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4fc:	4817      	ldr	r0, [pc, #92]	@ (800d55c <MlmeConfirm+0x138>)
 800d4fe:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d500:	4b14      	ldr	r3, [pc, #80]	@ (800d554 <MlmeConfirm+0x130>)
 800d502:	785b      	ldrb	r3, [r3, #1]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d120      	bne.n	800d54a <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800d508:	4b14      	ldr	r3, [pc, #80]	@ (800d55c <MlmeConfirm+0x138>)
 800d50a:	79db      	ldrb	r3, [r3, #7]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7fe ffe7 	bl	800c4e0 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800d512:	e01a      	b.n	800d54a <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800d514:	4b16      	ldr	r3, [pc, #88]	@ (800d570 <MlmeConfirm+0x14c>)
 800d516:	2201      	movs	r2, #1
 800d518:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	7a1a      	ldrb	r2, [r3, #8]
 800d51e:	4b14      	ldr	r3, [pc, #80]	@ (800d570 <MlmeConfirm+0x14c>)
 800d520:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	7a5a      	ldrb	r2, [r3, #9]
 800d526:	4b12      	ldr	r3, [pc, #72]	@ (800d570 <MlmeConfirm+0x14c>)
 800d528:	74da      	strb	r2, [r3, #19]
            }
            break;
 800d52a:	e00f      	b.n	800d54c <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	785b      	ldrb	r3, [r3, #1]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d105      	bne.n	800d540 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800d534:	4b0d      	ldr	r3, [pc, #52]	@ (800d56c <MlmeConfirm+0x148>)
 800d536:	7c1b      	ldrb	r3, [r3, #16]
 800d538:	4618      	mov	r0, r3
 800d53a:	f7ff fddd 	bl	800d0f8 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800d53e:	e005      	b.n	800d54c <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800d540:	f7ff fdbe 	bl	800d0c0 <LmHandlerDeviceTimeReq>
            break;
 800d544:	e002      	b.n	800d54c <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800d546:	bf00      	nop
 800d548:	e000      	b.n	800d54c <MlmeConfirm+0x128>
            break;
 800d54a:	bf00      	nop
    }
}
 800d54c:	bf00      	nop
 800d54e:	3730      	adds	r7, #48	@ 0x30
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	200000a0 	.word	0x200000a0
 800d558:	20000650 	.word	0x20000650
 800d55c:	20000094 	.word	0x20000094
 800d560:	200005fc 	.word	0x200005fc
 800d564:	20000098 	.word	0x20000098
 800d568:	20000099 	.word	0x20000099
 800d56c:	20000638 	.word	0x20000638
 800d570:	200000bc 	.word	0x200000bc

0800d574 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800d57e:	4b20      	ldr	r3, [pc, #128]	@ (800d600 <MlmeIndication+0x8c>)
 800d580:	2200      	movs	r2, #0
 800d582:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	785a      	ldrb	r2, [r3, #1]
 800d588:	4b1d      	ldr	r3, [pc, #116]	@ (800d600 <MlmeIndication+0x8c>)
 800d58a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	789b      	ldrb	r3, [r3, #2]
 800d590:	b25a      	sxtb	r2, r3
 800d592:	4b1b      	ldr	r3, [pc, #108]	@ (800d600 <MlmeIndication+0x8c>)
 800d594:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d59c:	b25a      	sxtb	r2, r3
 800d59e:	4b18      	ldr	r3, [pc, #96]	@ (800d600 <MlmeIndication+0x8c>)
 800d5a0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d5a8:	4b15      	ldr	r3, [pc, #84]	@ (800d600 <MlmeIndication+0x8c>)
 800d5aa:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	78da      	ldrb	r2, [r3, #3]
 800d5b0:	4b13      	ldr	r3, [pc, #76]	@ (800d600 <MlmeIndication+0x8c>)
 800d5b2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	4a11      	ldr	r2, [pc, #68]	@ (800d600 <MlmeIndication+0x8c>)
 800d5ba:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800d5bc:	4b11      	ldr	r3, [pc, #68]	@ (800d604 <MlmeIndication+0x90>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d00d      	beq.n	800d5e2 <MlmeIndication+0x6e>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	2b0a      	cmp	r3, #10
 800d5cc:	d009      	beq.n	800d5e2 <MlmeIndication+0x6e>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b0e      	cmp	r3, #14
 800d5d4:	d005      	beq.n	800d5e2 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d5d6:	4b0b      	ldr	r3, [pc, #44]	@ (800d604 <MlmeIndication+0x90>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5dc:	4908      	ldr	r1, [pc, #32]	@ (800d600 <MlmeIndication+0x8c>)
 800d5de:	2000      	movs	r0, #0
 800d5e0:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	2003      	movs	r0, #3
 800d5e6:	f000 f895 	bl	800d714 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	2b0a      	cmp	r3, #10
 800d5f0:	d001      	beq.n	800d5f6 <MlmeIndication+0x82>
 800d5f2:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800d5f4:	e000      	b.n	800d5f8 <MlmeIndication+0x84>
            break;
 800d5f6:	bf00      	nop
    }
}
 800d5f8:	bf00      	nop
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	200000bc 	.word	0x200000bc
 800d604:	20000650 	.word	0x20000650

0800d608 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	4603      	mov	r3, r0
 800d610:	6039      	str	r1, [r7, #0]
 800d612:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d614:	2300      	movs	r3, #0
 800d616:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d618:	79fb      	ldrb	r3, [r7, #7]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d104      	bne.n	800d628 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800d61e:	f000 fa8b 	bl	800db38 <LmhpCompliancePackageFactory>
 800d622:	4603      	mov	r3, r0
 800d624:	60fb      	str	r3, [r7, #12]
                break;
 800d626:	e00d      	b.n	800d644 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800d628:	f107 020c 	add.w	r2, r7, #12
 800d62c:	79fb      	ldrb	r3, [r7, #7]
 800d62e:	4611      	mov	r1, r2
 800d630:	4618      	mov	r0, r3
 800d632:	f000 ff73 	bl	800e51c <LmhpPackagesRegister>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800d63c:	f04f 33ff 	mov.w	r3, #4294967295
 800d640:	e03b      	b.n	800d6ba <LmHandlerPackageRegister+0xb2>
                }
                break;
 800d642:	bf00      	nop
            }
    }
    if( package != NULL )
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d035      	beq.n	800d6b6 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800d64a:	79fb      	ldrb	r3, [r7, #7]
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	491d      	ldr	r1, [pc, #116]	@ (800d6c4 <LmHandlerPackageRegister+0xbc>)
 800d650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d654:	79fb      	ldrb	r3, [r7, #7]
 800d656:	4a1b      	ldr	r2, [pc, #108]	@ (800d6c4 <LmHandlerPackageRegister+0xbc>)
 800d658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d65c:	4a1a      	ldr	r2, [pc, #104]	@ (800d6c8 <LmHandlerPackageRegister+0xc0>)
 800d65e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d660:	4b1a      	ldr	r3, [pc, #104]	@ (800d6cc <LmHandlerPackageRegister+0xc4>)
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	79fb      	ldrb	r3, [r7, #7]
 800d666:	4917      	ldr	r1, [pc, #92]	@ (800d6c4 <LmHandlerPackageRegister+0xbc>)
 800d668:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d66c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d66e:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d670:	4b16      	ldr	r3, [pc, #88]	@ (800d6cc <LmHandlerPackageRegister+0xc4>)
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	79fb      	ldrb	r3, [r7, #7]
 800d676:	4913      	ldr	r1, [pc, #76]	@ (800d6c4 <LmHandlerPackageRegister+0xbc>)
 800d678:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d67c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d67e:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d680:	79fb      	ldrb	r3, [r7, #7]
 800d682:	4a10      	ldr	r2, [pc, #64]	@ (800d6c4 <LmHandlerPackageRegister+0xbc>)
 800d684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d688:	4a11      	ldr	r2, [pc, #68]	@ (800d6d0 <LmHandlerPackageRegister+0xc8>)
 800d68a:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d68c:	4b0f      	ldr	r3, [pc, #60]	@ (800d6cc <LmHandlerPackageRegister+0xc4>)
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	79fb      	ldrb	r3, [r7, #7]
 800d692:	490c      	ldr	r1, [pc, #48]	@ (800d6c4 <LmHandlerPackageRegister+0xbc>)
 800d694:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d698:	6992      	ldr	r2, [r2, #24]
 800d69a:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d69c:	79fb      	ldrb	r3, [r7, #7]
 800d69e:	4a09      	ldr	r2, [pc, #36]	@ (800d6c4 <LmHandlerPackageRegister+0xbc>)
 800d6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6a4:	685b      	ldr	r3, [r3, #4]
 800d6a6:	4a0b      	ldr	r2, [pc, #44]	@ (800d6d4 <LmHandlerPackageRegister+0xcc>)
 800d6a8:	6851      	ldr	r1, [r2, #4]
 800d6aa:	4a0a      	ldr	r2, [pc, #40]	@ (800d6d4 <LmHandlerPackageRegister+0xcc>)
 800d6ac:	7852      	ldrb	r2, [r2, #1]
 800d6ae:	6838      	ldr	r0, [r7, #0]
 800d6b0:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	e001      	b.n	800d6ba <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d6b6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	20000624 	.word	0x20000624
 800d6c8:	0800cda9 	.word	0x0800cda9
 800d6cc:	20000650 	.word	0x20000650
 800d6d0:	0800d0c1 	.word	0x0800d0c1
 800d6d4:	200000d0 	.word	0x200000d0

0800d6d8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	4603      	mov	r3, r0
 800d6e0:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	2b04      	cmp	r3, #4
 800d6e6:	d80e      	bhi.n	800d706 <LmHandlerPackageIsInitialized+0x2e>
 800d6e8:	79fb      	ldrb	r3, [r7, #7]
 800d6ea:	4a09      	ldr	r2, [pc, #36]	@ (800d710 <LmHandlerPackageIsInitialized+0x38>)
 800d6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d007      	beq.n	800d706 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d6f6:	79fb      	ldrb	r3, [r7, #7]
 800d6f8:	4a05      	ldr	r2, [pc, #20]	@ (800d710 <LmHandlerPackageIsInitialized+0x38>)
 800d6fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	4798      	blx	r3
 800d702:	4603      	mov	r3, r0
 800d704:	e000      	b.n	800d708 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d706:	2300      	movs	r3, #0
    }
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	20000624 	.word	0x20000624

0800d714 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	4603      	mov	r3, r0
 800d71c:	6039      	str	r1, [r7, #0]
 800d71e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d720:	2300      	movs	r3, #0
 800d722:	73fb      	strb	r3, [r7, #15]
 800d724:	e067      	b.n	800d7f6 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800d726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d72a:	4a37      	ldr	r2, [pc, #220]	@ (800d808 <LmHandlerPackagesNotify+0xf4>)
 800d72c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d05a      	beq.n	800d7ea <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800d734:	79fb      	ldrb	r3, [r7, #7]
 800d736:	2b03      	cmp	r3, #3
 800d738:	d84e      	bhi.n	800d7d8 <LmHandlerPackagesNotify+0xc4>
 800d73a:	a201      	add	r2, pc, #4	@ (adr r2, 800d740 <LmHandlerPackagesNotify+0x2c>)
 800d73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d740:	0800d751 	.word	0x0800d751
 800d744:	0800d773 	.word	0x0800d773
 800d748:	0800d795 	.word	0x0800d795
 800d74c:	0800d7b7 	.word	0x0800d7b7
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d754:	4a2c      	ldr	r2, [pc, #176]	@ (800d808 <LmHandlerPackagesNotify+0xf4>)
 800d756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d03d      	beq.n	800d7dc <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800d760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d764:	4a28      	ldr	r2, [pc, #160]	@ (800d808 <LmHandlerPackagesNotify+0xf4>)
 800d766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d76a:	699b      	ldr	r3, [r3, #24]
 800d76c:	6838      	ldr	r0, [r7, #0]
 800d76e:	4798      	blx	r3
                        }
                        break;
 800d770:	e034      	b.n	800d7dc <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d776:	4a24      	ldr	r2, [pc, #144]	@ (800d808 <LmHandlerPackagesNotify+0xf4>)
 800d778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d77c:	69db      	ldr	r3, [r3, #28]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d02e      	beq.n	800d7e0 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800d782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d786:	4a20      	ldr	r2, [pc, #128]	@ (800d808 <LmHandlerPackagesNotify+0xf4>)
 800d788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d78c:	69db      	ldr	r3, [r3, #28]
 800d78e:	6838      	ldr	r0, [r7, #0]
 800d790:	4798      	blx	r3
                        }
                        break;
 800d792:	e025      	b.n	800d7e0 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d798:	4a1b      	ldr	r2, [pc, #108]	@ (800d808 <LmHandlerPackagesNotify+0xf4>)
 800d79a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d79e:	6a1b      	ldr	r3, [r3, #32]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d01f      	beq.n	800d7e4 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800d7a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7a8:	4a17      	ldr	r2, [pc, #92]	@ (800d808 <LmHandlerPackagesNotify+0xf4>)
 800d7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7ae:	6a1b      	ldr	r3, [r3, #32]
 800d7b0:	6838      	ldr	r0, [r7, #0]
 800d7b2:	4798      	blx	r3
                        }
                        break;
 800d7b4:	e016      	b.n	800d7e4 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d7b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7ba:	4a13      	ldr	r2, [pc, #76]	@ (800d808 <LmHandlerPackagesNotify+0xf4>)
 800d7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d010      	beq.n	800d7e8 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d7c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7ca:	4a0f      	ldr	r2, [pc, #60]	@ (800d808 <LmHandlerPackagesNotify+0xf4>)
 800d7cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d2:	6838      	ldr	r0, [r7, #0]
 800d7d4:	4798      	blx	r3
                        }
                        break;
 800d7d6:	e007      	b.n	800d7e8 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800d7d8:	bf00      	nop
 800d7da:	e006      	b.n	800d7ea <LmHandlerPackagesNotify+0xd6>
                        break;
 800d7dc:	bf00      	nop
 800d7de:	e004      	b.n	800d7ea <LmHandlerPackagesNotify+0xd6>
                        break;
 800d7e0:	bf00      	nop
 800d7e2:	e002      	b.n	800d7ea <LmHandlerPackagesNotify+0xd6>
                        break;
 800d7e4:	bf00      	nop
 800d7e6:	e000      	b.n	800d7ea <LmHandlerPackagesNotify+0xd6>
                        break;
 800d7e8:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d7ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	73fb      	strb	r3, [r7, #15]
 800d7f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7fa:	2b04      	cmp	r3, #4
 800d7fc:	dd93      	ble.n	800d726 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800d7fe:	bf00      	nop
 800d800:	bf00      	nop
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	20000624 	.word	0x20000624

0800d80c <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d812:	2300      	movs	r3, #0
 800d814:	71fb      	strb	r3, [r7, #7]
 800d816:	e018      	b.n	800d84a <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800d818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d81c:	4a0f      	ldr	r2, [pc, #60]	@ (800d85c <LmHandlerPackageIsTxPending+0x50>)
 800d81e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d00b      	beq.n	800d83e <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d82a:	4a0c      	ldr	r2, [pc, #48]	@ (800d85c <LmHandlerPackageIsTxPending+0x50>)
 800d82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	4798      	blx	r3
 800d834:	4603      	mov	r3, r0
 800d836:	2b00      	cmp	r3, #0
 800d838:	d001      	beq.n	800d83e <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d83a:	2301      	movs	r3, #1
 800d83c:	e00a      	b.n	800d854 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d83e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d842:	b2db      	uxtb	r3, r3
 800d844:	3301      	adds	r3, #1
 800d846:	b2db      	uxtb	r3, r3
 800d848:	71fb      	strb	r3, [r7, #7]
 800d84a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d84e:	2b04      	cmp	r3, #4
 800d850:	dde2      	ble.n	800d818 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3708      	adds	r7, #8
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	20000624 	.word	0x20000624

0800d860 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d866:	2300      	movs	r3, #0
 800d868:	71fb      	strb	r3, [r7, #7]
 800d86a:	e022      	b.n	800d8b2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d86c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d870:	4a14      	ldr	r2, [pc, #80]	@ (800d8c4 <LmHandlerPackagesProcess+0x64>)
 800d872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d015      	beq.n	800d8a6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d87a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d87e:	4a11      	ldr	r2, [pc, #68]	@ (800d8c4 <LmHandlerPackagesProcess+0x64>)
 800d880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d884:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00d      	beq.n	800d8a6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d88a:	79fb      	ldrb	r3, [r7, #7]
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7ff ff23 	bl	800d6d8 <LmHandlerPackageIsInitialized>
 800d892:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d894:	2b00      	cmp	r3, #0
 800d896:	d006      	beq.n	800d8a6 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d89c:	4a09      	ldr	r2, [pc, #36]	@ (800d8c4 <LmHandlerPackagesProcess+0x64>)
 800d89e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8a2:	691b      	ldr	r3, [r3, #16]
 800d8a4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d8a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	71fb      	strb	r3, [r7, #7]
 800d8b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8b6:	2b04      	cmp	r3, #4
 800d8b8:	ddd8      	ble.n	800d86c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d8ba:	bf00      	nop
 800d8bc:	bf00      	nop
 800d8be:	3708      	adds	r7, #8
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	20000624 	.word	0x20000624

0800d8c8 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d8d2:	4a09      	ldr	r2, [pc, #36]	@ (800d8f8 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800d8d4:	79fb      	ldrb	r3, [r7, #7]
 800d8d6:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800d8d8:	4b08      	ldr	r3, [pc, #32]	@ (800d8fc <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d005      	beq.n	800d8ee <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800d8e2:	4b06      	ldr	r3, [pc, #24]	@ (800d8fc <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8e8:	79fa      	ldrb	r2, [r7, #7]
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	4798      	blx	r3
    }
}
 800d8ee:	bf00      	nop
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20000638 	.word	0x20000638
 800d8fc:	20000650 	.word	0x20000650

0800d900 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	4603      	mov	r3, r0
 800d908:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d90a:	4a09      	ldr	r2, [pc, #36]	@ (800d930 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800d910:	4b08      	ldr	r3, [pc, #32]	@ (800d934 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d916:	2b00      	cmp	r3, #0
 800d918:	d005      	beq.n	800d926 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800d91a:	4b06      	ldr	r3, [pc, #24]	@ (800d934 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d920:	79fa      	ldrb	r2, [r7, #7]
 800d922:	4610      	mov	r0, r2
 800d924:	4798      	blx	r3
    }
}
 800d926:	bf00      	nop
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	20000638 	.word	0x20000638
 800d934:	20000650 	.word	0x20000650

0800d938 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	4603      	mov	r3, r0
 800d940:	6039      	str	r1, [r7, #0]
 800d942:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d102      	bne.n	800d950 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d94a:	f04f 33ff 	mov.w	r3, #4294967295
 800d94e:	e00e      	b.n	800d96e <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800d950:	79fb      	ldrb	r3, [r7, #7]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d002      	beq.n	800d95c <LmHandlerGetVersion+0x24>
 800d956:	2b01      	cmp	r3, #1
 800d958:	d004      	beq.n	800d964 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800d95a:	e007      	b.n	800d96c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	4a06      	ldr	r2, [pc, #24]	@ (800d978 <LmHandlerGetVersion+0x40>)
 800d960:	601a      	str	r2, [r3, #0]
            break;
 800d962:	e003      	b.n	800d96c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	4a05      	ldr	r2, [pc, #20]	@ (800d97c <LmHandlerGetVersion+0x44>)
 800d968:	601a      	str	r2, [r3, #0]
            break;
 800d96a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d96c:	2300      	movs	r3, #0
}
 800d96e:	4618      	mov	r0, r3
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	bc80      	pop	{r7}
 800d976:	4770      	bx	lr
 800d978:	01000400 	.word	0x01000400
 800d97c:	02010003 	.word	0x02010003

0800d980 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800d984:	f005 fd72 	bl	801346c <LoRaMacDeInitialization>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d101      	bne.n	800d992 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d98e:	2300      	movs	r3, #0
 800d990:	e001      	b.n	800d996 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d992:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d996:	4618      	mov	r0, r3
 800d998:	bd80      	pop	{r7, pc}

0800d99a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800d99a:	b580      	push	{r7, lr}
 800d99c:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800d99e:	f004 fbc1 	bl	8012124 <LoRaMacHalt>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d101      	bne.n	800d9ac <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	e001      	b.n	800d9b0 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d9ac:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b08c      	sub	sp, #48	@ 0x30
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d102      	bne.n	800d9c8 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c6:	e016      	b.n	800d9f6 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800d9c8:	2321      	movs	r3, #33	@ 0x21
 800d9ca:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d9cc:	f107 0308 	add.w	r3, r7, #8
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f004 fc6f 	bl	80122b4 <LoRaMacMibGetRequestConfirm>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e0:	e009      	b.n	800d9f6 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800d9e2:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f993 2000 	ldrsb.w	r2, [r3]
 800d9f0:	4b03      	ldr	r3, [pc, #12]	@ (800da00 <LmHandlerGetTxPower+0x4c>)
 800d9f2:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3730      	adds	r7, #48	@ 0x30
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	20000638 	.word	0x20000638

0800da04 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b08e      	sub	sp, #56	@ 0x38
 800da08:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800da0a:	2300      	movs	r3, #0
 800da0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800da14:	f7ff ffc1 	bl	800d99a <LmHandlerHalt>
 800da18:	4603      	mov	r3, r0
 800da1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800da1e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800da22:	2b00      	cmp	r3, #0
 800da24:	d12f      	bne.n	800da86 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800da26:	f000 f859 	bl	800dadc <NvmDataMgmtStoreBegin>
 800da2a:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800da2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da2e:	f113 0f02 	cmn.w	r3, #2
 800da32:	d103      	bne.n	800da3c <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800da34:	23f8      	movs	r3, #248	@ 0xf8
 800da36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800da3a:	e01c      	b.n	800da76 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800da3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d104      	bne.n	800da4c <LmHandlerNvmDataStore+0x48>
 800da42:	4b1b      	ldr	r3, [pc, #108]	@ (800dab0 <LmHandlerNvmDataStore+0xac>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	695b      	ldr	r3, [r3, #20]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d103      	bne.n	800da54 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800da4c:	23ff      	movs	r3, #255	@ 0xff
 800da4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800da52:	e010      	b.n	800da76 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800da54:	2327      	movs	r3, #39	@ 0x27
 800da56:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800da58:	463b      	mov	r3, r7
 800da5a:	4618      	mov	r0, r3
 800da5c:	f004 fc2a 	bl	80122b4 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800da64:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800da68:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800da6a:	4b11      	ldr	r3, [pc, #68]	@ (800dab0 <LmHandlerNvmDataStore+0xac>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	695b      	ldr	r3, [r3, #20]
 800da70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da74:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800da76:	f000 f847 	bl	800db08 <NvmDataMgmtStoreEnd>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d002      	beq.n	800da86 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800da80:	23ff      	movs	r3, #255	@ 0xff
 800da82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800da86:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d109      	bne.n	800daa2 <LmHandlerNvmDataStore+0x9e>
 800da8e:	4b08      	ldr	r3, [pc, #32]	@ (800dab0 <LmHandlerNvmDataStore+0xac>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	69db      	ldr	r3, [r3, #28]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d004      	beq.n	800daa2 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800da98:	4b05      	ldr	r3, [pc, #20]	@ (800dab0 <LmHandlerNvmDataStore+0xac>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	69db      	ldr	r3, [r3, #28]
 800da9e:	2001      	movs	r0, #1
 800daa0:	4798      	blx	r3
    }

    return lmhStatus;
 800daa2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3738      	adds	r7, #56	@ 0x38
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	20000650 	.word	0x20000650

0800dab4 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	4603      	mov	r3, r0
 800dabc:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800dabe:	4b06      	ldr	r3, [pc, #24]	@ (800dad8 <NvmDataMgmtEvent+0x24>)
 800dac0:	881a      	ldrh	r2, [r3, #0]
 800dac2:	88fb      	ldrh	r3, [r7, #6]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	4b03      	ldr	r3, [pc, #12]	@ (800dad8 <NvmDataMgmtEvent+0x24>)
 800daca:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800dacc:	bf00      	nop
 800dace:	370c      	adds	r7, #12
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bc80      	pop	{r7}
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	20000778 	.word	0x20000778

0800dadc <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800dae0:	4b08      	ldr	r3, [pc, #32]	@ (800db04 <NvmDataMgmtStoreBegin+0x28>)
 800dae2:	881b      	ldrh	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d102      	bne.n	800daee <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800dae8:	f06f 0301 	mvn.w	r3, #1
 800daec:	e008      	b.n	800db00 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800daee:	f004 faf1 	bl	80120d4 <LoRaMacStop>
 800daf2:	4603      	mov	r3, r0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d002      	beq.n	800dafe <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800daf8:	f06f 0302 	mvn.w	r3, #2
 800dafc:	e000      	b.n	800db00 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800dafe:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800db00:	4618      	mov	r0, r3
 800db02:	bd80      	pop	{r7, pc}
 800db04:	20000778 	.word	0x20000778

0800db08 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800db0c:	4b03      	ldr	r3, [pc, #12]	@ (800db1c <NvmDataMgmtStoreEnd+0x14>)
 800db0e:	2200      	movs	r2, #0
 800db10:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800db12:	f004 fad1 	bl	80120b8 <LoRaMacStart>
    return NVM_DATA_OK;
 800db16:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800db18:	4618      	mov	r0, r3
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	20000778 	.word	0x20000778

0800db20 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800db20:	b580      	push	{r7, lr}
 800db22:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800db24:	2220      	movs	r2, #32
 800db26:	2100      	movs	r1, #0
 800db28:	4802      	ldr	r0, [pc, #8]	@ (800db34 <ClassBStatusReset+0x14>)
 800db2a:	f009 ffad 	bl	8017a88 <memset1>
}
 800db2e:	bf00      	nop
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	20000790 	.word	0x20000790

0800db38 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800db38:	b480      	push	{r7}
 800db3a:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800db3c:	4b02      	ldr	r3, [pc, #8]	@ (800db48 <LmhpCompliancePackageFactory+0x10>)
}
 800db3e:	4618      	mov	r0, r3
 800db40:	46bd      	mov	sp, r7
 800db42:	bc80      	pop	{r7}
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop
 800db48:	200000d8 	.word	0x200000d8

0800db4c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af02      	add	r7, sp, #8
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	4613      	mov	r3, r2
 800db58:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d018      	beq.n	800db92 <LmhpComplianceInit+0x46>
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d015      	beq.n	800db92 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800db66:	4a19      	ldr	r2, [pc, #100]	@ (800dbcc <LmhpComplianceInit+0x80>)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800db6c:	4a18      	ldr	r2, [pc, #96]	@ (800dbd0 <LmhpComplianceInit+0x84>)
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800db72:	4a17      	ldr	r2, [pc, #92]	@ (800dbd0 <LmhpComplianceInit+0x84>)
 800db74:	79fb      	ldrb	r3, [r7, #7]
 800db76:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800db78:	4b15      	ldr	r3, [pc, #84]	@ (800dbd0 <LmhpComplianceInit+0x84>)
 800db7a:	2201      	movs	r2, #1
 800db7c:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800db7e:	2300      	movs	r3, #0
 800db80:	9300      	str	r3, [sp, #0]
 800db82:	4b14      	ldr	r3, [pc, #80]	@ (800dbd4 <LmhpComplianceInit+0x88>)
 800db84:	2200      	movs	r2, #0
 800db86:	f04f 31ff 	mov.w	r1, #4294967295
 800db8a:	4813      	ldr	r0, [pc, #76]	@ (800dbd8 <LmhpComplianceInit+0x8c>)
 800db8c:	f00d fff0 	bl	801bb70 <UTIL_TIMER_Create>
 800db90:	e005      	b.n	800db9e <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800db92:	4b0e      	ldr	r3, [pc, #56]	@ (800dbcc <LmhpComplianceInit+0x80>)
 800db94:	2200      	movs	r2, #0
 800db96:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800db98:	4b0d      	ldr	r3, [pc, #52]	@ (800dbd0 <LmhpComplianceInit+0x84>)
 800db9a:	2200      	movs	r2, #0
 800db9c:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800db9e:	4b0c      	ldr	r3, [pc, #48]	@ (800dbd0 <LmhpComplianceInit+0x84>)
 800dba0:	2200      	movs	r2, #0
 800dba2:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800dba4:	f7ff ffbc 	bl	800db20 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800dba8:	4b09      	ldr	r3, [pc, #36]	@ (800dbd0 <LmhpComplianceInit+0x84>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800dbae:	4b08      	ldr	r3, [pc, #32]	@ (800dbd0 <LmhpComplianceInit+0x84>)
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800dbb4:	4b06      	ldr	r3, [pc, #24]	@ (800dbd0 <LmhpComplianceInit+0x84>)
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800dbbc:	4b04      	ldr	r3, [pc, #16]	@ (800dbd0 <LmhpComplianceInit+0x84>)
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800dbc4:	bf00      	nop
 800dbc6:	3710      	adds	r7, #16
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	200007b4 	.word	0x200007b4
 800dbd0:	2000077c 	.word	0x2000077c
 800dbd4:	0800e4d5 	.word	0x0800e4d5
 800dbd8:	200007b8 	.word	0x200007b8

0800dbdc <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800dbdc:	b480      	push	{r7}
 800dbde:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800dbe0:	4b02      	ldr	r3, [pc, #8]	@ (800dbec <LmhpComplianceIsInitialized+0x10>)
 800dbe2:	781b      	ldrb	r3, [r3, #0]
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bc80      	pop	{r7}
 800dbea:	4770      	bx	lr
 800dbec:	2000077c 	.word	0x2000077c

0800dbf0 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800dbf4:	4b02      	ldr	r3, [pc, #8]	@ (800dc00 <LmhpComplianceIsTxPending+0x10>)
 800dbf6:	785b      	ldrb	r3, [r3, #1]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bc80      	pop	{r7}
 800dbfe:	4770      	bx	lr
 800dc00:	2000077c 	.word	0x2000077c

0800dc04 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800dc04:	b590      	push	{r4, r7, lr}
 800dc06:	b085      	sub	sp, #20
 800dc08:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800dc0a:	4b33      	ldr	r3, [pc, #204]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dc0c:	785b      	ldrb	r3, [r3, #1]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d03e      	beq.n	800dc90 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800dc12:	f00e f96b 	bl	801beec <UTIL_TIMER_GetCurrentTime>
 800dc16:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800dc18:	4b2f      	ldr	r3, [pc, #188]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dc1a:	685c      	ldr	r4, [r3, #4]
 800dc1c:	f7ff f8ba 	bl	800cd94 <LmHandlerGetDutyCycleWaitTime>
 800dc20:	4603      	mov	r3, r0
 800dc22:	4423      	add	r3, r4
 800dc24:	68fa      	ldr	r2, [r7, #12]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d941      	bls.n	800dcae <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800dc2a:	4b2b      	ldr	r3, [pc, #172]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dc2c:	7a9b      	ldrb	r3, [r3, #10]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d03d      	beq.n	800dcae <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800dc32:	23e0      	movs	r3, #224	@ 0xe0
 800dc34:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800dc36:	4b28      	ldr	r3, [pc, #160]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dc38:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800dc3a:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800dc3c:	4b26      	ldr	r3, [pc, #152]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dc3e:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800dc40:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800dc42:	23ff      	movs	r3, #255	@ 0xff
 800dc44:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800dc46:	4b24      	ldr	r3, [pc, #144]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dc48:	7a19      	ldrb	r1, [r3, #8]
 800dc4a:	463b      	mov	r3, r7
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff f968 	bl	800cf24 <LmHandlerSend>
 800dc54:	4603      	mov	r3, r0
 800dc56:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800dc58:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d004      	beq.n	800dc6a <LmhpComplianceProcess+0x66>
 800dc60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dc64:	f113 0f07 	cmn.w	r3, #7
 800dc68:	d106      	bne.n	800dc78 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800dc6a:	4b1b      	ldr	r3, [pc, #108]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800dc70:	4b19      	ldr	r3, [pc, #100]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	729a      	strb	r2, [r3, #10]
 800dc76:	e007      	b.n	800dc88 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800dc78:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800dc7c:	4817      	ldr	r0, [pc, #92]	@ (800dcdc <LmhpComplianceProcess+0xd8>)
 800dc7e:	f00e f88b 	bl	801bd98 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800dc82:	4816      	ldr	r0, [pc, #88]	@ (800dcdc <LmhpComplianceProcess+0xd8>)
 800dc84:	f00d ffaa 	bl	801bbdc <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800dc88:	4a13      	ldr	r2, [pc, #76]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	6053      	str	r3, [r2, #4]
 800dc8e:	e00e      	b.n	800dcae <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800dc90:	4b11      	ldr	r3, [pc, #68]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dc92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d009      	beq.n	800dcae <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800dc9a:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800dca2:	4b0d      	ldr	r3, [pc, #52]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dca4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7ff fa31 	bl	800d110 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800dcae:	4b0a      	ldr	r3, [pc, #40]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dcb0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00a      	beq.n	800dcce <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800dcb8:	4b07      	ldr	r3, [pc, #28]	@ (800dcd8 <LmhpComplianceProcess+0xd4>)
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800dcc0:	4b07      	ldr	r3, [pc, #28]	@ (800dce0 <LmhpComplianceProcess+0xdc>)
 800dcc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d002      	beq.n	800dcce <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800dcc8:	4b05      	ldr	r3, [pc, #20]	@ (800dce0 <LmhpComplianceProcess+0xdc>)
 800dcca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dccc:	4798      	blx	r3
        }
    }
}
 800dcce:	bf00      	nop
 800dcd0:	3714      	adds	r7, #20
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd90      	pop	{r4, r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	2000077c 	.word	0x2000077c
 800dcdc:	200007b8 	.word	0x200007b8
 800dce0:	200000d8 	.word	0x200000d8

0800dce4 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800dce4:	b5b0      	push	{r4, r5, r7, lr}
 800dce6:	b0a4      	sub	sp, #144	@ 0x90
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800dcec:	2300      	movs	r3, #0
 800dcee:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800dcf2:	4bd0      	ldr	r3, [pc, #832]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	f083 0301 	eor.w	r3, r3, #1
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f040 83bf 	bne.w	800e480 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	78db      	ldrb	r3, [r3, #3]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d103      	bne.n	800dd12 <LmhpComplianceOnMcpsIndication+0x2e>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	7b9b      	ldrb	r3, [r3, #14]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d005      	beq.n	800dd1e <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800dd12:	4bc8      	ldr	r3, [pc, #800]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd14:	8a1b      	ldrh	r3, [r3, #16]
 800dd16:	3301      	adds	r3, #1
 800dd18:	b29a      	uxth	r2, r3
 800dd1a:	4bc6      	ldr	r3, [pc, #792]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd1c:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	7b5b      	ldrb	r3, [r3, #13]
 800dd22:	f083 0301 	eor.w	r3, r3, #1
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f040 83ab 	bne.w	800e484 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	78db      	ldrb	r3, [r3, #3]
 800dd32:	2be0      	cmp	r3, #224	@ 0xe0
 800dd34:	f040 83a8 	bne.w	800e488 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800dd38:	4bbe      	ldr	r3, [pc, #760]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	689a      	ldr	r2, [r3, #8]
 800dd42:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dd46:	1c59      	adds	r1, r3, #1
 800dd48:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dd4c:	4413      	add	r3, r2
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd52:	f200 8372 	bhi.w	800e43a <LmhpComplianceOnMcpsIndication+0x756>
 800dd56:	a201      	add	r2, pc, #4	@ (adr r2, 800dd5c <LmhpComplianceOnMcpsIndication+0x78>)
 800dd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd5c:	0800df5d 	.word	0x0800df5d
 800dd60:	0800dfa1 	.word	0x0800dfa1
 800dd64:	0800dfab 	.word	0x0800dfab
 800dd68:	0800dfc1 	.word	0x0800dfc1
 800dd6c:	0800dfe3 	.word	0x0800dfe3
 800dd70:	0800e011 	.word	0x0800e011
 800dd74:	0800e03d 	.word	0x0800e03d
 800dd78:	0800e09b 	.word	0x0800e09b
 800dd7c:	0800e0f3 	.word	0x0800e0f3
 800dd80:	0800e15f 	.word	0x0800e15f
 800dd84:	0800e1af 	.word	0x0800e1af
 800dd88:	0800e43b 	.word	0x0800e43b
 800dd8c:	0800e43b 	.word	0x0800e43b
 800dd90:	0800e43b 	.word	0x0800e43b
 800dd94:	0800e43b 	.word	0x0800e43b
 800dd98:	0800e43b 	.word	0x0800e43b
 800dd9c:	0800e43b 	.word	0x0800e43b
 800dda0:	0800e43b 	.word	0x0800e43b
 800dda4:	0800e43b 	.word	0x0800e43b
 800dda8:	0800e43b 	.word	0x0800e43b
 800ddac:	0800e43b 	.word	0x0800e43b
 800ddb0:	0800e43b 	.word	0x0800e43b
 800ddb4:	0800e43b 	.word	0x0800e43b
 800ddb8:	0800e43b 	.word	0x0800e43b
 800ddbc:	0800e43b 	.word	0x0800e43b
 800ddc0:	0800e43b 	.word	0x0800e43b
 800ddc4:	0800e43b 	.word	0x0800e43b
 800ddc8:	0800e43b 	.word	0x0800e43b
 800ddcc:	0800e43b 	.word	0x0800e43b
 800ddd0:	0800e43b 	.word	0x0800e43b
 800ddd4:	0800e43b 	.word	0x0800e43b
 800ddd8:	0800e43b 	.word	0x0800e43b
 800dddc:	0800e1b7 	.word	0x0800e1b7
 800dde0:	0800e1c9 	.word	0x0800e1c9
 800dde4:	0800e1d1 	.word	0x0800e1d1
 800dde8:	0800e43b 	.word	0x0800e43b
 800ddec:	0800e43b 	.word	0x0800e43b
 800ddf0:	0800e43b 	.word	0x0800e43b
 800ddf4:	0800e43b 	.word	0x0800e43b
 800ddf8:	0800e43b 	.word	0x0800e43b
 800ddfc:	0800e43b 	.word	0x0800e43b
 800de00:	0800e43b 	.word	0x0800e43b
 800de04:	0800e43b 	.word	0x0800e43b
 800de08:	0800e43b 	.word	0x0800e43b
 800de0c:	0800e43b 	.word	0x0800e43b
 800de10:	0800e43b 	.word	0x0800e43b
 800de14:	0800e43b 	.word	0x0800e43b
 800de18:	0800e43b 	.word	0x0800e43b
 800de1c:	0800e43b 	.word	0x0800e43b
 800de20:	0800e43b 	.word	0x0800e43b
 800de24:	0800e43b 	.word	0x0800e43b
 800de28:	0800e43b 	.word	0x0800e43b
 800de2c:	0800e43b 	.word	0x0800e43b
 800de30:	0800e43b 	.word	0x0800e43b
 800de34:	0800e43b 	.word	0x0800e43b
 800de38:	0800e43b 	.word	0x0800e43b
 800de3c:	0800e43b 	.word	0x0800e43b
 800de40:	0800e43b 	.word	0x0800e43b
 800de44:	0800e43b 	.word	0x0800e43b
 800de48:	0800e43b 	.word	0x0800e43b
 800de4c:	0800e43b 	.word	0x0800e43b
 800de50:	0800e43b 	.word	0x0800e43b
 800de54:	0800e43b 	.word	0x0800e43b
 800de58:	0800e43b 	.word	0x0800e43b
 800de5c:	0800e43b 	.word	0x0800e43b
 800de60:	0800e43b 	.word	0x0800e43b
 800de64:	0800e43b 	.word	0x0800e43b
 800de68:	0800e43b 	.word	0x0800e43b
 800de6c:	0800e43b 	.word	0x0800e43b
 800de70:	0800e43b 	.word	0x0800e43b
 800de74:	0800e43b 	.word	0x0800e43b
 800de78:	0800e43b 	.word	0x0800e43b
 800de7c:	0800e43b 	.word	0x0800e43b
 800de80:	0800e43b 	.word	0x0800e43b
 800de84:	0800e43b 	.word	0x0800e43b
 800de88:	0800e43b 	.word	0x0800e43b
 800de8c:	0800e43b 	.word	0x0800e43b
 800de90:	0800e43b 	.word	0x0800e43b
 800de94:	0800e43b 	.word	0x0800e43b
 800de98:	0800e43b 	.word	0x0800e43b
 800de9c:	0800e43b 	.word	0x0800e43b
 800dea0:	0800e43b 	.word	0x0800e43b
 800dea4:	0800e43b 	.word	0x0800e43b
 800dea8:	0800e43b 	.word	0x0800e43b
 800deac:	0800e43b 	.word	0x0800e43b
 800deb0:	0800e43b 	.word	0x0800e43b
 800deb4:	0800e43b 	.word	0x0800e43b
 800deb8:	0800e43b 	.word	0x0800e43b
 800debc:	0800e43b 	.word	0x0800e43b
 800dec0:	0800e43b 	.word	0x0800e43b
 800dec4:	0800e43b 	.word	0x0800e43b
 800dec8:	0800e43b 	.word	0x0800e43b
 800decc:	0800e43b 	.word	0x0800e43b
 800ded0:	0800e43b 	.word	0x0800e43b
 800ded4:	0800e43b 	.word	0x0800e43b
 800ded8:	0800e43b 	.word	0x0800e43b
 800dedc:	0800e43b 	.word	0x0800e43b
 800dee0:	0800e43b 	.word	0x0800e43b
 800dee4:	0800e43b 	.word	0x0800e43b
 800dee8:	0800e43b 	.word	0x0800e43b
 800deec:	0800e43b 	.word	0x0800e43b
 800def0:	0800e43b 	.word	0x0800e43b
 800def4:	0800e43b 	.word	0x0800e43b
 800def8:	0800e43b 	.word	0x0800e43b
 800defc:	0800e43b 	.word	0x0800e43b
 800df00:	0800e43b 	.word	0x0800e43b
 800df04:	0800e43b 	.word	0x0800e43b
 800df08:	0800e43b 	.word	0x0800e43b
 800df0c:	0800e43b 	.word	0x0800e43b
 800df10:	0800e43b 	.word	0x0800e43b
 800df14:	0800e43b 	.word	0x0800e43b
 800df18:	0800e43b 	.word	0x0800e43b
 800df1c:	0800e43b 	.word	0x0800e43b
 800df20:	0800e43b 	.word	0x0800e43b
 800df24:	0800e43b 	.word	0x0800e43b
 800df28:	0800e43b 	.word	0x0800e43b
 800df2c:	0800e43b 	.word	0x0800e43b
 800df30:	0800e43b 	.word	0x0800e43b
 800df34:	0800e43b 	.word	0x0800e43b
 800df38:	0800e43b 	.word	0x0800e43b
 800df3c:	0800e43b 	.word	0x0800e43b
 800df40:	0800e43b 	.word	0x0800e43b
 800df44:	0800e43b 	.word	0x0800e43b
 800df48:	0800e43b 	.word	0x0800e43b
 800df4c:	0800e43b 	.word	0x0800e43b
 800df50:	0800e203 	.word	0x0800e203
 800df54:	0800e2b5 	.word	0x0800e2b5
 800df58:	0800e2e5 	.word	0x0800e2e5
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800df5c:	4b35      	ldr	r3, [pc, #212]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800df5e:	68da      	ldr	r2, [r3, #12]
 800df60:	4b34      	ldr	r3, [pc, #208]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800df62:	7a9b      	ldrb	r3, [r3, #10]
 800df64:	1c59      	adds	r1, r3, #1
 800df66:	b2c8      	uxtb	r0, r1
 800df68:	4932      	ldr	r1, [pc, #200]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800df6a:	7288      	strb	r0, [r1, #10]
 800df6c:	4413      	add	r3, r2
 800df6e:	2200      	movs	r2, #0
 800df70:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800df72:	4b30      	ldr	r3, [pc, #192]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800df74:	68da      	ldr	r2, [r3, #12]
 800df76:	4b2f      	ldr	r3, [pc, #188]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800df78:	7a9b      	ldrb	r3, [r3, #10]
 800df7a:	1c59      	adds	r1, r3, #1
 800df7c:	b2c8      	uxtb	r0, r1
 800df7e:	492d      	ldr	r1, [pc, #180]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800df80:	7288      	strb	r0, [r1, #10]
 800df82:	4413      	add	r3, r2
 800df84:	2206      	movs	r2, #6
 800df86:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800df88:	4b2a      	ldr	r3, [pc, #168]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800df8a:	68da      	ldr	r2, [r3, #12]
 800df8c:	4b29      	ldr	r3, [pc, #164]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800df8e:	7a9b      	ldrb	r3, [r3, #10]
 800df90:	1c59      	adds	r1, r3, #1
 800df92:	b2c8      	uxtb	r0, r1
 800df94:	4927      	ldr	r1, [pc, #156]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800df96:	7288      	strb	r0, [r1, #10]
 800df98:	4413      	add	r3, r2
 800df9a:	2201      	movs	r2, #1
 800df9c:	701a      	strb	r2, [r3, #0]
                break;
 800df9e:	e257      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800dfa0:	4b24      	ldr	r3, [pc, #144]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800dfa8:	e252      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800dfaa:	4b23      	ldr	r3, [pc, #140]	@ (800e038 <LmhpComplianceOnMcpsIndication+0x354>)
 800dfac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	f000 8245 	beq.w	800e43e <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800dfb4:	4b20      	ldr	r3, [pc, #128]	@ (800e038 <LmhpComplianceOnMcpsIndication+0x354>)
 800dfb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfb8:	2101      	movs	r1, #1
 800dfba:	2002      	movs	r0, #2
 800dfbc:	4798      	blx	r3
                }
                break;
 800dfbe:	e23e      	b.n	800e43e <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	689a      	ldr	r2, [r3, #8]
 800dfc4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dfc8:	1c59      	adds	r1, r3, #1
 800dfca:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dfce:	4413      	add	r3, r2
 800dfd0:	781a      	ldrb	r2, [r3, #0]
 800dfd2:	4b18      	ldr	r3, [pc, #96]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800dfd4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800dfd8:	4b16      	ldr	r3, [pc, #88]	@ (800e034 <LmhpComplianceOnMcpsIndication+0x350>)
 800dfda:	2201      	movs	r2, #1
 800dfdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 800dfe0:	e236      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800dfe2:	2304      	movs	r3, #4
 800dfe4:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	689a      	ldr	r2, [r3, #8]
 800dfea:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dfee:	1c59      	adds	r1, r3, #1
 800dff0:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dff4:	4413      	add	r3, r2
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	bf14      	ite	ne
 800dffc:	2301      	movne	r3, #1
 800dffe:	2300      	moveq	r3, #0
 800e000:	b2db      	uxtb	r3, r3
 800e002:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800e004:	f107 0308 	add.w	r3, r7, #8
 800e008:	4618      	mov	r0, r3
 800e00a:	f004 fb2b 	bl	8012664 <LoRaMacMibSetRequestConfirm>
                break;
 800e00e:	e21f      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	689a      	ldr	r2, [r3, #8]
 800e014:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e018:	1c59      	adds	r1, r3, #1
 800e01a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e01e:	4413      	add	r3, r2
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	bf14      	ite	ne
 800e026:	2301      	movne	r3, #1
 800e028:	2300      	moveq	r3, #0
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	4618      	mov	r0, r3
 800e02e:	f005 f9f7 	bl	8013420 <LoRaMacTestSetDutyCycleOn>
                break;
 800e032:	e20d      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
 800e034:	2000077c 	.word	0x2000077c
 800e038:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800e03c:	4ba5      	ldr	r3, [pc, #660]	@ (800e2d4 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e03e:	f107 0408 	add.w	r4, r7, #8
 800e042:	461d      	mov	r5, r3
 800e044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e04a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e04c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e050:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	689a      	ldr	r2, [r3, #8]
 800e058:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e05c:	1c59      	adds	r1, r3, #1
 800e05e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e062:	4413      	add	r3, r2
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800e06a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800e06e:	2b0a      	cmp	r3, #10
 800e070:	f200 81e7 	bhi.w	800e442 <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800e074:	4b98      	ldr	r3, [pc, #608]	@ (800e2d8 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 81e1 	beq.w	800e442 <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800e080:	4b95      	ldr	r3, [pc, #596]	@ (800e2d8 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	685a      	ldr	r2, [r3, #4]
 800e086:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	3390      	adds	r3, #144	@ 0x90
 800e08e:	443b      	add	r3, r7
 800e090:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800e094:	4618      	mov	r0, r3
 800e096:	4790      	blx	r2
                    }
                }
                break;
 800e098:	e1d3      	b.n	800e442 <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	689a      	ldr	r2, [r3, #8]
 800e09e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e0a2:	1c59      	adds	r1, r3, #1
 800e0a4:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e0a8:	4413      	add	r3, r2
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800e0b0:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d004      	beq.n	800e0c2 <LmhpComplianceOnMcpsIndication+0x3de>
 800e0b8:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800e0bc:	2b02      	cmp	r3, #2
 800e0be:	f040 81c2 	bne.w	800e446 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800e0c2:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	bf14      	ite	ne
 800e0ca:	2301      	movne	r3, #1
 800e0cc:	2300      	moveq	r3, #0
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	4b82      	ldr	r3, [pc, #520]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e0d4:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800e0d6:	4b80      	ldr	r3, [pc, #512]	@ (800e2d8 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	f000 81b2 	beq.w	800e446 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800e0e2:	4b7d      	ldr	r3, [pc, #500]	@ (800e2d8 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	4a7c      	ldr	r2, [pc, #496]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e0ea:	7a12      	ldrb	r2, [r2, #8]
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	4798      	blx	r3
                    }
                }
                break;
 800e0f0:	e1a9      	b.n	800e446 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800e0f2:	4b7a      	ldr	r3, [pc, #488]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e0f4:	68da      	ldr	r2, [r3, #12]
 800e0f6:	4b79      	ldr	r3, [pc, #484]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e0f8:	7a9b      	ldrb	r3, [r3, #10]
 800e0fa:	1c59      	adds	r1, r3, #1
 800e0fc:	b2c8      	uxtb	r0, r1
 800e0fe:	4977      	ldr	r1, [pc, #476]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e100:	7288      	strb	r0, [r1, #10]
 800e102:	4413      	add	r3, r2
 800e104:	2208      	movs	r2, #8
 800e106:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800e108:	2301      	movs	r3, #1
 800e10a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800e10e:	e019      	b.n	800e144 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	689a      	ldr	r2, [r3, #8]
 800e114:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e118:	1c59      	adds	r1, r3, #1
 800e11a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e11e:	4413      	add	r3, r2
 800e120:	781a      	ldrb	r2, [r3, #0]
 800e122:	4b6e      	ldr	r3, [pc, #440]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e124:	68d9      	ldr	r1, [r3, #12]
 800e126:	4b6d      	ldr	r3, [pc, #436]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e128:	7a9b      	ldrb	r3, [r3, #10]
 800e12a:	1c58      	adds	r0, r3, #1
 800e12c:	b2c4      	uxtb	r4, r0
 800e12e:	486b      	ldr	r0, [pc, #428]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e130:	7284      	strb	r4, [r0, #10]
 800e132:	440b      	add	r3, r1
 800e134:	3201      	adds	r2, #1
 800e136:	b2d2      	uxtb	r2, r2
 800e138:	701a      	strb	r2, [r3, #0]
                     i++ )
 800e13a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800e13e:	3301      	adds	r3, #1
 800e140:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800e144:	4b65      	ldr	r3, [pc, #404]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e146:	7a5a      	ldrb	r2, [r3, #9]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	7b1b      	ldrb	r3, [r3, #12]
 800e14c:	4293      	cmp	r3, r2
 800e14e:	bf28      	it	cs
 800e150:	4613      	movcs	r3, r2
 800e152:	b2db      	uxtb	r3, r3
 800e154:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800e158:	429a      	cmp	r2, r3
 800e15a:	d3d9      	bcc.n	800e110 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800e15c:	e178      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800e15e:	4b5f      	ldr	r3, [pc, #380]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e160:	68da      	ldr	r2, [r3, #12]
 800e162:	4b5e      	ldr	r3, [pc, #376]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e164:	7a9b      	ldrb	r3, [r3, #10]
 800e166:	1c59      	adds	r1, r3, #1
 800e168:	b2c8      	uxtb	r0, r1
 800e16a:	495c      	ldr	r1, [pc, #368]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e16c:	7288      	strb	r0, [r1, #10]
 800e16e:	4413      	add	r3, r2
 800e170:	2209      	movs	r2, #9
 800e172:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800e174:	4b59      	ldr	r3, [pc, #356]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e176:	8a18      	ldrh	r0, [r3, #16]
 800e178:	4b58      	ldr	r3, [pc, #352]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e17a:	68da      	ldr	r2, [r3, #12]
 800e17c:	4b57      	ldr	r3, [pc, #348]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e17e:	7a9b      	ldrb	r3, [r3, #10]
 800e180:	1c59      	adds	r1, r3, #1
 800e182:	b2cc      	uxtb	r4, r1
 800e184:	4955      	ldr	r1, [pc, #340]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e186:	728c      	strb	r4, [r1, #10]
 800e188:	4413      	add	r3, r2
 800e18a:	b2c2      	uxtb	r2, r0
 800e18c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800e18e:	4b53      	ldr	r3, [pc, #332]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e190:	8a1b      	ldrh	r3, [r3, #16]
 800e192:	0a1b      	lsrs	r3, r3, #8
 800e194:	b298      	uxth	r0, r3
 800e196:	4b51      	ldr	r3, [pc, #324]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e198:	68da      	ldr	r2, [r3, #12]
 800e19a:	4b50      	ldr	r3, [pc, #320]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e19c:	7a9b      	ldrb	r3, [r3, #10]
 800e19e:	1c59      	adds	r1, r3, #1
 800e1a0:	b2cc      	uxtb	r4, r1
 800e1a2:	494e      	ldr	r1, [pc, #312]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e1a4:	728c      	strb	r4, [r1, #10]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	b2c2      	uxtb	r2, r0
 800e1aa:	701a      	strb	r2, [r3, #0]
                break;
 800e1ac:	e150      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800e1ae:	4b4b      	ldr	r3, [pc, #300]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	821a      	strh	r2, [r3, #16]
                break;
 800e1b4:	e14c      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800e1b6:	2305      	movs	r3, #5
 800e1b8:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800e1bc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f004 fe51 	bl	8012e68 <LoRaMacMlmeRequest>
                break;
 800e1c6:	e143      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800e1c8:	4b45      	ldr	r3, [pc, #276]	@ (800e2e0 <LmhpComplianceOnMcpsIndication+0x5fc>)
 800e1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1cc:	4798      	blx	r3
                break;
 800e1ce:	e13f      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	689a      	ldr	r2, [r3, #8]
 800e1d4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e1d8:	1c59      	adds	r1, r3, #1
 800e1da:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e1de:	4413      	add	r3, r2
 800e1e0:	781a      	ldrb	r2, [r3, #0]
 800e1e2:	4b3e      	ldr	r3, [pc, #248]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e1e4:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800e1e6:	4b3c      	ldr	r3, [pc, #240]	@ (800e2d8 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	f000 812c 	beq.w	800e44a <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800e1f2:	4b39      	ldr	r3, [pc, #228]	@ (800e2d8 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	4a38      	ldr	r2, [pc, #224]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e1fa:	7d52      	ldrb	r2, [r2, #21]
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	4798      	blx	r3
                }
                break;
 800e200:	e123      	b.n	800e44a <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	7b1b      	ldrb	r3, [r3, #12]
 800e206:	2b07      	cmp	r3, #7
 800e208:	f040 8121 	bne.w	800e44e <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800e20c:	2306      	movs	r3, #6
 800e20e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	689a      	ldr	r2, [r3, #8]
 800e216:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e21a:	4413      	add	r3, r2
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	b21a      	sxth	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6899      	ldr	r1, [r3, #8]
 800e224:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e228:	3301      	adds	r3, #1
 800e22a:	440b      	add	r3, r1
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	b21b      	sxth	r3, r3
 800e230:	021b      	lsls	r3, r3, #8
 800e232:	b21b      	sxth	r3, r3
 800e234:	4313      	orrs	r3, r2
 800e236:	b21b      	sxth	r3, r3
 800e238:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800e23a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                    cmdIndex += 2;
 800e23e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e242:	3302      	adds	r3, #2
 800e244:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	689a      	ldr	r2, [r3, #8]
 800e24c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e250:	4413      	add	r3, r2
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	4619      	mov	r1, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	689a      	ldr	r2, [r3, #8]
 800e25a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e25e:	3301      	adds	r3, #1
 800e260:	4413      	add	r3, r2
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	021b      	lsls	r3, r3, #8
 800e266:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6899      	ldr	r1, [r3, #8]
 800e26e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e272:	3302      	adds	r3, #2
 800e274:	440b      	add	r3, r1
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e27a:	4313      	orrs	r3, r2
 800e27c:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e27e:	2364      	movs	r3, #100	@ 0x64
 800e280:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800e284:	647b      	str	r3, [r7, #68]	@ 0x44
                        100;
                    cmdIndex += 3;
 800e286:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e28a:	3303      	adds	r3, #3
 800e28c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	689a      	ldr	r2, [r3, #8]
 800e294:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e298:	1c59      	adds	r1, r3, #1
 800e29a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e29e:	4413      	add	r3, r2
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	b25b      	sxtb	r3, r3
 800e2a4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800e2a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f004 fddb 	bl	8012e68 <LoRaMacMlmeRequest>
                }
                break;
 800e2b2:	e0cc      	b.n	800e44e <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800e2b4:	233b      	movs	r3, #59	@ 0x3b
 800e2b6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                mibReq.Param.IsCertPortOn = false;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e2c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f004 f9cd 	bl	8012664 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800e2ca:	4b04      	ldr	r3, [pc, #16]	@ (800e2dc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800e2d2:	e0bd      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
 800e2d4:	0801ce14 	.word	0x0801ce14
 800e2d8:	200007b4 	.word	0x200007b4
 800e2dc:	2000077c 	.word	0x2000077c
 800e2e0:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800e2e4:	232a      	movs	r3, #42	@ 0x2a
 800e2e6:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800e2e8:	f107 0308 	add.w	r3, r7, #8
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f003 ffe1 	bl	80122b4 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	63bb      	str	r3, [r7, #56]	@ 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	637b      	str	r3, [r7, #52]	@ 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800e2fa:	4b65      	ldr	r3, [pc, #404]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2fc:	68da      	ldr	r2, [r3, #12]
 800e2fe:	4b64      	ldr	r3, [pc, #400]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e300:	7a9b      	ldrb	r3, [r3, #10]
 800e302:	1c59      	adds	r1, r3, #1
 800e304:	b2c8      	uxtb	r0, r1
 800e306:	4962      	ldr	r1, [pc, #392]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e308:	7288      	strb	r0, [r1, #10]
 800e30a:	4413      	add	r3, r2
 800e30c:	227f      	movs	r2, #127	@ 0x7f
 800e30e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800e310:	4b60      	ldr	r3, [pc, #384]	@ (800e494 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	4b5e      	ldr	r3, [pc, #376]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e316:	68d9      	ldr	r1, [r3, #12]
 800e318:	4b5d      	ldr	r3, [pc, #372]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e31a:	7a9b      	ldrb	r3, [r3, #10]
 800e31c:	1c58      	adds	r0, r3, #1
 800e31e:	b2c4      	uxtb	r4, r0
 800e320:	485b      	ldr	r0, [pc, #364]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e322:	7284      	strb	r4, [r0, #10]
 800e324:	440b      	add	r3, r1
 800e326:	78d2      	ldrb	r2, [r2, #3]
 800e328:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800e32a:	4b5a      	ldr	r3, [pc, #360]	@ (800e494 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	4b58      	ldr	r3, [pc, #352]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e330:	68d9      	ldr	r1, [r3, #12]
 800e332:	4b57      	ldr	r3, [pc, #348]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e334:	7a9b      	ldrb	r3, [r3, #10]
 800e336:	1c58      	adds	r0, r3, #1
 800e338:	b2c4      	uxtb	r4, r0
 800e33a:	4855      	ldr	r0, [pc, #340]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e33c:	7284      	strb	r4, [r0, #10]
 800e33e:	440b      	add	r3, r1
 800e340:	7892      	ldrb	r2, [r2, #2]
 800e342:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800e344:	4b53      	ldr	r3, [pc, #332]	@ (800e494 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	4b51      	ldr	r3, [pc, #324]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e34a:	68d9      	ldr	r1, [r3, #12]
 800e34c:	4b50      	ldr	r3, [pc, #320]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e34e:	7a9b      	ldrb	r3, [r3, #10]
 800e350:	1c58      	adds	r0, r3, #1
 800e352:	b2c4      	uxtb	r4, r0
 800e354:	484e      	ldr	r0, [pc, #312]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e356:	7284      	strb	r4, [r0, #10]
 800e358:	440b      	add	r3, r1
 800e35a:	7852      	ldrb	r2, [r2, #1]
 800e35c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800e35e:	4b4d      	ldr	r3, [pc, #308]	@ (800e494 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	4b4b      	ldr	r3, [pc, #300]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e364:	68d9      	ldr	r1, [r3, #12]
 800e366:	4b4a      	ldr	r3, [pc, #296]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e368:	7a9b      	ldrb	r3, [r3, #10]
 800e36a:	1c58      	adds	r0, r3, #1
 800e36c:	b2c4      	uxtb	r4, r0
 800e36e:	4848      	ldr	r0, [pc, #288]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e370:	7284      	strb	r4, [r0, #10]
 800e372:	440b      	add	r3, r1
 800e374:	7812      	ldrb	r2, [r2, #0]
 800e376:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800e378:	4b45      	ldr	r3, [pc, #276]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e37a:	68da      	ldr	r2, [r3, #12]
 800e37c:	4b44      	ldr	r3, [pc, #272]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e37e:	7a9b      	ldrb	r3, [r3, #10]
 800e380:	1c59      	adds	r1, r3, #1
 800e382:	b2c8      	uxtb	r0, r1
 800e384:	4942      	ldr	r1, [pc, #264]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e386:	7288      	strb	r0, [r1, #10]
 800e388:	4413      	add	r3, r2
 800e38a:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800e38e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800e390:	4b3f      	ldr	r3, [pc, #252]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e392:	68da      	ldr	r2, [r3, #12]
 800e394:	4b3e      	ldr	r3, [pc, #248]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e396:	7a9b      	ldrb	r3, [r3, #10]
 800e398:	1c59      	adds	r1, r3, #1
 800e39a:	b2c8      	uxtb	r0, r1
 800e39c:	493c      	ldr	r1, [pc, #240]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e39e:	7288      	strb	r0, [r1, #10]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800e3a6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800e3a8:	4b39      	ldr	r3, [pc, #228]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e3aa:	68da      	ldr	r2, [r3, #12]
 800e3ac:	4b38      	ldr	r3, [pc, #224]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e3ae:	7a9b      	ldrb	r3, [r3, #10]
 800e3b0:	1c59      	adds	r1, r3, #1
 800e3b2:	b2c8      	uxtb	r0, r1
 800e3b4:	4936      	ldr	r1, [pc, #216]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e3b6:	7288      	strb	r0, [r1, #10]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800e3be:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800e3c0:	4b33      	ldr	r3, [pc, #204]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e3c2:	68da      	ldr	r2, [r3, #12]
 800e3c4:	4b32      	ldr	r3, [pc, #200]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e3c6:	7a9b      	ldrb	r3, [r3, #10]
 800e3c8:	1c59      	adds	r1, r3, #1
 800e3ca:	b2c8      	uxtb	r0, r1
 800e3cc:	4930      	ldr	r1, [pc, #192]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e3ce:	7288      	strb	r0, [r1, #10]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e3d6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800e3d8:	4b2d      	ldr	r3, [pc, #180]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e3da:	68da      	ldr	r2, [r3, #12]
 800e3dc:	4b2c      	ldr	r3, [pc, #176]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e3de:	7a9b      	ldrb	r3, [r3, #10]
 800e3e0:	1c59      	adds	r1, r3, #1
 800e3e2:	b2c8      	uxtb	r0, r1
 800e3e4:	492a      	ldr	r1, [pc, #168]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e3e6:	7288      	strb	r0, [r1, #10]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800e3ee:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800e3f0:	4b27      	ldr	r3, [pc, #156]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e3f2:	68da      	ldr	r2, [r3, #12]
 800e3f4:	4b26      	ldr	r3, [pc, #152]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e3f6:	7a9b      	ldrb	r3, [r3, #10]
 800e3f8:	1c59      	adds	r1, r3, #1
 800e3fa:	b2c8      	uxtb	r0, r1
 800e3fc:	4924      	ldr	r1, [pc, #144]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e3fe:	7288      	strb	r0, [r1, #10]
 800e400:	4413      	add	r3, r2
 800e402:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e406:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800e408:	4b21      	ldr	r3, [pc, #132]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e40a:	68da      	ldr	r2, [r3, #12]
 800e40c:	4b20      	ldr	r3, [pc, #128]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e40e:	7a9b      	ldrb	r3, [r3, #10]
 800e410:	1c59      	adds	r1, r3, #1
 800e412:	b2c8      	uxtb	r0, r1
 800e414:	491e      	ldr	r1, [pc, #120]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e416:	7288      	strb	r0, [r1, #10]
 800e418:	4413      	add	r3, r2
 800e41a:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800e41e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800e420:	4b1b      	ldr	r3, [pc, #108]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e422:	68da      	ldr	r2, [r3, #12]
 800e424:	4b1a      	ldr	r3, [pc, #104]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e426:	7a9b      	ldrb	r3, [r3, #10]
 800e428:	1c59      	adds	r1, r3, #1
 800e42a:	b2c8      	uxtb	r0, r1
 800e42c:	4918      	ldr	r1, [pc, #96]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e42e:	7288      	strb	r0, [r1, #10]
 800e430:	4413      	add	r3, r2
 800e432:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800e436:	701a      	strb	r2, [r3, #0]
                break;
 800e438:	e00a      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800e43a:	bf00      	nop
 800e43c:	e008      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e43e:	bf00      	nop
 800e440:	e006      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e442:	bf00      	nop
 800e444:	e004      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e446:	bf00      	nop
 800e448:	e002      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e44a:	bf00      	nop
 800e44c:	e000      	b.n	800e450 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e44e:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800e450:	4b0f      	ldr	r3, [pc, #60]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e452:	7a9b      	ldrb	r3, [r3, #10]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d00c      	beq.n	800e472 <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800e458:	4b0f      	ldr	r3, [pc, #60]	@ (800e498 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e45a:	7a5b      	ldrb	r3, [r3, #9]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d114      	bne.n	800e48a <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800e460:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e464:	480c      	ldr	r0, [pc, #48]	@ (800e498 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e466:	f00d fc97 	bl	801bd98 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800e46a:	480b      	ldr	r0, [pc, #44]	@ (800e498 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e46c:	f00d fbb6 	bl	801bbdc <UTIL_TIMER_Start>
 800e470:	e00b      	b.n	800e48a <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800e472:	4809      	ldr	r0, [pc, #36]	@ (800e498 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e474:	f00d fc20 	bl	801bcb8 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800e478:	4b05      	ldr	r3, [pc, #20]	@ (800e490 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e47a:	2200      	movs	r2, #0
 800e47c:	705a      	strb	r2, [r3, #1]
 800e47e:	e004      	b.n	800e48a <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e480:	bf00      	nop
 800e482:	e002      	b.n	800e48a <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e484:	bf00      	nop
 800e486:	e000      	b.n	800e48a <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e488:	bf00      	nop
    }
}
 800e48a:	3790      	adds	r7, #144	@ 0x90
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bdb0      	pop	{r4, r5, r7, pc}
 800e490:	2000077c 	.word	0x2000077c
 800e494:	200007b4 	.word	0x200007b4
 800e498:	200007b8 	.word	0x200007b8

0800e49c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800e4a4:	bf00      	nop
    }
}
 800e4a6:	bf00      	nop
 800e4a8:	370c      	adds	r7, #12
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bc80      	pop	{r7}
 800e4ae:	4770      	bx	lr

0800e4b0 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e4b8:	4b05      	ldr	r3, [pc, #20]	@ (800e4d0 <LmhpComplianceOnMlmeIndication+0x20>)
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	f083 0301 	eor.w	r3, r3, #1
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2b00      	cmp	r3, #0
    {
        return;
 800e4c4:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bc80      	pop	{r7}
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	2000077c 	.word	0x2000077c

0800e4d4 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800e4dc:	4b08      	ldr	r3, [pc, #32]	@ (800e500 <OnProcessTimer+0x2c>)
 800e4de:	7a9b      	ldrb	r3, [r3, #10]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d002      	beq.n	800e4ea <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800e4e4:	4b06      	ldr	r3, [pc, #24]	@ (800e500 <OnProcessTimer+0x2c>)
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800e4ea:	4b06      	ldr	r3, [pc, #24]	@ (800e504 <OnProcessTimer+0x30>)
 800e4ec:	695b      	ldr	r3, [r3, #20]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d002      	beq.n	800e4f8 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800e4f2:	4b04      	ldr	r3, [pc, #16]	@ (800e504 <OnProcessTimer+0x30>)
 800e4f4:	695b      	ldr	r3, [r3, #20]
 800e4f6:	4798      	blx	r3
    }
}
 800e4f8:	bf00      	nop
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	2000077c 	.word	0x2000077c
 800e504:	200000d8 	.word	0x200000d8

0800e508 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800e510:	2300      	movs	r3, #0
}
 800e512:	4618      	mov	r0, r3
 800e514:	370c      	adds	r7, #12
 800e516:	46bd      	mov	sp, r7
 800e518:	bc80      	pop	{r7}
 800e51a:	4770      	bx	lr

0800e51c <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	4603      	mov	r3, r0
 800e524:	6039      	str	r1, [r7, #0]
 800e526:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800e528:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	370c      	adds	r7, #12
 800e530:	46bd      	mov	sp, r7
 800e532:	bc80      	pop	{r7}
 800e534:	4770      	bx	lr
	...

0800e538 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800e538:	b590      	push	{r4, r7, lr}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e53e:	f00d fcd5 	bl	801beec <UTIL_TIMER_GetCurrentTime>
 800e542:	4603      	mov	r3, r0
 800e544:	4a0f      	ldr	r2, [pc, #60]	@ (800e584 <OnRadioTxDone+0x4c>)
 800e546:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e548:	4c0f      	ldr	r4, [pc, #60]	@ (800e588 <OnRadioTxDone+0x50>)
 800e54a:	463b      	mov	r3, r7
 800e54c:	4618      	mov	r0, r3
 800e54e:	f00c feb3 	bl	801b2b8 <SysTimeGet>
 800e552:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800e556:	463a      	mov	r2, r7
 800e558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e55c:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e560:	4a0a      	ldr	r2, [pc, #40]	@ (800e58c <OnRadioTxDone+0x54>)
 800e562:	7813      	ldrb	r3, [r2, #0]
 800e564:	f043 0320 	orr.w	r3, r3, #32
 800e568:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e56a:	f003 fa9f 	bl	8011aac <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e56e:	4b08      	ldr	r3, [pc, #32]	@ (800e590 <OnRadioTxDone+0x58>)
 800e570:	2201      	movs	r2, #1
 800e572:	2100      	movs	r1, #0
 800e574:	2002      	movs	r0, #2
 800e576:	f00d fda9 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
}
 800e57a:	bf00      	nop
 800e57c:	370c      	adds	r7, #12
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd90      	pop	{r4, r7, pc}
 800e582:	bf00      	nop
 800e584:	20001910 	.word	0x20001910
 800e588:	200007d0 	.word	0x200007d0
 800e58c:	2000190c 	.word	0x2000190c
 800e590:	0801ce40 	.word	0x0801ce40

0800e594 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	4608      	mov	r0, r1
 800e59e:	4611      	mov	r1, r2
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	817b      	strh	r3, [r7, #10]
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	813b      	strh	r3, [r7, #8]
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e5ae:	f00d fc9d 	bl	801beec <UTIL_TIMER_GetCurrentTime>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	4a11      	ldr	r2, [pc, #68]	@ (800e5fc <OnRadioRxDone+0x68>)
 800e5b6:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e5b8:	4a10      	ldr	r2, [pc, #64]	@ (800e5fc <OnRadioRxDone+0x68>)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e5be:	4a0f      	ldr	r2, [pc, #60]	@ (800e5fc <OnRadioRxDone+0x68>)
 800e5c0:	897b      	ldrh	r3, [r7, #10]
 800e5c2:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e5c4:	4a0d      	ldr	r2, [pc, #52]	@ (800e5fc <OnRadioRxDone+0x68>)
 800e5c6:	893b      	ldrh	r3, [r7, #8]
 800e5c8:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e5ca:	4a0c      	ldr	r2, [pc, #48]	@ (800e5fc <OnRadioRxDone+0x68>)
 800e5cc:	79fb      	ldrb	r3, [r7, #7]
 800e5ce:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e5d0:	4a0b      	ldr	r2, [pc, #44]	@ (800e600 <OnRadioRxDone+0x6c>)
 800e5d2:	7813      	ldrb	r3, [r2, #0]
 800e5d4:	f043 0310 	orr.w	r3, r3, #16
 800e5d8:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800e5da:	4a09      	ldr	r2, [pc, #36]	@ (800e600 <OnRadioRxDone+0x6c>)
 800e5dc:	7813      	ldrb	r3, [r2, #0]
 800e5de:	f043 0301 	orr.w	r3, r3, #1
 800e5e2:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800e5e4:	f003 fa62 	bl	8011aac <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e5e8:	4b06      	ldr	r3, [pc, #24]	@ (800e604 <OnRadioRxDone+0x70>)
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	2002      	movs	r0, #2
 800e5f0:	f00d fd6c 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
}
 800e5f4:	bf00      	nop
 800e5f6:	3710      	adds	r7, #16
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	20001914 	.word	0x20001914
 800e600:	2000190c 	.word	0x2000190c
 800e604:	0801ce50 	.word	0x0801ce50

0800e608 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e60c:	4a07      	ldr	r2, [pc, #28]	@ (800e62c <OnRadioTxTimeout+0x24>)
 800e60e:	7813      	ldrb	r3, [r2, #0]
 800e610:	f043 0308 	orr.w	r3, r3, #8
 800e614:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e616:	f003 fa49 	bl	8011aac <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e61a:	4b05      	ldr	r3, [pc, #20]	@ (800e630 <OnRadioTxTimeout+0x28>)
 800e61c:	2201      	movs	r2, #1
 800e61e:	2100      	movs	r1, #0
 800e620:	2002      	movs	r0, #2
 800e622:	f00d fd53 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
}
 800e626:	bf00      	nop
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	2000190c 	.word	0x2000190c
 800e630:	0801ce60 	.word	0x0801ce60

0800e634 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e634:	b580      	push	{r7, lr}
 800e636:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e638:	4a04      	ldr	r2, [pc, #16]	@ (800e64c <OnRadioRxError+0x18>)
 800e63a:	7813      	ldrb	r3, [r2, #0]
 800e63c:	f043 0304 	orr.w	r3, r3, #4
 800e640:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e642:	f003 fa33 	bl	8011aac <OnMacProcessNotify>
}
 800e646:	bf00      	nop
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	2000190c 	.word	0x2000190c

0800e650 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e654:	4a07      	ldr	r2, [pc, #28]	@ (800e674 <OnRadioRxTimeout+0x24>)
 800e656:	7813      	ldrb	r3, [r2, #0]
 800e658:	f043 0302 	orr.w	r3, r3, #2
 800e65c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e65e:	f003 fa25 	bl	8011aac <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e662:	4b05      	ldr	r3, [pc, #20]	@ (800e678 <OnRadioRxTimeout+0x28>)
 800e664:	2201      	movs	r2, #1
 800e666:	2100      	movs	r1, #0
 800e668:	2002      	movs	r0, #2
 800e66a:	f00d fd2f 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
}
 800e66e:	bf00      	nop
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	2000190c 	.word	0x2000190c
 800e678:	0801ce70 	.word	0x0801ce70

0800e67c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e67c:	b480      	push	{r7}
 800e67e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e680:	4b08      	ldr	r3, [pc, #32]	@ (800e6a4 <UpdateRxSlotIdleState+0x28>)
 800e682:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e686:	2b02      	cmp	r3, #2
 800e688:	d004      	beq.n	800e694 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e68a:	4b07      	ldr	r3, [pc, #28]	@ (800e6a8 <UpdateRxSlotIdleState+0x2c>)
 800e68c:	2206      	movs	r2, #6
 800e68e:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e692:	e003      	b.n	800e69c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e694:	4b04      	ldr	r3, [pc, #16]	@ (800e6a8 <UpdateRxSlotIdleState+0x2c>)
 800e696:	2202      	movs	r2, #2
 800e698:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800e69c:	bf00      	nop
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bc80      	pop	{r7}
 800e6a2:	4770      	bx	lr
 800e6a4:	20000d04 	.word	0x20000d04
 800e6a8:	200007d0 	.word	0x200007d0

0800e6ac <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b092      	sub	sp, #72	@ 0x48
 800e6b0:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e6b2:	4b4a      	ldr	r3, [pc, #296]	@ (800e7dc <ProcessRadioTxDone+0x130>)
 800e6b4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e6b8:	2b02      	cmp	r3, #2
 800e6ba:	d002      	beq.n	800e6c2 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e6bc:	4b48      	ldr	r3, [pc, #288]	@ (800e7e0 <ProcessRadioTxDone+0x134>)
 800e6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6c0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e6c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800e6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800e6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800e6cc:	b672      	cpsid	i
}
 800e6ce:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800e6d0:	f00d fc0c 	bl	801beec <UTIL_TIMER_GetCurrentTime>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	4b43      	ldr	r3, [pc, #268]	@ (800e7e4 <ProcessRadioTxDone+0x138>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	1ad3      	subs	r3, r2, r3
 800e6dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800e6de:	4b42      	ldr	r3, [pc, #264]	@ (800e7e8 <ProcessRadioTxDone+0x13c>)
 800e6e0:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800e6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e6:	1ad3      	subs	r3, r2, r3
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	4840      	ldr	r0, [pc, #256]	@ (800e7ec <ProcessRadioTxDone+0x140>)
 800e6ec:	f00d fb54 	bl	801bd98 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e6f0:	483e      	ldr	r0, [pc, #248]	@ (800e7ec <ProcessRadioTxDone+0x140>)
 800e6f2:	f00d fa73 	bl	801bbdc <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800e6f6:	4b3c      	ldr	r3, [pc, #240]	@ (800e7e8 <ProcessRadioTxDone+0x13c>)
 800e6f8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800e6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6fe:	1ad3      	subs	r3, r2, r3
 800e700:	4619      	mov	r1, r3
 800e702:	483b      	ldr	r0, [pc, #236]	@ (800e7f0 <ProcessRadioTxDone+0x144>)
 800e704:	f00d fb48 	bl	801bd98 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e708:	4839      	ldr	r0, [pc, #228]	@ (800e7f0 <ProcessRadioTxDone+0x144>)
 800e70a:	f00d fa67 	bl	801bbdc <UTIL_TIMER_Start>
 800e70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e710:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e714:	f383 8810 	msr	PRIMASK, r3
}
 800e718:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800e71a:	4b33      	ldr	r3, [pc, #204]	@ (800e7e8 <ProcessRadioTxDone+0x13c>)
 800e71c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800e720:	2b00      	cmp	r3, #0
 800e722:	d01a      	beq.n	800e75a <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800e724:	2315      	movs	r3, #21
 800e726:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e72a:	4b2c      	ldr	r3, [pc, #176]	@ (800e7dc <ProcessRadioTxDone+0x130>)
 800e72c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e730:	f107 0220 	add.w	r2, r7, #32
 800e734:	4611      	mov	r1, r2
 800e736:	4618      	mov	r0, r3
 800e738:	f006 ff40 	bl	80155bc <RegionGetPhyParam>
 800e73c:	4603      	mov	r3, r0
 800e73e:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e740:	4b29      	ldr	r3, [pc, #164]	@ (800e7e8 <ProcessRadioTxDone+0x13c>)
 800e742:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	4413      	add	r3, r2
 800e74a:	4619      	mov	r1, r3
 800e74c:	4829      	ldr	r0, [pc, #164]	@ (800e7f4 <ProcessRadioTxDone+0x148>)
 800e74e:	f00d fb23 	bl	801bd98 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800e752:	4828      	ldr	r0, [pc, #160]	@ (800e7f4 <ProcessRadioTxDone+0x148>)
 800e754:	f00d fa42 	bl	801bbdc <UTIL_TIMER_Start>
 800e758:	e003      	b.n	800e762 <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e75a:	4b23      	ldr	r3, [pc, #140]	@ (800e7e8 <ProcessRadioTxDone+0x13c>)
 800e75c:	2200      	movs	r2, #0
 800e75e:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e762:	4b20      	ldr	r3, [pc, #128]	@ (800e7e4 <ProcessRadioTxDone+0x138>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4a1d      	ldr	r2, [pc, #116]	@ (800e7dc <ProcessRadioTxDone+0x130>)
 800e768:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e76a:	4b1f      	ldr	r3, [pc, #124]	@ (800e7e8 <ProcessRadioTxDone+0x13c>)
 800e76c:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800e770:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e772:	4b1c      	ldr	r3, [pc, #112]	@ (800e7e4 <ProcessRadioTxDone+0x138>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e778:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e77c:	4618      	mov	r0, r3
 800e77e:	f00c fdd3 	bl	801b328 <SysTimeGetMcuTime>
 800e782:	4638      	mov	r0, r7
 800e784:	4b15      	ldr	r3, [pc, #84]	@ (800e7dc <ProcessRadioTxDone+0x130>)
 800e786:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800e78a:	9200      	str	r2, [sp, #0]
 800e78c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800e790:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e794:	ca06      	ldmia	r2, {r1, r2}
 800e796:	f00c fd28 	bl	801b1ea <SysTimeSub>
 800e79a:	f107 0314 	add.w	r3, r7, #20
 800e79e:	463a      	mov	r2, r7
 800e7a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7a4:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e7a8:	4b0f      	ldr	r3, [pc, #60]	@ (800e7e8 <ProcessRadioTxDone+0x13c>)
 800e7aa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800e7ae:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e7b4:	4b09      	ldr	r3, [pc, #36]	@ (800e7dc <ProcessRadioTxDone+0x130>)
 800e7b6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d101      	bne.n	800e7c2 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e7c2:	4b06      	ldr	r3, [pc, #24]	@ (800e7dc <ProcessRadioTxDone+0x130>)
 800e7c4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e7c8:	f107 0208 	add.w	r2, r7, #8
 800e7cc:	4611      	mov	r1, r2
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f006 ff0c 	bl	80155ec <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800e7d4:	bf00      	nop
 800e7d6:	3740      	adds	r7, #64	@ 0x40
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	20000d04 	.word	0x20000d04
 800e7e0:	0801d50c 	.word	0x0801d50c
 800e7e4:	20001910 	.word	0x20001910
 800e7e8:	200007d0 	.word	0x200007d0
 800e7ec:	20000b50 	.word	0x20000b50
 800e7f0:	20000b68 	.word	0x20000b68
 800e7f4:	20000bd0 	.word	0x20000bd0

0800e7f8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e7fc:	4b10      	ldr	r3, [pc, #64]	@ (800e840 <PrepareRxDoneAbort+0x48>)
 800e7fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e806:	4a0e      	ldr	r2, [pc, #56]	@ (800e840 <PrepareRxDoneAbort+0x48>)
 800e808:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800e80c:	4b0c      	ldr	r3, [pc, #48]	@ (800e840 <PrepareRxDoneAbort+0x48>)
 800e80e:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800e812:	2b00      	cmp	r3, #0
 800e814:	d002      	beq.n	800e81c <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e816:	2000      	movs	r0, #0
 800e818:	f001 fa12 	bl	800fc40 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e81c:	4a08      	ldr	r2, [pc, #32]	@ (800e840 <PrepareRxDoneAbort+0x48>)
 800e81e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e822:	f043 0302 	orr.w	r3, r3, #2
 800e826:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e82a:	4a05      	ldr	r2, [pc, #20]	@ (800e840 <PrepareRxDoneAbort+0x48>)
 800e82c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e830:	f043 0310 	orr.w	r3, r3, #16
 800e834:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800e838:	f7ff ff20 	bl	800e67c <UpdateRxSlotIdleState>
}
 800e83c:	bf00      	nop
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	200007d0 	.word	0x200007d0

0800e844 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e844:	b590      	push	{r4, r7, lr}
 800e846:	b0a9      	sub	sp, #164	@ 0xa4
 800e848:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e84a:	2312      	movs	r3, #18
 800e84c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e850:	4ba1      	ldr	r3, [pc, #644]	@ (800ead8 <ProcessRadioRxDone+0x294>)
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800e858:	4b9f      	ldr	r3, [pc, #636]	@ (800ead8 <ProcessRadioRxDone+0x294>)
 800e85a:	891b      	ldrh	r3, [r3, #8]
 800e85c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800e860:	4b9d      	ldr	r3, [pc, #628]	@ (800ead8 <ProcessRadioRxDone+0x294>)
 800e862:	895b      	ldrh	r3, [r3, #10]
 800e864:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800e868:	4b9b      	ldr	r3, [pc, #620]	@ (800ead8 <ProcessRadioRxDone+0x294>)
 800e86a:	7b1b      	ldrb	r3, [r3, #12]
 800e86c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800e870:	2300      	movs	r3, #0
 800e872:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800e876:	2300      	movs	r3, #0
 800e878:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e87a:	4b98      	ldr	r3, [pc, #608]	@ (800eadc <ProcessRadioRxDone+0x298>)
 800e87c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e880:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800e884:	2300      	movs	r3, #0
 800e886:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e88a:	2301      	movs	r3, #1
 800e88c:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800e890:	2301      	movs	r3, #1
 800e892:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e896:	4a92      	ldr	r2, [pc, #584]	@ (800eae0 <ProcessRadioRxDone+0x29c>)
 800e898:	7813      	ldrb	r3, [r2, #0]
 800e89a:	f023 0301 	bic.w	r3, r3, #1
 800e89e:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e8a0:	4b90      	ldr	r3, [pc, #576]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800e8a8:	4a8e      	ldr	r2, [pc, #568]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e8aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800e8ae:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800e8b2:	4a8c      	ldr	r2, [pc, #560]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e8b4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e8b8:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e8bc:	4b89      	ldr	r3, [pc, #548]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e8be:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800e8c2:	4b88      	ldr	r3, [pc, #544]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e8c4:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800e8c8:	4b86      	ldr	r3, [pc, #536]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800e8d0:	4b84      	ldr	r3, [pc, #528]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800e8d8:	4b82      	ldr	r3, [pc, #520]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e8da:	2200      	movs	r2, #0
 800e8dc:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800e8e0:	4b80      	ldr	r3, [pc, #512]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800e8e8:	4b7e      	ldr	r3, [pc, #504]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800e8f0:	4b7c      	ldr	r3, [pc, #496]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800e8f8:	4b7a      	ldr	r3, [pc, #488]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e900:	4b78      	ldr	r3, [pc, #480]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e902:	2200      	movs	r2, #0
 800e904:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e908:	4b76      	ldr	r3, [pc, #472]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800e910:	4b74      	ldr	r3, [pc, #464]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e912:	2200      	movs	r2, #0
 800e914:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e918:	4b72      	ldr	r3, [pc, #456]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e920:	4b70      	ldr	r3, [pc, #448]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e922:	2200      	movs	r2, #0
 800e924:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e928:	4b6f      	ldr	r3, [pc, #444]	@ (800eae8 <ProcessRadioRxDone+0x2a4>)
 800e92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e92c:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e92e:	4b6d      	ldr	r3, [pc, #436]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e930:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e934:	2b00      	cmp	r3, #0
 800e936:	d102      	bne.n	800e93e <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e938:	486c      	ldr	r0, [pc, #432]	@ (800eaec <ProcessRadioRxDone+0x2a8>)
 800e93a:	f00d f9bd 	bl	801bcb8 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e93e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e942:	4619      	mov	r1, r3
 800e944:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800e948:	f004 feba 	bl	80136c0 <LoRaMacClassBRxBeacon>
 800e94c:	4603      	mov	r3, r0
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00b      	beq.n	800e96a <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e952:	4a64      	ldr	r2, [pc, #400]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e954:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800e958:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e95c:	4a61      	ldr	r2, [pc, #388]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e95e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e962:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800e966:	f000 bc8d 	b.w	800f284 <ProcessRadioRxDone+0xa40>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e96a:	4b5c      	ldr	r3, [pc, #368]	@ (800eadc <ProcessRadioRxDone+0x298>)
 800e96c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e970:	2b01      	cmp	r3, #1
 800e972:	d11e      	bne.n	800e9b2 <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e974:	f004 feb7 	bl	80136e6 <LoRaMacClassBIsPingExpected>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00a      	beq.n	800e994 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e97e:	2000      	movs	r0, #0
 800e980:	f004 fe68 	bl	8013654 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e984:	2000      	movs	r0, #0
 800e986:	f004 fe89 	bl	801369c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e98a:	4b56      	ldr	r3, [pc, #344]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e98c:	2204      	movs	r2, #4
 800e98e:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800e992:	e00e      	b.n	800e9b2 <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e994:	f004 feae 	bl	80136f4 <LoRaMacClassBIsMulticastExpected>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d009      	beq.n	800e9b2 <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e99e:	2000      	movs	r0, #0
 800e9a0:	f004 fe62 	bl	8013668 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e9a4:	2000      	movs	r0, #0
 800e9a6:	f004 fe82 	bl	80136ae <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e9aa:	4b4e      	ldr	r3, [pc, #312]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e9ac:	2205      	movs	r2, #5
 800e9ae:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800e9b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d107      	bne.n	800e9ca <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e9ba:	4b4a      	ldr	r3, [pc, #296]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800e9bc:	2201      	movs	r2, #1
 800e9be:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800e9c2:	f7ff ff19 	bl	800e7f8 <PrepareRxDoneAbort>
        return;
 800e9c6:	f000 bc5d 	b.w	800f284 <ProcessRadioRxDone+0xa40>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e9ca:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800e9ce:	1c5a      	adds	r2, r3, #1
 800e9d0:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e9da:	4413      	add	r3, r2
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800e9e2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800e9e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	2b06      	cmp	r3, #6
 800e9f0:	f200 8419 	bhi.w	800f226 <ProcessRadioRxDone+0x9e2>
 800e9f4:	a201      	add	r2, pc, #4	@ (adr r2, 800e9fc <ProcessRadioRxDone+0x1b8>)
 800e9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fa:	bf00      	nop
 800e9fc:	0800ea19 	.word	0x0800ea19
 800ea00:	0800f227 	.word	0x0800f227
 800ea04:	0800ec37 	.word	0x0800ec37
 800ea08:	0800f227 	.word	0x0800f227
 800ea0c:	0800ec2f 	.word	0x0800ec2f
 800ea10:	0800f227 	.word	0x0800f227
 800ea14:	0800f1cb 	.word	0x0800f1cb
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ea18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ea1c:	2b10      	cmp	r3, #16
 800ea1e:	d807      	bhi.n	800ea30 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea20:	4b30      	ldr	r3, [pc, #192]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800ea22:	2201      	movs	r2, #1
 800ea24:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800ea28:	f7ff fee6 	bl	800e7f8 <PrepareRxDoneAbort>
                return;
 800ea2c:	f000 bc2a 	b.w	800f284 <ProcessRadioRxDone+0xa40>
            }
            macMsgJoinAccept.Buffer = payload;
 800ea30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea34:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800ea36:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ea3e:	4b27      	ldr	r3, [pc, #156]	@ (800eadc <ProcessRadioRxDone+0x298>)
 800ea40:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d007      	beq.n	800ea58 <ProcessRadioRxDone+0x214>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea48:	4b26      	ldr	r3, [pc, #152]	@ (800eae4 <ProcessRadioRxDone+0x2a0>)
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800ea50:	f7ff fed2 	bl	800e7f8 <PrepareRxDoneAbort>
                return;
 800ea54:	f000 bc16 	b.w	800f284 <ProcessRadioRxDone+0xa40>
            }

            SecureElementGetJoinEui( joinEui );
 800ea58:	1d3b      	adds	r3, r7, #4
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fd ff7e 	bl	800c95c <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800ea60:	f107 0214 	add.w	r2, r7, #20
 800ea64:	1d3b      	adds	r3, r7, #4
 800ea66:	4619      	mov	r1, r3
 800ea68:	20ff      	movs	r0, #255	@ 0xff
 800ea6a:	f006 f831 	bl	8014ad0 <LoRaMacCryptoHandleJoinAccept>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                macCryptoStatus = LoRaMacCryptoHandleJoinAccept( REJOIN_REQ_2, joinEui, &macMsgJoinAccept );
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ea74:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	f040 80cc 	bne.w	800ec16 <ProcessRadioRxDone+0x3d2>
            {
                VerifyParams_t verifyRxDr;

                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800ea7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ea82:	f003 030f 	and.w	r3, r3, #15
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	2b0f      	cmp	r3, #15
 800ea8a:	d031      	beq.n	800eaf0 <ProcessRadioRxDone+0x2ac>
                {
                    verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ea8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ea90:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	b25b      	sxtb	r3, r3
 800ea98:	703b      	strb	r3, [r7, #0]
                    verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ea9a:	4b10      	ldr	r3, [pc, #64]	@ (800eadc <ProcessRadioRxDone+0x298>)
 800ea9c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800eaa0:	707b      	strb	r3, [r7, #1]
                    if( RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR ) == false )
 800eaa2:	4b0e      	ldr	r3, [pc, #56]	@ (800eadc <ProcessRadioRxDone+0x298>)
 800eaa4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eaa8:	4639      	mov	r1, r7
 800eaaa:	2207      	movs	r2, #7
 800eaac:	4618      	mov	r0, r3
 800eaae:	f006 fdc0 	bl	8015632 <RegionVerify>
 800eab2:	4603      	mov	r3, r0
 800eab4:	f083 0301 	eor.w	r3, r3, #1
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d018      	beq.n	800eaf0 <ProcessRadioRxDone+0x2ac>
                    {
                        // MLME handling
                        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800eabe:	2001      	movs	r0, #1
 800eac0:	f005 fb14 	bl	80140ec <LoRaMacConfirmQueueIsCmdActive>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f000 83b4 	beq.w	800f234 <ProcessRadioRxDone+0x9f0>
                        {
                            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800eacc:	2101      	movs	r1, #1
 800eace:	2007      	movs	r0, #7
 800ead0:	f005 fa80 	bl	8013fd4 <LoRaMacConfirmQueueSetStatus>
 800ead4:	e3b1      	b.n	800f23a <ProcessRadioRxDone+0x9f6>
 800ead6:	bf00      	nop
 800ead8:	20001914 	.word	0x20001914
 800eadc:	20000d04 	.word	0x20000d04
 800eae0:	2000190c 	.word	0x2000190c
 800eae4:	200007d0 	.word	0x200007d0
 800eae8:	0801d50c 	.word	0x0801d50c
 800eaec:	20000b68 	.word	0x20000b68
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
            {
#endif

                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800eaf0:	7f7b      	ldrb	r3, [r7, #29]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	4ba5      	ldr	r3, [pc, #660]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eaf6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800eafa:	4ba4      	ldr	r3, [pc, #656]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eafc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800eb00:	7fbb      	ldrb	r3, [r7, #30]
 800eb02:	021b      	lsls	r3, r3, #8
 800eb04:	4313      	orrs	r3, r2
 800eb06:	4aa1      	ldr	r2, [pc, #644]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800eb0c:	4b9f      	ldr	r3, [pc, #636]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800eb12:	7ffb      	ldrb	r3, [r7, #31]
 800eb14:	041b      	lsls	r3, r3, #16
 800eb16:	4313      	orrs	r3, r2
 800eb18:	4a9c      	ldr	r2, [pc, #624]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800eb1e:	6a3b      	ldr	r3, [r7, #32]
 800eb20:	4a9a      	ldr	r2, [pc, #616]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800eb26:	4b99      	ldr	r3, [pc, #612]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	2002      	movs	r0, #2
 800eb30:	f7fd ff2c 	bl	800c98c <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800eb34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eb38:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	461a      	mov	r2, r3
 800eb40:	4b92      	ldr	r3, [pc, #584]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb42:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Verify if we shall assign the new datarate
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800eb46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eb4a:	f003 030f 	and.w	r3, r3, #15
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	2b0f      	cmp	r3, #15
 800eb52:	d011      	beq.n	800eb78 <ProcessRadioRxDone+0x334>
                {
#endif

                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800eb54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eb58:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	461a      	mov	r2, r3
 800eb60:	4b8a      	ldr	r3, [pc, #552]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb62:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800eb66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eb6a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	461a      	mov	r2, r3
 800eb72:	4b86      	ldr	r3, [pc, #536]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
				}
#endif

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800eb78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	4b83      	ldr	r3, [pc, #524]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb80:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800eb82:	4b82      	ldr	r3, [pc, #520]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d102      	bne.n	800eb90 <ProcessRadioRxDone+0x34c>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800eb8a:	4b80      	ldr	r3, [pc, #512]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800eb90:	4b7e      	ldr	r3, [pc, #504]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eb98:	fb02 f303 	mul.w	r3, r2, r3
 800eb9c:	4a7b      	ldr	r2, [pc, #492]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eb9e:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800eba0:	4b7a      	ldr	r3, [pc, #488]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800eba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eba4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800eba8:	4a78      	ldr	r2, [pc, #480]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800ebaa:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800ebac:	4b77      	ldr	r3, [pc, #476]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800ebb4:	4b75      	ldr	r3, [pc, #468]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ebbc:	f107 0314 	add.w	r3, r7, #20
 800ebc0:	3312      	adds	r3, #18
 800ebc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ebc4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	3b11      	subs	r3, #17
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800ebd2:	4b6f      	ldr	r3, [pc, #444]	@ (800ed90 <ProcessRadioRxDone+0x54c>)
 800ebd4:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800ebd8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ebdc:	4b6b      	ldr	r3, [pc, #428]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800ebde:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ebe2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800ebe6:	4611      	mov	r1, r2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f006 fd39 	bl	8015660 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ebee:	4b67      	ldr	r3, [pc, #412]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800ebf0:	2202      	movs	r2, #2
 800ebf2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800ebf6:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f005 fa76 	bl	80140ec <LoRaMacConfirmQueueIsCmdActive>
 800ec00:	4603      	mov	r3, r0
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	f000 8318 	beq.w	800f238 <ProcessRadioRxDone+0x9f4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800ec08:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	2000      	movs	r0, #0
 800ec10:	f005 f9e0 	bl	8013fd4 <LoRaMacConfirmQueueSetStatus>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }

            break;
 800ec14:	e310      	b.n	800f238 <ProcessRadioRxDone+0x9f4>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ec16:	2001      	movs	r0, #1
 800ec18:	f005 fa68 	bl	80140ec <LoRaMacConfirmQueueIsCmdActive>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f000 830a 	beq.w	800f238 <ProcessRadioRxDone+0x9f4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ec24:	2101      	movs	r1, #1
 800ec26:	2007      	movs	r0, #7
 800ec28:	f005 f9d4 	bl	8013fd4 <LoRaMacConfirmQueueSetStatus>
            break;
 800ec2c:	e304      	b.n	800f238 <ProcessRadioRxDone+0x9f4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ec2e:	4b58      	ldr	r3, [pc, #352]	@ (800ed90 <ProcessRadioRxDone+0x54c>)
 800ec30:	2201      	movs	r2, #1
 800ec32:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec36:	4b55      	ldr	r3, [pc, #340]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800ec38:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ec3c:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800ec40:	4b53      	ldr	r3, [pc, #332]	@ (800ed90 <ProcessRadioRxDone+0x54c>)
 800ec42:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800ec46:	b25b      	sxtb	r3, r3
 800ec48:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ec4c:	230d      	movs	r3, #13
 800ec4e:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ec52:	4b4e      	ldr	r3, [pc, #312]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800ec54:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d002      	beq.n	800ec62 <ProcessRadioRxDone+0x41e>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ec5c:	230e      	movs	r3, #14
 800ec5e:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec62:	4b4a      	ldr	r3, [pc, #296]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800ec64:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec68:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800ec6c:	4611      	mov	r1, r2
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f006 fca4 	bl	80155bc <RegionGetPhyParam>
 800ec74:	4603      	mov	r3, r0
 800ec76:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800ec78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ec7c:	3b0d      	subs	r3, #13
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	b21b      	sxth	r3, r3
 800ec82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ec86:	b21a      	sxth	r2, r3
 800ec88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec8a:	b21b      	sxth	r3, r3
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	dc03      	bgt.n	800ec98 <ProcessRadioRxDone+0x454>
 800ec90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ec94:	2b0b      	cmp	r3, #11
 800ec96:	d806      	bhi.n	800eca6 <ProcessRadioRxDone+0x462>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec98:	4b3d      	ldr	r3, [pc, #244]	@ (800ed90 <ProcessRadioRxDone+0x54c>)
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800eca0:	f7ff fdaa 	bl	800e7f8 <PrepareRxDoneAbort>
                return;
 800eca4:	e2ee      	b.n	800f284 <ProcessRadioRxDone+0xa40>
            }
            macMsgData.Buffer = payload;
 800eca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ecaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800ecac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ecb6:	4b37      	ldr	r3, [pc, #220]	@ (800ed94 <ProcessRadioRxDone+0x550>)
 800ecb8:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ecba:	23ff      	movs	r3, #255	@ 0xff
 800ecbc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ecc0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f006 fa00 	bl	80150ca <LoRaMacParserData>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d006      	beq.n	800ecde <ProcessRadioRxDone+0x49a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ecd0:	4b2f      	ldr	r3, [pc, #188]	@ (800ed90 <ProcessRadioRxDone+0x54c>)
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800ecd8:	f7ff fd8e 	bl	800e7f8 <PrepareRxDoneAbort>
                return;
 800ecdc:	e2d2      	b.n	800f284 <ProcessRadioRxDone+0xa40>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ecde:	4b2b      	ldr	r3, [pc, #172]	@ (800ed8c <ProcessRadioRxDone+0x548>)
 800ece0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d132      	bne.n	800ed4e <ProcessRadioRxDone+0x50a>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800ece8:	f004 fcfd 	bl	80136e6 <LoRaMacClassBIsPingExpected>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d014      	beq.n	800ed1c <ProcessRadioRxDone+0x4d8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ecf2:	2000      	movs	r0, #0
 800ecf4:	f004 fcae 	bl	8013654 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800ecf8:	2000      	movs	r0, #0
 800ecfa:	f004 fccf 	bl	801369c <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ecfe:	4b24      	ldr	r3, [pc, #144]	@ (800ed90 <ProcessRadioRxDone+0x54c>)
 800ed00:	2204      	movs	r2, #4
 800ed02:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ed06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed08:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ed0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ed10:	b2db      	uxtb	r3, r3
 800ed12:	4619      	mov	r1, r3
 800ed14:	4610      	mov	r0, r2
 800ed16:	f004 fd6f 	bl	80137f8 <LoRaMacClassBSetFPendingBit>
 800ed1a:	e018      	b.n	800ed4e <ProcessRadioRxDone+0x50a>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ed1c:	f004 fcea 	bl	80136f4 <LoRaMacClassBIsMulticastExpected>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d013      	beq.n	800ed4e <ProcessRadioRxDone+0x50a>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ed26:	2000      	movs	r0, #0
 800ed28:	f004 fc9e 	bl	8013668 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	f004 fcbe 	bl	80136ae <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ed32:	4b17      	ldr	r3, [pc, #92]	@ (800ed90 <ProcessRadioRxDone+0x54c>)
 800ed34:	2205      	movs	r2, #5
 800ed36:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ed3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed3c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ed40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	4619      	mov	r1, r3
 800ed48:	4610      	mov	r0, r2
 800ed4a:	f004 fd55 	bl	80137f8 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ed4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed50:	4a0f      	ldr	r2, [pc, #60]	@ (800ed90 <ProcessRadioRxDone+0x54c>)
 800ed52:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ed56:	f107 020e 	add.w	r2, r7, #14
 800ed5a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ed5e:	4611      	mov	r1, r2
 800ed60:	4618      	mov	r0, r3
 800ed62:	f002 fd9f 	bl	80118a4 <DetermineFrameType>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d006      	beq.n	800ed7a <ProcessRadioRxDone+0x536>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed6c:	4b08      	ldr	r3, [pc, #32]	@ (800ed90 <ProcessRadioRxDone+0x54c>)
 800ed6e:	2201      	movs	r2, #1
 800ed70:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800ed74:	f7ff fd40 	bl	800e7f8 <PrepareRxDoneAbort>
                return;
 800ed78:	e284      	b.n	800f284 <ProcessRadioRxDone+0xa40>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800ed80:	2300      	movs	r3, #0
 800ed82:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ed84:	2300      	movs	r3, #0
 800ed86:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800ed8a:	e055      	b.n	800ee38 <ProcessRadioRxDone+0x5f4>
 800ed8c:	20000d04 	.word	0x20000d04
 800ed90:	200007d0 	.word	0x200007d0
 800ed94:	20000a08 	.word	0x20000a08
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ed98:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800ed9c:	499f      	ldr	r1, [pc, #636]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800ed9e:	4613      	mov	r3, r2
 800eda0:	005b      	lsls	r3, r3, #1
 800eda2:	4413      	add	r3, r2
 800eda4:	011b      	lsls	r3, r3, #4
 800eda6:	440b      	add	r3, r1
 800eda8:	33ec      	adds	r3, #236	@ 0xec
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edae:	429a      	cmp	r2, r3
 800edb0:	d13d      	bne.n	800ee2e <ProcessRadioRxDone+0x5ea>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800edb2:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800edb6:	4999      	ldr	r1, [pc, #612]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800edb8:	4613      	mov	r3, r2
 800edba:	005b      	lsls	r3, r3, #1
 800edbc:	4413      	add	r3, r2
 800edbe:	011b      	lsls	r3, r3, #4
 800edc0:	440b      	add	r3, r1
 800edc2:	33e9      	adds	r3, #233	@ 0xe9
 800edc4:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d031      	beq.n	800ee2e <ProcessRadioRxDone+0x5ea>
                {
                    multicast = 1;
 800edca:	2301      	movs	r3, #1
 800edcc:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800edd0:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800edd4:	4991      	ldr	r1, [pc, #580]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800edd6:	4613      	mov	r3, r2
 800edd8:	005b      	lsls	r3, r3, #1
 800edda:	4413      	add	r3, r2
 800eddc:	011b      	lsls	r3, r3, #4
 800edde:	440b      	add	r3, r1
 800ede0:	33ea      	adds	r3, #234	@ 0xea
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800ede8:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800edec:	498b      	ldr	r1, [pc, #556]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800edee:	4613      	mov	r3, r2
 800edf0:	005b      	lsls	r3, r3, #1
 800edf2:	4413      	add	r3, r2
 800edf4:	011b      	lsls	r3, r3, #4
 800edf6:	440b      	add	r3, r1
 800edf8:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ee02:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800ee06:	4985      	ldr	r1, [pc, #532]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800ee08:	4613      	mov	r3, r2
 800ee0a:	005b      	lsls	r3, r3, #1
 800ee0c:	4413      	add	r3, r2
 800ee0e:	011b      	lsls	r3, r3, #4
 800ee10:	440b      	add	r3, r1
 800ee12:	33ec      	adds	r3, #236	@ 0xec
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ee1a:	4b80      	ldr	r3, [pc, #512]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800ee1c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ee20:	2b02      	cmp	r3, #2
 800ee22:	d10e      	bne.n	800ee42 <ProcessRadioRxDone+0x5fe>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ee24:	4b7e      	ldr	r3, [pc, #504]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ee26:	2203      	movs	r2, #3
 800ee28:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800ee2c:	e009      	b.n	800ee42 <ProcessRadioRxDone+0x5fe>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee2e:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800ee32:	3301      	adds	r3, #1
 800ee34:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800ee38:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d0ab      	beq.n	800ed98 <ProcessRadioRxDone+0x554>
 800ee40:	e000      	b.n	800ee44 <ProcessRadioRxDone+0x600>
                    break;
 800ee42:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ee44:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d117      	bne.n	800ee7c <ProcessRadioRxDone+0x638>
 800ee4c:	7bbb      	ldrb	r3, [r7, #14]
 800ee4e:	2b03      	cmp	r3, #3
 800ee50:	d10d      	bne.n	800ee6e <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ee52:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ee56:	f003 0320 	and.w	r3, r3, #32
 800ee5a:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d106      	bne.n	800ee6e <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ee60:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ee64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee68:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d006      	beq.n	800ee7c <ProcessRadioRxDone+0x638>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee6e:	4b6c      	ldr	r3, [pc, #432]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ee70:	2201      	movs	r2, #1
 800ee72:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800ee76:	f7ff fcbf 	bl	800e7f8 <PrepareRxDoneAbort>
                return;
 800ee7a:	e203      	b.n	800f284 <ProcessRadioRxDone+0xa40>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800ee7c:	7bb9      	ldrb	r1, [r7, #14]
 800ee7e:	4c67      	ldr	r4, [pc, #412]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800ee80:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800ee84:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800ee88:	f107 0310 	add.w	r3, r7, #16
 800ee8c:	9301      	str	r3, [sp, #4]
 800ee8e:	f107 030f 	add.w	r3, r7, #15
 800ee92:	9300      	str	r3, [sp, #0]
 800ee94:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800ee98:	f000 feec 	bl	800fc74 <GetFCntDown>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800eea2:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d017      	beq.n	800eeda <ProcessRadioRxDone+0x696>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800eeaa:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800eeae:	2b07      	cmp	r3, #7
 800eeb0:	d104      	bne.n	800eebc <ProcessRadioRxDone+0x678>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800eeb2:	4b5b      	ldr	r3, [pc, #364]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800eeb4:	2208      	movs	r2, #8
 800eeb6:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800eeba:	e003      	b.n	800eec4 <ProcessRadioRxDone+0x680>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eebc:	4b58      	ldr	r3, [pc, #352]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800eebe:	2201      	movs	r2, #1
 800eec0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	4a56      	ldr	r2, [pc, #344]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800eec8:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	4a54      	ldr	r2, [pc, #336]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800eed0:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800eed4:	f7ff fc90 	bl	800e7f8 <PrepareRxDoneAbort>
                return;
 800eed8:	e1d4      	b.n	800f284 <ProcessRadioRxDone+0xa40>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800eeda:	7bfa      	ldrb	r2, [r7, #15]
 800eedc:	6939      	ldr	r1, [r7, #16]
 800eede:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800eee2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	460b      	mov	r3, r1
 800eeea:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800eeee:	f005 ff4f 	bl	8014d90 <LoRaMacCryptoUnsecureMessage>
 800eef2:	4603      	mov	r3, r0
 800eef4:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800eef8:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d00f      	beq.n	800ef20 <ProcessRadioRxDone+0x6dc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ef00:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	d104      	bne.n	800ef12 <ProcessRadioRxDone+0x6ce>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ef08:	4b45      	ldr	r3, [pc, #276]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef0a:	220a      	movs	r2, #10
 800ef0c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800ef10:	e003      	b.n	800ef1a <ProcessRadioRxDone+0x6d6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ef12:	4b43      	ldr	r3, [pc, #268]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef14:	220b      	movs	r2, #11
 800ef16:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 800ef1a:	f7ff fc6d 	bl	800e7f8 <PrepareRxDoneAbort>
                return;
 800ef1e:	e1b1      	b.n	800f284 <ProcessRadioRxDone+0xa40>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ef20:	4b3f      	ldr	r3, [pc, #252]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef22:	2200      	movs	r2, #0
 800ef24:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800ef28:	4a3d      	ldr	r2, [pc, #244]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef2a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800ef2e:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800ef32:	4b3b      	ldr	r3, [pc, #236]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef34:	2200      	movs	r2, #0
 800ef36:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800ef3a:	4b39      	ldr	r3, [pc, #228]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	4a36      	ldr	r2, [pc, #216]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef46:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	4a34      	ldr	r2, [pc, #208]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef4e:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ef52:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ef56:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	bf14      	ite	ne
 800ef60:	2301      	movne	r3, #1
 800ef62:	2300      	moveq	r3, #0
 800ef64:	b2da      	uxtb	r2, r3
 800ef66:	4b2e      	ldr	r3, [pc, #184]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef68:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ef6c:	4b2c      	ldr	r3, [pc, #176]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ef74:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ef78:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	bf14      	ite	ne
 800ef82:	2301      	movne	r3, #1
 800ef84:	2300      	moveq	r3, #0
 800ef86:	b2da      	uxtb	r2, r3
 800ef88:	4b25      	ldr	r3, [pc, #148]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef8a:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ef8e:	4b24      	ldr	r3, [pc, #144]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef90:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d004      	beq.n	800efa2 <ProcessRadioRxDone+0x75e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ef98:	4b21      	ldr	r3, [pc, #132]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800ef9a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d106      	bne.n	800efb0 <ProcessRadioRxDone+0x76c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800efa2:	4b1e      	ldr	r3, [pc, #120]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800efa8:	4b1c      	ldr	r3, [pc, #112]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800efaa:	2201      	movs	r2, #1
 800efac:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800efb0:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d104      	bne.n	800efc2 <ProcessRadioRxDone+0x77e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800efb8:	4b19      	ldr	r3, [pc, #100]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800efba:	2202      	movs	r2, #2
 800efbc:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800efc0:	e03a      	b.n	800f038 <ProcessRadioRxDone+0x7f4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800efc2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800efc6:	f023 031f 	bic.w	r3, r3, #31
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	2ba0      	cmp	r3, #160	@ 0xa0
 800efce:	d12b      	bne.n	800f028 <ProcessRadioRxDone+0x7e4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800efd0:	4b12      	ldr	r3, [pc, #72]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800efd2:	2201      	movs	r2, #1
 800efd4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800efd8:	4b10      	ldr	r3, [pc, #64]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800efda:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d102      	bne.n	800efe8 <ProcessRadioRxDone+0x7a4>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800efe2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800efe4:	4a0d      	ldr	r2, [pc, #52]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800efe6:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800efe8:	4b0d      	ldr	r3, [pc, #52]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800efea:	2201      	movs	r2, #1
 800efec:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800eff0:	4b0b      	ldr	r3, [pc, #44]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800eff2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d01e      	beq.n	800f038 <ProcessRadioRxDone+0x7f4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800effa:	4b09      	ldr	r3, [pc, #36]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800effc:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f000:	2b01      	cmp	r3, #1
 800f002:	d019      	beq.n	800f038 <ProcessRadioRxDone+0x7f4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800f004:	4b05      	ldr	r3, [pc, #20]	@ (800f01c <ProcessRadioRxDone+0x7d8>)
 800f006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f00a:	4a05      	ldr	r2, [pc, #20]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800f00c:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800f010:	4b04      	ldr	r3, [pc, #16]	@ (800f024 <ProcessRadioRxDone+0x7e0>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4a02      	ldr	r2, [pc, #8]	@ (800f020 <ProcessRadioRxDone+0x7dc>)
 800f016:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 800f01a:	e00d      	b.n	800f038 <ProcessRadioRxDone+0x7f4>
 800f01c:	20000d04 	.word	0x20000d04
 800f020:	200007d0 	.word	0x200007d0
 800f024:	20001914 	.word	0x20001914
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800f028:	4b98      	ldr	r3, [pc, #608]	@ (800f28c <ProcessRadioRxDone+0xa48>)
 800f02a:	2200      	movs	r2, #0
 800f02c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f030:	4b97      	ldr	r3, [pc, #604]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f032:	2200      	movs	r2, #0
 800f034:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                }
            }

            // Set the pending status
			// Fix for Class C Certification test. Re-enabled part of if condition previously removed.
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 800f038:	4b94      	ldr	r3, [pc, #592]	@ (800f28c <ProcessRadioRxDone+0xa48>)
 800f03a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d106      	bne.n	800f050 <ProcessRadioRxDone+0x80c>
 800f042:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f046:	f003 0310 	and.w	r3, r3, #16
 800f04a:	b2db      	uxtb	r3, r3
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d004      	beq.n	800f05a <ProcessRadioRxDone+0x816>
 800f050:	4b8e      	ldr	r3, [pc, #568]	@ (800f28c <ProcessRadioRxDone+0xa48>)
 800f052:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f056:	2b00      	cmp	r3, #0
 800f058:	d004      	beq.n	800f064 <ProcessRadioRxDone+0x820>
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) 
 800f05a:	4b8d      	ldr	r3, [pc, #564]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f05c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 800f060:	2b00      	cmp	r3, #0
 800f062:	d003      	beq.n	800f06c <ProcessRadioRxDone+0x828>
            //if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800f064:	4b8a      	ldr	r3, [pc, #552]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f066:	2201      	movs	r2, #1
 800f068:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f06c:	4b88      	ldr	r3, [pc, #544]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f06e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800f072:	4a87      	ldr	r2, [pc, #540]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f074:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 800f078:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800f07c:	4618      	mov	r0, r3
 800f07e:	f001 ffa5 	bl	8010fcc <RemoveMacCommands>

            switch( fType )
 800f082:	7bbb      	ldrb	r3, [r7, #14]
 800f084:	2b03      	cmp	r3, #3
 800f086:	d874      	bhi.n	800f172 <ProcessRadioRxDone+0x92e>
 800f088:	a201      	add	r2, pc, #4	@ (adr r2, 800f090 <ProcessRadioRxDone+0x84c>)
 800f08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08e:	bf00      	nop
 800f090:	0800f0a1 	.word	0x0800f0a1
 800f094:	0800f0f1 	.word	0x0800f0f1
 800f098:	0800f127 	.word	0x0800f127
 800f09c:	0800f14d 	.word	0x0800f14d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f0a0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f0a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	461c      	mov	r4, r3
 800f0ac:	4b78      	ldr	r3, [pc, #480]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f0ae:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800f0b2:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800f0b6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800f0ba:	f102 0010 	add.w	r0, r2, #16
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	4622      	mov	r2, r4
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	f000 ff51 	bl	800ff6c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f0ca:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800f0ce:	4b70      	ldr	r3, [pc, #448]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f0d0:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f0d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0d6:	4a6e      	ldr	r2, [pc, #440]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f0d8:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f0dc:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800f0e0:	4b6b      	ldr	r3, [pc, #428]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f0e2:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800f0e6:	4b6a      	ldr	r3, [pc, #424]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800f0ee:	e047      	b.n	800f180 <ProcessRadioRxDone+0x93c>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f0f0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f0f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f0f8:	b2db      	uxtb	r3, r3
 800f0fa:	461c      	mov	r4, r3
 800f0fc:	4b64      	ldr	r3, [pc, #400]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f0fe:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800f102:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800f106:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800f10a:	f102 0010 	add.w	r0, r2, #16
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	460b      	mov	r3, r1
 800f112:	4622      	mov	r2, r4
 800f114:	2100      	movs	r1, #0
 800f116:	f000 ff29 	bl	800ff6c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f11a:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800f11e:	4b5c      	ldr	r3, [pc, #368]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f120:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800f124:	e02c      	b.n	800f180 <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800f126:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800f128:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800f12c:	4b58      	ldr	r3, [pc, #352]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f12e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800f132:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800f136:	9300      	str	r3, [sp, #0]
 800f138:	460b      	mov	r3, r1
 800f13a:	2100      	movs	r1, #0
 800f13c:	f000 ff16 	bl	800ff6c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f140:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800f144:	4b52      	ldr	r3, [pc, #328]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f146:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800f14a:	e019      	b.n	800f180 <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f14c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800f150:	4b4f      	ldr	r3, [pc, #316]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f152:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f156:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f158:	4a4d      	ldr	r2, [pc, #308]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f15a:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f15e:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800f162:	4b4b      	ldr	r3, [pc, #300]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f164:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800f168:	4b49      	ldr	r3, [pc, #292]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f16a:	2201      	movs	r2, #1
 800f16c:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800f170:	e006      	b.n	800f180 <ProcessRadioRxDone+0x93c>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f172:	4b47      	ldr	r3, [pc, #284]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f174:	2201      	movs	r2, #1
 800f176:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 800f17a:	f7ff fb3d 	bl	800e7f8 <PrepareRxDoneAbort>
                    break;
 800f17e:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800f180:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800f184:	2be0      	cmp	r3, #224	@ 0xe0
 800f186:	d118      	bne.n	800f1ba <ProcessRadioRxDone+0x976>
 800f188:	4b40      	ldr	r3, [pc, #256]	@ (800f28c <ProcessRadioRxDone+0xa48>)
 800f18a:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800f18e:	f083 0301 	eor.w	r3, r3, #1
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2b00      	cmp	r3, #0
 800f196:	d010      	beq.n	800f1ba <ProcessRadioRxDone+0x976>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f198:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800f19c:	4b3c      	ldr	r3, [pc, #240]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f19e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800f1a2:	4b3b      	ldr	r3, [pc, #236]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800f1aa:	4b39      	ldr	r3, [pc, #228]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 800f1b2:	4b37      	ldr	r3, [pc, #220]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f1ba:	4a35      	ldr	r2, [pc, #212]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f1bc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f1c0:	f043 0302 	orr.w	r3, r3, #2
 800f1c4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 800f1c8:	e037      	b.n	800f23a <ProcessRadioRxDone+0x9f6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f1ca:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f1ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f1d2:	18d1      	adds	r1, r2, r3
 800f1d4:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	482b      	ldr	r0, [pc, #172]	@ (800f294 <ProcessRadioRxDone+0xa50>)
 800f1e6:	f008 fc14 	bl	8017a12 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f1ea:	4b29      	ldr	r3, [pc, #164]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f1ec:	2203      	movs	r2, #3
 800f1ee:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f1f2:	4b27      	ldr	r3, [pc, #156]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f1fa:	4b25      	ldr	r3, [pc, #148]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f1fc:	4a25      	ldr	r2, [pc, #148]	@ (800f294 <ProcessRadioRxDone+0xa50>)
 800f1fe:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f202:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f206:	b2da      	uxtb	r2, r3
 800f208:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f20c:	1ad3      	subs	r3, r2, r3
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	4b1f      	ldr	r3, [pc, #124]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f212:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f216:	4a1e      	ldr	r2, [pc, #120]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f218:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f21c:	f043 0302 	orr.w	r3, r3, #2
 800f220:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 800f224:	e009      	b.n	800f23a <ProcessRadioRxDone+0x9f6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f226:	4b1a      	ldr	r3, [pc, #104]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f228:	2201      	movs	r2, #1
 800f22a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 800f22e:	f7ff fae3 	bl	800e7f8 <PrepareRxDoneAbort>
            break;
 800f232:	e002      	b.n	800f23a <ProcessRadioRxDone+0x9f6>
                        break;
 800f234:	bf00      	nop
 800f236:	e000      	b.n	800f23a <ProcessRadioRxDone+0x9f6>
            break;
 800f238:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f23a:	4b15      	ldr	r3, [pc, #84]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f23c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800f240:	2b00      	cmp	r3, #0
 800f242:	d004      	beq.n	800f24e <ProcessRadioRxDone+0xa0a>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f244:	4b12      	ldr	r3, [pc, #72]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f246:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	d10c      	bne.n	800f268 <ProcessRadioRxDone+0xa24>
    {
        if( MacCtx.NodeAckRequested == true )
 800f24e:	4b10      	ldr	r3, [pc, #64]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f250:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f254:	2b00      	cmp	r3, #0
 800f256:	d007      	beq.n	800f268 <ProcessRadioRxDone+0xa24>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800f258:	4b0d      	ldr	r3, [pc, #52]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f25a:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d002      	beq.n	800f268 <ProcessRadioRxDone+0xa24>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800f262:	2000      	movs	r0, #0
 800f264:	f000 fcec 	bl	800fc40 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800f268:	4b09      	ldr	r3, [pc, #36]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f26a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800f26e:	2b02      	cmp	r3, #2
 800f270:	d006      	beq.n	800f280 <ProcessRadioRxDone+0xa3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800f272:	4a07      	ldr	r2, [pc, #28]	@ (800f290 <ProcessRadioRxDone+0xa4c>)
 800f274:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f278:	f043 0310 	orr.w	r3, r3, #16
 800f27c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800f280:	f7ff f9fc 	bl	800e67c <UpdateRxSlotIdleState>
}
 800f284:	379c      	adds	r7, #156	@ 0x9c
 800f286:	46bd      	mov	sp, r7
 800f288:	bd90      	pop	{r4, r7, pc}
 800f28a:	bf00      	nop
 800f28c:	20000d04 	.word	0x20000d04
 800f290:	200007d0 	.word	0x200007d0
 800f294:	20000a08 	.word	0x20000a08

0800f298 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f29c:	4b11      	ldr	r3, [pc, #68]	@ (800f2e4 <ProcessRadioTxTimeout+0x4c>)
 800f29e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f2a2:	2b02      	cmp	r3, #2
 800f2a4:	d002      	beq.n	800f2ac <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f2a6:	4b10      	ldr	r3, [pc, #64]	@ (800f2e8 <ProcessRadioTxTimeout+0x50>)
 800f2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2aa:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f2ac:	f7ff f9e6 	bl	800e67c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f2b0:	4b0e      	ldr	r3, [pc, #56]	@ (800f2ec <ProcessRadioTxTimeout+0x54>)
 800f2b2:	2202      	movs	r2, #2
 800f2b4:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f2b8:	2002      	movs	r0, #2
 800f2ba:	f004 fee3 	bl	8014084 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f2be:	4b0b      	ldr	r3, [pc, #44]	@ (800f2ec <ProcessRadioTxTimeout+0x54>)
 800f2c0:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d003      	beq.n	800f2d0 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800f2c8:	4b08      	ldr	r3, [pc, #32]	@ (800f2ec <ProcessRadioTxTimeout+0x54>)
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f2d0:	4a06      	ldr	r2, [pc, #24]	@ (800f2ec <ProcessRadioTxTimeout+0x54>)
 800f2d2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f2d6:	f043 0310 	orr.w	r3, r3, #16
 800f2da:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800f2de:	bf00      	nop
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	20000d04 	.word	0x20000d04
 800f2e8:	0801d50c 	.word	0x0801d50c
 800f2ec:	200007d0 	.word	0x200007d0

0800f2f0 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	460a      	mov	r2, r1
 800f2fa:	71fb      	strb	r3, [r7, #7]
 800f2fc:	4613      	mov	r3, r2
 800f2fe:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f300:	2300      	movs	r3, #0
 800f302:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f304:	4b3d      	ldr	r3, [pc, #244]	@ (800f3fc <HandleRadioRxErrorTimeout+0x10c>)
 800f306:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f30a:	2b02      	cmp	r3, #2
 800f30c:	d002      	beq.n	800f314 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f30e:	4b3c      	ldr	r3, [pc, #240]	@ (800f400 <HandleRadioRxErrorTimeout+0x110>)
 800f310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f312:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f314:	f004 f9e0 	bl	80136d8 <LoRaMacClassBIsBeaconExpected>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d007      	beq.n	800f32e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f31e:	2002      	movs	r0, #2
 800f320:	f004 f98e 	bl	8013640 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f324:	2000      	movs	r0, #0
 800f326:	f004 f9b0 	bl	801368a <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f32a:	2301      	movs	r3, #1
 800f32c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f32e:	4b33      	ldr	r3, [pc, #204]	@ (800f3fc <HandleRadioRxErrorTimeout+0x10c>)
 800f330:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f334:	2b01      	cmp	r3, #1
 800f336:	d119      	bne.n	800f36c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f338:	f004 f9d5 	bl	80136e6 <LoRaMacClassBIsPingExpected>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d007      	beq.n	800f352 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f342:	2000      	movs	r0, #0
 800f344:	f004 f986 	bl	8013654 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f348:	2000      	movs	r0, #0
 800f34a:	f004 f9a7 	bl	801369c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f34e:	2301      	movs	r3, #1
 800f350:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f352:	f004 f9cf 	bl	80136f4 <LoRaMacClassBIsMulticastExpected>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d007      	beq.n	800f36c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f35c:	2000      	movs	r0, #0
 800f35e:	f004 f983 	bl	8013668 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f362:	2000      	movs	r0, #0
 800f364:	f004 f9a3 	bl	80136ae <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f368:	2301      	movs	r3, #1
 800f36a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f36c:	7bfb      	ldrb	r3, [r7, #15]
 800f36e:	f083 0301 	eor.w	r3, r3, #1
 800f372:	b2db      	uxtb	r3, r3
 800f374:	2b00      	cmp	r3, #0
 800f376:	d03b      	beq.n	800f3f0 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f378:	4b22      	ldr	r3, [pc, #136]	@ (800f404 <HandleRadioRxErrorTimeout+0x114>)
 800f37a:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d122      	bne.n	800f3c8 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f382:	4b20      	ldr	r3, [pc, #128]	@ (800f404 <HandleRadioRxErrorTimeout+0x114>)
 800f384:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d003      	beq.n	800f394 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f38c:	4a1d      	ldr	r2, [pc, #116]	@ (800f404 <HandleRadioRxErrorTimeout+0x114>)
 800f38e:	79fb      	ldrb	r3, [r7, #7]
 800f390:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f394:	79fb      	ldrb	r3, [r7, #7]
 800f396:	4618      	mov	r0, r3
 800f398:	f004 fe74 	bl	8014084 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f39c:	4b17      	ldr	r3, [pc, #92]	@ (800f3fc <HandleRadioRxErrorTimeout+0x10c>)
 800f39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f00c fdb5 	bl	801bf10 <UTIL_TIMER_GetElapsedTime>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	4b16      	ldr	r3, [pc, #88]	@ (800f404 <HandleRadioRxErrorTimeout+0x114>)
 800f3aa:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d31e      	bcc.n	800f3f0 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f3b2:	4815      	ldr	r0, [pc, #84]	@ (800f408 <HandleRadioRxErrorTimeout+0x118>)
 800f3b4:	f00c fc80 	bl	801bcb8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f3b8:	4a12      	ldr	r2, [pc, #72]	@ (800f404 <HandleRadioRxErrorTimeout+0x114>)
 800f3ba:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f3be:	f043 0310 	orr.w	r3, r3, #16
 800f3c2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800f3c6:	e013      	b.n	800f3f0 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f3c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f404 <HandleRadioRxErrorTimeout+0x114>)
 800f3ca:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d003      	beq.n	800f3da <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f3d2:	4a0c      	ldr	r2, [pc, #48]	@ (800f404 <HandleRadioRxErrorTimeout+0x114>)
 800f3d4:	79bb      	ldrb	r3, [r7, #6]
 800f3d6:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f3da:	79bb      	ldrb	r3, [r7, #6]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f004 fe51 	bl	8014084 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800f3e2:	4a08      	ldr	r2, [pc, #32]	@ (800f404 <HandleRadioRxErrorTimeout+0x114>)
 800f3e4:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f3e8:	f043 0310 	orr.w	r3, r3, #16
 800f3ec:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800f3f0:	f7ff f944 	bl	800e67c <UpdateRxSlotIdleState>
}
 800f3f4:	bf00      	nop
 800f3f6:	3710      	adds	r7, #16
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	20000d04 	.word	0x20000d04
 800f400:	0801d50c 	.word	0x0801d50c
 800f404:	200007d0 	.word	0x200007d0
 800f408:	20000b68 	.word	0x20000b68

0800f40c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f410:	2106      	movs	r1, #6
 800f412:	2005      	movs	r0, #5
 800f414:	f7ff ff6c 	bl	800f2f0 <HandleRadioRxErrorTimeout>
}
 800f418:	bf00      	nop
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f420:	2104      	movs	r1, #4
 800f422:	2003      	movs	r0, #3
 800f424:	f7ff ff64 	bl	800f2f0 <HandleRadioRxErrorTimeout>
}
 800f428:	bf00      	nop
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f432:	f3ef 8310 	mrs	r3, PRIMASK
 800f436:	607b      	str	r3, [r7, #4]
  return(result);
 800f438:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f43a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f43c:	b672      	cpsid	i
}
 800f43e:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f440:	4b1d      	ldr	r3, [pc, #116]	@ (800f4b8 <LoRaMacHandleIrqEvents+0x8c>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f446:	4b1c      	ldr	r3, [pc, #112]	@ (800f4b8 <LoRaMacHandleIrqEvents+0x8c>)
 800f448:	2200      	movs	r2, #0
 800f44a:	601a      	str	r2, [r3, #0]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	f383 8810 	msr	PRIMASK, r3
}
 800f456:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d027      	beq.n	800f4ae <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f45e:	783b      	ldrb	r3, [r7, #0]
 800f460:	f003 0320 	and.w	r3, r3, #32
 800f464:	b2db      	uxtb	r3, r3
 800f466:	2b00      	cmp	r3, #0
 800f468:	d001      	beq.n	800f46e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f46a:	f7ff f91f 	bl	800e6ac <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f46e:	783b      	ldrb	r3, [r7, #0]
 800f470:	f003 0310 	and.w	r3, r3, #16
 800f474:	b2db      	uxtb	r3, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f47a:	f7ff f9e3 	bl	800e844 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f47e:	783b      	ldrb	r3, [r7, #0]
 800f480:	f003 0308 	and.w	r3, r3, #8
 800f484:	b2db      	uxtb	r3, r3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d001      	beq.n	800f48e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f48a:	f7ff ff05 	bl	800f298 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f48e:	783b      	ldrb	r3, [r7, #0]
 800f490:	f003 0304 	and.w	r3, r3, #4
 800f494:	b2db      	uxtb	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	d001      	beq.n	800f49e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f49a:	f7ff ffb7 	bl	800f40c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f49e:	783b      	ldrb	r3, [r7, #0]
 800f4a0:	f003 0302 	and.w	r3, r3, #2
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f4aa:	f7ff ffb7 	bl	800f41c <ProcessRadioRxTimeout>
        }
    }
}
 800f4ae:	bf00      	nop
 800f4b0:	3710      	adds	r7, #16
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	2000190c 	.word	0x2000190c

0800f4bc <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f4bc:	b480      	push	{r7}
 800f4be:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800f4c0:	4b10      	ldr	r3, [pc, #64]	@ (800f504 <LoRaMacIsBusy+0x48>)
 800f4c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d101      	bne.n	800f4ce <LoRaMacIsBusy+0x12>
    {
        return false;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	e015      	b.n	800f4fa <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800f4ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f508 <LoRaMacIsBusy+0x4c>)
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	f003 0301 	and.w	r3, r3, #1
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d001      	beq.n	800f4e0 <LoRaMacIsBusy+0x24>
    {
        return true;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	e00c      	b.n	800f4fa <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f4e0:	4b08      	ldr	r3, [pc, #32]	@ (800f504 <LoRaMacIsBusy+0x48>)
 800f4e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d106      	bne.n	800f4f8 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f4ea:	4b06      	ldr	r3, [pc, #24]	@ (800f504 <LoRaMacIsBusy+0x48>)
 800f4ec:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f4f0:	2b01      	cmp	r3, #1
 800f4f2:	d101      	bne.n	800f4f8 <LoRaMacIsBusy+0x3c>
    {
        return false;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	e000      	b.n	800f4fa <LoRaMacIsBusy+0x3e>
    }
    return true;
 800f4f8:	2301      	movs	r3, #1
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bc80      	pop	{r7}
 800f500:	4770      	bx	lr
 800f502:	bf00      	nop
 800f504:	200007d0 	.word	0x200007d0
 800f508:	2000190c 	.word	0x2000190c

0800f50c <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800f50c:	b480      	push	{r7}
 800f50e:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800f510:	4b05      	ldr	r3, [pc, #20]	@ (800f528 <LoRaMacIsStopped+0x1c>)
 800f512:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f516:	2b01      	cmp	r3, #1
 800f518:	d101      	bne.n	800f51e <LoRaMacIsStopped+0x12>
    {
        return true;
 800f51a:	2301      	movs	r3, #1
 800f51c:	e000      	b.n	800f520 <LoRaMacIsStopped+0x14>
    }
    return false;
 800f51e:	2300      	movs	r3, #0
}
 800f520:	4618      	mov	r0, r3
 800f522:	46bd      	mov	sp, r7
 800f524:	bc80      	pop	{r7}
 800f526:	4770      	bx	lr
 800f528:	200007d0 	.word	0x200007d0

0800f52c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	4603      	mov	r3, r0
 800f534:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f536:	4a04      	ldr	r2, [pc, #16]	@ (800f548 <LoRaMacEnableRequests+0x1c>)
 800f538:	79fb      	ldrb	r3, [r7, #7]
 800f53a:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 800f53e:	bf00      	nop
 800f540:	370c      	adds	r7, #12
 800f542:	46bd      	mov	sp, r7
 800f544:	bc80      	pop	{r7}
 800f546:	4770      	bx	lr
 800f548:	200007d0 	.word	0x200007d0

0800f54c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f552:	4b2c      	ldr	r3, [pc, #176]	@ (800f604 <LoRaMacHandleRequestEvents+0xb8>)
 800f554:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f558:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f55a:	4b2a      	ldr	r3, [pc, #168]	@ (800f604 <LoRaMacHandleRequestEvents+0xb8>)
 800f55c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f560:	2b00      	cmp	r3, #0
 800f562:	d14a      	bne.n	800f5fa <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f564:	4b27      	ldr	r3, [pc, #156]	@ (800f604 <LoRaMacHandleRequestEvents+0xb8>)
 800f566:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f56a:	f003 0301 	and.w	r3, r3, #1
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	2b00      	cmp	r3, #0
 800f572:	d006      	beq.n	800f582 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f574:	4a23      	ldr	r2, [pc, #140]	@ (800f604 <LoRaMacHandleRequestEvents+0xb8>)
 800f576:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f57a:	f023 0301 	bic.w	r3, r3, #1
 800f57e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f582:	4b20      	ldr	r3, [pc, #128]	@ (800f604 <LoRaMacHandleRequestEvents+0xb8>)
 800f584:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f588:	f003 0304 	and.w	r3, r3, #4
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d006      	beq.n	800f5a0 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f592:	4a1c      	ldr	r2, [pc, #112]	@ (800f604 <LoRaMacHandleRequestEvents+0xb8>)
 800f594:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f598:	f023 0304 	bic.w	r3, r3, #4
 800f59c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f5a0:	2001      	movs	r0, #1
 800f5a2:	f7ff ffc3 	bl	800f52c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f5a6:	793b      	ldrb	r3, [r7, #4]
 800f5a8:	f003 0301 	and.w	r3, r3, #1
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d005      	beq.n	800f5be <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f5b2:	4b14      	ldr	r3, [pc, #80]	@ (800f604 <LoRaMacHandleRequestEvents+0xb8>)
 800f5b4:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4813      	ldr	r0, [pc, #76]	@ (800f608 <LoRaMacHandleRequestEvents+0xbc>)
 800f5bc:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f5be:	793b      	ldrb	r3, [r7, #4]
 800f5c0:	f003 0304 	and.w	r3, r3, #4
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00e      	beq.n	800f5e8 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f5ca:	4810      	ldr	r0, [pc, #64]	@ (800f60c <LoRaMacHandleRequestEvents+0xc0>)
 800f5cc:	f004 fda8 	bl	8014120 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f5d0:	f004 fdf8 	bl	80141c4 <LoRaMacConfirmQueueGetCnt>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d006      	beq.n	800f5e8 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f5da:	4a0a      	ldr	r2, [pc, #40]	@ (800f604 <LoRaMacHandleRequestEvents+0xb8>)
 800f5dc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f5e0:	f043 0304 	orr.w	r3, r3, #4
 800f5e4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f5e8:	f004 f8a2 	bl	8013730 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f5ec:	4a05      	ldr	r2, [pc, #20]	@ (800f604 <LoRaMacHandleRequestEvents+0xb8>)
 800f5ee:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f5f2:	f023 0310 	bic.w	r3, r3, #16
 800f5f6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800f5fa:	bf00      	nop
 800f5fc:	3708      	adds	r7, #8
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	200007d0 	.word	0x200007d0
 800f608:	20000c10 	.word	0x20000c10
 800f60c:	20000c24 	.word	0x20000c24

0800f610 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f614:	4b16      	ldr	r3, [pc, #88]	@ (800f670 <LoRaMacHandleIndicationEvents+0x60>)
 800f616:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f61a:	f003 0308 	and.w	r3, r3, #8
 800f61e:	b2db      	uxtb	r3, r3
 800f620:	2b00      	cmp	r3, #0
 800f622:	d00d      	beq.n	800f640 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f624:	4a12      	ldr	r2, [pc, #72]	@ (800f670 <LoRaMacHandleIndicationEvents+0x60>)
 800f626:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f62a:	f023 0308 	bic.w	r3, r3, #8
 800f62e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f632:	4b0f      	ldr	r3, [pc, #60]	@ (800f670 <LoRaMacHandleIndicationEvents+0x60>)
 800f634:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	490e      	ldr	r1, [pc, #56]	@ (800f674 <LoRaMacHandleIndicationEvents+0x64>)
 800f63c:	480e      	ldr	r0, [pc, #56]	@ (800f678 <LoRaMacHandleIndicationEvents+0x68>)
 800f63e:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f640:	4b0b      	ldr	r3, [pc, #44]	@ (800f670 <LoRaMacHandleIndicationEvents+0x60>)
 800f642:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f646:	f003 0302 	and.w	r3, r3, #2
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d00d      	beq.n	800f66c <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f650:	4a07      	ldr	r2, [pc, #28]	@ (800f670 <LoRaMacHandleIndicationEvents+0x60>)
 800f652:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f656:	f023 0302 	bic.w	r3, r3, #2
 800f65a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f65e:	4b04      	ldr	r3, [pc, #16]	@ (800f670 <LoRaMacHandleIndicationEvents+0x60>)
 800f660:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	4903      	ldr	r1, [pc, #12]	@ (800f674 <LoRaMacHandleIndicationEvents+0x64>)
 800f668:	4804      	ldr	r0, [pc, #16]	@ (800f67c <LoRaMacHandleIndicationEvents+0x6c>)
 800f66a:	4798      	blx	r3
    }
}
 800f66c:	bf00      	nop
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	200007d0 	.word	0x200007d0
 800f674:	20000c5c 	.word	0x20000c5c
 800f678:	20000c38 	.word	0x20000c38
 800f67c:	20000bf0 	.word	0x20000bf0

0800f680 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f686:	4b2a      	ldr	r3, [pc, #168]	@ (800f730 <LoRaMacHandleMcpsRequest+0xb0>)
 800f688:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f68c:	f003 0301 	and.w	r3, r3, #1
 800f690:	b2db      	uxtb	r3, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	d048      	beq.n	800f728 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800f696:	2300      	movs	r3, #0
 800f698:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f69a:	2300      	movs	r3, #0
 800f69c:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f69e:	4b24      	ldr	r3, [pc, #144]	@ (800f730 <LoRaMacHandleMcpsRequest+0xb0>)
 800f6a0:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d004      	beq.n	800f6b2 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f6a8:	4b21      	ldr	r3, [pc, #132]	@ (800f730 <LoRaMacHandleMcpsRequest+0xb0>)
 800f6aa:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f6ae:	2b03      	cmp	r3, #3
 800f6b0:	d104      	bne.n	800f6bc <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f6b2:	f002 f959 	bl	8011968 <CheckRetransUnconfirmedUplink>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	71fb      	strb	r3, [r7, #7]
 800f6ba:	e010      	b.n	800f6de <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f6bc:	4b1c      	ldr	r3, [pc, #112]	@ (800f730 <LoRaMacHandleMcpsRequest+0xb0>)
 800f6be:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d10b      	bne.n	800f6de <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800f6c6:	4b1a      	ldr	r3, [pc, #104]	@ (800f730 <LoRaMacHandleMcpsRequest+0xb0>)
 800f6c8:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d004      	beq.n	800f6da <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f6d0:	f002 f976 	bl	80119c0 <CheckRetransConfirmedUplink>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	71fb      	strb	r3, [r7, #7]
 800f6d8:	e001      	b.n	800f6de <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800f6da:	2301      	movs	r3, #1
 800f6dc:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800f6de:	79fb      	ldrb	r3, [r7, #7]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d00d      	beq.n	800f700 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f6e4:	4813      	ldr	r0, [pc, #76]	@ (800f734 <LoRaMacHandleMcpsRequest+0xb4>)
 800f6e6:	f00c fae7 	bl	801bcb8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f6ea:	4b11      	ldr	r3, [pc, #68]	@ (800f730 <LoRaMacHandleMcpsRequest+0xb0>)
 800f6ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f6f0:	f023 0320 	bic.w	r3, r3, #32
 800f6f4:	4a0e      	ldr	r2, [pc, #56]	@ (800f730 <LoRaMacHandleMcpsRequest+0xb0>)
 800f6f6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800f6fa:	f002 f99b 	bl	8011a34 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f6fe:	e013      	b.n	800f728 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800f700:	79bb      	ldrb	r3, [r7, #6]
 800f702:	f083 0301 	eor.w	r3, r3, #1
 800f706:	b2db      	uxtb	r3, r3
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00d      	beq.n	800f728 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f70c:	4a08      	ldr	r2, [pc, #32]	@ (800f730 <LoRaMacHandleMcpsRequest+0xb0>)
 800f70e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f712:	f023 0310 	bic.w	r3, r3, #16
 800f716:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800f71a:	4b05      	ldr	r3, [pc, #20]	@ (800f730 <LoRaMacHandleMcpsRequest+0xb0>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 800f722:	2000      	movs	r0, #0
 800f724:	f000 f9c8 	bl	800fab8 <OnTxDelayedTimerEvent>
}
 800f728:	bf00      	nop
 800f72a:	3708      	adds	r7, #8
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	200007d0 	.word	0x200007d0
 800f734:	20000b38 	.word	0x20000b38

0800f738 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f73c:	4b18      	ldr	r3, [pc, #96]	@ (800f7a0 <LoRaMacHandleMlmeRequest+0x68>)
 800f73e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f742:	f003 0304 	and.w	r3, r3, #4
 800f746:	b2db      	uxtb	r3, r3
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d026      	beq.n	800f79a <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f74c:	2001      	movs	r0, #1
 800f74e:	f004 fccd 	bl	80140ec <LoRaMacConfirmQueueIsCmdActive>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d012      	beq.n	800f77e <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f758:	2001      	movs	r0, #1
 800f75a:	f004 fc69 	bl	8014030 <LoRaMacConfirmQueueGetStatus>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d103      	bne.n	800f76c <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f764:	4b0e      	ldr	r3, [pc, #56]	@ (800f7a0 <LoRaMacHandleMlmeRequest+0x68>)
 800f766:	2200      	movs	r2, #0
 800f768:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f76c:	4b0c      	ldr	r3, [pc, #48]	@ (800f7a0 <LoRaMacHandleMlmeRequest+0x68>)
 800f76e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f772:	f023 0302 	bic.w	r3, r3, #2
 800f776:	4a0a      	ldr	r2, [pc, #40]	@ (800f7a0 <LoRaMacHandleMlmeRequest+0x68>)
 800f778:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f77c:	e00d      	b.n	800f79a <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800f77e:	2006      	movs	r0, #6
 800f780:	f004 fcb4 	bl	80140ec <LoRaMacConfirmQueueIsCmdActive>
 800f784:	4603      	mov	r3, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	d007      	beq.n	800f79a <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f78a:	4b05      	ldr	r3, [pc, #20]	@ (800f7a0 <LoRaMacHandleMlmeRequest+0x68>)
 800f78c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f790:	f023 0302 	bic.w	r3, r3, #2
 800f794:	4a02      	ldr	r2, [pc, #8]	@ (800f7a0 <LoRaMacHandleMlmeRequest+0x68>)
 800f796:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800f79a:	bf00      	nop
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	200007d0 	.word	0x200007d0

0800f7a4 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f7a8:	200b      	movs	r0, #11
 800f7aa:	f004 fc9f 	bl	80140ec <LoRaMacConfirmQueueIsCmdActive>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d019      	beq.n	800f7e8 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f7b4:	4b0e      	ldr	r3, [pc, #56]	@ (800f7f0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f7b6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f7ba:	f003 0301 	and.w	r3, r3, #1
 800f7be:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d111      	bne.n	800f7e8 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800f7f0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f7c6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800f7ca:	f003 0304 	and.w	r3, r3, #4
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d009      	beq.n	800f7e8 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f7d4:	4b06      	ldr	r3, [pc, #24]	@ (800f7f0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f7d6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f7da:	f023 0302 	bic.w	r3, r3, #2
 800f7de:	4a04      	ldr	r2, [pc, #16]	@ (800f7f0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f7e0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e000      	b.n	800f7ea <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f7e8:	2300      	movs	r3, #0
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	200007d0 	.word	0x200007d0

0800f7f4 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	71fb      	strb	r3, [r7, #7]
 800f7fe:	460b      	mov	r3, r1
 800f800:	71bb      	strb	r3, [r7, #6]
 800f802:	4613      	mov	r3, r2
 800f804:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800f806:	79fb      	ldrb	r3, [r7, #7]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00a      	beq.n	800f822 <CheckForMinimumAbpDatarate+0x2e>
 800f80c:	79bb      	ldrb	r3, [r7, #6]
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d107      	bne.n	800f822 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800f812:	797b      	ldrb	r3, [r7, #5]
 800f814:	f083 0301 	eor.w	r3, r3, #1
 800f818:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d001      	beq.n	800f822 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800f81e:	2301      	movs	r3, #1
 800f820:	e000      	b.n	800f824 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800f822:	2300      	movs	r3, #0
}
 800f824:	4618      	mov	r0, r3
 800f826:	370c      	adds	r7, #12
 800f828:	46bd      	mov	sp, r7
 800f82a:	bc80      	pop	{r7}
 800f82c:	4770      	bx	lr
	...

0800f830 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f830:	b480      	push	{r7}
 800f832:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f834:	4b0d      	ldr	r3, [pc, #52]	@ (800f86c <LoRaMacCheckForRxAbort+0x3c>)
 800f836:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f83a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00f      	beq.n	800f862 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f842:	4b0a      	ldr	r3, [pc, #40]	@ (800f86c <LoRaMacCheckForRxAbort+0x3c>)
 800f844:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f84c:	4a07      	ldr	r2, [pc, #28]	@ (800f86c <LoRaMacCheckForRxAbort+0x3c>)
 800f84e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f852:	4b06      	ldr	r3, [pc, #24]	@ (800f86c <LoRaMacCheckForRxAbort+0x3c>)
 800f854:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f858:	f023 0302 	bic.w	r3, r3, #2
 800f85c:	4a03      	ldr	r2, [pc, #12]	@ (800f86c <LoRaMacCheckForRxAbort+0x3c>)
 800f85e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800f862:	bf00      	nop
 800f864:	46bd      	mov	sp, r7
 800f866:	bc80      	pop	{r7}
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop
 800f86c:	200007d0 	.word	0x200007d0

0800f870 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f878:	2300      	movs	r3, #0
 800f87a:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f87c:	2300      	movs	r3, #0
 800f87e:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f880:	4b51      	ldr	r3, [pc, #324]	@ (800f9c8 <LoRaMacHandleNvm+0x158>)
 800f882:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f886:	2b00      	cmp	r3, #0
 800f888:	f040 8099 	bne.w	800f9be <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2124      	movs	r1, #36	@ 0x24
 800f890:	4618      	mov	r0, r3
 800f892:	f008 f913 	bl	8017abc <Crc32>
 800f896:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d006      	beq.n	800f8b0 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	68ba      	ldr	r2, [r7, #8]
 800f8a6:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f8a8:	89fb      	ldrh	r3, [r7, #14]
 800f8aa:	f043 0301 	orr.w	r3, r3, #1
 800f8ae:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	3328      	adds	r3, #40	@ 0x28
 800f8b4:	211c      	movs	r1, #28
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f008 f900 	bl	8017abc <Crc32>
 800f8bc:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8c2:	68ba      	ldr	r2, [r7, #8]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d006      	beq.n	800f8d6 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	68ba      	ldr	r2, [r7, #8]
 800f8cc:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f8ce:	89fb      	ldrh	r3, [r7, #14]
 800f8d0:	f043 0302 	orr.w	r3, r3, #2
 800f8d4:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	3348      	adds	r3, #72	@ 0x48
 800f8da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f008 f8ec 	bl	8017abc <Crc32>
 800f8e4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800f8ec:	68ba      	ldr	r2, [r7, #8]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d007      	beq.n	800f902 <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	68ba      	ldr	r2, [r7, #8]
 800f8f6:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f8fa:	89fb      	ldrh	r3, [r7, #14]
 800f8fc:	f043 0304 	orr.w	r3, r3, #4
 800f900:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800f908:	21d4      	movs	r1, #212	@ 0xd4
 800f90a:	4618      	mov	r0, r3
 800f90c:	f008 f8d6 	bl	8017abc <Crc32>
 800f910:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d007      	beq.n	800f92e <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	68ba      	ldr	r2, [r7, #8]
 800f922:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f926:	89fb      	ldrh	r3, [r7, #14]
 800f928:	f043 0308 	orr.w	r3, r3, #8
 800f92c:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800f934:	2100      	movs	r1, #0
 800f936:	4618      	mov	r0, r3
 800f938:	f008 f8c0 	bl	8017abc <Crc32>
 800f93c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800f944:	68ba      	ldr	r2, [r7, #8]
 800f946:	429a      	cmp	r2, r3
 800f948:	d007      	beq.n	800f95a <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	68ba      	ldr	r2, [r7, #8]
 800f94e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f952:	89fb      	ldrh	r3, [r7, #14]
 800f954:	f043 0310 	orr.w	r3, r3, #16
 800f958:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 800f960:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800f964:	4618      	mov	r0, r3
 800f966:	f008 f8a9 	bl	8017abc <Crc32>
 800f96a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800f972:	68ba      	ldr	r2, [r7, #8]
 800f974:	429a      	cmp	r2, r3
 800f976:	d007      	beq.n	800f988 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	68ba      	ldr	r2, [r7, #8]
 800f97c:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f980:	89fb      	ldrh	r3, [r7, #14]
 800f982:	f043 0320 	orr.w	r3, r3, #32
 800f986:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f203 53a4 	addw	r3, r3, #1444	@ 0x5a4
 800f98e:	2114      	movs	r1, #20
 800f990:	4618      	mov	r0, r3
 800f992:	f008 f893 	bl	8017abc <Crc32>
 800f996:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 800f99e:	68ba      	ldr	r2, [r7, #8]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d007      	beq.n	800f9b4 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	68ba      	ldr	r2, [r7, #8]
 800f9a8:	f8c3 25b8 	str.w	r2, [r3, #1464]	@ 0x5b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f9ac:	89fb      	ldrh	r3, [r7, #14]
 800f9ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9b2:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f9b4:	89fb      	ldrh	r3, [r7, #14]
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f002 f88e 	bl	8011ad8 <CallNvmDataChangeCallback>
 800f9bc:	e000      	b.n	800f9c0 <LoRaMacHandleNvm+0x150>
        return;
 800f9be:	bf00      	nop
}
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	200007d0 	.word	0x200007d0

0800f9cc <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00d      	beq.n	800f9f8 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f9dc:	6838      	ldr	r0, [r7, #0]
 800f9de:	f00c fa97 	bl	801bf10 <UTIL_TIMER_GetElapsedTime>
 800f9e2:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f9e4:	68fa      	ldr	r2, [r7, #12]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d905      	bls.n	800f9f8 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f9ec:	4b05      	ldr	r3, [pc, #20]	@ (800fa04 <LoRaMacHandleResponseTimeout+0x38>)
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	e000      	b.n	800f9fa <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f9f8:	2300      	movs	r3, #0
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3710      	adds	r7, #16
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	20000d04 	.word	0x20000d04

0800fa08 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800fa12:	f7ff fd0b 	bl	800f42c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800fa16:	f003 fefa 	bl	801380e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800fa1a:	4b25      	ldr	r3, [pc, #148]	@ (800fab0 <LoRaMacProcess+0xa8>)
 800fa1c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800fa20:	f003 0310 	and.w	r3, r3, #16
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d023      	beq.n	800fa72 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800fa2a:	2000      	movs	r0, #0
 800fa2c:	f7ff fd7e 	bl	800f52c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800fa30:	f7ff fefe 	bl	800f830 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800fa34:	f002 f86e 	bl	8011b14 <IsRequestPending>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d006      	beq.n	800fa4c <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800fa3e:	f7ff feb1 	bl	800f7a4 <LoRaMacCheckForBeaconAcquisition>
 800fa42:	4603      	mov	r3, r0
 800fa44:	461a      	mov	r2, r3
 800fa46:	79fb      	ldrb	r3, [r7, #7]
 800fa48:	4313      	orrs	r3, r2
 800fa4a:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800fa4c:	79fb      	ldrb	r3, [r7, #7]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d103      	bne.n	800fa5a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800fa52:	f7ff fe71 	bl	800f738 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800fa56:	f7ff fe13 	bl	800f680 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800fa5a:	f7ff fd77 	bl	800f54c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800fa5e:	2001      	movs	r0, #1
 800fa60:	f7ff fd64 	bl	800f52c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800fa64:	4a12      	ldr	r2, [pc, #72]	@ (800fab0 <LoRaMacProcess+0xa8>)
 800fa66:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fa6a:	f043 0320 	orr.w	r3, r3, #32
 800fa6e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800fa72:	f7ff fdcd 	bl	800f610 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800fa76:	4b0e      	ldr	r3, [pc, #56]	@ (800fab0 <LoRaMacProcess+0xa8>)
 800fa78:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	d101      	bne.n	800fa84 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800fa80:	f001 fc32 	bl	80112e8 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800fa84:	4b0a      	ldr	r3, [pc, #40]	@ (800fab0 <LoRaMacProcess+0xa8>)
 800fa86:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800fa8a:	f003 0320 	and.w	r3, r3, #32
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d009      	beq.n	800faa8 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800fa94:	4a06      	ldr	r2, [pc, #24]	@ (800fab0 <LoRaMacProcess+0xa8>)
 800fa96:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fa9a:	f023 0320 	bic.w	r3, r3, #32
 800fa9e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800faa2:	4804      	ldr	r0, [pc, #16]	@ (800fab4 <LoRaMacProcess+0xac>)
 800faa4:	f7ff fee4 	bl	800f870 <LoRaMacHandleNvm>
    }
}
 800faa8:	bf00      	nop
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	200007d0 	.word	0x200007d0
 800fab4:	20000d04 	.word	0x20000d04

0800fab8 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800fac0:	481e      	ldr	r0, [pc, #120]	@ (800fb3c <OnTxDelayedTimerEvent+0x84>)
 800fac2:	f00c f8f9 	bl	801bcb8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fac6:	4b1e      	ldr	r3, [pc, #120]	@ (800fb40 <OnTxDelayedTimerEvent+0x88>)
 800fac8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800facc:	f023 0320 	bic.w	r3, r3, #32
 800fad0:	4a1b      	ldr	r2, [pc, #108]	@ (800fb40 <OnTxDelayedTimerEvent+0x88>)
 800fad2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800fad6:	4b1b      	ldr	r3, [pc, #108]	@ (800fb44 <OnTxDelayedTimerEvent+0x8c>)
 800fad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fadc:	4a18      	ldr	r2, [pc, #96]	@ (800fb40 <OnTxDelayedTimerEvent+0x88>)
 800fade:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 800fae2:	4611      	mov	r1, r2
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7ff ff71 	bl	800f9cc <LoRaMacHandleResponseTimeout>
 800faea:	4603      	mov	r3, r0
 800faec:	2b00      	cmp	r3, #0
 800faee:	d11e      	bne.n	800fb2e <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800faf0:	2001      	movs	r0, #1
 800faf2:	f001 f943 	bl	8010d7c <ScheduleTx>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d01a      	beq.n	800fb32 <OnTxDelayedTimerEvent+0x7a>
 800fafc:	2b0b      	cmp	r3, #11
 800fafe:	d018      	beq.n	800fb32 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fb00:	4b10      	ldr	r3, [pc, #64]	@ (800fb44 <OnTxDelayedTimerEvent+0x8c>)
 800fb02:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	4b0d      	ldr	r3, [pc, #52]	@ (800fb40 <OnTxDelayedTimerEvent+0x88>)
 800fb0a:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800fb0e:	4b0c      	ldr	r3, [pc, #48]	@ (800fb40 <OnTxDelayedTimerEvent+0x88>)
 800fb10:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800fb14:	4b0a      	ldr	r3, [pc, #40]	@ (800fb40 <OnTxDelayedTimerEvent+0x88>)
 800fb16:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800fb1a:	4b09      	ldr	r3, [pc, #36]	@ (800fb40 <OnTxDelayedTimerEvent+0x88>)
 800fb1c:	2209      	movs	r2, #9
 800fb1e:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800fb22:	2009      	movs	r0, #9
 800fb24:	f004 faae 	bl	8014084 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800fb28:	f001 ff84 	bl	8011a34 <StopRetransmission>
            break;
 800fb2c:	e002      	b.n	800fb34 <OnTxDelayedTimerEvent+0x7c>
        return;
 800fb2e:	bf00      	nop
 800fb30:	e000      	b.n	800fb34 <OnTxDelayedTimerEvent+0x7c>
            break;
 800fb32:	bf00      	nop
        }
    }
}
 800fb34:	3708      	adds	r7, #8
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	20000b38 	.word	0x20000b38
 800fb40:	200007d0 	.word	0x200007d0
 800fb44:	20000d04 	.word	0x20000d04

0800fb48 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800fb50:	4b17      	ldr	r3, [pc, #92]	@ (800fbb0 <OnRxWindow1TimerEvent+0x68>)
 800fb52:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800fb56:	4b16      	ldr	r3, [pc, #88]	@ (800fbb0 <OnRxWindow1TimerEvent+0x68>)
 800fb58:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800fb5c:	4b15      	ldr	r3, [pc, #84]	@ (800fbb4 <OnRxWindow1TimerEvent+0x6c>)
 800fb5e:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800fb62:	b25a      	sxtb	r2, r3
 800fb64:	4b12      	ldr	r3, [pc, #72]	@ (800fbb0 <OnRxWindow1TimerEvent+0x68>)
 800fb66:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fb6a:	4b12      	ldr	r3, [pc, #72]	@ (800fbb4 <OnRxWindow1TimerEvent+0x6c>)
 800fb6c:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800fb70:	4b0f      	ldr	r3, [pc, #60]	@ (800fbb0 <OnRxWindow1TimerEvent+0x68>)
 800fb72:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fb76:	4b0f      	ldr	r3, [pc, #60]	@ (800fbb4 <OnRxWindow1TimerEvent+0x6c>)
 800fb78:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800fb7c:	4b0c      	ldr	r3, [pc, #48]	@ (800fbb0 <OnRxWindow1TimerEvent+0x68>)
 800fb7e:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800fb82:	4b0b      	ldr	r3, [pc, #44]	@ (800fbb0 <OnRxWindow1TimerEvent+0x68>)
 800fb84:	2200      	movs	r2, #0
 800fb86:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800fb8a:	4b09      	ldr	r3, [pc, #36]	@ (800fbb0 <OnRxWindow1TimerEvent+0x68>)
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800fb92:	4b08      	ldr	r3, [pc, #32]	@ (800fbb4 <OnRxWindow1TimerEvent+0x6c>)
 800fb94:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800fb98:	4b05      	ldr	r3, [pc, #20]	@ (800fbb0 <OnRxWindow1TimerEvent+0x68>)
 800fb9a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800fb9e:	4906      	ldr	r1, [pc, #24]	@ (800fbb8 <OnRxWindow1TimerEvent+0x70>)
 800fba0:	4806      	ldr	r0, [pc, #24]	@ (800fbbc <OnRxWindow1TimerEvent+0x74>)
 800fba2:	f001 fb6d 	bl	8011280 <RxWindowSetup>
}
 800fba6:	bf00      	nop
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	200007d0 	.word	0x200007d0
 800fbb4:	20000d04 	.word	0x20000d04
 800fbb8:	20000b88 	.word	0x20000b88
 800fbbc:	20000b50 	.word	0x20000b50

0800fbc0 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fbc8:	4b19      	ldr	r3, [pc, #100]	@ (800fc30 <OnRxWindow2TimerEvent+0x70>)
 800fbca:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d029      	beq.n	800fc26 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fbd2:	4b17      	ldr	r3, [pc, #92]	@ (800fc30 <OnRxWindow2TimerEvent+0x70>)
 800fbd4:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800fbd8:	4b15      	ldr	r3, [pc, #84]	@ (800fc30 <OnRxWindow2TimerEvent+0x70>)
 800fbda:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fbde:	4b15      	ldr	r3, [pc, #84]	@ (800fc34 <OnRxWindow2TimerEvent+0x74>)
 800fbe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbe2:	4a13      	ldr	r2, [pc, #76]	@ (800fc30 <OnRxWindow2TimerEvent+0x70>)
 800fbe4:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fbe8:	4b12      	ldr	r3, [pc, #72]	@ (800fc34 <OnRxWindow2TimerEvent+0x74>)
 800fbea:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800fbee:	4b10      	ldr	r3, [pc, #64]	@ (800fc30 <OnRxWindow2TimerEvent+0x70>)
 800fbf0:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fbf4:	4b0f      	ldr	r3, [pc, #60]	@ (800fc34 <OnRxWindow2TimerEvent+0x74>)
 800fbf6:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800fbfa:	4b0d      	ldr	r3, [pc, #52]	@ (800fc30 <OnRxWindow2TimerEvent+0x70>)
 800fbfc:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fc00:	4b0b      	ldr	r3, [pc, #44]	@ (800fc30 <OnRxWindow2TimerEvent+0x70>)
 800fc02:	2200      	movs	r2, #0
 800fc04:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fc08:	4b09      	ldr	r3, [pc, #36]	@ (800fc30 <OnRxWindow2TimerEvent+0x70>)
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800fc10:	4b08      	ldr	r3, [pc, #32]	@ (800fc34 <OnRxWindow2TimerEvent+0x74>)
 800fc12:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800fc16:	4b06      	ldr	r3, [pc, #24]	@ (800fc30 <OnRxWindow2TimerEvent+0x70>)
 800fc18:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fc1c:	4906      	ldr	r1, [pc, #24]	@ (800fc38 <OnRxWindow2TimerEvent+0x78>)
 800fc1e:	4807      	ldr	r0, [pc, #28]	@ (800fc3c <OnRxWindow2TimerEvent+0x7c>)
 800fc20:	f001 fb2e 	bl	8011280 <RxWindowSetup>
 800fc24:	e000      	b.n	800fc28 <OnRxWindow2TimerEvent+0x68>
        return;
 800fc26:	bf00      	nop
}
 800fc28:	3708      	adds	r7, #8
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	200007d0 	.word	0x200007d0
 800fc34:	20000d04 	.word	0x20000d04
 800fc38:	20000ba0 	.word	0x20000ba0
 800fc3c:	20000b68 	.word	0x20000b68

0800fc40 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800fc48:	4808      	ldr	r0, [pc, #32]	@ (800fc6c <OnRetransmitTimeoutTimerEvent+0x2c>)
 800fc4a:	f00c f835 	bl	801bcb8 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800fc4e:	4b08      	ldr	r3, [pc, #32]	@ (800fc70 <OnRetransmitTimeoutTimerEvent+0x30>)
 800fc50:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d003      	beq.n	800fc60 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800fc58:	4b05      	ldr	r3, [pc, #20]	@ (800fc70 <OnRetransmitTimeoutTimerEvent+0x30>)
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 800fc60:	f001 ff24 	bl	8011aac <OnMacProcessNotify>
}
 800fc64:	bf00      	nop
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	20000bd0 	.word	0x20000bd0
 800fc70:	200007d0 	.word	0x200007d0

0800fc74 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b084      	sub	sp, #16
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60ba      	str	r2, [r7, #8]
 800fc7c:	607b      	str	r3, [r7, #4]
 800fc7e:	4603      	mov	r3, r0
 800fc80:	73fb      	strb	r3, [r7, #15]
 800fc82:	460b      	mov	r3, r1
 800fc84:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d005      	beq.n	800fc98 <GetFCntDown+0x24>
 800fc8c:	69bb      	ldr	r3, [r7, #24]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d002      	beq.n	800fc98 <GetFCntDown+0x24>
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d101      	bne.n	800fc9c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fc98:	2309      	movs	r3, #9
 800fc9a:	e028      	b.n	800fcee <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800fc9c:	7bfb      	ldrb	r3, [r7, #15]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d016      	beq.n	800fcd0 <GetFCntDown+0x5c>
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d118      	bne.n	800fcd8 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800fca6:	79bb      	ldrb	r3, [r7, #6]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d10d      	bne.n	800fcc8 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800fcac:	7bbb      	ldrb	r3, [r7, #14]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d002      	beq.n	800fcb8 <GetFCntDown+0x44>
 800fcb2:	7bbb      	ldrb	r3, [r7, #14]
 800fcb4:	2b03      	cmp	r3, #3
 800fcb6:	d103      	bne.n	800fcc0 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	2202      	movs	r2, #2
 800fcbc:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fcbe:	e00d      	b.n	800fcdc <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	701a      	strb	r2, [r3, #0]
            break;
 800fcc6:	e009      	b.n	800fcdc <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	2203      	movs	r2, #3
 800fccc:	701a      	strb	r2, [r3, #0]
            break;
 800fcce:	e005      	b.n	800fcdc <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fcd0:	69bb      	ldr	r3, [r7, #24]
 800fcd2:	2204      	movs	r2, #4
 800fcd4:	701a      	strb	r2, [r3, #0]
            break;
 800fcd6:	e001      	b.n	800fcdc <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fcd8:	2305      	movs	r3, #5
 800fcda:	e008      	b.n	800fcee <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	7818      	ldrb	r0, [r3, #0]
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	89db      	ldrh	r3, [r3, #14]
 800fce4:	69fa      	ldr	r2, [r7, #28]
 800fce6:	4619      	mov	r1, r3
 800fce8:	f004 fe06 	bl	80148f8 <LoRaMacCryptoGetFCntDown>
 800fcec:	4603      	mov	r3, r0
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3710      	adds	r7, #16
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
	...

0800fcf8 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800fcf8:	b5b0      	push	{r4, r5, r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	4603      	mov	r3, r0
 800fd00:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fd02:	2303      	movs	r3, #3
 800fd04:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800fd06:	4b6e      	ldr	r3, [pc, #440]	@ (800fec0 <SwitchClass+0x1c8>)
 800fd08:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fd0c:	2b02      	cmp	r3, #2
 800fd0e:	f000 80bb 	beq.w	800fe88 <SwitchClass+0x190>
 800fd12:	2b02      	cmp	r3, #2
 800fd14:	f300 80ce 	bgt.w	800feb4 <SwitchClass+0x1bc>
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d003      	beq.n	800fd24 <SwitchClass+0x2c>
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	f000 80a5 	beq.w	800fe6c <SwitchClass+0x174>
 800fd22:	e0c7      	b.n	800feb4 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800fd24:	79fb      	ldrb	r3, [r7, #7]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d109      	bne.n	800fd3e <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800fd2a:	4b65      	ldr	r3, [pc, #404]	@ (800fec0 <SwitchClass+0x1c8>)
 800fd2c:	4a64      	ldr	r2, [pc, #400]	@ (800fec0 <SwitchClass+0x1c8>)
 800fd2e:	3374      	adds	r3, #116	@ 0x74
 800fd30:	326c      	adds	r2, #108	@ 0x6c
 800fd32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd36:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800fd3e:	79fb      	ldrb	r3, [r7, #7]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d10c      	bne.n	800fd5e <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800fd44:	79fb      	ldrb	r3, [r7, #7]
 800fd46:	4618      	mov	r0, r3
 800fd48:	f003 fcf8 	bl	801373c <LoRaMacClassBSwitchClass>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800fd50:	7bfb      	ldrb	r3, [r7, #15]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d103      	bne.n	800fd5e <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800fd56:	4a5a      	ldr	r2, [pc, #360]	@ (800fec0 <SwitchClass+0x1c8>)
 800fd58:	79fb      	ldrb	r3, [r7, #7]
 800fd5a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800fd5e:	79fb      	ldrb	r3, [r7, #7]
 800fd60:	2b02      	cmp	r3, #2
 800fd62:	f040 80a2 	bne.w	800feaa <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fd66:	4a56      	ldr	r2, [pc, #344]	@ (800fec0 <SwitchClass+0x1c8>)
 800fd68:	79fb      	ldrb	r3, [r7, #7]
 800fd6a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fd6e:	4a55      	ldr	r2, [pc, #340]	@ (800fec4 <SwitchClass+0x1cc>)
 800fd70:	4b54      	ldr	r3, [pc, #336]	@ (800fec4 <SwitchClass+0x1cc>)
 800fd72:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800fd76:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800fd7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fd82:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fd86:	4b4f      	ldr	r3, [pc, #316]	@ (800fec4 <SwitchClass+0x1cc>)
 800fd88:	2202      	movs	r2, #2
 800fd8a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fd8e:	2300      	movs	r3, #0
 800fd90:	73bb      	strb	r3, [r7, #14]
 800fd92:	e05b      	b.n	800fe4c <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800fd94:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fd98:	4949      	ldr	r1, [pc, #292]	@ (800fec0 <SwitchClass+0x1c8>)
 800fd9a:	4613      	mov	r3, r2
 800fd9c:	005b      	lsls	r3, r3, #1
 800fd9e:	4413      	add	r3, r2
 800fda0:	011b      	lsls	r3, r3, #4
 800fda2:	440b      	add	r3, r1
 800fda4:	33e9      	adds	r3, #233	@ 0xe9
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d049      	beq.n	800fe40 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800fdac:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fdb0:	4943      	ldr	r1, [pc, #268]	@ (800fec0 <SwitchClass+0x1c8>)
 800fdb2:	4613      	mov	r3, r2
 800fdb4:	005b      	lsls	r3, r3, #1
 800fdb6:	4413      	add	r3, r2
 800fdb8:	011b      	lsls	r3, r3, #4
 800fdba:	440b      	add	r3, r1
 800fdbc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800fdc0:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800fdc2:	2b02      	cmp	r3, #2
 800fdc4:	d13c      	bne.n	800fe40 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800fdc6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fdca:	493d      	ldr	r1, [pc, #244]	@ (800fec0 <SwitchClass+0x1c8>)
 800fdcc:	4613      	mov	r3, r2
 800fdce:	005b      	lsls	r3, r3, #1
 800fdd0:	4413      	add	r3, r2
 800fdd2:	011b      	lsls	r3, r3, #4
 800fdd4:	440b      	add	r3, r1
 800fdd6:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	4a38      	ldr	r2, [pc, #224]	@ (800fec0 <SwitchClass+0x1c8>)
 800fdde:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800fde0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fde4:	4936      	ldr	r1, [pc, #216]	@ (800fec0 <SwitchClass+0x1c8>)
 800fde6:	4613      	mov	r3, r2
 800fde8:	005b      	lsls	r3, r3, #1
 800fdea:	4413      	add	r3, r2
 800fdec:	011b      	lsls	r3, r3, #4
 800fdee:	440b      	add	r3, r1
 800fdf0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800fdf4:	f993 3000 	ldrsb.w	r3, [r3]
 800fdf8:	b2da      	uxtb	r2, r3
 800fdfa:	4b31      	ldr	r3, [pc, #196]	@ (800fec0 <SwitchClass+0x1c8>)
 800fdfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fe00:	4b30      	ldr	r3, [pc, #192]	@ (800fec4 <SwitchClass+0x1cc>)
 800fe02:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800fe06:	4b2f      	ldr	r3, [pc, #188]	@ (800fec4 <SwitchClass+0x1cc>)
 800fe08:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fe0c:	4b2c      	ldr	r3, [pc, #176]	@ (800fec0 <SwitchClass+0x1c8>)
 800fe0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe10:	4a2c      	ldr	r2, [pc, #176]	@ (800fec4 <SwitchClass+0x1cc>)
 800fe12:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fe16:	4b2a      	ldr	r3, [pc, #168]	@ (800fec0 <SwitchClass+0x1c8>)
 800fe18:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800fe1c:	4b29      	ldr	r3, [pc, #164]	@ (800fec4 <SwitchClass+0x1cc>)
 800fe1e:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fe22:	4b27      	ldr	r3, [pc, #156]	@ (800fec0 <SwitchClass+0x1c8>)
 800fe24:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800fe28:	4b26      	ldr	r3, [pc, #152]	@ (800fec4 <SwitchClass+0x1cc>)
 800fe2a:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fe2e:	4b25      	ldr	r3, [pc, #148]	@ (800fec4 <SwitchClass+0x1cc>)
 800fe30:	2203      	movs	r2, #3
 800fe32:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800fe36:	4b23      	ldr	r3, [pc, #140]	@ (800fec4 <SwitchClass+0x1cc>)
 800fe38:	2201      	movs	r2, #1
 800fe3a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800fe3e:	e009      	b.n	800fe54 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fe40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	3301      	adds	r3, #1
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	73bb      	strb	r3, [r7, #14]
 800fe4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	dd9f      	ble.n	800fd94 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800fe54:	4b1b      	ldr	r3, [pc, #108]	@ (800fec4 <SwitchClass+0x1cc>)
 800fe56:	2200      	movs	r2, #0
 800fe58:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800fe5c:	4b1a      	ldr	r3, [pc, #104]	@ (800fec8 <SwitchClass+0x1d0>)
 800fe5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe60:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800fe62:	f001 fa41 	bl	80112e8 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800fe66:	2300      	movs	r3, #0
 800fe68:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800fe6a:	e01e      	b.n	800feaa <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800fe6c:	79fb      	ldrb	r3, [r7, #7]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f003 fc64 	bl	801373c <LoRaMacClassBSwitchClass>
 800fe74:	4603      	mov	r3, r0
 800fe76:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800fe78:	7bfb      	ldrb	r3, [r7, #15]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d117      	bne.n	800feae <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fe7e:	4a10      	ldr	r2, [pc, #64]	@ (800fec0 <SwitchClass+0x1c8>)
 800fe80:	79fb      	ldrb	r3, [r7, #7]
 800fe82:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800fe86:	e012      	b.n	800feae <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800fe88:	79fb      	ldrb	r3, [r7, #7]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d111      	bne.n	800feb2 <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800fe8e:	4b0d      	ldr	r3, [pc, #52]	@ (800fec4 <SwitchClass+0x1cc>)
 800fe90:	2206      	movs	r2, #6
 800fe92:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fe96:	4a0a      	ldr	r2, [pc, #40]	@ (800fec0 <SwitchClass+0x1c8>)
 800fe98:	79fb      	ldrb	r3, [r7, #7]
 800fe9a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800fe9e:	4b0a      	ldr	r3, [pc, #40]	@ (800fec8 <SwitchClass+0x1d0>)
 800fea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fea2:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800fea4:	2300      	movs	r3, #0
 800fea6:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800fea8:	e003      	b.n	800feb2 <SwitchClass+0x1ba>
            break;
 800feaa:	bf00      	nop
 800feac:	e002      	b.n	800feb4 <SwitchClass+0x1bc>
            break;
 800feae:	bf00      	nop
 800feb0:	e000      	b.n	800feb4 <SwitchClass+0x1bc>
            break;
 800feb2:	bf00      	nop
        }
    }

    return status;
 800feb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3710      	adds	r7, #16
 800feba:	46bd      	mov	sp, r7
 800febc:	bdb0      	pop	{r4, r5, r7, pc}
 800febe:	bf00      	nop
 800fec0:	20000d04 	.word	0x20000d04
 800fec4:	200007d0 	.word	0x200007d0
 800fec8:	0801d50c 	.word	0x0801d50c

0800fecc <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b086      	sub	sp, #24
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	4603      	mov	r3, r0
 800fed4:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fed6:	4b10      	ldr	r3, [pc, #64]	@ (800ff18 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fed8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800fedc:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800fede:	79fb      	ldrb	r3, [r7, #7]
 800fee0:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fee2:	230d      	movs	r3, #13
 800fee4:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fee6:	4b0c      	ldr	r3, [pc, #48]	@ (800ff18 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fee8:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800feec:	2b00      	cmp	r3, #0
 800feee:	d001      	beq.n	800fef4 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fef0:	230e      	movs	r3, #14
 800fef2:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fef4:	4b08      	ldr	r3, [pc, #32]	@ (800ff18 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fef6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fefa:	f107 0210 	add.w	r2, r7, #16
 800fefe:	4611      	mov	r1, r2
 800ff00:	4618      	mov	r0, r3
 800ff02:	f005 fb5b 	bl	80155bc <RegionGetPhyParam>
 800ff06:	4603      	mov	r3, r0
 800ff08:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	b2db      	uxtb	r3, r3
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3718      	adds	r7, #24
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	20000d04 	.word	0x20000d04

0800ff1c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	4603      	mov	r3, r0
 800ff24:	71fb      	strb	r3, [r7, #7]
 800ff26:	460b      	mov	r3, r1
 800ff28:	71bb      	strb	r3, [r7, #6]
 800ff2a:	4613      	mov	r3, r2
 800ff2c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800ff32:	2300      	movs	r3, #0
 800ff34:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ff36:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7ff ffc6 	bl	800fecc <GetMaxAppPayloadWithoutFOptsLength>
 800ff40:	4603      	mov	r3, r0
 800ff42:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ff44:	79fb      	ldrb	r3, [r7, #7]
 800ff46:	b29a      	uxth	r2, r3
 800ff48:	797b      	ldrb	r3, [r7, #5]
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	4413      	add	r3, r2
 800ff4e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ff50:	89ba      	ldrh	r2, [r7, #12]
 800ff52:	89fb      	ldrh	r3, [r7, #14]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d804      	bhi.n	800ff62 <ValidatePayloadLength+0x46>
 800ff58:	89bb      	ldrh	r3, [r7, #12]
 800ff5a:	2bff      	cmp	r3, #255	@ 0xff
 800ff5c:	d801      	bhi.n	800ff62 <ValidatePayloadLength+0x46>
    {
        return true;
 800ff5e:	2301      	movs	r3, #1
 800ff60:	e000      	b.n	800ff64 <ValidatePayloadLength+0x48>
    }
    return false;
 800ff62:	2300      	movs	r3, #0
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3710      	adds	r7, #16
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800ff6c:	b590      	push	{r4, r7, lr}
 800ff6e:	b0a5      	sub	sp, #148	@ 0x94
 800ff70:	af02      	add	r7, sp, #8
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	4608      	mov	r0, r1
 800ff76:	4611      	mov	r1, r2
 800ff78:	461a      	mov	r2, r3
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	70fb      	strb	r3, [r7, #3]
 800ff7e:	460b      	mov	r3, r1
 800ff80:	70bb      	strb	r3, [r7, #2]
 800ff82:	4613      	mov	r3, r2
 800ff84:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800ff86:	2300      	movs	r3, #0
 800ff88:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ff92:	2300      	movs	r3, #0
 800ff94:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800ff98:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f000 84c3 	beq.w	8010928 <ProcessMacCommands+0x9bc>
 800ffa2:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	f040 84c4 	bne.w	8010934 <ProcessMacCommands+0x9c8>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800ffac:	f000 bcbc 	b.w	8010928 <ProcessMacCommands+0x9bc>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800ffb0:	78fb      	ldrb	r3, [r7, #3]
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f003 febf 	bl	8013d3c <LoRaMacCommandsGetCmdSize>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	78fb      	ldrb	r3, [r7, #3]
 800ffc4:	441a      	add	r2, r3
 800ffc6:	78bb      	ldrb	r3, [r7, #2]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	f300 84b5 	bgt.w	8010938 <ProcessMacCommands+0x9cc>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800ffce:	78fb      	ldrb	r3, [r7, #3]
 800ffd0:	1c5a      	adds	r2, r3, #1
 800ffd2:	70fa      	strb	r2, [r7, #3]
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4413      	add	r3, r2
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	3b02      	subs	r3, #2
 800ffde:	2b11      	cmp	r3, #17
 800ffe0:	f200 84ac 	bhi.w	801093c <ProcessMacCommands+0x9d0>
 800ffe4:	a201      	add	r2, pc, #4	@ (adr r2, 800ffec <ProcessMacCommands+0x80>)
 800ffe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffea:	bf00      	nop
 800ffec:	08010035 	.word	0x08010035
 800fff0:	08010077 	.word	0x08010077
 800fff4:	080101f3 	.word	0x080101f3
 800fff8:	08010231 	.word	0x08010231
 800fffc:	0801033d 	.word	0x0801033d
 8010000:	0801038d 	.word	0x0801038d
 8010004:	08010449 	.word	0x08010449
 8010008:	0801049f 	.word	0x0801049f
 801000c:	08010585 	.word	0x08010585
 8010010:	0801093d 	.word	0x0801093d
 8010014:	0801093d 	.word	0x0801093d
 8010018:	0801062d 	.word	0x0801062d
 801001c:	0801093d 	.word	0x0801093d
 8010020:	0801093d 	.word	0x0801093d
 8010024:	0801074d 	.word	0x0801074d
 8010028:	08010781 	.word	0x08010781
 801002c:	08010811 	.word	0x08010811
 8010030:	08010889 	.word	0x08010889
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010034:	2005      	movs	r0, #5
 8010036:	f004 f859 	bl	80140ec <LoRaMacConfirmQueueIsCmdActive>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	f000 8466 	beq.w	801090e <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010042:	2105      	movs	r1, #5
 8010044:	2000      	movs	r0, #0
 8010046:	f003 ffc5 	bl	8013fd4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 801004a:	78fb      	ldrb	r3, [r7, #3]
 801004c:	1c5a      	adds	r2, r3, #1
 801004e:	70fa      	strb	r2, [r7, #3]
 8010050:	461a      	mov	r2, r3
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4413      	add	r3, r2
 8010056:	781a      	ldrb	r2, [r3, #0]
 8010058:	4bb5      	ldr	r3, [pc, #724]	@ (8010330 <ProcessMacCommands+0x3c4>)
 801005a:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801005e:	78fb      	ldrb	r3, [r7, #3]
 8010060:	1c5a      	adds	r2, r3, #1
 8010062:	70fa      	strb	r2, [r7, #3]
 8010064:	461a      	mov	r2, r3
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4413      	add	r3, r2
 801006a:	781a      	ldrb	r2, [r3, #0]
 801006c:	4bb0      	ldr	r3, [pc, #704]	@ (8010330 <ProcessMacCommands+0x3c4>)
 801006e:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 8010072:	f000 bc4c 	b.w	801090e <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010076:	2300      	movs	r3, #0
 8010078:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 801007c:	2300      	movs	r3, #0
 801007e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8010088:	2300      	movs	r3, #0
 801008a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 801008e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8010092:	f083 0301 	eor.w	r3, r3, #1
 8010096:	b2db      	uxtb	r3, r3
 8010098:	2b00      	cmp	r3, #0
 801009a:	f000 80a6 	beq.w	80101ea <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 801009e:	2301      	movs	r3, #1
 80100a0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80100a4:	78fb      	ldrb	r3, [r7, #3]
 80100a6:	3b01      	subs	r3, #1
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	4413      	add	r3, r2
 80100ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80100ae:	4ba1      	ldr	r3, [pc, #644]	@ (8010334 <ProcessMacCommands+0x3c8>)
 80100b0:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80100b4:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80100b8:	4b9e      	ldr	r3, [pc, #632]	@ (8010334 <ProcessMacCommands+0x3c8>)
 80100ba:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80100be:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80100c2:	4b9c      	ldr	r3, [pc, #624]	@ (8010334 <ProcessMacCommands+0x3c8>)
 80100c4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80100c8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80100cc:	4b99      	ldr	r3, [pc, #612]	@ (8010334 <ProcessMacCommands+0x3c8>)
 80100ce:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80100d2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80100d6:	4b97      	ldr	r3, [pc, #604]	@ (8010334 <ProcessMacCommands+0x3c8>)
 80100d8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80100dc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80100e0:	4b94      	ldr	r3, [pc, #592]	@ (8010334 <ProcessMacCommands+0x3c8>)
 80100e2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80100e6:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80100e8:	4b92      	ldr	r3, [pc, #584]	@ (8010334 <ProcessMacCommands+0x3c8>)
 80100ea:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d008      	beq.n	8010104 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80100f2:	78ba      	ldrb	r2, [r7, #2]
 80100f4:	78fb      	ldrb	r3, [r7, #3]
 80100f6:	1ad3      	subs	r3, r2, r3
 80100f8:	b2db      	uxtb	r3, r3
 80100fa:	3301      	adds	r3, #1
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 8010102:	e002      	b.n	801010a <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8010104:	2305      	movs	r3, #5
 8010106:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 801010a:	4b8a      	ldr	r3, [pc, #552]	@ (8010334 <ProcessMacCommands+0x3c8>)
 801010c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8010110:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 8010114:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 8010118:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801011c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8010120:	9301      	str	r3, [sp, #4]
 8010122:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	4623      	mov	r3, r4
 801012a:	f005 fb04 	bl	8015736 <RegionLinkAdrReq>
 801012e:	4603      	mov	r3, r0
 8010130:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8010134:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010138:	f003 0307 	and.w	r3, r3, #7
 801013c:	2b07      	cmp	r3, #7
 801013e:	d119      	bne.n	8010174 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8010140:	4b7c      	ldr	r3, [pc, #496]	@ (8010334 <ProcessMacCommands+0x3c8>)
 8010142:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8010146:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801014a:	429a      	cmp	r2, r3
 801014c:	da03      	bge.n	8010156 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 801014e:	4b79      	ldr	r3, [pc, #484]	@ (8010334 <ProcessMacCommands+0x3c8>)
 8010150:	2201      	movs	r2, #1
 8010152:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8010156:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801015a:	4b76      	ldr	r3, [pc, #472]	@ (8010334 <ProcessMacCommands+0x3c8>)
 801015c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8010160:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 8010164:	4b73      	ldr	r3, [pc, #460]	@ (8010334 <ProcessMacCommands+0x3c8>)
 8010166:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 801016a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 801016e:	4b71      	ldr	r3, [pc, #452]	@ (8010334 <ProcessMacCommands+0x3c8>)
 8010170:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010174:	2300      	movs	r3, #0
 8010176:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 801017a:	e00b      	b.n	8010194 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 801017c:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8010180:	2201      	movs	r2, #1
 8010182:	4619      	mov	r1, r3
 8010184:	2003      	movs	r0, #3
 8010186:	f003 fc79 	bl	8013a7c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801018a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 801018e:	3301      	adds	r3, #1
 8010190:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8010194:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8010198:	4a67      	ldr	r2, [pc, #412]	@ (8010338 <ProcessMacCommands+0x3cc>)
 801019a:	fba2 2303 	umull	r2, r3, r2, r3
 801019e:	089b      	lsrs	r3, r3, #2
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d3e8      	bcc.n	801017c <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 80101aa:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80101ae:	78fb      	ldrb	r3, [r7, #3]
 80101b0:	4413      	add	r3, r2
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	3b01      	subs	r3, #1
 80101b6:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 80101b8:	78fa      	ldrb	r2, [r7, #3]
 80101ba:	78bb      	ldrb	r3, [r7, #2]
 80101bc:	429a      	cmp	r2, r3
 80101be:	d20a      	bcs.n	80101d6 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80101c0:	78fb      	ldrb	r3, [r7, #3]
 80101c2:	1c5a      	adds	r2, r3, #1
 80101c4:	70fa      	strb	r2, [r7, #3]
 80101c6:	461a      	mov	r2, r3
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	4413      	add	r3, r2
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	2b03      	cmp	r3, #3
 80101d0:	f43f af68 	beq.w	80100a4 <ProcessMacCommands+0x138>
 80101d4:	e000      	b.n	80101d8 <ProcessMacCommands+0x26c>
                            break;
 80101d6:	bf00      	nop

                    if( macIndex < commandsSize )
 80101d8:	78fa      	ldrb	r2, [r7, #3]
 80101da:	78bb      	ldrb	r3, [r7, #2]
 80101dc:	429a      	cmp	r2, r3
 80101de:	f080 8398 	bcs.w	8010912 <ProcessMacCommands+0x9a6>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 80101e2:	78fb      	ldrb	r3, [r7, #3]
 80101e4:	3b01      	subs	r3, #1
 80101e6:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80101e8:	e393      	b.n	8010912 <ProcessMacCommands+0x9a6>
                    macIndex += 4;
 80101ea:	78fb      	ldrb	r3, [r7, #3]
 80101ec:	3304      	adds	r3, #4
 80101ee:	70fb      	strb	r3, [r7, #3]
                break;
 80101f0:	e38f      	b.n	8010912 <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80101f2:	78fb      	ldrb	r3, [r7, #3]
 80101f4:	1c5a      	adds	r2, r3, #1
 80101f6:	70fa      	strb	r2, [r7, #3]
 80101f8:	461a      	mov	r2, r3
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4413      	add	r3, r2
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	f003 030f 	and.w	r3, r3, #15
 8010204:	b2da      	uxtb	r2, r3
 8010206:	4b4b      	ldr	r3, [pc, #300]	@ (8010334 <ProcessMacCommands+0x3c8>)
 8010208:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 801020c:	4b49      	ldr	r3, [pc, #292]	@ (8010334 <ProcessMacCommands+0x3c8>)
 801020e:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8010212:	461a      	mov	r2, r3
 8010214:	2301      	movs	r3, #1
 8010216:	4093      	lsls	r3, r2
 8010218:	b29a      	uxth	r2, r3
 801021a:	4b46      	ldr	r3, [pc, #280]	@ (8010334 <ProcessMacCommands+0x3c8>)
 801021c:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010220:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010224:	2200      	movs	r2, #0
 8010226:	4619      	mov	r1, r3
 8010228:	2004      	movs	r0, #4
 801022a:	f003 fc27 	bl	8013a7c <LoRaMacCommandsAddCmd>
                break;
 801022e:	e37b      	b.n	8010928 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010230:	2307      	movs	r3, #7
 8010232:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010236:	78fb      	ldrb	r3, [r7, #3]
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	4413      	add	r3, r2
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	091b      	lsrs	r3, r3, #4
 8010240:	b2db      	uxtb	r3, r3
 8010242:	b25b      	sxtb	r3, r3
 8010244:	f003 0307 	and.w	r3, r3, #7
 8010248:	b25b      	sxtb	r3, r3
 801024a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801024e:	78fb      	ldrb	r3, [r7, #3]
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	4413      	add	r3, r2
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	b25b      	sxtb	r3, r3
 8010258:	f003 030f 	and.w	r3, r3, #15
 801025c:	b25b      	sxtb	r3, r3
 801025e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 8010262:	78fb      	ldrb	r3, [r7, #3]
 8010264:	3301      	adds	r3, #1
 8010266:	70fb      	strb	r3, [r7, #3]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( rxParamSetupReq.Datarate == 0x0F )
 8010268:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 801026c:	2b0f      	cmp	r3, #15
 801026e:	d105      	bne.n	801027c <ProcessMacCommands+0x310>
                {
                    // Keep the current datarate
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
 8010270:	4b30      	ldr	r3, [pc, #192]	@ (8010334 <ProcessMacCommands+0x3c8>)
 8010272:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8010276:	b25b      	sxtb	r3, r3
 8010278:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                }
#endif

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 801027c:	78fb      	ldrb	r3, [r7, #3]
 801027e:	1c5a      	adds	r2, r3, #1
 8010280:	70fa      	strb	r2, [r7, #3]
 8010282:	461a      	mov	r2, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	4413      	add	r3, r2
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801028c:	78fb      	ldrb	r3, [r7, #3]
 801028e:	1c5a      	adds	r2, r3, #1
 8010290:	70fa      	strb	r2, [r7, #3]
 8010292:	461a      	mov	r2, r3
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	4413      	add	r3, r2
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	021a      	lsls	r2, r3, #8
 801029c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801029e:	4313      	orrs	r3, r2
 80102a0:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80102a2:	78fb      	ldrb	r3, [r7, #3]
 80102a4:	1c5a      	adds	r2, r3, #1
 80102a6:	70fa      	strb	r2, [r7, #3]
 80102a8:	461a      	mov	r2, r3
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	4413      	add	r3, r2
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	041a      	lsls	r2, r3, #16
 80102b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102b4:	4313      	orrs	r3, r2
 80102b6:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 80102b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102ba:	2264      	movs	r2, #100	@ 0x64
 80102bc:	fb02 f303 	mul.w	r3, r2, r3
 80102c0:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80102c2:	4b1c      	ldr	r3, [pc, #112]	@ (8010334 <ProcessMacCommands+0x3c8>)
 80102c4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80102c8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80102cc:	4611      	mov	r1, r2
 80102ce:	4618      	mov	r0, r3
 80102d0:	f005 fa4b 	bl	801576a <RegionRxParamSetupReq>
 80102d4:	4603      	mov	r3, r0
 80102d6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80102da:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80102de:	f003 0307 	and.w	r3, r3, #7
 80102e2:	2b07      	cmp	r3, #7
 80102e4:	d117      	bne.n	8010316 <ProcessMacCommands+0x3aa>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80102e6:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 80102ea:	b2da      	uxtb	r2, r3
 80102ec:	4b11      	ldr	r3, [pc, #68]	@ (8010334 <ProcessMacCommands+0x3c8>)
 80102ee:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80102f2:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 80102f6:	b2da      	uxtb	r2, r3
 80102f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010334 <ProcessMacCommands+0x3c8>)
 80102fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80102fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010300:	4a0c      	ldr	r2, [pc, #48]	@ (8010334 <ProcessMacCommands+0x3c8>)
 8010302:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010306:	4a0b      	ldr	r2, [pc, #44]	@ (8010334 <ProcessMacCommands+0x3c8>)
 8010308:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 801030a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801030e:	b2da      	uxtb	r2, r3
 8010310:	4b08      	ldr	r3, [pc, #32]	@ (8010334 <ProcessMacCommands+0x3c8>)
 8010312:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 8010316:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 801031a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 801031e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010322:	2201      	movs	r2, #1
 8010324:	4619      	mov	r1, r3
 8010326:	2005      	movs	r0, #5
 8010328:	f003 fba8 	bl	8013a7c <LoRaMacCommandsAddCmd>
                break;
 801032c:	e2fc      	b.n	8010928 <ProcessMacCommands+0x9bc>
 801032e:	bf00      	nop
 8010330:	200007d0 	.word	0x200007d0
 8010334:	20000d04 	.word	0x20000d04
 8010338:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 801033c:	23ff      	movs	r3, #255	@ 0xff
 801033e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010342:	4bb7      	ldr	r3, [pc, #732]	@ (8010620 <ProcessMacCommands+0x6b4>)
 8010344:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00d      	beq.n	8010368 <ProcessMacCommands+0x3fc>
 801034c:	4bb4      	ldr	r3, [pc, #720]	@ (8010620 <ProcessMacCommands+0x6b4>)
 801034e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d007      	beq.n	8010368 <ProcessMacCommands+0x3fc>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010358:	4bb1      	ldr	r3, [pc, #708]	@ (8010620 <ProcessMacCommands+0x6b4>)
 801035a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	4798      	blx	r3
 8010362:	4603      	mov	r3, r0
 8010364:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8010368:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 801036c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010370:	787b      	ldrb	r3, [r7, #1]
 8010372:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010376:	b2db      	uxtb	r3, r3
 8010378:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 801037c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010380:	2202      	movs	r2, #2
 8010382:	4619      	mov	r1, r3
 8010384:	2006      	movs	r0, #6
 8010386:	f003 fb79 	bl	8013a7c <LoRaMacCommandsAddCmd>
                break;
 801038a:	e2cd      	b.n	8010928 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 801038c:	2303      	movs	r3, #3
 801038e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8010392:	78fb      	ldrb	r3, [r7, #3]
 8010394:	1c5a      	adds	r2, r3, #1
 8010396:	70fa      	strb	r2, [r7, #3]
 8010398:	461a      	mov	r2, r3
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	4413      	add	r3, r2
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	b25b      	sxtb	r3, r3
 80103a2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 80103a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80103aa:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80103ac:	78fb      	ldrb	r3, [r7, #3]
 80103ae:	1c5a      	adds	r2, r3, #1
 80103b0:	70fa      	strb	r2, [r7, #3]
 80103b2:	461a      	mov	r2, r3
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4413      	add	r3, r2
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80103bc:	78fb      	ldrb	r3, [r7, #3]
 80103be:	1c5a      	adds	r2, r3, #1
 80103c0:	70fa      	strb	r2, [r7, #3]
 80103c2:	461a      	mov	r2, r3
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	4413      	add	r3, r2
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	021a      	lsls	r2, r3, #8
 80103cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ce:	4313      	orrs	r3, r2
 80103d0:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80103d2:	78fb      	ldrb	r3, [r7, #3]
 80103d4:	1c5a      	adds	r2, r3, #1
 80103d6:	70fa      	strb	r2, [r7, #3]
 80103d8:	461a      	mov	r2, r3
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4413      	add	r3, r2
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	041a      	lsls	r2, r3, #16
 80103e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e4:	4313      	orrs	r3, r2
 80103e6:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 80103e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ea:	2264      	movs	r2, #100	@ 0x64
 80103ec:	fb02 f303 	mul.w	r3, r2, r3
 80103f0:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 80103f2:	2300      	movs	r3, #0
 80103f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80103f6:	78fb      	ldrb	r3, [r7, #3]
 80103f8:	1c5a      	adds	r2, r3, #1
 80103fa:	70fa      	strb	r2, [r7, #3]
 80103fc:	461a      	mov	r2, r3
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	4413      	add	r3, r2
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	b25b      	sxtb	r3, r3
 8010406:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 801040a:	4b86      	ldr	r3, [pc, #536]	@ (8010624 <ProcessMacCommands+0x6b8>)
 801040c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010410:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8010414:	4611      	mov	r1, r2
 8010416:	4618      	mov	r0, r3
 8010418:	f005 f9ba 	bl	8015790 <RegionNewChannelReq>
 801041c:	4603      	mov	r3, r0
 801041e:	b2db      	uxtb	r3, r3
 8010420:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8010424:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010428:	b25b      	sxtb	r3, r3
 801042a:	2b00      	cmp	r3, #0
 801042c:	f2c0 8273 	blt.w	8010916 <ProcessMacCommands+0x9aa>
                {
                    macCmdPayload[0] = status;
 8010430:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010434:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010438:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801043c:	2201      	movs	r2, #1
 801043e:	4619      	mov	r1, r3
 8010440:	2007      	movs	r0, #7
 8010442:	f003 fb1b 	bl	8013a7c <LoRaMacCommandsAddCmd>
                }
                break;
 8010446:	e266      	b.n	8010916 <ProcessMacCommands+0x9aa>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010448:	78fb      	ldrb	r3, [r7, #3]
 801044a:	1c5a      	adds	r2, r3, #1
 801044c:	70fa      	strb	r2, [r7, #3]
 801044e:	461a      	mov	r2, r3
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	4413      	add	r3, r2
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	f003 030f 	and.w	r3, r3, #15
 801045a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 801045e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010462:	2b00      	cmp	r3, #0
 8010464:	d104      	bne.n	8010470 <ProcessMacCommands+0x504>
                {
                    delay++;
 8010466:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 801046a:	3301      	adds	r3, #1
 801046c:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010470:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010474:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010478:	fb02 f303 	mul.w	r3, r2, r3
 801047c:	461a      	mov	r2, r3
 801047e:	4b69      	ldr	r3, [pc, #420]	@ (8010624 <ProcessMacCommands+0x6b8>)
 8010480:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010482:	4b68      	ldr	r3, [pc, #416]	@ (8010624 <ProcessMacCommands+0x6b8>)
 8010484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010486:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801048a:	4a66      	ldr	r2, [pc, #408]	@ (8010624 <ProcessMacCommands+0x6b8>)
 801048c:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801048e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010492:	2200      	movs	r2, #0
 8010494:	4619      	mov	r1, r3
 8010496:	2008      	movs	r0, #8
 8010498:	f003 faf0 	bl	8013a7c <LoRaMacCommandsAddCmd>
                break;
 801049c:	e244      	b.n	8010928 <ProcessMacCommands+0x9bc>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801049e:	78fb      	ldrb	r3, [r7, #3]
 80104a0:	1c5a      	adds	r2, r3, #1
 80104a2:	70fa      	strb	r2, [r7, #3]
 80104a4:	461a      	mov	r2, r3
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	4413      	add	r3, r2
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 80104b0:	2300      	movs	r3, #0
 80104b2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 80104b6:	2300      	movs	r3, #0
 80104b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80104bc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80104c0:	f003 0320 	and.w	r3, r3, #32
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d002      	beq.n	80104ce <ProcessMacCommands+0x562>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80104c8:	2301      	movs	r3, #1
 80104ca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80104ce:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80104d2:	f003 0310 	and.w	r3, r3, #16
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d002      	beq.n	80104e0 <ProcessMacCommands+0x574>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80104da:	2301      	movs	r3, #1
 80104dc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80104e0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80104e4:	f003 030f 	and.w	r3, r3, #15
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80104ee:	4b4d      	ldr	r3, [pc, #308]	@ (8010624 <ProcessMacCommands+0x6b8>)
 80104f0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80104f4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80104f8:	4611      	mov	r1, r2
 80104fa:	4618      	mov	r0, r3
 80104fc:	f005 f95b 	bl	80157b6 <RegionTxParamSetupReq>
 8010500:	4603      	mov	r3, r0
 8010502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010506:	f000 8208 	beq.w	801091a <ProcessMacCommands+0x9ae>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 801050a:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 801050e:	4b45      	ldr	r3, [pc, #276]	@ (8010624 <ProcessMacCommands+0x6b8>)
 8010510:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010514:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8010518:	4b42      	ldr	r3, [pc, #264]	@ (8010624 <ProcessMacCommands+0x6b8>)
 801051a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 801051e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010522:	461a      	mov	r2, r3
 8010524:	4b40      	ldr	r3, [pc, #256]	@ (8010628 <ProcessMacCommands+0x6bc>)
 8010526:	5c9b      	ldrb	r3, [r3, r2]
 8010528:	4618      	mov	r0, r3
 801052a:	f7f0 f94f 	bl	80007cc <__aeabi_ui2f>
 801052e:	4603      	mov	r3, r0
 8010530:	4a3c      	ldr	r2, [pc, #240]	@ (8010624 <ProcessMacCommands+0x6b8>)
 8010532:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010536:	2302      	movs	r3, #2
 8010538:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801053c:	4b39      	ldr	r3, [pc, #228]	@ (8010624 <ProcessMacCommands+0x6b8>)
 801053e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010542:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010546:	4b37      	ldr	r3, [pc, #220]	@ (8010624 <ProcessMacCommands+0x6b8>)
 8010548:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801054c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8010550:	4611      	mov	r1, r2
 8010552:	4618      	mov	r0, r3
 8010554:	f005 f832 	bl	80155bc <RegionGetPhyParam>
 8010558:	4603      	mov	r3, r0
 801055a:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 801055c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801055e:	b25a      	sxtb	r2, r3
 8010560:	4b30      	ldr	r3, [pc, #192]	@ (8010624 <ProcessMacCommands+0x6b8>)
 8010562:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010566:	4293      	cmp	r3, r2
 8010568:	bfb8      	it	lt
 801056a:	4613      	movlt	r3, r2
 801056c:	b25a      	sxtb	r2, r3
 801056e:	4b2d      	ldr	r3, [pc, #180]	@ (8010624 <ProcessMacCommands+0x6b8>)
 8010570:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010574:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010578:	2200      	movs	r2, #0
 801057a:	4619      	mov	r1, r3
 801057c:	2009      	movs	r0, #9
 801057e:	f003 fa7d 	bl	8013a7c <LoRaMacCommandsAddCmd>
                }
                break;
 8010582:	e1ca      	b.n	801091a <ProcessMacCommands+0x9ae>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010584:	2303      	movs	r3, #3
 8010586:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 801058a:	78fb      	ldrb	r3, [r7, #3]
 801058c:	1c5a      	adds	r2, r3, #1
 801058e:	70fa      	strb	r2, [r7, #3]
 8010590:	461a      	mov	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	4413      	add	r3, r2
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801059c:	78fb      	ldrb	r3, [r7, #3]
 801059e:	1c5a      	adds	r2, r3, #1
 80105a0:	70fa      	strb	r2, [r7, #3]
 80105a2:	461a      	mov	r2, r3
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4413      	add	r3, r2
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80105ac:	78fb      	ldrb	r3, [r7, #3]
 80105ae:	1c5a      	adds	r2, r3, #1
 80105b0:	70fa      	strb	r2, [r7, #3]
 80105b2:	461a      	mov	r2, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	4413      	add	r3, r2
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	021a      	lsls	r2, r3, #8
 80105bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105be:	4313      	orrs	r3, r2
 80105c0:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80105c2:	78fb      	ldrb	r3, [r7, #3]
 80105c4:	1c5a      	adds	r2, r3, #1
 80105c6:	70fa      	strb	r2, [r7, #3]
 80105c8:	461a      	mov	r2, r3
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	4413      	add	r3, r2
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	041a      	lsls	r2, r3, #16
 80105d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105d4:	4313      	orrs	r3, r2
 80105d6:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80105d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105da:	2264      	movs	r2, #100	@ 0x64
 80105dc:	fb02 f303 	mul.w	r3, r2, r3
 80105e0:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80105e2:	4b10      	ldr	r3, [pc, #64]	@ (8010624 <ProcessMacCommands+0x6b8>)
 80105e4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80105e8:	f107 0220 	add.w	r2, r7, #32
 80105ec:	4611      	mov	r1, r2
 80105ee:	4618      	mov	r0, r3
 80105f0:	f005 f8f4 	bl	80157dc <RegionDlChannelReq>
 80105f4:	4603      	mov	r3, r0
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 80105fc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010600:	b25b      	sxtb	r3, r3
 8010602:	2b00      	cmp	r3, #0
 8010604:	f2c0 818b 	blt.w	801091e <ProcessMacCommands+0x9b2>
                {
                    macCmdPayload[0] = status;
 8010608:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 801060c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8010610:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010614:	2201      	movs	r2, #1
 8010616:	4619      	mov	r1, r3
 8010618:	200a      	movs	r0, #10
 801061a:	f003 fa2f 	bl	8013a7c <LoRaMacCommandsAddCmd>
                }
                break;
 801061e:	e17e      	b.n	801091e <ProcessMacCommands+0x9b2>
 8010620:	200007d0 	.word	0x200007d0
 8010624:	20000d04 	.word	0x20000d04
 8010628:	0801d4c4 	.word	0x0801d4c4
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 801062c:	2009      	movs	r0, #9
 801062e:	f003 fd5d 	bl	80140ec <LoRaMacConfirmQueueIsCmdActive>
 8010632:	4603      	mov	r3, r0
 8010634:	2b00      	cmp	r3, #0
 8010636:	f000 8084 	beq.w	8010742 <ProcessMacCommands+0x7d6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 801063a:	2109      	movs	r1, #9
 801063c:	2000      	movs	r0, #0
 801063e:	f003 fcc9 	bl	8013fd4 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8010642:	f107 0318 	add.w	r3, r7, #24
 8010646:	2200      	movs	r2, #0
 8010648:	601a      	str	r2, [r3, #0]
 801064a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 801064c:	f107 0310 	add.w	r3, r7, #16
 8010650:	2200      	movs	r2, #0
 8010652:	601a      	str	r2, [r3, #0]
 8010654:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8010656:	f107 0308 	add.w	r3, r7, #8
 801065a:	2200      	movs	r2, #0
 801065c:	601a      	str	r2, [r3, #0]
 801065e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010660:	78fb      	ldrb	r3, [r7, #3]
 8010662:	1c5a      	adds	r2, r3, #1
 8010664:	70fa      	strb	r2, [r7, #3]
 8010666:	461a      	mov	r2, r3
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	4413      	add	r3, r2
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010670:	78fb      	ldrb	r3, [r7, #3]
 8010672:	1c5a      	adds	r2, r3, #1
 8010674:	70fa      	strb	r2, [r7, #3]
 8010676:	461a      	mov	r2, r3
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	4413      	add	r3, r2
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	021a      	lsls	r2, r3, #8
 8010680:	69bb      	ldr	r3, [r7, #24]
 8010682:	4313      	orrs	r3, r2
 8010684:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010686:	78fb      	ldrb	r3, [r7, #3]
 8010688:	1c5a      	adds	r2, r3, #1
 801068a:	70fa      	strb	r2, [r7, #3]
 801068c:	461a      	mov	r2, r3
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4413      	add	r3, r2
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	041a      	lsls	r2, r3, #16
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	4313      	orrs	r3, r2
 801069a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 801069c:	78fb      	ldrb	r3, [r7, #3]
 801069e:	1c5a      	adds	r2, r3, #1
 80106a0:	70fa      	strb	r2, [r7, #3]
 80106a2:	461a      	mov	r2, r3
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	4413      	add	r3, r2
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	061a      	lsls	r2, r3, #24
 80106ac:	69bb      	ldr	r3, [r7, #24]
 80106ae:	4313      	orrs	r3, r2
 80106b0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80106b2:	78fb      	ldrb	r3, [r7, #3]
 80106b4:	1c5a      	adds	r2, r3, #1
 80106b6:	70fa      	strb	r2, [r7, #3]
 80106b8:	461a      	mov	r2, r3
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	4413      	add	r3, r2
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	b21b      	sxth	r3, r3
 80106c2:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80106c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80106c8:	461a      	mov	r2, r3
 80106ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80106ce:	fb02 f303 	mul.w	r3, r2, r3
 80106d2:	121b      	asrs	r3, r3, #8
 80106d4:	b21b      	sxth	r3, r3
 80106d6:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80106d8:	f107 0310 	add.w	r3, r7, #16
 80106dc:	f107 0218 	add.w	r2, r7, #24
 80106e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106e4:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80106e8:	693a      	ldr	r2, [r7, #16]
 80106ea:	4b96      	ldr	r3, [pc, #600]	@ (8010944 <ProcessMacCommands+0x9d8>)
 80106ec:	4413      	add	r3, r2
 80106ee:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80106f0:	f107 0308 	add.w	r3, r7, #8
 80106f4:	4618      	mov	r0, r3
 80106f6:	f00a fddf 	bl	801b2b8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80106fa:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80106fe:	4b92      	ldr	r3, [pc, #584]	@ (8010948 <ProcessMacCommands+0x9dc>)
 8010700:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8010704:	9200      	str	r2, [sp, #0]
 8010706:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 801070a:	f107 0210 	add.w	r2, r7, #16
 801070e:	ca06      	ldmia	r2, {r1, r2}
 8010710:	f00a fd6b 	bl	801b1ea <SysTimeSub>
 8010714:	f107 0010 	add.w	r0, r7, #16
 8010718:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801071a:	9300      	str	r3, [sp, #0]
 801071c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801071e:	f107 0208 	add.w	r2, r7, #8
 8010722:	ca06      	ldmia	r2, {r1, r2}
 8010724:	f00a fd28 	bl	801b178 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010728:	f107 0310 	add.w	r3, r7, #16
 801072c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010730:	f00a fd94 	bl	801b25c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010734:	f003 f840 	bl	80137b8 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010738:	4b83      	ldr	r3, [pc, #524]	@ (8010948 <ProcessMacCommands+0x9dc>)
 801073a:	2201      	movs	r2, #1
 801073c:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8010740:	e0f2      	b.n	8010928 <ProcessMacCommands+0x9bc>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010742:	4b81      	ldr	r3, [pc, #516]	@ (8010948 <ProcessMacCommands+0x9dc>)
 8010744:	2200      	movs	r2, #0
 8010746:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 801074a:	e0ed      	b.n	8010928 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 801074c:	200c      	movs	r0, #12
 801074e:	f003 fccd 	bl	80140ec <LoRaMacConfirmQueueIsCmdActive>
 8010752:	4603      	mov	r3, r0
 8010754:	2b00      	cmp	r3, #0
 8010756:	f000 80e4 	beq.w	8010922 <ProcessMacCommands+0x9b6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801075a:	210c      	movs	r1, #12
 801075c:	2000      	movs	r0, #0
 801075e:	f003 fc39 	bl	8013fd4 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8010762:	4b79      	ldr	r3, [pc, #484]	@ (8010948 <ProcessMacCommands+0x9dc>)
 8010764:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010768:	2b04      	cmp	r3, #4
 801076a:	f000 80da 	beq.w	8010922 <ProcessMacCommands+0x9b6>
 801076e:	4b76      	ldr	r3, [pc, #472]	@ (8010948 <ProcessMacCommands+0x9dc>)
 8010770:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010774:	2b05      	cmp	r3, #5
 8010776:	f000 80d4 	beq.w	8010922 <ProcessMacCommands+0x9b6>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 801077a:	f002 fffe 	bl	801377a <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801077e:	e0d0      	b.n	8010922 <ProcessMacCommands+0x9b6>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8010780:	2303      	movs	r3, #3
 8010782:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 8010786:	2300      	movs	r3, #0
 8010788:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801078a:	78fb      	ldrb	r3, [r7, #3]
 801078c:	1c5a      	adds	r2, r3, #1
 801078e:	70fa      	strb	r2, [r7, #3]
 8010790:	461a      	mov	r2, r3
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	4413      	add	r3, r2
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801079a:	78fb      	ldrb	r3, [r7, #3]
 801079c:	1c5a      	adds	r2, r3, #1
 801079e:	70fa      	strb	r2, [r7, #3]
 80107a0:	461a      	mov	r2, r3
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	4413      	add	r3, r2
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	021b      	lsls	r3, r3, #8
 80107aa:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80107ac:	4313      	orrs	r3, r2
 80107ae:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80107b0:	78fb      	ldrb	r3, [r7, #3]
 80107b2:	1c5a      	adds	r2, r3, #1
 80107b4:	70fa      	strb	r2, [r7, #3]
 80107b6:	461a      	mov	r2, r3
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	4413      	add	r3, r2
 80107bc:	781b      	ldrb	r3, [r3, #0]
 80107be:	041b      	lsls	r3, r3, #16
 80107c0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80107c2:	4313      	orrs	r3, r2
 80107c4:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 80107c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80107c8:	2264      	movs	r2, #100	@ 0x64
 80107ca:	fb02 f303 	mul.w	r3, r2, r3
 80107ce:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 80107d0:	78fb      	ldrb	r3, [r7, #3]
 80107d2:	1c5a      	adds	r2, r3, #1
 80107d4:	70fa      	strb	r2, [r7, #3]
 80107d6:	461a      	mov	r2, r3
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4413      	add	r3, r2
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	f003 030f 	and.w	r3, r3, #15
 80107e2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80107e6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80107ea:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80107ec:	4618      	mov	r0, r3
 80107ee:	f002 ffca 	bl	8013786 <LoRaMacClassBPingSlotChannelReq>
 80107f2:	4603      	mov	r3, r0
 80107f4:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 80107f8:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80107fc:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8010800:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010804:	2201      	movs	r2, #1
 8010806:	4619      	mov	r1, r3
 8010808:	2011      	movs	r0, #17
 801080a:	f003 f937 	bl	8013a7c <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 801080e:	e08b      	b.n	8010928 <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8010810:	200d      	movs	r0, #13
 8010812:	f003 fc6b 	bl	80140ec <LoRaMacConfirmQueueIsCmdActive>
 8010816:	4603      	mov	r3, r0
 8010818:	2b00      	cmp	r3, #0
 801081a:	f000 8084 	beq.w	8010926 <ProcessMacCommands+0x9ba>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801081e:	210d      	movs	r1, #13
 8010820:	2000      	movs	r0, #0
 8010822:	f003 fbd7 	bl	8013fd4 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8010826:	2300      	movs	r3, #0
 8010828:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 801082c:	2300      	movs	r3, #0
 801082e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8010832:	78fb      	ldrb	r3, [r7, #3]
 8010834:	1c5a      	adds	r2, r3, #1
 8010836:	70fa      	strb	r2, [r7, #3]
 8010838:	461a      	mov	r2, r3
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	4413      	add	r3, r2
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010844:	78fb      	ldrb	r3, [r7, #3]
 8010846:	1c5a      	adds	r2, r3, #1
 8010848:	70fa      	strb	r2, [r7, #3]
 801084a:	461a      	mov	r2, r3
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	4413      	add	r3, r2
 8010850:	781b      	ldrb	r3, [r3, #0]
 8010852:	021b      	lsls	r3, r3, #8
 8010854:	b21a      	sxth	r2, r3
 8010856:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 801085a:	4313      	orrs	r3, r2
 801085c:	b21b      	sxth	r3, r3
 801085e:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8010862:	78fb      	ldrb	r3, [r7, #3]
 8010864:	1c5a      	adds	r2, r3, #1
 8010866:	70fa      	strb	r2, [r7, #3]
 8010868:	461a      	mov	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4413      	add	r3, r2
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010874:	4b35      	ldr	r3, [pc, #212]	@ (801094c <ProcessMacCommands+0x9e0>)
 8010876:	681a      	ldr	r2, [r3, #0]
 8010878:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 801087c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8010880:	4618      	mov	r0, r3
 8010882:	f002 ff8c 	bl	801379e <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010886:	e04e      	b.n	8010926 <ProcessMacCommands+0x9ba>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8010888:	2300      	movs	r3, #0
 801088a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801088e:	78fb      	ldrb	r3, [r7, #3]
 8010890:	1c5a      	adds	r2, r3, #1
 8010892:	70fa      	strb	r2, [r7, #3]
 8010894:	461a      	mov	r2, r3
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4413      	add	r3, r2
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80108a0:	78fb      	ldrb	r3, [r7, #3]
 80108a2:	1c5a      	adds	r2, r3, #1
 80108a4:	70fa      	strb	r2, [r7, #3]
 80108a6:	461a      	mov	r2, r3
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	4413      	add	r3, r2
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	021b      	lsls	r3, r3, #8
 80108b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80108b4:	4313      	orrs	r3, r2
 80108b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80108ba:	78fb      	ldrb	r3, [r7, #3]
 80108bc:	1c5a      	adds	r2, r3, #1
 80108be:	70fa      	strb	r2, [r7, #3]
 80108c0:	461a      	mov	r2, r3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4413      	add	r3, r2
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	041b      	lsls	r3, r3, #16
 80108ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80108ce:	4313      	orrs	r3, r2
 80108d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 80108d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80108d8:	2264      	movs	r2, #100	@ 0x64
 80108da:	fb02 f303 	mul.w	r3, r2, r3
 80108de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80108e2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80108e6:	f002 ff6d 	bl	80137c4 <LoRaMacClassBBeaconFreqReq>
 80108ea:	4603      	mov	r3, r0
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d003      	beq.n	80108f8 <ProcessMacCommands+0x98c>
                    {
                        macCmdPayload[0] = 1;
 80108f0:	2301      	movs	r3, #1
 80108f2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 80108f6:	e002      	b.n	80108fe <ProcessMacCommands+0x992>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80108f8:	2300      	movs	r3, #0
 80108fa:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80108fe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010902:	2201      	movs	r2, #1
 8010904:	4619      	mov	r1, r3
 8010906:	2013      	movs	r0, #19
 8010908:	f003 f8b8 	bl	8013a7c <LoRaMacCommandsAddCmd>
                }
                break;
 801090c:	e00c      	b.n	8010928 <ProcessMacCommands+0x9bc>
                break;
 801090e:	bf00      	nop
 8010910:	e00a      	b.n	8010928 <ProcessMacCommands+0x9bc>
                break;
 8010912:	bf00      	nop
 8010914:	e008      	b.n	8010928 <ProcessMacCommands+0x9bc>
                break;
 8010916:	bf00      	nop
 8010918:	e006      	b.n	8010928 <ProcessMacCommands+0x9bc>
                break;
 801091a:	bf00      	nop
 801091c:	e004      	b.n	8010928 <ProcessMacCommands+0x9bc>
                break;
 801091e:	bf00      	nop
 8010920:	e002      	b.n	8010928 <ProcessMacCommands+0x9bc>
                break;
 8010922:	bf00      	nop
 8010924:	e000      	b.n	8010928 <ProcessMacCommands+0x9bc>
                break;
 8010926:	bf00      	nop
    while( macIndex < commandsSize )
 8010928:	78fa      	ldrb	r2, [r7, #3]
 801092a:	78bb      	ldrb	r3, [r7, #2]
 801092c:	429a      	cmp	r2, r3
 801092e:	f4ff ab3f 	bcc.w	800ffb0 <ProcessMacCommands+0x44>
 8010932:	e004      	b.n	801093e <ProcessMacCommands+0x9d2>
        return;
 8010934:	bf00      	nop
 8010936:	e002      	b.n	801093e <ProcessMacCommands+0x9d2>
            return;
 8010938:	bf00      	nop
 801093a:	e000      	b.n	801093e <ProcessMacCommands+0x9d2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 801093c:	bf00      	nop
        }
    }
}
 801093e:	378c      	adds	r7, #140	@ 0x8c
 8010940:	46bd      	mov	sp, r7
 8010942:	bd90      	pop	{r4, r7, pc}
 8010944:	12d53d80 	.word	0x12d53d80
 8010948:	200007d0 	.word	0x200007d0
 801094c:	20001914 	.word	0x20001914

08010950 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b08e      	sub	sp, #56	@ 0x38
 8010954:	af02      	add	r7, sp, #8
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	607a      	str	r2, [r7, #4]
 801095a:	461a      	mov	r2, r3
 801095c:	460b      	mov	r3, r1
 801095e:	72fb      	strb	r3, [r7, #11]
 8010960:	4613      	mov	r3, r2
 8010962:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010964:	2303      	movs	r3, #3
 8010966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 801096a:	4b66      	ldr	r3, [pc, #408]	@ (8010b04 <Send+0x1b4>)
 801096c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010970:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010974:	4b63      	ldr	r3, [pc, #396]	@ (8010b04 <Send+0x1b4>)
 8010976:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801097a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801097e:	4b61      	ldr	r3, [pc, #388]	@ (8010b04 <Send+0x1b4>)
 8010980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010982:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010984:	4b5f      	ldr	r3, [pc, #380]	@ (8010b04 <Send+0x1b4>)
 8010986:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 801098a:	2b00      	cmp	r3, #0
 801098c:	d101      	bne.n	8010992 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801098e:	2307      	movs	r3, #7
 8010990:	e0b4      	b.n	8010afc <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8010992:	4b5c      	ldr	r3, [pc, #368]	@ (8010b04 <Send+0x1b4>)
 8010994:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8010998:	2b00      	cmp	r3, #0
 801099a:	d102      	bne.n	80109a2 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 801099c:	4b59      	ldr	r3, [pc, #356]	@ (8010b04 <Send+0x1b4>)
 801099e:	2200      	movs	r2, #0
 80109a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 80109a2:	2300      	movs	r3, #0
 80109a4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80109a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80109ac:	f023 030f 	bic.w	r3, r3, #15
 80109b0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80109b4:	4b53      	ldr	r3, [pc, #332]	@ (8010b04 <Send+0x1b4>)
 80109b6:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 80109ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80109be:	f362 13c7 	bfi	r3, r2, #7, #1
 80109c2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80109c6:	4b4f      	ldr	r3, [pc, #316]	@ (8010b04 <Send+0x1b4>)
 80109c8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80109cc:	2b01      	cmp	r3, #1
 80109ce:	d106      	bne.n	80109de <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80109d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80109d4:	f043 0310 	orr.w	r3, r3, #16
 80109d8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80109dc:	e005      	b.n	80109ea <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80109de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80109e2:	f023 0310 	bic.w	r3, r3, #16
 80109e6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80109ea:	4b46      	ldr	r3, [pc, #280]	@ (8010b04 <Send+0x1b4>)
 80109ec:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d005      	beq.n	8010a00 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80109f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80109f8:	f043 0320 	orr.w	r3, r3, #32
 80109fc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8010a00:	2301      	movs	r3, #1
 8010a02:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010a04:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010a08:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	bf14      	ite	ne
 8010a12:	2301      	movne	r3, #1
 8010a14:	2300      	moveq	r3, #0
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8010b04 <Send+0x1b4>)
 8010a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a1e:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8010a20:	4b38      	ldr	r3, [pc, #224]	@ (8010b04 <Send+0x1b4>)
 8010a22:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8010a26:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8010a28:	4b36      	ldr	r3, [pc, #216]	@ (8010b04 <Send+0x1b4>)
 8010a2a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8010a2e:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010a30:	4b34      	ldr	r3, [pc, #208]	@ (8010b04 <Send+0x1b4>)
 8010a32:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010a36:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010a3a:	4b32      	ldr	r3, [pc, #200]	@ (8010b04 <Send+0x1b4>)
 8010a3c:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010a40:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010a44:	4b2f      	ldr	r3, [pc, #188]	@ (8010b04 <Send+0x1b4>)
 8010a46:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8010a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8010b04 <Send+0x1b4>)
 8010a50:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010a54:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010a58:	4b2a      	ldr	r3, [pc, #168]	@ (8010b04 <Send+0x1b4>)
 8010a5a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010a5e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8010a62:	f107 0014 	add.w	r0, r7, #20
 8010a66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010a6a:	9300      	str	r3, [sp, #0]
 8010a6c:	4b26      	ldr	r3, [pc, #152]	@ (8010b08 <Send+0x1b8>)
 8010a6e:	4a27      	ldr	r2, [pc, #156]	@ (8010b0c <Send+0x1bc>)
 8010a70:	4927      	ldr	r1, [pc, #156]	@ (8010b10 <Send+0x1c0>)
 8010a72:	f002 fd21 	bl	80134b8 <LoRaMacAdrCalcNext>
 8010a76:	4603      	mov	r3, r0
 8010a78:	461a      	mov	r2, r3
 8010a7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010a7e:	f362 1386 	bfi	r3, r2, #6, #1
 8010a82:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010a86:	7afa      	ldrb	r2, [r7, #11]
 8010a88:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8010a8c:	893b      	ldrh	r3, [r7, #8]
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	f000 fc72 	bl	801137c <PrepareFrame>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d003      	beq.n	8010aae <Send+0x15e>
 8010aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010aaa:	2b0a      	cmp	r3, #10
 8010aac:	d107      	bne.n	8010abe <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8010aae:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f000 f962 	bl	8010d7c <ScheduleTx>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010abe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d00a      	beq.n	8010adc <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8010b04 <Send+0x1b4>)
 8010ac8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010acc:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8010b04 <Send+0x1b4>)
 8010ad2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010ad6:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8010ada:	e00d      	b.n	8010af8 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010adc:	4b09      	ldr	r3, [pc, #36]	@ (8010b04 <Send+0x1b4>)
 8010ade:	2200      	movs	r2, #0
 8010ae0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ae6:	4a07      	ldr	r2, [pc, #28]	@ (8010b04 <Send+0x1b4>)
 8010ae8:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010aea:	f003 f86d 	bl	8013bc8 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d001      	beq.n	8010af8 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010af4:	2313      	movs	r3, #19
 8010af6:	e001      	b.n	8010afc <Send+0x1ac>
        }
    }
    return status;
 8010af8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3730      	adds	r7, #48	@ 0x30
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}
 8010b04:	20000d04 	.word	0x20000d04
 8010b08:	20000d6c 	.word	0x20000d6c
 8010b0c:	20000d3c 	.word	0x20000d3c
 8010b10:	20000d3d 	.word	0x20000d3d

08010b14 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b084      	sub	sp, #16
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8010b22:	2300      	movs	r3, #0
 8010b24:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8010b26:	2301      	movs	r3, #1
 8010b28:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010b2a:	79fb      	ldrb	r3, [r7, #7]
 8010b2c:	2bff      	cmp	r3, #255	@ 0xff
 8010b2e:	d11f      	bne.n	8010b70 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010b30:	2000      	movs	r0, #0
 8010b32:	f7ff f8e1 	bl	800fcf8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010b36:	4b15      	ldr	r3, [pc, #84]	@ (8010b8c <SendReJoinReq+0x78>)
 8010b38:	2200      	movs	r2, #0
 8010b3a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010b3e:	4b13      	ldr	r3, [pc, #76]	@ (8010b8c <SendReJoinReq+0x78>)
 8010b40:	4a13      	ldr	r2, [pc, #76]	@ (8010b90 <SendReJoinReq+0x7c>)
 8010b42:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010b46:	4b11      	ldr	r3, [pc, #68]	@ (8010b8c <SendReJoinReq+0x78>)
 8010b48:	22ff      	movs	r2, #255	@ 0xff
 8010b4a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010b4e:	7b3b      	ldrb	r3, [r7, #12]
 8010b50:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8010b54:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010b56:	7b3a      	ldrb	r2, [r7, #12]
 8010b58:	4b0c      	ldr	r3, [pc, #48]	@ (8010b8c <SendReJoinReq+0x78>)
 8010b5a:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8010b5e:	480d      	ldr	r0, [pc, #52]	@ (8010b94 <SendReJoinReq+0x80>)
 8010b60:	f7fb fefc 	bl	800c95c <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8010b64:	480c      	ldr	r0, [pc, #48]	@ (8010b98 <SendReJoinReq+0x84>)
 8010b66:	f7fb fec9 	bl	800c8fc <SecureElementGetDevEui>

            allowDelayedTx = false;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	73fb      	strb	r3, [r7, #15]

            break;
 8010b6e:	e002      	b.n	8010b76 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010b70:	2302      	movs	r3, #2
 8010b72:	73bb      	strb	r3, [r7, #14]
            break;
 8010b74:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010b76:	7bfb      	ldrb	r3, [r7, #15]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f000 f8ff 	bl	8010d7c <ScheduleTx>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	73bb      	strb	r3, [r7, #14]
    return status;
 8010b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3710      	adds	r7, #16
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	200007d0 	.word	0x200007d0
 8010b90:	200007d2 	.word	0x200007d2
 8010b94:	200008de 	.word	0x200008de
 8010b98:	200008e6 	.word	0x200008e6

08010b9c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010ba0:	f002 fd9a 	bl	80136d8 <LoRaMacClassBIsBeaconExpected>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d001      	beq.n	8010bae <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010baa:	230e      	movs	r3, #14
 8010bac:	e013      	b.n	8010bd6 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010bae:	4b0b      	ldr	r3, [pc, #44]	@ (8010bdc <CheckForClassBCollision+0x40>)
 8010bb0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d10d      	bne.n	8010bd4 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010bb8:	f002 fd95 	bl	80136e6 <LoRaMacClassBIsPingExpected>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d001      	beq.n	8010bc6 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010bc2:	230f      	movs	r3, #15
 8010bc4:	e007      	b.n	8010bd6 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010bc6:	f002 fd95 	bl	80136f4 <LoRaMacClassBIsMulticastExpected>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d001      	beq.n	8010bd4 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010bd0:	230f      	movs	r3, #15
 8010bd2:	e000      	b.n	8010bd6 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010bd4:	2300      	movs	r3, #0
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	bd80      	pop	{r7, pc}
 8010bda:	bf00      	nop
 8010bdc:	20000d04 	.word	0x20000d04

08010be0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010be0:	b590      	push	{r4, r7, lr}
 8010be2:	b083      	sub	sp, #12
 8010be4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010be6:	4b2d      	ldr	r3, [pc, #180]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010be8:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010bec:	4b2b      	ldr	r3, [pc, #172]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010bee:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8010bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010bf4:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 8010bf8:	4b28      	ldr	r3, [pc, #160]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010bfa:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010bfe:	4b27      	ldr	r3, [pc, #156]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010c00:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010c04:	b25b      	sxtb	r3, r3
 8010c06:	f004 fe2e 	bl	8015866 <RegionApplyDrOffset>
 8010c0a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010c0c:	b259      	sxtb	r1, r3
 8010c0e:	4b23      	ldr	r3, [pc, #140]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010c10:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8010c14:	4b21      	ldr	r3, [pc, #132]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c18:	4821      	ldr	r0, [pc, #132]	@ (8010ca0 <ComputeRxWindowParameters+0xc0>)
 8010c1a:	9000      	str	r0, [sp, #0]
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	f004 fd44 	bl	80156aa <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010c22:	4b1e      	ldr	r3, [pc, #120]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010c24:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010c28:	4b1c      	ldr	r3, [pc, #112]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010c2a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010c2e:	b259      	sxtb	r1, r3
 8010c30:	4b1a      	ldr	r3, [pc, #104]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010c32:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8010c36:	4b19      	ldr	r3, [pc, #100]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c3a:	4c1a      	ldr	r4, [pc, #104]	@ (8010ca4 <ComputeRxWindowParameters+0xc4>)
 8010c3c:	9400      	str	r4, [sp, #0]
 8010c3e:	f004 fd34 	bl	80156aa <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010c42:	4b16      	ldr	r3, [pc, #88]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c46:	4a18      	ldr	r2, [pc, #96]	@ (8010ca8 <ComputeRxWindowParameters+0xc8>)
 8010c48:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8010c4c:	4413      	add	r3, r2
 8010c4e:	4a16      	ldr	r2, [pc, #88]	@ (8010ca8 <ComputeRxWindowParameters+0xc8>)
 8010c50:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010c54:	4b11      	ldr	r3, [pc, #68]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c58:	4a13      	ldr	r2, [pc, #76]	@ (8010ca8 <ComputeRxWindowParameters+0xc8>)
 8010c5a:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8010c5e:	4413      	add	r3, r2
 8010c60:	4a11      	ldr	r2, [pc, #68]	@ (8010ca8 <ComputeRxWindowParameters+0xc8>)
 8010c62:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8010c66:	4b10      	ldr	r3, [pc, #64]	@ (8010ca8 <ComputeRxWindowParameters+0xc8>)
 8010c68:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010c6c:	2b04      	cmp	r3, #4
 8010c6e:	d011      	beq.n	8010c94 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010c70:	4b0a      	ldr	r3, [pc, #40]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010c74:	4a0c      	ldr	r2, [pc, #48]	@ (8010ca8 <ComputeRxWindowParameters+0xc8>)
 8010c76:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8010c7a:	4413      	add	r3, r2
 8010c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8010ca8 <ComputeRxWindowParameters+0xc8>)
 8010c7e:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010c82:	4b06      	ldr	r3, [pc, #24]	@ (8010c9c <ComputeRxWindowParameters+0xbc>)
 8010c84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c86:	4a08      	ldr	r2, [pc, #32]	@ (8010ca8 <ComputeRxWindowParameters+0xc8>)
 8010c88:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8010c8c:	4413      	add	r3, r2
 8010c8e:	4a06      	ldr	r2, [pc, #24]	@ (8010ca8 <ComputeRxWindowParameters+0xc8>)
 8010c90:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8010c94:	bf00      	nop
 8010c96:	3704      	adds	r7, #4
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd90      	pop	{r4, r7, pc}
 8010c9c:	20000d04 	.word	0x20000d04
 8010ca0:	20000b88 	.word	0x20000b88
 8010ca4:	20000ba0 	.word	0x20000ba0
 8010ca8:	200007d0 	.word	0x200007d0

08010cac <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b082      	sub	sp, #8
 8010cb0:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010cb6:	4b13      	ldr	r3, [pc, #76]	@ (8010d04 <VerifyTxFrame+0x58>)
 8010cb8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d01b      	beq.n	8010cf8 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010cc0:	1d3b      	adds	r3, r7, #4
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f002 ffd0 	bl	8013c68 <LoRaMacCommandsGetSizeSerializedCmds>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d001      	beq.n	8010cd2 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010cce:	2313      	movs	r3, #19
 8010cd0:	e013      	b.n	8010cfa <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8010d08 <VerifyTxFrame+0x5c>)
 8010cd4:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8010d04 <VerifyTxFrame+0x58>)
 8010cda:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	b2d2      	uxtb	r2, r2
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7ff f91a 	bl	800ff1c <ValidatePayloadLength>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	f083 0301 	eor.w	r3, r3, #1
 8010cee:	b2db      	uxtb	r3, r3
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d001      	beq.n	8010cf8 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010cf4:	2308      	movs	r3, #8
 8010cf6:	e000      	b.n	8010cfa <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010cf8:	2300      	movs	r3, #0
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3708      	adds	r7, #8
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	20000d04 	.word	0x20000d04
 8010d08:	200007d0 	.word	0x200007d0

08010d0c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010d12:	4b18      	ldr	r3, [pc, #96]	@ (8010d74 <SerializeTxFrame+0x68>)
 8010d14:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d002      	beq.n	8010d22 <SerializeTxFrame+0x16>
 8010d1c:	2b04      	cmp	r3, #4
 8010d1e:	d011      	beq.n	8010d44 <SerializeTxFrame+0x38>
 8010d20:	e021      	b.n	8010d66 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010d22:	4815      	ldr	r0, [pc, #84]	@ (8010d78 <SerializeTxFrame+0x6c>)
 8010d24:	f004 fac3 	bl	80152ae <LoRaMacSerializerJoinRequest>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010d2c:	79fb      	ldrb	r3, [r7, #7]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d001      	beq.n	8010d36 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d32:	2311      	movs	r3, #17
 8010d34:	e01a      	b.n	8010d6c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010d36:	4b0f      	ldr	r3, [pc, #60]	@ (8010d74 <SerializeTxFrame+0x68>)
 8010d38:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8010d74 <SerializeTxFrame+0x68>)
 8010d40:	801a      	strh	r2, [r3, #0]
            break;
 8010d42:	e012      	b.n	8010d6a <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010d44:	480c      	ldr	r0, [pc, #48]	@ (8010d78 <SerializeTxFrame+0x6c>)
 8010d46:	f004 fb34 	bl	80153b2 <LoRaMacSerializerData>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010d4e:	79fb      	ldrb	r3, [r7, #7]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d001      	beq.n	8010d58 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d54:	2311      	movs	r3, #17
 8010d56:	e009      	b.n	8010d6c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010d58:	4b06      	ldr	r3, [pc, #24]	@ (8010d74 <SerializeTxFrame+0x68>)
 8010d5a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010d5e:	461a      	mov	r2, r3
 8010d60:	4b04      	ldr	r3, [pc, #16]	@ (8010d74 <SerializeTxFrame+0x68>)
 8010d62:	801a      	strh	r2, [r3, #0]
            break;
 8010d64:	e001      	b.n	8010d6a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010d66:	2303      	movs	r3, #3
 8010d68:	e000      	b.n	8010d6c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010d6a:	2300      	movs	r3, #0
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3708      	adds	r7, #8
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	200007d0 	.word	0x200007d0
 8010d78:	200008d8 	.word	0x200008d8

08010d7c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b090      	sub	sp, #64	@ 0x40
 8010d80:	af02      	add	r7, sp, #8
 8010d82:	4603      	mov	r3, r0
 8010d84:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d86:	2303      	movs	r3, #3
 8010d88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010d8c:	f7ff ff06 	bl	8010b9c <CheckForClassBCollision>
 8010d90:	4603      	mov	r3, r0
 8010d92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010d96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d002      	beq.n	8010da4 <ScheduleTx+0x28>
    {
        return status;
 8010d9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010da2:	e092      	b.n	8010eca <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8010da4:	f000 f8f8 	bl	8010f98 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010da8:	f7ff ffb0 	bl	8010d0c <SerializeTxFrame>
 8010dac:	4603      	mov	r3, r0
 8010dae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010db2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d002      	beq.n	8010dc0 <ScheduleTx+0x44>
    {
        return status;
 8010dba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010dbe:	e084      	b.n	8010eca <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010dc0:	4b44      	ldr	r3, [pc, #272]	@ (8010ed4 <ScheduleTx+0x158>)
 8010dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dc4:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010dc6:	4b43      	ldr	r3, [pc, #268]	@ (8010ed4 <ScheduleTx+0x158>)
 8010dc8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010dcc:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010dce:	4b41      	ldr	r3, [pc, #260]	@ (8010ed4 <ScheduleTx+0x158>)
 8010dd0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010dd4:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f00a faa4 	bl	801b328 <SysTimeGetMcuTime>
 8010de0:	4638      	mov	r0, r7
 8010de2:	4b3c      	ldr	r3, [pc, #240]	@ (8010ed4 <ScheduleTx+0x158>)
 8010de4:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8010de8:	9200      	str	r2, [sp, #0]
 8010dea:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8010dee:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8010df2:	ca06      	ldmia	r2, {r1, r2}
 8010df4:	f00a f9f9 	bl	801b1ea <SysTimeSub>
 8010df8:	f107 0320 	add.w	r3, r7, #32
 8010dfc:	463a      	mov	r2, r7
 8010dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e02:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010e06:	4b33      	ldr	r3, [pc, #204]	@ (8010ed4 <ScheduleTx+0x158>)
 8010e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e0a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 8010e12:	2301      	movs	r3, #1
 8010e14:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010e16:	4b30      	ldr	r3, [pc, #192]	@ (8010ed8 <ScheduleTx+0x15c>)
 8010e18:	881b      	ldrh	r3, [r3, #0]
 8010e1a:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8010ed4 <ScheduleTx+0x158>)
 8010e1e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d104      	bne.n	8010e30 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010e26:	2301      	movs	r3, #1
 8010e28:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010e30:	4b28      	ldr	r3, [pc, #160]	@ (8010ed4 <ScheduleTx+0x158>)
 8010e32:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8010e36:	f107 0114 	add.w	r1, r7, #20
 8010e3a:	4b28      	ldr	r3, [pc, #160]	@ (8010edc <ScheduleTx+0x160>)
 8010e3c:	9300      	str	r3, [sp, #0]
 8010e3e:	4b28      	ldr	r3, [pc, #160]	@ (8010ee0 <ScheduleTx+0x164>)
 8010e40:	4a28      	ldr	r2, [pc, #160]	@ (8010ee4 <ScheduleTx+0x168>)
 8010e42:	f004 fcf8 	bl	8015836 <RegionNextChannel>
 8010e46:	4603      	mov	r3, r0
 8010e48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8010e4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d025      	beq.n	8010ea0 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8010e54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010e58:	2b0b      	cmp	r3, #11
 8010e5a:	d11e      	bne.n	8010e9a <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8010ed8 <ScheduleTx+0x15c>)
 8010e5e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d01c      	beq.n	8010ea0 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8010e66:	7bfb      	ldrb	r3, [r7, #15]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d013      	beq.n	8010e94 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8010ed8 <ScheduleTx+0x15c>)
 8010e6e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010e72:	f043 0320 	orr.w	r3, r3, #32
 8010e76:	4a18      	ldr	r2, [pc, #96]	@ (8010ed8 <ScheduleTx+0x15c>)
 8010e78:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010e7c:	4b16      	ldr	r3, [pc, #88]	@ (8010ed8 <ScheduleTx+0x15c>)
 8010e7e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8010e82:	4619      	mov	r1, r3
 8010e84:	4818      	ldr	r0, [pc, #96]	@ (8010ee8 <ScheduleTx+0x16c>)
 8010e86:	f00a ff87 	bl	801bd98 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8010e8a:	4817      	ldr	r0, [pc, #92]	@ (8010ee8 <ScheduleTx+0x16c>)
 8010e8c:	f00a fea6 	bl	801bbdc <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8010e90:	2300      	movs	r3, #0
 8010e92:	e01a      	b.n	8010eca <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8010e94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010e98:	e017      	b.n	8010eca <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010e9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010e9e:	e014      	b.n	8010eca <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010ea0:	f7ff fe9e 	bl	8010be0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010ea4:	f7ff ff02 	bl	8010cac <VerifyTxFrame>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010eae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d002      	beq.n	8010ebc <ScheduleTx+0x140>
    {
        return status;
 8010eb6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010eba:	e006      	b.n	8010eca <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010ebc:	4b06      	ldr	r3, [pc, #24]	@ (8010ed8 <ScheduleTx+0x15c>)
 8010ebe:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f000 fb74 	bl	80115b0 <SendFrameOnChannel>
 8010ec8:	4603      	mov	r3, r0
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3738      	adds	r7, #56	@ 0x38
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	20000d04 	.word	0x20000d04
 8010ed8:	200007d0 	.word	0x200007d0
 8010edc:	20000d34 	.word	0x20000d34
 8010ee0:	20000c64 	.word	0x20000c64
 8010ee4:	20000beb 	.word	0x20000beb
 8010ee8:	20000b38 	.word	0x20000b38

08010eec <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	460a      	mov	r2, r1
 8010ef6:	71fb      	strb	r3, [r7, #7]
 8010ef8:	4613      	mov	r3, r2
 8010efa:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010efc:	2312      	movs	r3, #18
 8010efe:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010f00:	2300      	movs	r3, #0
 8010f02:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010f04:	4b22      	ldr	r3, [pc, #136]	@ (8010f90 <SecureFrame+0xa4>)
 8010f06:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d002      	beq.n	8010f14 <SecureFrame+0x28>
 8010f0e:	2b04      	cmp	r3, #4
 8010f10:	d011      	beq.n	8010f36 <SecureFrame+0x4a>
 8010f12:	e036      	b.n	8010f82 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010f14:	481f      	ldr	r0, [pc, #124]	@ (8010f94 <SecureFrame+0xa8>)
 8010f16:	f003 fd9d 	bl	8014a54 <LoRaMacCryptoPrepareJoinRequest>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010f1e:	7bfb      	ldrb	r3, [r7, #15]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d001      	beq.n	8010f28 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f24:	2311      	movs	r3, #17
 8010f26:	e02f      	b.n	8010f88 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010f28:	4b19      	ldr	r3, [pc, #100]	@ (8010f90 <SecureFrame+0xa4>)
 8010f2a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010f2e:	461a      	mov	r2, r3
 8010f30:	4b17      	ldr	r3, [pc, #92]	@ (8010f90 <SecureFrame+0xa4>)
 8010f32:	801a      	strh	r2, [r3, #0]
            break;
 8010f34:	e027      	b.n	8010f86 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010f36:	f107 0308 	add.w	r3, r7, #8
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f003 fcc4 	bl	80148c8 <LoRaMacCryptoGetFCntUp>
 8010f40:	4603      	mov	r3, r0
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d001      	beq.n	8010f4a <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010f46:	2312      	movs	r3, #18
 8010f48:	e01e      	b.n	8010f88 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8010f4a:	4b11      	ldr	r3, [pc, #68]	@ (8010f90 <SecureFrame+0xa4>)
 8010f4c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d002      	beq.n	8010f5a <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	3b01      	subs	r3, #1
 8010f58:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010f5a:	68b8      	ldr	r0, [r7, #8]
 8010f5c:	79ba      	ldrb	r2, [r7, #6]
 8010f5e:	79f9      	ldrb	r1, [r7, #7]
 8010f60:	4b0c      	ldr	r3, [pc, #48]	@ (8010f94 <SecureFrame+0xa8>)
 8010f62:	f003 fe9d 	bl	8014ca0 <LoRaMacCryptoSecureMessage>
 8010f66:	4603      	mov	r3, r0
 8010f68:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010f6a:	7bfb      	ldrb	r3, [r7, #15]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d001      	beq.n	8010f74 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f70:	2311      	movs	r3, #17
 8010f72:	e009      	b.n	8010f88 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010f74:	4b06      	ldr	r3, [pc, #24]	@ (8010f90 <SecureFrame+0xa4>)
 8010f76:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	4b04      	ldr	r3, [pc, #16]	@ (8010f90 <SecureFrame+0xa4>)
 8010f7e:	801a      	strh	r2, [r3, #0]
            break;
 8010f80:	e001      	b.n	8010f86 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010f82:	2303      	movs	r3, #3
 8010f84:	e000      	b.n	8010f88 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8010f86:	2300      	movs	r3, #0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	200007d0 	.word	0x200007d0
 8010f94:	200008d8 	.word	0x200008d8

08010f98 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010f98:	b480      	push	{r7}
 8010f9a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010f9c:	4b09      	ldr	r3, [pc, #36]	@ (8010fc4 <CalculateBackOff+0x2c>)
 8010f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d10a      	bne.n	8010fba <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010fa4:	4b07      	ldr	r3, [pc, #28]	@ (8010fc4 <CalculateBackOff+0x2c>)
 8010fa6:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8010faa:	3b01      	subs	r3, #1
 8010fac:	4a06      	ldr	r2, [pc, #24]	@ (8010fc8 <CalculateBackOff+0x30>)
 8010fae:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 8010fb2:	fb02 f303 	mul.w	r3, r2, r3
 8010fb6:	4a03      	ldr	r2, [pc, #12]	@ (8010fc4 <CalculateBackOff+0x2c>)
 8010fb8:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8010fba:	bf00      	nop
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bc80      	pop	{r7}
 8010fc0:	4770      	bx	lr
 8010fc2:	bf00      	nop
 8010fc4:	20000d04 	.word	0x20000d04
 8010fc8:	200007d0 	.word	0x200007d0

08010fcc <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	7139      	strb	r1, [r7, #4]
 8010fd6:	71fb      	strb	r3, [r7, #7]
 8010fd8:	4613      	mov	r3, r2
 8010fda:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010fdc:	79fb      	ldrb	r3, [r7, #7]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d002      	beq.n	8010fe8 <RemoveMacCommands+0x1c>
 8010fe2:	79fb      	ldrb	r3, [r7, #7]
 8010fe4:	2b01      	cmp	r3, #1
 8010fe6:	d10d      	bne.n	8011004 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010fe8:	79bb      	ldrb	r3, [r7, #6]
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d108      	bne.n	8011000 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010fee:	793b      	ldrb	r3, [r7, #4]
 8010ff0:	f003 0320 	and.w	r3, r3, #32
 8010ff4:	b2db      	uxtb	r3, r3
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d004      	beq.n	8011004 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010ffa:	f002 fe09 	bl	8013c10 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010ffe:	e001      	b.n	8011004 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011000:	f002 fe06 	bl	8013c10 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011004:	bf00      	nop
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 801100c:	b5b0      	push	{r4, r5, r7, lr}
 801100e:	b092      	sub	sp, #72	@ 0x48
 8011010:	af00      	add	r7, sp, #0
 8011012:	4603      	mov	r3, r0
 8011014:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8011016:	79fb      	ldrb	r3, [r7, #7]
 8011018:	f083 0301 	eor.w	r3, r3, #1
 801101c:	b2db      	uxtb	r3, r3
 801101e:	2b00      	cmp	r3, #0
 8011020:	d003      	beq.n	801102a <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8011022:	4b88      	ldr	r3, [pc, #544]	@ (8011244 <ResetMacParameters+0x238>)
 8011024:	2200      	movs	r2, #0
 8011026:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801102a:	4b86      	ldr	r3, [pc, #536]	@ (8011244 <ResetMacParameters+0x238>)
 801102c:	2200      	movs	r2, #0
 801102e:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8011030:	4b85      	ldr	r3, [pc, #532]	@ (8011248 <ResetMacParameters+0x23c>)
 8011032:	2200      	movs	r2, #0
 8011034:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8011038:	4b83      	ldr	r3, [pc, #524]	@ (8011248 <ResetMacParameters+0x23c>)
 801103a:	2200      	movs	r2, #0
 801103c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8011040:	4b81      	ldr	r3, [pc, #516]	@ (8011248 <ResetMacParameters+0x23c>)
 8011042:	2200      	movs	r2, #0
 8011044:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8011048:	4b7e      	ldr	r3, [pc, #504]	@ (8011244 <ResetMacParameters+0x238>)
 801104a:	2200      	movs	r2, #0
 801104c:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011050:	4b7c      	ldr	r3, [pc, #496]	@ (8011244 <ResetMacParameters+0x238>)
 8011052:	2201      	movs	r2, #1
 8011054:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011058:	4b7a      	ldr	r3, [pc, #488]	@ (8011244 <ResetMacParameters+0x238>)
 801105a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 801105e:	4b79      	ldr	r3, [pc, #484]	@ (8011244 <ResetMacParameters+0x238>)
 8011060:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011064:	4b77      	ldr	r3, [pc, #476]	@ (8011244 <ResetMacParameters+0x238>)
 8011066:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 801106a:	4b76      	ldr	r3, [pc, #472]	@ (8011244 <ResetMacParameters+0x238>)
 801106c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8011070:	4b74      	ldr	r3, [pc, #464]	@ (8011244 <ResetMacParameters+0x238>)
 8011072:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 8011076:	4b73      	ldr	r3, [pc, #460]	@ (8011244 <ResetMacParameters+0x238>)
 8011078:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801107c:	4b71      	ldr	r3, [pc, #452]	@ (8011244 <ResetMacParameters+0x238>)
 801107e:	4a71      	ldr	r2, [pc, #452]	@ (8011244 <ResetMacParameters+0x238>)
 8011080:	336c      	adds	r3, #108	@ 0x6c
 8011082:	32b4      	adds	r2, #180	@ 0xb4
 8011084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011088:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801108c:	4b6d      	ldr	r3, [pc, #436]	@ (8011244 <ResetMacParameters+0x238>)
 801108e:	4a6d      	ldr	r2, [pc, #436]	@ (8011244 <ResetMacParameters+0x238>)
 8011090:	3374      	adds	r3, #116	@ 0x74
 8011092:	32bc      	adds	r2, #188	@ 0xbc
 8011094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011098:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 801109c:	4b69      	ldr	r3, [pc, #420]	@ (8011244 <ResetMacParameters+0x238>)
 801109e:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 80110a2:	4b68      	ldr	r3, [pc, #416]	@ (8011244 <ResetMacParameters+0x238>)
 80110a4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80110a8:	4b66      	ldr	r3, [pc, #408]	@ (8011244 <ResetMacParameters+0x238>)
 80110aa:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 80110ae:	4b65      	ldr	r3, [pc, #404]	@ (8011244 <ResetMacParameters+0x238>)
 80110b0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80110b4:	4b63      	ldr	r3, [pc, #396]	@ (8011244 <ResetMacParameters+0x238>)
 80110b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80110ba:	4a62      	ldr	r2, [pc, #392]	@ (8011244 <ResetMacParameters+0x238>)
 80110bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80110c0:	4b60      	ldr	r3, [pc, #384]	@ (8011244 <ResetMacParameters+0x238>)
 80110c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80110c6:	4a5f      	ldr	r2, [pc, #380]	@ (8011244 <ResetMacParameters+0x238>)
 80110c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80110cc:	4b5d      	ldr	r3, [pc, #372]	@ (8011244 <ResetMacParameters+0x238>)
 80110ce:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 80110d2:	4b5c      	ldr	r3, [pc, #368]	@ (8011244 <ResetMacParameters+0x238>)
 80110d4:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80110d8:	4b5a      	ldr	r3, [pc, #360]	@ (8011244 <ResetMacParameters+0x238>)
 80110da:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 80110de:	4b59      	ldr	r3, [pc, #356]	@ (8011244 <ResetMacParameters+0x238>)
 80110e0:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 80110e4:	4b58      	ldr	r3, [pc, #352]	@ (8011248 <ResetMacParameters+0x23c>)
 80110e6:	2200      	movs	r2, #0
 80110e8:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 80110ec:	4b55      	ldr	r3, [pc, #340]	@ (8011244 <ResetMacParameters+0x238>)
 80110ee:	2200      	movs	r2, #0
 80110f0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80110f4:	4b53      	ldr	r3, [pc, #332]	@ (8011244 <ResetMacParameters+0x238>)
 80110f6:	2200      	movs	r2, #0
 80110f8:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 80110fc:	4b51      	ldr	r3, [pc, #324]	@ (8011244 <ResetMacParameters+0x238>)
 80110fe:	2200      	movs	r2, #0
 8011100:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8011104:	4b4f      	ldr	r3, [pc, #316]	@ (8011244 <ResetMacParameters+0x238>)
 8011106:	2200      	movs	r2, #0
 8011108:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 801110c:	4b4d      	ldr	r3, [pc, #308]	@ (8011244 <ResetMacParameters+0x238>)
 801110e:	2200      	movs	r2, #0
 8011110:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8011114:	4b4b      	ldr	r3, [pc, #300]	@ (8011244 <ResetMacParameters+0x238>)
 8011116:	2200      	movs	r2, #0
 8011118:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 801111c:	4b49      	ldr	r3, [pc, #292]	@ (8011244 <ResetMacParameters+0x238>)
 801111e:	2200      	movs	r2, #0
 8011120:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8011124:	4b47      	ldr	r3, [pc, #284]	@ (8011244 <ResetMacParameters+0x238>)
 8011126:	2200      	movs	r2, #0
 8011128:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 801112c:	4b45      	ldr	r3, [pc, #276]	@ (8011244 <ResetMacParameters+0x238>)
 801112e:	2200      	movs	r2, #0
 8011130:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8011134:	4b43      	ldr	r3, [pc, #268]	@ (8011244 <ResetMacParameters+0x238>)
 8011136:	2200      	movs	r2, #0
 8011138:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 801113c:	4b41      	ldr	r3, [pc, #260]	@ (8011244 <ResetMacParameters+0x238>)
 801113e:	2200      	movs	r2, #0
 8011140:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011144:	2301      	movs	r3, #1
 8011146:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011148:	4b40      	ldr	r3, [pc, #256]	@ (801124c <ResetMacParameters+0x240>)
 801114a:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801114c:	4b40      	ldr	r3, [pc, #256]	@ (8011250 <ResetMacParameters+0x244>)
 801114e:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8011150:	4b40      	ldr	r3, [pc, #256]	@ (8011254 <ResetMacParameters+0x248>)
 8011152:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011154:	4b3b      	ldr	r3, [pc, #236]	@ (8011244 <ResetMacParameters+0x238>)
 8011156:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801115a:	f107 020c 	add.w	r2, r7, #12
 801115e:	4611      	mov	r1, r2
 8011160:	4618      	mov	r0, r3
 8011162:	f004 fa54 	bl	801560e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011166:	4b38      	ldr	r3, [pc, #224]	@ (8011248 <ResetMacParameters+0x23c>)
 8011168:	2200      	movs	r2, #0
 801116a:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801116e:	4b36      	ldr	r3, [pc, #216]	@ (8011248 <ResetMacParameters+0x23c>)
 8011170:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8011174:	4b34      	ldr	r3, [pc, #208]	@ (8011248 <ResetMacParameters+0x23c>)
 8011176:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801117a:	4b32      	ldr	r3, [pc, #200]	@ (8011244 <ResetMacParameters+0x238>)
 801117c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801117e:	4a32      	ldr	r2, [pc, #200]	@ (8011248 <ResetMacParameters+0x23c>)
 8011180:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011184:	4b2f      	ldr	r3, [pc, #188]	@ (8011244 <ResetMacParameters+0x238>)
 8011186:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 801118a:	4b2f      	ldr	r3, [pc, #188]	@ (8011248 <ResetMacParameters+0x23c>)
 801118c:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011190:	4b2c      	ldr	r3, [pc, #176]	@ (8011244 <ResetMacParameters+0x238>)
 8011192:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011196:	4b2c      	ldr	r3, [pc, #176]	@ (8011248 <ResetMacParameters+0x23c>)
 8011198:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 801119c:	4b2a      	ldr	r3, [pc, #168]	@ (8011248 <ResetMacParameters+0x23c>)
 801119e:	2200      	movs	r2, #0
 80111a0:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80111a4:	4b28      	ldr	r3, [pc, #160]	@ (8011248 <ResetMacParameters+0x23c>)
 80111a6:	2201      	movs	r2, #1
 80111a8:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80111ac:	4b25      	ldr	r3, [pc, #148]	@ (8011244 <ResetMacParameters+0x238>)
 80111ae:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80111b2:	4b25      	ldr	r3, [pc, #148]	@ (8011248 <ResetMacParameters+0x23c>)
 80111b4:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80111b8:	4a23      	ldr	r2, [pc, #140]	@ (8011248 <ResetMacParameters+0x23c>)
 80111ba:	4b23      	ldr	r3, [pc, #140]	@ (8011248 <ResetMacParameters+0x23c>)
 80111bc:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 80111c0:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 80111c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80111c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80111c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80111cc:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80111d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011248 <ResetMacParameters+0x23c>)
 80111d2:	2201      	movs	r2, #1
 80111d4:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80111d8:	4b1b      	ldr	r3, [pc, #108]	@ (8011248 <ResetMacParameters+0x23c>)
 80111da:	2202      	movs	r2, #2
 80111dc:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80111e0:	2300      	movs	r3, #0
 80111e2:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 80111e4:	2300      	movs	r3, #0
 80111e6:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 80111e8:	4b17      	ldr	r3, [pc, #92]	@ (8011248 <ResetMacParameters+0x23c>)
 80111ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d009      	beq.n	8011206 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80111f2:	4b15      	ldr	r3, [pc, #84]	@ (8011248 <ResetMacParameters+0x23c>)
 80111f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80111fc:	4b12      	ldr	r3, [pc, #72]	@ (8011248 <ResetMacParameters+0x23c>)
 80111fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011202:	695b      	ldr	r3, [r3, #20]
 8011204:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011206:	4b14      	ldr	r3, [pc, #80]	@ (8011258 <ResetMacParameters+0x24c>)
 8011208:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801120a:	4b14      	ldr	r3, [pc, #80]	@ (801125c <ResetMacParameters+0x250>)
 801120c:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801120e:	4b14      	ldr	r3, [pc, #80]	@ (8011260 <ResetMacParameters+0x254>)
 8011210:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011212:	4b14      	ldr	r3, [pc, #80]	@ (8011264 <ResetMacParameters+0x258>)
 8011214:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011216:	4b14      	ldr	r3, [pc, #80]	@ (8011268 <ResetMacParameters+0x25c>)
 8011218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 801121a:	4b14      	ldr	r3, [pc, #80]	@ (801126c <ResetMacParameters+0x260>)
 801121c:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 801121e:	4b14      	ldr	r3, [pc, #80]	@ (8011270 <ResetMacParameters+0x264>)
 8011220:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8011222:	4b14      	ldr	r3, [pc, #80]	@ (8011274 <ResetMacParameters+0x268>)
 8011224:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8011226:	4b14      	ldr	r3, [pc, #80]	@ (8011278 <ResetMacParameters+0x26c>)
 8011228:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 801122a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801122e:	f107 031c 	add.w	r3, r7, #28
 8011232:	4a12      	ldr	r2, [pc, #72]	@ (801127c <ResetMacParameters+0x270>)
 8011234:	4618      	mov	r0, r3
 8011236:	f002 f9f8 	bl	801362a <LoRaMacClassBInit>
}
 801123a:	bf00      	nop
 801123c:	3748      	adds	r7, #72	@ 0x48
 801123e:	46bd      	mov	sp, r7
 8011240:	bdb0      	pop	{r4, r5, r7, pc}
 8011242:	bf00      	nop
 8011244:	20000d04 	.word	0x20000d04
 8011248:	200007d0 	.word	0x200007d0
 801124c:	20000f28 	.word	0x20000f28
 8011250:	20000f2c 	.word	0x20000f2c
 8011254:	2000187c 	.word	0x2000187c
 8011258:	20000c38 	.word	0x20000c38
 801125c:	20000bf0 	.word	0x20000bf0
 8011260:	20000c24 	.word	0x20000c24
 8011264:	20000c61 	.word	0x20000c61
 8011268:	20000de8 	.word	0x20000de8
 801126c:	20000d4c 	.word	0x20000d4c
 8011270:	20000d50 	.word	0x20000d50
 8011274:	20000dec 	.word	0x20000dec
 8011278:	20000e34 	.word	0x20000e34
 801127c:	200012a8 	.word	0x200012a8

08011280 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f00a fd14 	bl	801bcb8 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011290:	4b11      	ldr	r3, [pc, #68]	@ (80112d8 <RxWindowSetup+0x58>)
 8011292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011294:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011296:	4b11      	ldr	r3, [pc, #68]	@ (80112dc <RxWindowSetup+0x5c>)
 8011298:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801129c:	4a10      	ldr	r2, [pc, #64]	@ (80112e0 <RxWindowSetup+0x60>)
 801129e:	6839      	ldr	r1, [r7, #0]
 80112a0:	4618      	mov	r0, r3
 80112a2:	f004 fa1c 	bl	80156de <RegionRxConfig>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d010      	beq.n	80112ce <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80112ac:	4b0d      	ldr	r3, [pc, #52]	@ (80112e4 <RxWindowSetup+0x64>)
 80112ae:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 80112b2:	4b0c      	ldr	r3, [pc, #48]	@ (80112e4 <RxWindowSetup+0x64>)
 80112b4:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80112b8:	4b07      	ldr	r3, [pc, #28]	@ (80112d8 <RxWindowSetup+0x58>)
 80112ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112bc:	4a07      	ldr	r2, [pc, #28]	@ (80112dc <RxWindowSetup+0x5c>)
 80112be:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80112c0:	4610      	mov	r0, r2
 80112c2:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	7cda      	ldrb	r2, [r3, #19]
 80112c8:	4b06      	ldr	r3, [pc, #24]	@ (80112e4 <RxWindowSetup+0x64>)
 80112ca:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 80112ce:	bf00      	nop
 80112d0:	3708      	adds	r7, #8
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	0801d50c 	.word	0x0801d50c
 80112dc:	20000d04 	.word	0x20000d04
 80112e0:	20000bf4 	.word	0x20000bf4
 80112e4:	200007d0 	.word	0x200007d0

080112e8 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80112e8:	b590      	push	{r4, r7, lr}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80112ee:	4b1e      	ldr	r3, [pc, #120]	@ (8011368 <OpenContinuousRxCWindow+0x80>)
 80112f0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80112f4:	4b1c      	ldr	r3, [pc, #112]	@ (8011368 <OpenContinuousRxCWindow+0x80>)
 80112f6:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80112fa:	b259      	sxtb	r1, r3
 80112fc:	4b1a      	ldr	r3, [pc, #104]	@ (8011368 <OpenContinuousRxCWindow+0x80>)
 80112fe:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011302:	4b19      	ldr	r3, [pc, #100]	@ (8011368 <OpenContinuousRxCWindow+0x80>)
 8011304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011306:	4c19      	ldr	r4, [pc, #100]	@ (801136c <OpenContinuousRxCWindow+0x84>)
 8011308:	9400      	str	r4, [sp, #0]
 801130a:	f004 f9ce 	bl	80156aa <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801130e:	4b18      	ldr	r3, [pc, #96]	@ (8011370 <OpenContinuousRxCWindow+0x88>)
 8011310:	2202      	movs	r2, #2
 8011312:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011316:	4b14      	ldr	r3, [pc, #80]	@ (8011368 <OpenContinuousRxCWindow+0x80>)
 8011318:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 801131c:	4b14      	ldr	r3, [pc, #80]	@ (8011370 <OpenContinuousRxCWindow+0x88>)
 801131e:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011322:	4b13      	ldr	r3, [pc, #76]	@ (8011370 <OpenContinuousRxCWindow+0x88>)
 8011324:	2201      	movs	r2, #1
 8011326:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801132a:	4b0f      	ldr	r3, [pc, #60]	@ (8011368 <OpenContinuousRxCWindow+0x80>)
 801132c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011330:	4a10      	ldr	r2, [pc, #64]	@ (8011374 <OpenContinuousRxCWindow+0x8c>)
 8011332:	490e      	ldr	r1, [pc, #56]	@ (801136c <OpenContinuousRxCWindow+0x84>)
 8011334:	4618      	mov	r0, r3
 8011336:	f004 f9d2 	bl	80156de <RegionRxConfig>
 801133a:	4603      	mov	r3, r0
 801133c:	2b00      	cmp	r3, #0
 801133e:	d00f      	beq.n	8011360 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011340:	4b0b      	ldr	r3, [pc, #44]	@ (8011370 <OpenContinuousRxCWindow+0x88>)
 8011342:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8011346:	4b0a      	ldr	r3, [pc, #40]	@ (8011370 <OpenContinuousRxCWindow+0x88>)
 8011348:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 801134c:	4b0a      	ldr	r3, [pc, #40]	@ (8011378 <OpenContinuousRxCWindow+0x90>)
 801134e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011350:	2000      	movs	r0, #0
 8011352:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011354:	4b06      	ldr	r3, [pc, #24]	@ (8011370 <OpenContinuousRxCWindow+0x88>)
 8011356:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 801135a:	4b05      	ldr	r3, [pc, #20]	@ (8011370 <OpenContinuousRxCWindow+0x88>)
 801135c:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8011360:	bf00      	nop
 8011362:	3704      	adds	r7, #4
 8011364:	46bd      	mov	sp, r7
 8011366:	bd90      	pop	{r4, r7, pc}
 8011368:	20000d04 	.word	0x20000d04
 801136c:	20000bb8 	.word	0x20000bb8
 8011370:	200007d0 	.word	0x200007d0
 8011374:	20000bf4 	.word	0x20000bf4
 8011378:	0801d50c 	.word	0x0801d50c

0801137c <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b088      	sub	sp, #32
 8011380:	af00      	add	r7, sp, #0
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	603b      	str	r3, [r7, #0]
 8011388:	4613      	mov	r3, r2
 801138a:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 801138c:	4b81      	ldr	r3, [pc, #516]	@ (8011594 <PrepareFrame+0x218>)
 801138e:	2200      	movs	r2, #0
 8011390:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8011392:	4b80      	ldr	r3, [pc, #512]	@ (8011594 <PrepareFrame+0x218>)
 8011394:	2200      	movs	r2, #0
 8011396:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 801139a:	2300      	movs	r3, #0
 801139c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801139e:	2300      	movs	r3, #0
 80113a0:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80113a2:	2300      	movs	r3, #0
 80113a4:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d101      	bne.n	80113b0 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80113ac:	2300      	movs	r3, #0
 80113ae:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80113b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80113b2:	461a      	mov	r2, r3
 80113b4:	6839      	ldr	r1, [r7, #0]
 80113b6:	4878      	ldr	r0, [pc, #480]	@ (8011598 <PrepareFrame+0x21c>)
 80113b8:	f006 fb2b 	bl	8017a12 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80113bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80113be:	b2da      	uxtb	r2, r3
 80113c0:	4b74      	ldr	r3, [pc, #464]	@ (8011594 <PrepareFrame+0x218>)
 80113c2:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	781a      	ldrb	r2, [r3, #0]
 80113ca:	4b72      	ldr	r3, [pc, #456]	@ (8011594 <PrepareFrame+0x218>)
 80113cc:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	2b07      	cmp	r3, #7
 80113da:	f000 80b9 	beq.w	8011550 <PrepareFrame+0x1d4>
 80113de:	2b07      	cmp	r3, #7
 80113e0:	f300 80ce 	bgt.w	8011580 <PrepareFrame+0x204>
 80113e4:	2b02      	cmp	r3, #2
 80113e6:	d006      	beq.n	80113f6 <PrepareFrame+0x7a>
 80113e8:	2b04      	cmp	r3, #4
 80113ea:	f040 80c9 	bne.w	8011580 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80113ee:	4b69      	ldr	r3, [pc, #420]	@ (8011594 <PrepareFrame+0x218>)
 80113f0:	2201      	movs	r2, #1
 80113f2:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80113f6:	4b67      	ldr	r3, [pc, #412]	@ (8011594 <PrepareFrame+0x218>)
 80113f8:	2204      	movs	r2, #4
 80113fa:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80113fe:	4b65      	ldr	r3, [pc, #404]	@ (8011594 <PrepareFrame+0x218>)
 8011400:	4a66      	ldr	r2, [pc, #408]	@ (801159c <PrepareFrame+0x220>)
 8011402:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011406:	4b63      	ldr	r3, [pc, #396]	@ (8011594 <PrepareFrame+0x218>)
 8011408:	22ff      	movs	r2, #255	@ 0xff
 801140a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	781a      	ldrb	r2, [r3, #0]
 8011412:	4b60      	ldr	r3, [pc, #384]	@ (8011594 <PrepareFrame+0x218>)
 8011414:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011418:	4a5e      	ldr	r2, [pc, #376]	@ (8011594 <PrepareFrame+0x218>)
 801141a:	79fb      	ldrb	r3, [r7, #7]
 801141c:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011420:	4b5f      	ldr	r3, [pc, #380]	@ (80115a0 <PrepareFrame+0x224>)
 8011422:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8011426:	4a5b      	ldr	r2, [pc, #364]	@ (8011594 <PrepareFrame+0x218>)
 8011428:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	781a      	ldrb	r2, [r3, #0]
 8011430:	4b58      	ldr	r3, [pc, #352]	@ (8011594 <PrepareFrame+0x218>)
 8011432:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011436:	4b57      	ldr	r3, [pc, #348]	@ (8011594 <PrepareFrame+0x218>)
 8011438:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 801143c:	4b55      	ldr	r3, [pc, #340]	@ (8011594 <PrepareFrame+0x218>)
 801143e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8011442:	4b54      	ldr	r3, [pc, #336]	@ (8011594 <PrepareFrame+0x218>)
 8011444:	4a54      	ldr	r2, [pc, #336]	@ (8011598 <PrepareFrame+0x21c>)
 8011446:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801144a:	f107 0318 	add.w	r3, r7, #24
 801144e:	4618      	mov	r0, r3
 8011450:	f003 fa3a 	bl	80148c8 <LoRaMacCryptoGetFCntUp>
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	d001      	beq.n	801145e <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801145a:	2312      	movs	r3, #18
 801145c:	e096      	b.n	801158c <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801145e:	69bb      	ldr	r3, [r7, #24]
 8011460:	b29a      	uxth	r2, r3
 8011462:	4b4c      	ldr	r3, [pc, #304]	@ (8011594 <PrepareFrame+0x218>)
 8011464:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8011468:	4b4a      	ldr	r3, [pc, #296]	@ (8011594 <PrepareFrame+0x218>)
 801146a:	2200      	movs	r2, #0
 801146c:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8011470:	4b48      	ldr	r3, [pc, #288]	@ (8011594 <PrepareFrame+0x218>)
 8011472:	2200      	movs	r2, #0
 8011474:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011478:	69bb      	ldr	r3, [r7, #24]
 801147a:	4a46      	ldr	r2, [pc, #280]	@ (8011594 <PrepareFrame+0x218>)
 801147c:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011480:	f107 0314 	add.w	r3, r7, #20
 8011484:	4618      	mov	r0, r3
 8011486:	f002 fbef 	bl	8013c68 <LoRaMacCommandsGetSizeSerializedCmds>
 801148a:	4603      	mov	r3, r0
 801148c:	2b00      	cmp	r3, #0
 801148e:	d001      	beq.n	8011494 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011490:	2313      	movs	r3, #19
 8011492:	e07b      	b.n	801158c <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d074      	beq.n	8011584 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801149a:	4b41      	ldr	r3, [pc, #260]	@ (80115a0 <PrepareFrame+0x224>)
 801149c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fe fd13 	bl	800fecc <GetMaxAppPayloadWithoutFOptsLength>
 80114a6:	4603      	mov	r3, r0
 80114a8:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80114aa:	4b3a      	ldr	r3, [pc, #232]	@ (8011594 <PrepareFrame+0x218>)
 80114ac:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d01d      	beq.n	80114f0 <PrepareFrame+0x174>
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	2b0f      	cmp	r3, #15
 80114b8:	d81a      	bhi.n	80114f0 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80114ba:	f107 0314 	add.w	r3, r7, #20
 80114be:	4a39      	ldr	r2, [pc, #228]	@ (80115a4 <PrepareFrame+0x228>)
 80114c0:	4619      	mov	r1, r3
 80114c2:	200f      	movs	r0, #15
 80114c4:	f002 fbe6 	bl	8013c94 <LoRaMacCommandsSerializeCmds>
 80114c8:	4603      	mov	r3, r0
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d001      	beq.n	80114d2 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80114ce:	2313      	movs	r3, #19
 80114d0:	e05c      	b.n	801158c <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	f003 030f 	and.w	r3, r3, #15
 80114d8:	b2d9      	uxtb	r1, r3
 80114da:	68ba      	ldr	r2, [r7, #8]
 80114dc:	7813      	ldrb	r3, [r2, #0]
 80114de:	f361 0303 	bfi	r3, r1, #0, #4
 80114e2:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	781a      	ldrb	r2, [r3, #0]
 80114e8:	4b2a      	ldr	r3, [pc, #168]	@ (8011594 <PrepareFrame+0x218>)
 80114ea:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80114ee:	e049      	b.n	8011584 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80114f0:	4b28      	ldr	r3, [pc, #160]	@ (8011594 <PrepareFrame+0x218>)
 80114f2:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d010      	beq.n	801151c <PrepareFrame+0x1a0>
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	2b0f      	cmp	r3, #15
 80114fe:	d90d      	bls.n	801151c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011500:	7ffb      	ldrb	r3, [r7, #31]
 8011502:	f107 0114 	add.w	r1, r7, #20
 8011506:	4a28      	ldr	r2, [pc, #160]	@ (80115a8 <PrepareFrame+0x22c>)
 8011508:	4618      	mov	r0, r3
 801150a:	f002 fbc3 	bl	8013c94 <LoRaMacCommandsSerializeCmds>
 801150e:	4603      	mov	r3, r0
 8011510:	2b00      	cmp	r3, #0
 8011512:	d001      	beq.n	8011518 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011514:	2313      	movs	r3, #19
 8011516:	e039      	b.n	801158c <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011518:	230a      	movs	r3, #10
 801151a:	e037      	b.n	801158c <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801151c:	7ffb      	ldrb	r3, [r7, #31]
 801151e:	f107 0114 	add.w	r1, r7, #20
 8011522:	4a21      	ldr	r2, [pc, #132]	@ (80115a8 <PrepareFrame+0x22c>)
 8011524:	4618      	mov	r0, r3
 8011526:	f002 fbb5 	bl	8013c94 <LoRaMacCommandsSerializeCmds>
 801152a:	4603      	mov	r3, r0
 801152c:	2b00      	cmp	r3, #0
 801152e:	d001      	beq.n	8011534 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011530:	2313      	movs	r3, #19
 8011532:	e02b      	b.n	801158c <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011534:	4b17      	ldr	r3, [pc, #92]	@ (8011594 <PrepareFrame+0x218>)
 8011536:	2200      	movs	r2, #0
 8011538:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 801153c:	4b15      	ldr	r3, [pc, #84]	@ (8011594 <PrepareFrame+0x218>)
 801153e:	4a1a      	ldr	r2, [pc, #104]	@ (80115a8 <PrepareFrame+0x22c>)
 8011540:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	b2da      	uxtb	r2, r3
 8011548:	4b12      	ldr	r3, [pc, #72]	@ (8011594 <PrepareFrame+0x218>)
 801154a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 801154e:	e019      	b.n	8011584 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d018      	beq.n	8011588 <PrepareFrame+0x20c>
 8011556:	4b0f      	ldr	r3, [pc, #60]	@ (8011594 <PrepareFrame+0x218>)
 8011558:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801155c:	2b00      	cmp	r3, #0
 801155e:	d013      	beq.n	8011588 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8011560:	4812      	ldr	r0, [pc, #72]	@ (80115ac <PrepareFrame+0x230>)
 8011562:	4b0c      	ldr	r3, [pc, #48]	@ (8011594 <PrepareFrame+0x218>)
 8011564:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011568:	461a      	mov	r2, r3
 801156a:	6839      	ldr	r1, [r7, #0]
 801156c:	f006 fa51 	bl	8017a12 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8011570:	4b08      	ldr	r3, [pc, #32]	@ (8011594 <PrepareFrame+0x218>)
 8011572:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011576:	3301      	adds	r3, #1
 8011578:	b29a      	uxth	r2, r3
 801157a:	4b06      	ldr	r3, [pc, #24]	@ (8011594 <PrepareFrame+0x218>)
 801157c:	801a      	strh	r2, [r3, #0]
            }
            break;
 801157e:	e003      	b.n	8011588 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011580:	2302      	movs	r3, #2
 8011582:	e003      	b.n	801158c <PrepareFrame+0x210>
            break;
 8011584:	bf00      	nop
 8011586:	e000      	b.n	801158a <PrepareFrame+0x20e>
            break;
 8011588:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801158a:	2300      	movs	r3, #0
}
 801158c:	4618      	mov	r0, r3
 801158e:	3720      	adds	r7, #32
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	200007d0 	.word	0x200007d0
 8011598:	20000908 	.word	0x20000908
 801159c:	200007d2 	.word	0x200007d2
 80115a0:	20000d04 	.word	0x20000d04
 80115a4:	200008e8 	.word	0x200008e8
 80115a8:	20000c84 	.word	0x20000c84
 80115ac:	200007d3 	.word	0x200007d3

080115b0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b08a      	sub	sp, #40	@ 0x28
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	4603      	mov	r3, r0
 80115b8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80115ba:	2303      	movs	r3, #3
 80115bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80115c0:	2300      	movs	r3, #0
 80115c2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80115c4:	79fb      	ldrb	r3, [r7, #7]
 80115c6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80115c8:	4b4b      	ldr	r3, [pc, #300]	@ (80116f8 <SendFrameOnChannel+0x148>)
 80115ca:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80115ce:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80115d0:	4b49      	ldr	r3, [pc, #292]	@ (80116f8 <SendFrameOnChannel+0x148>)
 80115d2:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80115d6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80115d8:	4b47      	ldr	r3, [pc, #284]	@ (80116f8 <SendFrameOnChannel+0x148>)
 80115da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115de:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80115e0:	4b45      	ldr	r3, [pc, #276]	@ (80116f8 <SendFrameOnChannel+0x148>)
 80115e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80115e6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80115e8:	4b44      	ldr	r3, [pc, #272]	@ (80116fc <SendFrameOnChannel+0x14c>)
 80115ea:	881b      	ldrh	r3, [r3, #0]
 80115ec:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80115ee:	4b42      	ldr	r3, [pc, #264]	@ (80116f8 <SendFrameOnChannel+0x148>)
 80115f0:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80115f4:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80115f6:	4b40      	ldr	r3, [pc, #256]	@ (80116f8 <SendFrameOnChannel+0x148>)
 80115f8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80115fc:	f107 020f 	add.w	r2, r7, #15
 8011600:	f107 0110 	add.w	r1, r7, #16
 8011604:	4b3e      	ldr	r3, [pc, #248]	@ (8011700 <SendFrameOnChannel+0x150>)
 8011606:	f004 f87f 	bl	8015708 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801160a:	4b3c      	ldr	r3, [pc, #240]	@ (80116fc <SendFrameOnChannel+0x14c>)
 801160c:	2201      	movs	r2, #1
 801160e:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011612:	4b39      	ldr	r3, [pc, #228]	@ (80116f8 <SendFrameOnChannel+0x148>)
 8011614:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011618:	b2da      	uxtb	r2, r3
 801161a:	4b38      	ldr	r3, [pc, #224]	@ (80116fc <SendFrameOnChannel+0x14c>)
 801161c:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8011620:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8011624:	4b35      	ldr	r3, [pc, #212]	@ (80116fc <SendFrameOnChannel+0x14c>)
 8011626:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 801162a:	79fb      	ldrb	r3, [r7, #7]
 801162c:	4a33      	ldr	r2, [pc, #204]	@ (80116fc <SendFrameOnChannel+0x14c>)
 801162e:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011632:	4b32      	ldr	r3, [pc, #200]	@ (80116fc <SendFrameOnChannel+0x14c>)
 8011634:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8011638:	4a30      	ldr	r2, [pc, #192]	@ (80116fc <SendFrameOnChannel+0x14c>)
 801163a:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801163e:	4b2f      	ldr	r3, [pc, #188]	@ (80116fc <SendFrameOnChannel+0x14c>)
 8011640:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8011644:	4a2d      	ldr	r2, [pc, #180]	@ (80116fc <SendFrameOnChannel+0x14c>)
 8011646:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801164a:	f002 f85a 	bl	8013702 <LoRaMacClassBIsBeaconModeActive>
 801164e:	4603      	mov	r3, r0
 8011650:	2b00      	cmp	r3, #0
 8011652:	d00b      	beq.n	801166c <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8011654:	4b29      	ldr	r3, [pc, #164]	@ (80116fc <SendFrameOnChannel+0x14c>)
 8011656:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 801165a:	4618      	mov	r0, r3
 801165c:	f002 f8bc 	bl	80137d8 <LoRaMacClassBIsUplinkCollision>
 8011660:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8011662:	6a3b      	ldr	r3, [r7, #32]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d001      	beq.n	801166c <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011668:	2310      	movs	r3, #16
 801166a:	e040      	b.n	80116ee <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801166c:	4b22      	ldr	r3, [pc, #136]	@ (80116f8 <SendFrameOnChannel+0x148>)
 801166e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011672:	2b01      	cmp	r3, #1
 8011674:	d101      	bne.n	801167a <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8011676:	f002 f8b9 	bl	80137ec <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801167a:	f002 f853 	bl	8013724 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801167e:	4b1e      	ldr	r3, [pc, #120]	@ (80116f8 <SendFrameOnChannel+0x148>)
 8011680:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011684:	b2db      	uxtb	r3, r3
 8011686:	4a1d      	ldr	r2, [pc, #116]	@ (80116fc <SendFrameOnChannel+0x14c>)
 8011688:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 801168c:	4611      	mov	r1, r2
 801168e:	4618      	mov	r0, r3
 8011690:	f7ff fc2c 	bl	8010eec <SecureFrame>
 8011694:	4603      	mov	r3, r0
 8011696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 801169a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d002      	beq.n	80116a8 <SendFrameOnChannel+0xf8>
    {
        return status;
 80116a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116a6:	e022      	b.n	80116ee <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80116a8:	4b14      	ldr	r3, [pc, #80]	@ (80116fc <SendFrameOnChannel+0x14c>)
 80116aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80116ae:	f043 0302 	orr.w	r3, r3, #2
 80116b2:	4a12      	ldr	r2, [pc, #72]	@ (80116fc <SendFrameOnChannel+0x14c>)
 80116b4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 80116b8:	4b10      	ldr	r3, [pc, #64]	@ (80116fc <SendFrameOnChannel+0x14c>)
 80116ba:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80116be:	3301      	adds	r3, #1
 80116c0:	b2da      	uxtb	r2, r3
 80116c2:	4b0e      	ldr	r3, [pc, #56]	@ (80116fc <SendFrameOnChannel+0x14c>)
 80116c4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80116c8:	4b0c      	ldr	r3, [pc, #48]	@ (80116fc <SendFrameOnChannel+0x14c>)
 80116ca:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80116ce:	4b0b      	ldr	r3, [pc, #44]	@ (80116fc <SendFrameOnChannel+0x14c>)
 80116d0:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 80116d4:	4b09      	ldr	r3, [pc, #36]	@ (80116fc <SendFrameOnChannel+0x14c>)
 80116d6:	2200      	movs	r2, #0
 80116d8:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80116dc:	4b09      	ldr	r3, [pc, #36]	@ (8011704 <SendFrameOnChannel+0x154>)
 80116de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116e0:	4a06      	ldr	r2, [pc, #24]	@ (80116fc <SendFrameOnChannel+0x14c>)
 80116e2:	8812      	ldrh	r2, [r2, #0]
 80116e4:	b2d2      	uxtb	r2, r2
 80116e6:	4611      	mov	r1, r2
 80116e8:	4807      	ldr	r0, [pc, #28]	@ (8011708 <SendFrameOnChannel+0x158>)
 80116ea:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80116ec:	2300      	movs	r3, #0
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3728      	adds	r7, #40	@ 0x28
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	20000d04 	.word	0x20000d04
 80116fc:	200007d0 	.word	0x200007d0
 8011700:	20000bec 	.word	0x20000bec
 8011704:	0801d50c 	.word	0x0801d50c
 8011708:	200007d2 	.word	0x200007d2

0801170c <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	4603      	mov	r3, r0
 8011714:	6039      	str	r1, [r7, #0]
 8011716:	80fb      	strh	r3, [r7, #6]
 8011718:	4613      	mov	r3, r2
 801171a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801171c:	4b09      	ldr	r3, [pc, #36]	@ (8011744 <SetTxContinuousWave+0x38>)
 801171e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011720:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011724:	88fa      	ldrh	r2, [r7, #6]
 8011726:	6838      	ldr	r0, [r7, #0]
 8011728:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801172a:	4b07      	ldr	r3, [pc, #28]	@ (8011748 <SetTxContinuousWave+0x3c>)
 801172c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011730:	f043 0302 	orr.w	r3, r3, #2
 8011734:	4a04      	ldr	r2, [pc, #16]	@ (8011748 <SetTxContinuousWave+0x3c>)
 8011736:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 801173a:	2300      	movs	r3, #0
}
 801173c:	4618      	mov	r0, r3
 801173e:	3708      	adds	r7, #8
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	0801d50c 	.word	0x0801d50c
 8011748:	200007d0 	.word	0x200007d0

0801174c <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8011752:	2300      	movs	r3, #0
 8011754:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011756:	4b49      	ldr	r3, [pc, #292]	@ (801187c <RestoreNvmData+0x130>)
 8011758:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801175c:	2b01      	cmp	r3, #1
 801175e:	d001      	beq.n	8011764 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8011760:	2301      	movs	r3, #1
 8011762:	e087      	b.n	8011874 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8011764:	2124      	movs	r1, #36	@ 0x24
 8011766:	4846      	ldr	r0, [pc, #280]	@ (8011880 <RestoreNvmData+0x134>)
 8011768:	f006 f9a8 	bl	8017abc <Crc32>
 801176c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801176e:	4b44      	ldr	r3, [pc, #272]	@ (8011880 <RestoreNvmData+0x134>)
 8011770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011772:	687a      	ldr	r2, [r7, #4]
 8011774:	429a      	cmp	r2, r3
 8011776:	d001      	beq.n	801177c <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011778:	2317      	movs	r3, #23
 801177a:	e07b      	b.n	8011874 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 801177c:	211c      	movs	r1, #28
 801177e:	4841      	ldr	r0, [pc, #260]	@ (8011884 <RestoreNvmData+0x138>)
 8011780:	f006 f99c 	bl	8017abc <Crc32>
 8011784:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8011786:	4b3e      	ldr	r3, [pc, #248]	@ (8011880 <RestoreNvmData+0x134>)
 8011788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	429a      	cmp	r2, r3
 801178e:	d001      	beq.n	8011794 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011790:	2317      	movs	r3, #23
 8011792:	e06f      	b.n	8011874 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8011794:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011798:	483b      	ldr	r0, [pc, #236]	@ (8011888 <RestoreNvmData+0x13c>)
 801179a:	f006 f98f 	bl	8017abc <Crc32>
 801179e:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80117a0:	4b37      	ldr	r3, [pc, #220]	@ (8011880 <RestoreNvmData+0x134>)
 80117a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80117a6:	687a      	ldr	r2, [r7, #4]
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d001      	beq.n	80117b0 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80117ac:	2317      	movs	r3, #23
 80117ae:	e061      	b.n	8011874 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80117b0:	21d4      	movs	r1, #212	@ 0xd4
 80117b2:	4836      	ldr	r0, [pc, #216]	@ (801188c <RestoreNvmData+0x140>)
 80117b4:	f006 f982 	bl	8017abc <Crc32>
 80117b8:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80117ba:	4b31      	ldr	r3, [pc, #196]	@ (8011880 <RestoreNvmData+0x134>)
 80117bc:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d001      	beq.n	80117ca <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80117c6:	2317      	movs	r3, #23
 80117c8:	e054      	b.n	8011874 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80117ca:	2100      	movs	r1, #0
 80117cc:	4830      	ldr	r0, [pc, #192]	@ (8011890 <RestoreNvmData+0x144>)
 80117ce:	f006 f975 	bl	8017abc <Crc32>
 80117d2:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80117d4:	4b2a      	ldr	r3, [pc, #168]	@ (8011880 <RestoreNvmData+0x134>)
 80117d6:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80117da:	687a      	ldr	r2, [r7, #4]
 80117dc:	429a      	cmp	r2, r3
 80117de:	d001      	beq.n	80117e4 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80117e0:	2317      	movs	r3, #23
 80117e2:	e047      	b.n	8011874 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 80117e4:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80117e8:	482a      	ldr	r0, [pc, #168]	@ (8011894 <RestoreNvmData+0x148>)
 80117ea:	f006 f967 	bl	8017abc <Crc32>
 80117ee:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 80117f0:	4b23      	ldr	r3, [pc, #140]	@ (8011880 <RestoreNvmData+0x134>)
 80117f2:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 80117f6:	687a      	ldr	r2, [r7, #4]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d001      	beq.n	8011800 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80117fc:	2317      	movs	r3, #23
 80117fe:	e039      	b.n	8011874 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8011800:	2114      	movs	r1, #20
 8011802:	4825      	ldr	r0, [pc, #148]	@ (8011898 <RestoreNvmData+0x14c>)
 8011804:	f006 f95a 	bl	8017abc <Crc32>
 8011808:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 801180a:	4b1d      	ldr	r3, [pc, #116]	@ (8011880 <RestoreNvmData+0x134>)
 801180c:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	429a      	cmp	r2, r3
 8011814:	d001      	beq.n	801181a <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011816:	2317      	movs	r3, #23
 8011818:	e02c      	b.n	8011874 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 801181a:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 801181e:	4918      	ldr	r1, [pc, #96]	@ (8011880 <RestoreNvmData+0x134>)
 8011820:	481e      	ldr	r0, [pc, #120]	@ (801189c <RestoreNvmData+0x150>)
 8011822:	f006 f8f6 	bl	8017a12 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8011826:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 801182a:	2100      	movs	r1, #0
 801182c:	4814      	ldr	r0, [pc, #80]	@ (8011880 <RestoreNvmData+0x134>)
 801182e:	f006 f92b 	bl	8017a88 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011832:	4b12      	ldr	r3, [pc, #72]	@ (801187c <RestoreNvmData+0x130>)
 8011834:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8011838:	4b10      	ldr	r3, [pc, #64]	@ (801187c <RestoreNvmData+0x130>)
 801183a:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801183e:	4b17      	ldr	r3, [pc, #92]	@ (801189c <RestoreNvmData+0x150>)
 8011840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011842:	4a0e      	ldr	r2, [pc, #56]	@ (801187c <RestoreNvmData+0x130>)
 8011844:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011848:	4b14      	ldr	r3, [pc, #80]	@ (801189c <RestoreNvmData+0x150>)
 801184a:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 801184e:	4b0b      	ldr	r3, [pc, #44]	@ (801187c <RestoreNvmData+0x130>)
 8011850:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011854:	4b09      	ldr	r3, [pc, #36]	@ (801187c <RestoreNvmData+0x130>)
 8011856:	2201      	movs	r2, #1
 8011858:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801185c:	4b07      	ldr	r3, [pc, #28]	@ (801187c <RestoreNvmData+0x130>)
 801185e:	2202      	movs	r2, #2
 8011860:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011864:	4b0e      	ldr	r3, [pc, #56]	@ (80118a0 <RestoreNvmData+0x154>)
 8011866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011868:	4a0c      	ldr	r2, [pc, #48]	@ (801189c <RestoreNvmData+0x150>)
 801186a:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 801186e:	4610      	mov	r0, r2
 8011870:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8011872:	2300      	movs	r3, #0
}
 8011874:	4618      	mov	r0, r3
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	200007d0 	.word	0x200007d0
 8011880:	200012c0 	.word	0x200012c0
 8011884:	200012e8 	.word	0x200012e8
 8011888:	20001308 	.word	0x20001308
 801188c:	2000140c 	.word	0x2000140c
 8011890:	200014e4 	.word	0x200014e4
 8011894:	200014e8 	.word	0x200014e8
 8011898:	20001864 	.word	0x20001864
 801189c:	20000d04 	.word	0x20000d04
 80118a0:	0801d50c 	.word	0x0801d50c

080118a4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d002      	beq.n	80118ba <DetermineFrameType+0x16>
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d101      	bne.n	80118be <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80118ba:	2303      	movs	r3, #3
 80118bc:	e03b      	b.n	8011936 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	7b1b      	ldrb	r3, [r3, #12]
 80118c2:	f003 030f 	and.w	r3, r3, #15
 80118c6:	b2db      	uxtb	r3, r3
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d008      	beq.n	80118de <DetermineFrameType+0x3a>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d003      	beq.n	80118de <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	2200      	movs	r2, #0
 80118da:	701a      	strb	r2, [r3, #0]
 80118dc:	e02a      	b.n	8011934 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d103      	bne.n	80118f0 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	2201      	movs	r2, #1
 80118ec:	701a      	strb	r2, [r3, #0]
 80118ee:	e021      	b.n	8011934 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	7b1b      	ldrb	r3, [r3, #12]
 80118f4:	f003 030f 	and.w	r3, r3, #15
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d108      	bne.n	8011910 <DetermineFrameType+0x6c>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d103      	bne.n	8011910 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	2202      	movs	r2, #2
 801190c:	701a      	strb	r2, [r3, #0]
 801190e:	e011      	b.n	8011934 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	7b1b      	ldrb	r3, [r3, #12]
 8011914:	f003 030f 	and.w	r3, r3, #15
 8011918:	b2db      	uxtb	r3, r3
 801191a:	2b00      	cmp	r3, #0
 801191c:	d108      	bne.n	8011930 <DetermineFrameType+0x8c>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d003      	beq.n	8011930 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	2203      	movs	r2, #3
 801192c:	701a      	strb	r2, [r3, #0]
 801192e:	e001      	b.n	8011934 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011930:	2318      	movs	r3, #24
 8011932:	e000      	b.n	8011936 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011934:	2300      	movs	r3, #0
}
 8011936:	4618      	mov	r0, r3
 8011938:	370c      	adds	r7, #12
 801193a:	46bd      	mov	sp, r7
 801193c:	bc80      	pop	{r7}
 801193e:	4770      	bx	lr

08011940 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8011940:	b480      	push	{r7}
 8011942:	b083      	sub	sp, #12
 8011944:	af00      	add	r7, sp, #0
 8011946:	4603      	mov	r3, r0
 8011948:	460a      	mov	r2, r1
 801194a:	71fb      	strb	r3, [r7, #7]
 801194c:	4613      	mov	r3, r2
 801194e:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8011950:	79fa      	ldrb	r2, [r7, #7]
 8011952:	79bb      	ldrb	r3, [r7, #6]
 8011954:	429a      	cmp	r2, r3
 8011956:	d301      	bcc.n	801195c <CheckRetrans+0x1c>
    {
        return true;
 8011958:	2301      	movs	r3, #1
 801195a:	e000      	b.n	801195e <CheckRetrans+0x1e>
    }
    return false;
 801195c:	2300      	movs	r3, #0
}
 801195e:	4618      	mov	r0, r3
 8011960:	370c      	adds	r7, #12
 8011962:	46bd      	mov	sp, r7
 8011964:	bc80      	pop	{r7}
 8011966:	4770      	bx	lr

08011968 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011968:	b580      	push	{r7, lr}
 801196a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801196c:	4b12      	ldr	r3, [pc, #72]	@ (80119b8 <CheckRetransUnconfirmedUplink+0x50>)
 801196e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8011972:	4a12      	ldr	r2, [pc, #72]	@ (80119bc <CheckRetransUnconfirmedUplink+0x54>)
 8011974:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8011978:	4611      	mov	r1, r2
 801197a:	4618      	mov	r0, r3
 801197c:	f7ff ffe0 	bl	8011940 <CheckRetrans>
 8011980:	4603      	mov	r3, r0
 8011982:	2b00      	cmp	r3, #0
 8011984:	d001      	beq.n	801198a <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011986:	2301      	movs	r3, #1
 8011988:	e014      	b.n	80119b4 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801198a:	4b0b      	ldr	r3, [pc, #44]	@ (80119b8 <CheckRetransUnconfirmedUplink+0x50>)
 801198c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8011990:	f003 0302 	and.w	r3, r3, #2
 8011994:	b2db      	uxtb	r3, r3
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00b      	beq.n	80119b2 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801199a:	4b07      	ldr	r3, [pc, #28]	@ (80119b8 <CheckRetransUnconfirmedUplink+0x50>)
 801199c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d004      	beq.n	80119ae <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80119a4:	4b04      	ldr	r3, [pc, #16]	@ (80119b8 <CheckRetransUnconfirmedUplink+0x50>)
 80119a6:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d101      	bne.n	80119b2 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 80119ae:	2301      	movs	r3, #1
 80119b0:	e000      	b.n	80119b4 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 80119b2:	2300      	movs	r3, #0
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	bd80      	pop	{r7, pc}
 80119b8:	200007d0 	.word	0x200007d0
 80119bc:	20000d04 	.word	0x20000d04

080119c0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80119c4:	4b10      	ldr	r3, [pc, #64]	@ (8011a08 <CheckRetransConfirmedUplink+0x48>)
 80119c6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80119ca:	4a10      	ldr	r2, [pc, #64]	@ (8011a0c <CheckRetransConfirmedUplink+0x4c>)
 80119cc:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 80119d0:	4611      	mov	r1, r2
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7ff ffb4 	bl	8011940 <CheckRetrans>
 80119d8:	4603      	mov	r3, r0
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d001      	beq.n	80119e2 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80119de:	2301      	movs	r3, #1
 80119e0:	e00f      	b.n	8011a02 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80119e2:	4b09      	ldr	r3, [pc, #36]	@ (8011a08 <CheckRetransConfirmedUplink+0x48>)
 80119e4:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80119e8:	f003 0302 	and.w	r3, r3, #2
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d006      	beq.n	8011a00 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80119f2:	4b05      	ldr	r3, [pc, #20]	@ (8011a08 <CheckRetransConfirmedUplink+0x48>)
 80119f4:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d001      	beq.n	8011a00 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80119fc:	2301      	movs	r3, #1
 80119fe:	e000      	b.n	8011a02 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8011a00:	2300      	movs	r3, #0
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	200007d0 	.word	0x200007d0
 8011a0c:	20000d04 	.word	0x20000d04

08011a10 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8011a10:	b480      	push	{r7}
 8011a12:	b083      	sub	sp, #12
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a1e:	d002      	beq.n	8011a26 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	3301      	adds	r3, #1
 8011a24:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8011a26:	687b      	ldr	r3, [r7, #4]
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	370c      	adds	r7, #12
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bc80      	pop	{r7}
 8011a30:	4770      	bx	lr
	...

08011a34 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011a38:	4b1a      	ldr	r3, [pc, #104]	@ (8011aa4 <StopRetransmission+0x70>)
 8011a3a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8011a3e:	f003 0302 	and.w	r3, r3, #2
 8011a42:	b2db      	uxtb	r3, r3
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d009      	beq.n	8011a5c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011a48:	4b16      	ldr	r3, [pc, #88]	@ (8011aa4 <StopRetransmission+0x70>)
 8011a4a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d011      	beq.n	8011a76 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011a52:	4b14      	ldr	r3, [pc, #80]	@ (8011aa4 <StopRetransmission+0x70>)
 8011a54:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011a58:	2b01      	cmp	r3, #1
 8011a5a:	d00c      	beq.n	8011a76 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011a5c:	4b12      	ldr	r3, [pc, #72]	@ (8011aa8 <StopRetransmission+0x74>)
 8011a5e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d007      	beq.n	8011a76 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8011a66:	4b10      	ldr	r3, [pc, #64]	@ (8011aa8 <StopRetransmission+0x74>)
 8011a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7ff ffd0 	bl	8011a10 <IncreaseAdrAckCounter>
 8011a70:	4603      	mov	r3, r0
 8011a72:	4a0d      	ldr	r2, [pc, #52]	@ (8011aa8 <StopRetransmission+0x74>)
 8011a74:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011a76:	4b0b      	ldr	r3, [pc, #44]	@ (8011aa4 <StopRetransmission+0x70>)
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 8011a7e:	4b09      	ldr	r3, [pc, #36]	@ (8011aa4 <StopRetransmission+0x70>)
 8011a80:	2200      	movs	r2, #0
 8011a82:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8011a86:	4b07      	ldr	r3, [pc, #28]	@ (8011aa4 <StopRetransmission+0x70>)
 8011a88:	2200      	movs	r2, #0
 8011a8a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011a8e:	4b05      	ldr	r3, [pc, #20]	@ (8011aa4 <StopRetransmission+0x70>)
 8011a90:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011a94:	f023 0302 	bic.w	r3, r3, #2
 8011a98:	4a02      	ldr	r2, [pc, #8]	@ (8011aa4 <StopRetransmission+0x70>)
 8011a9a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8011a9e:	2301      	movs	r3, #1
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	200007d0 	.word	0x200007d0
 8011aa8:	20000d04 	.word	0x20000d04

08011aac <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8011ab0:	4b08      	ldr	r3, [pc, #32]	@ (8011ad4 <OnMacProcessNotify+0x28>)
 8011ab2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d00a      	beq.n	8011ad0 <OnMacProcessNotify+0x24>
 8011aba:	4b06      	ldr	r3, [pc, #24]	@ (8011ad4 <OnMacProcessNotify+0x28>)
 8011abc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011ac0:	695b      	ldr	r3, [r3, #20]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d004      	beq.n	8011ad0 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8011ac6:	4b03      	ldr	r3, [pc, #12]	@ (8011ad4 <OnMacProcessNotify+0x28>)
 8011ac8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011acc:	695b      	ldr	r3, [r3, #20]
 8011ace:	4798      	blx	r3
    }
}
 8011ad0:	bf00      	nop
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	200007d0 	.word	0x200007d0

08011ad8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	4603      	mov	r3, r0
 8011ae0:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8011ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8011b10 <CallNvmDataChangeCallback+0x38>)
 8011ae4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d00c      	beq.n	8011b06 <CallNvmDataChangeCallback+0x2e>
 8011aec:	4b08      	ldr	r3, [pc, #32]	@ (8011b10 <CallNvmDataChangeCallback+0x38>)
 8011aee:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011af2:	691b      	ldr	r3, [r3, #16]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d006      	beq.n	8011b06 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011af8:	4b05      	ldr	r3, [pc, #20]	@ (8011b10 <CallNvmDataChangeCallback+0x38>)
 8011afa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011afe:	691b      	ldr	r3, [r3, #16]
 8011b00:	88fa      	ldrh	r2, [r7, #6]
 8011b02:	4610      	mov	r0, r2
 8011b04:	4798      	blx	r3
    }
}
 8011b06:	bf00      	nop
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	200007d0 	.word	0x200007d0

08011b14 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8011b14:	b480      	push	{r7}
 8011b16:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011b18:	4b0b      	ldr	r3, [pc, #44]	@ (8011b48 <IsRequestPending+0x34>)
 8011b1a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8011b1e:	f003 0304 	and.w	r3, r3, #4
 8011b22:	b2db      	uxtb	r3, r3
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d107      	bne.n	8011b38 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011b28:	4b07      	ldr	r3, [pc, #28]	@ (8011b48 <IsRequestPending+0x34>)
 8011b2a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8011b2e:	f003 0301 	and.w	r3, r3, #1
 8011b32:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d001      	beq.n	8011b3c <IsRequestPending+0x28>
    {
        return 1;
 8011b38:	2301      	movs	r3, #1
 8011b3a:	e000      	b.n	8011b3e <IsRequestPending+0x2a>
    }
    return 0;
 8011b3c:	2300      	movs	r3, #0
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bc80      	pop	{r7}
 8011b44:	4770      	bx	lr
 8011b46:	bf00      	nop
 8011b48:	200007d0 	.word	0x200007d0

08011b4c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011b4c:	b590      	push	{r4, r7, lr}
 8011b4e:	b091      	sub	sp, #68	@ 0x44
 8011b50:	af02      	add	r7, sp, #8
 8011b52:	6178      	str	r0, [r7, #20]
 8011b54:	6139      	str	r1, [r7, #16]
 8011b56:	4613      	mov	r3, r2
 8011b58:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d002      	beq.n	8011b66 <LoRaMacInitialization+0x1a>
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d101      	bne.n	8011b6a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b66:	2303      	movs	r3, #3
 8011b68:	e27a      	b.n	8012060 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d00b      	beq.n	8011b8a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d007      	beq.n	8011b8a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d003      	beq.n	8011b8a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d101      	bne.n	8011b8e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b8a:	2303      	movs	r3, #3
 8011b8c:	e268      	b.n	8012060 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011b8e:	7bfb      	ldrb	r3, [r7, #15]
 8011b90:	4618      	mov	r0, r3
 8011b92:	f003 fd03 	bl	801559c <RegionIsActive>
 8011b96:	4603      	mov	r3, r0
 8011b98:	f083 0301 	eor.w	r3, r3, #1
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d001      	beq.n	8011ba6 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011ba2:	2309      	movs	r3, #9
 8011ba4:	e25c      	b.n	8012060 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011ba6:	6978      	ldr	r0, [r7, #20]
 8011ba8:	f002 f996 	bl	8013ed8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011bac:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8011bb0:	2100      	movs	r1, #0
 8011bb2:	48c7      	ldr	r0, [pc, #796]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011bb4:	f005 ff68 	bl	8017a88 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011bb8:	f240 5234 	movw	r2, #1332	@ 0x534
 8011bbc:	2100      	movs	r1, #0
 8011bbe:	48c5      	ldr	r0, [pc, #788]	@ (8011ed4 <LoRaMacInitialization+0x388>)
 8011bc0:	f005 ff62 	bl	8017a88 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8011bc4:	4ac2      	ldr	r2, [pc, #776]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011bc6:	7bfb      	ldrb	r3, [r7, #15]
 8011bc8:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011bcc:	4bc0      	ldr	r3, [pc, #768]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011bce:	2200      	movs	r2, #0
 8011bd0:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8011bd4:	4bbe      	ldr	r3, [pc, #760]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011bdc:	4bbc      	ldr	r3, [pc, #752]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011bde:	4abe      	ldr	r2, [pc, #760]	@ (8011ed8 <LoRaMacInitialization+0x38c>)
 8011be0:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011be4:	2300      	movs	r3, #0
 8011be6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011bea:	4bbc      	ldr	r3, [pc, #752]	@ (8011edc <LoRaMacInitialization+0x390>)
 8011bec:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011bee:	4bbc      	ldr	r3, [pc, #752]	@ (8011ee0 <LoRaMacInitialization+0x394>)
 8011bf0:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8011bf2:	4bbc      	ldr	r3, [pc, #752]	@ (8011ee4 <LoRaMacInitialization+0x398>)
 8011bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011bf6:	4bb6      	ldr	r3, [pc, #728]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011bf8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011bfc:	f107 021c 	add.w	r2, r7, #28
 8011c00:	4611      	mov	r1, r2
 8011c02:	4618      	mov	r0, r3
 8011c04:	f003 fd03 	bl	801560e <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011c08:	230f      	movs	r3, #15
 8011c0a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c0e:	4bb0      	ldr	r3, [pc, #704]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011c10:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011c14:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011c18:	4611      	mov	r1, r2
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f003 fcce 	bl	80155bc <RegionGetPhyParam>
 8011c20:	4603      	mov	r3, r0
 8011c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	bf14      	ite	ne
 8011c2a:	2301      	movne	r3, #1
 8011c2c:	2300      	moveq	r3, #0
 8011c2e:	b2da      	uxtb	r2, r3
 8011c30:	4ba7      	ldr	r3, [pc, #668]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011c32:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011c36:	230a      	movs	r3, #10
 8011c38:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c3c:	4ba4      	ldr	r3, [pc, #656]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011c3e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011c42:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011c46:	4611      	mov	r1, r2
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f003 fcb7 	bl	80155bc <RegionGetPhyParam>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c54:	b25a      	sxtb	r2, r3
 8011c56:	4b9e      	ldr	r3, [pc, #632]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011c58:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011c5c:	2306      	movs	r3, #6
 8011c5e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c62:	4b9b      	ldr	r3, [pc, #620]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011c64:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011c68:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011c6c:	4611      	mov	r1, r2
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f003 fca4 	bl	80155bc <RegionGetPhyParam>
 8011c74:	4603      	mov	r3, r0
 8011c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c7a:	b25a      	sxtb	r2, r3
 8011c7c:	4b94      	ldr	r3, [pc, #592]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011c7e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011c82:	2310      	movs	r3, #16
 8011c84:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c88:	4b91      	ldr	r3, [pc, #580]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011c8a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011c8e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011c92:	4611      	mov	r1, r2
 8011c94:	4618      	mov	r0, r3
 8011c96:	f003 fc91 	bl	80155bc <RegionGetPhyParam>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca0:	4a8b      	ldr	r2, [pc, #556]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011ca2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011ca6:	2311      	movs	r3, #17
 8011ca8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cac:	4b88      	ldr	r3, [pc, #544]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011cae:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011cb2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011cb6:	4611      	mov	r1, r2
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f003 fc7f 	bl	80155bc <RegionGetPhyParam>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cc4:	4a82      	ldr	r2, [pc, #520]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011cc6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011cca:	2312      	movs	r3, #18
 8011ccc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cd0:	4b7f      	ldr	r3, [pc, #508]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011cd2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011cd6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011cda:	4611      	mov	r1, r2
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f003 fc6d 	bl	80155bc <RegionGetPhyParam>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ce8:	4a79      	ldr	r2, [pc, #484]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011cea:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011cee:	2313      	movs	r3, #19
 8011cf0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cf4:	4b76      	ldr	r3, [pc, #472]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011cf6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011cfa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011cfe:	4611      	mov	r1, r2
 8011d00:	4618      	mov	r0, r3
 8011d02:	f003 fc5b 	bl	80155bc <RegionGetPhyParam>
 8011d06:	4603      	mov	r3, r0
 8011d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d0c:	4a70      	ldr	r2, [pc, #448]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011d0e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011d12:	2314      	movs	r3, #20
 8011d14:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d18:	4b6d      	ldr	r3, [pc, #436]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011d1a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d1e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011d22:	4611      	mov	r1, r2
 8011d24:	4618      	mov	r0, r3
 8011d26:	f003 fc49 	bl	80155bc <RegionGetPhyParam>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d30:	4a67      	ldr	r2, [pc, #412]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011d32:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011d36:	2316      	movs	r3, #22
 8011d38:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d3c:	4b64      	ldr	r3, [pc, #400]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011d3e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d42:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011d46:	4611      	mov	r1, r2
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f003 fc37 	bl	80155bc <RegionGetPhyParam>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d54:	b2da      	uxtb	r2, r3
 8011d56:	4b5e      	ldr	r3, [pc, #376]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011d58:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011d5c:	2317      	movs	r3, #23
 8011d5e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d62:	4b5b      	ldr	r3, [pc, #364]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011d64:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d68:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011d6c:	4611      	mov	r1, r2
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f003 fc24 	bl	80155bc <RegionGetPhyParam>
 8011d74:	4603      	mov	r3, r0
 8011d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d7a:	4a55      	ldr	r2, [pc, #340]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011d7c:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d82:	4a53      	ldr	r2, [pc, #332]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011d84:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011d88:	2318      	movs	r3, #24
 8011d8a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d8e:	4b50      	ldr	r3, [pc, #320]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011d90:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d94:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011d98:	4611      	mov	r1, r2
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f003 fc0e 	bl	80155bc <RegionGetPhyParam>
 8011da0:	4603      	mov	r3, r0
 8011da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011da6:	b2da      	uxtb	r2, r3
 8011da8:	4b49      	ldr	r3, [pc, #292]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011daa:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011db0:	b2da      	uxtb	r2, r3
 8011db2:	4b47      	ldr	r3, [pc, #284]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011db4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011db8:	231d      	movs	r3, #29
 8011dba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011dbe:	4b44      	ldr	r3, [pc, #272]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011dc0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011dc4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011dc8:	4611      	mov	r1, r2
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f003 fbf6 	bl	80155bc <RegionGetPhyParam>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dd6:	b2da      	uxtb	r2, r3
 8011dd8:	4b3d      	ldr	r3, [pc, #244]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011dda:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011dde:	231e      	movs	r3, #30
 8011de0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011de4:	4b3a      	ldr	r3, [pc, #232]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011de6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011dea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011dee:	4611      	mov	r1, r2
 8011df0:	4618      	mov	r0, r3
 8011df2:	f003 fbe3 	bl	80155bc <RegionGetPhyParam>
 8011df6:	4603      	mov	r3, r0
 8011df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dfc:	b2da      	uxtb	r2, r3
 8011dfe:	4b34      	ldr	r3, [pc, #208]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011e00:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011e04:	231f      	movs	r3, #31
 8011e06:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e0a:	4b31      	ldr	r3, [pc, #196]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011e0c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011e10:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011e14:	4611      	mov	r1, r2
 8011e16:	4618      	mov	r0, r3
 8011e18:	f003 fbd0 	bl	80155bc <RegionGetPhyParam>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e22:	4a2b      	ldr	r2, [pc, #172]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011e24:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011e28:	2320      	movs	r3, #32
 8011e2a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e2e:	4b28      	ldr	r3, [pc, #160]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011e30:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011e34:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011e38:	4611      	mov	r1, r2
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f003 fbbe 	bl	80155bc <RegionGetPhyParam>
 8011e40:	4603      	mov	r3, r0
 8011e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e46:	4a22      	ldr	r2, [pc, #136]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011e48:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011e4c:	230b      	movs	r3, #11
 8011e4e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e52:	4b1f      	ldr	r3, [pc, #124]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011e54:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011e58:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011e5c:	4611      	mov	r1, r2
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f003 fbac 	bl	80155bc <RegionGetPhyParam>
 8011e64:	4603      	mov	r3, r0
 8011e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8011e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e6a:	b29a      	uxth	r2, r3
 8011e6c:	4b18      	ldr	r3, [pc, #96]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011e6e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011e72:	230c      	movs	r3, #12
 8011e74:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e78:	4b15      	ldr	r3, [pc, #84]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011e7a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011e7e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011e82:	4611      	mov	r1, r2
 8011e84:	4618      	mov	r0, r3
 8011e86:	f003 fb99 	bl	80155bc <RegionGetPhyParam>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8011e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e90:	b29a      	uxth	r2, r3
 8011e92:	4b0f      	ldr	r3, [pc, #60]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011e94:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011e98:	4b0d      	ldr	r3, [pc, #52]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011e9a:	2201      	movs	r2, #1
 8011e9c:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011ea2:	220a      	movs	r2, #10
 8011ea4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011ea8:	4b09      	ldr	r3, [pc, #36]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011eaa:	2206      	movs	r2, #6
 8011eac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011eb0:	4b07      	ldr	r3, [pc, #28]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011eb6:	4a06      	ldr	r2, [pc, #24]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011eba:	4b05      	ldr	r3, [pc, #20]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011ebc:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8011ec0:	4b03      	ldr	r3, [pc, #12]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011ec6:	4b02      	ldr	r3, [pc, #8]	@ (8011ed0 <LoRaMacInitialization+0x384>)
 8011ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011ecc:	e00c      	b.n	8011ee8 <LoRaMacInitialization+0x39c>
 8011ece:	bf00      	nop
 8011ed0:	20000d04 	.word	0x20000d04
 8011ed4:	200007d0 	.word	0x200007d0
 8011ed8:	01000400 	.word	0x01000400
 8011edc:	20000f28 	.word	0x20000f28
 8011ee0:	20000f2c 	.word	0x20000f2c
 8011ee4:	2000187c 	.word	0x2000187c
 8011ee8:	4a5f      	ldr	r2, [pc, #380]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011eea:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011eec:	4b5e      	ldr	r3, [pc, #376]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011eee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011ef2:	4a5d      	ldr	r2, [pc, #372]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011ef4:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011ef6:	4b5c      	ldr	r3, [pc, #368]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011ef8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011efc:	4a5a      	ldr	r2, [pc, #360]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011efe:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011f00:	4b59      	ldr	r3, [pc, #356]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011f02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011f06:	4a58      	ldr	r2, [pc, #352]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011f08:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8011f0a:	4b57      	ldr	r3, [pc, #348]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011f0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011f10:	4a55      	ldr	r2, [pc, #340]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011f12:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011f14:	4b54      	ldr	r3, [pc, #336]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011f16:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8011f1a:	4b53      	ldr	r3, [pc, #332]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011f1c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8011f20:	4b51      	ldr	r3, [pc, #324]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011f22:	2201      	movs	r2, #1
 8011f24:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011f28:	4a50      	ldr	r2, [pc, #320]	@ (801206c <LoRaMacInitialization+0x520>)
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 8011f30:	2000      	movs	r0, #0
 8011f32:	f7ff f86b 	bl	801100c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011f36:	4b4c      	ldr	r3, [pc, #304]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011f38:	2201      	movs	r2, #1
 8011f3a:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 8011f3e:	4a4b      	ldr	r2, [pc, #300]	@ (801206c <LoRaMacInitialization+0x520>)
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8011f46:	4b49      	ldr	r3, [pc, #292]	@ (801206c <LoRaMacInitialization+0x520>)
 8011f48:	2200      	movs	r2, #0
 8011f4a:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8011f4e:	4b47      	ldr	r3, [pc, #284]	@ (801206c <LoRaMacInitialization+0x520>)
 8011f50:	2201      	movs	r2, #1
 8011f52:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011f56:	4b44      	ldr	r3, [pc, #272]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011f58:	2200      	movs	r2, #0
 8011f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011f5c:	4b42      	ldr	r3, [pc, #264]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011f5e:	2200      	movs	r2, #0
 8011f60:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011f62:	2300      	movs	r3, #0
 8011f64:	9300      	str	r3, [sp, #0]
 8011f66:	4b42      	ldr	r3, [pc, #264]	@ (8012070 <LoRaMacInitialization+0x524>)
 8011f68:	2200      	movs	r2, #0
 8011f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8011f6e:	4841      	ldr	r0, [pc, #260]	@ (8012074 <LoRaMacInitialization+0x528>)
 8011f70:	f009 fdfe 	bl	801bb70 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011f74:	2300      	movs	r3, #0
 8011f76:	9300      	str	r3, [sp, #0]
 8011f78:	4b3f      	ldr	r3, [pc, #252]	@ (8012078 <LoRaMacInitialization+0x52c>)
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8011f80:	483e      	ldr	r0, [pc, #248]	@ (801207c <LoRaMacInitialization+0x530>)
 8011f82:	f009 fdf5 	bl	801bb70 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011f86:	2300      	movs	r3, #0
 8011f88:	9300      	str	r3, [sp, #0]
 8011f8a:	4b3d      	ldr	r3, [pc, #244]	@ (8012080 <LoRaMacInitialization+0x534>)
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8011f92:	483c      	ldr	r0, [pc, #240]	@ (8012084 <LoRaMacInitialization+0x538>)
 8011f94:	f009 fdec 	bl	801bb70 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8011f98:	2300      	movs	r3, #0
 8011f9a:	9300      	str	r3, [sp, #0]
 8011f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8012088 <LoRaMacInitialization+0x53c>)
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8011fa4:	4839      	ldr	r0, [pc, #228]	@ (801208c <LoRaMacInitialization+0x540>)
 8011fa6:	f009 fde3 	bl	801bb70 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011faa:	4c2f      	ldr	r4, [pc, #188]	@ (8012068 <LoRaMacInitialization+0x51c>)
 8011fac:	463b      	mov	r3, r7
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f009 f9ba 	bl	801b328 <SysTimeGetMcuTime>
 8011fb4:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 8011fb8:	463a      	mov	r2, r7
 8011fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fbe:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011fc2:	4b33      	ldr	r3, [pc, #204]	@ (8012090 <LoRaMacInitialization+0x544>)
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011fc8:	4b28      	ldr	r3, [pc, #160]	@ (801206c <LoRaMacInitialization+0x520>)
 8011fca:	4a32      	ldr	r2, [pc, #200]	@ (8012094 <LoRaMacInitialization+0x548>)
 8011fcc:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011fd0:	4b26      	ldr	r3, [pc, #152]	@ (801206c <LoRaMacInitialization+0x520>)
 8011fd2:	4a31      	ldr	r2, [pc, #196]	@ (8012098 <LoRaMacInitialization+0x54c>)
 8011fd4:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011fd8:	4b24      	ldr	r3, [pc, #144]	@ (801206c <LoRaMacInitialization+0x520>)
 8011fda:	4a30      	ldr	r2, [pc, #192]	@ (801209c <LoRaMacInitialization+0x550>)
 8011fdc:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011fe0:	4b22      	ldr	r3, [pc, #136]	@ (801206c <LoRaMacInitialization+0x520>)
 8011fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80120a0 <LoRaMacInitialization+0x554>)
 8011fe4:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011fe8:	4b20      	ldr	r3, [pc, #128]	@ (801206c <LoRaMacInitialization+0x520>)
 8011fea:	4a2e      	ldr	r2, [pc, #184]	@ (80120a4 <LoRaMacInitialization+0x558>)
 8011fec:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80120a8 <LoRaMacInitialization+0x55c>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	482d      	ldr	r0, [pc, #180]	@ (80120ac <LoRaMacInitialization+0x560>)
 8011ff6:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8011ff8:	482d      	ldr	r0, [pc, #180]	@ (80120b0 <LoRaMacInitialization+0x564>)
 8011ffa:	f7fa f9c1 	bl	800c380 <SecureElementInit>
 8011ffe:	4603      	mov	r3, r0
 8012000:	2b00      	cmp	r3, #0
 8012002:	d001      	beq.n	8012008 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012004:	2311      	movs	r3, #17
 8012006:	e02b      	b.n	8012060 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012008:	4817      	ldr	r0, [pc, #92]	@ (8012068 <LoRaMacInitialization+0x51c>)
 801200a:	f002 fc21 	bl	8014850 <LoRaMacCryptoInit>
 801200e:	4603      	mov	r3, r0
 8012010:	2b00      	cmp	r3, #0
 8012012:	d001      	beq.n	8012018 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012014:	2311      	movs	r3, #17
 8012016:	e023      	b.n	8012060 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012018:	f001 fd20 	bl	8013a5c <LoRaMacCommandsInit>
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	d001      	beq.n	8012026 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012022:	2313      	movs	r3, #19
 8012024:	e01c      	b.n	8012060 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012026:	4823      	ldr	r0, [pc, #140]	@ (80120b4 <LoRaMacInitialization+0x568>)
 8012028:	f002 fcb2 	bl	8014990 <LoRaMacCryptoSetMulticastReference>
 801202c:	4603      	mov	r3, r0
 801202e:	2b00      	cmp	r3, #0
 8012030:	d001      	beq.n	8012036 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012032:	2311      	movs	r3, #17
 8012034:	e014      	b.n	8012060 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012036:	4b1c      	ldr	r3, [pc, #112]	@ (80120a8 <LoRaMacInitialization+0x55c>)
 8012038:	695b      	ldr	r3, [r3, #20]
 801203a:	4798      	blx	r3
 801203c:	4603      	mov	r3, r0
 801203e:	4618      	mov	r0, r3
 8012040:	f005 fcc2 	bl	80179c8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012044:	4b18      	ldr	r3, [pc, #96]	@ (80120a8 <LoRaMacInitialization+0x55c>)
 8012046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012048:	4a07      	ldr	r2, [pc, #28]	@ (8012068 <LoRaMacInitialization+0x51c>)
 801204a:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 801204e:	4610      	mov	r0, r2
 8012050:	4798      	blx	r3
    Radio.Sleep( );
 8012052:	4b15      	ldr	r3, [pc, #84]	@ (80120a8 <LoRaMacInitialization+0x55c>)
 8012054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012056:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012058:	2001      	movs	r0, #1
 801205a:	f7fd fa67 	bl	800f52c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801205e:	2300      	movs	r3, #0
}
 8012060:	4618      	mov	r0, r3
 8012062:	373c      	adds	r7, #60	@ 0x3c
 8012064:	46bd      	mov	sp, r7
 8012066:	bd90      	pop	{r4, r7, pc}
 8012068:	20000d04 	.word	0x20000d04
 801206c:	200007d0 	.word	0x200007d0
 8012070:	0800fab9 	.word	0x0800fab9
 8012074:	20000b38 	.word	0x20000b38
 8012078:	0800fb49 	.word	0x0800fb49
 801207c:	20000b50 	.word	0x20000b50
 8012080:	0800fbc1 	.word	0x0800fbc1
 8012084:	20000b68 	.word	0x20000b68
 8012088:	0800fc41 	.word	0x0800fc41
 801208c:	20000bd0 	.word	0x20000bd0
 8012090:	2000190c 	.word	0x2000190c
 8012094:	0800e539 	.word	0x0800e539
 8012098:	0800e595 	.word	0x0800e595
 801209c:	0800e635 	.word	0x0800e635
 80120a0:	0800e609 	.word	0x0800e609
 80120a4:	0800e651 	.word	0x0800e651
 80120a8:	0801d50c 	.word	0x0801d50c
 80120ac:	20000b1c 	.word	0x20000b1c
 80120b0:	20000e50 	.word	0x20000e50
 80120b4:	20000dec 	.word	0x20000dec

080120b8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80120bc:	4b04      	ldr	r3, [pc, #16]	@ (80120d0 <LoRaMacStart+0x18>)
 80120be:	2200      	movs	r2, #0
 80120c0:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 80120c4:	f7fc fada 	bl	800e67c <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 80120c8:	2300      	movs	r3, #0
}
 80120ca:	4618      	mov	r0, r3
 80120cc:	bd80      	pop	{r7, pc}
 80120ce:	bf00      	nop
 80120d0:	200007d0 	.word	0x200007d0

080120d4 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80120d8:	f7fd f9f0 	bl	800f4bc <LoRaMacIsBusy>
 80120dc:	4603      	mov	r3, r0
 80120de:	f083 0301 	eor.w	r3, r3, #1
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d00d      	beq.n	8012104 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80120e8:	4b0b      	ldr	r3, [pc, #44]	@ (8012118 <LoRaMacStop+0x44>)
 80120ea:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80120ee:	2b02      	cmp	r3, #2
 80120f0:	d102      	bne.n	80120f8 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 80120f2:	4b0a      	ldr	r3, [pc, #40]	@ (801211c <LoRaMacStop+0x48>)
 80120f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120f6:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 80120f8:	4b09      	ldr	r3, [pc, #36]	@ (8012120 <LoRaMacStop+0x4c>)
 80120fa:	2201      	movs	r2, #1
 80120fc:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8012100:	2300      	movs	r3, #0
 8012102:	e007      	b.n	8012114 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8012104:	4b06      	ldr	r3, [pc, #24]	@ (8012120 <LoRaMacStop+0x4c>)
 8012106:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801210a:	2b01      	cmp	r3, #1
 801210c:	d101      	bne.n	8012112 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 801210e:	2300      	movs	r3, #0
 8012110:	e000      	b.n	8012114 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8012112:	2301      	movs	r3, #1
}
 8012114:	4618      	mov	r0, r3
 8012116:	bd80      	pop	{r7, pc}
 8012118:	20000d04 	.word	0x20000d04
 801211c:	0801d50c 	.word	0x0801d50c
 8012120:	200007d0 	.word	0x200007d0

08012124 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8012124:	b580      	push	{r7, lr}
 8012126:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8012128:	4812      	ldr	r0, [pc, #72]	@ (8012174 <LoRaMacHalt+0x50>)
 801212a:	f009 fdc5 	bl	801bcb8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801212e:	4812      	ldr	r0, [pc, #72]	@ (8012178 <LoRaMacHalt+0x54>)
 8012130:	f009 fdc2 	bl	801bcb8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8012134:	4811      	ldr	r0, [pc, #68]	@ (801217c <LoRaMacHalt+0x58>)
 8012136:	f009 fdbf 	bl	801bcb8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801213a:	4811      	ldr	r0, [pc, #68]	@ (8012180 <LoRaMacHalt+0x5c>)
 801213c:	f009 fdbc 	bl	801bcb8 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8012140:	f001 faf0 	bl	8013724 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8012144:	4b0f      	ldr	r3, [pc, #60]	@ (8012184 <LoRaMacHalt+0x60>)
 8012146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012148:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801214a:	4b0f      	ldr	r3, [pc, #60]	@ (8012188 <LoRaMacHalt+0x64>)
 801214c:	2200      	movs	r2, #0
 801214e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8012152:	480e      	ldr	r0, [pc, #56]	@ (801218c <LoRaMacHalt+0x68>)
 8012154:	f7fd fb8c 	bl	800f870 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8012158:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 801215c:	490b      	ldr	r1, [pc, #44]	@ (801218c <LoRaMacHalt+0x68>)
 801215e:	480c      	ldr	r0, [pc, #48]	@ (8012190 <LoRaMacHalt+0x6c>)
 8012160:	f005 fc57 	bl	8017a12 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8012164:	4b08      	ldr	r3, [pc, #32]	@ (8012188 <LoRaMacHalt+0x64>)
 8012166:	2201      	movs	r2, #1
 8012168:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 801216c:	2300      	movs	r3, #0
}
 801216e:	4618      	mov	r0, r3
 8012170:	bd80      	pop	{r7, pc}
 8012172:	bf00      	nop
 8012174:	20000b38 	.word	0x20000b38
 8012178:	20000b50 	.word	0x20000b50
 801217c:	20000b68 	.word	0x20000b68
 8012180:	20000bd0 	.word	0x20000bd0
 8012184:	0801d50c 	.word	0x0801d50c
 8012188:	200007d0 	.word	0x200007d0
 801218c:	20000d04 	.word	0x20000d04
 8012190:	200012c0 	.word	0x200012c0

08012194 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012194:	b590      	push	{r4, r7, lr}
 8012196:	b08d      	sub	sp, #52	@ 0x34
 8012198:	af02      	add	r7, sp, #8
 801219a:	4603      	mov	r3, r0
 801219c:	6039      	str	r1, [r7, #0]
 801219e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80121a0:	4b42      	ldr	r3, [pc, #264]	@ (80122ac <LoRaMacQueryTxPossible+0x118>)
 80121a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121a4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80121a6:	4b41      	ldr	r3, [pc, #260]	@ (80122ac <LoRaMacQueryTxPossible+0x118>)
 80121a8:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 80121ac:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80121ae:	4b3f      	ldr	r3, [pc, #252]	@ (80122ac <LoRaMacQueryTxPossible+0x118>)
 80121b0:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 80121b4:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80121b6:	4b3e      	ldr	r3, [pc, #248]	@ (80122b0 <LoRaMacQueryTxPossible+0x11c>)
 80121b8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80121bc:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80121be:	2300      	movs	r3, #0
 80121c0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d101      	bne.n	80121cc <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80121c8:	2303      	movs	r3, #3
 80121ca:	e06b      	b.n	80122a4 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80121cc:	2300      	movs	r3, #0
 80121ce:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80121d0:	4b36      	ldr	r3, [pc, #216]	@ (80122ac <LoRaMacQueryTxPossible+0x118>)
 80121d2:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80121d6:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80121d8:	4b34      	ldr	r3, [pc, #208]	@ (80122ac <LoRaMacQueryTxPossible+0x118>)
 80121da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121dc:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80121de:	4b33      	ldr	r3, [pc, #204]	@ (80122ac <LoRaMacQueryTxPossible+0x118>)
 80121e0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80121e4:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80121e6:	4b31      	ldr	r3, [pc, #196]	@ (80122ac <LoRaMacQueryTxPossible+0x118>)
 80121e8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80121ec:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80121ee:	4b2f      	ldr	r3, [pc, #188]	@ (80122ac <LoRaMacQueryTxPossible+0x118>)
 80121f0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80121f4:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80121f8:	4b2c      	ldr	r3, [pc, #176]	@ (80122ac <LoRaMacQueryTxPossible+0x118>)
 80121fa:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80121fe:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8012202:	4b2b      	ldr	r3, [pc, #172]	@ (80122b0 <LoRaMacQueryTxPossible+0x11c>)
 8012204:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801220c:	4b27      	ldr	r3, [pc, #156]	@ (80122ac <LoRaMacQueryTxPossible+0x118>)
 801220e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8012216:	4b25      	ldr	r3, [pc, #148]	@ (80122ac <LoRaMacQueryTxPossible+0x118>)
 8012218:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801221c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8012220:	f107 040d 	add.w	r4, r7, #13
 8012224:	f107 020e 	add.w	r2, r7, #14
 8012228:	f107 010f 	add.w	r1, r7, #15
 801222c:	f107 0014 	add.w	r0, r7, #20
 8012230:	f107 0310 	add.w	r3, r7, #16
 8012234:	9300      	str	r3, [sp, #0]
 8012236:	4623      	mov	r3, r4
 8012238:	f001 f93e 	bl	80134b8 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801223c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012240:	4618      	mov	r0, r3
 8012242:	f7fd fe43 	bl	800fecc <GetMaxAppPayloadWithoutFOptsLength>
 8012246:	4603      	mov	r3, r0
 8012248:	461a      	mov	r2, r3
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801224e:	f107 0308 	add.w	r3, r7, #8
 8012252:	4618      	mov	r0, r3
 8012254:	f001 fd08 	bl	8013c68 <LoRaMacCommandsGetSizeSerializedCmds>
 8012258:	4603      	mov	r3, r0
 801225a:	2b00      	cmp	r3, #0
 801225c:	d001      	beq.n	8012262 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801225e:	2313      	movs	r3, #19
 8012260:	e020      	b.n	80122a4 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	2b0f      	cmp	r3, #15
 8012266:	d819      	bhi.n	801229c <LoRaMacQueryTxPossible+0x108>
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	785b      	ldrb	r3, [r3, #1]
 801226c:	461a      	mov	r2, r3
 801226e:	68bb      	ldr	r3, [r7, #8]
 8012270:	429a      	cmp	r2, r3
 8012272:	d313      	bcc.n	801229c <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	785a      	ldrb	r2, [r3, #1]
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	b2db      	uxtb	r3, r3
 801227c:	1ad3      	subs	r3, r2, r3
 801227e:	b2da      	uxtb	r2, r3
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	785b      	ldrb	r3, [r3, #1]
 8012288:	4619      	mov	r1, r3
 801228a:	79fa      	ldrb	r2, [r7, #7]
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	4413      	add	r3, r2
 8012290:	4299      	cmp	r1, r3
 8012292:	d301      	bcc.n	8012298 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8012294:	2300      	movs	r3, #0
 8012296:	e005      	b.n	80122a4 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012298:	2308      	movs	r3, #8
 801229a:	e003      	b.n	80122a4 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	2200      	movs	r2, #0
 80122a0:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80122a2:	2308      	movs	r3, #8
    }
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	372c      	adds	r7, #44	@ 0x2c
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd90      	pop	{r4, r7, pc}
 80122ac:	20000d04 	.word	0x20000d04
 80122b0:	200007d0 	.word	0x200007d0

080122b4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80122b4:	b590      	push	{r4, r7, lr}
 80122b6:	b087      	sub	sp, #28
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80122bc:	2300      	movs	r3, #0
 80122be:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d101      	bne.n	80122ca <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80122c6:	2303      	movs	r3, #3
 80122c8:	e1c4      	b.n	8012654 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	2b41      	cmp	r3, #65	@ 0x41
 80122d0:	f200 81b9 	bhi.w	8012646 <LoRaMacMibGetRequestConfirm+0x392>
 80122d4:	a201      	add	r2, pc, #4	@ (adr r2, 80122dc <LoRaMacMibGetRequestConfirm+0x28>)
 80122d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122da:	bf00      	nop
 80122dc:	080123e5 	.word	0x080123e5
 80122e0:	080123f1 	.word	0x080123f1
 80122e4:	080123fd 	.word	0x080123fd
 80122e8:	08012409 	.word	0x08012409
 80122ec:	08012415 	.word	0x08012415
 80122f0:	08012421 	.word	0x08012421
 80122f4:	0801242d 	.word	0x0801242d
 80122f8:	08012647 	.word	0x08012647
 80122fc:	08012647 	.word	0x08012647
 8012300:	08012647 	.word	0x08012647
 8012304:	08012647 	.word	0x08012647
 8012308:	08012647 	.word	0x08012647
 801230c:	08012647 	.word	0x08012647
 8012310:	08012647 	.word	0x08012647
 8012314:	08012647 	.word	0x08012647
 8012318:	08012441 	.word	0x08012441
 801231c:	0801244d 	.word	0x0801244d
 8012320:	08012459 	.word	0x08012459
 8012324:	0801247b 	.word	0x0801247b
 8012328:	0801248d 	.word	0x0801248d
 801232c:	0801249f 	.word	0x0801249f
 8012330:	080124b1 	.word	0x080124b1
 8012334:	080124e5 	.word	0x080124e5
 8012338:	080124c3 	.word	0x080124c3
 801233c:	08012507 	.word	0x08012507
 8012340:	08012513 	.word	0x08012513
 8012344:	0801251d 	.word	0x0801251d
 8012348:	08012527 	.word	0x08012527
 801234c:	08012531 	.word	0x08012531
 8012350:	0801253b 	.word	0x0801253b
 8012354:	08012545 	.word	0x08012545
 8012358:	08012571 	.word	0x08012571
 801235c:	0801257d 	.word	0x0801257d
 8012360:	08012595 	.word	0x08012595
 8012364:	08012589 	.word	0x08012589
 8012368:	080125a1 	.word	0x080125a1
 801236c:	080125ab 	.word	0x080125ab
 8012370:	080125b7 	.word	0x080125b7
 8012374:	080125d3 	.word	0x080125d3
 8012378:	080125c3 	.word	0x080125c3
 801237c:	080125cb 	.word	0x080125cb
 8012380:	08012647 	.word	0x08012647
 8012384:	080125df 	.word	0x080125df
 8012388:	08012647 	.word	0x08012647
 801238c:	08012647 	.word	0x08012647
 8012390:	08012647 	.word	0x08012647
 8012394:	08012647 	.word	0x08012647
 8012398:	08012647 	.word	0x08012647
 801239c:	08012647 	.word	0x08012647
 80123a0:	08012647 	.word	0x08012647
 80123a4:	08012647 	.word	0x08012647
 80123a8:	08012647 	.word	0x08012647
 80123ac:	08012647 	.word	0x08012647
 80123b0:	08012647 	.word	0x08012647
 80123b4:	08012647 	.word	0x08012647
 80123b8:	08012647 	.word	0x08012647
 80123bc:	08012647 	.word	0x08012647
 80123c0:	08012647 	.word	0x08012647
 80123c4:	080125f3 	.word	0x080125f3
 80123c8:	080125ff 	.word	0x080125ff
 80123cc:	0801260b 	.word	0x0801260b
 80123d0:	08012617 	.word	0x08012617
 80123d4:	08012623 	.word	0x08012623
 80123d8:	0801262f 	.word	0x0801262f
 80123dc:	0801263b 	.word	0x0801263b
 80123e0:	08012641 	.word	0x08012641
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80123e4:	4b9d      	ldr	r3, [pc, #628]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123e6:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	711a      	strb	r2, [r3, #4]
            break;
 80123ee:	e130      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80123f0:	4b9a      	ldr	r3, [pc, #616]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123f2:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	711a      	strb	r2, [r3, #4]
            break;
 80123fa:	e12a      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	685b      	ldr	r3, [r3, #4]
 8012400:	4618      	mov	r0, r3
 8012402:	f7fa fa7b 	bl	800c8fc <SecureElementGetDevEui>
            break;
 8012406:	e124      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	4618      	mov	r0, r3
 801240e:	f7fa faa5 	bl	800c95c <SecureElementGetJoinEui>
            break;
 8012412:	e11e      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8012414:	4b91      	ldr	r3, [pc, #580]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012416:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	711a      	strb	r2, [r3, #4]
            break;
 801241e:	e118      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8012420:	4b8e      	ldr	r3, [pc, #568]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012422:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	605a      	str	r2, [r3, #4]
            break;
 801242a:	e112      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 801242c:	4b8b      	ldr	r3, [pc, #556]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801242e:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	3304      	adds	r3, #4
 8012436:	4619      	mov	r1, r3
 8012438:	4610      	mov	r0, r2
 801243a:	f7fa fac1 	bl	800c9c0 <SecureElementGetDevAddr>
            break;
 801243e:	e108      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012440:	4b86      	ldr	r3, [pc, #536]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012442:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	711a      	strb	r2, [r3, #4]
            break;
 801244a:	e102      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801244c:	4b83      	ldr	r3, [pc, #524]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801244e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	711a      	strb	r2, [r3, #4]
            break;
 8012456:	e0fc      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012458:	231c      	movs	r3, #28
 801245a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801245c:	4b7f      	ldr	r3, [pc, #508]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801245e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012462:	f107 0210 	add.w	r2, r7, #16
 8012466:	4611      	mov	r1, r2
 8012468:	4618      	mov	r0, r3
 801246a:	f003 f8a7 	bl	80155bc <RegionGetPhyParam>
 801246e:	4603      	mov	r3, r0
 8012470:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012472:	68fa      	ldr	r2, [r7, #12]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	605a      	str	r2, [r3, #4]
            break;
 8012478:	e0eb      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	4a77      	ldr	r2, [pc, #476]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801247e:	3304      	adds	r3, #4
 8012480:	326c      	adds	r2, #108	@ 0x6c
 8012482:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012486:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801248a:	e0e2      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	4a73      	ldr	r2, [pc, #460]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012490:	3304      	adds	r3, #4
 8012492:	32b4      	adds	r2, #180	@ 0xb4
 8012494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012498:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801249c:	e0d9      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	4a6e      	ldr	r2, [pc, #440]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80124a2:	3304      	adds	r3, #4
 80124a4:	3274      	adds	r2, #116	@ 0x74
 80124a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124aa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80124ae:	e0d0      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	4a6a      	ldr	r2, [pc, #424]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80124b4:	3304      	adds	r3, #4
 80124b6:	32bc      	adds	r2, #188	@ 0xbc
 80124b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124bc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80124c0:	e0c7      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80124c2:	231a      	movs	r3, #26
 80124c4:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80124c6:	4b65      	ldr	r3, [pc, #404]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80124c8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80124cc:	f107 0210 	add.w	r2, r7, #16
 80124d0:	4611      	mov	r1, r2
 80124d2:	4618      	mov	r0, r3
 80124d4:	f003 f872 	bl	80155bc <RegionGetPhyParam>
 80124d8:	4603      	mov	r3, r0
 80124da:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80124dc:	68fa      	ldr	r2, [r7, #12]
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	605a      	str	r2, [r3, #4]
            break;
 80124e2:	e0b6      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80124e4:	2319      	movs	r3, #25
 80124e6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80124e8:	4b5c      	ldr	r3, [pc, #368]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80124ea:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80124ee:	f107 0210 	add.w	r2, r7, #16
 80124f2:	4611      	mov	r1, r2
 80124f4:	4618      	mov	r0, r3
 80124f6:	f003 f861 	bl	80155bc <RegionGetPhyParam>
 80124fa:	4603      	mov	r3, r0
 80124fc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80124fe:	68fa      	ldr	r2, [r7, #12]
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	605a      	str	r2, [r3, #4]
            break;
 8012504:	e0a5      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012506:	4b55      	ldr	r3, [pc, #340]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012508:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	711a      	strb	r2, [r3, #4]
            break;
 8012510:	e09f      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8012512:	4b52      	ldr	r3, [pc, #328]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012514:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	605a      	str	r2, [r3, #4]
            break;
 801251a:	e09a      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 801251c:	4b4f      	ldr	r3, [pc, #316]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801251e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	605a      	str	r2, [r3, #4]
            break;
 8012524:	e095      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8012526:	4b4d      	ldr	r3, [pc, #308]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012528:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	605a      	str	r2, [r3, #4]
            break;
 801252e:	e090      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8012530:	4b4a      	ldr	r3, [pc, #296]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012532:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	605a      	str	r2, [r3, #4]
            break;
 8012538:	e08b      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801253a:	4b48      	ldr	r3, [pc, #288]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801253c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	605a      	str	r2, [r3, #4]
            break;
 8012542:	e086      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8012544:	2302      	movs	r3, #2
 8012546:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012548:	4b44      	ldr	r3, [pc, #272]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801254a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801254e:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012550:	4b42      	ldr	r3, [pc, #264]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012552:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012556:	f107 0210 	add.w	r2, r7, #16
 801255a:	4611      	mov	r1, r2
 801255c:	4618      	mov	r0, r3
 801255e:	f003 f82d 	bl	80155bc <RegionGetPhyParam>
 8012562:	4603      	mov	r3, r0
 8012564:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	b25a      	sxtb	r2, r3
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	711a      	strb	r2, [r3, #4]
            break;
 801256e:	e070      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012570:	4b3a      	ldr	r3, [pc, #232]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012572:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	711a      	strb	r2, [r3, #4]
            break;
 801257a:	e06a      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801257c:	4b37      	ldr	r3, [pc, #220]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801257e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	711a      	strb	r2, [r3, #4]
            break;
 8012586:	e064      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012588:	4b34      	ldr	r3, [pc, #208]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801258a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	711a      	strb	r2, [r3, #4]
            break;
 8012592:	e05e      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012594:	4b31      	ldr	r3, [pc, #196]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012596:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	711a      	strb	r2, [r3, #4]
            break;
 801259e:	e058      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80125a0:	4b2e      	ldr	r3, [pc, #184]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80125a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	605a      	str	r2, [r3, #4]
            break;
 80125a8:	e053      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80125aa:	4b2c      	ldr	r3, [pc, #176]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80125ac:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	711a      	strb	r2, [r3, #4]
            break;
 80125b4:	e04d      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80125b6:	4b29      	ldr	r3, [pc, #164]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80125b8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	605a      	str	r2, [r3, #4]
            break;
 80125c0:	e047      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	4a25      	ldr	r2, [pc, #148]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80125c6:	605a      	str	r2, [r3, #4]
            break;
 80125c8:	e043      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	4a24      	ldr	r2, [pc, #144]	@ (8012660 <LoRaMacMibGetRequestConfirm+0x3ac>)
 80125ce:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 80125d0:	e03f      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80125d2:	4b22      	ldr	r3, [pc, #136]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80125d4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	605a      	str	r2, [r3, #4]
            break;
 80125dc:	e039      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4a1e      	ldr	r2, [pc, #120]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80125e2:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 80125e6:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80125e8:	687c      	ldr	r4, [r7, #4]
 80125ea:	f003 f95d 	bl	80158a8 <RegionGetVersion>
 80125ee:	60a0      	str	r0, [r4, #8]
            break;
 80125f0:	e02f      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80125f2:	4b1a      	ldr	r3, [pc, #104]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80125f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	605a      	str	r2, [r3, #4]
            break;
 80125fc:	e029      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80125fe:	4b17      	ldr	r3, [pc, #92]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012600:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	711a      	strb	r2, [r3, #4]
            break;
 8012608:	e023      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801260a:	4b14      	ldr	r3, [pc, #80]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801260c:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	809a      	strh	r2, [r3, #4]
            break;
 8012614:	e01d      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012616:	4b11      	ldr	r3, [pc, #68]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012618:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	809a      	strh	r2, [r3, #4]
            break;
 8012620:	e017      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8012622:	4b0e      	ldr	r3, [pc, #56]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012624:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	809a      	strh	r2, [r3, #4]
            break;
 801262c:	e011      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801262e:	4b0b      	ldr	r3, [pc, #44]	@ (801265c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012630:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	809a      	strh	r2, [r3, #4]
            break;
 8012638:	e00b      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801263a:	2318      	movs	r3, #24
 801263c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801263e:	e008      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012640:	2318      	movs	r3, #24
 8012642:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012644:	e005      	b.n	8012652 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f001 f883 	bl	8013752 <LoRaMacClassBMibGetRequestConfirm>
 801264c:	4603      	mov	r3, r0
 801264e:	75fb      	strb	r3, [r7, #23]
            break;
 8012650:	bf00      	nop
        }
    }
    return status;
 8012652:	7dfb      	ldrb	r3, [r7, #23]
}
 8012654:	4618      	mov	r0, r3
 8012656:	371c      	adds	r7, #28
 8012658:	46bd      	mov	sp, r7
 801265a:	bd90      	pop	{r4, r7, pc}
 801265c:	20000d04 	.word	0x20000d04
 8012660:	200012c0 	.word	0x200012c0

08012664 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b086      	sub	sp, #24
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801266c:	2300      	movs	r3, #0
 801266e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d101      	bne.n	801267a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012676:	2303      	movs	r3, #3
 8012678:	e39e      	b.n	8012db8 <LoRaMacMibSetRequestConfirm+0x754>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801267a:	4bbd      	ldr	r3, [pc, #756]	@ (8012970 <LoRaMacMibSetRequestConfirm+0x30c>)
 801267c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012680:	f003 0302 	and.w	r3, r3, #2
 8012684:	2b00      	cmp	r3, #0
 8012686:	d001      	beq.n	801268c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012688:	2301      	movs	r3, #1
 801268a:	e395      	b.n	8012db8 <LoRaMacMibSetRequestConfirm+0x754>
    }

    switch( mibSet->Type )
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	2b41      	cmp	r3, #65	@ 0x41
 8012692:	f200 8365 	bhi.w	8012d60 <LoRaMacMibSetRequestConfirm+0x6fc>
 8012696:	a201      	add	r2, pc, #4	@ (adr r2, 801269c <LoRaMacMibSetRequestConfirm+0x38>)
 8012698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801269c:	080127a5 	.word	0x080127a5
 80126a0:	080127b5 	.word	0x080127b5
 80126a4:	080127cf 	.word	0x080127cf
 80126a8:	080127e7 	.word	0x080127e7
 80126ac:	080127ff 	.word	0x080127ff
 80126b0:	0801280b 	.word	0x0801280b
 80126b4:	08012817 	.word	0x08012817
 80126b8:	08012841 	.word	0x08012841
 80126bc:	08012867 	.word	0x08012867
 80126c0:	0801288d 	.word	0x0801288d
 80126c4:	080128b3 	.word	0x080128b3
 80126c8:	080128d9 	.word	0x080128d9
 80126cc:	080128ff 	.word	0x080128ff
 80126d0:	08012925 	.word	0x08012925
 80126d4:	0801294b 	.word	0x0801294b
 80126d8:	08012979 	.word	0x08012979
 80126dc:	08012999 	.word	0x08012999
 80126e0:	08012d61 	.word	0x08012d61
 80126e4:	080129a5 	.word	0x080129a5
 80126e8:	08012a15 	.word	0x08012a15
 80126ec:	08012a55 	.word	0x08012a55
 80126f0:	08012ab7 	.word	0x08012ab7
 80126f4:	08012b27 	.word	0x08012b27
 80126f8:	08012af7 	.word	0x08012af7
 80126fc:	08012b57 	.word	0x08012b57
 8012700:	08012b79 	.word	0x08012b79
 8012704:	08012b83 	.word	0x08012b83
 8012708:	08012b8d 	.word	0x08012b8d
 801270c:	08012b97 	.word	0x08012b97
 8012710:	08012ba1 	.word	0x08012ba1
 8012714:	08012d61 	.word	0x08012d61
 8012718:	08012bab 	.word	0x08012bab
 801271c:	08012bdd 	.word	0x08012bdd
 8012720:	08012c51 	.word	0x08012c51
 8012724:	08012c17 	.word	0x08012c17
 8012728:	08012c83 	.word	0x08012c83
 801272c:	08012ca9 	.word	0x08012ca9
 8012730:	08012cc1 	.word	0x08012cc1
 8012734:	08012ccd 	.word	0x08012ccd
 8012738:	08012cd9 	.word	0x08012cd9
 801273c:	08012d61 	.word	0x08012d61
 8012740:	08012ce3 	.word	0x08012ce3
 8012744:	08012d61 	.word	0x08012d61
 8012748:	08012d61 	.word	0x08012d61
 801274c:	08012d61 	.word	0x08012d61
 8012750:	08012d61 	.word	0x08012d61
 8012754:	08012d61 	.word	0x08012d61
 8012758:	08012d61 	.word	0x08012d61
 801275c:	08012d61 	.word	0x08012d61
 8012760:	08012d61 	.word	0x08012d61
 8012764:	08012d61 	.word	0x08012d61
 8012768:	08012d61 	.word	0x08012d61
 801276c:	08012d61 	.word	0x08012d61
 8012770:	08012d61 	.word	0x08012d61
 8012774:	08012d61 	.word	0x08012d61
 8012778:	08012d61 	.word	0x08012d61
 801277c:	08012d61 	.word	0x08012d61
 8012780:	08012d61 	.word	0x08012d61
 8012784:	08012d0d 	.word	0x08012d0d
 8012788:	08012d19 	.word	0x08012d19
 801278c:	08012d25 	.word	0x08012d25
 8012790:	08012d31 	.word	0x08012d31
 8012794:	08012d3d 	.word	0x08012d3d
 8012798:	08012d49 	.word	0x08012d49
 801279c:	08012d55 	.word	0x08012d55
 80127a0:	08012d5b 	.word	0x08012d5b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	791b      	ldrb	r3, [r3, #4]
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7fd faa5 	bl	800fcf8 <SwitchClass>
 80127ae:	4603      	mov	r3, r0
 80127b0:	75fb      	strb	r3, [r7, #23]
            break;
 80127b2:	e2f6      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	791b      	ldrb	r3, [r3, #4]
 80127b8:	2b02      	cmp	r3, #2
 80127ba:	d005      	beq.n	80127c8 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	791a      	ldrb	r2, [r3, #4]
 80127c0:	4b6c      	ldr	r3, [pc, #432]	@ (8012974 <LoRaMacMibSetRequestConfirm+0x310>)
 80127c2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80127c6:	e2ec      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127c8:	2303      	movs	r3, #3
 80127ca:	75fb      	strb	r3, [r7, #23]
            break;
 80127cc:	e2e9      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	685b      	ldr	r3, [r3, #4]
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fa f87a 	bl	800c8cc <SecureElementSetDevEui>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	f000 82c6 	beq.w	8012d6c <LoRaMacMibSetRequestConfirm+0x708>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127e0:	2303      	movs	r3, #3
 80127e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80127e4:	e2c2      	b.n	8012d6c <LoRaMacMibSetRequestConfirm+0x708>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	685b      	ldr	r3, [r3, #4]
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7fa f89e 	bl	800c92c <SecureElementSetJoinEui>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	f000 82bc 	beq.w	8012d70 <LoRaMacMibSetRequestConfirm+0x70c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127f8:	2303      	movs	r3, #3
 80127fa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80127fc:	e2b8      	b.n	8012d70 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	791a      	ldrb	r2, [r3, #4]
 8012802:	4b5c      	ldr	r3, [pc, #368]	@ (8012974 <LoRaMacMibSetRequestConfirm+0x310>)
 8012804:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8012808:	e2cb      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	4a59      	ldr	r2, [pc, #356]	@ (8012974 <LoRaMacMibSetRequestConfirm+0x310>)
 8012810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8012814:	e2c5      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8012816:	4b57      	ldr	r3, [pc, #348]	@ (8012974 <LoRaMacMibSetRequestConfirm+0x310>)
 8012818:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	4619      	mov	r1, r3
 8012822:	4610      	mov	r0, r2
 8012824:	f7fa f8b2 	bl	800c98c <SecureElementSetDevAddr>
 8012828:	4603      	mov	r3, r0
 801282a:	2b00      	cmp	r3, #0
 801282c:	d002      	beq.n	8012834 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801282e:	2303      	movs	r3, #3
 8012830:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8012832:	e2b6      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	4a4e      	ldr	r2, [pc, #312]	@ (8012974 <LoRaMacMibSetRequestConfirm+0x310>)
 801283a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 801283e:	e2b0      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	685b      	ldr	r3, [r3, #4]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d00b      	beq.n	8012860 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	4619      	mov	r1, r3
 801284e:	2000      	movs	r0, #0
 8012850:	f002 f8c8 	bl	80149e4 <LoRaMacCryptoSetKey>
 8012854:	4603      	mov	r3, r0
 8012856:	2b00      	cmp	r3, #0
 8012858:	f000 828c 	beq.w	8012d74 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801285c:	2311      	movs	r3, #17
 801285e:	e2ab      	b.n	8012db8 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012860:	2303      	movs	r3, #3
 8012862:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012864:	e286      	b.n	8012d74 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d00b      	beq.n	8012886 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	4619      	mov	r1, r3
 8012874:	2001      	movs	r0, #1
 8012876:	f002 f8b5 	bl	80149e4 <LoRaMacCryptoSetKey>
 801287a:	4603      	mov	r3, r0
 801287c:	2b00      	cmp	r3, #0
 801287e:	f000 827b 	beq.w	8012d78 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012882:	2311      	movs	r3, #17
 8012884:	e298      	b.n	8012db8 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012886:	2303      	movs	r3, #3
 8012888:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801288a:	e275      	b.n	8012d78 <LoRaMacMibSetRequestConfirm+0x714>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d00b      	beq.n	80128ac <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	685b      	ldr	r3, [r3, #4]
 8012898:	4619      	mov	r1, r3
 801289a:	2008      	movs	r0, #8
 801289c:	f002 f8a2 	bl	80149e4 <LoRaMacCryptoSetKey>
 80128a0:	4603      	mov	r3, r0
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	f000 826a 	beq.w	8012d7c <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80128a8:	2311      	movs	r3, #17
 80128aa:	e285      	b.n	8012db8 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128ac:	2303      	movs	r3, #3
 80128ae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128b0:	e264      	b.n	8012d7c <LoRaMacMibSetRequestConfirm+0x718>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d00b      	beq.n	80128d2 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	4619      	mov	r1, r3
 80128c0:	2009      	movs	r0, #9
 80128c2:	f002 f88f 	bl	80149e4 <LoRaMacCryptoSetKey>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	f000 8259 	beq.w	8012d80 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80128ce:	2311      	movs	r3, #17
 80128d0:	e272      	b.n	8012db8 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128d2:	2303      	movs	r3, #3
 80128d4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128d6:	e253      	b.n	8012d80 <LoRaMacMibSetRequestConfirm+0x71c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d00b      	beq.n	80128f8 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	4619      	mov	r1, r3
 80128e6:	200c      	movs	r0, #12
 80128e8:	f002 f87c 	bl	80149e4 <LoRaMacCryptoSetKey>
 80128ec:	4603      	mov	r3, r0
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	f000 8248 	beq.w	8012d84 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80128f4:	2311      	movs	r3, #17
 80128f6:	e25f      	b.n	8012db8 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128f8:	2303      	movs	r3, #3
 80128fa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128fc:	e242      	b.n	8012d84 <LoRaMacMibSetRequestConfirm+0x720>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d00b      	beq.n	801291e <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	685b      	ldr	r3, [r3, #4]
 801290a:	4619      	mov	r1, r3
 801290c:	200d      	movs	r0, #13
 801290e:	f002 f869 	bl	80149e4 <LoRaMacCryptoSetKey>
 8012912:	4603      	mov	r3, r0
 8012914:	2b00      	cmp	r3, #0
 8012916:	f000 8237 	beq.w	8012d88 <LoRaMacMibSetRequestConfirm+0x724>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801291a:	2311      	movs	r3, #17
 801291c:	e24c      	b.n	8012db8 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801291e:	2303      	movs	r3, #3
 8012920:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012922:	e231      	b.n	8012d88 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d00b      	beq.n	8012944 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	685b      	ldr	r3, [r3, #4]
 8012930:	4619      	mov	r1, r3
 8012932:	200e      	movs	r0, #14
 8012934:	f002 f856 	bl	80149e4 <LoRaMacCryptoSetKey>
 8012938:	4603      	mov	r3, r0
 801293a:	2b00      	cmp	r3, #0
 801293c:	f000 8226 	beq.w	8012d8c <LoRaMacMibSetRequestConfirm+0x728>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012940:	2311      	movs	r3, #17
 8012942:	e239      	b.n	8012db8 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012944:	2303      	movs	r3, #3
 8012946:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012948:	e220      	b.n	8012d8c <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	685b      	ldr	r3, [r3, #4]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d00b      	beq.n	801296a <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	4619      	mov	r1, r3
 8012958:	200f      	movs	r0, #15
 801295a:	f002 f843 	bl	80149e4 <LoRaMacCryptoSetKey>
 801295e:	4603      	mov	r3, r0
 8012960:	2b00      	cmp	r3, #0
 8012962:	f000 8215 	beq.w	8012d90 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012966:	2311      	movs	r3, #17
 8012968:	e226      	b.n	8012db8 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801296a:	2303      	movs	r3, #3
 801296c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801296e:	e20f      	b.n	8012d90 <LoRaMacMibSetRequestConfirm+0x72c>
 8012970:	200007d0 	.word	0x200007d0
 8012974:	20000d04 	.word	0x20000d04
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	791a      	ldrb	r2, [r3, #4]
 801297c:	4bb2      	ldr	r3, [pc, #712]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801297e:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012982:	4bb2      	ldr	r3, [pc, #712]	@ (8012c4c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8012984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012986:	4ab0      	ldr	r2, [pc, #704]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012988:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 801298c:	4610      	mov	r0, r2
 801298e:	4798      	blx	r3
            Radio.Sleep( );
 8012990:	4bae      	ldr	r3, [pc, #696]	@ (8012c4c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8012992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012994:	4798      	blx	r3
            break;
 8012996:	e204      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	791a      	ldrb	r2, [r3, #4]
 801299c:	4baa      	ldr	r3, [pc, #680]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801299e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 80129a2:	e1fe      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	7a1b      	ldrb	r3, [r3, #8]
 80129a8:	b25b      	sxtb	r3, r3
 80129aa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80129ac:	4ba6      	ldr	r3, [pc, #664]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129ae:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80129b2:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80129b4:	4ba4      	ldr	r3, [pc, #656]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129b6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80129ba:	f107 0108 	add.w	r1, r7, #8
 80129be:	2207      	movs	r2, #7
 80129c0:	4618      	mov	r0, r3
 80129c2:	f002 fe36 	bl	8015632 <RegionVerify>
 80129c6:	4603      	mov	r3, r0
 80129c8:	f083 0301 	eor.w	r3, r3, #1
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d002      	beq.n	80129d8 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129d2:	2303      	movs	r3, #3
 80129d4:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 80129d6:	e1e4      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	685b      	ldr	r3, [r3, #4]
 80129dc:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80129de:	4b9a      	ldr	r3, [pc, #616]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129e0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80129e4:	f107 0108 	add.w	r1, r7, #8
 80129e8:	2200      	movs	r2, #0
 80129ea:	4618      	mov	r0, r3
 80129ec:	f002 fe21 	bl	8015632 <RegionVerify>
 80129f0:	4603      	mov	r3, r0
 80129f2:	f083 0301 	eor.w	r3, r3, #1
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d002      	beq.n	8012a02 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129fc:	2303      	movs	r3, #3
 80129fe:	75fb      	strb	r3, [r7, #23]
            break;
 8012a00:	e1cf      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8012a02:	4b91      	ldr	r3, [pc, #580]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a04:	687a      	ldr	r2, [r7, #4]
 8012a06:	336c      	adds	r3, #108	@ 0x6c
 8012a08:	3204      	adds	r2, #4
 8012a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a0e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012a12:	e1c6      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	7a1b      	ldrb	r3, [r3, #8]
 8012a18:	b25b      	sxtb	r3, r3
 8012a1a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012a1c:	4b8a      	ldr	r3, [pc, #552]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a1e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8012a22:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012a24:	4b88      	ldr	r3, [pc, #544]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a26:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012a2a:	f107 0108 	add.w	r1, r7, #8
 8012a2e:	2207      	movs	r2, #7
 8012a30:	4618      	mov	r0, r3
 8012a32:	f002 fdfe 	bl	8015632 <RegionVerify>
 8012a36:	4603      	mov	r3, r0
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d008      	beq.n	8012a4e <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012a3c:	4b82      	ldr	r3, [pc, #520]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a3e:	687a      	ldr	r2, [r7, #4]
 8012a40:	33b4      	adds	r3, #180	@ 0xb4
 8012a42:	3204      	adds	r2, #4
 8012a44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a48:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a4c:	e1a9      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a4e:	2303      	movs	r3, #3
 8012a50:	75fb      	strb	r3, [r7, #23]
            break;
 8012a52:	e1a6      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	7a1b      	ldrb	r3, [r3, #8]
 8012a58:	b25b      	sxtb	r3, r3
 8012a5a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012a5c:	4b7a      	ldr	r3, [pc, #488]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a5e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8012a62:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012a64:	4b78      	ldr	r3, [pc, #480]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a66:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012a6a:	f107 0108 	add.w	r1, r7, #8
 8012a6e:	2207      	movs	r2, #7
 8012a70:	4618      	mov	r0, r3
 8012a72:	f002 fdde 	bl	8015632 <RegionVerify>
 8012a76:	4603      	mov	r3, r0
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d019      	beq.n	8012ab0 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8012a7c:	4b72      	ldr	r3, [pc, #456]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a7e:	687a      	ldr	r2, [r7, #4]
 8012a80:	3374      	adds	r3, #116	@ 0x74
 8012a82:	3204      	adds	r2, #4
 8012a84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a88:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8012a8c:	4b6e      	ldr	r3, [pc, #440]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a8e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8012a92:	2b02      	cmp	r3, #2
 8012a94:	f040 817e 	bne.w	8012d94 <LoRaMacMibSetRequestConfirm+0x730>
 8012a98:	4b6b      	ldr	r3, [pc, #428]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a9a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	f000 8178 	beq.w	8012d94 <LoRaMacMibSetRequestConfirm+0x730>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012aa4:	4b69      	ldr	r3, [pc, #420]	@ (8012c4c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8012aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012aa8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8012aaa:	f7fe fc1d 	bl	80112e8 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012aae:	e171      	b.n	8012d94 <LoRaMacMibSetRequestConfirm+0x730>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ab0:	2303      	movs	r3, #3
 8012ab2:	75fb      	strb	r3, [r7, #23]
            break;
 8012ab4:	e16e      	b.n	8012d94 <LoRaMacMibSetRequestConfirm+0x730>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	7a1b      	ldrb	r3, [r3, #8]
 8012aba:	b25b      	sxtb	r3, r3
 8012abc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012abe:	4b62      	ldr	r3, [pc, #392]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012ac0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8012ac4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012ac6:	4b60      	ldr	r3, [pc, #384]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012ac8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012acc:	f107 0108 	add.w	r1, r7, #8
 8012ad0:	2207      	movs	r2, #7
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f002 fdad 	bl	8015632 <RegionVerify>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d008      	beq.n	8012af0 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8012ade:	4b5a      	ldr	r3, [pc, #360]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012ae0:	687a      	ldr	r2, [r7, #4]
 8012ae2:	33bc      	adds	r3, #188	@ 0xbc
 8012ae4:	3204      	adds	r2, #4
 8012ae6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012aea:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012aee:	e158      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012af0:	2303      	movs	r3, #3
 8012af2:	75fb      	strb	r3, [r7, #23]
            break;
 8012af4:	e155      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012afc:	2301      	movs	r3, #1
 8012afe:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012b00:	4b51      	ldr	r3, [pc, #324]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012b02:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012b06:	f107 020c 	add.w	r2, r7, #12
 8012b0a:	4611      	mov	r1, r2
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f002 fdb9 	bl	8015684 <RegionChanMaskSet>
 8012b12:	4603      	mov	r3, r0
 8012b14:	f083 0301 	eor.w	r3, r3, #1
 8012b18:	b2db      	uxtb	r3, r3
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f000 813c 	beq.w	8012d98 <LoRaMacMibSetRequestConfirm+0x734>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b20:	2303      	movs	r3, #3
 8012b22:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b24:	e138      	b.n	8012d98 <LoRaMacMibSetRequestConfirm+0x734>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012b30:	4b45      	ldr	r3, [pc, #276]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012b32:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012b36:	f107 020c 	add.w	r2, r7, #12
 8012b3a:	4611      	mov	r1, r2
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f002 fda1 	bl	8015684 <RegionChanMaskSet>
 8012b42:	4603      	mov	r3, r0
 8012b44:	f083 0301 	eor.w	r3, r3, #1
 8012b48:	b2db      	uxtb	r3, r3
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	f000 8126 	beq.w	8012d9c <LoRaMacMibSetRequestConfirm+0x738>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b50:	2303      	movs	r3, #3
 8012b52:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b54:	e122      	b.n	8012d9c <LoRaMacMibSetRequestConfirm+0x738>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	791b      	ldrb	r3, [r3, #4]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d009      	beq.n	8012b72 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012b62:	2b0f      	cmp	r3, #15
 8012b64:	d805      	bhi.n	8012b72 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	791a      	ldrb	r2, [r3, #4]
 8012b6a:	4b37      	ldr	r3, [pc, #220]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012b6c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012b70:	e117      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b72:	2303      	movs	r3, #3
 8012b74:	75fb      	strb	r3, [r7, #23]
            break;
 8012b76:	e114      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	685b      	ldr	r3, [r3, #4]
 8012b7c:	4a32      	ldr	r2, [pc, #200]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012b7e:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8012b80:	e10f      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	4a30      	ldr	r2, [pc, #192]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012b88:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8012b8a:	e10a      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	4a2d      	ldr	r2, [pc, #180]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012b92:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8012b94:	e105      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	4a2b      	ldr	r2, [pc, #172]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012b9c:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 8012b9e:	e100      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	685b      	ldr	r3, [r3, #4]
 8012ba4:	4a28      	ldr	r2, [pc, #160]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012ba6:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8012ba8:	e0fb      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012bb0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8012bb2:	4b25      	ldr	r3, [pc, #148]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012bb4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012bb8:	f107 0108 	add.w	r1, r7, #8
 8012bbc:	2206      	movs	r2, #6
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f002 fd37 	bl	8015632 <RegionVerify>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d005      	beq.n	8012bd6 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8012bca:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012bce:	4b1e      	ldr	r3, [pc, #120]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012bd0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012bd4:	e0e5      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012bd6:	2303      	movs	r3, #3
 8012bd8:	75fb      	strb	r3, [r7, #23]
            break;
 8012bda:	e0e2      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012be2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012be4:	4b18      	ldr	r3, [pc, #96]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012be6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012bea:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012bec:	4b16      	ldr	r3, [pc, #88]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012bee:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012bf2:	f107 0108 	add.w	r1, r7, #8
 8012bf6:	2205      	movs	r2, #5
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f002 fd1a 	bl	8015632 <RegionVerify>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d005      	beq.n	8012c10 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012c04:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012c08:	4b0f      	ldr	r3, [pc, #60]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012c0a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012c0e:	e0c8      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c10:	2303      	movs	r3, #3
 8012c12:	75fb      	strb	r3, [r7, #23]
            break;
 8012c14:	e0c5      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012c1c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012c20:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012c24:	f107 0108 	add.w	r1, r7, #8
 8012c28:	220a      	movs	r2, #10
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f002 fd01 	bl	8015632 <RegionVerify>
 8012c30:	4603      	mov	r3, r0
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d005      	beq.n	8012c42 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012c36:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012c3a:	4b03      	ldr	r3, [pc, #12]	@ (8012c48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012c3c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012c40:	e0af      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c42:	2303      	movs	r3, #3
 8012c44:	75fb      	strb	r3, [r7, #23]
            break;
 8012c46:	e0ac      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
 8012c48:	20000d04 	.word	0x20000d04
 8012c4c:	0801d50c 	.word	0x0801d50c
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012c56:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012c58:	4b59      	ldr	r3, [pc, #356]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012c5a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012c5e:	f107 0108 	add.w	r1, r7, #8
 8012c62:	2209      	movs	r2, #9
 8012c64:	4618      	mov	r0, r3
 8012c66:	f002 fce4 	bl	8015632 <RegionVerify>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d005      	beq.n	8012c7c <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012c70:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012c74:	4b52      	ldr	r3, [pc, #328]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012c76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012c7a:	e092      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c7c:	2303      	movs	r3, #3
 8012c7e:	75fb      	strb	r3, [r7, #23]
            break;
 8012c80:	e08f      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mibSet->Param.SystemMaxRxError <= 500 )
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8012c8a:	d80a      	bhi.n	8012ca2 <LoRaMacMibSetRequestConfirm+0x63e>
            { // Only apply the new value if in range 0..500 ms else keep current value.
                Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	4a4b      	ldr	r2, [pc, #300]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012c92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8012c96:	4b4a      	ldr	r3, [pc, #296]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012c9c:	4a48      	ldr	r2, [pc, #288]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
#else
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
#endif
            break;
 8012ca0:	e07f      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ca2:	2303      	movs	r3, #3
 8012ca4:	75fb      	strb	r3, [r7, #23]
            break;
 8012ca6:	e07c      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	791a      	ldrb	r2, [r3, #4]
 8012cac:	4b44      	ldr	r3, [pc, #272]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012cae:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 8012cb2:	4b43      	ldr	r3, [pc, #268]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012cb4:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8012cb8:	4b41      	ldr	r3, [pc, #260]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 8012cbe:	e070      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	4a3e      	ldr	r2, [pc, #248]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012cc6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8012cca:	e06a      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	4a3b      	ldr	r2, [pc, #236]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012cd2:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 8012cd6:	e064      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012cd8:	f7fe fd38 	bl	801174c <RestoreNvmData>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	75fb      	strb	r3, [r7, #23]
            break;
 8012ce0:	e05f      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	799b      	ldrb	r3, [r3, #6]
 8012ce6:	2b01      	cmp	r3, #1
 8012ce8:	d80d      	bhi.n	8012d06 <LoRaMacMibSetRequestConfirm+0x6a2>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012cea:	4a35      	ldr	r2, [pc, #212]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6858      	ldr	r0, [r3, #4]
 8012cf8:	f001 fdd6 	bl	80148a8 <LoRaMacCryptoSetLrWanVersion>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d04e      	beq.n	8012da0 <LoRaMacMibSetRequestConfirm+0x73c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012d02:	2311      	movs	r3, #17
 8012d04:	e058      	b.n	8012db8 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d06:	2303      	movs	r3, #3
 8012d08:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012d0a:	e049      	b.n	8012da0 <LoRaMacMibSetRequestConfirm+0x73c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	685b      	ldr	r3, [r3, #4]
 8012d10:	4a2b      	ldr	r2, [pc, #172]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012d12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 8012d16:	e044      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	791a      	ldrb	r2, [r3, #4]
 8012d1c:	4b28      	ldr	r3, [pc, #160]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012d1e:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 8012d22:	e03e      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	889a      	ldrh	r2, [r3, #4]
 8012d28:	4b25      	ldr	r3, [pc, #148]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012d2a:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 8012d2e:	e038      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	889a      	ldrh	r2, [r3, #4]
 8012d34:	4b22      	ldr	r3, [pc, #136]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012d36:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 8012d3a:	e032      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	889a      	ldrh	r2, [r3, #4]
 8012d40:	4b1f      	ldr	r3, [pc, #124]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012d42:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 8012d46:	e02c      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	889a      	ldrh	r2, [r3, #4]
 8012d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8012dc0 <LoRaMacMibSetRequestConfirm+0x75c>)
 8012d4e:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 8012d52:	e026      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012d54:	2318      	movs	r3, #24
 8012d56:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012d58:	e023      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012d5a:	2318      	movs	r3, #24
 8012d5c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012d5e:	e020      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f000 fd00 	bl	8013766 <LoRaMacMibClassBSetRequestConfirm>
 8012d66:	4603      	mov	r3, r0
 8012d68:	75fb      	strb	r3, [r7, #23]
            break;
 8012d6a:	e01a      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d6c:	bf00      	nop
 8012d6e:	e018      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d70:	bf00      	nop
 8012d72:	e016      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d74:	bf00      	nop
 8012d76:	e014      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d78:	bf00      	nop
 8012d7a:	e012      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d7c:	bf00      	nop
 8012d7e:	e010      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d80:	bf00      	nop
 8012d82:	e00e      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d84:	bf00      	nop
 8012d86:	e00c      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d88:	bf00      	nop
 8012d8a:	e00a      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d8c:	bf00      	nop
 8012d8e:	e008      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d90:	bf00      	nop
 8012d92:	e006      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d94:	bf00      	nop
 8012d96:	e004      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d98:	bf00      	nop
 8012d9a:	e002      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012d9c:	bf00      	nop
 8012d9e:	e000      	b.n	8012da2 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8012da0:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8012da2:	7dfb      	ldrb	r3, [r7, #23]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d106      	bne.n	8012db6 <LoRaMacMibSetRequestConfirm+0x752>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012da8:	4a06      	ldr	r2, [pc, #24]	@ (8012dc4 <LoRaMacMibSetRequestConfirm+0x760>)
 8012daa:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8012dae:	f043 0320 	orr.w	r3, r3, #32
 8012db2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	3718      	adds	r7, #24
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}
 8012dc0:	20000d04 	.word	0x20000d04
 8012dc4:	200007d0 	.word	0x200007d0

08012dc8 <OnAbpJoinPendingTimerEvent>:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
/*!
 * \brief Function executed on AbpJoinPendingTimer timer event
 */
static void OnAbpJoinPendingTimerEvent( void *context )
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b082      	sub	sp, #8
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
    MacCtx.MacState &= ~LORAMAC_ABP_JOIN_PENDING;
 8012dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8012dfc <OnAbpJoinPendingTimerEvent+0x34>)
 8012dd2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012dd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012dda:	4a08      	ldr	r2, [pc, #32]	@ (8012dfc <OnAbpJoinPendingTimerEvent+0x34>)
 8012ddc:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    MacCtx.MacFlags.Bits.MacDone = 1;
 8012de0:	4a06      	ldr	r2, [pc, #24]	@ (8012dfc <OnAbpJoinPendingTimerEvent+0x34>)
 8012de2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8012de6:	f043 0310 	orr.w	r3, r3, #16
 8012dea:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    OnMacProcessNotify( );
 8012dee:	f7fe fe5d 	bl	8011aac <OnMacProcessNotify>
}
 8012df2:	bf00      	nop
 8012df4:	3708      	adds	r7, #8
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
 8012dfa:	bf00      	nop
 8012dfc:	200007d0 	.word	0x200007d0

08012e00 <AbpJoinPendingStart>:

/*!
 * \brief Start ABP join simulation
 */
static void AbpJoinPendingStart( void )
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b082      	sub	sp, #8
 8012e04:	af02      	add	r7, sp, #8
    static bool initialized = false;

    if( initialized == false )
 8012e06:	4b14      	ldr	r3, [pc, #80]	@ (8012e58 <AbpJoinPendingStart+0x58>)
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	f083 0301 	eor.w	r3, r3, #1
 8012e0e:	b2db      	uxtb	r3, r3
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d00b      	beq.n	8012e2c <AbpJoinPendingStart+0x2c>
    {
        initialized = true;
 8012e14:	4b10      	ldr	r3, [pc, #64]	@ (8012e58 <AbpJoinPendingStart+0x58>)
 8012e16:	2201      	movs	r2, #1
 8012e18:	701a      	strb	r2, [r3, #0]
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	9300      	str	r3, [sp, #0]
 8012e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8012e5c <AbpJoinPendingStart+0x5c>)
 8012e20:	2200      	movs	r2, #0
 8012e22:	f04f 31ff 	mov.w	r1, #4294967295
 8012e26:	480e      	ldr	r0, [pc, #56]	@ (8012e60 <AbpJoinPendingStart+0x60>)
 8012e28:	f008 fea2 	bl	801bb70 <UTIL_TIMER_Create>
    }

    MacCtx.MacState |= LORAMAC_ABP_JOIN_PENDING;
 8012e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8012e64 <AbpJoinPendingStart+0x64>)
 8012e2e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012e36:	4a0b      	ldr	r2, [pc, #44]	@ (8012e64 <AbpJoinPendingStart+0x64>)
 8012e38:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    TimerStop( &MacCtx.AbpJoinPendingTimer );
 8012e3c:	4808      	ldr	r0, [pc, #32]	@ (8012e60 <AbpJoinPendingStart+0x60>)
 8012e3e:	f008 ff3b 	bl	801bcb8 <UTIL_TIMER_Stop>
    TimerSetValue( &MacCtx.AbpJoinPendingTimer, ABP_JOIN_PENDING_DELAY_MS );
 8012e42:	210a      	movs	r1, #10
 8012e44:	4806      	ldr	r0, [pc, #24]	@ (8012e60 <AbpJoinPendingStart+0x60>)
 8012e46:	f008 ffa7 	bl	801bd98 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.AbpJoinPendingTimer );
 8012e4a:	4805      	ldr	r0, [pc, #20]	@ (8012e60 <AbpJoinPendingStart+0x60>)
 8012e4c:	f008 fec6 	bl	801bbdc <UTIL_TIMER_Start>
}
 8012e50:	bf00      	nop
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	20001924 	.word	0x20001924
 8012e5c:	08012dc9 	.word	0x08012dc9
 8012e60:	20000c6c 	.word	0x20000c6c
 8012e64:	200007d0 	.word	0x200007d0

08012e68 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b08a      	sub	sp, #40	@ 0x28
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012e70:	2302      	movs	r3, #2
 8012e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
 8012e76:	2300      	movs	r3, #0
 8012e78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d101      	bne.n	8012e8a <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e86:	2303      	movs	r3, #3
 8012e88:	e188      	b.n	801319c <LoRaMacMlmeRequest+0x334>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8012e90:	f7fc fb14 	bl	800f4bc <LoRaMacIsBusy>
 8012e94:	4603      	mov	r3, r0
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d001      	beq.n	8012e9e <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	e17e      	b.n	801319c <LoRaMacMlmeRequest+0x334>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012e9e:	f001 f99d 	bl	80141dc <LoRaMacConfirmQueueIsFull>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d001      	beq.n	8012eac <LoRaMacMlmeRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	e177      	b.n	801319c <LoRaMacMlmeRequest+0x334>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012eac:	f001 f98a 	bl	80141c4 <LoRaMacConfirmQueueGetCnt>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d104      	bne.n	8012ec0 <LoRaMacMlmeRequest+0x58>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012eb6:	2214      	movs	r2, #20
 8012eb8:	2100      	movs	r1, #0
 8012eba:	48ba      	ldr	r0, [pc, #744]	@ (80131a4 <LoRaMacMlmeRequest+0x33c>)
 8012ebc:	f004 fde4 	bl	8017a88 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012ec0:	4bb9      	ldr	r3, [pc, #740]	@ (80131a8 <LoRaMacMlmeRequest+0x340>)
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012ec8:	4ab7      	ldr	r2, [pc, #732]	@ (80131a8 <LoRaMacMlmeRequest+0x340>)
 8012eca:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8012ece:	f043 0304 	orr.w	r3, r3, #4
 8012ed2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012ede:	2301      	movs	r3, #1
 8012ee0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8012eea:	2300      	movs	r3, #0
 8012eec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	3b01      	subs	r3, #1
 8012ef6:	2b0c      	cmp	r3, #12
 8012ef8:	f200 811e 	bhi.w	8013138 <LoRaMacMlmeRequest+0x2d0>
 8012efc:	a201      	add	r2, pc, #4	@ (adr r2, 8012f04 <LoRaMacMlmeRequest+0x9c>)
 8012efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f02:	bf00      	nop
 8012f04:	08012f39 	.word	0x08012f39
 8012f08:	08013139 	.word	0x08013139
 8012f0c:	08013139 	.word	0x08013139
 8012f10:	08013139 	.word	0x08013139
 8012f14:	0801301d 	.word	0x0801301d
 8012f18:	08013041 	.word	0x08013041
 8012f1c:	08013139 	.word	0x08013139
 8012f20:	08013139 	.word	0x08013139
 8012f24:	0801305f 	.word	0x0801305f
 8012f28:	08013139 	.word	0x08013139
 8012f2c:	08013107 	.word	0x08013107
 8012f30:	0801309b 	.word	0x0801309b
 8012f34:	080130e5 	.word	0x080130e5
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012f38:	4b9b      	ldr	r3, [pc, #620]	@ (80131a8 <LoRaMacMlmeRequest+0x340>)
 8012f3a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012f3e:	f003 0320 	and.w	r3, r3, #32
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d001      	beq.n	8012f4a <LoRaMacMlmeRequest+0xe2>
            {
                return LORAMAC_STATUS_BUSY;
 8012f46:	2301      	movs	r3, #1
 8012f48:	e128      	b.n	801319c <LoRaMacMlmeRequest+0x334>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	791b      	ldrb	r3, [r3, #4]
 8012f4e:	2b02      	cmp	r3, #2
 8012f50:	d135      	bne.n	8012fbe <LoRaMacMlmeRequest+0x156>
            {
                ResetMacParameters( false );
 8012f52:	2000      	movs	r0, #0
 8012f54:	f7fe f85a 	bl	801100c <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012f58:	4b94      	ldr	r3, [pc, #592]	@ (80131ac <LoRaMacMlmeRequest+0x344>)
 8012f5a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	795b      	ldrb	r3, [r3, #5]
 8012f62:	b25b      	sxtb	r3, r3
 8012f64:	2200      	movs	r2, #0
 8012f66:	4619      	mov	r1, r3
 8012f68:	f002 fc4b 	bl	8015802 <RegionAlternateDr>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	461a      	mov	r2, r3
 8012f70:	4b8e      	ldr	r3, [pc, #568]	@ (80131ac <LoRaMacMlmeRequest+0x344>)
 8012f72:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8012f7c:	4b8b      	ldr	r3, [pc, #556]	@ (80131ac <LoRaMacMlmeRequest+0x344>)
 8012f7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012f82:	2307      	movs	r3, #7
 8012f84:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8012f88:	20ff      	movs	r0, #255	@ 0xff
 8012f8a:	f7fd fdc3 	bl	8010b14 <SendReJoinReq>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8012f94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	f000 80cf 	beq.w	801313c <LoRaMacMlmeRequest+0x2d4>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012f9e:	4b83      	ldr	r3, [pc, #524]	@ (80131ac <LoRaMacMlmeRequest+0x344>)
 8012fa0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	795b      	ldrb	r3, [r3, #5]
 8012fa8:	b25b      	sxtb	r3, r3
 8012faa:	2201      	movs	r2, #1
 8012fac:	4619      	mov	r1, r3
 8012fae:	f002 fc28 	bl	8015802 <RegionAlternateDr>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80131ac <LoRaMacMlmeRequest+0x344>)
 8012fb8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                isAbpJoinPending = true;
#endif
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8012fbc:	e0be      	b.n	801313c <LoRaMacMlmeRequest+0x2d4>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	791b      	ldrb	r3, [r3, #4]
 8012fc2:	2b01      	cmp	r3, #1
 8012fc4:	f040 80ba 	bne.w	801313c <LoRaMacMlmeRequest+0x2d4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012fc8:	4b78      	ldr	r3, [pc, #480]	@ (80131ac <LoRaMacMlmeRequest+0x344>)
 8012fca:	2200      	movs	r2, #0
 8012fcc:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012fd0:	2302      	movs	r3, #2
 8012fd2:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012fd4:	4b75      	ldr	r3, [pc, #468]	@ (80131ac <LoRaMacMlmeRequest+0x344>)
 8012fd6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012fda:	f107 020c 	add.w	r2, r7, #12
 8012fde:	4611      	mov	r1, r2
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f002 fb14 	bl	801560e <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	791a      	ldrb	r2, [r3, #4]
 8012fea:	4b70      	ldr	r3, [pc, #448]	@ (80131ac <LoRaMacMlmeRequest+0x344>)
 8012fec:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 8012ffc:	f7fe fd56 	bl	8011aac <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8013000:	4a69      	ldr	r2, [pc, #420]	@ (80131a8 <LoRaMacMlmeRequest+0x340>)
 8013002:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013006:	f043 0310 	orr.w	r3, r3, #16
 801300a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                isAbpJoinPending = true;
 801300e:	2301      	movs	r3, #1
 8013010:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                status = LORAMAC_STATUS_OK;
 8013014:	2300      	movs	r3, #0
 8013016:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801301a:	e08f      	b.n	801313c <LoRaMacMlmeRequest+0x2d4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801301c:	2300      	movs	r3, #0
 801301e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013022:	f107 031c 	add.w	r3, r7, #28
 8013026:	2200      	movs	r2, #0
 8013028:	4619      	mov	r1, r3
 801302a:	2002      	movs	r0, #2
 801302c:	f000 fd26 	bl	8013a7c <LoRaMacCommandsAddCmd>
 8013030:	4603      	mov	r3, r0
 8013032:	2b00      	cmp	r3, #0
 8013034:	f000 8084 	beq.w	8013140 <LoRaMacMlmeRequest+0x2d8>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013038:	2313      	movs	r3, #19
 801303a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801303e:	e07f      	b.n	8013140 <LoRaMacMlmeRequest+0x2d8>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	8898      	ldrh	r0, [r3, #4]
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6899      	ldr	r1, [r3, #8]
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801304e:	b2db      	uxtb	r3, r3
 8013050:	461a      	mov	r2, r3
 8013052:	f7fe fb5b 	bl	801170c <SetTxContinuousWave>
 8013056:	4603      	mov	r3, r0
 8013058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801305c:	e077      	b.n	801314e <LoRaMacMlmeRequest+0x2e6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801305e:	2300      	movs	r3, #0
 8013060:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8013064:	f107 0308 	add.w	r3, r7, #8
 8013068:	4619      	mov	r1, r3
 801306a:	200d      	movs	r0, #13
 801306c:	f000 fd86 	bl	8013b7c <LoRaMacCommandsGetCmd>
 8013070:	4603      	mov	r3, r0
 8013072:	2b00      	cmp	r3, #0
 8013074:	d103      	bne.n	801307e <LoRaMacMlmeRequest+0x216>
            {
                status = LORAMAC_STATUS_OK;
 8013076:	2300      	movs	r3, #0
 8013078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 801307c:	e062      	b.n	8013144 <LoRaMacMlmeRequest+0x2dc>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801307e:	f107 031c 	add.w	r3, r7, #28
 8013082:	2200      	movs	r2, #0
 8013084:	4619      	mov	r1, r3
 8013086:	200d      	movs	r0, #13
 8013088:	f000 fcf8 	bl	8013a7c <LoRaMacCommandsAddCmd>
 801308c:	4603      	mov	r3, r0
 801308e:	2b00      	cmp	r3, #0
 8013090:	d058      	beq.n	8013144 <LoRaMacMlmeRequest+0x2dc>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013092:	2313      	movs	r3, #19
 8013094:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013098:	e054      	b.n	8013144 <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801309a:	4b44      	ldr	r3, [pc, #272]	@ (80131ac <LoRaMacMlmeRequest+0x344>)
 801309c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d151      	bne.n	8013148 <LoRaMacMlmeRequest+0x2e0>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	791b      	ldrb	r3, [r3, #4]
 80130a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	791b      	ldrb	r3, [r3, #4]
 80130b0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80130b4:	b2db      	uxtb	r3, r3
 80130b6:	4618      	mov	r0, r3
 80130b8:	f000 fb2a 	bl	8013710 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80130bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80130c0:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80130c2:	2300      	movs	r3, #0
 80130c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80130c8:	f107 031c 	add.w	r3, r7, #28
 80130cc:	2201      	movs	r2, #1
 80130ce:	4619      	mov	r1, r3
 80130d0:	2010      	movs	r0, #16
 80130d2:	f000 fcd3 	bl	8013a7c <LoRaMacCommandsAddCmd>
 80130d6:	4603      	mov	r3, r0
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d035      	beq.n	8013148 <LoRaMacMlmeRequest+0x2e0>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80130dc:	2313      	movs	r3, #19
 80130de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 80130e2:	e031      	b.n	8013148 <LoRaMacMlmeRequest+0x2e0>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80130e4:	2300      	movs	r3, #0
 80130e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80130ea:	f107 031c 	add.w	r3, r7, #28
 80130ee:	2200      	movs	r2, #0
 80130f0:	4619      	mov	r1, r3
 80130f2:	2012      	movs	r0, #18
 80130f4:	f000 fcc2 	bl	8013a7c <LoRaMacCommandsAddCmd>
 80130f8:	4603      	mov	r3, r0
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d026      	beq.n	801314c <LoRaMacMlmeRequest+0x2e4>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80130fe:	2313      	movs	r3, #19
 8013100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8013104:	e022      	b.n	801314c <LoRaMacMlmeRequest+0x2e4>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8013106:	2301      	movs	r3, #1
 8013108:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 801310c:	f000 fab6 	bl	801367c <LoRaMacClassBIsAcquisitionInProgress>
 8013110:	4603      	mov	r3, r0
 8013112:	f083 0301 	eor.w	r3, r3, #1
 8013116:	b2db      	uxtb	r3, r3
 8013118:	2b00      	cmp	r3, #0
 801311a:	d009      	beq.n	8013130 <LoRaMacMlmeRequest+0x2c8>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 801311c:	2000      	movs	r0, #0
 801311e:	f000 fa8f 	bl	8013640 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013122:	2000      	movs	r0, #0
 8013124:	f000 fab1 	bl	801368a <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013128:	2300      	movs	r3, #0
 801312a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 801312e:	e00e      	b.n	801314e <LoRaMacMlmeRequest+0x2e6>
                status = LORAMAC_STATUS_BUSY;
 8013130:	2301      	movs	r3, #1
 8013132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013136:	e00a      	b.n	801314e <LoRaMacMlmeRequest+0x2e6>
        }
        default:
            break;
 8013138:	bf00      	nop
 801313a:	e008      	b.n	801314e <LoRaMacMlmeRequest+0x2e6>
            break;
 801313c:	bf00      	nop
 801313e:	e006      	b.n	801314e <LoRaMacMlmeRequest+0x2e6>
            break;
 8013140:	bf00      	nop
 8013142:	e004      	b.n	801314e <LoRaMacMlmeRequest+0x2e6>
            break;
 8013144:	bf00      	nop
 8013146:	e002      	b.n	801314e <LoRaMacMlmeRequest+0x2e6>
            break;
 8013148:	bf00      	nop
 801314a:	e000      	b.n	801314e <LoRaMacMlmeRequest+0x2e6>
            break;
 801314c:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801314e:	4b16      	ldr	r3, [pc, #88]	@ (80131a8 <LoRaMacMlmeRequest+0x340>)
 8013150:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8013158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801315c:	2b00      	cmp	r3, #0
 801315e:	d010      	beq.n	8013182 <LoRaMacMlmeRequest+0x31a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013160:	f001 f830 	bl	80141c4 <LoRaMacConfirmQueueGetCnt>
 8013164:	4603      	mov	r3, r0
 8013166:	2b00      	cmp	r3, #0
 8013168:	d116      	bne.n	8013198 <LoRaMacMlmeRequest+0x330>
        {
            MacCtx.NodeAckRequested = false;
 801316a:	4b0f      	ldr	r3, [pc, #60]	@ (80131a8 <LoRaMacMlmeRequest+0x340>)
 801316c:	2200      	movs	r2, #0
 801316e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013172:	4a0d      	ldr	r2, [pc, #52]	@ (80131a8 <LoRaMacMlmeRequest+0x340>)
 8013174:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013178:	f023 0304 	bic.w	r3, r3, #4
 801317c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8013180:	e00a      	b.n	8013198 <LoRaMacMlmeRequest+0x330>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8013182:	f107 0320 	add.w	r3, r7, #32
 8013186:	4618      	mov	r0, r3
 8013188:	f000 fec8 	bl	8013f1c <LoRaMacConfirmQueueAdd>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        if( isAbpJoinPending == true )
 801318c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013190:	2b00      	cmp	r3, #0
 8013192:	d001      	beq.n	8013198 <LoRaMacMlmeRequest+0x330>
        {
            AbpJoinPendingStart( );
 8013194:	f7ff fe34 	bl	8012e00 <AbpJoinPendingStart>
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
 8013198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801319c:	4618      	mov	r0, r3
 801319e:	3728      	adds	r7, #40	@ 0x28
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	20000c24 	.word	0x20000c24
 80131a8:	200007d0 	.word	0x200007d0
 80131ac:	20000d04 	.word	0x20000d04

080131b0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80131b0:	b5b0      	push	{r4, r5, r7, lr}
 80131b2:	b092      	sub	sp, #72	@ 0x48
 80131b4:	af02      	add	r7, sp, #8
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	460b      	mov	r3, r1
 80131ba:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80131bc:	2302      	movs	r3, #2
 80131be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80131c2:	2300      	movs	r3, #0
 80131c4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 80131c8:	2300      	movs	r3, #0
 80131ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80131cc:	2300      	movs	r3, #0
 80131ce:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 80131d2:	2300      	movs	r3, #0
 80131d4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d101      	bne.n	80131e2 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80131de:	2303      	movs	r3, #3
 80131e0:	e113      	b.n	801340a <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2200      	movs	r2, #0
 80131e6:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80131e8:	f7fc f968 	bl	800f4bc <LoRaMacIsBusy>
 80131ec:	4603      	mov	r3, r0
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d001      	beq.n	80131f6 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80131f2:	2301      	movs	r3, #1
 80131f4:	e109      	b.n	801340a <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f107 040c 	add.w	r4, r7, #12
 80131fc:	461d      	mov	r5, r3
 80131fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013202:	682b      	ldr	r3, [r5, #0]
 8013204:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8013206:	2300      	movs	r3, #0
 8013208:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 801320c:	2214      	movs	r2, #20
 801320e:	2100      	movs	r1, #0
 8013210:	4880      	ldr	r0, [pc, #512]	@ (8013414 <LoRaMacMcpsRequest+0x264>)
 8013212:	f004 fc39 	bl	8017a88 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013216:	4b80      	ldr	r3, [pc, #512]	@ (8013418 <LoRaMacMcpsRequest+0x268>)
 8013218:	2201      	movs	r2, #1
 801321a:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801321e:	4b7f      	ldr	r3, [pc, #508]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 8013220:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8013224:	2b02      	cmp	r3, #2
 8013226:	d111      	bne.n	801324c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013228:	4b7c      	ldr	r3, [pc, #496]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 801322a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801322e:	2b02      	cmp	r3, #2
 8013230:	d10c      	bne.n	801324c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013232:	4b7a      	ldr	r3, [pc, #488]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 8013234:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8013238:	f083 0301 	eor.w	r3, r3, #1
 801323c:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801323e:	2b00      	cmp	r3, #0
 8013240:	d004      	beq.n	801324c <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8013242:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013244:	2b00      	cmp	r3, #0
 8013246:	d101      	bne.n	801324c <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8013248:	2301      	movs	r3, #1
 801324a:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 801324c:	7b3b      	ldrb	r3, [r7, #12]
 801324e:	2b03      	cmp	r3, #3
 8013250:	d030      	beq.n	80132b4 <LoRaMacMcpsRequest+0x104>
 8013252:	2b03      	cmp	r3, #3
 8013254:	dc3f      	bgt.n	80132d6 <LoRaMacMcpsRequest+0x126>
 8013256:	2b00      	cmp	r3, #0
 8013258:	d002      	beq.n	8013260 <LoRaMacMcpsRequest+0xb0>
 801325a:	2b01      	cmp	r3, #1
 801325c:	d015      	beq.n	801328a <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801325e:	e03a      	b.n	80132d6 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8013260:	2301      	movs	r3, #1
 8013262:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013266:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801326a:	2202      	movs	r2, #2
 801326c:	f362 1347 	bfi	r3, r2, #5, #3
 8013270:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8013274:	7c3b      	ldrb	r3, [r7, #16]
 8013276:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 801327e:	8b3b      	ldrh	r3, [r7, #24]
 8013280:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8013282:	7ebb      	ldrb	r3, [r7, #26]
 8013284:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8013288:	e026      	b.n	80132d8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801328a:	2301      	movs	r3, #1
 801328c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8013290:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013294:	2204      	movs	r2, #4
 8013296:	f362 1347 	bfi	r3, r2, #5, #3
 801329a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 801329e:	7c3b      	ldrb	r3, [r7, #16]
 80132a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 80132a8:	8b3b      	ldrh	r3, [r7, #24]
 80132aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 80132ac:	7ebb      	ldrb	r3, [r7, #26]
 80132ae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80132b2:	e011      	b.n	80132d8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80132b4:	2301      	movs	r3, #1
 80132b6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80132ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80132be:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80132c2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80132ca:	8abb      	ldrh	r3, [r7, #20]
 80132cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 80132ce:	7dbb      	ldrb	r3, [r7, #22]
 80132d0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80132d4:	e000      	b.n	80132d8 <LoRaMacMcpsRequest+0x128>
            break;
 80132d6:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80132d8:	2302      	movs	r3, #2
 80132da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80132de:	4b4f      	ldr	r3, [pc, #316]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 80132e0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80132e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80132e8:	4b4c      	ldr	r3, [pc, #304]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 80132ea:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80132ee:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80132f2:	4611      	mov	r1, r2
 80132f4:	4618      	mov	r0, r3
 80132f6:	f002 f961 	bl	80155bc <RegionGetPhyParam>
 80132fa:	4603      	mov	r3, r0
 80132fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80132fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013300:	b25b      	sxtb	r3, r3
 8013302:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 8013306:	4293      	cmp	r3, r2
 8013308:	bfb8      	it	lt
 801330a:	4613      	movlt	r3, r2
 801330c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013310:	4b42      	ldr	r3, [pc, #264]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 8013312:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8013316:	4a41      	ldr	r2, [pc, #260]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 8013318:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 801331c:	4a3f      	ldr	r2, [pc, #252]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 801331e:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8013322:	4618      	mov	r0, r3
 8013324:	f7fc fa66 	bl	800f7f4 <CheckForMinimumAbpDatarate>
 8013328:	4603      	mov	r3, r0
 801332a:	2b00      	cmp	r3, #0
 801332c:	d002      	beq.n	8013334 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 801332e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013330:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8013334:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8013338:	2b00      	cmp	r3, #0
 801333a:	d05f      	beq.n	80133fc <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801333c:	4b37      	ldr	r3, [pc, #220]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 801333e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8013342:	f083 0301 	eor.w	r3, r3, #1
 8013346:	b2db      	uxtb	r3, r3
 8013348:	2b00      	cmp	r3, #0
 801334a:	d10e      	bne.n	801336a <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 801334c:	4b33      	ldr	r3, [pc, #204]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 801334e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8013352:	4a32      	ldr	r2, [pc, #200]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 8013354:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8013358:	4a30      	ldr	r2, [pc, #192]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 801335a:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 801335e:	4618      	mov	r0, r3
 8013360:	f7fc fa48 	bl	800f7f4 <CheckForMinimumAbpDatarate>
 8013364:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013366:	2b00      	cmp	r3, #0
 8013368:	d01c      	beq.n	80133a4 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 801336a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801336e:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013372:	4b2a      	ldr	r3, [pc, #168]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 8013374:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8013378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801337c:	4b27      	ldr	r3, [pc, #156]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 801337e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013382:	f107 0120 	add.w	r1, r7, #32
 8013386:	2205      	movs	r2, #5
 8013388:	4618      	mov	r0, r3
 801338a:	f002 f952 	bl	8015632 <RegionVerify>
 801338e:	4603      	mov	r3, r0
 8013390:	2b00      	cmp	r3, #0
 8013392:	d005      	beq.n	80133a0 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013394:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8013398:	4b20      	ldr	r3, [pc, #128]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 801339a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 801339e:	e001      	b.n	80133a4 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80133a0:	2303      	movs	r3, #3
 80133a2:	e032      	b.n	801340a <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80133a4:	4b1d      	ldr	r3, [pc, #116]	@ (801341c <LoRaMacMcpsRequest+0x26c>)
 80133a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80133aa:	4a1b      	ldr	r2, [pc, #108]	@ (8013418 <LoRaMacMcpsRequest+0x268>)
 80133ac:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 80133b0:	4611      	mov	r1, r2
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7fc fb0a 	bl	800f9cc <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80133b8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80133ba:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 80133be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80133c2:	78fb      	ldrb	r3, [r7, #3]
 80133c4:	9300      	str	r3, [sp, #0]
 80133c6:	4613      	mov	r3, r2
 80133c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80133ca:	f7fd fac1 	bl	8010950 <Send>
 80133ce:	4603      	mov	r3, r0
 80133d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 80133d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d10b      	bne.n	80133f4 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80133dc:	7b3a      	ldrb	r2, [r7, #12]
 80133de:	4b0e      	ldr	r3, [pc, #56]	@ (8013418 <LoRaMacMcpsRequest+0x268>)
 80133e0:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80133e4:	4a0c      	ldr	r2, [pc, #48]	@ (8013418 <LoRaMacMcpsRequest+0x268>)
 80133e6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80133ea:	f043 0301 	orr.w	r3, r3, #1
 80133ee:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 80133f2:	e003      	b.n	80133fc <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80133f4:	4b08      	ldr	r3, [pc, #32]	@ (8013418 <LoRaMacMcpsRequest+0x268>)
 80133f6:	2200      	movs	r2, #0
 80133f8:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80133fc:	4b06      	ldr	r3, [pc, #24]	@ (8013418 <LoRaMacMcpsRequest+0x268>)
 80133fe:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	611a      	str	r2, [r3, #16]

    return status;
 8013406:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801340a:	4618      	mov	r0, r3
 801340c:	3740      	adds	r7, #64	@ 0x40
 801340e:	46bd      	mov	sp, r7
 8013410:	bdb0      	pop	{r4, r5, r7, pc}
 8013412:	bf00      	nop
 8013414:	20000c10 	.word	0x20000c10
 8013418:	200007d0 	.word	0x200007d0
 801341c:	20000d04 	.word	0x20000d04

08013420 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b084      	sub	sp, #16
 8013424:	af00      	add	r7, sp, #0
 8013426:	4603      	mov	r3, r0
 8013428:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801342a:	79fb      	ldrb	r3, [r7, #7]
 801342c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801342e:	4b0d      	ldr	r3, [pc, #52]	@ (8013464 <LoRaMacTestSetDutyCycleOn+0x44>)
 8013430:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013434:	f107 010c 	add.w	r1, r7, #12
 8013438:	220f      	movs	r2, #15
 801343a:	4618      	mov	r0, r3
 801343c:	f002 f8f9 	bl	8015632 <RegionVerify>
 8013440:	4603      	mov	r3, r0
 8013442:	2b00      	cmp	r3, #0
 8013444:	d00a      	beq.n	801345c <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013446:	4a07      	ldr	r2, [pc, #28]	@ (8013464 <LoRaMacTestSetDutyCycleOn+0x44>)
 8013448:	79fb      	ldrb	r3, [r7, #7]
 801344a:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801344e:	4a06      	ldr	r2, [pc, #24]	@ (8013468 <LoRaMacTestSetDutyCycleOn+0x48>)
 8013450:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013454:	f043 0320 	orr.w	r3, r3, #32
 8013458:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 801345c:	bf00      	nop
 801345e:	3710      	adds	r7, #16
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}
 8013464:	20000d04 	.word	0x20000d04
 8013468:	200007d0 	.word	0x200007d0

0801346c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801346c:	b580      	push	{r7, lr}
 801346e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013470:	f7fe fe30 	bl	80120d4 <LoRaMacStop>
 8013474:	4603      	mov	r3, r0
 8013476:	2b00      	cmp	r3, #0
 8013478:	d112      	bne.n	80134a0 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801347a:	480b      	ldr	r0, [pc, #44]	@ (80134a8 <LoRaMacDeInitialization+0x3c>)
 801347c:	f008 fc1c 	bl	801bcb8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013480:	480a      	ldr	r0, [pc, #40]	@ (80134ac <LoRaMacDeInitialization+0x40>)
 8013482:	f008 fc19 	bl	801bcb8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8013486:	480a      	ldr	r0, [pc, #40]	@ (80134b0 <LoRaMacDeInitialization+0x44>)
 8013488:	f008 fc16 	bl	801bcb8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801348c:	f000 f94a 	bl	8013724 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8013490:	2000      	movs	r0, #0
 8013492:	f7fd fdbb 	bl	801100c <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8013496:	4b07      	ldr	r3, [pc, #28]	@ (80134b4 <LoRaMacDeInitialization+0x48>)
 8013498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801349a:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801349c:	2300      	movs	r3, #0
 801349e:	e000      	b.n	80134a2 <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80134a0:	2301      	movs	r3, #1
    }
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	bd80      	pop	{r7, pc}
 80134a6:	bf00      	nop
 80134a8:	20000b38 	.word	0x20000b38
 80134ac:	20000b50 	.word	0x20000b50
 80134b0:	20000b68 	.word	0x20000b68
 80134b4:	0801d50c 	.word	0x0801d50c

080134b8 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b08c      	sub	sp, #48	@ 0x30
 80134bc:	af00      	add	r7, sp, #0
 80134be:	60f8      	str	r0, [r7, #12]
 80134c0:	60b9      	str	r1, [r7, #8]
 80134c2:	607a      	str	r2, [r7, #4]
 80134c4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80134c6:	2300      	movs	r3, #0
 80134c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	7b1b      	ldrb	r3, [r3, #12]
 80134d0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	7b5b      	ldrb	r3, [r3, #13]
 80134d8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	7b9b      	ldrb	r3, [r3, #14]
 80134e0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	685a      	ldr	r2, [r3, #4]
 80134e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ea:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	785b      	ldrb	r3, [r3, #1]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	f000 8088 	beq.w	8013606 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80134f6:	2302      	movs	r3, #2
 80134f8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	7bdb      	ldrb	r3, [r3, #15]
 8013500:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	7c1b      	ldrb	r3, [r3, #16]
 8013508:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801350c:	4611      	mov	r1, r2
 801350e:	4618      	mov	r0, r3
 8013510:	f002 f854 	bl	80155bc <RegionGetPhyParam>
 8013514:	4603      	mov	r3, r0
 8013516:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013518:	6a3b      	ldr	r3, [r7, #32]
 801351a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 801351e:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8013522:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8013526:	4293      	cmp	r3, r2
 8013528:	bfb8      	it	lt
 801352a:	4613      	movlt	r3, r2
 801352c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	685b      	ldr	r3, [r3, #4]
 8013534:	68fa      	ldr	r2, [r7, #12]
 8013536:	8912      	ldrh	r2, [r2, #8]
 8013538:	4293      	cmp	r3, r2
 801353a:	d302      	bcc.n	8013542 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 801353c:	2301      	movs	r3, #1
 801353e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	68fa      	ldr	r2, [r7, #12]
 8013548:	8912      	ldrh	r2, [r2, #8]
 801354a:	4611      	mov	r1, r2
 801354c:	68fa      	ldr	r2, [r7, #12]
 801354e:	8952      	ldrh	r2, [r2, #10]
 8013550:	440a      	add	r2, r1
 8013552:	4293      	cmp	r3, r2
 8013554:	d30f      	bcc.n	8013576 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8013556:	230a      	movs	r3, #10
 8013558:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	7c1b      	ldrb	r3, [r3, #16]
 8013560:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013564:	4611      	mov	r1, r2
 8013566:	4618      	mov	r0, r3
 8013568:	f002 f828 	bl	80155bc <RegionGetPhyParam>
 801356c:	4603      	mov	r3, r0
 801356e:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8013570:	6a3b      	ldr	r3, [r7, #32]
 8013572:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	685b      	ldr	r3, [r3, #4]
 801357a:	68fa      	ldr	r2, [r7, #12]
 801357c:	8912      	ldrh	r2, [r2, #8]
 801357e:	4611      	mov	r1, r2
 8013580:	68fa      	ldr	r2, [r7, #12]
 8013582:	8952      	ldrh	r2, [r2, #10]
 8013584:	0052      	lsls	r2, r2, #1
 8013586:	440a      	add	r2, r1
 8013588:	4293      	cmp	r3, r2
 801358a:	d33c      	bcc.n	8013606 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	685b      	ldr	r3, [r3, #4]
 8013590:	68fa      	ldr	r2, [r7, #12]
 8013592:	8912      	ldrh	r2, [r2, #8]
 8013594:	1a9b      	subs	r3, r3, r2
 8013596:	68fa      	ldr	r2, [r7, #12]
 8013598:	8952      	ldrh	r2, [r2, #10]
 801359a:	fbb3 f1f2 	udiv	r1, r3, r2
 801359e:	fb01 f202 	mul.w	r2, r1, r2
 80135a2:	1a9b      	subs	r3, r3, r2
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d12e      	bne.n	8013606 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 80135a8:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 80135ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d110      	bne.n	80135d6 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	781b      	ldrb	r3, [r3, #0]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d009      	beq.n	80135d0 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80135bc:	2302      	movs	r3, #2
 80135be:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	7c1b      	ldrb	r3, [r3, #16]
 80135c4:	f107 0210 	add.w	r2, r7, #16
 80135c8:	4611      	mov	r1, r2
 80135ca:	4618      	mov	r0, r3
 80135cc:	f002 f81f 	bl	801560e <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 80135d0:	2301      	movs	r3, #1
 80135d2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80135d6:	2321      	movs	r3, #33	@ 0x21
 80135d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 80135dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80135e0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	7bdb      	ldrb	r3, [r3, #15]
 80135e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	7c1b      	ldrb	r3, [r3, #16]
 80135f0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80135f4:	4611      	mov	r1, r2
 80135f6:	4618      	mov	r0, r3
 80135f8:	f001 ffe0 	bl	80155bc <RegionGetPhyParam>
 80135fc:	4603      	mov	r3, r0
 80135fe:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8013600:	6a3b      	ldr	r3, [r7, #32]
 8013602:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 801360c:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8013614:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8013616:	683b      	ldr	r3, [r7, #0]
 8013618:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801361c:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801361e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013622:	4618      	mov	r0, r3
 8013624:	3730      	adds	r7, #48	@ 0x30
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}

0801362a <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 801362a:	b480      	push	{r7}
 801362c:	b085      	sub	sp, #20
 801362e:	af00      	add	r7, sp, #0
 8013630:	60f8      	str	r0, [r7, #12]
 8013632:	60b9      	str	r1, [r7, #8]
 8013634:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013636:	bf00      	nop
 8013638:	3714      	adds	r7, #20
 801363a:	46bd      	mov	sp, r7
 801363c:	bc80      	pop	{r7}
 801363e:	4770      	bx	lr

08013640 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013640:	b480      	push	{r7}
 8013642:	b083      	sub	sp, #12
 8013644:	af00      	add	r7, sp, #0
 8013646:	4603      	mov	r3, r0
 8013648:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801364a:	bf00      	nop
 801364c:	370c      	adds	r7, #12
 801364e:	46bd      	mov	sp, r7
 8013650:	bc80      	pop	{r7}
 8013652:	4770      	bx	lr

08013654 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013654:	b480      	push	{r7}
 8013656:	b083      	sub	sp, #12
 8013658:	af00      	add	r7, sp, #0
 801365a:	4603      	mov	r3, r0
 801365c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801365e:	bf00      	nop
 8013660:	370c      	adds	r7, #12
 8013662:	46bd      	mov	sp, r7
 8013664:	bc80      	pop	{r7}
 8013666:	4770      	bx	lr

08013668 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013668:	b480      	push	{r7}
 801366a:	b083      	sub	sp, #12
 801366c:	af00      	add	r7, sp, #0
 801366e:	4603      	mov	r3, r0
 8013670:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013672:	bf00      	nop
 8013674:	370c      	adds	r7, #12
 8013676:	46bd      	mov	sp, r7
 8013678:	bc80      	pop	{r7}
 801367a:	4770      	bx	lr

0801367c <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801367c:	b480      	push	{r7}
 801367e:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013680:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013682:	4618      	mov	r0, r3
 8013684:	46bd      	mov	sp, r7
 8013686:	bc80      	pop	{r7}
 8013688:	4770      	bx	lr

0801368a <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801368a:	b480      	push	{r7}
 801368c:	b083      	sub	sp, #12
 801368e:	af00      	add	r7, sp, #0
 8013690:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013692:	bf00      	nop
 8013694:	370c      	adds	r7, #12
 8013696:	46bd      	mov	sp, r7
 8013698:	bc80      	pop	{r7}
 801369a:	4770      	bx	lr

0801369c <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801369c:	b480      	push	{r7}
 801369e:	b083      	sub	sp, #12
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80136a4:	bf00      	nop
 80136a6:	370c      	adds	r7, #12
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bc80      	pop	{r7}
 80136ac:	4770      	bx	lr

080136ae <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80136ae:	b480      	push	{r7}
 80136b0:	b083      	sub	sp, #12
 80136b2:	af00      	add	r7, sp, #0
 80136b4:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80136b6:	bf00      	nop
 80136b8:	370c      	adds	r7, #12
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bc80      	pop	{r7}
 80136be:	4770      	bx	lr

080136c0 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80136c0:	b480      	push	{r7}
 80136c2:	b083      	sub	sp, #12
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	460b      	mov	r3, r1
 80136ca:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80136cc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	370c      	adds	r7, #12
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bc80      	pop	{r7}
 80136d6:	4770      	bx	lr

080136d8 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80136d8:	b480      	push	{r7}
 80136da:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80136dc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80136de:	4618      	mov	r0, r3
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bc80      	pop	{r7}
 80136e4:	4770      	bx	lr

080136e6 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80136e6:	b480      	push	{r7}
 80136e8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80136ea:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bc80      	pop	{r7}
 80136f2:	4770      	bx	lr

080136f4 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80136f4:	b480      	push	{r7}
 80136f6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80136f8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80136fa:	4618      	mov	r0, r3
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bc80      	pop	{r7}
 8013700:	4770      	bx	lr

08013702 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8013702:	b480      	push	{r7}
 8013704:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013706:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013708:	4618      	mov	r0, r3
 801370a:	46bd      	mov	sp, r7
 801370c:	bc80      	pop	{r7}
 801370e:	4770      	bx	lr

08013710 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013710:	b480      	push	{r7}
 8013712:	b083      	sub	sp, #12
 8013714:	af00      	add	r7, sp, #0
 8013716:	4603      	mov	r3, r0
 8013718:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801371a:	bf00      	nop
 801371c:	370c      	adds	r7, #12
 801371e:	46bd      	mov	sp, r7
 8013720:	bc80      	pop	{r7}
 8013722:	4770      	bx	lr

08013724 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8013724:	b480      	push	{r7}
 8013726:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013728:	bf00      	nop
 801372a:	46bd      	mov	sp, r7
 801372c:	bc80      	pop	{r7}
 801372e:	4770      	bx	lr

08013730 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013730:	b480      	push	{r7}
 8013732:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013734:	bf00      	nop
 8013736:	46bd      	mov	sp, r7
 8013738:	bc80      	pop	{r7}
 801373a:	4770      	bx	lr

0801373c <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801373c:	b480      	push	{r7}
 801373e:	b083      	sub	sp, #12
 8013740:	af00      	add	r7, sp, #0
 8013742:	4603      	mov	r3, r0
 8013744:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013746:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013748:	4618      	mov	r0, r3
 801374a:	370c      	adds	r7, #12
 801374c:	46bd      	mov	sp, r7
 801374e:	bc80      	pop	{r7}
 8013750:	4770      	bx	lr

08013752 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013752:	b480      	push	{r7}
 8013754:	b083      	sub	sp, #12
 8013756:	af00      	add	r7, sp, #0
 8013758:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801375a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801375c:	4618      	mov	r0, r3
 801375e:	370c      	adds	r7, #12
 8013760:	46bd      	mov	sp, r7
 8013762:	bc80      	pop	{r7}
 8013764:	4770      	bx	lr

08013766 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013766:	b480      	push	{r7}
 8013768:	b083      	sub	sp, #12
 801376a:	af00      	add	r7, sp, #0
 801376c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801376e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013770:	4618      	mov	r0, r3
 8013772:	370c      	adds	r7, #12
 8013774:	46bd      	mov	sp, r7
 8013776:	bc80      	pop	{r7}
 8013778:	4770      	bx	lr

0801377a <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801377a:	b480      	push	{r7}
 801377c:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801377e:	bf00      	nop
 8013780:	46bd      	mov	sp, r7
 8013782:	bc80      	pop	{r7}
 8013784:	4770      	bx	lr

08013786 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013786:	b480      	push	{r7}
 8013788:	b083      	sub	sp, #12
 801378a:	af00      	add	r7, sp, #0
 801378c:	4603      	mov	r3, r0
 801378e:	6039      	str	r1, [r7, #0]
 8013790:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8013792:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013794:	4618      	mov	r0, r3
 8013796:	370c      	adds	r7, #12
 8013798:	46bd      	mov	sp, r7
 801379a:	bc80      	pop	{r7}
 801379c:	4770      	bx	lr

0801379e <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801379e:	b480      	push	{r7}
 80137a0:	b083      	sub	sp, #12
 80137a2:	af00      	add	r7, sp, #0
 80137a4:	4603      	mov	r3, r0
 80137a6:	603a      	str	r2, [r7, #0]
 80137a8:	80fb      	strh	r3, [r7, #6]
 80137aa:	460b      	mov	r3, r1
 80137ac:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80137ae:	bf00      	nop
 80137b0:	370c      	adds	r7, #12
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bc80      	pop	{r7}
 80137b6:	4770      	bx	lr

080137b8 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80137b8:	b480      	push	{r7}
 80137ba:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80137bc:	bf00      	nop
 80137be:	46bd      	mov	sp, r7
 80137c0:	bc80      	pop	{r7}
 80137c2:	4770      	bx	lr

080137c4 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80137c4:	b480      	push	{r7}
 80137c6:	b083      	sub	sp, #12
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80137cc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	370c      	adds	r7, #12
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bc80      	pop	{r7}
 80137d6:	4770      	bx	lr

080137d8 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80137d8:	b480      	push	{r7}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80137e0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	370c      	adds	r7, #12
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bc80      	pop	{r7}
 80137ea:	4770      	bx	lr

080137ec <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80137ec:	b480      	push	{r7}
 80137ee:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80137f0:	bf00      	nop
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bc80      	pop	{r7}
 80137f6:	4770      	bx	lr

080137f8 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80137f8:	b480      	push	{r7}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	460b      	mov	r3, r1
 8013802:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013804:	bf00      	nop
 8013806:	370c      	adds	r7, #12
 8013808:	46bd      	mov	sp, r7
 801380a:	bc80      	pop	{r7}
 801380c:	4770      	bx	lr

0801380e <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801380e:	b480      	push	{r7}
 8013810:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013812:	bf00      	nop
 8013814:	46bd      	mov	sp, r7
 8013816:	bc80      	pop	{r7}
 8013818:	4770      	bx	lr

0801381a <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801381a:	b480      	push	{r7}
 801381c:	b085      	sub	sp, #20
 801381e:	af00      	add	r7, sp, #0
 8013820:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013826:	2300      	movs	r3, #0
 8013828:	81fb      	strh	r3, [r7, #14]
 801382a:	e00a      	b.n	8013842 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 801382c:	89fb      	ldrh	r3, [r7, #14]
 801382e:	68ba      	ldr	r2, [r7, #8]
 8013830:	4413      	add	r3, r2
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d001      	beq.n	801383c <IsSlotFree+0x22>
        {
            return false;
 8013838:	2300      	movs	r3, #0
 801383a:	e006      	b.n	801384a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801383c:	89fb      	ldrh	r3, [r7, #14]
 801383e:	3301      	adds	r3, #1
 8013840:	81fb      	strh	r3, [r7, #14]
 8013842:	89fb      	ldrh	r3, [r7, #14]
 8013844:	2b0f      	cmp	r3, #15
 8013846:	d9f1      	bls.n	801382c <IsSlotFree+0x12>
        }
    }
    return true;
 8013848:	2301      	movs	r3, #1
}
 801384a:	4618      	mov	r0, r3
 801384c:	3714      	adds	r7, #20
 801384e:	46bd      	mov	sp, r7
 8013850:	bc80      	pop	{r7}
 8013852:	4770      	bx	lr

08013854 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801385a:	2300      	movs	r3, #0
 801385c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801385e:	e007      	b.n	8013870 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013860:	79fb      	ldrb	r3, [r7, #7]
 8013862:	3301      	adds	r3, #1
 8013864:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013866:	79fb      	ldrb	r3, [r7, #7]
 8013868:	2b20      	cmp	r3, #32
 801386a:	d101      	bne.n	8013870 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 801386c:	2300      	movs	r3, #0
 801386e:	e012      	b.n	8013896 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013870:	79fb      	ldrb	r3, [r7, #7]
 8013872:	011b      	lsls	r3, r3, #4
 8013874:	3308      	adds	r3, #8
 8013876:	4a0a      	ldr	r2, [pc, #40]	@ (80138a0 <MallocNewMacCommandSlot+0x4c>)
 8013878:	4413      	add	r3, r2
 801387a:	4618      	mov	r0, r3
 801387c:	f7ff ffcd 	bl	801381a <IsSlotFree>
 8013880:	4603      	mov	r3, r0
 8013882:	f083 0301 	eor.w	r3, r3, #1
 8013886:	b2db      	uxtb	r3, r3
 8013888:	2b00      	cmp	r3, #0
 801388a:	d1e9      	bne.n	8013860 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 801388c:	79fb      	ldrb	r3, [r7, #7]
 801388e:	011b      	lsls	r3, r3, #4
 8013890:	3308      	adds	r3, #8
 8013892:	4a03      	ldr	r2, [pc, #12]	@ (80138a0 <MallocNewMacCommandSlot+0x4c>)
 8013894:	4413      	add	r3, r2
}
 8013896:	4618      	mov	r0, r3
 8013898:	3708      	adds	r7, #8
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}
 801389e:	bf00      	nop
 80138a0:	20001928 	.word	0x20001928

080138a4 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d101      	bne.n	80138b6 <FreeMacCommandSlot+0x12>
    {
        return false;
 80138b2:	2300      	movs	r3, #0
 80138b4:	e005      	b.n	80138c2 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80138b6:	2210      	movs	r2, #16
 80138b8:	2100      	movs	r1, #0
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f004 f8e4 	bl	8017a88 <memset1>

    return true;
 80138c0:	2301      	movs	r3, #1
}
 80138c2:	4618      	mov	r0, r3
 80138c4:	3708      	adds	r7, #8
 80138c6:	46bd      	mov	sp, r7
 80138c8:	bd80      	pop	{r7, pc}

080138ca <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80138ca:	b480      	push	{r7}
 80138cc:	b083      	sub	sp, #12
 80138ce:	af00      	add	r7, sp, #0
 80138d0:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d101      	bne.n	80138dc <LinkedListInit+0x12>
    {
        return false;
 80138d8:	2300      	movs	r3, #0
 80138da:	e006      	b.n	80138ea <LinkedListInit+0x20>
    }

    list->First = NULL;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2200      	movs	r2, #0
 80138e0:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2200      	movs	r2, #0
 80138e6:	605a      	str	r2, [r3, #4]

    return true;
 80138e8:	2301      	movs	r3, #1
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	370c      	adds	r7, #12
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bc80      	pop	{r7}
 80138f2:	4770      	bx	lr

080138f4 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80138f4:	b480      	push	{r7}
 80138f6:	b083      	sub	sp, #12
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d002      	beq.n	801390a <LinkedListAdd+0x16>
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d101      	bne.n	801390e <LinkedListAdd+0x1a>
    {
        return false;
 801390a:	2300      	movs	r3, #0
 801390c:	e015      	b.n	801393a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d102      	bne.n	801391c <LinkedListAdd+0x28>
    {
        list->First = element;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	683a      	ldr	r2, [r7, #0]
 801391a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	685b      	ldr	r3, [r3, #4]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d003      	beq.n	801392c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	685b      	ldr	r3, [r3, #4]
 8013928:	683a      	ldr	r2, [r7, #0]
 801392a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	2200      	movs	r2, #0
 8013930:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	683a      	ldr	r2, [r7, #0]
 8013936:	605a      	str	r2, [r3, #4]

    return true;
 8013938:	2301      	movs	r3, #1
}
 801393a:	4618      	mov	r0, r3
 801393c:	370c      	adds	r7, #12
 801393e:	46bd      	mov	sp, r7
 8013940:	bc80      	pop	{r7}
 8013942:	4770      	bx	lr

08013944 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013944:	b480      	push	{r7}
 8013946:	b085      	sub	sp, #20
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d002      	beq.n	801395a <LinkedListGetPrevious+0x16>
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d101      	bne.n	801395e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801395a:	2300      	movs	r3, #0
 801395c:	e016      	b.n	801398c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013964:	683a      	ldr	r2, [r7, #0]
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	429a      	cmp	r2, r3
 801396a:	d00c      	beq.n	8013986 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801396c:	e002      	b.n	8013974 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d007      	beq.n	801398a <LinkedListGetPrevious+0x46>
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	683a      	ldr	r2, [r7, #0]
 8013980:	429a      	cmp	r2, r3
 8013982:	d1f4      	bne.n	801396e <LinkedListGetPrevious+0x2a>
 8013984:	e001      	b.n	801398a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8013986:	2300      	movs	r3, #0
 8013988:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801398a:	68fb      	ldr	r3, [r7, #12]
}
 801398c:	4618      	mov	r0, r3
 801398e:	3714      	adds	r7, #20
 8013990:	46bd      	mov	sp, r7
 8013992:	bc80      	pop	{r7}
 8013994:	4770      	bx	lr

08013996 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8013996:	b580      	push	{r7, lr}
 8013998:	b084      	sub	sp, #16
 801399a:	af00      	add	r7, sp, #0
 801399c:	6078      	str	r0, [r7, #4]
 801399e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d002      	beq.n	80139ac <LinkedListRemove+0x16>
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d101      	bne.n	80139b0 <LinkedListRemove+0x1a>
    {
        return false;
 80139ac:	2300      	movs	r3, #0
 80139ae:	e020      	b.n	80139f2 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80139b0:	6839      	ldr	r1, [r7, #0]
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	f7ff ffc6 	bl	8013944 <LinkedListGetPrevious>
 80139b8:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	683a      	ldr	r2, [r7, #0]
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d103      	bne.n	80139cc <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	685b      	ldr	r3, [r3, #4]
 80139d0:	683a      	ldr	r2, [r7, #0]
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d102      	bne.n	80139dc <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	68fa      	ldr	r2, [r7, #12]
 80139da:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d003      	beq.n	80139ea <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	681a      	ldr	r2, [r3, #0]
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	2200      	movs	r2, #0
 80139ee:	601a      	str	r2, [r3, #0]

    return true;
 80139f0:	2301      	movs	r3, #1
}
 80139f2:	4618      	mov	r0, r3
 80139f4:	3710      	adds	r7, #16
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}
	...

080139fc <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80139fc:	b480      	push	{r7}
 80139fe:	b083      	sub	sp, #12
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	4603      	mov	r3, r0
 8013a04:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8013a06:	79fb      	ldrb	r3, [r7, #7]
 8013a08:	2b11      	cmp	r3, #17
 8013a0a:	bf8c      	ite	hi
 8013a0c:	2201      	movhi	r2, #1
 8013a0e:	2200      	movls	r2, #0
 8013a10:	b2d2      	uxtb	r2, r2
 8013a12:	2a00      	cmp	r2, #0
 8013a14:	d10d      	bne.n	8013a32 <IsSticky+0x36>
 8013a16:	4a0a      	ldr	r2, [pc, #40]	@ (8013a40 <IsSticky+0x44>)
 8013a18:	fa22 f303 	lsr.w	r3, r2, r3
 8013a1c:	f003 0301 	and.w	r3, r3, #1
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	bf14      	ite	ne
 8013a24:	2301      	movne	r3, #1
 8013a26:	2300      	moveq	r3, #0
 8013a28:	b2db      	uxtb	r3, r3
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d001      	beq.n	8013a32 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8013a2e:	2301      	movs	r3, #1
 8013a30:	e000      	b.n	8013a34 <IsSticky+0x38>
        default:
            return false;
 8013a32:	2300      	movs	r3, #0
    }
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	370c      	adds	r7, #12
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bc80      	pop	{r7}
 8013a3c:	4770      	bx	lr
 8013a3e:	bf00      	nop
 8013a40:	00020720 	.word	0x00020720

08013a44 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8013a44:	b480      	push	{r7}
 8013a46:	b083      	sub	sp, #12
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8013a4e:	2300      	movs	r3, #0
    }
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	370c      	adds	r7, #12
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bc80      	pop	{r7}
 8013a58:	4770      	bx	lr
	...

08013a5c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013a60:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8013a64:	2100      	movs	r1, #0
 8013a66:	4804      	ldr	r0, [pc, #16]	@ (8013a78 <LoRaMacCommandsInit+0x1c>)
 8013a68:	f004 f80e 	bl	8017a88 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013a6c:	4802      	ldr	r0, [pc, #8]	@ (8013a78 <LoRaMacCommandsInit+0x1c>)
 8013a6e:	f7ff ff2c 	bl	80138ca <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013a72:	2300      	movs	r3, #0
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	bd80      	pop	{r7, pc}
 8013a78:	20001928 	.word	0x20001928

08013a7c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b086      	sub	sp, #24
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	4603      	mov	r3, r0
 8013a84:	60b9      	str	r1, [r7, #8]
 8013a86:	607a      	str	r2, [r7, #4]
 8013a88:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d101      	bne.n	8013a94 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013a90:	2301      	movs	r3, #1
 8013a92:	e03b      	b.n	8013b0c <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013a94:	f7ff fede 	bl	8013854 <MallocNewMacCommandSlot>
 8013a98:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d101      	bne.n	8013aa4 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013aa0:	2302      	movs	r3, #2
 8013aa2:	e033      	b.n	8013b0c <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8013aa4:	6979      	ldr	r1, [r7, #20]
 8013aa6:	481b      	ldr	r0, [pc, #108]	@ (8013b14 <LoRaMacCommandsAddCmd+0x98>)
 8013aa8:	f7ff ff24 	bl	80138f4 <LinkedListAdd>
 8013aac:	4603      	mov	r3, r0
 8013aae:	f083 0301 	eor.w	r3, r3, #1
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d001      	beq.n	8013abc <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013ab8:	2305      	movs	r3, #5
 8013aba:	e027      	b.n	8013b0c <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8013abc:	697b      	ldr	r3, [r7, #20]
 8013abe:	7bfa      	ldrb	r2, [r7, #15]
 8013ac0:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	687a      	ldr	r2, [r7, #4]
 8013ac6:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	3305      	adds	r3, #5
 8013acc:	687a      	ldr	r2, [r7, #4]
 8013ace:	b292      	uxth	r2, r2
 8013ad0:	68b9      	ldr	r1, [r7, #8]
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f003 ff9d 	bl	8017a12 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8013ad8:	7bfb      	ldrb	r3, [r7, #15]
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7ff ff8e 	bl	80139fc <IsSticky>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	461a      	mov	r2, r3
 8013ae4:	697b      	ldr	r3, [r7, #20]
 8013ae6:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8013ae8:	7bfb      	ldrb	r3, [r7, #15]
 8013aea:	4618      	mov	r0, r3
 8013aec:	f7ff ffaa 	bl	8013a44 <IsConfirmationRequired>
 8013af0:	4603      	mov	r3, r0
 8013af2:	461a      	mov	r2, r3
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8013af8:	4b06      	ldr	r3, [pc, #24]	@ (8013b14 <LoRaMacCommandsAddCmd+0x98>)
 8013afa:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	4413      	add	r3, r2
 8013b02:	3301      	adds	r3, #1
 8013b04:	4a03      	ldr	r2, [pc, #12]	@ (8013b14 <LoRaMacCommandsAddCmd+0x98>)
 8013b06:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8013b0a:	2300      	movs	r3, #0
}
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	3718      	adds	r7, #24
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}
 8013b14:	20001928 	.word	0x20001928

08013b18 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b082      	sub	sp, #8
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d101      	bne.n	8013b2a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013b26:	2301      	movs	r3, #1
 8013b28:	e021      	b.n	8013b6e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8013b2a:	6879      	ldr	r1, [r7, #4]
 8013b2c:	4812      	ldr	r0, [pc, #72]	@ (8013b78 <LoRaMacCommandsRemoveCmd+0x60>)
 8013b2e:	f7ff ff32 	bl	8013996 <LinkedListRemove>
 8013b32:	4603      	mov	r3, r0
 8013b34:	f083 0301 	eor.w	r3, r3, #1
 8013b38:	b2db      	uxtb	r3, r3
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d001      	beq.n	8013b42 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013b3e:	2303      	movs	r3, #3
 8013b40:	e015      	b.n	8013b6e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8013b42:	4b0d      	ldr	r3, [pc, #52]	@ (8013b78 <LoRaMacCommandsRemoveCmd+0x60>)
 8013b44:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	689b      	ldr	r3, [r3, #8]
 8013b4c:	1ad3      	subs	r3, r2, r3
 8013b4e:	3b01      	subs	r3, #1
 8013b50:	4a09      	ldr	r2, [pc, #36]	@ (8013b78 <LoRaMacCommandsRemoveCmd+0x60>)
 8013b52:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f7ff fea4 	bl	80138a4 <FreeMacCommandSlot>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	f083 0301 	eor.w	r3, r3, #1
 8013b62:	b2db      	uxtb	r3, r3
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d001      	beq.n	8013b6c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013b68:	2305      	movs	r3, #5
 8013b6a:	e000      	b.n	8013b6e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013b6c:	2300      	movs	r3, #0
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3708      	adds	r7, #8
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}
 8013b76:	bf00      	nop
 8013b78:	20001928 	.word	0x20001928

08013b7c <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8013b7c:	b480      	push	{r7}
 8013b7e:	b085      	sub	sp, #20
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	4603      	mov	r3, r0
 8013b84:	6039      	str	r1, [r7, #0]
 8013b86:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013b88:	4b0e      	ldr	r3, [pc, #56]	@ (8013bc4 <LoRaMacCommandsGetCmd+0x48>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8013b8e:	e002      	b.n	8013b96 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d004      	beq.n	8013ba6 <LoRaMacCommandsGetCmd+0x2a>
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	791b      	ldrb	r3, [r3, #4]
 8013ba0:	79fa      	ldrb	r2, [r7, #7]
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d1f4      	bne.n	8013b90 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d101      	bne.n	8013bb6 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013bb2:	2303      	movs	r3, #3
 8013bb4:	e000      	b.n	8013bb8 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8013bb6:	2300      	movs	r3, #0
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3714      	adds	r7, #20
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bc80      	pop	{r7}
 8013bc0:	4770      	bx	lr
 8013bc2:	bf00      	nop
 8013bc4:	20001928 	.word	0x20001928

08013bc8 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b082      	sub	sp, #8
 8013bcc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013bce:	4b0f      	ldr	r3, [pc, #60]	@ (8013c0c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013bd4:	e012      	b.n	8013bfc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	7b1b      	ldrb	r3, [r3, #12]
 8013bda:	f083 0301 	eor.w	r3, r3, #1
 8013bde:	b2db      	uxtb	r3, r3
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d008      	beq.n	8013bf6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f7ff ff94 	bl	8013b18 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	607b      	str	r3, [r7, #4]
 8013bf4:	e002      	b.n	8013bfc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d1e9      	bne.n	8013bd6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013c02:	2300      	movs	r3, #0
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	3708      	adds	r7, #8
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}
 8013c0c:	20001928 	.word	0x20001928

08013c10 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b082      	sub	sp, #8
 8013c14:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013c16:	4b13      	ldr	r3, [pc, #76]	@ (8013c64 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013c1c:	e01a      	b.n	8013c54 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	791b      	ldrb	r3, [r3, #4]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7ff fee7 	bl	80139fc <IsSticky>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d00d      	beq.n	8013c50 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	791b      	ldrb	r3, [r3, #4]
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7ff ff03 	bl	8013a44 <IsConfirmationRequired>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	f083 0301 	eor.w	r3, r3, #1
 8013c44:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d002      	beq.n	8013c50 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f7ff ff64 	bl	8013b18 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d1e1      	bne.n	8013c1e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013c5a:	2300      	movs	r3, #0
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3708      	adds	r7, #8
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}
 8013c64:	20001928 	.word	0x20001928

08013c68 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013c68:	b480      	push	{r7}
 8013c6a:	b083      	sub	sp, #12
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d101      	bne.n	8013c7a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013c76:	2301      	movs	r3, #1
 8013c78:	e005      	b.n	8013c86 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8013c7a:	4b05      	ldr	r3, [pc, #20]	@ (8013c90 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013c7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013c84:	2300      	movs	r3, #0
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	370c      	adds	r7, #12
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bc80      	pop	{r7}
 8013c8e:	4770      	bx	lr
 8013c90:	20001928 	.word	0x20001928

08013c94 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b088      	sub	sp, #32
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	60f8      	str	r0, [r7, #12]
 8013c9c:	60b9      	str	r1, [r7, #8]
 8013c9e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013ca0:	4b25      	ldr	r3, [pc, #148]	@ (8013d38 <LoRaMacCommandsSerializeCmds+0xa4>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d002      	beq.n	8013cb6 <LoRaMacCommandsSerializeCmds+0x22>
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d126      	bne.n	8013d04 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	e039      	b.n	8013d2e <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013cba:	7efb      	ldrb	r3, [r7, #27]
 8013cbc:	68fa      	ldr	r2, [r7, #12]
 8013cbe:	1ad2      	subs	r2, r2, r3
 8013cc0:	69fb      	ldr	r3, [r7, #28]
 8013cc2:	689b      	ldr	r3, [r3, #8]
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d320      	bcc.n	8013d0c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8013cca:	7efb      	ldrb	r3, [r7, #27]
 8013ccc:	1c5a      	adds	r2, r3, #1
 8013cce:	76fa      	strb	r2, [r7, #27]
 8013cd0:	461a      	mov	r2, r3
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	4413      	add	r3, r2
 8013cd6:	69fa      	ldr	r2, [r7, #28]
 8013cd8:	7912      	ldrb	r2, [r2, #4]
 8013cda:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013cdc:	7efb      	ldrb	r3, [r7, #27]
 8013cde:	687a      	ldr	r2, [r7, #4]
 8013ce0:	18d0      	adds	r0, r2, r3
 8013ce2:	69fb      	ldr	r3, [r7, #28]
 8013ce4:	1d59      	adds	r1, r3, #5
 8013ce6:	69fb      	ldr	r3, [r7, #28]
 8013ce8:	689b      	ldr	r3, [r3, #8]
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	461a      	mov	r2, r3
 8013cee:	f003 fe90 	bl	8017a12 <memcpy1>
            itr += curElement->PayloadSize;
 8013cf2:	69fb      	ldr	r3, [r7, #28]
 8013cf4:	689b      	ldr	r3, [r3, #8]
 8013cf6:	b2da      	uxtb	r2, r3
 8013cf8:	7efb      	ldrb	r3, [r7, #27]
 8013cfa:	4413      	add	r3, r2
 8013cfc:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013cfe:	69fb      	ldr	r3, [r7, #28]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013d04:	69fb      	ldr	r3, [r7, #28]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d1d7      	bne.n	8013cba <LoRaMacCommandsSerializeCmds+0x26>
 8013d0a:	e009      	b.n	8013d20 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013d0c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013d0e:	e007      	b.n	8013d20 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013d10:	69fb      	ldr	r3, [r7, #28]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8013d16:	69f8      	ldr	r0, [r7, #28]
 8013d18:	f7ff fefe 	bl	8013b18 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013d1c:	697b      	ldr	r3, [r7, #20]
 8013d1e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013d20:	69fb      	ldr	r3, [r7, #28]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d1f4      	bne.n	8013d10 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8013d26:	68b8      	ldr	r0, [r7, #8]
 8013d28:	f7ff ff9e 	bl	8013c68 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013d2c:	2300      	movs	r3, #0
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	3720      	adds	r7, #32
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	20001928 	.word	0x20001928

08013d3c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	b085      	sub	sp, #20
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	4603      	mov	r3, r0
 8013d44:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8013d46:	2300      	movs	r3, #0
 8013d48:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8013d4a:	79fb      	ldrb	r3, [r7, #7]
 8013d4c:	3b02      	subs	r3, #2
 8013d4e:	2b11      	cmp	r3, #17
 8013d50:	d850      	bhi.n	8013df4 <LoRaMacCommandsGetCmdSize+0xb8>
 8013d52:	a201      	add	r2, pc, #4	@ (adr r2, 8013d58 <LoRaMacCommandsGetCmdSize+0x1c>)
 8013d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d58:	08013da1 	.word	0x08013da1
 8013d5c:	08013da7 	.word	0x08013da7
 8013d60:	08013dad 	.word	0x08013dad
 8013d64:	08013db3 	.word	0x08013db3
 8013d68:	08013db9 	.word	0x08013db9
 8013d6c:	08013dbf 	.word	0x08013dbf
 8013d70:	08013dc5 	.word	0x08013dc5
 8013d74:	08013dcb 	.word	0x08013dcb
 8013d78:	08013dd1 	.word	0x08013dd1
 8013d7c:	08013df5 	.word	0x08013df5
 8013d80:	08013df5 	.word	0x08013df5
 8013d84:	08013dd7 	.word	0x08013dd7
 8013d88:	08013df5 	.word	0x08013df5
 8013d8c:	08013df5 	.word	0x08013df5
 8013d90:	08013ddd 	.word	0x08013ddd
 8013d94:	08013de3 	.word	0x08013de3
 8013d98:	08013de9 	.word	0x08013de9
 8013d9c:	08013def 	.word	0x08013def
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013da0:	2303      	movs	r3, #3
 8013da2:	73fb      	strb	r3, [r7, #15]
            break;
 8013da4:	e027      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013da6:	2305      	movs	r3, #5
 8013da8:	73fb      	strb	r3, [r7, #15]
            break;
 8013daa:	e024      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013dac:	2302      	movs	r3, #2
 8013dae:	73fb      	strb	r3, [r7, #15]
            break;
 8013db0:	e021      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013db2:	2305      	movs	r3, #5
 8013db4:	73fb      	strb	r3, [r7, #15]
            break;
 8013db6:	e01e      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013db8:	2301      	movs	r3, #1
 8013dba:	73fb      	strb	r3, [r7, #15]
            break;
 8013dbc:	e01b      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013dbe:	2306      	movs	r3, #6
 8013dc0:	73fb      	strb	r3, [r7, #15]
            break;
 8013dc2:	e018      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013dc4:	2302      	movs	r3, #2
 8013dc6:	73fb      	strb	r3, [r7, #15]
            break;
 8013dc8:	e015      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013dca:	2302      	movs	r3, #2
 8013dcc:	73fb      	strb	r3, [r7, #15]
            break;
 8013dce:	e012      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013dd0:	2305      	movs	r3, #5
 8013dd2:	73fb      	strb	r3, [r7, #15]
            break;
 8013dd4:	e00f      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8013dd6:	2306      	movs	r3, #6
 8013dd8:	73fb      	strb	r3, [r7, #15]
            break;
 8013dda:	e00c      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013ddc:	2301      	movs	r3, #1
 8013dde:	73fb      	strb	r3, [r7, #15]
            break;
 8013de0:	e009      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8013de2:	2305      	movs	r3, #5
 8013de4:	73fb      	strb	r3, [r7, #15]
            break;
 8013de6:	e006      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013de8:	2304      	movs	r3, #4
 8013dea:	73fb      	strb	r3, [r7, #15]
            break;
 8013dec:	e003      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013dee:	2304      	movs	r3, #4
 8013df0:	73fb      	strb	r3, [r7, #15]
            break;
 8013df2:	e000      	b.n	8013df6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013df4:	bf00      	nop
        }
    }
    return cidSize;
 8013df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3714      	adds	r7, #20
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bc80      	pop	{r7}
 8013e00:	4770      	bx	lr
 8013e02:	bf00      	nop

08013e04 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013e04:	b480      	push	{r7}
 8013e06:	b083      	sub	sp, #12
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	4a07      	ldr	r2, [pc, #28]	@ (8013e2c <IncreaseBufferPointer+0x28>)
 8013e10:	4293      	cmp	r3, r2
 8013e12:	d102      	bne.n	8013e1a <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013e14:	4b06      	ldr	r3, [pc, #24]	@ (8013e30 <IncreaseBufferPointer+0x2c>)
 8013e16:	607b      	str	r3, [r7, #4]
 8013e18:	e002      	b.n	8013e20 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	3304      	adds	r3, #4
 8013e1e:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013e20:	687b      	ldr	r3, [r7, #4]
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	370c      	adds	r7, #12
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bc80      	pop	{r7}
 8013e2a:	4770      	bx	lr
 8013e2c:	20001b50 	.word	0x20001b50
 8013e30:	20001b40 	.word	0x20001b40

08013e34 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013e34:	b480      	push	{r7}
 8013e36:	b083      	sub	sp, #12
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013e3e:	79fb      	ldrb	r3, [r7, #7]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d101      	bne.n	8013e48 <IsListEmpty+0x14>
    {
        return true;
 8013e44:	2301      	movs	r3, #1
 8013e46:	e000      	b.n	8013e4a <IsListEmpty+0x16>
    }
    return false;
 8013e48:	2300      	movs	r3, #0
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	370c      	adds	r7, #12
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bc80      	pop	{r7}
 8013e52:	4770      	bx	lr

08013e54 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013e54:	b480      	push	{r7}
 8013e56:	b083      	sub	sp, #12
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013e5e:	79fb      	ldrb	r3, [r7, #7]
 8013e60:	2b04      	cmp	r3, #4
 8013e62:	d901      	bls.n	8013e68 <IsListFull+0x14>
    {
        return true;
 8013e64:	2301      	movs	r3, #1
 8013e66:	e000      	b.n	8013e6a <IsListFull+0x16>
    }
    return false;
 8013e68:	2300      	movs	r3, #0
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	370c      	adds	r7, #12
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bc80      	pop	{r7}
 8013e72:	4770      	bx	lr

08013e74 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b086      	sub	sp, #24
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	60b9      	str	r1, [r7, #8]
 8013e7e:	607a      	str	r2, [r7, #4]
 8013e80:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8013e82:	68bb      	ldr	r3, [r7, #8]
 8013e84:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013e86:	4b13      	ldr	r3, [pc, #76]	@ (8013ed4 <GetElement+0x60>)
 8013e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7ff ffd1 	bl	8013e34 <IsListEmpty>
 8013e92:	4603      	mov	r3, r0
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d001      	beq.n	8013e9c <GetElement+0x28>
    {
        return NULL;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	e017      	b.n	8013ecc <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	74fb      	strb	r3, [r7, #19]
 8013ea0:	e00d      	b.n	8013ebe <GetElement+0x4a>
    {
        if( element->Request == request )
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	7bfa      	ldrb	r2, [r7, #15]
 8013ea8:	429a      	cmp	r2, r3
 8013eaa:	d101      	bne.n	8013eb0 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	e00d      	b.n	8013ecc <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013eb0:	6978      	ldr	r0, [r7, #20]
 8013eb2:	f7ff ffa7 	bl	8013e04 <IncreaseBufferPointer>
 8013eb6:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013eb8:	7cfb      	ldrb	r3, [r7, #19]
 8013eba:	3301      	adds	r3, #1
 8013ebc:	74fb      	strb	r3, [r7, #19]
 8013ebe:	4b05      	ldr	r3, [pc, #20]	@ (8013ed4 <GetElement+0x60>)
 8013ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013ec4:	7cfa      	ldrb	r2, [r7, #19]
 8013ec6:	429a      	cmp	r2, r3
 8013ec8:	d3eb      	bcc.n	8013ea2 <GetElement+0x2e>
    }

    return NULL;
 8013eca:	2300      	movs	r3, #0
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3718      	adds	r7, #24
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}
 8013ed4:	20001b34 	.word	0x20001b34

08013ed8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8013f14 <LoRaMacConfirmQueueInit+0x3c>)
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8013f14 <LoRaMacConfirmQueueInit+0x3c>)
 8013ee8:	2200      	movs	r2, #0
 8013eea:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013eee:	4b09      	ldr	r3, [pc, #36]	@ (8013f14 <LoRaMacConfirmQueueInit+0x3c>)
 8013ef0:	4a09      	ldr	r2, [pc, #36]	@ (8013f18 <LoRaMacConfirmQueueInit+0x40>)
 8013ef2:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013ef4:	4b07      	ldr	r3, [pc, #28]	@ (8013f14 <LoRaMacConfirmQueueInit+0x3c>)
 8013ef6:	4a08      	ldr	r2, [pc, #32]	@ (8013f18 <LoRaMacConfirmQueueInit+0x40>)
 8013ef8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013efa:	2214      	movs	r2, #20
 8013efc:	21ff      	movs	r1, #255	@ 0xff
 8013efe:	4806      	ldr	r0, [pc, #24]	@ (8013f18 <LoRaMacConfirmQueueInit+0x40>)
 8013f00:	f003 fdc2 	bl	8017a88 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013f04:	4b03      	ldr	r3, [pc, #12]	@ (8013f14 <LoRaMacConfirmQueueInit+0x3c>)
 8013f06:	2201      	movs	r2, #1
 8013f08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8013f0c:	bf00      	nop
 8013f0e:	3708      	adds	r7, #8
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}
 8013f14:	20001b34 	.word	0x20001b34
 8013f18:	20001b40 	.word	0x20001b40

08013f1c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b082      	sub	sp, #8
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013f24:	4b19      	ldr	r3, [pc, #100]	@ (8013f8c <LoRaMacConfirmQueueAdd+0x70>)
 8013f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7ff ff92 	bl	8013e54 <IsListFull>
 8013f30:	4603      	mov	r3, r0
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d001      	beq.n	8013f3a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013f36:	2300      	movs	r3, #0
 8013f38:	e024      	b.n	8013f84 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013f3a:	4b14      	ldr	r3, [pc, #80]	@ (8013f8c <LoRaMacConfirmQueueAdd+0x70>)
 8013f3c:	689b      	ldr	r3, [r3, #8]
 8013f3e:	687a      	ldr	r2, [r7, #4]
 8013f40:	7812      	ldrb	r2, [r2, #0]
 8013f42:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013f44:	4b11      	ldr	r3, [pc, #68]	@ (8013f8c <LoRaMacConfirmQueueAdd+0x70>)
 8013f46:	689b      	ldr	r3, [r3, #8]
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	7852      	ldrb	r2, [r2, #1]
 8013f4c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8013f8c <LoRaMacConfirmQueueAdd+0x70>)
 8013f50:	689b      	ldr	r3, [r3, #8]
 8013f52:	687a      	ldr	r2, [r7, #4]
 8013f54:	78d2      	ldrb	r2, [r2, #3]
 8013f56:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8013f58:	4b0c      	ldr	r3, [pc, #48]	@ (8013f8c <LoRaMacConfirmQueueAdd+0x70>)
 8013f5a:	689b      	ldr	r3, [r3, #8]
 8013f5c:	687a      	ldr	r2, [r7, #4]
 8013f5e:	7892      	ldrb	r2, [r2, #2]
 8013f60:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013f62:	4b0a      	ldr	r3, [pc, #40]	@ (8013f8c <LoRaMacConfirmQueueAdd+0x70>)
 8013f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f68:	3301      	adds	r3, #1
 8013f6a:	b2da      	uxtb	r2, r3
 8013f6c:	4b07      	ldr	r3, [pc, #28]	@ (8013f8c <LoRaMacConfirmQueueAdd+0x70>)
 8013f6e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013f72:	4b06      	ldr	r3, [pc, #24]	@ (8013f8c <LoRaMacConfirmQueueAdd+0x70>)
 8013f74:	689b      	ldr	r3, [r3, #8]
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7ff ff44 	bl	8013e04 <IncreaseBufferPointer>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	4a03      	ldr	r2, [pc, #12]	@ (8013f8c <LoRaMacConfirmQueueAdd+0x70>)
 8013f80:	6093      	str	r3, [r2, #8]

    return true;
 8013f82:	2301      	movs	r3, #1
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	3708      	adds	r7, #8
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}
 8013f8c:	20001b34 	.word	0x20001b34

08013f90 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013f94:	4b0e      	ldr	r3, [pc, #56]	@ (8013fd0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013f96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7ff ff4a 	bl	8013e34 <IsListEmpty>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d001      	beq.n	8013faa <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	e010      	b.n	8013fcc <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013faa:	4b09      	ldr	r3, [pc, #36]	@ (8013fd0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013fb0:	3b01      	subs	r3, #1
 8013fb2:	b2da      	uxtb	r2, r3
 8013fb4:	4b06      	ldr	r3, [pc, #24]	@ (8013fd0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013fb6:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013fba:	4b05      	ldr	r3, [pc, #20]	@ (8013fd0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013fbc:	685b      	ldr	r3, [r3, #4]
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7ff ff20 	bl	8013e04 <IncreaseBufferPointer>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	4a02      	ldr	r2, [pc, #8]	@ (8013fd0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013fc8:	6053      	str	r3, [r2, #4]

    return true;
 8013fca:	2301      	movs	r3, #1
}
 8013fcc:	4618      	mov	r0, r3
 8013fce:	bd80      	pop	{r7, pc}
 8013fd0:	20001b34 	.word	0x20001b34

08013fd4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b084      	sub	sp, #16
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	4603      	mov	r3, r0
 8013fdc:	460a      	mov	r2, r1
 8013fde:	71fb      	strb	r3, [r7, #7]
 8013fe0:	4613      	mov	r3, r2
 8013fe2:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013fe8:	4b10      	ldr	r3, [pc, #64]	@ (801402c <LoRaMacConfirmQueueSetStatus+0x58>)
 8013fea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7ff ff20 	bl	8013e34 <IsListEmpty>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	f083 0301 	eor.w	r3, r3, #1
 8013ffa:	b2db      	uxtb	r3, r3
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d011      	beq.n	8014024 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014000:	4b0a      	ldr	r3, [pc, #40]	@ (801402c <LoRaMacConfirmQueueSetStatus+0x58>)
 8014002:	6859      	ldr	r1, [r3, #4]
 8014004:	4b09      	ldr	r3, [pc, #36]	@ (801402c <LoRaMacConfirmQueueSetStatus+0x58>)
 8014006:	689a      	ldr	r2, [r3, #8]
 8014008:	79bb      	ldrb	r3, [r7, #6]
 801400a:	4618      	mov	r0, r3
 801400c:	f7ff ff32 	bl	8013e74 <GetElement>
 8014010:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d005      	beq.n	8014024 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	79fa      	ldrb	r2, [r7, #7]
 801401c:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	2201      	movs	r2, #1
 8014022:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8014024:	bf00      	nop
 8014026:	3710      	adds	r7, #16
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	20001b34 	.word	0x20001b34

08014030 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	4603      	mov	r3, r0
 8014038:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 801403a:	2300      	movs	r3, #0
 801403c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801403e:	4b10      	ldr	r3, [pc, #64]	@ (8014080 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014044:	4618      	mov	r0, r3
 8014046:	f7ff fef5 	bl	8013e34 <IsListEmpty>
 801404a:	4603      	mov	r3, r0
 801404c:	f083 0301 	eor.w	r3, r3, #1
 8014050:	b2db      	uxtb	r3, r3
 8014052:	2b00      	cmp	r3, #0
 8014054:	d00e      	beq.n	8014074 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014056:	4b0a      	ldr	r3, [pc, #40]	@ (8014080 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014058:	6859      	ldr	r1, [r3, #4]
 801405a:	4b09      	ldr	r3, [pc, #36]	@ (8014080 <LoRaMacConfirmQueueGetStatus+0x50>)
 801405c:	689a      	ldr	r2, [r3, #8]
 801405e:	79fb      	ldrb	r3, [r7, #7]
 8014060:	4618      	mov	r0, r3
 8014062:	f7ff ff07 	bl	8013e74 <GetElement>
 8014066:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d002      	beq.n	8014074 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	785b      	ldrb	r3, [r3, #1]
 8014072:	e000      	b.n	8014076 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014074:	2301      	movs	r3, #1
}
 8014076:	4618      	mov	r0, r3
 8014078:	3710      	adds	r7, #16
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}
 801407e:	bf00      	nop
 8014080:	20001b34 	.word	0x20001b34

08014084 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b084      	sub	sp, #16
 8014088:	af00      	add	r7, sp, #0
 801408a:	4603      	mov	r3, r0
 801408c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801408e:	4b16      	ldr	r3, [pc, #88]	@ (80140e8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014090:	685b      	ldr	r3, [r3, #4]
 8014092:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014094:	4a14      	ldr	r2, [pc, #80]	@ (80140e8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014096:	79fb      	ldrb	r3, [r7, #7]
 8014098:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801409c:	4b12      	ldr	r3, [pc, #72]	@ (80140e8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801409e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7ff fec6 	bl	8013e34 <IsListEmpty>
 80140a8:	4603      	mov	r3, r0
 80140aa:	f083 0301 	eor.w	r3, r3, #1
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d015      	beq.n	80140e0 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	79fa      	ldrb	r2, [r7, #7]
 80140b8:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	78db      	ldrb	r3, [r3, #3]
 80140be:	f083 0301 	eor.w	r3, r3, #1
 80140c2:	b2db      	uxtb	r3, r3
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d002      	beq.n	80140ce <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	2201      	movs	r2, #1
 80140cc:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80140ce:	68f8      	ldr	r0, [r7, #12]
 80140d0:	f7ff fe98 	bl	8013e04 <IncreaseBufferPointer>
 80140d4:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80140d6:	4b04      	ldr	r3, [pc, #16]	@ (80140e8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80140d8:	689b      	ldr	r3, [r3, #8]
 80140da:	68fa      	ldr	r2, [r7, #12]
 80140dc:	429a      	cmp	r2, r3
 80140de:	d1e9      	bne.n	80140b4 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80140e0:	bf00      	nop
 80140e2:	3710      	adds	r7, #16
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	20001b34 	.word	0x20001b34

080140ec <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	4603      	mov	r3, r0
 80140f4:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80140f6:	4b09      	ldr	r3, [pc, #36]	@ (801411c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80140f8:	6859      	ldr	r1, [r3, #4]
 80140fa:	4b08      	ldr	r3, [pc, #32]	@ (801411c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80140fc:	689a      	ldr	r2, [r3, #8]
 80140fe:	79fb      	ldrb	r3, [r7, #7]
 8014100:	4618      	mov	r0, r3
 8014102:	f7ff feb7 	bl	8013e74 <GetElement>
 8014106:	4603      	mov	r3, r0
 8014108:	2b00      	cmp	r3, #0
 801410a:	d001      	beq.n	8014110 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 801410c:	2301      	movs	r3, #1
 801410e:	e000      	b.n	8014112 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8014110:	2300      	movs	r3, #0
}
 8014112:	4618      	mov	r0, r3
 8014114:	3708      	adds	r7, #8
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}
 801411a:	bf00      	nop
 801411c:	20001b34 	.word	0x20001b34

08014120 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b084      	sub	sp, #16
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014128:	4b25      	ldr	r3, [pc, #148]	@ (80141c0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801412a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801412e:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8014130:	2300      	movs	r3, #0
 8014132:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8014134:	f107 0308 	add.w	r3, r7, #8
 8014138:	2204      	movs	r2, #4
 801413a:	2100      	movs	r1, #0
 801413c:	4618      	mov	r0, r3
 801413e:	f003 fca3 	bl	8017a88 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8014142:	2300      	movs	r3, #0
 8014144:	73fb      	strb	r3, [r7, #15]
 8014146:	e032      	b.n	80141ae <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8014148:	4b1d      	ldr	r3, [pc, #116]	@ (80141c0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801414a:	685b      	ldr	r3, [r3, #4]
 801414c:	781a      	ldrb	r2, [r3, #0]
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014152:	4b1b      	ldr	r3, [pc, #108]	@ (80141c0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014154:	685b      	ldr	r3, [r3, #4]
 8014156:	785a      	ldrb	r2, [r3, #1]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801415c:	4b18      	ldr	r3, [pc, #96]	@ (80141c0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801415e:	685b      	ldr	r3, [r3, #4]
 8014160:	789b      	ldrb	r3, [r3, #2]
 8014162:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8014164:	7b7b      	ldrb	r3, [r7, #13]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d005      	beq.n	8014176 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 801416a:	4b15      	ldr	r3, [pc, #84]	@ (80141c0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	689b      	ldr	r3, [r3, #8]
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	4798      	blx	r3
 8014174:	e00b      	b.n	801418e <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8014176:	4b12      	ldr	r3, [pc, #72]	@ (80141c0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014178:	685b      	ldr	r3, [r3, #4]
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801417e:	4b10      	ldr	r3, [pc, #64]	@ (80141c0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	785b      	ldrb	r3, [r3, #1]
 8014184:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8014186:	4b0e      	ldr	r3, [pc, #56]	@ (80141c0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	78db      	ldrb	r3, [r3, #3]
 801418c:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801418e:	f7ff feff 	bl	8013f90 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014192:	7b7b      	ldrb	r3, [r7, #13]
 8014194:	f083 0301 	eor.w	r3, r3, #1
 8014198:	b2db      	uxtb	r3, r3
 801419a:	2b00      	cmp	r3, #0
 801419c:	d004      	beq.n	80141a8 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801419e:	f107 0308 	add.w	r3, r7, #8
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7ff feba 	bl	8013f1c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80141a8:	7bfb      	ldrb	r3, [r7, #15]
 80141aa:	3301      	adds	r3, #1
 80141ac:	73fb      	strb	r3, [r7, #15]
 80141ae:	7bfa      	ldrb	r2, [r7, #15]
 80141b0:	7bbb      	ldrb	r3, [r7, #14]
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d3c8      	bcc.n	8014148 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 80141b6:	bf00      	nop
 80141b8:	bf00      	nop
 80141ba:	3710      	adds	r7, #16
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}
 80141c0:	20001b34 	.word	0x20001b34

080141c4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80141c4:	b480      	push	{r7}
 80141c6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80141c8:	4b03      	ldr	r3, [pc, #12]	@ (80141d8 <LoRaMacConfirmQueueGetCnt+0x14>)
 80141ca:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bc80      	pop	{r7}
 80141d4:	4770      	bx	lr
 80141d6:	bf00      	nop
 80141d8:	20001b34 	.word	0x20001b34

080141dc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80141e0:	4b06      	ldr	r3, [pc, #24]	@ (80141fc <LoRaMacConfirmQueueIsFull+0x20>)
 80141e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80141e6:	4618      	mov	r0, r3
 80141e8:	f7ff fe34 	bl	8013e54 <IsListFull>
 80141ec:	4603      	mov	r3, r0
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d001      	beq.n	80141f6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80141f2:	2301      	movs	r3, #1
 80141f4:	e000      	b.n	80141f8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80141f6:	2300      	movs	r3, #0
    }
}
 80141f8:	4618      	mov	r0, r3
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	20001b34 	.word	0x20001b34

08014200 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b08e      	sub	sp, #56	@ 0x38
 8014204:	af00      	add	r7, sp, #0
 8014206:	60f8      	str	r0, [r7, #12]
 8014208:	607b      	str	r3, [r7, #4]
 801420a:	460b      	mov	r3, r1
 801420c:	817b      	strh	r3, [r7, #10]
 801420e:	4613      	mov	r3, r2
 8014210:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d101      	bne.n	801421c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014218:	2309      	movs	r3, #9
 801421a:	e084      	b.n	8014326 <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 801421c:	2300      	movs	r3, #0
 801421e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8014222:	2301      	movs	r3, #1
 8014224:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8014226:	f107 0320 	add.w	r3, r7, #32
 801422a:	2200      	movs	r2, #0
 801422c:	601a      	str	r2, [r3, #0]
 801422e:	605a      	str	r2, [r3, #4]
 8014230:	609a      	str	r2, [r3, #8]
 8014232:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 8014234:	f107 0310 	add.w	r3, r7, #16
 8014238:	2200      	movs	r2, #0
 801423a:	601a      	str	r2, [r3, #0]
 801423c:	605a      	str	r2, [r3, #4]
 801423e:	609a      	str	r2, [r3, #8]
 8014240:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 8014242:	2301      	movs	r3, #1
 8014244:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8014246:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801424a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	b2db      	uxtb	r3, r3
 8014250:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	0a1b      	lsrs	r3, r3, #8
 8014256:	b2db      	uxtb	r3, r3
 8014258:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	0c1b      	lsrs	r3, r3, #16
 801425e:	b2db      	uxtb	r3, r3
 8014260:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	0e1b      	lsrs	r3, r3, #24
 8014266:	b2db      	uxtb	r3, r3
 8014268:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801426a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801426c:	b2db      	uxtb	r3, r3
 801426e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8014270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014272:	0a1b      	lsrs	r3, r3, #8
 8014274:	b2db      	uxtb	r3, r3
 8014276:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8014278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801427a:	0c1b      	lsrs	r3, r3, #16
 801427c:	b2db      	uxtb	r3, r3
 801427e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014282:	0e1b      	lsrs	r3, r3, #24
 8014284:	b2db      	uxtb	r3, r3
 8014286:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8014288:	e048      	b.n	801431c <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 801428a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801428c:	b2db      	uxtb	r3, r3
 801428e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8014290:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014292:	3301      	adds	r3, #1
 8014294:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014296:	f107 0320 	add.w	r3, r7, #32
 801429a:	7a7a      	ldrb	r2, [r7, #9]
 801429c:	f107 0010 	add.w	r0, r7, #16
 80142a0:	2110      	movs	r1, #16
 80142a2:	f7f8 f9df 	bl	800c664 <SecureElementAesEncrypt>
 80142a6:	4603      	mov	r3, r0
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d001      	beq.n	80142b0 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80142ac:	230e      	movs	r3, #14
 80142ae:	e03a      	b.n	8014326 <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80142b0:	2300      	movs	r3, #0
 80142b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80142b6:	e01e      	b.n	80142f6 <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80142b8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80142bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80142c0:	4413      	add	r3, r2
 80142c2:	461a      	mov	r2, r3
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	4413      	add	r3, r2
 80142c8:	7819      	ldrb	r1, [r3, #0]
 80142ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80142ce:	3338      	adds	r3, #56	@ 0x38
 80142d0:	443b      	add	r3, r7
 80142d2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80142d6:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80142da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80142de:	4403      	add	r3, r0
 80142e0:	4618      	mov	r0, r3
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	4403      	add	r3, r0
 80142e6:	404a      	eors	r2, r1
 80142e8:	b2d2      	uxtb	r2, r2
 80142ea:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80142ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80142f0:	3301      	adds	r3, #1
 80142f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80142f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80142fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80142fe:	2a10      	cmp	r2, #16
 8014300:	bfa8      	it	ge
 8014302:	2210      	movge	r2, #16
 8014304:	b212      	sxth	r2, r2
 8014306:	4293      	cmp	r3, r2
 8014308:	dbd6      	blt.n	80142b8 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 801430a:	897b      	ldrh	r3, [r7, #10]
 801430c:	3b10      	subs	r3, #16
 801430e:	b29b      	uxth	r3, r3
 8014310:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8014312:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014316:	3310      	adds	r3, #16
 8014318:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 801431c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014320:	2b00      	cmp	r3, #0
 8014322:	dcb2      	bgt.n	801428a <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014324:	2300      	movs	r3, #0
}
 8014326:	4618      	mov	r0, r3
 8014328:	3738      	adds	r7, #56	@ 0x38
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}

0801432e <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801432e:	b490      	push	{r4, r7}
 8014330:	b082      	sub	sp, #8
 8014332:	af00      	add	r7, sp, #0
 8014334:	4604      	mov	r4, r0
 8014336:	4608      	mov	r0, r1
 8014338:	4611      	mov	r1, r2
 801433a:	461a      	mov	r2, r3
 801433c:	4623      	mov	r3, r4
 801433e:	80fb      	strh	r3, [r7, #6]
 8014340:	4603      	mov	r3, r0
 8014342:	717b      	strb	r3, [r7, #5]
 8014344:	460b      	mov	r3, r1
 8014346:	713b      	strb	r3, [r7, #4]
 8014348:	4613      	mov	r3, r2
 801434a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d101      	bne.n	8014356 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014352:	2309      	movs	r3, #9
 8014354:	e04e      	b.n	80143f4 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	2249      	movs	r2, #73	@ 0x49
 801435a:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	3301      	adds	r3, #1
 8014360:	2200      	movs	r2, #0
 8014362:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014364:	69bb      	ldr	r3, [r7, #24]
 8014366:	3302      	adds	r3, #2
 8014368:	2200      	movs	r2, #0
 801436a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 801436c:	69bb      	ldr	r3, [r7, #24]
 801436e:	3303      	adds	r3, #3
 8014370:	2200      	movs	r2, #0
 8014372:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014374:	69bb      	ldr	r3, [r7, #24]
 8014376:	3304      	adds	r3, #4
 8014378:	2200      	movs	r2, #0
 801437a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801437c:	69bb      	ldr	r3, [r7, #24]
 801437e:	3305      	adds	r3, #5
 8014380:	78fa      	ldrb	r2, [r7, #3]
 8014382:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014384:	69bb      	ldr	r3, [r7, #24]
 8014386:	3306      	adds	r3, #6
 8014388:	693a      	ldr	r2, [r7, #16]
 801438a:	b2d2      	uxtb	r2, r2
 801438c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	0a1a      	lsrs	r2, r3, #8
 8014392:	69bb      	ldr	r3, [r7, #24]
 8014394:	3307      	adds	r3, #7
 8014396:	b2d2      	uxtb	r2, r2
 8014398:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801439a:	693b      	ldr	r3, [r7, #16]
 801439c:	0c1a      	lsrs	r2, r3, #16
 801439e:	69bb      	ldr	r3, [r7, #24]
 80143a0:	3308      	adds	r3, #8
 80143a2:	b2d2      	uxtb	r2, r2
 80143a4:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80143a6:	693b      	ldr	r3, [r7, #16]
 80143a8:	0e1a      	lsrs	r2, r3, #24
 80143aa:	69bb      	ldr	r3, [r7, #24]
 80143ac:	3309      	adds	r3, #9
 80143ae:	b2d2      	uxtb	r2, r2
 80143b0:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80143b2:	69bb      	ldr	r3, [r7, #24]
 80143b4:	330a      	adds	r3, #10
 80143b6:	697a      	ldr	r2, [r7, #20]
 80143b8:	b2d2      	uxtb	r2, r2
 80143ba:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80143bc:	697b      	ldr	r3, [r7, #20]
 80143be:	0a1a      	lsrs	r2, r3, #8
 80143c0:	69bb      	ldr	r3, [r7, #24]
 80143c2:	330b      	adds	r3, #11
 80143c4:	b2d2      	uxtb	r2, r2
 80143c6:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	0c1a      	lsrs	r2, r3, #16
 80143cc:	69bb      	ldr	r3, [r7, #24]
 80143ce:	330c      	adds	r3, #12
 80143d0:	b2d2      	uxtb	r2, r2
 80143d2:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80143d4:	697b      	ldr	r3, [r7, #20]
 80143d6:	0e1a      	lsrs	r2, r3, #24
 80143d8:	69bb      	ldr	r3, [r7, #24]
 80143da:	330d      	adds	r3, #13
 80143dc:	b2d2      	uxtb	r2, r2
 80143de:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80143e0:	69bb      	ldr	r3, [r7, #24]
 80143e2:	330e      	adds	r3, #14
 80143e4:	2200      	movs	r2, #0
 80143e6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80143e8:	69bb      	ldr	r3, [r7, #24]
 80143ea:	330f      	adds	r3, #15
 80143ec:	88fa      	ldrh	r2, [r7, #6]
 80143ee:	b2d2      	uxtb	r2, r2
 80143f0:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80143f2:	2300      	movs	r3, #0
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	3708      	adds	r7, #8
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bc90      	pop	{r4, r7}
 80143fc:	4770      	bx	lr

080143fe <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80143fe:	b590      	push	{r4, r7, lr}
 8014400:	b08b      	sub	sp, #44	@ 0x2c
 8014402:	af04      	add	r7, sp, #16
 8014404:	6078      	str	r0, [r7, #4]
 8014406:	4608      	mov	r0, r1
 8014408:	4611      	mov	r1, r2
 801440a:	461a      	mov	r2, r3
 801440c:	4603      	mov	r3, r0
 801440e:	807b      	strh	r3, [r7, #2]
 8014410:	460b      	mov	r3, r1
 8014412:	707b      	strb	r3, [r7, #1]
 8014414:	4613      	mov	r3, r2
 8014416:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d002      	beq.n	8014424 <ComputeCmacB0+0x26>
 801441e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014420:	2b00      	cmp	r3, #0
 8014422:	d101      	bne.n	8014428 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014424:	2309      	movs	r3, #9
 8014426:	e024      	b.n	8014472 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014428:	887b      	ldrh	r3, [r7, #2]
 801442a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801442e:	d901      	bls.n	8014434 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014430:	230d      	movs	r3, #13
 8014432:	e01e      	b.n	8014472 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014434:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8014438:	783a      	ldrb	r2, [r7, #0]
 801443a:	7879      	ldrb	r1, [r7, #1]
 801443c:	8878      	ldrh	r0, [r7, #2]
 801443e:	f107 0308 	add.w	r3, r7, #8
 8014442:	9302      	str	r3, [sp, #8]
 8014444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014446:	9301      	str	r3, [sp, #4]
 8014448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801444a:	9300      	str	r3, [sp, #0]
 801444c:	4623      	mov	r3, r4
 801444e:	f7ff ff6e 	bl	801432e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014452:	887a      	ldrh	r2, [r7, #2]
 8014454:	7879      	ldrb	r1, [r7, #1]
 8014456:	f107 0008 	add.w	r0, r7, #8
 801445a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801445c:	9300      	str	r3, [sp, #0]
 801445e:	460b      	mov	r3, r1
 8014460:	6879      	ldr	r1, [r7, #4]
 8014462:	f7f8 f8b9 	bl	800c5d8 <SecureElementComputeAesCmac>
 8014466:	4603      	mov	r3, r0
 8014468:	2b00      	cmp	r3, #0
 801446a:	d001      	beq.n	8014470 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801446c:	230e      	movs	r3, #14
 801446e:	e000      	b.n	8014472 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014470:	2300      	movs	r3, #0
}
 8014472:	4618      	mov	r0, r3
 8014474:	371c      	adds	r7, #28
 8014476:	46bd      	mov	sp, r7
 8014478:	bd90      	pop	{r4, r7, pc}

0801447a <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801447a:	b590      	push	{r4, r7, lr}
 801447c:	b0cd      	sub	sp, #308	@ 0x134
 801447e:	af04      	add	r7, sp, #16
 8014480:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8014484:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8014488:	6020      	str	r0, [r4, #0]
 801448a:	460c      	mov	r4, r1
 801448c:	4610      	mov	r0, r2
 801448e:	4619      	mov	r1, r3
 8014490:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014494:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014498:	4622      	mov	r2, r4
 801449a:	801a      	strh	r2, [r3, #0]
 801449c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80144a0:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80144a4:	4602      	mov	r2, r0
 80144a6:	701a      	strb	r2, [r3, #0]
 80144a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80144ac:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80144b0:	460a      	mov	r2, r1
 80144b2:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80144b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80144b8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d101      	bne.n	80144c6 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80144c2:	2309      	movs	r3, #9
 80144c4:	e063      	b.n	801458e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80144c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80144ca:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80144ce:	881b      	ldrh	r3, [r3, #0]
 80144d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80144d4:	d901      	bls.n	80144da <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80144d6:	230d      	movs	r3, #13
 80144d8:	e059      	b.n	801458e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80144da:	f107 030c 	add.w	r3, r7, #12
 80144de:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80144e2:	2100      	movs	r1, #0
 80144e4:	4618      	mov	r0, r3
 80144e6:	f003 facf 	bl	8017a88 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80144ea:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 80144ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80144f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80144f6:	781a      	ldrb	r2, [r3, #0]
 80144f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80144fc:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014500:	7819      	ldrb	r1, [r3, #0]
 8014502:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014506:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801450a:	8818      	ldrh	r0, [r3, #0]
 801450c:	f107 030c 	add.w	r3, r7, #12
 8014510:	9302      	str	r3, [sp, #8]
 8014512:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014516:	9301      	str	r3, [sp, #4]
 8014518:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801451c:	9300      	str	r3, [sp, #0]
 801451e:	4623      	mov	r3, r4
 8014520:	f7ff ff05 	bl	801432e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014524:	f107 030c 	add.w	r3, r7, #12
 8014528:	3310      	adds	r3, #16
 801452a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801452e:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8014532:	8812      	ldrh	r2, [r2, #0]
 8014534:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8014538:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 801453c:	6809      	ldr	r1, [r1, #0]
 801453e:	4618      	mov	r0, r3
 8014540:	f003 fa67 	bl	8017a12 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014544:	2306      	movs	r3, #6
 8014546:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801454a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801454e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014552:	881b      	ldrh	r3, [r3, #0]
 8014554:	3310      	adds	r3, #16
 8014556:	4619      	mov	r1, r3
 8014558:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801455c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014560:	781b      	ldrb	r3, [r3, #0]
 8014562:	f107 000c 	add.w	r0, r7, #12
 8014566:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801456a:	f7f8 f84f 	bl	800c60c <SecureElementVerifyAesCmac>
 801456e:	4603      	mov	r3, r0
 8014570:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014574:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014578:	2b00      	cmp	r3, #0
 801457a:	d101      	bne.n	8014580 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801457c:	2300      	movs	r3, #0
 801457e:	e006      	b.n	801458e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014580:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014584:	2b01      	cmp	r3, #1
 8014586:	d101      	bne.n	801458c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014588:	2301      	movs	r3, #1
 801458a:	e000      	b.n	801458e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801458c:	230e      	movs	r3, #14
}
 801458e:	4618      	mov	r0, r3
 8014590:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8014594:	46bd      	mov	sp, r7
 8014596:	bd90      	pop	{r4, r7, pc}

08014598 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014598:	b480      	push	{r7}
 801459a:	b085      	sub	sp, #20
 801459c:	af00      	add	r7, sp, #0
 801459e:	4603      	mov	r3, r0
 80145a0:	6039      	str	r1, [r7, #0]
 80145a2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80145a4:	2300      	movs	r3, #0
 80145a6:	73fb      	strb	r3, [r7, #15]
 80145a8:	e011      	b.n	80145ce <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80145aa:	7bfb      	ldrb	r3, [r7, #15]
 80145ac:	4a0c      	ldr	r2, [pc, #48]	@ (80145e0 <GetKeyAddrItem+0x48>)
 80145ae:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80145b2:	79fa      	ldrb	r2, [r7, #7]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d107      	bne.n	80145c8 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80145b8:	7bfb      	ldrb	r3, [r7, #15]
 80145ba:	009b      	lsls	r3, r3, #2
 80145bc:	4a08      	ldr	r2, [pc, #32]	@ (80145e0 <GetKeyAddrItem+0x48>)
 80145be:	441a      	add	r2, r3
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80145c4:	2300      	movs	r3, #0
 80145c6:	e006      	b.n	80145d6 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80145c8:	7bfb      	ldrb	r3, [r7, #15]
 80145ca:	3301      	adds	r3, #1
 80145cc:	73fb      	strb	r3, [r7, #15]
 80145ce:	7bfb      	ldrb	r3, [r7, #15]
 80145d0:	2b01      	cmp	r3, #1
 80145d2:	d9ea      	bls.n	80145aa <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80145d4:	230b      	movs	r3, #11
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	3714      	adds	r7, #20
 80145da:	46bd      	mov	sp, r7
 80145dc:	bc80      	pop	{r7}
 80145de:	4770      	bx	lr
 80145e0:	20000110 	.word	0x20000110

080145e4 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b088      	sub	sp, #32
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	60b9      	str	r1, [r7, #8]
 80145ec:	607a      	str	r2, [r7, #4]
 80145ee:	461a      	mov	r2, r3
 80145f0:	4603      	mov	r3, r0
 80145f2:	73fb      	strb	r3, [r7, #15]
 80145f4:	4613      	mov	r3, r2
 80145f6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80145f8:	f107 0310 	add.w	r3, r7, #16
 80145fc:	2200      	movs	r2, #0
 80145fe:	601a      	str	r2, [r3, #0]
 8014600:	605a      	str	r2, [r3, #4]
 8014602:	609a      	str	r2, [r3, #8]
 8014604:	60da      	str	r2, [r3, #12]

    switch( keyID )
 8014606:	7bfb      	ldrb	r3, [r7, #15]
 8014608:	2b08      	cmp	r3, #8
 801460a:	d002      	beq.n	8014612 <DeriveSessionKey10x+0x2e>
 801460c:	2b09      	cmp	r3, #9
 801460e:	d003      	beq.n	8014618 <DeriveSessionKey10x+0x34>
 8014610:	e005      	b.n	801461e <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8014612:	2301      	movs	r3, #1
 8014614:	743b      	strb	r3, [r7, #16]
            break;
 8014616:	e004      	b.n	8014622 <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8014618:	2302      	movs	r3, #2
 801461a:	743b      	strb	r3, [r7, #16]
            break;
 801461c:	e001      	b.n	8014622 <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801461e:	230a      	movs	r3, #10
 8014620:	e02a      	b.n	8014678 <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	b2db      	uxtb	r3, r3
 8014626:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	0a1b      	lsrs	r3, r3, #8
 801462c:	b2db      	uxtb	r3, r3
 801462e:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	0c1b      	lsrs	r3, r3, #16
 8014634:	b2db      	uxtb	r3, r3
 8014636:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	b2db      	uxtb	r3, r3
 801463c:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	0a1b      	lsrs	r3, r3, #8
 8014642:	b2db      	uxtb	r3, r3
 8014644:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	0c1b      	lsrs	r3, r3, #16
 801464a:	b2db      	uxtb	r3, r3
 801464c:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801464e:	89bb      	ldrh	r3, [r7, #12]
 8014650:	b2db      	uxtb	r3, r3
 8014652:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8014654:	89bb      	ldrh	r3, [r7, #12]
 8014656:	0a1b      	lsrs	r3, r3, #8
 8014658:	b29b      	uxth	r3, r3
 801465a:	b2db      	uxtb	r3, r3
 801465c:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801465e:	7bfa      	ldrb	r2, [r7, #15]
 8014660:	f107 0310 	add.w	r3, r7, #16
 8014664:	2101      	movs	r1, #1
 8014666:	4618      	mov	r0, r3
 8014668:	f7f8 f87c 	bl	800c764 <SecureElementDeriveAndStoreKey>
 801466c:	4603      	mov	r3, r0
 801466e:	2b00      	cmp	r3, #0
 8014670:	d001      	beq.n	8014676 <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014672:	230e      	movs	r3, #14
 8014674:	e000      	b.n	8014678 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014676:	2300      	movs	r3, #0
}
 8014678:	4618      	mov	r0, r3
 801467a:	3720      	adds	r7, #32
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014680:	b480      	push	{r7}
 8014682:	b083      	sub	sp, #12
 8014684:	af00      	add	r7, sp, #0
 8014686:	4603      	mov	r3, r0
 8014688:	6039      	str	r1, [r7, #0]
 801468a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d101      	bne.n	8014696 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014692:	2309      	movs	r3, #9
 8014694:	e029      	b.n	80146ea <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8014696:	79fb      	ldrb	r3, [r7, #7]
 8014698:	3b01      	subs	r3, #1
 801469a:	2b03      	cmp	r3, #3
 801469c:	d822      	bhi.n	80146e4 <GetLastFcntDown+0x64>
 801469e:	a201      	add	r2, pc, #4	@ (adr r2, 80146a4 <GetLastFcntDown+0x24>)
 80146a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146a4:	080146b5 	.word	0x080146b5
 80146a8:	080146c1 	.word	0x080146c1
 80146ac:	080146cd 	.word	0x080146cd
 80146b0:	080146d9 	.word	0x080146d9
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80146b4:	4b0f      	ldr	r3, [pc, #60]	@ (80146f4 <GetLastFcntDown+0x74>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	691a      	ldr	r2, [r3, #16]
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	601a      	str	r2, [r3, #0]
            break;
 80146be:	e013      	b.n	80146e8 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80146c0:	4b0c      	ldr	r3, [pc, #48]	@ (80146f4 <GetLastFcntDown+0x74>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	695a      	ldr	r2, [r3, #20]
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	601a      	str	r2, [r3, #0]
            break;
 80146ca:	e00d      	b.n	80146e8 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80146cc:	4b09      	ldr	r3, [pc, #36]	@ (80146f4 <GetLastFcntDown+0x74>)
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	699a      	ldr	r2, [r3, #24]
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	601a      	str	r2, [r3, #0]
            break;
 80146d6:	e007      	b.n	80146e8 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80146d8:	4b06      	ldr	r3, [pc, #24]	@ (80146f4 <GetLastFcntDown+0x74>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	69da      	ldr	r2, [r3, #28]
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	601a      	str	r2, [r3, #0]
            break;
 80146e2:	e001      	b.n	80146e8 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80146e4:	2305      	movs	r3, #5
 80146e6:	e000      	b.n	80146ea <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80146e8:	2300      	movs	r3, #0
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	370c      	adds	r7, #12
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bc80      	pop	{r7}
 80146f2:	4770      	bx	lr
 80146f4:	20001b58 	.word	0x20001b58

080146f8 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b084      	sub	sp, #16
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	4603      	mov	r3, r0
 8014700:	6039      	str	r1, [r7, #0]
 8014702:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8014704:	2300      	movs	r3, #0
 8014706:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014708:	f107 020c 	add.w	r2, r7, #12
 801470c:	79fb      	ldrb	r3, [r7, #7]
 801470e:	4611      	mov	r1, r2
 8014710:	4618      	mov	r0, r3
 8014712:	f7ff ffb5 	bl	8014680 <GetLastFcntDown>
 8014716:	4603      	mov	r3, r0
 8014718:	2b00      	cmp	r3, #0
 801471a:	d001      	beq.n	8014720 <CheckFCntDown+0x28>
    {
        return false;
 801471c:	2300      	movs	r3, #0
 801471e:	e00a      	b.n	8014736 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	683a      	ldr	r2, [r7, #0]
 8014724:	429a      	cmp	r2, r3
 8014726:	d803      	bhi.n	8014730 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8014728:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801472e:	d101      	bne.n	8014734 <CheckFCntDown+0x3c>
    {
        return true;
 8014730:	2301      	movs	r3, #1
 8014732:	e000      	b.n	8014736 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014734:	2300      	movs	r3, #0
    }
}
 8014736:	4618      	mov	r0, r3
 8014738:	3710      	adds	r7, #16
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}
	...

08014740 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014740:	b480      	push	{r7}
 8014742:	b083      	sub	sp, #12
 8014744:	af00      	add	r7, sp, #0
 8014746:	4603      	mov	r3, r0
 8014748:	6039      	str	r1, [r7, #0]
 801474a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801474c:	79fb      	ldrb	r3, [r7, #7]
 801474e:	3b01      	subs	r3, #1
 8014750:	2b03      	cmp	r3, #3
 8014752:	d82b      	bhi.n	80147ac <UpdateFCntDown+0x6c>
 8014754:	a201      	add	r2, pc, #4	@ (adr r2, 801475c <UpdateFCntDown+0x1c>)
 8014756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801475a:	bf00      	nop
 801475c:	0801476d 	.word	0x0801476d
 8014760:	0801477f 	.word	0x0801477f
 8014764:	08014791 	.word	0x08014791
 8014768:	080147a3 	.word	0x080147a3
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801476c:	4b12      	ldr	r3, [pc, #72]	@ (80147b8 <UpdateFCntDown+0x78>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	683a      	ldr	r2, [r7, #0]
 8014772:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8014774:	4b10      	ldr	r3, [pc, #64]	@ (80147b8 <UpdateFCntDown+0x78>)
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	683a      	ldr	r2, [r7, #0]
 801477a:	621a      	str	r2, [r3, #32]
            break;
 801477c:	e017      	b.n	80147ae <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801477e:	4b0e      	ldr	r3, [pc, #56]	@ (80147b8 <UpdateFCntDown+0x78>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	683a      	ldr	r2, [r7, #0]
 8014784:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8014786:	4b0c      	ldr	r3, [pc, #48]	@ (80147b8 <UpdateFCntDown+0x78>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	683a      	ldr	r2, [r7, #0]
 801478c:	621a      	str	r2, [r3, #32]
            break;
 801478e:	e00e      	b.n	80147ae <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014790:	4b09      	ldr	r3, [pc, #36]	@ (80147b8 <UpdateFCntDown+0x78>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	683a      	ldr	r2, [r7, #0]
 8014796:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8014798:	4b07      	ldr	r3, [pc, #28]	@ (80147b8 <UpdateFCntDown+0x78>)
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	683a      	ldr	r2, [r7, #0]
 801479e:	621a      	str	r2, [r3, #32]
            break;
 80147a0:	e005      	b.n	80147ae <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80147a2:	4b05      	ldr	r3, [pc, #20]	@ (80147b8 <UpdateFCntDown+0x78>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	683a      	ldr	r2, [r7, #0]
 80147a8:	61da      	str	r2, [r3, #28]
            break;
 80147aa:	e000      	b.n	80147ae <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80147ac:	bf00      	nop
    }
}
 80147ae:	bf00      	nop
 80147b0:	370c      	adds	r7, #12
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bc80      	pop	{r7}
 80147b6:	4770      	bx	lr
 80147b8:	20001b58 	.word	0x20001b58

080147bc <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80147bc:	b480      	push	{r7}
 80147be:	b083      	sub	sp, #12
 80147c0:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80147c2:	4b18      	ldr	r3, [pc, #96]	@ (8014824 <ResetFCnts+0x68>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	2200      	movs	r2, #0
 80147c8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80147ca:	4b16      	ldr	r3, [pc, #88]	@ (8014824 <ResetFCnts+0x68>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	f04f 32ff 	mov.w	r2, #4294967295
 80147d2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80147d4:	4b13      	ldr	r3, [pc, #76]	@ (8014824 <ResetFCnts+0x68>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	f04f 32ff 	mov.w	r2, #4294967295
 80147dc:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80147de:	4b11      	ldr	r3, [pc, #68]	@ (8014824 <ResetFCnts+0x68>)
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	f04f 32ff 	mov.w	r2, #4294967295
 80147e6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80147e8:	4b0e      	ldr	r3, [pc, #56]	@ (8014824 <ResetFCnts+0x68>)
 80147ea:	681a      	ldr	r2, [r3, #0]
 80147ec:	4b0d      	ldr	r3, [pc, #52]	@ (8014824 <ResetFCnts+0x68>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	6992      	ldr	r2, [r2, #24]
 80147f2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80147f4:	2300      	movs	r3, #0
 80147f6:	607b      	str	r3, [r7, #4]
 80147f8:	e00b      	b.n	8014812 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80147fa:	4b0a      	ldr	r3, [pc, #40]	@ (8014824 <ResetFCnts+0x68>)
 80147fc:	681a      	ldr	r2, [r3, #0]
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	3306      	adds	r3, #6
 8014802:	009b      	lsls	r3, r3, #2
 8014804:	4413      	add	r3, r2
 8014806:	f04f 32ff 	mov.w	r2, #4294967295
 801480a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	3301      	adds	r3, #1
 8014810:	607b      	str	r3, [r7, #4]
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2b00      	cmp	r3, #0
 8014816:	ddf0      	ble.n	80147fa <ResetFCnts+0x3e>
    }
}
 8014818:	bf00      	nop
 801481a:	bf00      	nop
 801481c:	370c      	adds	r7, #12
 801481e:	46bd      	mov	sp, r7
 8014820:	bc80      	pop	{r7}
 8014822:	4770      	bx	lr
 8014824:	20001b58 	.word	0x20001b58

08014828 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8014828:	b480      	push	{r7}
 801482a:	b083      	sub	sp, #12
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8014830:	4b06      	ldr	r3, [pc, #24]	@ (801484c <IsJoinNonce10xOk+0x24>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	689b      	ldr	r3, [r3, #8]
 8014836:	687a      	ldr	r2, [r7, #4]
 8014838:	429a      	cmp	r2, r3
 801483a:	bf8c      	ite	hi
 801483c:	2301      	movhi	r3, #1
 801483e:	2300      	movls	r3, #0
 8014840:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8014842:	4618      	mov	r0, r3
 8014844:	370c      	adds	r7, #12
 8014846:	46bd      	mov	sp, r7
 8014848:	bc80      	pop	{r7}
 801484a:	4770      	bx	lr
 801484c:	20001b58 	.word	0x20001b58

08014850 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d101      	bne.n	8014862 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801485e:	2308      	movs	r3, #8
 8014860:	e01c      	b.n	801489c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8014862:	4a10      	ldr	r2, [pc, #64]	@ (80148a4 <LoRaMacCryptoInit+0x54>)
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014868:	4b0e      	ldr	r3, [pc, #56]	@ (80148a4 <LoRaMacCryptoInit+0x54>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	2228      	movs	r2, #40	@ 0x28
 801486e:	2100      	movs	r1, #0
 8014870:	4618      	mov	r0, r3
 8014872:	f003 f909 	bl	8017a88 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8014876:	4b0b      	ldr	r3, [pc, #44]	@ (80148a4 <LoRaMacCryptoInit+0x54>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	2201      	movs	r2, #1
 801487c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801487e:	4b09      	ldr	r3, [pc, #36]	@ (80148a4 <LoRaMacCryptoInit+0x54>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	2201      	movs	r2, #1
 8014884:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8014886:	4b07      	ldr	r3, [pc, #28]	@ (80148a4 <LoRaMacCryptoInit+0x54>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	2201      	movs	r2, #1
 801488c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801488e:	4b05      	ldr	r3, [pc, #20]	@ (80148a4 <LoRaMacCryptoInit+0x54>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	2200      	movs	r2, #0
 8014894:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8014896:	f7ff ff91 	bl	80147bc <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801489a:	2300      	movs	r3, #0
}
 801489c:	4618      	mov	r0, r3
 801489e:	3708      	adds	r7, #8
 80148a0:	46bd      	mov	sp, r7
 80148a2:	bd80      	pop	{r7, pc}
 80148a4:	20001b58 	.word	0x20001b58

080148a8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80148a8:	b480      	push	{r7}
 80148aa:	b083      	sub	sp, #12
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80148b0:	4b04      	ldr	r3, [pc, #16]	@ (80148c4 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	687a      	ldr	r2, [r7, #4]
 80148b6:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80148b8:	2300      	movs	r3, #0
}
 80148ba:	4618      	mov	r0, r3
 80148bc:	370c      	adds	r7, #12
 80148be:	46bd      	mov	sp, r7
 80148c0:	bc80      	pop	{r7}
 80148c2:	4770      	bx	lr
 80148c4:	20001b58 	.word	0x20001b58

080148c8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80148c8:	b480      	push	{r7}
 80148ca:	b083      	sub	sp, #12
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d101      	bne.n	80148da <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80148d6:	2309      	movs	r3, #9
 80148d8:	e006      	b.n	80148e8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80148da:	4b06      	ldr	r3, [pc, #24]	@ (80148f4 <LoRaMacCryptoGetFCntUp+0x2c>)
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	68db      	ldr	r3, [r3, #12]
 80148e0:	1c5a      	adds	r2, r3, #1
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80148e6:	2300      	movs	r3, #0
}
 80148e8:	4618      	mov	r0, r3
 80148ea:	370c      	adds	r7, #12
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bc80      	pop	{r7}
 80148f0:	4770      	bx	lr
 80148f2:	bf00      	nop
 80148f4:	20001b58 	.word	0x20001b58

080148f8 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b088      	sub	sp, #32
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	4603      	mov	r3, r0
 8014900:	60b9      	str	r1, [r7, #8]
 8014902:	607a      	str	r2, [r7, #4]
 8014904:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8014906:	2300      	movs	r3, #0
 8014908:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801490a:	2300      	movs	r3, #0
 801490c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801490e:	2312      	movs	r3, #18
 8014910:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d101      	bne.n	801491c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014918:	2309      	movs	r3, #9
 801491a:	e035      	b.n	8014988 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801491c:	f107 0214 	add.w	r2, r7, #20
 8014920:	7bfb      	ldrb	r3, [r7, #15]
 8014922:	4611      	mov	r1, r2
 8014924:	4618      	mov	r0, r3
 8014926:	f7ff feab 	bl	8014680 <GetLastFcntDown>
 801492a:	4603      	mov	r3, r0
 801492c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801492e:	7efb      	ldrb	r3, [r7, #27]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d001      	beq.n	8014938 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8014934:	7efb      	ldrb	r3, [r7, #27]
 8014936:	e027      	b.n	8014988 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801493e:	d103      	bne.n	8014948 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	68ba      	ldr	r2, [r7, #8]
 8014944:	601a      	str	r2, [r3, #0]
 8014946:	e01e      	b.n	8014986 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8014948:	697b      	ldr	r3, [r7, #20]
 801494a:	b29b      	uxth	r3, r3
 801494c:	68ba      	ldr	r2, [r7, #8]
 801494e:	1ad3      	subs	r3, r2, r3
 8014950:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8014952:	69fb      	ldr	r3, [r7, #28]
 8014954:	2b00      	cmp	r3, #0
 8014956:	dd05      	ble.n	8014964 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8014958:	697a      	ldr	r2, [r7, #20]
 801495a:	69fb      	ldr	r3, [r7, #28]
 801495c:	441a      	add	r2, r3
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	601a      	str	r2, [r3, #0]
 8014962:	e010      	b.n	8014986 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d104      	bne.n	8014974 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801496a:	697a      	ldr	r2, [r7, #20]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014970:	2307      	movs	r3, #7
 8014972:	e009      	b.n	8014988 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	0c1b      	lsrs	r3, r3, #16
 8014978:	041b      	lsls	r3, r3, #16
 801497a:	68ba      	ldr	r2, [r7, #8]
 801497c:	4413      	add	r3, r2
 801497e:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014986:	2300      	movs	r3, #0
}
 8014988:	4618      	mov	r0, r3
 801498a:	3720      	adds	r7, #32
 801498c:	46bd      	mov	sp, r7
 801498e:	bd80      	pop	{r7, pc}

08014990 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014990:	b480      	push	{r7}
 8014992:	b085      	sub	sp, #20
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d101      	bne.n	80149a2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801499e:	2309      	movs	r3, #9
 80149a0:	e019      	b.n	80149d6 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80149a2:	2300      	movs	r3, #0
 80149a4:	60fb      	str	r3, [r7, #12]
 80149a6:	e012      	b.n	80149ce <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80149a8:	4b0d      	ldr	r3, [pc, #52]	@ (80149e0 <LoRaMacCryptoSetMulticastReference+0x50>)
 80149aa:	6819      	ldr	r1, [r3, #0]
 80149ac:	68fa      	ldr	r2, [r7, #12]
 80149ae:	4613      	mov	r3, r2
 80149b0:	005b      	lsls	r3, r3, #1
 80149b2:	4413      	add	r3, r2
 80149b4:	011b      	lsls	r3, r3, #4
 80149b6:	461a      	mov	r2, r3
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	4413      	add	r3, r2
 80149bc:	68fa      	ldr	r2, [r7, #12]
 80149be:	3206      	adds	r2, #6
 80149c0:	0092      	lsls	r2, r2, #2
 80149c2:	440a      	add	r2, r1
 80149c4:	3204      	adds	r2, #4
 80149c6:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	3301      	adds	r3, #1
 80149cc:	60fb      	str	r3, [r7, #12]
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	dde9      	ble.n	80149a8 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80149d4:	2300      	movs	r3, #0
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3714      	adds	r7, #20
 80149da:	46bd      	mov	sp, r7
 80149dc:	bc80      	pop	{r7}
 80149de:	4770      	bx	lr
 80149e0:	20001b58 	.word	0x20001b58

080149e4 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b082      	sub	sp, #8
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	4603      	mov	r3, r0
 80149ec:	6039      	str	r1, [r7, #0]
 80149ee:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80149f0:	79fb      	ldrb	r3, [r7, #7]
 80149f2:	6839      	ldr	r1, [r7, #0]
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7f7 fd91 	bl	800c51c <SecureElementSetKey>
 80149fa:	4603      	mov	r3, r0
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d001      	beq.n	8014a04 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a00:	230e      	movs	r3, #14
 8014a02:	e021      	b.n	8014a48 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8014a04:	79fb      	ldrb	r3, [r7, #7]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d11d      	bne.n	8014a46 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014a0a:	4b11      	ldr	r3, [pc, #68]	@ (8014a50 <LoRaMacCryptoSetKey+0x6c>)
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	789b      	ldrb	r3, [r3, #2]
 8014a10:	210b      	movs	r1, #11
 8014a12:	4618      	mov	r0, r3
 8014a14:	f000 fa54 	bl	8014ec0 <LoRaMacCryptoDeriveLifeTimeKey>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d001      	beq.n	8014a22 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a1e:	230e      	movs	r3, #14
 8014a20:	e012      	b.n	8014a48 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014a22:	210c      	movs	r1, #12
 8014a24:	2000      	movs	r0, #0
 8014a26:	f000 fa4b 	bl	8014ec0 <LoRaMacCryptoDeriveLifeTimeKey>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d001      	beq.n	8014a34 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a30:	230e      	movs	r3, #14
 8014a32:	e009      	b.n	8014a48 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014a34:	210a      	movs	r1, #10
 8014a36:	2000      	movs	r0, #0
 8014a38:	f000 fa42 	bl	8014ec0 <LoRaMacCryptoDeriveLifeTimeKey>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d001      	beq.n	8014a46 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a42:	230e      	movs	r3, #14
 8014a44:	e000      	b.n	8014a48 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014a46:	2300      	movs	r3, #0
}
 8014a48:	4618      	mov	r0, r3
 8014a4a:	3708      	adds	r7, #8
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bd80      	pop	{r7, pc}
 8014a50:	20001b58 	.word	0x20001b58

08014a54 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b086      	sub	sp, #24
 8014a58:	af02      	add	r7, sp, #8
 8014a5a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d101      	bne.n	8014a66 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014a62:	2309      	movs	r3, #9
 8014a64:	e02d      	b.n	8014ac2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8014a66:	2301      	movs	r3, #1
 8014a68:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8014a6a:	4b18      	ldr	r3, [pc, #96]	@ (8014acc <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	889a      	ldrh	r2, [r3, #4]
 8014a70:	3201      	adds	r2, #1
 8014a72:	b292      	uxth	r2, r2
 8014a74:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8014a76:	4b15      	ldr	r3, [pc, #84]	@ (8014acc <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	889a      	ldrh	r2, [r3, #4]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f000 fc14 	bl	80152ae <LoRaMacSerializerJoinRequest>
 8014a86:	4603      	mov	r3, r0
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d001      	beq.n	8014a90 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014a8c:	2310      	movs	r3, #16
 8014a8e:	e018      	b.n	8014ac2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	6819      	ldr	r1, [r3, #0]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	3318      	adds	r3, #24
 8014a98:	7bfa      	ldrb	r2, [r7, #15]
 8014a9a:	9300      	str	r3, [sp, #0]
 8014a9c:	4613      	mov	r3, r2
 8014a9e:	2213      	movs	r2, #19
 8014aa0:	2000      	movs	r0, #0
 8014aa2:	f7f7 fd99 	bl	800c5d8 <SecureElementComputeAesCmac>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d001      	beq.n	8014ab0 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014aac:	230e      	movs	r3, #14
 8014aae:	e008      	b.n	8014ac2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014ab0:	6878      	ldr	r0, [r7, #4]
 8014ab2:	f000 fbfc 	bl	80152ae <LoRaMacSerializerJoinRequest>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d001      	beq.n	8014ac0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014abc:	2310      	movs	r3, #16
 8014abe:	e000      	b.n	8014ac2 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014ac0:	2300      	movs	r3, #0
}
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	3710      	adds	r7, #16
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd80      	pop	{r7, pc}
 8014aca:	bf00      	nop
 8014acc:	20001b58 	.word	0x20001b58

08014ad0 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014ad0:	b590      	push	{r4, r7, lr}
 8014ad2:	b097      	sub	sp, #92	@ 0x5c
 8014ad4:	af04      	add	r7, sp, #16
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	60b9      	str	r1, [r7, #8]
 8014ada:	607a      	str	r2, [r7, #4]
 8014adc:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d002      	beq.n	8014aea <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d101      	bne.n	8014aee <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014aea:	2309      	movs	r3, #9
 8014aec:	e0d1      	b.n	8014c92 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014aee:	2312      	movs	r3, #18
 8014af0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8014af4:	f107 0314 	add.w	r3, r7, #20
 8014af8:	2221      	movs	r2, #33	@ 0x21
 8014afa:	2100      	movs	r1, #0
 8014afc:	4618      	mov	r0, r3
 8014afe:	f007 fd5d 	bl	801c5bc <memset>
    uint8_t versionMinor         = 0;
 8014b02:	2300      	movs	r3, #0
 8014b04:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8014b06:	4b65      	ldr	r3, [pc, #404]	@ (8014c9c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	889b      	ldrh	r3, [r3, #4]
 8014b0c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	681c      	ldr	r4, [r3, #0]
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	791b      	ldrb	r3, [r3, #4]
 8014b18:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8014b1c:	7bf8      	ldrb	r0, [r7, #15]
 8014b1e:	f107 0213 	add.w	r2, r7, #19
 8014b22:	9202      	str	r2, [sp, #8]
 8014b24:	f107 0214 	add.w	r2, r7, #20
 8014b28:	9201      	str	r2, [sp, #4]
 8014b2a:	9300      	str	r3, [sp, #0]
 8014b2c:	4623      	mov	r3, r4
 8014b2e:	460a      	mov	r2, r1
 8014b30:	68b9      	ldr	r1, [r7, #8]
 8014b32:	f7f7 fe56 	bl	800c7e2 <SecureElementProcessJoinAccept>
 8014b36:	4603      	mov	r3, r0
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d001      	beq.n	8014b40 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014b3c:	230e      	movs	r3, #14
 8014b3e:	e0a8      	b.n	8014c92 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	6818      	ldr	r0, [r3, #0]
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	791b      	ldrb	r3, [r3, #4]
 8014b48:	461a      	mov	r2, r3
 8014b4a:	f107 0314 	add.w	r3, r7, #20
 8014b4e:	4619      	mov	r1, r3
 8014b50:	f002 ff5f 	bl	8017a12 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f000 f9ed 	bl	8014f34 <LoRaMacParserJoinAccept>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d001      	beq.n	8014b64 <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014b60:	230f      	movs	r3, #15
 8014b62:	e096      	b.n	8014c92 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8014b64:	2300      	movs	r3, #0
 8014b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	799b      	ldrb	r3, [r3, #6]
 8014b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	79db      	ldrb	r3, [r3, #7]
 8014b74:	021b      	lsls	r3, r3, #8
 8014b76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014b78:	4313      	orrs	r3, r2
 8014b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	7a1b      	ldrb	r3, [r3, #8]
 8014b80:	041b      	lsls	r3, r3, #16
 8014b82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014b84:	4313      	orrs	r3, r2
 8014b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8014b88:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014b8a:	f7ff fe4d 	bl	8014828 <IsJoinNonce10xOk>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8014b94:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d010      	beq.n	8014bbe <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8014b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8014c9c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014ba2:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8014ba4:	7cfb      	ldrb	r3, [r7, #19]
 8014ba6:	210b      	movs	r1, #11
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f000 f989 	bl	8014ec0 <LoRaMacCryptoDeriveLifeTimeKey>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014bb4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d005      	beq.n	8014bc8 <LoRaMacCryptoHandleJoinAccept+0xf8>
 8014bbc:	e001      	b.n	8014bc2 <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014bbe:	2303      	movs	r3, #3
 8014bc0:	e067      	b.n	8014c92 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 8014bc2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014bc6:	e064      	b.n	8014c92 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8014bc8:	210c      	movs	r1, #12
 8014bca:	2000      	movs	r0, #0
 8014bcc:	f000 f978 	bl	8014ec0 <LoRaMacCryptoDeriveLifeTimeKey>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014bd6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d002      	beq.n	8014be4 <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 8014bde:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014be2:	e056      	b.n	8014c92 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8014be4:	210a      	movs	r1, #10
 8014be6:	2000      	movs	r0, #0
 8014be8:	f000 f96a 	bl	8014ec0 <LoRaMacCryptoDeriveLifeTimeKey>
 8014bec:	4603      	mov	r3, r0
 8014bee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014bf2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d002      	beq.n	8014c00 <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 8014bfa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014bfe:	e048      	b.n	8014c92 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	7a5b      	ldrb	r3, [r3, #9]
 8014c04:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	7a9b      	ldrb	r3, [r3, #10]
 8014c0a:	021b      	lsls	r3, r3, #8
 8014c0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c0e:	4313      	orrs	r3, r2
 8014c10:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	7adb      	ldrb	r3, [r3, #11]
 8014c16:	041b      	lsls	r3, r3, #16
 8014c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c1a:	4313      	orrs	r3, r2
 8014c1c:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014c1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014c22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014c26:	2009      	movs	r0, #9
 8014c28:	f7ff fcdc 	bl	80145e4 <DeriveSessionKey10x>
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014c32:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d002      	beq.n	8014c40 <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 8014c3a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014c3e:	e028      	b.n	8014c92 <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8014c40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014c44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014c48:	2008      	movs	r0, #8
 8014c4a:	f7ff fccb 	bl	80145e4 <DeriveSessionKey10x>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014c54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d002      	beq.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 8014c5c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014c60:	e017      	b.n	8014c92 <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8014c62:	4b0e      	ldr	r3, [pc, #56]	@ (8014c9c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	7cfa      	ldrb	r2, [r7, #19]
 8014c68:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8014c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8014c9c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014c72:	4b0a      	ldr	r3, [pc, #40]	@ (8014c9c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	f04f 32ff 	mov.w	r2, #4294967295
 8014c7a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014c7c:	4b07      	ldr	r3, [pc, #28]	@ (8014c9c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	f04f 32ff 	mov.w	r2, #4294967295
 8014c84:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014c86:	4b05      	ldr	r3, [pc, #20]	@ (8014c9c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8014c8e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014c90:	2300      	movs	r3, #0
}
 8014c92:	4618      	mov	r0, r3
 8014c94:	374c      	adds	r7, #76	@ 0x4c
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bd90      	pop	{r4, r7, pc}
 8014c9a:	bf00      	nop
 8014c9c:	20001b58 	.word	0x20001b58

08014ca0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014ca0:	b590      	push	{r4, r7, lr}
 8014ca2:	b08b      	sub	sp, #44	@ 0x2c
 8014ca4:	af04      	add	r7, sp, #16
 8014ca6:	60f8      	str	r0, [r7, #12]
 8014ca8:	607b      	str	r3, [r7, #4]
 8014caa:	460b      	mov	r3, r1
 8014cac:	72fb      	strb	r3, [r7, #11]
 8014cae:	4613      	mov	r3, r2
 8014cb0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014cb2:	2312      	movs	r3, #18
 8014cb4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014cb6:	2309      	movs	r3, #9
 8014cb8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d101      	bne.n	8014cc4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014cc0:	2309      	movs	r3, #9
 8014cc2:	e05e      	b.n	8014d82 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014cc4:	4b31      	ldr	r3, [pc, #196]	@ (8014d8c <LoRaMacCryptoSecureMessage+0xec>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	68db      	ldr	r3, [r3, #12]
 8014cca:	68fa      	ldr	r2, [r7, #12]
 8014ccc:	429a      	cmp	r2, r3
 8014cce:	d201      	bcs.n	8014cd4 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014cd0:	2306      	movs	r3, #6
 8014cd2:	e056      	b.n	8014d82 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d101      	bne.n	8014ce2 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014cde:	2308      	movs	r3, #8
 8014ce0:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8014ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8014d8c <LoRaMacCryptoSecureMessage+0xec>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	68db      	ldr	r3, [r3, #12]
 8014ce8:	68fa      	ldr	r2, [r7, #12]
 8014cea:	429a      	cmp	r2, r3
 8014cec:	d916      	bls.n	8014d1c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014cf8:	b219      	sxth	r1, r3
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	689c      	ldr	r4, [r3, #8]
 8014cfe:	7dfa      	ldrb	r2, [r7, #23]
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	9301      	str	r3, [sp, #4]
 8014d04:	2300      	movs	r3, #0
 8014d06:	9300      	str	r3, [sp, #0]
 8014d08:	4623      	mov	r3, r4
 8014d0a:	f7ff fa79 	bl	8014200 <PayloadEncrypt>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014d12:	7dbb      	ldrb	r3, [r7, #22]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d001      	beq.n	8014d1c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8014d18:	7dbb      	ldrb	r3, [r7, #22]
 8014d1a:	e032      	b.n	8014d82 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f000 fb48 	bl	80153b2 <LoRaMacSerializerData>
 8014d22:	4603      	mov	r3, r0
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d001      	beq.n	8014d2c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014d28:	2310      	movs	r3, #16
 8014d2a:	e02a      	b.n	8014d82 <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014d2c:	2308      	movs	r3, #8
 8014d2e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6818      	ldr	r0, [r3, #0]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	791b      	ldrb	r3, [r3, #4]
 8014d38:	3b04      	subs	r3, #4
 8014d3a:	b299      	uxth	r1, r3
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	689b      	ldr	r3, [r3, #8]
 8014d40:	687a      	ldr	r2, [r7, #4]
 8014d42:	322c      	adds	r2, #44	@ 0x2c
 8014d44:	7dfc      	ldrb	r4, [r7, #23]
 8014d46:	9203      	str	r2, [sp, #12]
 8014d48:	68fa      	ldr	r2, [r7, #12]
 8014d4a:	9202      	str	r2, [sp, #8]
 8014d4c:	9301      	str	r3, [sp, #4]
 8014d4e:	2300      	movs	r3, #0
 8014d50:	9300      	str	r3, [sp, #0]
 8014d52:	2300      	movs	r3, #0
 8014d54:	4622      	mov	r2, r4
 8014d56:	f7ff fb52 	bl	80143fe <ComputeCmacB0>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014d5e:	7dbb      	ldrb	r3, [r7, #22]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d001      	beq.n	8014d68 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8014d64:	7dbb      	ldrb	r3, [r7, #22]
 8014d66:	e00c      	b.n	8014d82 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f000 fb22 	bl	80153b2 <LoRaMacSerializerData>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d001      	beq.n	8014d78 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014d74:	2310      	movs	r3, #16
 8014d76:	e004      	b.n	8014d82 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014d78:	4b04      	ldr	r3, [pc, #16]	@ (8014d8c <LoRaMacCryptoSecureMessage+0xec>)
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	68fa      	ldr	r2, [r7, #12]
 8014d7e:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014d80:	2300      	movs	r3, #0
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	371c      	adds	r7, #28
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd90      	pop	{r4, r7, pc}
 8014d8a:	bf00      	nop
 8014d8c:	20001b58 	.word	0x20001b58

08014d90 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014d90:	b590      	push	{r4, r7, lr}
 8014d92:	b08b      	sub	sp, #44	@ 0x2c
 8014d94:	af04      	add	r7, sp, #16
 8014d96:	60b9      	str	r1, [r7, #8]
 8014d98:	607b      	str	r3, [r7, #4]
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	73fb      	strb	r3, [r7, #15]
 8014d9e:	4613      	mov	r3, r2
 8014da0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d101      	bne.n	8014dac <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014da8:	2309      	movs	r3, #9
 8014daa:	e083      	b.n	8014eb4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014dac:	7bbb      	ldrb	r3, [r7, #14]
 8014dae:	6879      	ldr	r1, [r7, #4]
 8014db0:	4618      	mov	r0, r3
 8014db2:	f7ff fca1 	bl	80146f8 <CheckFCntDown>
 8014db6:	4603      	mov	r3, r0
 8014db8:	f083 0301 	eor.w	r3, r3, #1
 8014dbc:	b2db      	uxtb	r3, r3
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d001      	beq.n	8014dc6 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014dc2:	2306      	movs	r3, #6
 8014dc4:	e076      	b.n	8014eb4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014dc6:	2312      	movs	r3, #18
 8014dc8:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014dca:	2309      	movs	r3, #9
 8014dcc:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014dce:	2308      	movs	r3, #8
 8014dd0:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014dd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014dd4:	f000 f979 	bl	80150ca <LoRaMacParserData>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d001      	beq.n	8014de2 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014dde:	230f      	movs	r3, #15
 8014de0:	e068      	b.n	8014eb4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014de2:	f107 0210 	add.w	r2, r7, #16
 8014de6:	7bfb      	ldrb	r3, [r7, #15]
 8014de8:	4611      	mov	r1, r2
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7ff fbd4 	bl	8014598 <GetKeyAddrItem>
 8014df0:	4603      	mov	r3, r0
 8014df2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014df4:	7d7b      	ldrb	r3, [r7, #21]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d001      	beq.n	8014dfe <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014dfa:	7d7b      	ldrb	r3, [r7, #21]
 8014dfc:	e05a      	b.n	8014eb4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	785b      	ldrb	r3, [r3, #1]
 8014e02:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014e04:	693b      	ldr	r3, [r7, #16]
 8014e06:	789b      	ldrb	r3, [r3, #2]
 8014e08:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e0c:	689b      	ldr	r3, [r3, #8]
 8014e0e:	68ba      	ldr	r2, [r7, #8]
 8014e10:	429a      	cmp	r2, r3
 8014e12:	d001      	beq.n	8014e18 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014e14:	2302      	movs	r3, #2
 8014e16:	e04d      	b.n	8014eb4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e1a:	7b1b      	ldrb	r3, [r3, #12]
 8014e1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014e20:	b2db      	uxtb	r3, r3
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	bf14      	ite	ne
 8014e26:	2301      	movne	r3, #1
 8014e28:	2300      	moveq	r3, #0
 8014e2a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014e2c:	4b23      	ldr	r3, [pc, #140]	@ (8014ebc <LoRaMacCryptoUnsecureMessage+0x12c>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	789b      	ldrb	r3, [r3, #2]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d101      	bne.n	8014e3a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014e36:	2300      	movs	r3, #0
 8014e38:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e3c:	6818      	ldr	r0, [r3, #0]
 8014e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e40:	791b      	ldrb	r3, [r3, #4]
 8014e42:	3b04      	subs	r3, #4
 8014e44:	b299      	uxth	r1, r3
 8014e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e4a:	7dbc      	ldrb	r4, [r7, #22]
 8014e4c:	7d3a      	ldrb	r2, [r7, #20]
 8014e4e:	9303      	str	r3, [sp, #12]
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	9302      	str	r3, [sp, #8]
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	9301      	str	r3, [sp, #4]
 8014e58:	2301      	movs	r3, #1
 8014e5a:	9300      	str	r3, [sp, #0]
 8014e5c:	4623      	mov	r3, r4
 8014e5e:	f7ff fb0c 	bl	801447a <VerifyCmacB0>
 8014e62:	4603      	mov	r3, r0
 8014e64:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014e66:	7d7b      	ldrb	r3, [r7, #21]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d001      	beq.n	8014e70 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8014e6c:	7d7b      	ldrb	r3, [r7, #21]
 8014e6e:	e021      	b.n	8014eb4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d101      	bne.n	8014e7e <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014e7a:	2308      	movs	r3, #8
 8014e7c:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e80:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014e88:	b219      	sxth	r1, r3
 8014e8a:	7dfa      	ldrb	r2, [r7, #23]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	9301      	str	r3, [sp, #4]
 8014e90:	2301      	movs	r3, #1
 8014e92:	9300      	str	r3, [sp, #0]
 8014e94:	68bb      	ldr	r3, [r7, #8]
 8014e96:	f7ff f9b3 	bl	8014200 <PayloadEncrypt>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014e9e:	7d7b      	ldrb	r3, [r7, #21]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d001      	beq.n	8014ea8 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8014ea4:	7d7b      	ldrb	r3, [r7, #21]
 8014ea6:	e005      	b.n	8014eb4 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8014ea8:	7bbb      	ldrb	r3, [r7, #14]
 8014eaa:	6879      	ldr	r1, [r7, #4]
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7ff fc47 	bl	8014740 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014eb2:	2300      	movs	r3, #0
}
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	371c      	adds	r7, #28
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	bd90      	pop	{r4, r7, pc}
 8014ebc:	20001b58 	.word	0x20001b58

08014ec0 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b088      	sub	sp, #32
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	460a      	mov	r2, r1
 8014eca:	71fb      	strb	r3, [r7, #7]
 8014ecc:	4613      	mov	r3, r2
 8014ece:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8014ed0:	f107 030c 	add.w	r3, r7, #12
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	601a      	str	r2, [r3, #0]
 8014ed8:	605a      	str	r2, [r3, #4]
 8014eda:	609a      	str	r2, [r3, #8]
 8014edc:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8014ee2:	79bb      	ldrb	r3, [r7, #6]
 8014ee4:	2b0c      	cmp	r3, #12
 8014ee6:	d00b      	beq.n	8014f00 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 8014ee8:	2b0c      	cmp	r3, #12
 8014eea:	dc0f      	bgt.n	8014f0c <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 8014eec:	2b0a      	cmp	r3, #10
 8014eee:	d00a      	beq.n	8014f06 <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 8014ef0:	2b0b      	cmp	r3, #11
 8014ef2:	d10b      	bne.n	8014f0c <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8014ef4:	79fb      	ldrb	r3, [r7, #7]
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d10a      	bne.n	8014f10 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 8014efa:	2320      	movs	r3, #32
 8014efc:	733b      	strb	r3, [r7, #12]
            }
            break;
 8014efe:	e007      	b.n	8014f10 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8014f00:	230b      	movs	r3, #11
 8014f02:	77fb      	strb	r3, [r7, #31]
            break;
 8014f04:	e005      	b.n	8014f12 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8014f06:	2330      	movs	r3, #48	@ 0x30
 8014f08:	733b      	strb	r3, [r7, #12]
            break;
 8014f0a:	e002      	b.n	8014f12 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014f0c:	230a      	movs	r3, #10
 8014f0e:	e00d      	b.n	8014f2c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 8014f10:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014f12:	79ba      	ldrb	r2, [r7, #6]
 8014f14:	7ff9      	ldrb	r1, [r7, #31]
 8014f16:	f107 030c 	add.w	r3, r7, #12
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7f7 fc22 	bl	800c764 <SecureElementDeriveAndStoreKey>
 8014f20:	4603      	mov	r3, r0
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d001      	beq.n	8014f2a <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014f26:	230e      	movs	r3, #14
 8014f28:	e000      	b.n	8014f2c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014f2a:	2300      	movs	r3, #0
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	3720      	adds	r7, #32
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}

08014f34 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b084      	sub	sp, #16
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d003      	beq.n	8014f4a <LoRaMacParserJoinAccept+0x16>
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d101      	bne.n	8014f4e <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014f4a:	2302      	movs	r3, #2
 8014f4c:	e0b9      	b.n	80150c2 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	681a      	ldr	r2, [r3, #0]
 8014f56:	89fb      	ldrh	r3, [r7, #14]
 8014f58:	1c59      	adds	r1, r3, #1
 8014f5a:	81f9      	strh	r1, [r7, #14]
 8014f5c:	4413      	add	r3, r2
 8014f5e:	781a      	ldrb	r2, [r3, #0]
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	1d98      	adds	r0, r3, #6
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	681a      	ldr	r2, [r3, #0]
 8014f6c:	89fb      	ldrh	r3, [r7, #14]
 8014f6e:	4413      	add	r3, r2
 8014f70:	2203      	movs	r2, #3
 8014f72:	4619      	mov	r1, r3
 8014f74:	f002 fd4d 	bl	8017a12 <memcpy1>
    bufItr = bufItr + 3;
 8014f78:	89fb      	ldrh	r3, [r7, #14]
 8014f7a:	3303      	adds	r3, #3
 8014f7c:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f103 0009 	add.w	r0, r3, #9
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	681a      	ldr	r2, [r3, #0]
 8014f88:	89fb      	ldrh	r3, [r7, #14]
 8014f8a:	4413      	add	r3, r2
 8014f8c:	2203      	movs	r2, #3
 8014f8e:	4619      	mov	r1, r3
 8014f90:	f002 fd3f 	bl	8017a12 <memcpy1>
    bufItr = bufItr + 3;
 8014f94:	89fb      	ldrh	r3, [r7, #14]
 8014f96:	3303      	adds	r3, #3
 8014f98:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	681a      	ldr	r2, [r3, #0]
 8014f9e:	89fb      	ldrh	r3, [r7, #14]
 8014fa0:	1c59      	adds	r1, r3, #1
 8014fa2:	81f9      	strh	r1, [r7, #14]
 8014fa4:	4413      	add	r3, r2
 8014fa6:	781b      	ldrb	r3, [r3, #0]
 8014fa8:	461a      	mov	r2, r3
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	681a      	ldr	r2, [r3, #0]
 8014fb2:	89fb      	ldrh	r3, [r7, #14]
 8014fb4:	1c59      	adds	r1, r3, #1
 8014fb6:	81f9      	strh	r1, [r7, #14]
 8014fb8:	4413      	add	r3, r2
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	021a      	lsls	r2, r3, #8
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	68db      	ldr	r3, [r3, #12]
 8014fc2:	431a      	orrs	r2, r3
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681a      	ldr	r2, [r3, #0]
 8014fcc:	89fb      	ldrh	r3, [r7, #14]
 8014fce:	1c59      	adds	r1, r3, #1
 8014fd0:	81f9      	strh	r1, [r7, #14]
 8014fd2:	4413      	add	r3, r2
 8014fd4:	781b      	ldrb	r3, [r3, #0]
 8014fd6:	041a      	lsls	r2, r3, #16
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	68db      	ldr	r3, [r3, #12]
 8014fdc:	431a      	orrs	r2, r3
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	681a      	ldr	r2, [r3, #0]
 8014fe6:	89fb      	ldrh	r3, [r7, #14]
 8014fe8:	1c59      	adds	r1, r3, #1
 8014fea:	81f9      	strh	r1, [r7, #14]
 8014fec:	4413      	add	r3, r2
 8014fee:	781b      	ldrb	r3, [r3, #0]
 8014ff0:	061a      	lsls	r2, r3, #24
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	68db      	ldr	r3, [r3, #12]
 8014ff6:	431a      	orrs	r2, r3
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	681a      	ldr	r2, [r3, #0]
 8015000:	89fb      	ldrh	r3, [r7, #14]
 8015002:	1c59      	adds	r1, r3, #1
 8015004:	81f9      	strh	r1, [r7, #14]
 8015006:	4413      	add	r3, r2
 8015008:	781a      	ldrb	r2, [r3, #0]
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	681a      	ldr	r2, [r3, #0]
 8015012:	89fb      	ldrh	r3, [r7, #14]
 8015014:	1c59      	adds	r1, r3, #1
 8015016:	81f9      	strh	r1, [r7, #14]
 8015018:	4413      	add	r3, r2
 801501a:	781a      	ldrb	r2, [r3, #0]
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	791b      	ldrb	r3, [r3, #4]
 8015024:	1f1a      	subs	r2, r3, #4
 8015026:	89fb      	ldrh	r3, [r7, #14]
 8015028:	1ad3      	subs	r3, r2, r3
 801502a:	2b10      	cmp	r3, #16
 801502c:	d10e      	bne.n	801504c <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f103 0012 	add.w	r0, r3, #18
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681a      	ldr	r2, [r3, #0]
 8015038:	89fb      	ldrh	r3, [r7, #14]
 801503a:	4413      	add	r3, r2
 801503c:	2210      	movs	r2, #16
 801503e:	4619      	mov	r1, r3
 8015040:	f002 fce7 	bl	8017a12 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8015044:	89fb      	ldrh	r3, [r7, #14]
 8015046:	3310      	adds	r3, #16
 8015048:	81fb      	strh	r3, [r7, #14]
 801504a:	e008      	b.n	801505e <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	791b      	ldrb	r3, [r3, #4]
 8015050:	1f1a      	subs	r2, r3, #4
 8015052:	89fb      	ldrh	r3, [r7, #14]
 8015054:	1ad3      	subs	r3, r2, r3
 8015056:	2b00      	cmp	r3, #0
 8015058:	dd01      	ble.n	801505e <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 801505a:	2301      	movs	r3, #1
 801505c:	e031      	b.n	80150c2 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681a      	ldr	r2, [r3, #0]
 8015062:	89fb      	ldrh	r3, [r7, #14]
 8015064:	1c59      	adds	r1, r3, #1
 8015066:	81f9      	strh	r1, [r7, #14]
 8015068:	4413      	add	r3, r2
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	461a      	mov	r2, r3
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	681a      	ldr	r2, [r3, #0]
 8015076:	89fb      	ldrh	r3, [r7, #14]
 8015078:	1c59      	adds	r1, r3, #1
 801507a:	81f9      	strh	r1, [r7, #14]
 801507c:	4413      	add	r3, r2
 801507e:	781b      	ldrb	r3, [r3, #0]
 8015080:	021a      	lsls	r2, r3, #8
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015086:	431a      	orrs	r2, r3
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	681a      	ldr	r2, [r3, #0]
 8015090:	89fb      	ldrh	r3, [r7, #14]
 8015092:	1c59      	adds	r1, r3, #1
 8015094:	81f9      	strh	r1, [r7, #14]
 8015096:	4413      	add	r3, r2
 8015098:	781b      	ldrb	r3, [r3, #0]
 801509a:	041a      	lsls	r2, r3, #16
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150a0:	431a      	orrs	r2, r3
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681a      	ldr	r2, [r3, #0]
 80150aa:	89fb      	ldrh	r3, [r7, #14]
 80150ac:	1c59      	adds	r1, r3, #1
 80150ae:	81f9      	strh	r1, [r7, #14]
 80150b0:	4413      	add	r3, r2
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	061a      	lsls	r2, r3, #24
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150ba:	431a      	orrs	r2, r3
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 80150c0:	2300      	movs	r3, #0
}
 80150c2:	4618      	mov	r0, r3
 80150c4:	3710      	adds	r7, #16
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}

080150ca <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80150ca:	b580      	push	{r7, lr}
 80150cc:	b084      	sub	sp, #16
 80150ce:	af00      	add	r7, sp, #0
 80150d0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d003      	beq.n	80150e0 <LoRaMacParserData+0x16>
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d101      	bne.n	80150e4 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80150e0:	2302      	movs	r3, #2
 80150e2:	e0e0      	b.n	80152a6 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 80150e4:	2300      	movs	r3, #0
 80150e6:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681a      	ldr	r2, [r3, #0]
 80150ec:	89fb      	ldrh	r3, [r7, #14]
 80150ee:	1c59      	adds	r1, r3, #1
 80150f0:	81f9      	strh	r1, [r7, #14]
 80150f2:	4413      	add	r3, r2
 80150f4:	781a      	ldrb	r2, [r3, #0]
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	681a      	ldr	r2, [r3, #0]
 80150fe:	89fb      	ldrh	r3, [r7, #14]
 8015100:	1c59      	adds	r1, r3, #1
 8015102:	81f9      	strh	r1, [r7, #14]
 8015104:	4413      	add	r3, r2
 8015106:	781b      	ldrb	r3, [r3, #0]
 8015108:	461a      	mov	r2, r3
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	681a      	ldr	r2, [r3, #0]
 8015112:	89fb      	ldrh	r3, [r7, #14]
 8015114:	1c59      	adds	r1, r3, #1
 8015116:	81f9      	strh	r1, [r7, #14]
 8015118:	4413      	add	r3, r2
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	021a      	lsls	r2, r3, #8
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	689b      	ldr	r3, [r3, #8]
 8015122:	431a      	orrs	r2, r3
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681a      	ldr	r2, [r3, #0]
 801512c:	89fb      	ldrh	r3, [r7, #14]
 801512e:	1c59      	adds	r1, r3, #1
 8015130:	81f9      	strh	r1, [r7, #14]
 8015132:	4413      	add	r3, r2
 8015134:	781b      	ldrb	r3, [r3, #0]
 8015136:	041a      	lsls	r2, r3, #16
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	689b      	ldr	r3, [r3, #8]
 801513c:	431a      	orrs	r2, r3
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681a      	ldr	r2, [r3, #0]
 8015146:	89fb      	ldrh	r3, [r7, #14]
 8015148:	1c59      	adds	r1, r3, #1
 801514a:	81f9      	strh	r1, [r7, #14]
 801514c:	4413      	add	r3, r2
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	061a      	lsls	r2, r3, #24
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	689b      	ldr	r3, [r3, #8]
 8015156:	431a      	orrs	r2, r3
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	89fb      	ldrh	r3, [r7, #14]
 8015162:	1c59      	adds	r1, r3, #1
 8015164:	81f9      	strh	r1, [r7, #14]
 8015166:	4413      	add	r3, r2
 8015168:	781a      	ldrb	r2, [r3, #0]
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	681a      	ldr	r2, [r3, #0]
 8015172:	89fb      	ldrh	r3, [r7, #14]
 8015174:	1c59      	adds	r1, r3, #1
 8015176:	81f9      	strh	r1, [r7, #14]
 8015178:	4413      	add	r3, r2
 801517a:	781b      	ldrb	r3, [r3, #0]
 801517c:	461a      	mov	r2, r3
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	681a      	ldr	r2, [r3, #0]
 8015186:	89fb      	ldrh	r3, [r7, #14]
 8015188:	1c59      	adds	r1, r3, #1
 801518a:	81f9      	strh	r1, [r7, #14]
 801518c:	4413      	add	r3, r2
 801518e:	781b      	ldrb	r3, [r3, #0]
 8015190:	0219      	lsls	r1, r3, #8
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	89db      	ldrh	r3, [r3, #14]
 8015196:	b21a      	sxth	r2, r3
 8015198:	b20b      	sxth	r3, r1
 801519a:	4313      	orrs	r3, r2
 801519c:	b21b      	sxth	r3, r3
 801519e:	b29a      	uxth	r2, r3
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f103 0010 	add.w	r0, r3, #16
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	681a      	ldr	r2, [r3, #0]
 80151ae:	89fb      	ldrh	r3, [r7, #14]
 80151b0:	18d1      	adds	r1, r2, r3
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	7b1b      	ldrb	r3, [r3, #12]
 80151b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80151ba:	b2db      	uxtb	r3, r3
 80151bc:	461a      	mov	r2, r3
 80151be:	f002 fc28 	bl	8017a12 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	7b1b      	ldrb	r3, [r3, #12]
 80151c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80151ca:	b2db      	uxtb	r3, r3
 80151cc:	461a      	mov	r2, r3
 80151ce:	89fb      	ldrh	r3, [r7, #14]
 80151d0:	4413      	add	r3, r2
 80151d2:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2200      	movs	r2, #0
 80151d8:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2200      	movs	r2, #0
 80151e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	791b      	ldrb	r3, [r3, #4]
 80151e8:	461a      	mov	r2, r3
 80151ea:	89fb      	ldrh	r3, [r7, #14]
 80151ec:	1ad3      	subs	r3, r2, r3
 80151ee:	2b04      	cmp	r3, #4
 80151f0:	dd27      	ble.n	8015242 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681a      	ldr	r2, [r3, #0]
 80151f6:	89fb      	ldrh	r3, [r7, #14]
 80151f8:	1c59      	adds	r1, r3, #1
 80151fa:	81f9      	strh	r1, [r7, #14]
 80151fc:	4413      	add	r3, r2
 80151fe:	781a      	ldrb	r2, [r3, #0]
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	791a      	ldrb	r2, [r3, #4]
 801520a:	89fb      	ldrh	r3, [r7, #14]
 801520c:	b2db      	uxtb	r3, r3
 801520e:	1ad3      	subs	r3, r2, r3
 8015210:	b2db      	uxtb	r3, r3
 8015212:	3b04      	subs	r3, #4
 8015214:	b2da      	uxtb	r2, r3
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	681a      	ldr	r2, [r3, #0]
 8015224:	89fb      	ldrh	r3, [r7, #14]
 8015226:	18d1      	adds	r1, r2, r3
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801522e:	461a      	mov	r2, r3
 8015230:	f002 fbef 	bl	8017a12 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801523a:	461a      	mov	r2, r3
 801523c:	89fb      	ldrh	r3, [r7, #14]
 801523e:	4413      	add	r3, r2
 8015240:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	681a      	ldr	r2, [r3, #0]
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	791b      	ldrb	r3, [r3, #4]
 801524a:	3b04      	subs	r3, #4
 801524c:	4413      	add	r3, r2
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	461a      	mov	r2, r3
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	6819      	ldr	r1, [r3, #0]
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	791b      	ldrb	r3, [r3, #4]
 8015262:	3b03      	subs	r3, #3
 8015264:	440b      	add	r3, r1
 8015266:	781b      	ldrb	r3, [r3, #0]
 8015268:	021b      	lsls	r3, r3, #8
 801526a:	431a      	orrs	r2, r3
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	6819      	ldr	r1, [r3, #0]
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	791b      	ldrb	r3, [r3, #4]
 801527c:	3b02      	subs	r3, #2
 801527e:	440b      	add	r3, r1
 8015280:	781b      	ldrb	r3, [r3, #0]
 8015282:	041b      	lsls	r3, r3, #16
 8015284:	431a      	orrs	r2, r3
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	6819      	ldr	r1, [r3, #0]
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	791b      	ldrb	r3, [r3, #4]
 8015296:	3b01      	subs	r3, #1
 8015298:	440b      	add	r3, r1
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	061b      	lsls	r3, r3, #24
 801529e:	431a      	orrs	r2, r3
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80152a4:	2300      	movs	r3, #0
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	3710      	adds	r7, #16
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}

080152ae <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80152ae:	b580      	push	{r7, lr}
 80152b0:	b084      	sub	sp, #16
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d003      	beq.n	80152c4 <LoRaMacSerializerJoinRequest+0x16>
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d101      	bne.n	80152c8 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80152c4:	2301      	movs	r3, #1
 80152c6:	e070      	b.n	80153aa <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80152c8:	2300      	movs	r3, #0
 80152ca:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	791b      	ldrb	r3, [r3, #4]
 80152d0:	2b16      	cmp	r3, #22
 80152d2:	d801      	bhi.n	80152d8 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80152d4:	2302      	movs	r3, #2
 80152d6:	e068      	b.n	80153aa <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	681a      	ldr	r2, [r3, #0]
 80152dc:	89fb      	ldrh	r3, [r7, #14]
 80152de:	1c59      	adds	r1, r3, #1
 80152e0:	81f9      	strh	r1, [r7, #14]
 80152e2:	4413      	add	r3, r2
 80152e4:	687a      	ldr	r2, [r7, #4]
 80152e6:	7952      	ldrb	r2, [r2, #5]
 80152e8:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	681a      	ldr	r2, [r3, #0]
 80152ee:	89fb      	ldrh	r3, [r7, #14]
 80152f0:	18d0      	adds	r0, r2, r3
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	3306      	adds	r3, #6
 80152f6:	2208      	movs	r2, #8
 80152f8:	4619      	mov	r1, r3
 80152fa:	f002 fba5 	bl	8017a48 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80152fe:	89fb      	ldrh	r3, [r7, #14]
 8015300:	3308      	adds	r3, #8
 8015302:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	681a      	ldr	r2, [r3, #0]
 8015308:	89fb      	ldrh	r3, [r7, #14]
 801530a:	18d0      	adds	r0, r2, r3
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	330e      	adds	r3, #14
 8015310:	2208      	movs	r2, #8
 8015312:	4619      	mov	r1, r3
 8015314:	f002 fb98 	bl	8017a48 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015318:	89fb      	ldrh	r3, [r7, #14]
 801531a:	3308      	adds	r3, #8
 801531c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	8ad9      	ldrh	r1, [r3, #22]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681a      	ldr	r2, [r3, #0]
 8015326:	89fb      	ldrh	r3, [r7, #14]
 8015328:	1c58      	adds	r0, r3, #1
 801532a:	81f8      	strh	r0, [r7, #14]
 801532c:	4413      	add	r3, r2
 801532e:	b2ca      	uxtb	r2, r1
 8015330:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	8adb      	ldrh	r3, [r3, #22]
 8015336:	0a1b      	lsrs	r3, r3, #8
 8015338:	b299      	uxth	r1, r3
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	681a      	ldr	r2, [r3, #0]
 801533e:	89fb      	ldrh	r3, [r7, #14]
 8015340:	1c58      	adds	r0, r3, #1
 8015342:	81f8      	strh	r0, [r7, #14]
 8015344:	4413      	add	r3, r2
 8015346:	b2ca      	uxtb	r2, r1
 8015348:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	6999      	ldr	r1, [r3, #24]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681a      	ldr	r2, [r3, #0]
 8015352:	89fb      	ldrh	r3, [r7, #14]
 8015354:	1c58      	adds	r0, r3, #1
 8015356:	81f8      	strh	r0, [r7, #14]
 8015358:	4413      	add	r3, r2
 801535a:	b2ca      	uxtb	r2, r1
 801535c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	699b      	ldr	r3, [r3, #24]
 8015362:	0a19      	lsrs	r1, r3, #8
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	681a      	ldr	r2, [r3, #0]
 8015368:	89fb      	ldrh	r3, [r7, #14]
 801536a:	1c58      	adds	r0, r3, #1
 801536c:	81f8      	strh	r0, [r7, #14]
 801536e:	4413      	add	r3, r2
 8015370:	b2ca      	uxtb	r2, r1
 8015372:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	699b      	ldr	r3, [r3, #24]
 8015378:	0c19      	lsrs	r1, r3, #16
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	681a      	ldr	r2, [r3, #0]
 801537e:	89fb      	ldrh	r3, [r7, #14]
 8015380:	1c58      	adds	r0, r3, #1
 8015382:	81f8      	strh	r0, [r7, #14]
 8015384:	4413      	add	r3, r2
 8015386:	b2ca      	uxtb	r2, r1
 8015388:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	699b      	ldr	r3, [r3, #24]
 801538e:	0e19      	lsrs	r1, r3, #24
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	681a      	ldr	r2, [r3, #0]
 8015394:	89fb      	ldrh	r3, [r7, #14]
 8015396:	1c58      	adds	r0, r3, #1
 8015398:	81f8      	strh	r0, [r7, #14]
 801539a:	4413      	add	r3, r2
 801539c:	b2ca      	uxtb	r2, r1
 801539e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80153a0:	89fb      	ldrh	r3, [r7, #14]
 80153a2:	b2da      	uxtb	r2, r3
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80153a8:	2300      	movs	r3, #0
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3710      	adds	r7, #16
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}

080153b2 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80153b2:	b580      	push	{r7, lr}
 80153b4:	b084      	sub	sp, #16
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d003      	beq.n	80153c8 <LoRaMacSerializerData+0x16>
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d101      	bne.n	80153cc <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80153c8:	2301      	movs	r3, #1
 80153ca:	e0e3      	b.n	8015594 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 80153cc:	2300      	movs	r3, #0
 80153ce:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80153d0:	2308      	movs	r3, #8
 80153d2:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	7b1b      	ldrb	r3, [r3, #12]
 80153d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80153dc:	b2db      	uxtb	r3, r3
 80153de:	461a      	mov	r2, r3
 80153e0:	89bb      	ldrh	r3, [r7, #12]
 80153e2:	4413      	add	r3, r2
 80153e4:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d002      	beq.n	80153f6 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80153f0:	89bb      	ldrh	r3, [r7, #12]
 80153f2:	3301      	adds	r3, #1
 80153f4:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80153fc:	461a      	mov	r2, r3
 80153fe:	89bb      	ldrh	r3, [r7, #12]
 8015400:	4413      	add	r3, r2
 8015402:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015404:	89bb      	ldrh	r3, [r7, #12]
 8015406:	3304      	adds	r3, #4
 8015408:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	791b      	ldrb	r3, [r3, #4]
 801540e:	461a      	mov	r2, r3
 8015410:	89bb      	ldrh	r3, [r7, #12]
 8015412:	4293      	cmp	r3, r2
 8015414:	d901      	bls.n	801541a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015416:	2302      	movs	r3, #2
 8015418:	e0bc      	b.n	8015594 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	681a      	ldr	r2, [r3, #0]
 801541e:	89fb      	ldrh	r3, [r7, #14]
 8015420:	1c59      	adds	r1, r3, #1
 8015422:	81f9      	strh	r1, [r7, #14]
 8015424:	4413      	add	r3, r2
 8015426:	687a      	ldr	r2, [r7, #4]
 8015428:	7952      	ldrb	r2, [r2, #5]
 801542a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	6899      	ldr	r1, [r3, #8]
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681a      	ldr	r2, [r3, #0]
 8015434:	89fb      	ldrh	r3, [r7, #14]
 8015436:	1c58      	adds	r0, r3, #1
 8015438:	81f8      	strh	r0, [r7, #14]
 801543a:	4413      	add	r3, r2
 801543c:	b2ca      	uxtb	r2, r1
 801543e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	689b      	ldr	r3, [r3, #8]
 8015444:	0a19      	lsrs	r1, r3, #8
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	681a      	ldr	r2, [r3, #0]
 801544a:	89fb      	ldrh	r3, [r7, #14]
 801544c:	1c58      	adds	r0, r3, #1
 801544e:	81f8      	strh	r0, [r7, #14]
 8015450:	4413      	add	r3, r2
 8015452:	b2ca      	uxtb	r2, r1
 8015454:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	689b      	ldr	r3, [r3, #8]
 801545a:	0c19      	lsrs	r1, r3, #16
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681a      	ldr	r2, [r3, #0]
 8015460:	89fb      	ldrh	r3, [r7, #14]
 8015462:	1c58      	adds	r0, r3, #1
 8015464:	81f8      	strh	r0, [r7, #14]
 8015466:	4413      	add	r3, r2
 8015468:	b2ca      	uxtb	r2, r1
 801546a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	689b      	ldr	r3, [r3, #8]
 8015470:	0e19      	lsrs	r1, r3, #24
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681a      	ldr	r2, [r3, #0]
 8015476:	89fb      	ldrh	r3, [r7, #14]
 8015478:	1c58      	adds	r0, r3, #1
 801547a:	81f8      	strh	r0, [r7, #14]
 801547c:	4413      	add	r3, r2
 801547e:	b2ca      	uxtb	r2, r1
 8015480:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	89fb      	ldrh	r3, [r7, #14]
 8015488:	1c59      	adds	r1, r3, #1
 801548a:	81f9      	strh	r1, [r7, #14]
 801548c:	4413      	add	r3, r2
 801548e:	687a      	ldr	r2, [r7, #4]
 8015490:	7b12      	ldrb	r2, [r2, #12]
 8015492:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	89d9      	ldrh	r1, [r3, #14]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	681a      	ldr	r2, [r3, #0]
 801549c:	89fb      	ldrh	r3, [r7, #14]
 801549e:	1c58      	adds	r0, r3, #1
 80154a0:	81f8      	strh	r0, [r7, #14]
 80154a2:	4413      	add	r3, r2
 80154a4:	b2ca      	uxtb	r2, r1
 80154a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	89db      	ldrh	r3, [r3, #14]
 80154ac:	0a1b      	lsrs	r3, r3, #8
 80154ae:	b299      	uxth	r1, r3
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	89fb      	ldrh	r3, [r7, #14]
 80154b6:	1c58      	adds	r0, r3, #1
 80154b8:	81f8      	strh	r0, [r7, #14]
 80154ba:	4413      	add	r3, r2
 80154bc:	b2ca      	uxtb	r2, r1
 80154be:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681a      	ldr	r2, [r3, #0]
 80154c4:	89fb      	ldrh	r3, [r7, #14]
 80154c6:	18d0      	adds	r0, r2, r3
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	f103 0110 	add.w	r1, r3, #16
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	7b1b      	ldrb	r3, [r3, #12]
 80154d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80154d6:	b2db      	uxtb	r3, r3
 80154d8:	461a      	mov	r2, r3
 80154da:	f002 fa9a 	bl	8017a12 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	7b1b      	ldrb	r3, [r3, #12]
 80154e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80154e6:	b2db      	uxtb	r3, r3
 80154e8:	461a      	mov	r2, r3
 80154ea:	89fb      	ldrh	r3, [r7, #14]
 80154ec:	4413      	add	r3, r2
 80154ee:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d009      	beq.n	801550e <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	681a      	ldr	r2, [r3, #0]
 80154fe:	89fb      	ldrh	r3, [r7, #14]
 8015500:	1c59      	adds	r1, r3, #1
 8015502:	81f9      	strh	r1, [r7, #14]
 8015504:	4413      	add	r3, r2
 8015506:	687a      	ldr	r2, [r7, #4]
 8015508:	f892 2020 	ldrb.w	r2, [r2, #32]
 801550c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	681a      	ldr	r2, [r3, #0]
 8015512:	89fb      	ldrh	r3, [r7, #14]
 8015514:	18d0      	adds	r0, r2, r3
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015520:	461a      	mov	r2, r3
 8015522:	f002 fa76 	bl	8017a12 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801552c:	461a      	mov	r2, r3
 801552e:	89fb      	ldrh	r3, [r7, #14]
 8015530:	4413      	add	r3, r2
 8015532:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	89fb      	ldrh	r3, [r7, #14]
 801553e:	1c58      	adds	r0, r3, #1
 8015540:	81f8      	strh	r0, [r7, #14]
 8015542:	4413      	add	r3, r2
 8015544:	b2ca      	uxtb	r2, r1
 8015546:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801554c:	0a19      	lsrs	r1, r3, #8
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681a      	ldr	r2, [r3, #0]
 8015552:	89fb      	ldrh	r3, [r7, #14]
 8015554:	1c58      	adds	r0, r3, #1
 8015556:	81f8      	strh	r0, [r7, #14]
 8015558:	4413      	add	r3, r2
 801555a:	b2ca      	uxtb	r2, r1
 801555c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015562:	0c19      	lsrs	r1, r3, #16
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681a      	ldr	r2, [r3, #0]
 8015568:	89fb      	ldrh	r3, [r7, #14]
 801556a:	1c58      	adds	r0, r3, #1
 801556c:	81f8      	strh	r0, [r7, #14]
 801556e:	4413      	add	r3, r2
 8015570:	b2ca      	uxtb	r2, r1
 8015572:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015578:	0e19      	lsrs	r1, r3, #24
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	681a      	ldr	r2, [r3, #0]
 801557e:	89fb      	ldrh	r3, [r7, #14]
 8015580:	1c58      	adds	r0, r3, #1
 8015582:	81f8      	strh	r0, [r7, #14]
 8015584:	4413      	add	r3, r2
 8015586:	b2ca      	uxtb	r2, r1
 8015588:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801558a:	89fb      	ldrh	r3, [r7, #14]
 801558c:	b2da      	uxtb	r2, r3
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015592:	2300      	movs	r3, #0
}
 8015594:	4618      	mov	r0, r3
 8015596:	3710      	adds	r7, #16
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}

0801559c <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801559c:	b480      	push	{r7}
 801559e:	b083      	sub	sp, #12
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	4603      	mov	r3, r0
 80155a4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80155a6:	79fb      	ldrb	r3, [r7, #7]
 80155a8:	2b05      	cmp	r3, #5
 80155aa:	d101      	bne.n	80155b0 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80155ac:	2301      	movs	r3, #1
 80155ae:	e000      	b.n	80155b2 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80155b0:	2300      	movs	r3, #0
        }
    }
}
 80155b2:	4618      	mov	r0, r3
 80155b4:	370c      	adds	r7, #12
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bc80      	pop	{r7}
 80155ba:	4770      	bx	lr

080155bc <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b084      	sub	sp, #16
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	4603      	mov	r3, r0
 80155c4:	6039      	str	r1, [r7, #0]
 80155c6:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80155c8:	2300      	movs	r3, #0
 80155ca:	60bb      	str	r3, [r7, #8]
    switch( region )
 80155cc:	79fb      	ldrb	r3, [r7, #7]
 80155ce:	2b05      	cmp	r3, #5
 80155d0:	d105      	bne.n	80155de <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80155d2:	6838      	ldr	r0, [r7, #0]
 80155d4:	f001 f8fa 	bl	80167cc <RegionEU868GetPhyParam>
 80155d8:	4603      	mov	r3, r0
 80155da:	60fb      	str	r3, [r7, #12]
 80155dc:	e001      	b.n	80155e2 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	4618      	mov	r0, r3
 80155e6:	3710      	adds	r7, #16
 80155e8:	46bd      	mov	sp, r7
 80155ea:	bd80      	pop	{r7, pc}

080155ec <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b082      	sub	sp, #8
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	4603      	mov	r3, r0
 80155f4:	6039      	str	r1, [r7, #0]
 80155f6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80155f8:	79fb      	ldrb	r3, [r7, #7]
 80155fa:	2b05      	cmp	r3, #5
 80155fc:	d103      	bne.n	8015606 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80155fe:	6838      	ldr	r0, [r7, #0]
 8015600:	f001 fa2a 	bl	8016a58 <RegionEU868SetBandTxDone>
 8015604:	e000      	b.n	8015608 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8015606:	bf00      	nop
        }
    }
}
 8015608:	3708      	adds	r7, #8
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}

0801560e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801560e:	b580      	push	{r7, lr}
 8015610:	b082      	sub	sp, #8
 8015612:	af00      	add	r7, sp, #0
 8015614:	4603      	mov	r3, r0
 8015616:	6039      	str	r1, [r7, #0]
 8015618:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801561a:	79fb      	ldrb	r3, [r7, #7]
 801561c:	2b05      	cmp	r3, #5
 801561e:	d103      	bne.n	8015628 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8015620:	6838      	ldr	r0, [r7, #0]
 8015622:	f001 fa45 	bl	8016ab0 <RegionEU868InitDefaults>
 8015626:	e000      	b.n	801562a <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8015628:	bf00      	nop
        }
    }
}
 801562a:	bf00      	nop
 801562c:	3708      	adds	r7, #8
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}

08015632 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015632:	b580      	push	{r7, lr}
 8015634:	b082      	sub	sp, #8
 8015636:	af00      	add	r7, sp, #0
 8015638:	4603      	mov	r3, r0
 801563a:	6039      	str	r1, [r7, #0]
 801563c:	71fb      	strb	r3, [r7, #7]
 801563e:	4613      	mov	r3, r2
 8015640:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8015642:	79fb      	ldrb	r3, [r7, #7]
 8015644:	2b05      	cmp	r3, #5
 8015646:	d106      	bne.n	8015656 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8015648:	79bb      	ldrb	r3, [r7, #6]
 801564a:	4619      	mov	r1, r3
 801564c:	6838      	ldr	r0, [r7, #0]
 801564e:	f001 facd 	bl	8016bec <RegionEU868Verify>
 8015652:	4603      	mov	r3, r0
 8015654:	e000      	b.n	8015658 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8015656:	2300      	movs	r3, #0
        }
    }
}
 8015658:	4618      	mov	r0, r3
 801565a:	3708      	adds	r7, #8
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}

08015660 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b082      	sub	sp, #8
 8015664:	af00      	add	r7, sp, #0
 8015666:	4603      	mov	r3, r0
 8015668:	6039      	str	r1, [r7, #0]
 801566a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801566c:	79fb      	ldrb	r3, [r7, #7]
 801566e:	2b05      	cmp	r3, #5
 8015670:	d103      	bne.n	801567a <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8015672:	6838      	ldr	r0, [r7, #0]
 8015674:	f001 fb36 	bl	8016ce4 <RegionEU868ApplyCFList>
 8015678:	e000      	b.n	801567c <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801567a:	bf00      	nop
        }
    }
}
 801567c:	bf00      	nop
 801567e:	3708      	adds	r7, #8
 8015680:	46bd      	mov	sp, r7
 8015682:	bd80      	pop	{r7, pc}

08015684 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	4603      	mov	r3, r0
 801568c:	6039      	str	r1, [r7, #0]
 801568e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015690:	79fb      	ldrb	r3, [r7, #7]
 8015692:	2b05      	cmp	r3, #5
 8015694:	d104      	bne.n	80156a0 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8015696:	6838      	ldr	r0, [r7, #0]
 8015698:	f001 fb98 	bl	8016dcc <RegionEU868ChanMaskSet>
 801569c:	4603      	mov	r3, r0
 801569e:	e000      	b.n	80156a2 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80156a0:	2300      	movs	r3, #0
        }
    }
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	3708      	adds	r7, #8
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}

080156aa <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80156aa:	b580      	push	{r7, lr}
 80156ac:	b082      	sub	sp, #8
 80156ae:	af00      	add	r7, sp, #0
 80156b0:	603b      	str	r3, [r7, #0]
 80156b2:	4603      	mov	r3, r0
 80156b4:	71fb      	strb	r3, [r7, #7]
 80156b6:	460b      	mov	r3, r1
 80156b8:	71bb      	strb	r3, [r7, #6]
 80156ba:	4613      	mov	r3, r2
 80156bc:	717b      	strb	r3, [r7, #5]
    switch( region )
 80156be:	79fb      	ldrb	r3, [r7, #7]
 80156c0:	2b05      	cmp	r3, #5
 80156c2:	d107      	bne.n	80156d4 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80156c4:	7979      	ldrb	r1, [r7, #5]
 80156c6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80156ca:	693b      	ldr	r3, [r7, #16]
 80156cc:	683a      	ldr	r2, [r7, #0]
 80156ce:	f001 fba7 	bl	8016e20 <RegionEU868ComputeRxWindowParameters>
 80156d2:	e000      	b.n	80156d6 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80156d4:	bf00      	nop
        }
    }
}
 80156d6:	bf00      	nop
 80156d8:	3708      	adds	r7, #8
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd80      	pop	{r7, pc}

080156de <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80156de:	b580      	push	{r7, lr}
 80156e0:	b084      	sub	sp, #16
 80156e2:	af00      	add	r7, sp, #0
 80156e4:	4603      	mov	r3, r0
 80156e6:	60b9      	str	r1, [r7, #8]
 80156e8:	607a      	str	r2, [r7, #4]
 80156ea:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80156ec:	7bfb      	ldrb	r3, [r7, #15]
 80156ee:	2b05      	cmp	r3, #5
 80156f0:	d105      	bne.n	80156fe <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80156f2:	6879      	ldr	r1, [r7, #4]
 80156f4:	68b8      	ldr	r0, [r7, #8]
 80156f6:	f001 fbed 	bl	8016ed4 <RegionEU868RxConfig>
 80156fa:	4603      	mov	r3, r0
 80156fc:	e000      	b.n	8015700 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80156fe:	2300      	movs	r3, #0
        }
    }
}
 8015700:	4618      	mov	r0, r3
 8015702:	3710      	adds	r7, #16
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}

08015708 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b084      	sub	sp, #16
 801570c:	af00      	add	r7, sp, #0
 801570e:	60b9      	str	r1, [r7, #8]
 8015710:	607a      	str	r2, [r7, #4]
 8015712:	603b      	str	r3, [r7, #0]
 8015714:	4603      	mov	r3, r0
 8015716:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015718:	7bfb      	ldrb	r3, [r7, #15]
 801571a:	2b05      	cmp	r3, #5
 801571c:	d106      	bne.n	801572c <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801571e:	683a      	ldr	r2, [r7, #0]
 8015720:	6879      	ldr	r1, [r7, #4]
 8015722:	68b8      	ldr	r0, [r7, #8]
 8015724:	f001 fca6 	bl	8017074 <RegionEU868TxConfig>
 8015728:	4603      	mov	r3, r0
 801572a:	e000      	b.n	801572e <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801572c:	2300      	movs	r3, #0
        }
    }
}
 801572e:	4618      	mov	r0, r3
 8015730:	3710      	adds	r7, #16
 8015732:	46bd      	mov	sp, r7
 8015734:	bd80      	pop	{r7, pc}

08015736 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015736:	b580      	push	{r7, lr}
 8015738:	b086      	sub	sp, #24
 801573a:	af02      	add	r7, sp, #8
 801573c:	60b9      	str	r1, [r7, #8]
 801573e:	607a      	str	r2, [r7, #4]
 8015740:	603b      	str	r3, [r7, #0]
 8015742:	4603      	mov	r3, r0
 8015744:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015746:	7bfb      	ldrb	r3, [r7, #15]
 8015748:	2b05      	cmp	r3, #5
 801574a:	d109      	bne.n	8015760 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801574c:	69fb      	ldr	r3, [r7, #28]
 801574e:	9300      	str	r3, [sp, #0]
 8015750:	69bb      	ldr	r3, [r7, #24]
 8015752:	683a      	ldr	r2, [r7, #0]
 8015754:	6879      	ldr	r1, [r7, #4]
 8015756:	68b8      	ldr	r0, [r7, #8]
 8015758:	f001 fd5c 	bl	8017214 <RegionEU868LinkAdrReq>
 801575c:	4603      	mov	r3, r0
 801575e:	e000      	b.n	8015762 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015760:	2300      	movs	r3, #0
        }
    }
}
 8015762:	4618      	mov	r0, r3
 8015764:	3710      	adds	r7, #16
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}

0801576a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801576a:	b580      	push	{r7, lr}
 801576c:	b082      	sub	sp, #8
 801576e:	af00      	add	r7, sp, #0
 8015770:	4603      	mov	r3, r0
 8015772:	6039      	str	r1, [r7, #0]
 8015774:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015776:	79fb      	ldrb	r3, [r7, #7]
 8015778:	2b05      	cmp	r3, #5
 801577a:	d104      	bne.n	8015786 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801577c:	6838      	ldr	r0, [r7, #0]
 801577e:	f001 fe6b 	bl	8017458 <RegionEU868RxParamSetupReq>
 8015782:	4603      	mov	r3, r0
 8015784:	e000      	b.n	8015788 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015786:	2300      	movs	r3, #0
        }
    }
}
 8015788:	4618      	mov	r0, r3
 801578a:	3708      	adds	r7, #8
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}

08015790 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	4603      	mov	r3, r0
 8015798:	6039      	str	r1, [r7, #0]
 801579a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801579c:	79fb      	ldrb	r3, [r7, #7]
 801579e:	2b05      	cmp	r3, #5
 80157a0:	d104      	bne.n	80157ac <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80157a2:	6838      	ldr	r0, [r7, #0]
 80157a4:	f001 fe96 	bl	80174d4 <RegionEU868NewChannelReq>
 80157a8:	4603      	mov	r3, r0
 80157aa:	e000      	b.n	80157ae <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80157ac:	2300      	movs	r3, #0
        }
    }
}
 80157ae:	4618      	mov	r0, r3
 80157b0:	3708      	adds	r7, #8
 80157b2:	46bd      	mov	sp, r7
 80157b4:	bd80      	pop	{r7, pc}

080157b6 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80157b6:	b580      	push	{r7, lr}
 80157b8:	b082      	sub	sp, #8
 80157ba:	af00      	add	r7, sp, #0
 80157bc:	4603      	mov	r3, r0
 80157be:	6039      	str	r1, [r7, #0]
 80157c0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80157c2:	79fb      	ldrb	r3, [r7, #7]
 80157c4:	2b05      	cmp	r3, #5
 80157c6:	d104      	bne.n	80157d2 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80157c8:	6838      	ldr	r0, [r7, #0]
 80157ca:	f001 fee1 	bl	8017590 <RegionEU868TxParamSetupReq>
 80157ce:	4603      	mov	r3, r0
 80157d0:	e000      	b.n	80157d4 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80157d2:	2300      	movs	r3, #0
        }
    }
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3708      	adds	r7, #8
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}

080157dc <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b082      	sub	sp, #8
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	4603      	mov	r3, r0
 80157e4:	6039      	str	r1, [r7, #0]
 80157e6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80157e8:	79fb      	ldrb	r3, [r7, #7]
 80157ea:	2b05      	cmp	r3, #5
 80157ec:	d104      	bne.n	80157f8 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80157ee:	6838      	ldr	r0, [r7, #0]
 80157f0:	f001 feda 	bl	80175a8 <RegionEU868DlChannelReq>
 80157f4:	4603      	mov	r3, r0
 80157f6:	e000      	b.n	80157fa <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80157f8:	2300      	movs	r3, #0
        }
    }
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	3708      	adds	r7, #8
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}

08015802 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015802:	b580      	push	{r7, lr}
 8015804:	b082      	sub	sp, #8
 8015806:	af00      	add	r7, sp, #0
 8015808:	4603      	mov	r3, r0
 801580a:	71fb      	strb	r3, [r7, #7]
 801580c:	460b      	mov	r3, r1
 801580e:	71bb      	strb	r3, [r7, #6]
 8015810:	4613      	mov	r3, r2
 8015812:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015814:	79fb      	ldrb	r3, [r7, #7]
 8015816:	2b05      	cmp	r3, #5
 8015818:	d108      	bne.n	801582c <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801581a:	797a      	ldrb	r2, [r7, #5]
 801581c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015820:	4611      	mov	r1, r2
 8015822:	4618      	mov	r0, r3
 8015824:	f001 ff0a 	bl	801763c <RegionEU868AlternateDr>
 8015828:	4603      	mov	r3, r0
 801582a:	e000      	b.n	801582e <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801582c:	2300      	movs	r3, #0
        }
    }
}
 801582e:	4618      	mov	r0, r3
 8015830:	3708      	adds	r7, #8
 8015832:	46bd      	mov	sp, r7
 8015834:	bd80      	pop	{r7, pc}

08015836 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015836:	b580      	push	{r7, lr}
 8015838:	b084      	sub	sp, #16
 801583a:	af00      	add	r7, sp, #0
 801583c:	60b9      	str	r1, [r7, #8]
 801583e:	607a      	str	r2, [r7, #4]
 8015840:	603b      	str	r3, [r7, #0]
 8015842:	4603      	mov	r3, r0
 8015844:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015846:	7bfb      	ldrb	r3, [r7, #15]
 8015848:	2b05      	cmp	r3, #5
 801584a:	d107      	bne.n	801585c <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801584c:	69bb      	ldr	r3, [r7, #24]
 801584e:	683a      	ldr	r2, [r7, #0]
 8015850:	6879      	ldr	r1, [r7, #4]
 8015852:	68b8      	ldr	r0, [r7, #8]
 8015854:	f001 ff02 	bl	801765c <RegionEU868NextChannel>
 8015858:	4603      	mov	r3, r0
 801585a:	e000      	b.n	801585e <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801585c:	2309      	movs	r3, #9
        }
    }
}
 801585e:	4618      	mov	r0, r3
 8015860:	3710      	adds	r7, #16
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}

08015866 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015866:	b590      	push	{r4, r7, lr}
 8015868:	b083      	sub	sp, #12
 801586a:	af00      	add	r7, sp, #0
 801586c:	4604      	mov	r4, r0
 801586e:	4608      	mov	r0, r1
 8015870:	4611      	mov	r1, r2
 8015872:	461a      	mov	r2, r3
 8015874:	4623      	mov	r3, r4
 8015876:	71fb      	strb	r3, [r7, #7]
 8015878:	4603      	mov	r3, r0
 801587a:	71bb      	strb	r3, [r7, #6]
 801587c:	460b      	mov	r3, r1
 801587e:	717b      	strb	r3, [r7, #5]
 8015880:	4613      	mov	r3, r2
 8015882:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015884:	79fb      	ldrb	r3, [r7, #7]
 8015886:	2b05      	cmp	r3, #5
 8015888:	d109      	bne.n	801589e <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801588a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801588e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015892:	79bb      	ldrb	r3, [r7, #6]
 8015894:	4618      	mov	r0, r3
 8015896:	f002 f85b 	bl	8017950 <RegionEU868ApplyDrOffset>
 801589a:	4603      	mov	r3, r0
 801589c:	e000      	b.n	80158a0 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801589e:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	370c      	adds	r7, #12
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd90      	pop	{r4, r7, pc}

080158a8 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80158a8:	b480      	push	{r7}
 80158aa:	b083      	sub	sp, #12
 80158ac:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80158ae:	4b04      	ldr	r3, [pc, #16]	@ (80158c0 <RegionGetVersion+0x18>)
 80158b0:	607b      	str	r3, [r7, #4]

    return version;
 80158b2:	687b      	ldr	r3, [r7, #4]
}
 80158b4:	4618      	mov	r0, r3
 80158b6:	370c      	adds	r7, #12
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bc80      	pop	{r7}
 80158bc:	4770      	bx	lr
 80158be:	bf00      	nop
 80158c0:	02010003 	.word	0x02010003

080158c4 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80158c4:	b480      	push	{r7}
 80158c6:	b087      	sub	sp, #28
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	60f8      	str	r0, [r7, #12]
 80158cc:	4608      	mov	r0, r1
 80158ce:	4639      	mov	r1, r7
 80158d0:	e881 000c 	stmia.w	r1, {r2, r3}
 80158d4:	4603      	mov	r3, r0
 80158d6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	881b      	ldrh	r3, [r3, #0]
 80158dc:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80158de:	7afb      	ldrb	r3, [r7, #11]
 80158e0:	f083 0301 	eor.w	r3, r3, #1
 80158e4:	b2db      	uxtb	r3, r3
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d007      	beq.n	80158fa <GetDutyCycle+0x36>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
        uint16_t joinDutyCycle = BACKOFF_DC_1_HOUR;
 80158ea:	2364      	movs	r3, #100	@ 0x64
 80158ec:	82bb      	strh	r3, [r7, #20]
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80158ee:	8aba      	ldrh	r2, [r7, #20]
 80158f0:	8afb      	ldrh	r3, [r7, #22]
 80158f2:	4293      	cmp	r3, r2
 80158f4:	bf38      	it	cc
 80158f6:	4613      	movcc	r3, r2
 80158f8:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80158fa:	8afb      	ldrh	r3, [r7, #22]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d101      	bne.n	8015904 <GetDutyCycle+0x40>
    {
        dutyCycle = 1;
 8015900:	2301      	movs	r3, #1
 8015902:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8015904:	8afb      	ldrh	r3, [r7, #22]
}
 8015906:	4618      	mov	r0, r3
 8015908:	371c      	adds	r7, #28
 801590a:	46bd      	mov	sp, r7
 801590c:	bc80      	pop	{r7}
 801590e:	4770      	bx	lr

08015910 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b086      	sub	sp, #24
 8015914:	af00      	add	r7, sp, #0
 8015916:	60f8      	str	r0, [r7, #12]
 8015918:	4608      	mov	r0, r1
 801591a:	4639      	mov	r1, r7
 801591c:	e881 000c 	stmia.w	r1, {r2, r3}
 8015920:	4603      	mov	r3, r0
 8015922:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	881b      	ldrh	r3, [r3, #0]
 8015928:	827b      	strh	r3, [r7, #18]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801592a:	4b1a      	ldr	r3, [pc, #104]	@ (8015994 <SetMaxTimeCredits+0x84>)
 801592c:	617b      	str	r3, [r7, #20]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801592e:	7af9      	ldrb	r1, [r7, #11]
 8015930:	463b      	mov	r3, r7
 8015932:	cb0c      	ldmia	r3, {r2, r3}
 8015934:	68f8      	ldr	r0, [r7, #12]
 8015936:	f7ff ffc5 	bl	80158c4 <GetDutyCycle>
 801593a:	4603      	mov	r3, r0
 801593c:	827b      	strh	r3, [r7, #18]

    if( joined == false )
 801593e:	7afb      	ldrb	r3, [r7, #11]
 8015940:	f083 0301 	eor.w	r3, r3, #1
 8015944:	b2db      	uxtb	r3, r3
 8015946:	2b00      	cmp	r3, #0
 8015948:	d011      	beq.n	801596e <SetMaxTimeCredits+0x5e>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
		if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8015950:	d202      	bcs.n	8015958 <SetMaxTimeCredits+0x48>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015952:	4b10      	ldr	r3, [pc, #64]	@ (8015994 <SetMaxTimeCredits+0x84>)
 8015954:	617b      	str	r3, [r7, #20]
 8015956:	e014      	b.n	8015982 <SetMaxTimeCredits+0x72>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 801595e:	4293      	cmp	r3, r2
 8015960:	d802      	bhi.n	8015968 <SetMaxTimeCredits+0x58>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015962:	4b0c      	ldr	r3, [pc, #48]	@ (8015994 <SetMaxTimeCredits+0x84>)
 8015964:	617b      	str	r3, [r7, #20]
 8015966:	e00c      	b.n	8015982 <SetMaxTimeCredits+0x72>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
 8015968:	4b0b      	ldr	r3, [pc, #44]	@ (8015998 <SetMaxTimeCredits+0x88>)
 801596a:	617b      	str	r3, [r7, #20]
 801596c:	e009      	b.n	8015982 <SetMaxTimeCredits+0x72>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 801596e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015972:	f083 0301 	eor.w	r3, r3, #1
 8015976:	b2db      	uxtb	r3, r3
 8015978:	2b00      	cmp	r3, #0
 801597a:	d002      	beq.n	8015982 <SetMaxTimeCredits+0x72>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	697a      	ldr	r2, [r7, #20]
 8015980:	60da      	str	r2, [r3, #12]
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	697a      	ldr	r2, [r7, #20]
 8015986:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8015988:	8a7b      	ldrh	r3, [r7, #18]
}
 801598a:	4618      	mov	r0, r3
 801598c:	3718      	adds	r7, #24
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}
 8015992:	bf00      	nop
 8015994:	0036ee80 	.word	0x0036ee80
 8015998:	000d4670 	.word	0x000d4670

0801599c <UpdateTimeCredits>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime, TimerTime_t lastBandUpdateTime )
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b086      	sub	sp, #24
 80159a0:	af02      	add	r7, sp, #8
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	4608      	mov	r0, r1
 80159a6:	4611      	mov	r1, r2
 80159a8:	461a      	mov	r2, r3
 80159aa:	4603      	mov	r3, r0
 80159ac:	70fb      	strb	r3, [r7, #3]
 80159ae:	460b      	mov	r3, r1
 80159b0:	70bb      	strb	r3, [r7, #2]
 80159b2:	4613      	mov	r3, r2
 80159b4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80159b6:	78f9      	ldrb	r1, [r7, #3]
 80159b8:	787b      	ldrb	r3, [r7, #1]
 80159ba:	9301      	str	r3, [sp, #4]
 80159bc:	78bb      	ldrb	r3, [r7, #2]
 80159be:	9300      	str	r3, [sp, #0]
 80159c0:	f107 0318 	add.w	r3, r7, #24
 80159c4:	cb0c      	ldmia	r3, {r2, r3}
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f7ff ffa2 	bl	8015910 <SetMaxTimeCredits>
 80159cc:	4603      	mov	r3, r0
 80159ce:	817b      	strh	r3, [r7, #10]
                                            dutyCycleEnabled, lastTxIsJoinRequest );
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;
 80159d0:	4b1a      	ldr	r3, [pc, #104]	@ (8015a3c <UpdateTimeCredits+0xa0>)
 80159d2:	60fb      	str	r3, [r7, #12]

    if( joined == false )
 80159d4:	78fb      	ldrb	r3, [r7, #3]
 80159d6:	f083 0301 	eor.w	r3, r3, #1
 80159da:	b2db      	uxtb	r3, r3
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d010      	beq.n	8015a02 <UpdateTimeCredits+0x66>
    {
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80159e0:	69bb      	ldr	r3, [r7, #24]
 80159e2:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80159e6:	d202      	bcs.n	80159ee <UpdateTimeCredits+0x52>
        {
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
 80159e8:	4b14      	ldr	r3, [pc, #80]	@ (8015a3c <UpdateTimeCredits+0xa0>)
 80159ea:	60fb      	str	r3, [r7, #12]
 80159ec:	e009      	b.n	8015a02 <UpdateTimeCredits+0x66>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80159ee:	69bb      	ldr	r3, [r7, #24]
 80159f0:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 80159f4:	4293      	cmp	r3, r2
 80159f6:	d802      	bhi.n	80159fe <UpdateTimeCredits+0x62>
        {
            observation = ( BACKOFF_DUTY_CYCLE_10_HOURS_IN_S * 1000 );
 80159f8:	4b11      	ldr	r3, [pc, #68]	@ (8015a40 <UpdateTimeCredits+0xa4>)
 80159fa:	60fb      	str	r3, [r7, #12]
 80159fc:	e001      	b.n	8015a02 <UpdateTimeCredits+0x66>
        }
        else
        {
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
 80159fe:	4b11      	ldr	r3, [pc, #68]	@ (8015a44 <UpdateTimeCredits+0xa8>)
 8015a00:	60fb      	str	r3, [r7, #12]
        }
    }

    // Apply new credits only if the observation period has been elapsed.
    if( ( observation <= lastBandUpdateTime ) ||
 8015a02:	68fa      	ldr	r2, [r7, #12]
 8015a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a06:	429a      	cmp	r2, r3
 8015a08:	d908      	bls.n	8015a1c <UpdateTimeCredits+0x80>
        ( band->LastMaxCreditAssignTime != observation ) ||
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	689b      	ldr	r3, [r3, #8]
    if( ( observation <= lastBandUpdateTime ) ||
 8015a0e:	68fa      	ldr	r2, [r7, #12]
 8015a10:	429a      	cmp	r2, r3
 8015a12:	d103      	bne.n	8015a1c <UpdateTimeCredits+0x80>
        ( band->LastBandUpdateTime == 0 ) )
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	685b      	ldr	r3, [r3, #4]
        ( band->LastMaxCreditAssignTime != observation ) ||
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d109      	bne.n	8015a30 <UpdateTimeCredits+0x94>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	691a      	ldr	r2, [r3, #16]
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	60da      	str	r2, [r3, #12]
        band->LastBandUpdateTime = currentTime;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	6a3a      	ldr	r2, [r7, #32]
 8015a28:	605a      	str	r2, [r3, #4]
        band->LastMaxCreditAssignTime = observation;
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	68fa      	ldr	r2, [r7, #12]
 8015a2e:	609a      	str	r2, [r3, #8]
    }
    return dutyCycle;
 8015a30:	897b      	ldrh	r3, [r7, #10]
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	3710      	adds	r7, #16
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}
 8015a3a:	bf00      	nop
 8015a3c:	0036ee80 	.word	0x0036ee80
 8015a40:	025c3f80 	.word	0x025c3f80
 8015a44:	07829b80 	.word	0x07829b80

08015a48 <CountChannels>:
    return dutyCycle;
}
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015a48:	b480      	push	{r7}
 8015a4a:	b085      	sub	sp, #20
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	4603      	mov	r3, r0
 8015a50:	460a      	mov	r2, r1
 8015a52:	80fb      	strh	r3, [r7, #6]
 8015a54:	4613      	mov	r3, r2
 8015a56:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	73bb      	strb	r3, [r7, #14]
 8015a60:	e011      	b.n	8015a86 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015a62:	88fa      	ldrh	r2, [r7, #6]
 8015a64:	7bbb      	ldrb	r3, [r7, #14]
 8015a66:	2101      	movs	r1, #1
 8015a68:	fa01 f303 	lsl.w	r3, r1, r3
 8015a6c:	401a      	ands	r2, r3
 8015a6e:	7bbb      	ldrb	r3, [r7, #14]
 8015a70:	2101      	movs	r1, #1
 8015a72:	fa01 f303 	lsl.w	r3, r1, r3
 8015a76:	429a      	cmp	r2, r3
 8015a78:	d102      	bne.n	8015a80 <CountChannels+0x38>
        {
            nbActiveBits++;
 8015a7a:	7bfb      	ldrb	r3, [r7, #15]
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015a80:	7bbb      	ldrb	r3, [r7, #14]
 8015a82:	3301      	adds	r3, #1
 8015a84:	73bb      	strb	r3, [r7, #14]
 8015a86:	7bba      	ldrb	r2, [r7, #14]
 8015a88:	797b      	ldrb	r3, [r7, #5]
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	d3e9      	bcc.n	8015a62 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8015a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	3714      	adds	r7, #20
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bc80      	pop	{r7}
 8015a98:	4770      	bx	lr

08015a9a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015a9a:	b580      	push	{r7, lr}
 8015a9c:	b084      	sub	sp, #16
 8015a9e:	af00      	add	r7, sp, #0
 8015aa0:	6039      	str	r1, [r7, #0]
 8015aa2:	4611      	mov	r1, r2
 8015aa4:	461a      	mov	r2, r3
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	71fb      	strb	r3, [r7, #7]
 8015aaa:	460b      	mov	r3, r1
 8015aac:	71bb      	strb	r3, [r7, #6]
 8015aae:	4613      	mov	r3, r2
 8015ab0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015ab2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015ab6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015aba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f000 f85d 	bl	8015b7e <RegionCommonValueInRange>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d101      	bne.n	8015ace <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015aca:	2300      	movs	r3, #0
 8015acc:	e053      	b.n	8015b76 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015ace:	2300      	movs	r3, #0
 8015ad0:	73fb      	strb	r3, [r7, #15]
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	73bb      	strb	r3, [r7, #14]
 8015ad6:	e049      	b.n	8015b6c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015ad8:	2300      	movs	r3, #0
 8015ada:	737b      	strb	r3, [r7, #13]
 8015adc:	e03d      	b.n	8015b5a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015ade:	7bbb      	ldrb	r3, [r7, #14]
 8015ae0:	005b      	lsls	r3, r3, #1
 8015ae2:	683a      	ldr	r2, [r7, #0]
 8015ae4:	4413      	add	r3, r2
 8015ae6:	881b      	ldrh	r3, [r3, #0]
 8015ae8:	461a      	mov	r2, r3
 8015aea:	7b7b      	ldrb	r3, [r7, #13]
 8015aec:	fa42 f303 	asr.w	r3, r2, r3
 8015af0:	f003 0301 	and.w	r3, r3, #1
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d02d      	beq.n	8015b54 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015af8:	7bfa      	ldrb	r2, [r7, #15]
 8015afa:	7b7b      	ldrb	r3, [r7, #13]
 8015afc:	4413      	add	r3, r2
 8015afe:	461a      	mov	r2, r3
 8015b00:	4613      	mov	r3, r2
 8015b02:	005b      	lsls	r3, r3, #1
 8015b04:	4413      	add	r3, r2
 8015b06:	009b      	lsls	r3, r3, #2
 8015b08:	461a      	mov	r2, r3
 8015b0a:	69fb      	ldr	r3, [r7, #28]
 8015b0c:	4413      	add	r3, r2
 8015b0e:	7a1b      	ldrb	r3, [r3, #8]
 8015b10:	f343 0303 	sbfx	r3, r3, #0, #4
 8015b14:	b25b      	sxtb	r3, r3
 8015b16:	f003 030f 	and.w	r3, r3, #15
 8015b1a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015b1c:	7bfa      	ldrb	r2, [r7, #15]
 8015b1e:	7b7b      	ldrb	r3, [r7, #13]
 8015b20:	4413      	add	r3, r2
 8015b22:	461a      	mov	r2, r3
 8015b24:	4613      	mov	r3, r2
 8015b26:	005b      	lsls	r3, r3, #1
 8015b28:	4413      	add	r3, r2
 8015b2a:	009b      	lsls	r3, r3, #2
 8015b2c:	461a      	mov	r2, r3
 8015b2e:	69fb      	ldr	r3, [r7, #28]
 8015b30:	4413      	add	r3, r2
 8015b32:	7a1b      	ldrb	r3, [r3, #8]
 8015b34:	f343 1303 	sbfx	r3, r3, #4, #4
 8015b38:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015b3a:	f003 030f 	and.w	r3, r3, #15
 8015b3e:	b25a      	sxtb	r2, r3
 8015b40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015b44:	4618      	mov	r0, r3
 8015b46:	f000 f81a 	bl	8015b7e <RegionCommonValueInRange>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	2b01      	cmp	r3, #1
 8015b4e:	d101      	bne.n	8015b54 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015b50:	2301      	movs	r3, #1
 8015b52:	e010      	b.n	8015b76 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015b54:	7b7b      	ldrb	r3, [r7, #13]
 8015b56:	3301      	adds	r3, #1
 8015b58:	737b      	strb	r3, [r7, #13]
 8015b5a:	7b7b      	ldrb	r3, [r7, #13]
 8015b5c:	2b0f      	cmp	r3, #15
 8015b5e:	d9be      	bls.n	8015ade <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015b60:	7bfb      	ldrb	r3, [r7, #15]
 8015b62:	3310      	adds	r3, #16
 8015b64:	73fb      	strb	r3, [r7, #15]
 8015b66:	7bbb      	ldrb	r3, [r7, #14]
 8015b68:	3301      	adds	r3, #1
 8015b6a:	73bb      	strb	r3, [r7, #14]
 8015b6c:	7bfa      	ldrb	r2, [r7, #15]
 8015b6e:	79fb      	ldrb	r3, [r7, #7]
 8015b70:	429a      	cmp	r2, r3
 8015b72:	d3b1      	bcc.n	8015ad8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015b74:	2300      	movs	r3, #0
}
 8015b76:	4618      	mov	r0, r3
 8015b78:	3710      	adds	r7, #16
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}

08015b7e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015b7e:	b480      	push	{r7}
 8015b80:	b083      	sub	sp, #12
 8015b82:	af00      	add	r7, sp, #0
 8015b84:	4603      	mov	r3, r0
 8015b86:	71fb      	strb	r3, [r7, #7]
 8015b88:	460b      	mov	r3, r1
 8015b8a:	71bb      	strb	r3, [r7, #6]
 8015b8c:	4613      	mov	r3, r2
 8015b8e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015b90:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015b94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015b98:	429a      	cmp	r2, r3
 8015b9a:	db07      	blt.n	8015bac <RegionCommonValueInRange+0x2e>
 8015b9c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015ba0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	dc01      	bgt.n	8015bac <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015ba8:	2301      	movs	r3, #1
 8015baa:	e000      	b.n	8015bae <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015bac:	2300      	movs	r3, #0
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	370c      	adds	r7, #12
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bc80      	pop	{r7}
 8015bb6:	4770      	bx	lr

08015bb8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015bb8:	b480      	push	{r7}
 8015bba:	b085      	sub	sp, #20
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
 8015bc0:	460b      	mov	r3, r1
 8015bc2:	70fb      	strb	r3, [r7, #3]
 8015bc4:	4613      	mov	r3, r2
 8015bc6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015bc8:	78fb      	ldrb	r3, [r7, #3]
 8015bca:	091b      	lsrs	r3, r3, #4
 8015bcc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015bce:	78bb      	ldrb	r3, [r7, #2]
 8015bd0:	091b      	lsrs	r3, r3, #4
 8015bd2:	b2db      	uxtb	r3, r3
 8015bd4:	7bfa      	ldrb	r2, [r7, #15]
 8015bd6:	429a      	cmp	r2, r3
 8015bd8:	d803      	bhi.n	8015be2 <RegionCommonChanDisable+0x2a>
 8015bda:	78fa      	ldrb	r2, [r7, #3]
 8015bdc:	78bb      	ldrb	r3, [r7, #2]
 8015bde:	429a      	cmp	r2, r3
 8015be0:	d301      	bcc.n	8015be6 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015be2:	2300      	movs	r3, #0
 8015be4:	e017      	b.n	8015c16 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015be6:	7bfb      	ldrb	r3, [r7, #15]
 8015be8:	005b      	lsls	r3, r3, #1
 8015bea:	687a      	ldr	r2, [r7, #4]
 8015bec:	4413      	add	r3, r2
 8015bee:	881b      	ldrh	r3, [r3, #0]
 8015bf0:	b21a      	sxth	r2, r3
 8015bf2:	78fb      	ldrb	r3, [r7, #3]
 8015bf4:	f003 030f 	and.w	r3, r3, #15
 8015bf8:	2101      	movs	r1, #1
 8015bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8015bfe:	b21b      	sxth	r3, r3
 8015c00:	43db      	mvns	r3, r3
 8015c02:	b21b      	sxth	r3, r3
 8015c04:	4013      	ands	r3, r2
 8015c06:	b219      	sxth	r1, r3
 8015c08:	7bfb      	ldrb	r3, [r7, #15]
 8015c0a:	005b      	lsls	r3, r3, #1
 8015c0c:	687a      	ldr	r2, [r7, #4]
 8015c0e:	4413      	add	r3, r2
 8015c10:	b28a      	uxth	r2, r1
 8015c12:	801a      	strh	r2, [r3, #0]

    return true;
 8015c14:	2301      	movs	r3, #1
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3714      	adds	r7, #20
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bc80      	pop	{r7}
 8015c1e:	4770      	bx	lr

08015c20 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b084      	sub	sp, #16
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
 8015c28:	460b      	mov	r3, r1
 8015c2a:	70fb      	strb	r3, [r7, #3]
 8015c2c:	4613      	mov	r3, r2
 8015c2e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015c30:	2300      	movs	r3, #0
 8015c32:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d101      	bne.n	8015c3e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	e018      	b.n	8015c70 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015c3e:	78fb      	ldrb	r3, [r7, #3]
 8015c40:	73bb      	strb	r3, [r7, #14]
 8015c42:	e010      	b.n	8015c66 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015c44:	7bbb      	ldrb	r3, [r7, #14]
 8015c46:	005b      	lsls	r3, r3, #1
 8015c48:	687a      	ldr	r2, [r7, #4]
 8015c4a:	4413      	add	r3, r2
 8015c4c:	881b      	ldrh	r3, [r3, #0]
 8015c4e:	2110      	movs	r1, #16
 8015c50:	4618      	mov	r0, r3
 8015c52:	f7ff fef9 	bl	8015a48 <CountChannels>
 8015c56:	4603      	mov	r3, r0
 8015c58:	461a      	mov	r2, r3
 8015c5a:	7bfb      	ldrb	r3, [r7, #15]
 8015c5c:	4413      	add	r3, r2
 8015c5e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015c60:	7bbb      	ldrb	r3, [r7, #14]
 8015c62:	3301      	adds	r3, #1
 8015c64:	73bb      	strb	r3, [r7, #14]
 8015c66:	7bba      	ldrb	r2, [r7, #14]
 8015c68:	78bb      	ldrb	r3, [r7, #2]
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d3ea      	bcc.n	8015c44 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	3710      	adds	r7, #16
 8015c74:	46bd      	mov	sp, r7
 8015c76:	bd80      	pop	{r7, pc}

08015c78 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015c78:	b480      	push	{r7}
 8015c7a:	b087      	sub	sp, #28
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	60f8      	str	r0, [r7, #12]
 8015c80:	60b9      	str	r1, [r7, #8]
 8015c82:	4613      	mov	r3, r2
 8015c84:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d016      	beq.n	8015cba <RegionCommonChanMaskCopy+0x42>
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d013      	beq.n	8015cba <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015c92:	2300      	movs	r3, #0
 8015c94:	75fb      	strb	r3, [r7, #23]
 8015c96:	e00c      	b.n	8015cb2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015c98:	7dfb      	ldrb	r3, [r7, #23]
 8015c9a:	005b      	lsls	r3, r3, #1
 8015c9c:	68ba      	ldr	r2, [r7, #8]
 8015c9e:	441a      	add	r2, r3
 8015ca0:	7dfb      	ldrb	r3, [r7, #23]
 8015ca2:	005b      	lsls	r3, r3, #1
 8015ca4:	68f9      	ldr	r1, [r7, #12]
 8015ca6:	440b      	add	r3, r1
 8015ca8:	8812      	ldrh	r2, [r2, #0]
 8015caa:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015cac:	7dfb      	ldrb	r3, [r7, #23]
 8015cae:	3301      	adds	r3, #1
 8015cb0:	75fb      	strb	r3, [r7, #23]
 8015cb2:	7dfa      	ldrb	r2, [r7, #23]
 8015cb4:	79fb      	ldrb	r3, [r7, #7]
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d3ee      	bcc.n	8015c98 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015cba:	bf00      	nop
 8015cbc:	371c      	adds	r7, #28
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bc80      	pop	{r7}
 8015cc2:	4770      	bx	lr

08015cc4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015cc4:	b082      	sub	sp, #8
 8015cc6:	b580      	push	{r7, lr}
 8015cc8:	b086      	sub	sp, #24
 8015cca:	af00      	add	r7, sp, #0
 8015ccc:	60f8      	str	r0, [r7, #12]
 8015cce:	60b9      	str	r1, [r7, #8]
 8015cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8015cd2:	4613      	mov	r3, r2
 8015cd4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015cd6:	79f9      	ldrb	r1, [r7, #7]
 8015cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015cdc:	cb0c      	ldmia	r3, {r2, r3}
 8015cde:	68f8      	ldr	r0, [r7, #12]
 8015ce0:	f7ff fdf0 	bl	80158c4 <GetDutyCycle>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	68da      	ldr	r2, [r3, #12]
 8015cec:	8afb      	ldrh	r3, [r7, #22]
 8015cee:	68b9      	ldr	r1, [r7, #8]
 8015cf0:	fb01 f303 	mul.w	r3, r1, r3
 8015cf4:	429a      	cmp	r2, r3
 8015cf6:	d909      	bls.n	8015d0c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	68da      	ldr	r2, [r3, #12]
 8015cfc:	8afb      	ldrh	r3, [r7, #22]
 8015cfe:	68b9      	ldr	r1, [r7, #8]
 8015d00:	fb01 f303 	mul.w	r3, r1, r3
 8015d04:	1ad2      	subs	r2, r2, r3
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015d0a:	e002      	b.n	8015d12 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	2200      	movs	r2, #0
 8015d10:	60da      	str	r2, [r3, #12]
}
 8015d12:	bf00      	nop
 8015d14:	3718      	adds	r7, #24
 8015d16:	46bd      	mov	sp, r7
 8015d18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015d1c:	b002      	add	sp, #8
 8015d1e:	4770      	bx	lr

08015d20 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d22:	b08f      	sub	sp, #60	@ 0x3c
 8015d24:	af04      	add	r7, sp, #16
 8015d26:	6039      	str	r1, [r7, #0]
 8015d28:	4611      	mov	r1, r2
 8015d2a:	461a      	mov	r2, r3
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	71fb      	strb	r3, [r7, #7]
 8015d30:	460b      	mov	r3, r1
 8015d32:	71bb      	strb	r3, [r7, #6]
 8015d34:	4613      	mov	r3, r2
 8015d36:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015d38:	f04f 33ff 	mov.w	r3, #4294967295
 8015d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015d3e:	f006 f8d5 	bl	801beec <UTIL_TIMER_GetCurrentTime>
 8015d42:	61b8      	str	r0, [r7, #24]
    TimerTime_t creditCosts = 0;
 8015d44:	2300      	movs	r3, #0
 8015d46:	617b      	str	r3, [r7, #20]
    uint16_t dutyCycle = 1;
 8015d48:	2301      	movs	r3, #1
 8015d4a:	827b      	strh	r3, [r7, #18]
    uint8_t validBands = 0;
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015d52:	2300      	movs	r3, #0
 8015d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015d58:	e09c      	b.n	8015e94 <RegionCommonUpdateBandTimeOff+0x174>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
        TimerTime_t elapsedTime = TimerGetElapsedTime( bands[i].LastBandUpdateTime );
 8015d5a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015d5e:	4613      	mov	r3, r2
 8015d60:	005b      	lsls	r3, r3, #1
 8015d62:	4413      	add	r3, r2
 8015d64:	00db      	lsls	r3, r3, #3
 8015d66:	461a      	mov	r2, r3
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	4413      	add	r3, r2
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f006 f8ce 	bl	801bf10 <UTIL_TIMER_GetElapsedTime>
 8015d74:	60f8      	str	r0, [r7, #12]

        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015d76:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015d7a:	4613      	mov	r3, r2
 8015d7c:	005b      	lsls	r3, r3, #1
 8015d7e:	4413      	add	r3, r2
 8015d80:	00db      	lsls	r3, r3, #3
 8015d82:	461a      	mov	r2, r3
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	189c      	adds	r4, r3, r2
 8015d88:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8015d8c:	797a      	ldrb	r2, [r7, #5]
 8015d8e:	79fd      	ldrb	r5, [r7, #7]
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	9303      	str	r3, [sp, #12]
 8015d94:	69bb      	ldr	r3, [r7, #24]
 8015d96:	9302      	str	r3, [sp, #8]
 8015d98:	46ec      	mov	ip, sp
 8015d9a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8015d9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015da2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015da6:	4633      	mov	r3, r6
 8015da8:	4629      	mov	r1, r5
 8015daa:	4620      	mov	r0, r4
 8015dac:	f7ff fdf6 	bl	801599c <UpdateTimeCredits>
 8015db0:	4603      	mov	r3, r0
 8015db2:	827b      	strh	r3, [r7, #18]
                                       currentTime );
#endif

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015db4:	8a7a      	ldrh	r2, [r7, #18]
 8015db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015db8:	fb02 f303 	mul.w	r3, r2, r3
 8015dbc:	617b      	str	r3, [r7, #20]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015dbe:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015dc2:	4613      	mov	r3, r2
 8015dc4:	005b      	lsls	r3, r3, #1
 8015dc6:	4413      	add	r3, r2
 8015dc8:	00db      	lsls	r3, r3, #3
 8015dca:	461a      	mov	r2, r3
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	4413      	add	r3, r2
 8015dd0:	68db      	ldr	r3, [r3, #12]
 8015dd2:	697a      	ldr	r2, [r7, #20]
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	d308      	bcc.n	8015dea <RegionCommonUpdateBandTimeOff+0xca>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015dd8:	797b      	ldrb	r3, [r7, #5]
 8015dda:	f083 0301 	eor.w	r3, r3, #1
 8015dde:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d013      	beq.n	8015e0c <RegionCommonUpdateBandTimeOff+0xec>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015de4:	79fb      	ldrb	r3, [r7, #7]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d010      	beq.n	8015e0c <RegionCommonUpdateBandTimeOff+0xec>
        {
            bands[i].ReadyForTransmission = true;
 8015dea:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015dee:	4613      	mov	r3, r2
 8015df0:	005b      	lsls	r3, r3, #1
 8015df2:	4413      	add	r3, r2
 8015df4:	00db      	lsls	r3, r3, #3
 8015df6:	461a      	mov	r2, r3
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	4413      	add	r3, r2
 8015dfc:	2201      	movs	r2, #1
 8015dfe:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015e00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015e04:	3301      	adds	r3, #1
 8015e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015e0a:	e03e      	b.n	8015e8a <RegionCommonUpdateBandTimeOff+0x16a>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015e0c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015e10:	4613      	mov	r3, r2
 8015e12:	005b      	lsls	r3, r3, #1
 8015e14:	4413      	add	r3, r2
 8015e16:	00db      	lsls	r3, r3, #3
 8015e18:	461a      	mov	r2, r3
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	4413      	add	r3, r2
 8015e1e:	2200      	movs	r2, #0
 8015e20:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8015e22:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015e26:	4613      	mov	r3, r2
 8015e28:	005b      	lsls	r3, r3, #1
 8015e2a:	4413      	add	r3, r2
 8015e2c:	00db      	lsls	r3, r3, #3
 8015e2e:	461a      	mov	r2, r3
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	4413      	add	r3, r2
 8015e34:	691b      	ldr	r3, [r3, #16]
 8015e36:	697a      	ldr	r2, [r7, #20]
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	d226      	bcs.n	8015e8a <RegionCommonUpdateBandTimeOff+0x16a>
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
                TimerTime_t observationTimeDiff = 0;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	61fb      	str	r3, [r7, #28]
                if( bands[i].LastMaxCreditAssignTime >= elapsedTime )
 8015e40:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015e44:	4613      	mov	r3, r2
 8015e46:	005b      	lsls	r3, r3, #1
 8015e48:	4413      	add	r3, r2
 8015e4a:	00db      	lsls	r3, r3, #3
 8015e4c:	461a      	mov	r2, r3
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	4413      	add	r3, r2
 8015e52:	689b      	ldr	r3, [r3, #8]
 8015e54:	68fa      	ldr	r2, [r7, #12]
 8015e56:	429a      	cmp	r2, r3
 8015e58:	d80c      	bhi.n	8015e74 <RegionCommonUpdateBandTimeOff+0x154>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
 8015e5a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015e5e:	4613      	mov	r3, r2
 8015e60:	005b      	lsls	r3, r3, #1
 8015e62:	4413      	add	r3, r2
 8015e64:	00db      	lsls	r3, r3, #3
 8015e66:	461a      	mov	r2, r3
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	4413      	add	r3, r2
 8015e6c:	689a      	ldr	r2, [r3, #8]
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	1ad3      	subs	r3, r2, r3
 8015e72:	61fb      	str	r3, [r7, #28]
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
 8015e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015e76:	69fb      	ldr	r3, [r7, #28]
 8015e78:	4293      	cmp	r3, r2
 8015e7a:	bf28      	it	cs
 8015e7c:	4613      	movcs	r3, r2
 8015e7e:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015e80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015e84:	3301      	adds	r3, #1
 8015e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for( uint8_t i = 0; i < nbBands; i++ )
 8015e8a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015e8e:	3301      	adds	r3, #1
 8015e90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015e94:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015e98:	79bb      	ldrb	r3, [r7, #6]
 8015e9a:	429a      	cmp	r2, r3
 8015e9c:	f4ff af5d 	bcc.w	8015d5a <RegionCommonUpdateBandTimeOff+0x3a>
#endif

        }
    }

    if( validBands == 0 )
 8015ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d102      	bne.n	8015eae <RegionCommonUpdateBandTimeOff+0x18e>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8015eac:	e000      	b.n	8015eb0 <RegionCommonUpdateBandTimeOff+0x190>
    }
    return minTimeToWait;
 8015eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	372c      	adds	r7, #44	@ 0x2c
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015eb8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015eb8:	b480      	push	{r7}
 8015eba:	b085      	sub	sp, #20
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
 8015ec0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	781b      	ldrb	r3, [r3, #0]
 8015eca:	2b03      	cmp	r3, #3
 8015ecc:	d140      	bne.n	8015f50 <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	3301      	adds	r3, #1
 8015ed2:	781b      	ldrb	r3, [r3, #0]
 8015ed4:	b25a      	sxtb	r2, r3
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015eda:	683b      	ldr	r3, [r7, #0]
 8015edc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ee0:	f003 030f 	and.w	r3, r3, #15
 8015ee4:	b25a      	sxtb	r2, r3
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ef0:	b2db      	uxtb	r3, r3
 8015ef2:	091b      	lsrs	r3, r3, #4
 8015ef4:	b2db      	uxtb	r3, r3
 8015ef6:	b25a      	sxtb	r2, r3
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	3302      	adds	r3, #2
 8015f00:	781b      	ldrb	r3, [r3, #0]
 8015f02:	461a      	mov	r2, r3
 8015f04:	683b      	ldr	r3, [r7, #0]
 8015f06:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	889b      	ldrh	r3, [r3, #4]
 8015f0c:	b21a      	sxth	r2, r3
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	3303      	adds	r3, #3
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	b21b      	sxth	r3, r3
 8015f16:	021b      	lsls	r3, r3, #8
 8015f18:	b21b      	sxth	r3, r3
 8015f1a:	4313      	orrs	r3, r2
 8015f1c:	b21b      	sxth	r3, r3
 8015f1e:	b29a      	uxth	r2, r3
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	791a      	ldrb	r2, [r3, #4]
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015f2c:	683b      	ldr	r3, [r7, #0]
 8015f2e:	781b      	ldrb	r3, [r3, #0]
 8015f30:	091b      	lsrs	r3, r3, #4
 8015f32:	b2db      	uxtb	r3, r3
 8015f34:	f003 0307 	and.w	r3, r3, #7
 8015f38:	b2da      	uxtb	r2, r3
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	f003 030f 	and.w	r3, r3, #15
 8015f46:	b2da      	uxtb	r2, r3
 8015f48:	683b      	ldr	r3, [r7, #0]
 8015f4a:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8015f4c:	2305      	movs	r3, #5
 8015f4e:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8015f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f52:	4618      	mov	r0, r3
 8015f54:	3714      	adds	r7, #20
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bc80      	pop	{r7}
 8015f5a:	4770      	bx	lr

08015f5c <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8015f5c:	b5b0      	push	{r4, r5, r7, lr}
 8015f5e:	b088      	sub	sp, #32
 8015f60:	af02      	add	r7, sp, #8
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	607a      	str	r2, [r7, #4]
 8015f68:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	791b      	ldrb	r3, [r3, #4]
 8015f6e:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	799b      	ldrb	r3, [r3, #6]
 8015f74:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	79db      	ldrb	r3, [r3, #7]
 8015f7a:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	7a1b      	ldrb	r3, [r3, #8]
 8015f80:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	795b      	ldrb	r3, [r3, #5]
 8015f86:	f083 0301 	eor.w	r3, r3, #1
 8015f8a:	b2db      	uxtb	r3, r3
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d008      	beq.n	8015fa2 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	7adb      	ldrb	r3, [r3, #11]
 8015f94:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	7a5b      	ldrb	r3, [r3, #9]
 8015f9a:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	7a9b      	ldrb	r3, [r3, #10]
 8015fa0:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8015fa2:	7dfb      	ldrb	r3, [r7, #23]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d04a      	beq.n	801603e <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8015fa8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8015fac:	2b0f      	cmp	r3, #15
 8015fae:	d103      	bne.n	8015fb8 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	7a5b      	ldrb	r3, [r3, #9]
 8015fb4:	75bb      	strb	r3, [r7, #22]
 8015fb6:	e01d      	b.n	8015ff4 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	7b18      	ldrb	r0, [r3, #12]
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	6919      	ldr	r1, [r3, #16]
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8015fcc:	68fa      	ldr	r2, [r7, #12]
 8015fce:	6992      	ldr	r2, [r2, #24]
 8015fd0:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8015fd4:	9201      	str	r2, [sp, #4]
 8015fd6:	9300      	str	r3, [sp, #0]
 8015fd8:	462b      	mov	r3, r5
 8015fda:	4622      	mov	r2, r4
 8015fdc:	f7ff fd5d 	bl	8015a9a <RegionCommonChanVerifyDr>
 8015fe0:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015fe2:	f083 0301 	eor.w	r3, r3, #1
 8015fe6:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d003      	beq.n	8015ff4 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8015fec:	7dfb      	ldrb	r3, [r7, #23]
 8015fee:	f023 0302 	bic.w	r3, r3, #2
 8015ff2:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8015ff4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015ff8:	2b0f      	cmp	r3, #15
 8015ffa:	d103      	bne.n	8016004 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	7a9b      	ldrb	r3, [r3, #10]
 8016000:	757b      	strb	r3, [r7, #21]
 8016002:	e01c      	b.n	801603e <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	f993 101d 	ldrsb.w	r1, [r3, #29]
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8016010:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016014:	4618      	mov	r0, r3
 8016016:	f7ff fdb2 	bl	8015b7e <RegionCommonValueInRange>
 801601a:	4603      	mov	r3, r0
 801601c:	2b00      	cmp	r3, #0
 801601e:	d10e      	bne.n	801603e <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8016026:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801602a:	429a      	cmp	r2, r3
 801602c:	da03      	bge.n	8016036 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	7f5b      	ldrb	r3, [r3, #29]
 8016032:	757b      	strb	r3, [r7, #21]
 8016034:	e003      	b.n	801603e <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016036:	7dfb      	ldrb	r3, [r7, #23]
 8016038:	f023 0304 	bic.w	r3, r3, #4
 801603c:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801603e:	7dfb      	ldrb	r3, [r7, #23]
 8016040:	2b07      	cmp	r3, #7
 8016042:	d105      	bne.n	8016050 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016044:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d101      	bne.n	8016050 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801604c:	2301      	movs	r3, #1
 801604e:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016050:	68bb      	ldr	r3, [r7, #8]
 8016052:	7dba      	ldrb	r2, [r7, #22]
 8016054:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	7d7a      	ldrb	r2, [r7, #21]
 801605a:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801605c:	7d3a      	ldrb	r2, [r7, #20]
 801605e:	683b      	ldr	r3, [r7, #0]
 8016060:	701a      	strb	r2, [r3, #0]

    return status;
 8016062:	7dfb      	ldrb	r3, [r7, #23]
}
 8016064:	4618      	mov	r0, r3
 8016066:	3718      	adds	r7, #24
 8016068:	46bd      	mov	sp, r7
 801606a:	bdb0      	pop	{r4, r5, r7, pc}

0801606c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801606c:	b480      	push	{r7}
 801606e:	b083      	sub	sp, #12
 8016070:	af00      	add	r7, sp, #0
 8016072:	4603      	mov	r3, r0
 8016074:	6039      	str	r1, [r7, #0]
 8016076:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016078:	79fb      	ldrb	r3, [r7, #7]
 801607a:	4a06      	ldr	r2, [pc, #24]	@ (8016094 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801607c:	fa02 f303 	lsl.w	r3, r2, r3
 8016080:	461a      	mov	r2, r3
 8016082:	683b      	ldr	r3, [r7, #0]
 8016084:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016088:	4618      	mov	r0, r3
 801608a:	370c      	adds	r7, #12
 801608c:	46bd      	mov	sp, r7
 801608e:	bc80      	pop	{r7}
 8016090:	4770      	bx	lr
 8016092:	bf00      	nop
 8016094:	000f4240 	.word	0x000f4240

08016098 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016098:	b480      	push	{r7}
 801609a:	b083      	sub	sp, #12
 801609c:	af00      	add	r7, sp, #0
 801609e:	4603      	mov	r3, r0
 80160a0:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80160a2:	79fb      	ldrb	r3, [r7, #7]
 80160a4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80160a8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80160ac:	4618      	mov	r0, r3
 80160ae:	370c      	adds	r7, #12
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bc80      	pop	{r7}
 80160b4:	4770      	bx	lr
	...

080160b8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80160b8:	b480      	push	{r7}
 80160ba:	b085      	sub	sp, #20
 80160bc:	af00      	add	r7, sp, #0
 80160be:	60f8      	str	r0, [r7, #12]
 80160c0:	607a      	str	r2, [r7, #4]
 80160c2:	603b      	str	r3, [r7, #0]
 80160c4:	460b      	mov	r3, r1
 80160c6:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80160c8:	7afa      	ldrb	r2, [r7, #11]
 80160ca:	7afb      	ldrb	r3, [r7, #11]
 80160cc:	3b04      	subs	r3, #4
 80160ce:	4619      	mov	r1, r3
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	fb03 f101 	mul.w	r1, r3, r1
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80160dc:	fb00 f303 	mul.w	r3, r0, r3
 80160e0:	440b      	add	r3, r1
 80160e2:	005b      	lsls	r3, r3, #1
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d013      	beq.n	8016110 <RegionCommonComputeRxWindowParameters+0x58>
 80160e8:	7afb      	ldrb	r3, [r7, #11]
 80160ea:	3b04      	subs	r3, #4
 80160ec:	4619      	mov	r1, r3
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	fb03 f101 	mul.w	r1, r3, r1
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80160fa:	fb00 f303 	mul.w	r3, r0, r3
 80160fe:	440b      	add	r3, r1
 8016100:	0059      	lsls	r1, r3, #1
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	440b      	add	r3, r1
 8016106:	1e59      	subs	r1, r3, #1
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	fbb1 f3f3 	udiv	r3, r1, r3
 801610e:	e00f      	b.n	8016130 <RegionCommonComputeRxWindowParameters+0x78>
 8016110:	7afb      	ldrb	r3, [r7, #11]
 8016112:	3b04      	subs	r3, #4
 8016114:	4619      	mov	r1, r3
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	fb03 f101 	mul.w	r1, r3, r1
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016122:	fb00 f303 	mul.w	r3, r0, r3
 8016126:	440b      	add	r3, r1
 8016128:	0059      	lsls	r1, r3, #1
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	fbb1 f3f3 	udiv	r3, r1, r3
 8016130:	429a      	cmp	r2, r3
 8016132:	bf38      	it	cc
 8016134:	461a      	movcc	r2, r3
 8016136:	69bb      	ldr	r3, [r7, #24]
 8016138:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	009b      	lsls	r3, r3, #2
 801613e:	4619      	mov	r1, r3
 8016140:	69bb      	ldr	r3, [r7, #24]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	68fa      	ldr	r2, [r7, #12]
 8016146:	fb02 f303 	mul.w	r3, r2, r3
 801614a:	2b00      	cmp	r3, #0
 801614c:	d007      	beq.n	801615e <RegionCommonComputeRxWindowParameters+0xa6>
 801614e:	69bb      	ldr	r3, [r7, #24]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	68fa      	ldr	r2, [r7, #12]
 8016154:	fb02 f303 	mul.w	r3, r2, r3
 8016158:	3301      	adds	r3, #1
 801615a:	085b      	lsrs	r3, r3, #1
 801615c:	e005      	b.n	801616a <RegionCommonComputeRxWindowParameters+0xb2>
 801615e:	69bb      	ldr	r3, [r7, #24]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	68fa      	ldr	r2, [r7, #12]
 8016164:	fb02 f303 	mul.w	r3, r2, r3
 8016168:	085b      	lsrs	r3, r3, #1
 801616a:	1acb      	subs	r3, r1, r3
 801616c:	683a      	ldr	r2, [r7, #0]
 801616e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016172:	fb01 f202 	mul.w	r2, r1, r2
 8016176:	1a9b      	subs	r3, r3, r2
 8016178:	2b00      	cmp	r3, #0
 801617a:	dd27      	ble.n	80161cc <RegionCommonComputeRxWindowParameters+0x114>
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	009b      	lsls	r3, r3, #2
 8016180:	4619      	mov	r1, r3
 8016182:	69bb      	ldr	r3, [r7, #24]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	68fa      	ldr	r2, [r7, #12]
 8016188:	fb02 f303 	mul.w	r3, r2, r3
 801618c:	2b00      	cmp	r3, #0
 801618e:	d007      	beq.n	80161a0 <RegionCommonComputeRxWindowParameters+0xe8>
 8016190:	69bb      	ldr	r3, [r7, #24]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	68fa      	ldr	r2, [r7, #12]
 8016196:	fb02 f303 	mul.w	r3, r2, r3
 801619a:	3301      	adds	r3, #1
 801619c:	085b      	lsrs	r3, r3, #1
 801619e:	e005      	b.n	80161ac <RegionCommonComputeRxWindowParameters+0xf4>
 80161a0:	69bb      	ldr	r3, [r7, #24]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	68fa      	ldr	r2, [r7, #12]
 80161a6:	fb02 f303 	mul.w	r3, r2, r3
 80161aa:	085b      	lsrs	r3, r3, #1
 80161ac:	1acb      	subs	r3, r1, r3
 80161ae:	683a      	ldr	r2, [r7, #0]
 80161b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80161b4:	fb01 f202 	mul.w	r2, r1, r2
 80161b8:	1a9b      	subs	r3, r3, r2
 80161ba:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 80161be:	4a19      	ldr	r2, [pc, #100]	@ (8016224 <RegionCommonComputeRxWindowParameters+0x16c>)
 80161c0:	fb82 1203 	smull	r1, r2, r2, r3
 80161c4:	1192      	asrs	r2, r2, #6
 80161c6:	17db      	asrs	r3, r3, #31
 80161c8:	1ad3      	subs	r3, r2, r3
 80161ca:	e024      	b.n	8016216 <RegionCommonComputeRxWindowParameters+0x15e>
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	009b      	lsls	r3, r3, #2
 80161d0:	4619      	mov	r1, r3
 80161d2:	69bb      	ldr	r3, [r7, #24]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	68fa      	ldr	r2, [r7, #12]
 80161d8:	fb02 f303 	mul.w	r3, r2, r3
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d007      	beq.n	80161f0 <RegionCommonComputeRxWindowParameters+0x138>
 80161e0:	69bb      	ldr	r3, [r7, #24]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	68fa      	ldr	r2, [r7, #12]
 80161e6:	fb02 f303 	mul.w	r3, r2, r3
 80161ea:	3301      	adds	r3, #1
 80161ec:	085b      	lsrs	r3, r3, #1
 80161ee:	e005      	b.n	80161fc <RegionCommonComputeRxWindowParameters+0x144>
 80161f0:	69bb      	ldr	r3, [r7, #24]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	68fa      	ldr	r2, [r7, #12]
 80161f6:	fb02 f303 	mul.w	r3, r2, r3
 80161fa:	085b      	lsrs	r3, r3, #1
 80161fc:	1acb      	subs	r3, r1, r3
 80161fe:	683a      	ldr	r2, [r7, #0]
 8016200:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016204:	fb01 f202 	mul.w	r2, r1, r2
 8016208:	1a9b      	subs	r3, r3, r2
 801620a:	4a06      	ldr	r2, [pc, #24]	@ (8016224 <RegionCommonComputeRxWindowParameters+0x16c>)
 801620c:	fb82 1203 	smull	r1, r2, r2, r3
 8016210:	1192      	asrs	r2, r2, #6
 8016212:	17db      	asrs	r3, r3, #31
 8016214:	1ad3      	subs	r3, r2, r3
 8016216:	69fa      	ldr	r2, [r7, #28]
 8016218:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801621a:	bf00      	nop
 801621c:	3714      	adds	r7, #20
 801621e:	46bd      	mov	sp, r7
 8016220:	bc80      	pop	{r7}
 8016222:	4770      	bx	lr
 8016224:	10624dd3 	.word	0x10624dd3

08016228 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b086      	sub	sp, #24
 801622c:	af00      	add	r7, sp, #0
 801622e:	4603      	mov	r3, r0
 8016230:	60b9      	str	r1, [r7, #8]
 8016232:	607a      	str	r2, [r7, #4]
 8016234:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016236:	2300      	movs	r3, #0
 8016238:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801623a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801623e:	005b      	lsls	r3, r3, #1
 8016240:	4618      	mov	r0, r3
 8016242:	f7ea fac3 	bl	80007cc <__aeabi_ui2f>
 8016246:	4603      	mov	r3, r0
 8016248:	4619      	mov	r1, r3
 801624a:	68b8      	ldr	r0, [r7, #8]
 801624c:	f7ea fa0c 	bl	8000668 <__aeabi_fsub>
 8016250:	4603      	mov	r3, r0
 8016252:	6879      	ldr	r1, [r7, #4]
 8016254:	4618      	mov	r0, r3
 8016256:	f7ea fa07 	bl	8000668 <__aeabi_fsub>
 801625a:	4603      	mov	r3, r0
 801625c:	4618      	mov	r0, r3
 801625e:	f7ea f8f7 	bl	8000450 <__aeabi_f2d>
 8016262:	4602      	mov	r2, r0
 8016264:	460b      	mov	r3, r1
 8016266:	4610      	mov	r0, r2
 8016268:	4619      	mov	r1, r3
 801626a:	f006 f9d5 	bl	801c618 <floor>
 801626e:	4602      	mov	r2, r0
 8016270:	460b      	mov	r3, r1
 8016272:	4610      	mov	r0, r2
 8016274:	4619      	mov	r1, r3
 8016276:	f7ea f9cb 	bl	8000610 <__aeabi_d2iz>
 801627a:	4603      	mov	r3, r0
 801627c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801627e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016282:	4618      	mov	r0, r3
 8016284:	3718      	adds	r7, #24
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}

0801628a <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801628a:	b590      	push	{r4, r7, lr}
 801628c:	b087      	sub	sp, #28
 801628e:	af00      	add	r7, sp, #0
 8016290:	60f8      	str	r0, [r7, #12]
 8016292:	60b9      	str	r1, [r7, #8]
 8016294:	607a      	str	r2, [r7, #4]
 8016296:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016298:	2300      	movs	r3, #0
 801629a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801629c:	2300      	movs	r3, #0
 801629e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80162a0:	2300      	movs	r3, #0
 80162a2:	757b      	strb	r3, [r7, #21]
 80162a4:	2300      	movs	r3, #0
 80162a6:	753b      	strb	r3, [r7, #20]
 80162a8:	e09c      	b.n	80163e4 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80162aa:	2300      	movs	r3, #0
 80162ac:	74fb      	strb	r3, [r7, #19]
 80162ae:	e08f      	b.n	80163d0 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	685a      	ldr	r2, [r3, #4]
 80162b4:	7d3b      	ldrb	r3, [r7, #20]
 80162b6:	005b      	lsls	r3, r3, #1
 80162b8:	4413      	add	r3, r2
 80162ba:	881b      	ldrh	r3, [r3, #0]
 80162bc:	461a      	mov	r2, r3
 80162be:	7cfb      	ldrb	r3, [r7, #19]
 80162c0:	fa42 f303 	asr.w	r3, r2, r3
 80162c4:	f003 0301 	and.w	r3, r3, #1
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d07e      	beq.n	80163ca <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	689a      	ldr	r2, [r3, #8]
 80162d0:	7d79      	ldrb	r1, [r7, #21]
 80162d2:	7cfb      	ldrb	r3, [r7, #19]
 80162d4:	440b      	add	r3, r1
 80162d6:	4619      	mov	r1, r3
 80162d8:	460b      	mov	r3, r1
 80162da:	005b      	lsls	r3, r3, #1
 80162dc:	440b      	add	r3, r1
 80162de:	009b      	lsls	r3, r3, #2
 80162e0:	4413      	add	r3, r2
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d06b      	beq.n	80163c0 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	f083 0301 	eor.w	r3, r3, #1
 80162f0:	b2db      	uxtb	r3, r3
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d011      	beq.n	801631a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d00d      	beq.n	801631a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	695a      	ldr	r2, [r3, #20]
 8016302:	7d3b      	ldrb	r3, [r7, #20]
 8016304:	005b      	lsls	r3, r3, #1
 8016306:	4413      	add	r3, r2
 8016308:	881b      	ldrh	r3, [r3, #0]
 801630a:	461a      	mov	r2, r3
 801630c:	7cfb      	ldrb	r3, [r7, #19]
 801630e:	fa42 f303 	asr.w	r3, r2, r3
 8016312:	f003 0301 	and.w	r3, r3, #1
 8016316:	2b00      	cmp	r3, #0
 8016318:	d054      	beq.n	80163c4 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	785b      	ldrb	r3, [r3, #1]
 801631e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	689a      	ldr	r2, [r3, #8]
 8016324:	7d79      	ldrb	r1, [r7, #21]
 8016326:	7cfb      	ldrb	r3, [r7, #19]
 8016328:	440b      	add	r3, r1
 801632a:	4619      	mov	r1, r3
 801632c:	460b      	mov	r3, r1
 801632e:	005b      	lsls	r3, r3, #1
 8016330:	440b      	add	r3, r1
 8016332:	009b      	lsls	r3, r3, #2
 8016334:	4413      	add	r3, r2
 8016336:	7a1b      	ldrb	r3, [r3, #8]
 8016338:	f343 0303 	sbfx	r3, r3, #0, #4
 801633c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801633e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	689a      	ldr	r2, [r3, #8]
 8016344:	7d79      	ldrb	r1, [r7, #21]
 8016346:	7cfb      	ldrb	r3, [r7, #19]
 8016348:	440b      	add	r3, r1
 801634a:	4619      	mov	r1, r3
 801634c:	460b      	mov	r3, r1
 801634e:	005b      	lsls	r3, r3, #1
 8016350:	440b      	add	r3, r1
 8016352:	009b      	lsls	r3, r3, #2
 8016354:	4413      	add	r3, r2
 8016356:	7a1b      	ldrb	r3, [r3, #8]
 8016358:	f343 1303 	sbfx	r3, r3, #4, #4
 801635c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801635e:	461a      	mov	r2, r3
 8016360:	4621      	mov	r1, r4
 8016362:	f7ff fc0c 	bl	8015b7e <RegionCommonValueInRange>
 8016366:	4603      	mov	r3, r0
 8016368:	2b00      	cmp	r3, #0
 801636a:	d02d      	beq.n	80163c8 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	68da      	ldr	r2, [r3, #12]
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	6899      	ldr	r1, [r3, #8]
 8016374:	7d78      	ldrb	r0, [r7, #21]
 8016376:	7cfb      	ldrb	r3, [r7, #19]
 8016378:	4403      	add	r3, r0
 801637a:	4618      	mov	r0, r3
 801637c:	4603      	mov	r3, r0
 801637e:	005b      	lsls	r3, r3, #1
 8016380:	4403      	add	r3, r0
 8016382:	009b      	lsls	r3, r3, #2
 8016384:	440b      	add	r3, r1
 8016386:	7a5b      	ldrb	r3, [r3, #9]
 8016388:	4619      	mov	r1, r3
 801638a:	460b      	mov	r3, r1
 801638c:	005b      	lsls	r3, r3, #1
 801638e:	440b      	add	r3, r1
 8016390:	00db      	lsls	r3, r3, #3
 8016392:	4413      	add	r3, r2
 8016394:	7d1b      	ldrb	r3, [r3, #20]
 8016396:	f083 0301 	eor.w	r3, r3, #1
 801639a:	b2db      	uxtb	r3, r3
 801639c:	2b00      	cmp	r3, #0
 801639e:	d003      	beq.n	80163a8 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80163a0:	7dbb      	ldrb	r3, [r7, #22]
 80163a2:	3301      	adds	r3, #1
 80163a4:	75bb      	strb	r3, [r7, #22]
                    continue;
 80163a6:	e010      	b.n	80163ca <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80163a8:	7dfb      	ldrb	r3, [r7, #23]
 80163aa:	1c5a      	adds	r2, r3, #1
 80163ac:	75fa      	strb	r2, [r7, #23]
 80163ae:	461a      	mov	r2, r3
 80163b0:	68bb      	ldr	r3, [r7, #8]
 80163b2:	4413      	add	r3, r2
 80163b4:	7d79      	ldrb	r1, [r7, #21]
 80163b6:	7cfa      	ldrb	r2, [r7, #19]
 80163b8:	440a      	add	r2, r1
 80163ba:	b2d2      	uxtb	r2, r2
 80163bc:	701a      	strb	r2, [r3, #0]
 80163be:	e004      	b.n	80163ca <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80163c0:	bf00      	nop
 80163c2:	e002      	b.n	80163ca <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80163c4:	bf00      	nop
 80163c6:	e000      	b.n	80163ca <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80163c8:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80163ca:	7cfb      	ldrb	r3, [r7, #19]
 80163cc:	3301      	adds	r3, #1
 80163ce:	74fb      	strb	r3, [r7, #19]
 80163d0:	7cfb      	ldrb	r3, [r7, #19]
 80163d2:	2b0f      	cmp	r3, #15
 80163d4:	f67f af6c 	bls.w	80162b0 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80163d8:	7d7b      	ldrb	r3, [r7, #21]
 80163da:	3310      	adds	r3, #16
 80163dc:	757b      	strb	r3, [r7, #21]
 80163de:	7d3b      	ldrb	r3, [r7, #20]
 80163e0:	3301      	adds	r3, #1
 80163e2:	753b      	strb	r3, [r7, #20]
 80163e4:	7d7b      	ldrb	r3, [r7, #21]
 80163e6:	b29a      	uxth	r2, r3
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	8a1b      	ldrh	r3, [r3, #16]
 80163ec:	429a      	cmp	r2, r3
 80163ee:	f4ff af5c 	bcc.w	80162aa <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	7dfa      	ldrb	r2, [r7, #23]
 80163f6:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80163f8:	683b      	ldr	r3, [r7, #0]
 80163fa:	7dba      	ldrb	r2, [r7, #22]
 80163fc:	701a      	strb	r2, [r3, #0]
}
 80163fe:	bf00      	nop
 8016400:	371c      	adds	r7, #28
 8016402:	46bd      	mov	sp, r7
 8016404:	bd90      	pop	{r4, r7, pc}

08016406 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016408:	b08b      	sub	sp, #44	@ 0x2c
 801640a:	af04      	add	r7, sp, #16
 801640c:	60f8      	str	r0, [r7, #12]
 801640e:	60b9      	str	r1, [r7, #8]
 8016410:	607a      	str	r2, [r7, #4]
 8016412:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	685b      	ldr	r3, [r3, #4]
 8016418:	4618      	mov	r0, r3
 801641a:	f005 fd79 	bl	801bf10 <UTIL_TIMER_GetElapsedTime>
 801641e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	681a      	ldr	r2, [r3, #0]
 8016424:	697b      	ldr	r3, [r7, #20]
 8016426:	1ad2      	subs	r2, r2, r3
 8016428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801642a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801642e:	2201      	movs	r2, #1
 8016430:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016432:	683b      	ldr	r3, [r7, #0]
 8016434:	2200      	movs	r2, #0
 8016436:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	685b      	ldr	r3, [r3, #4]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d004      	beq.n	801644a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016444:	697a      	ldr	r2, [r7, #20]
 8016446:	429a      	cmp	r2, r3
 8016448:	d32b      	bcc.n	80164a2 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801644a:	68bb      	ldr	r3, [r7, #8]
 801644c:	2200      	movs	r2, #0
 801644e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	69db      	ldr	r3, [r3, #28]
 8016454:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801645a:	68dd      	ldr	r5, [r3, #12]
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	7a5e      	ldrb	r6, [r3, #9]
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	7d1b      	ldrb	r3, [r3, #20]
 801646a:	68fa      	ldr	r2, [r7, #12]
 801646c:	6992      	ldr	r2, [r2, #24]
 801646e:	9203      	str	r2, [sp, #12]
 8016470:	68fa      	ldr	r2, [r7, #12]
 8016472:	f10d 0e04 	add.w	lr, sp, #4
 8016476:	320c      	adds	r2, #12
 8016478:	e892 0003 	ldmia.w	r2, {r0, r1}
 801647c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016480:	9300      	str	r3, [sp, #0]
 8016482:	4663      	mov	r3, ip
 8016484:	4632      	mov	r2, r6
 8016486:	4629      	mov	r1, r5
 8016488:	4620      	mov	r0, r4
 801648a:	f7ff fc49 	bl	8015d20 <RegionCommonUpdateBandTimeOff>
 801648e:	4602      	mov	r2, r0
 8016490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016492:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	69d8      	ldr	r0, [r3, #28]
 8016498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801649a:	683a      	ldr	r2, [r7, #0]
 801649c:	6879      	ldr	r1, [r7, #4]
 801649e:	f7ff fef4 	bl	801628a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80164a2:	683b      	ldr	r3, [r7, #0]
 80164a4:	781b      	ldrb	r3, [r3, #0]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d004      	beq.n	80164b4 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80164aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80164ac:	2200      	movs	r2, #0
 80164ae:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80164b0:	2300      	movs	r3, #0
 80164b2:	e006      	b.n	80164c2 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80164b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164b6:	781b      	ldrb	r3, [r3, #0]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d001      	beq.n	80164c0 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80164bc:	230b      	movs	r3, #11
 80164be:	e000      	b.n	80164c2 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80164c0:	230c      	movs	r3, #12
    }
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	371c      	adds	r7, #28
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080164ca <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80164ca:	b5b0      	push	{r4, r5, r7, lr}
 80164cc:	b086      	sub	sp, #24
 80164ce:	af02      	add	r7, sp, #8
 80164d0:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	781b      	ldrb	r3, [r3, #0]
 80164d6:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	f993 2000 	ldrsb.w	r2, [r3]
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d103      	bne.n	80164f0 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80164ee:	e026      	b.n	801653e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80164f0:	7bfb      	ldrb	r3, [r7, #15]
 80164f2:	3b01      	subs	r3, #1
 80164f4:	b2db      	uxtb	r3, r3
 80164f6:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80164fe:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016502:	429a      	cmp	r2, r3
 8016504:	d019      	beq.n	801653a <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	78d8      	ldrb	r0, [r3, #3]
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	6859      	ldr	r1, [r3, #4]
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801651a:	687a      	ldr	r2, [r7, #4]
 801651c:	6892      	ldr	r2, [r2, #8]
 801651e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8016522:	9201      	str	r2, [sp, #4]
 8016524:	9300      	str	r3, [sp, #0]
 8016526:	462b      	mov	r3, r5
 8016528:	4622      	mov	r2, r4
 801652a:	f7ff fab6 	bl	8015a9a <RegionCommonChanVerifyDr>
 801652e:	4603      	mov	r3, r0
 8016530:	f083 0301 	eor.w	r3, r3, #1
 8016534:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016536:	2b00      	cmp	r3, #0
 8016538:	d1da      	bne.n	80164f0 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801653a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801653e:	4618      	mov	r0, r3
 8016540:	3710      	adds	r7, #16
 8016542:	46bd      	mov	sp, r7
 8016544:	bdb0      	pop	{r4, r5, r7, pc}

08016546 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016546:	b480      	push	{r7}
 8016548:	b083      	sub	sp, #12
 801654a:	af00      	add	r7, sp, #0
 801654c:	4603      	mov	r3, r0
 801654e:	460a      	mov	r2, r1
 8016550:	71fb      	strb	r3, [r7, #7]
 8016552:	4613      	mov	r3, r2
 8016554:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016556:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801655a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801655e:	4293      	cmp	r3, r2
 8016560:	bfb8      	it	lt
 8016562:	4613      	movlt	r3, r2
 8016564:	b25b      	sxtb	r3, r3
}
 8016566:	4618      	mov	r0, r3
 8016568:	370c      	adds	r7, #12
 801656a:	46bd      	mov	sp, r7
 801656c:	bc80      	pop	{r7}
 801656e:	4770      	bx	lr

08016570 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016570:	b480      	push	{r7}
 8016572:	b083      	sub	sp, #12
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	009b      	lsls	r3, r3, #2
 801657e:	683a      	ldr	r2, [r7, #0]
 8016580:	4413      	add	r3, r2
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	4a07      	ldr	r2, [pc, #28]	@ (80165a4 <RegionCommonGetBandwidth+0x34>)
 8016586:	4293      	cmp	r3, r2
 8016588:	d004      	beq.n	8016594 <RegionCommonGetBandwidth+0x24>
 801658a:	4a07      	ldr	r2, [pc, #28]	@ (80165a8 <RegionCommonGetBandwidth+0x38>)
 801658c:	4293      	cmp	r3, r2
 801658e:	d003      	beq.n	8016598 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016590:	2300      	movs	r3, #0
 8016592:	e002      	b.n	801659a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016594:	2301      	movs	r3, #1
 8016596:	e000      	b.n	801659a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016598:	2302      	movs	r3, #2
    }
}
 801659a:	4618      	mov	r0, r3
 801659c:	370c      	adds	r7, #12
 801659e:	46bd      	mov	sp, r7
 80165a0:	bc80      	pop	{r7}
 80165a2:	4770      	bx	lr
 80165a4:	0003d090 	.word	0x0003d090
 80165a8:	0007a120 	.word	0x0007a120

080165ac <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b086      	sub	sp, #24
 80165b0:	af04      	add	r7, sp, #16
 80165b2:	4603      	mov	r3, r0
 80165b4:	6039      	str	r1, [r7, #0]
 80165b6:	71fb      	strb	r3, [r7, #7]
 80165b8:	4613      	mov	r3, r2
 80165ba:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80165bc:	79fb      	ldrb	r3, [r7, #7]
 80165be:	2b05      	cmp	r3, #5
 80165c0:	d810      	bhi.n	80165e4 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80165c2:	79fb      	ldrb	r3, [r7, #7]
 80165c4:	4a0f      	ldr	r2, [pc, #60]	@ (8016604 <RegionCommonRxConfigPrint+0x58>)
 80165c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80165ca:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80165ce:	9202      	str	r2, [sp, #8]
 80165d0:	683a      	ldr	r2, [r7, #0]
 80165d2:	9201      	str	r2, [sp, #4]
 80165d4:	9300      	str	r3, [sp, #0]
 80165d6:	4b0c      	ldr	r3, [pc, #48]	@ (8016608 <RegionCommonRxConfigPrint+0x5c>)
 80165d8:	2201      	movs	r2, #1
 80165da:	2100      	movs	r1, #0
 80165dc:	2002      	movs	r0, #2
 80165de:	f005 fd75 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80165e2:	e00a      	b.n	80165fa <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80165e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80165e8:	9301      	str	r3, [sp, #4]
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	9300      	str	r3, [sp, #0]
 80165ee:	4b07      	ldr	r3, [pc, #28]	@ (801660c <RegionCommonRxConfigPrint+0x60>)
 80165f0:	2201      	movs	r2, #1
 80165f2:	2100      	movs	r1, #0
 80165f4:	2002      	movs	r0, #2
 80165f6:	f005 fd69 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
}
 80165fa:	bf00      	nop
 80165fc:	3708      	adds	r7, #8
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
 8016602:	bf00      	nop
 8016604:	20000118 	.word	0x20000118
 8016608:	0801cec0 	.word	0x0801cec0
 801660c:	0801cee0 	.word	0x0801cee0

08016610 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af02      	add	r7, sp, #8
 8016616:	6078      	str	r0, [r7, #4]
 8016618:	460b      	mov	r3, r1
 801661a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801661c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016620:	9301      	str	r3, [sp, #4]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	9300      	str	r3, [sp, #0]
 8016626:	4b05      	ldr	r3, [pc, #20]	@ (801663c <RegionCommonTxConfigPrint+0x2c>)
 8016628:	2201      	movs	r2, #1
 801662a:	2100      	movs	r1, #0
 801662c:	2002      	movs	r0, #2
 801662e:	f005 fd4d 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
}
 8016632:	bf00      	nop
 8016634:	3708      	adds	r7, #8
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}
 801663a:	bf00      	nop
 801663c:	0801cefc 	.word	0x0801cefc

08016640 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b082      	sub	sp, #8
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
 8016648:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801664a:	4b2d      	ldr	r3, [pc, #180]	@ (8016700 <VerifyRfFreq+0xc0>)
 801664c:	6a1b      	ldr	r3, [r3, #32]
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	4798      	blx	r3
 8016652:	4603      	mov	r3, r0
 8016654:	f083 0301 	eor.w	r3, r3, #1
 8016658:	b2db      	uxtb	r3, r3
 801665a:	2b00      	cmp	r3, #0
 801665c:	d001      	beq.n	8016662 <VerifyRfFreq+0x22>
    {
        return false;
 801665e:	2300      	movs	r3, #0
 8016660:	e04a      	b.n	80166f8 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	4a27      	ldr	r2, [pc, #156]	@ (8016704 <VerifyRfFreq+0xc4>)
 8016666:	4293      	cmp	r3, r2
 8016668:	d307      	bcc.n	801667a <VerifyRfFreq+0x3a>
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	4a26      	ldr	r2, [pc, #152]	@ (8016708 <VerifyRfFreq+0xc8>)
 801666e:	4293      	cmp	r3, r2
 8016670:	d803      	bhi.n	801667a <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	2202      	movs	r2, #2
 8016676:	701a      	strb	r2, [r3, #0]
 8016678:	e03d      	b.n	80166f6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	4a22      	ldr	r2, [pc, #136]	@ (8016708 <VerifyRfFreq+0xc8>)
 801667e:	4293      	cmp	r3, r2
 8016680:	d907      	bls.n	8016692 <VerifyRfFreq+0x52>
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	4a21      	ldr	r2, [pc, #132]	@ (801670c <VerifyRfFreq+0xcc>)
 8016686:	4293      	cmp	r3, r2
 8016688:	d803      	bhi.n	8016692 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	2200      	movs	r2, #0
 801668e:	701a      	strb	r2, [r3, #0]
 8016690:	e031      	b.n	80166f6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	4a1d      	ldr	r2, [pc, #116]	@ (801670c <VerifyRfFreq+0xcc>)
 8016696:	4293      	cmp	r3, r2
 8016698:	d907      	bls.n	80166aa <VerifyRfFreq+0x6a>
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	4a1c      	ldr	r2, [pc, #112]	@ (8016710 <VerifyRfFreq+0xd0>)
 801669e:	4293      	cmp	r3, r2
 80166a0:	d803      	bhi.n	80166aa <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80166a2:	683b      	ldr	r3, [r7, #0]
 80166a4:	2201      	movs	r2, #1
 80166a6:	701a      	strb	r2, [r3, #0]
 80166a8:	e025      	b.n	80166f6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	4a19      	ldr	r2, [pc, #100]	@ (8016714 <VerifyRfFreq+0xd4>)
 80166ae:	4293      	cmp	r3, r2
 80166b0:	d907      	bls.n	80166c2 <VerifyRfFreq+0x82>
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	4a18      	ldr	r2, [pc, #96]	@ (8016718 <VerifyRfFreq+0xd8>)
 80166b6:	4293      	cmp	r3, r2
 80166b8:	d803      	bhi.n	80166c2 <VerifyRfFreq+0x82>
    {
        *band = 5;
 80166ba:	683b      	ldr	r3, [r7, #0]
 80166bc:	2205      	movs	r2, #5
 80166be:	701a      	strb	r2, [r3, #0]
 80166c0:	e019      	b.n	80166f6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	4a15      	ldr	r2, [pc, #84]	@ (801671c <VerifyRfFreq+0xdc>)
 80166c6:	4293      	cmp	r3, r2
 80166c8:	d907      	bls.n	80166da <VerifyRfFreq+0x9a>
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	4a14      	ldr	r2, [pc, #80]	@ (8016720 <VerifyRfFreq+0xe0>)
 80166ce:	4293      	cmp	r3, r2
 80166d0:	d803      	bhi.n	80166da <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80166d2:	683b      	ldr	r3, [r7, #0]
 80166d4:	2203      	movs	r2, #3
 80166d6:	701a      	strb	r2, [r3, #0]
 80166d8:	e00d      	b.n	80166f6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	4a11      	ldr	r2, [pc, #68]	@ (8016724 <VerifyRfFreq+0xe4>)
 80166de:	4293      	cmp	r3, r2
 80166e0:	d307      	bcc.n	80166f2 <VerifyRfFreq+0xb2>
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	4a10      	ldr	r2, [pc, #64]	@ (8016728 <VerifyRfFreq+0xe8>)
 80166e6:	4293      	cmp	r3, r2
 80166e8:	d803      	bhi.n	80166f2 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	2204      	movs	r2, #4
 80166ee:	701a      	strb	r2, [r3, #0]
 80166f0:	e001      	b.n	80166f6 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80166f2:	2300      	movs	r3, #0
 80166f4:	e000      	b.n	80166f8 <VerifyRfFreq+0xb8>
    }
    return true;
 80166f6:	2301      	movs	r3, #1
}
 80166f8:	4618      	mov	r0, r3
 80166fa:	3708      	adds	r7, #8
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd80      	pop	{r7, pc}
 8016700:	0801d50c 	.word	0x0801d50c
 8016704:	337055c0 	.word	0x337055c0
 8016708:	338eda3f 	.word	0x338eda3f
 801670c:	33bca100 	.word	0x33bca100
 8016710:	33c5c8c0 	.word	0x33c5c8c0
 8016714:	33c74f5f 	.word	0x33c74f5f
 8016718:	33cef080 	.word	0x33cef080
 801671c:	33d1fdbf 	.word	0x33d1fdbf
 8016720:	33d5ce50 	.word	0x33d5ce50
 8016724:	33d691a0 	.word	0x33d691a0
 8016728:	33db2580 	.word	0x33db2580

0801672c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801672c:	b590      	push	{r4, r7, lr}
 801672e:	b08b      	sub	sp, #44	@ 0x2c
 8016730:	af04      	add	r7, sp, #16
 8016732:	4603      	mov	r3, r0
 8016734:	460a      	mov	r2, r1
 8016736:	71fb      	strb	r3, [r7, #7]
 8016738:	4613      	mov	r3, r2
 801673a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801673c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016740:	4a1f      	ldr	r2, [pc, #124]	@ (80167c0 <GetTimeOnAir+0x94>)
 8016742:	5cd3      	ldrb	r3, [r2, r3]
 8016744:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8016746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801674a:	491e      	ldr	r1, [pc, #120]	@ (80167c4 <GetTimeOnAir+0x98>)
 801674c:	4618      	mov	r0, r3
 801674e:	f7ff ff0f 	bl	8016570 <RegionCommonGetBandwidth>
 8016752:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8016754:	2300      	movs	r3, #0
 8016756:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8016758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801675c:	2b07      	cmp	r3, #7
 801675e:	d118      	bne.n	8016792 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8016760:	4b19      	ldr	r3, [pc, #100]	@ (80167c8 <GetTimeOnAir+0x9c>)
 8016762:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016764:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016768:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801676c:	fb02 f303 	mul.w	r3, r2, r3
 8016770:	4619      	mov	r1, r3
 8016772:	88bb      	ldrh	r3, [r7, #4]
 8016774:	b2db      	uxtb	r3, r3
 8016776:	2201      	movs	r2, #1
 8016778:	9203      	str	r2, [sp, #12]
 801677a:	9302      	str	r3, [sp, #8]
 801677c:	2300      	movs	r3, #0
 801677e:	9301      	str	r3, [sp, #4]
 8016780:	2305      	movs	r3, #5
 8016782:	9300      	str	r3, [sp, #0]
 8016784:	2300      	movs	r3, #0
 8016786:	460a      	mov	r2, r1
 8016788:	68f9      	ldr	r1, [r7, #12]
 801678a:	2000      	movs	r0, #0
 801678c:	47a0      	blx	r4
 801678e:	6178      	str	r0, [r7, #20]
 8016790:	e011      	b.n	80167b6 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8016792:	4b0d      	ldr	r3, [pc, #52]	@ (80167c8 <GetTimeOnAir+0x9c>)
 8016794:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016796:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801679a:	88bb      	ldrh	r3, [r7, #4]
 801679c:	b2db      	uxtb	r3, r3
 801679e:	2101      	movs	r1, #1
 80167a0:	9103      	str	r1, [sp, #12]
 80167a2:	9302      	str	r3, [sp, #8]
 80167a4:	2300      	movs	r3, #0
 80167a6:	9301      	str	r3, [sp, #4]
 80167a8:	2308      	movs	r3, #8
 80167aa:	9300      	str	r3, [sp, #0]
 80167ac:	2301      	movs	r3, #1
 80167ae:	68f9      	ldr	r1, [r7, #12]
 80167b0:	2001      	movs	r0, #1
 80167b2:	47a0      	blx	r4
 80167b4:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80167b6:	697b      	ldr	r3, [r7, #20]
}
 80167b8:	4618      	mov	r0, r3
 80167ba:	371c      	adds	r7, #28
 80167bc:	46bd      	mov	sp, r7
 80167be:	bd90      	pop	{r4, r7, pc}
 80167c0:	0801d4d4 	.word	0x0801d4d4
 80167c4:	0801d4dc 	.word	0x0801d4dc
 80167c8:	0801d50c 	.word	0x0801d50c

080167cc <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b088      	sub	sp, #32
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80167d4:	2300      	movs	r3, #0
 80167d6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	781b      	ldrb	r3, [r3, #0]
 80167dc:	3b01      	subs	r3, #1
 80167de:	2b37      	cmp	r3, #55	@ 0x37
 80167e0:	f200 8122 	bhi.w	8016a28 <RegionEU868GetPhyParam+0x25c>
 80167e4:	a201      	add	r2, pc, #4	@ (adr r2, 80167ec <RegionEU868GetPhyParam+0x20>)
 80167e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167ea:	bf00      	nop
 80167ec:	080168cd 	.word	0x080168cd
 80167f0:	080168d3 	.word	0x080168d3
 80167f4:	08016a29 	.word	0x08016a29
 80167f8:	08016a29 	.word	0x08016a29
 80167fc:	08016a29 	.word	0x08016a29
 8016800:	080168d9 	.word	0x080168d9
 8016804:	08016a29 	.word	0x08016a29
 8016808:	08016913 	.word	0x08016913
 801680c:	08016a29 	.word	0x08016a29
 8016810:	08016919 	.word	0x08016919
 8016814:	0801691f 	.word	0x0801691f
 8016818:	08016925 	.word	0x08016925
 801681c:	0801692b 	.word	0x0801692b
 8016820:	0801693b 	.word	0x0801693b
 8016824:	0801694b 	.word	0x0801694b
 8016828:	08016951 	.word	0x08016951
 801682c:	08016959 	.word	0x08016959
 8016830:	08016961 	.word	0x08016961
 8016834:	08016969 	.word	0x08016969
 8016838:	08016971 	.word	0x08016971
 801683c:	08016979 	.word	0x08016979
 8016840:	0801698d 	.word	0x0801698d
 8016844:	08016993 	.word	0x08016993
 8016848:	08016999 	.word	0x08016999
 801684c:	0801699f 	.word	0x0801699f
 8016850:	080169ab 	.word	0x080169ab
 8016854:	080169b7 	.word	0x080169b7
 8016858:	080169bd 	.word	0x080169bd
 801685c:	080169c5 	.word	0x080169c5
 8016860:	080169cb 	.word	0x080169cb
 8016864:	080169d1 	.word	0x080169d1
 8016868:	080169d9 	.word	0x080169d9
 801686c:	080168df 	.word	0x080168df
 8016870:	08016a29 	.word	0x08016a29
 8016874:	08016a29 	.word	0x08016a29
 8016878:	08016a29 	.word	0x08016a29
 801687c:	08016a29 	.word	0x08016a29
 8016880:	08016a29 	.word	0x08016a29
 8016884:	08016a29 	.word	0x08016a29
 8016888:	08016a29 	.word	0x08016a29
 801688c:	08016a29 	.word	0x08016a29
 8016890:	08016a29 	.word	0x08016a29
 8016894:	08016a29 	.word	0x08016a29
 8016898:	08016a29 	.word	0x08016a29
 801689c:	08016a29 	.word	0x08016a29
 80168a0:	08016a29 	.word	0x08016a29
 80168a4:	080169df 	.word	0x080169df
 80168a8:	080169e5 	.word	0x080169e5
 80168ac:	080169f3 	.word	0x080169f3
 80168b0:	08016a29 	.word	0x08016a29
 80168b4:	08016a29 	.word	0x08016a29
 80168b8:	080169f9 	.word	0x080169f9
 80168bc:	080169ff 	.word	0x080169ff
 80168c0:	08016a29 	.word	0x08016a29
 80168c4:	08016a05 	.word	0x08016a05
 80168c8:	08016a15 	.word	0x08016a15
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80168cc:	2300      	movs	r3, #0
 80168ce:	61bb      	str	r3, [r7, #24]
            break;
 80168d0:	e0ab      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80168d2:	2300      	movs	r3, #0
 80168d4:	61bb      	str	r3, [r7, #24]
            break;
 80168d6:	e0a8      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80168d8:	2300      	movs	r3, #0
 80168da:	61bb      	str	r3, [r7, #24]
            break;
 80168dc:	e0a5      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80168e4:	733b      	strb	r3, [r7, #12]
 80168e6:	2307      	movs	r3, #7
 80168e8:	737b      	strb	r3, [r7, #13]
 80168ea:	2300      	movs	r3, #0
 80168ec:	73bb      	strb	r3, [r7, #14]
 80168ee:	2310      	movs	r3, #16
 80168f0:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80168f2:	4b51      	ldr	r3, [pc, #324]	@ (8016a38 <RegionEU868GetPhyParam+0x26c>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80168fa:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80168fc:	4b4e      	ldr	r3, [pc, #312]	@ (8016a38 <RegionEU868GetPhyParam+0x26c>)
 80168fe:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016900:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8016902:	f107 030c 	add.w	r3, r7, #12
 8016906:	4618      	mov	r0, r3
 8016908:	f7ff fddf 	bl	80164ca <RegionCommonGetNextLowerTxDr>
 801690c:	4603      	mov	r3, r0
 801690e:	61bb      	str	r3, [r7, #24]
            break;
 8016910:	e08b      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8016912:	2300      	movs	r3, #0
 8016914:	61bb      	str	r3, [r7, #24]
            break;
 8016916:	e088      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8016918:	2300      	movs	r3, #0
 801691a:	61bb      	str	r3, [r7, #24]
            break;
 801691c:	e085      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801691e:	2340      	movs	r3, #64	@ 0x40
 8016920:	61bb      	str	r3, [r7, #24]
            break;
 8016922:	e082      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016924:	2320      	movs	r3, #32
 8016926:	61bb      	str	r3, [r7, #24]
            break;
 8016928:	e07f      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016930:	461a      	mov	r2, r3
 8016932:	4b42      	ldr	r3, [pc, #264]	@ (8016a3c <RegionEU868GetPhyParam+0x270>)
 8016934:	5c9b      	ldrb	r3, [r3, r2]
 8016936:	61bb      	str	r3, [r7, #24]
            break;
 8016938:	e077      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016940:	461a      	mov	r2, r3
 8016942:	4b3f      	ldr	r3, [pc, #252]	@ (8016a40 <RegionEU868GetPhyParam+0x274>)
 8016944:	5c9b      	ldrb	r3, [r3, r2]
 8016946:	61bb      	str	r3, [r7, #24]
            break;
 8016948:	e06f      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801694a:	2301      	movs	r3, #1
 801694c:	61bb      	str	r3, [r7, #24]
            break;
 801694e:	e06c      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8016950:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8016954:	61bb      	str	r3, [r7, #24]
            break;
 8016956:	e068      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016958:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801695c:	61bb      	str	r3, [r7, #24]
            break;
 801695e:	e064      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016960:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8016964:	61bb      	str	r3, [r7, #24]
            break;
 8016966:	e060      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8016968:	f241 3388 	movw	r3, #5000	@ 0x1388
 801696c:	61bb      	str	r3, [r7, #24]
            break;
 801696e:	e05c      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016970:	f241 7370 	movw	r3, #6000	@ 0x1770
 8016974:	61bb      	str	r3, [r7, #24]
            break;
 8016976:	e058      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8016978:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801697c:	4831      	ldr	r0, [pc, #196]	@ (8016a44 <RegionEU868GetPhyParam+0x278>)
 801697e:	f001 f831 	bl	80179e4 <randr>
 8016982:	4603      	mov	r3, r0
 8016984:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8016988:	61bb      	str	r3, [r7, #24]
            break;
 801698a:	e04e      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801698c:	2300      	movs	r3, #0
 801698e:	61bb      	str	r3, [r7, #24]
            break;
 8016990:	e04b      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8016992:	4b2d      	ldr	r3, [pc, #180]	@ (8016a48 <RegionEU868GetPhyParam+0x27c>)
 8016994:	61bb      	str	r3, [r7, #24]
            break;
 8016996:	e048      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8016998:	2300      	movs	r3, #0
 801699a:	61bb      	str	r3, [r7, #24]
            break;
 801699c:	e045      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801699e:	4b26      	ldr	r3, [pc, #152]	@ (8016a38 <RegionEU868GetPhyParam+0x26c>)
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80169a6:	61bb      	str	r3, [r7, #24]
            break;
 80169a8:	e03f      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80169aa:	4b23      	ldr	r3, [pc, #140]	@ (8016a38 <RegionEU868GetPhyParam+0x26c>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80169b2:	61bb      	str	r3, [r7, #24]
            break;
 80169b4:	e039      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80169b6:	2310      	movs	r3, #16
 80169b8:	61bb      	str	r3, [r7, #24]
            break;
 80169ba:	e036      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80169bc:	4b1e      	ldr	r3, [pc, #120]	@ (8016a38 <RegionEU868GetPhyParam+0x26c>)
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	61bb      	str	r3, [r7, #24]
            break;
 80169c2:	e032      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80169c4:	2300      	movs	r3, #0
 80169c6:	61bb      	str	r3, [r7, #24]
            break;
 80169c8:	e02f      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80169ca:	2300      	movs	r3, #0
 80169cc:	61bb      	str	r3, [r7, #24]
            break;
 80169ce:	e02c      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80169d0:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80169d4:	61bb      	str	r3, [r7, #24]
            break;
 80169d6:	e028      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80169d8:	4b1c      	ldr	r3, [pc, #112]	@ (8016a4c <RegionEU868GetPhyParam+0x280>)
 80169da:	61bb      	str	r3, [r7, #24]
            break;
 80169dc:	e025      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80169de:	4b1a      	ldr	r3, [pc, #104]	@ (8016a48 <RegionEU868GetPhyParam+0x27c>)
 80169e0:	61bb      	str	r3, [r7, #24]
            break;
 80169e2:	e022      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80169e4:	2311      	movs	r3, #17
 80169e6:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80169e8:	2301      	movs	r3, #1
 80169ea:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80169ec:	2300      	movs	r3, #0
 80169ee:	76bb      	strb	r3, [r7, #26]
            break;
 80169f0:	e01b      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80169f2:	2303      	movs	r3, #3
 80169f4:	61bb      	str	r3, [r7, #24]
            break;
 80169f6:	e018      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80169f8:	4b13      	ldr	r3, [pc, #76]	@ (8016a48 <RegionEU868GetPhyParam+0x27c>)
 80169fa:	61bb      	str	r3, [r7, #24]
            break;
 80169fc:	e015      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80169fe:	2303      	movs	r3, #3
 8016a00:	61bb      	str	r3, [r7, #24]
            break;
 8016a02:	e012      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a0a:	461a      	mov	r2, r3
 8016a0c:	4b10      	ldr	r3, [pc, #64]	@ (8016a50 <RegionEU868GetPhyParam+0x284>)
 8016a0e:	5c9b      	ldrb	r3, [r3, r2]
 8016a10:	61bb      	str	r3, [r7, #24]
            break;
 8016a12:	e00a      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a1a:	490e      	ldr	r1, [pc, #56]	@ (8016a54 <RegionEU868GetPhyParam+0x288>)
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f7ff fda7 	bl	8016570 <RegionCommonGetBandwidth>
 8016a22:	4603      	mov	r3, r0
 8016a24:	61bb      	str	r3, [r7, #24]
            break;
 8016a26:	e000      	b.n	8016a2a <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8016a28:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8016a2a:	69bb      	ldr	r3, [r7, #24]
 8016a2c:	61fb      	str	r3, [r7, #28]
 8016a2e:	69fb      	ldr	r3, [r7, #28]
}
 8016a30:	4618      	mov	r0, r3
 8016a32:	3720      	adds	r7, #32
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}
 8016a38:	20001b5c 	.word	0x20001b5c
 8016a3c:	0801d4fc 	.word	0x0801d4fc
 8016a40:	0801d504 	.word	0x0801d504
 8016a44:	fffffc18 	.word	0xfffffc18
 8016a48:	33d3e608 	.word	0x33d3e608
 8016a4c:	4009999a 	.word	0x4009999a
 8016a50:	0801d4d4 	.word	0x0801d4d4
 8016a54:	0801d4dc 	.word	0x0801d4dc

08016a58 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016a58:	b590      	push	{r4, r7, lr}
 8016a5a:	b085      	sub	sp, #20
 8016a5c:	af02      	add	r7, sp, #8
 8016a5e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016a60:	4b11      	ldr	r3, [pc, #68]	@ (8016aa8 <RegionEU868SetBandTxDone+0x50>)
 8016a62:	681a      	ldr	r2, [r3, #0]
 8016a64:	4b11      	ldr	r3, [pc, #68]	@ (8016aac <RegionEU868SetBandTxDone+0x54>)
 8016a66:	6819      	ldr	r1, [r3, #0]
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	781b      	ldrb	r3, [r3, #0]
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	4603      	mov	r3, r0
 8016a70:	005b      	lsls	r3, r3, #1
 8016a72:	4403      	add	r3, r0
 8016a74:	009b      	lsls	r3, r3, #2
 8016a76:	440b      	add	r3, r1
 8016a78:	3309      	adds	r3, #9
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	4619      	mov	r1, r3
 8016a7e:	460b      	mov	r3, r1
 8016a80:	005b      	lsls	r3, r3, #1
 8016a82:	440b      	add	r3, r1
 8016a84:	00db      	lsls	r3, r3, #3
 8016a86:	18d0      	adds	r0, r2, r3
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6899      	ldr	r1, [r3, #8]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	785c      	ldrb	r4, [r3, #1]
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	691a      	ldr	r2, [r3, #16]
 8016a94:	9200      	str	r2, [sp, #0]
 8016a96:	68db      	ldr	r3, [r3, #12]
 8016a98:	4622      	mov	r2, r4
 8016a9a:	f7ff f913 	bl	8015cc4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8016a9e:	bf00      	nop
 8016aa0:	370c      	adds	r7, #12
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd90      	pop	{r4, r7, pc}
 8016aa6:	bf00      	nop
 8016aa8:	20001b60 	.word	0x20001b60
 8016aac:	20001b5c 	.word	0x20001b5c

08016ab0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b0b0      	sub	sp, #192	@ 0xc0
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016ab8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016abc:	2290      	movs	r2, #144	@ 0x90
 8016abe:	2100      	movs	r1, #0
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f005 fd7b 	bl	801c5bc <memset>
 8016ac6:	2364      	movs	r3, #100	@ 0x64
 8016ac8:	863b      	strh	r3, [r7, #48]	@ 0x30
 8016aca:	2364      	movs	r3, #100	@ 0x64
 8016acc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016ad0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016ad4:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8016ad8:	230a      	movs	r3, #10
 8016ada:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8016ade:	2364      	movs	r3, #100	@ 0x64
 8016ae0:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8016ae4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016ae8:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	7b1b      	ldrb	r3, [r3, #12]
 8016af0:	2b02      	cmp	r3, #2
 8016af2:	d05d      	beq.n	8016bb0 <RegionEU868InitDefaults+0x100>
 8016af4:	2b02      	cmp	r3, #2
 8016af6:	dc6a      	bgt.n	8016bce <RegionEU868InitDefaults+0x11e>
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d002      	beq.n	8016b02 <RegionEU868InitDefaults+0x52>
 8016afc:	2b01      	cmp	r3, #1
 8016afe:	d03e      	beq.n	8016b7e <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8016b00:	e065      	b.n	8016bce <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d062      	beq.n	8016bd0 <RegionEU868InitDefaults+0x120>
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d05e      	beq.n	8016bd0 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	685b      	ldr	r3, [r3, #4]
 8016b16:	4a30      	ldr	r2, [pc, #192]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016b18:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	689b      	ldr	r3, [r3, #8]
 8016b1e:	4a2f      	ldr	r2, [pc, #188]	@ (8016bdc <RegionEU868InitDefaults+0x12c>)
 8016b20:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8016b22:	4b2e      	ldr	r3, [pc, #184]	@ (8016bdc <RegionEU868InitDefaults+0x12c>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8016b2a:	2290      	movs	r2, #144	@ 0x90
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f000 ff70 	bl	8017a12 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8016b32:	4b29      	ldr	r3, [pc, #164]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	4a2a      	ldr	r2, [pc, #168]	@ (8016be0 <RegionEU868InitDefaults+0x130>)
 8016b38:	ca07      	ldmia	r2, {r0, r1, r2}
 8016b3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8016b3e:	4b26      	ldr	r3, [pc, #152]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	4a28      	ldr	r2, [pc, #160]	@ (8016be4 <RegionEU868InitDefaults+0x134>)
 8016b44:	330c      	adds	r3, #12
 8016b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8016b48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016b4c:	4b22      	ldr	r3, [pc, #136]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	4a25      	ldr	r2, [pc, #148]	@ (8016be8 <RegionEU868InitDefaults+0x138>)
 8016b52:	3318      	adds	r3, #24
 8016b54:	ca07      	ldmia	r2, {r0, r1, r2}
 8016b56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	2207      	movs	r2, #7
 8016b60:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016b64:	4b1c      	ldr	r3, [pc, #112]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8016b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8016b74:	2201      	movs	r2, #1
 8016b76:	4619      	mov	r1, r3
 8016b78:	f7ff f87e 	bl	8015c78 <RegionCommonChanMaskCopy>
 8016b7c:	e028      	b.n	8016bd0 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016b7e:	4b16      	ldr	r3, [pc, #88]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	2200      	movs	r2, #0
 8016b84:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8016b86:	4b14      	ldr	r3, [pc, #80]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016b8e:	4b12      	ldr	r3, [pc, #72]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	2200      	movs	r2, #0
 8016b94:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016b96:	4b10      	ldr	r3, [pc, #64]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8016b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8016ba6:	2201      	movs	r2, #1
 8016ba8:	4619      	mov	r1, r3
 8016baa:	f7ff f865 	bl	8015c78 <RegionCommonChanMaskCopy>
            break;
 8016bae:	e00f      	b.n	8016bd0 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016bb0:	4b09      	ldr	r3, [pc, #36]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8016bb8:	4b07      	ldr	r3, [pc, #28]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8016bc0:	4b05      	ldr	r3, [pc, #20]	@ (8016bd8 <RegionEU868InitDefaults+0x128>)
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	430a      	orrs	r2, r1
 8016bc6:	b292      	uxth	r2, r2
 8016bc8:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8016bcc:	e000      	b.n	8016bd0 <RegionEU868InitDefaults+0x120>
            break;
 8016bce:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016bd0:	37c0      	adds	r7, #192	@ 0xc0
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	bd80      	pop	{r7, pc}
 8016bd6:	bf00      	nop
 8016bd8:	20001b5c 	.word	0x20001b5c
 8016bdc:	20001b60 	.word	0x20001b60
 8016be0:	0801cf18 	.word	0x0801cf18
 8016be4:	0801cf24 	.word	0x0801cf24
 8016be8:	0801cf30 	.word	0x0801cf30

08016bec <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b084      	sub	sp, #16
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
 8016bf4:	460b      	mov	r3, r1
 8016bf6:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016bf8:	78fb      	ldrb	r3, [r7, #3]
 8016bfa:	2b0f      	cmp	r3, #15
 8016bfc:	d86c      	bhi.n	8016cd8 <RegionEU868Verify+0xec>
 8016bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8016c04 <RegionEU868Verify+0x18>)
 8016c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c04:	08016c45 	.word	0x08016c45
 8016c08:	08016cd9 	.word	0x08016cd9
 8016c0c:	08016cd9 	.word	0x08016cd9
 8016c10:	08016cd9 	.word	0x08016cd9
 8016c14:	08016cd9 	.word	0x08016cd9
 8016c18:	08016c5d 	.word	0x08016c5d
 8016c1c:	08016c7b 	.word	0x08016c7b
 8016c20:	08016c99 	.word	0x08016c99
 8016c24:	08016cd9 	.word	0x08016cd9
 8016c28:	08016cb7 	.word	0x08016cb7
 8016c2c:	08016cb7 	.word	0x08016cb7
 8016c30:	08016cd9 	.word	0x08016cd9
 8016c34:	08016cd9 	.word	0x08016cd9
 8016c38:	08016cd9 	.word	0x08016cd9
 8016c3c:	08016cd9 	.word	0x08016cd9
 8016c40:	08016cd5 	.word	0x08016cd5
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016c44:	2300      	movs	r3, #0
 8016c46:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	f107 020f 	add.w	r2, r7, #15
 8016c50:	4611      	mov	r1, r2
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7ff fcf4 	bl	8016640 <VerifyRfFreq>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	e03e      	b.n	8016cda <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8016c62:	2207      	movs	r2, #7
 8016c64:	2100      	movs	r1, #0
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7fe ff89 	bl	8015b7e <RegionCommonValueInRange>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	bf14      	ite	ne
 8016c72:	2301      	movne	r3, #1
 8016c74:	2300      	moveq	r3, #0
 8016c76:	b2db      	uxtb	r3, r3
 8016c78:	e02f      	b.n	8016cda <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8016c80:	2205      	movs	r2, #5
 8016c82:	2100      	movs	r1, #0
 8016c84:	4618      	mov	r0, r3
 8016c86:	f7fe ff7a 	bl	8015b7e <RegionCommonValueInRange>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	bf14      	ite	ne
 8016c90:	2301      	movne	r3, #1
 8016c92:	2300      	moveq	r3, #0
 8016c94:	b2db      	uxtb	r3, r3
 8016c96:	e020      	b.n	8016cda <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	f993 3000 	ldrsb.w	r3, [r3]
 8016c9e:	2207      	movs	r2, #7
 8016ca0:	2100      	movs	r1, #0
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f7fe ff6b 	bl	8015b7e <RegionCommonValueInRange>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	bf14      	ite	ne
 8016cae:	2301      	movne	r3, #1
 8016cb0:	2300      	moveq	r3, #0
 8016cb2:	b2db      	uxtb	r3, r3
 8016cb4:	e011      	b.n	8016cda <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8016cbc:	2207      	movs	r2, #7
 8016cbe:	2100      	movs	r1, #0
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7fe ff5c 	bl	8015b7e <RegionCommonValueInRange>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	bf14      	ite	ne
 8016ccc:	2301      	movne	r3, #1
 8016cce:	2300      	moveq	r3, #0
 8016cd0:	b2db      	uxtb	r3, r3
 8016cd2:	e002      	b.n	8016cda <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016cd4:	2301      	movs	r3, #1
 8016cd6:	e000      	b.n	8016cda <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016cd8:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016cda:	4618      	mov	r0, r3
 8016cdc:	3710      	adds	r7, #16
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bd80      	pop	{r7, pc}
 8016ce2:	bf00      	nop

08016ce4 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b08a      	sub	sp, #40	@ 0x28
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016cec:	2350      	movs	r3, #80	@ 0x50
 8016cee:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	7a1b      	ldrb	r3, [r3, #8]
 8016cf6:	2b10      	cmp	r3, #16
 8016cf8:	d162      	bne.n	8016dc0 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	685b      	ldr	r3, [r3, #4]
 8016cfe:	330f      	adds	r3, #15
 8016d00:	781b      	ldrb	r3, [r3, #0]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d15e      	bne.n	8016dc4 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016d06:	2300      	movs	r3, #0
 8016d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016d0c:	2303      	movs	r3, #3
 8016d0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016d12:	e050      	b.n	8016db6 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016d14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016d18:	2b07      	cmp	r3, #7
 8016d1a:	d824      	bhi.n	8016d66 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	685a      	ldr	r2, [r3, #4]
 8016d20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016d24:	4413      	add	r3, r2
 8016d26:	781b      	ldrb	r3, [r3, #0]
 8016d28:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016d2a:	69ba      	ldr	r2, [r7, #24]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	6859      	ldr	r1, [r3, #4]
 8016d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016d34:	3301      	adds	r3, #1
 8016d36:	440b      	add	r3, r1
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	021b      	lsls	r3, r3, #8
 8016d3c:	4313      	orrs	r3, r2
 8016d3e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016d40:	69ba      	ldr	r2, [r7, #24]
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	6859      	ldr	r1, [r3, #4]
 8016d46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016d4a:	3302      	adds	r3, #2
 8016d4c:	440b      	add	r3, r1
 8016d4e:	781b      	ldrb	r3, [r3, #0]
 8016d50:	041b      	lsls	r3, r3, #16
 8016d52:	4313      	orrs	r3, r2
 8016d54:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016d56:	69bb      	ldr	r3, [r7, #24]
 8016d58:	2264      	movs	r2, #100	@ 0x64
 8016d5a:	fb02 f303 	mul.w	r3, r2, r3
 8016d5e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016d60:	2300      	movs	r3, #0
 8016d62:	61fb      	str	r3, [r7, #28]
 8016d64:	e006      	b.n	8016d74 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016d66:	2300      	movs	r3, #0
 8016d68:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016d70:	2300      	movs	r3, #0
 8016d72:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016d74:	69bb      	ldr	r3, [r7, #24]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d00b      	beq.n	8016d92 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016d7a:	f107 0318 	add.w	r3, r7, #24
 8016d7e:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016d80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016d84:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8016d86:	f107 0310 	add.w	r3, r7, #16
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f000 fd14 	bl	80177b8 <RegionEU868ChannelAdd>
 8016d90:	e007      	b.n	8016da2 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016d92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016d96:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016d98:	f107 030c 	add.w	r3, r7, #12
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	f000 fdad 	bl	80178fc <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016da2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016da6:	3303      	adds	r3, #3
 8016da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016dac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016db0:	3301      	adds	r3, #1
 8016db2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016db6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016dba:	2b0f      	cmp	r3, #15
 8016dbc:	d9aa      	bls.n	8016d14 <RegionEU868ApplyCFList+0x30>
 8016dbe:	e002      	b.n	8016dc6 <RegionEU868ApplyCFList+0xe2>
        return;
 8016dc0:	bf00      	nop
 8016dc2:	e000      	b.n	8016dc6 <RegionEU868ApplyCFList+0xe2>
        return;
 8016dc4:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016dc6:	3728      	adds	r7, #40	@ 0x28
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	bd80      	pop	{r7, pc}

08016dcc <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b082      	sub	sp, #8
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	791b      	ldrb	r3, [r3, #4]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d002      	beq.n	8016de2 <RegionEU868ChanMaskSet+0x16>
 8016ddc:	2b01      	cmp	r3, #1
 8016dde:	d00b      	beq.n	8016df8 <RegionEU868ChanMaskSet+0x2c>
 8016de0:	e015      	b.n	8016e0e <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016de2:	4b0e      	ldr	r3, [pc, #56]	@ (8016e1c <RegionEU868ChanMaskSet+0x50>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	2201      	movs	r2, #1
 8016df0:	4619      	mov	r1, r3
 8016df2:	f7fe ff41 	bl	8015c78 <RegionCommonChanMaskCopy>
            break;
 8016df6:	e00c      	b.n	8016e12 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016df8:	4b08      	ldr	r3, [pc, #32]	@ (8016e1c <RegionEU868ChanMaskSet+0x50>)
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	2201      	movs	r2, #1
 8016e06:	4619      	mov	r1, r3
 8016e08:	f7fe ff36 	bl	8015c78 <RegionCommonChanMaskCopy>
            break;
 8016e0c:	e001      	b.n	8016e12 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8016e0e:	2300      	movs	r3, #0
 8016e10:	e000      	b.n	8016e14 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016e12:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016e14:	4618      	mov	r0, r3
 8016e16:	3708      	adds	r7, #8
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	bd80      	pop	{r7, pc}
 8016e1c:	20001b5c 	.word	0x20001b5c

08016e20 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b088      	sub	sp, #32
 8016e24:	af02      	add	r7, sp, #8
 8016e26:	60ba      	str	r2, [r7, #8]
 8016e28:	607b      	str	r3, [r7, #4]
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	73fb      	strb	r3, [r7, #15]
 8016e2e:	460b      	mov	r3, r1
 8016e30:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8016e32:	2300      	movs	r3, #0
 8016e34:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e3a:	2b07      	cmp	r3, #7
 8016e3c:	bfa8      	it	ge
 8016e3e:	2307      	movge	r3, #7
 8016e40:	b25a      	sxtb	r2, r3
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016e4c:	491e      	ldr	r1, [pc, #120]	@ (8016ec8 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f7ff fb8e 	bl	8016570 <RegionCommonGetBandwidth>
 8016e54:	4603      	mov	r3, r0
 8016e56:	b2da      	uxtb	r2, r3
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016e62:	2b07      	cmp	r3, #7
 8016e64:	d10a      	bne.n	8016e7c <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016e6c:	461a      	mov	r2, r3
 8016e6e:	4b17      	ldr	r3, [pc, #92]	@ (8016ecc <RegionEU868ComputeRxWindowParameters+0xac>)
 8016e70:	5c9b      	ldrb	r3, [r3, r2]
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7ff f910 	bl	8016098 <RegionCommonComputeSymbolTimeFsk>
 8016e78:	6178      	str	r0, [r7, #20]
 8016e7a:	e011      	b.n	8016ea0 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016e82:	461a      	mov	r2, r3
 8016e84:	4b11      	ldr	r3, [pc, #68]	@ (8016ecc <RegionEU868ComputeRxWindowParameters+0xac>)
 8016e86:	5c9a      	ldrb	r2, [r3, r2]
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016e8e:	4619      	mov	r1, r3
 8016e90:	4b0d      	ldr	r3, [pc, #52]	@ (8016ec8 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016e92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016e96:	4619      	mov	r1, r3
 8016e98:	4610      	mov	r0, r2
 8016e9a:	f7ff f8e7 	bl	801606c <RegionCommonComputeSymbolTimeLoRa>
 8016e9e:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8016ed0 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8016ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016ea4:	4798      	blx	r3
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	3308      	adds	r3, #8
 8016eaa:	687a      	ldr	r2, [r7, #4]
 8016eac:	320c      	adds	r2, #12
 8016eae:	7bb9      	ldrb	r1, [r7, #14]
 8016eb0:	9201      	str	r2, [sp, #4]
 8016eb2:	9300      	str	r3, [sp, #0]
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	68ba      	ldr	r2, [r7, #8]
 8016eb8:	6978      	ldr	r0, [r7, #20]
 8016eba:	f7ff f8fd 	bl	80160b8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8016ebe:	bf00      	nop
 8016ec0:	3718      	adds	r7, #24
 8016ec2:	46bd      	mov	sp, r7
 8016ec4:	bd80      	pop	{r7, pc}
 8016ec6:	bf00      	nop
 8016ec8:	0801d4dc 	.word	0x0801d4dc
 8016ecc:	0801d4d4 	.word	0x0801d4d4
 8016ed0:	0801d50c 	.word	0x0801d50c

08016ed4 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016ed4:	b5b0      	push	{r4, r5, r7, lr}
 8016ed6:	b090      	sub	sp, #64	@ 0x40
 8016ed8:	af0a      	add	r7, sp, #40	@ 0x28
 8016eda:	6078      	str	r0, [r7, #4]
 8016edc:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	785b      	ldrb	r3, [r3, #1]
 8016ee2:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016ee8:	2300      	movs	r3, #0
 8016eea:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	685b      	ldr	r3, [r3, #4]
 8016ef0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016ef2:	4b5a      	ldr	r3, [pc, #360]	@ (801705c <RegionEU868RxConfig+0x188>)
 8016ef4:	685b      	ldr	r3, [r3, #4]
 8016ef6:	4798      	blx	r3
 8016ef8:	4603      	mov	r3, r0
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d001      	beq.n	8016f02 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8016efe:	2300      	movs	r3, #0
 8016f00:	e0a8      	b.n	8017054 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	7cdb      	ldrb	r3, [r3, #19]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d126      	bne.n	8016f58 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8016f0a:	4b55      	ldr	r3, [pc, #340]	@ (8017060 <RegionEU868RxConfig+0x18c>)
 8016f0c:	681a      	ldr	r2, [r3, #0]
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	781b      	ldrb	r3, [r3, #0]
 8016f12:	4619      	mov	r1, r3
 8016f14:	460b      	mov	r3, r1
 8016f16:	005b      	lsls	r3, r3, #1
 8016f18:	440b      	add	r3, r1
 8016f1a:	009b      	lsls	r3, r3, #2
 8016f1c:	4413      	add	r3, r2
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8016f22:	4b4f      	ldr	r3, [pc, #316]	@ (8017060 <RegionEU868RxConfig+0x18c>)
 8016f24:	681a      	ldr	r2, [r3, #0]
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	781b      	ldrb	r3, [r3, #0]
 8016f2a:	4619      	mov	r1, r3
 8016f2c:	460b      	mov	r3, r1
 8016f2e:	005b      	lsls	r3, r3, #1
 8016f30:	440b      	add	r3, r1
 8016f32:	009b      	lsls	r3, r3, #2
 8016f34:	4413      	add	r3, r2
 8016f36:	3304      	adds	r3, #4
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d00c      	beq.n	8016f58 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8016f3e:	4b48      	ldr	r3, [pc, #288]	@ (8017060 <RegionEU868RxConfig+0x18c>)
 8016f40:	681a      	ldr	r2, [r3, #0]
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	781b      	ldrb	r3, [r3, #0]
 8016f46:	4619      	mov	r1, r3
 8016f48:	460b      	mov	r3, r1
 8016f4a:	005b      	lsls	r3, r3, #1
 8016f4c:	440b      	add	r3, r1
 8016f4e:	009b      	lsls	r3, r3, #2
 8016f50:	4413      	add	r3, r2
 8016f52:	3304      	adds	r3, #4
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8016f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f5c:	4a41      	ldr	r2, [pc, #260]	@ (8017064 <RegionEU868RxConfig+0x190>)
 8016f5e:	5cd3      	ldrb	r3, [r2, r3]
 8016f60:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016f62:	4b3e      	ldr	r3, [pc, #248]	@ (801705c <RegionEU868RxConfig+0x188>)
 8016f64:	68db      	ldr	r3, [r3, #12]
 8016f66:	6938      	ldr	r0, [r7, #16]
 8016f68:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8016f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f6e:	2b07      	cmp	r3, #7
 8016f70:	d128      	bne.n	8016fc4 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8016f72:	2300      	movs	r3, #0
 8016f74:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8016f76:	4b39      	ldr	r3, [pc, #228]	@ (801705c <RegionEU868RxConfig+0x188>)
 8016f78:	699c      	ldr	r4, [r3, #24]
 8016f7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016f7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016f82:	fb02 f303 	mul.w	r3, r2, r3
 8016f86:	4619      	mov	r1, r3
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	689b      	ldr	r3, [r3, #8]
 8016f8c:	b29b      	uxth	r3, r3
 8016f8e:	687a      	ldr	r2, [r7, #4]
 8016f90:	7c92      	ldrb	r2, [r2, #18]
 8016f92:	7df8      	ldrb	r0, [r7, #23]
 8016f94:	9209      	str	r2, [sp, #36]	@ 0x24
 8016f96:	2200      	movs	r2, #0
 8016f98:	9208      	str	r2, [sp, #32]
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	9207      	str	r2, [sp, #28]
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	9206      	str	r2, [sp, #24]
 8016fa2:	2201      	movs	r2, #1
 8016fa4:	9205      	str	r2, [sp, #20]
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	9204      	str	r2, [sp, #16]
 8016faa:	2200      	movs	r2, #0
 8016fac:	9203      	str	r2, [sp, #12]
 8016fae:	9302      	str	r3, [sp, #8]
 8016fb0:	2305      	movs	r3, #5
 8016fb2:	9301      	str	r3, [sp, #4]
 8016fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8017068 <RegionEU868RxConfig+0x194>)
 8016fb6:	9300      	str	r3, [sp, #0]
 8016fb8:	2300      	movs	r3, #0
 8016fba:	460a      	mov	r2, r1
 8016fbc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8016fc0:	47a0      	blx	r4
 8016fc2:	e024      	b.n	801700e <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8016fc4:	2301      	movs	r3, #1
 8016fc6:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016fc8:	4b24      	ldr	r3, [pc, #144]	@ (801705c <RegionEU868RxConfig+0x188>)
 8016fca:	699c      	ldr	r4, [r3, #24]
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	789b      	ldrb	r3, [r3, #2]
 8016fd0:	461d      	mov	r5, r3
 8016fd2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	689b      	ldr	r3, [r3, #8]
 8016fda:	b29b      	uxth	r3, r3
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	7c92      	ldrb	r2, [r2, #18]
 8016fe0:	7df8      	ldrb	r0, [r7, #23]
 8016fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8016fe4:	2201      	movs	r2, #1
 8016fe6:	9208      	str	r2, [sp, #32]
 8016fe8:	2200      	movs	r2, #0
 8016fea:	9207      	str	r2, [sp, #28]
 8016fec:	2200      	movs	r2, #0
 8016fee:	9206      	str	r2, [sp, #24]
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	9205      	str	r2, [sp, #20]
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	9204      	str	r2, [sp, #16]
 8016ff8:	2200      	movs	r2, #0
 8016ffa:	9203      	str	r2, [sp, #12]
 8016ffc:	9302      	str	r3, [sp, #8]
 8016ffe:	2308      	movs	r3, #8
 8017000:	9301      	str	r3, [sp, #4]
 8017002:	2300      	movs	r3, #0
 8017004:	9300      	str	r3, [sp, #0]
 8017006:	2301      	movs	r3, #1
 8017008:	460a      	mov	r2, r1
 801700a:	4629      	mov	r1, r5
 801700c:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	7c5b      	ldrb	r3, [r3, #17]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d005      	beq.n	8017022 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8017016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801701a:	4a14      	ldr	r2, [pc, #80]	@ (801706c <RegionEU868RxConfig+0x198>)
 801701c:	5cd3      	ldrb	r3, [r2, r3]
 801701e:	75bb      	strb	r3, [r7, #22]
 8017020:	e004      	b.n	801702c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8017022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017026:	4a12      	ldr	r2, [pc, #72]	@ (8017070 <RegionEU868RxConfig+0x19c>)
 8017028:	5cd3      	ldrb	r3, [r2, r3]
 801702a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801702c:	4b0b      	ldr	r3, [pc, #44]	@ (801705c <RegionEU868RxConfig+0x188>)
 801702e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017030:	7dba      	ldrb	r2, [r7, #22]
 8017032:	320d      	adds	r2, #13
 8017034:	b2d1      	uxtb	r1, r2
 8017036:	7dfa      	ldrb	r2, [r7, #23]
 8017038:	4610      	mov	r0, r2
 801703a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	7cdb      	ldrb	r3, [r3, #19]
 8017040:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017044:	6939      	ldr	r1, [r7, #16]
 8017046:	4618      	mov	r0, r3
 8017048:	f7ff fab0 	bl	80165ac <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801704c:	683b      	ldr	r3, [r7, #0]
 801704e:	7bfa      	ldrb	r2, [r7, #15]
 8017050:	701a      	strb	r2, [r3, #0]
    return true;
 8017052:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017054:	4618      	mov	r0, r3
 8017056:	3718      	adds	r7, #24
 8017058:	46bd      	mov	sp, r7
 801705a:	bdb0      	pop	{r4, r5, r7, pc}
 801705c:	0801d50c 	.word	0x0801d50c
 8017060:	20001b5c 	.word	0x20001b5c
 8017064:	0801d4d4 	.word	0x0801d4d4
 8017068:	00014585 	.word	0x00014585
 801706c:	0801d504 	.word	0x0801d504
 8017070:	0801d4fc 	.word	0x0801d4fc

08017074 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017074:	b590      	push	{r4, r7, lr}
 8017076:	b093      	sub	sp, #76	@ 0x4c
 8017078:	af0a      	add	r7, sp, #40	@ 0x28
 801707a:	60f8      	str	r0, [r7, #12]
 801707c:	60b9      	str	r1, [r7, #8]
 801707e:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017086:	461a      	mov	r2, r3
 8017088:	4b5d      	ldr	r3, [pc, #372]	@ (8017200 <RegionEU868TxConfig+0x18c>)
 801708a:	5c9b      	ldrb	r3, [r3, r2]
 801708c:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017094:	4b5b      	ldr	r3, [pc, #364]	@ (8017204 <RegionEU868TxConfig+0x190>)
 8017096:	681a      	ldr	r2, [r3, #0]
 8017098:	4b5b      	ldr	r3, [pc, #364]	@ (8017208 <RegionEU868TxConfig+0x194>)
 801709a:	6819      	ldr	r1, [r3, #0]
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	781b      	ldrb	r3, [r3, #0]
 80170a0:	461c      	mov	r4, r3
 80170a2:	4623      	mov	r3, r4
 80170a4:	005b      	lsls	r3, r3, #1
 80170a6:	4423      	add	r3, r4
 80170a8:	009b      	lsls	r3, r3, #2
 80170aa:	440b      	add	r3, r1
 80170ac:	3309      	adds	r3, #9
 80170ae:	781b      	ldrb	r3, [r3, #0]
 80170b0:	4619      	mov	r1, r3
 80170b2:	460b      	mov	r3, r1
 80170b4:	005b      	lsls	r3, r3, #1
 80170b6:	440b      	add	r3, r1
 80170b8:	00db      	lsls	r3, r3, #3
 80170ba:	4413      	add	r3, r2
 80170bc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80170c0:	4619      	mov	r1, r3
 80170c2:	f7ff fa40 	bl	8016546 <RegionCommonLimitTxPower>
 80170c6:	4603      	mov	r3, r0
 80170c8:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80170d0:	494e      	ldr	r1, [pc, #312]	@ (801720c <RegionEU868TxConfig+0x198>)
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7ff fa4c 	bl	8016570 <RegionCommonGetBandwidth>
 80170d8:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80170da:	2300      	movs	r3, #0
 80170dc:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	6859      	ldr	r1, [r3, #4]
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	689a      	ldr	r2, [r3, #8]
 80170e6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80170ea:	4618      	mov	r0, r3
 80170ec:	f7ff f89c 	bl	8016228 <RegionCommonComputeTxPower>
 80170f0:	4603      	mov	r3, r0
 80170f2:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80170f4:	4b46      	ldr	r3, [pc, #280]	@ (8017210 <RegionEU868TxConfig+0x19c>)
 80170f6:	68da      	ldr	r2, [r3, #12]
 80170f8:	4b43      	ldr	r3, [pc, #268]	@ (8017208 <RegionEU868TxConfig+0x194>)
 80170fa:	6819      	ldr	r1, [r3, #0]
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	781b      	ldrb	r3, [r3, #0]
 8017100:	4618      	mov	r0, r3
 8017102:	4603      	mov	r3, r0
 8017104:	005b      	lsls	r3, r3, #1
 8017106:	4403      	add	r3, r0
 8017108:	009b      	lsls	r3, r3, #2
 801710a:	440b      	add	r3, r1
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	4618      	mov	r0, r3
 8017110:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017118:	2b07      	cmp	r3, #7
 801711a:	d124      	bne.n	8017166 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801711c:	2300      	movs	r3, #0
 801711e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8017120:	4b3b      	ldr	r3, [pc, #236]	@ (8017210 <RegionEU868TxConfig+0x19c>)
 8017122:	69dc      	ldr	r4, [r3, #28]
 8017124:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017128:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801712c:	fb02 f303 	mul.w	r3, r2, r3
 8017130:	461a      	mov	r2, r3
 8017132:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017136:	7ff8      	ldrb	r0, [r7, #31]
 8017138:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 801713c:	9308      	str	r3, [sp, #32]
 801713e:	2300      	movs	r3, #0
 8017140:	9307      	str	r3, [sp, #28]
 8017142:	2300      	movs	r3, #0
 8017144:	9306      	str	r3, [sp, #24]
 8017146:	2300      	movs	r3, #0
 8017148:	9305      	str	r3, [sp, #20]
 801714a:	2301      	movs	r3, #1
 801714c:	9304      	str	r3, [sp, #16]
 801714e:	2300      	movs	r3, #0
 8017150:	9303      	str	r3, [sp, #12]
 8017152:	2305      	movs	r3, #5
 8017154:	9302      	str	r3, [sp, #8]
 8017156:	2300      	movs	r3, #0
 8017158:	9301      	str	r3, [sp, #4]
 801715a:	9200      	str	r2, [sp, #0]
 801715c:	69bb      	ldr	r3, [r7, #24]
 801715e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8017162:	47a0      	blx	r4
 8017164:	e01d      	b.n	80171a2 <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8017166:	2301      	movs	r3, #1
 8017168:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801716a:	4b29      	ldr	r3, [pc, #164]	@ (8017210 <RegionEU868TxConfig+0x19c>)
 801716c:	69dc      	ldr	r4, [r3, #28]
 801716e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017172:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017176:	7ff8      	ldrb	r0, [r7, #31]
 8017178:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 801717c:	9208      	str	r2, [sp, #32]
 801717e:	2200      	movs	r2, #0
 8017180:	9207      	str	r2, [sp, #28]
 8017182:	2200      	movs	r2, #0
 8017184:	9206      	str	r2, [sp, #24]
 8017186:	2200      	movs	r2, #0
 8017188:	9205      	str	r2, [sp, #20]
 801718a:	2201      	movs	r2, #1
 801718c:	9204      	str	r2, [sp, #16]
 801718e:	2200      	movs	r2, #0
 8017190:	9203      	str	r2, [sp, #12]
 8017192:	2208      	movs	r2, #8
 8017194:	9202      	str	r2, [sp, #8]
 8017196:	2201      	movs	r2, #1
 8017198:	9201      	str	r2, [sp, #4]
 801719a:	9300      	str	r3, [sp, #0]
 801719c:	69bb      	ldr	r3, [r7, #24]
 801719e:	2200      	movs	r2, #0
 80171a0:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80171a2:	4b19      	ldr	r3, [pc, #100]	@ (8017208 <RegionEU868TxConfig+0x194>)
 80171a4:	681a      	ldr	r2, [r3, #0]
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	781b      	ldrb	r3, [r3, #0]
 80171aa:	4619      	mov	r1, r3
 80171ac:	460b      	mov	r3, r1
 80171ae:	005b      	lsls	r3, r3, #1
 80171b0:	440b      	add	r3, r1
 80171b2:	009b      	lsls	r3, r3, #2
 80171b4:	4413      	add	r3, r2
 80171b6:	681a      	ldr	r2, [r3, #0]
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80171be:	4619      	mov	r1, r3
 80171c0:	4610      	mov	r0, r2
 80171c2:	f7ff fa25 	bl	8016610 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	899b      	ldrh	r3, [r3, #12]
 80171d0:	4619      	mov	r1, r3
 80171d2:	4610      	mov	r0, r2
 80171d4:	f7ff faaa 	bl	801672c <GetTimeOnAir>
 80171d8:	4602      	mov	r2, r0
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80171de:	4b0c      	ldr	r3, [pc, #48]	@ (8017210 <RegionEU868TxConfig+0x19c>)
 80171e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80171e2:	68fa      	ldr	r2, [r7, #12]
 80171e4:	8992      	ldrh	r2, [r2, #12]
 80171e6:	b2d1      	uxtb	r1, r2
 80171e8:	7ffa      	ldrb	r2, [r7, #31]
 80171ea:	4610      	mov	r0, r2
 80171ec:	4798      	blx	r3

    *txPower = txPowerLimited;
 80171ee:	68bb      	ldr	r3, [r7, #8]
 80171f0:	7f7a      	ldrb	r2, [r7, #29]
 80171f2:	701a      	strb	r2, [r3, #0]
    return true;
 80171f4:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	3724      	adds	r7, #36	@ 0x24
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd90      	pop	{r4, r7, pc}
 80171fe:	bf00      	nop
 8017200:	0801d4d4 	.word	0x0801d4d4
 8017204:	20001b60 	.word	0x20001b60
 8017208:	20001b5c 	.word	0x20001b5c
 801720c:	0801d4dc 	.word	0x0801d4dc
 8017210:	0801d50c 	.word	0x0801d50c

08017214 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017214:	b590      	push	{r4, r7, lr}
 8017216:	b093      	sub	sp, #76	@ 0x4c
 8017218:	af00      	add	r7, sp, #0
 801721a:	60f8      	str	r0, [r7, #12]
 801721c:	60b9      	str	r1, [r7, #8]
 801721e:	607a      	str	r2, [r7, #4]
 8017220:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017222:	2307      	movs	r3, #7
 8017224:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017228:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801722c:	2200      	movs	r2, #0
 801722e:	601a      	str	r2, [r3, #0]
 8017230:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017232:	2300      	movs	r3, #0
 8017234:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8017238:	2300      	movs	r3, #0
 801723a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 801723e:	2300      	movs	r3, #0
 8017240:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017242:	e085      	b.n	8017350 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	685a      	ldr	r2, [r3, #4]
 8017248:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801724c:	4413      	add	r3, r2
 801724e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8017252:	4611      	mov	r1, r2
 8017254:	4618      	mov	r0, r3
 8017256:	f7fe fe2f 	bl	8015eb8 <RegionCommonParseLinkAdrReq>
 801725a:	4603      	mov	r3, r0
 801725c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8017260:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017264:	2b00      	cmp	r3, #0
 8017266:	d07b      	beq.n	8017360 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017268:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801726c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017270:	4413      	add	r3, r2
 8017272:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8017276:	2307      	movs	r3, #7
 8017278:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801727c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017280:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8017282:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8017286:	2b00      	cmp	r3, #0
 8017288:	d109      	bne.n	801729e <RegionEU868LinkAdrReq+0x8a>
 801728a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801728c:	2b00      	cmp	r3, #0
 801728e:	d106      	bne.n	801729e <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8017290:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017294:	f023 0301 	bic.w	r3, r3, #1
 8017298:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801729c:	e058      	b.n	8017350 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801729e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d003      	beq.n	80172ae <RegionEU868LinkAdrReq+0x9a>
 80172a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80172aa:	2b05      	cmp	r3, #5
 80172ac:	d903      	bls.n	80172b6 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80172ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80172b2:	2b06      	cmp	r3, #6
 80172b4:	d906      	bls.n	80172c4 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80172b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80172ba:	f023 0301 	bic.w	r3, r3, #1
 80172be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80172c2:	e045      	b.n	8017350 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80172c4:	2300      	movs	r3, #0
 80172c6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80172ca:	e03d      	b.n	8017348 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80172cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80172d0:	2b06      	cmp	r3, #6
 80172d2:	d118      	bne.n	8017306 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80172d4:	4b5f      	ldr	r3, [pc, #380]	@ (8017454 <RegionEU868LinkAdrReq+0x240>)
 80172d6:	6819      	ldr	r1, [r3, #0]
 80172d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80172dc:	4613      	mov	r3, r2
 80172de:	005b      	lsls	r3, r3, #1
 80172e0:	4413      	add	r3, r2
 80172e2:	009b      	lsls	r3, r3, #2
 80172e4:	440b      	add	r3, r1
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d028      	beq.n	801733e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80172ec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80172f0:	2201      	movs	r2, #1
 80172f2:	fa02 f303 	lsl.w	r3, r2, r3
 80172f6:	b21a      	sxth	r2, r3
 80172f8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80172fa:	b21b      	sxth	r3, r3
 80172fc:	4313      	orrs	r3, r2
 80172fe:	b21b      	sxth	r3, r3
 8017300:	b29b      	uxth	r3, r3
 8017302:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8017304:	e01b      	b.n	801733e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017306:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017308:	461a      	mov	r2, r3
 801730a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801730e:	fa42 f303 	asr.w	r3, r2, r3
 8017312:	f003 0301 	and.w	r3, r3, #1
 8017316:	2b00      	cmp	r3, #0
 8017318:	d011      	beq.n	801733e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801731a:	4b4e      	ldr	r3, [pc, #312]	@ (8017454 <RegionEU868LinkAdrReq+0x240>)
 801731c:	6819      	ldr	r1, [r3, #0]
 801731e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8017322:	4613      	mov	r3, r2
 8017324:	005b      	lsls	r3, r3, #1
 8017326:	4413      	add	r3, r2
 8017328:	009b      	lsls	r3, r3, #2
 801732a:	440b      	add	r3, r1
 801732c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801732e:	2b00      	cmp	r3, #0
 8017330:	d105      	bne.n	801733e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8017332:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017336:	f023 0301 	bic.w	r3, r3, #1
 801733a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801733e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8017342:	3301      	adds	r3, #1
 8017344:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8017348:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801734c:	2b0f      	cmp	r3, #15
 801734e:	d9bd      	bls.n	80172cc <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	7a1b      	ldrb	r3, [r3, #8]
 8017354:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8017358:	429a      	cmp	r2, r3
 801735a:	f4ff af73 	bcc.w	8017244 <RegionEU868LinkAdrReq+0x30>
 801735e:	e000      	b.n	8017362 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8017360:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8017362:	2302      	movs	r3, #2
 8017364:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	7a5b      	ldrb	r3, [r3, #9]
 801736c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8017370:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8017374:	4618      	mov	r0, r3
 8017376:	f7ff fa29 	bl	80167cc <RegionEU868GetPhyParam>
 801737a:	4603      	mov	r3, r0
 801737c:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 801737e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017382:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	7a9b      	ldrb	r3, [r3, #10]
 8017388:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801738a:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801738e:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017390:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8017394:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8017396:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801739a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80173a2:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80173aa:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	7b5b      	ldrb	r3, [r3, #13]
 80173b0:	b25b      	sxtb	r3, r3
 80173b2:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80173b4:	2310      	movs	r3, #16
 80173b6:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80173b8:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80173bc:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80173be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173c0:	b25b      	sxtb	r3, r3
 80173c2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80173c6:	2307      	movs	r3, #7
 80173c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80173cc:	4b21      	ldr	r3, [pc, #132]	@ (8017454 <RegionEU868LinkAdrReq+0x240>)
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80173d2:	2307      	movs	r3, #7
 80173d4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80173d8:	2300      	movs	r3, #0
 80173da:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80173e4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80173e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80173ec:	1c9a      	adds	r2, r3, #2
 80173ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80173f2:	1c59      	adds	r1, r3, #1
 80173f4:	f107 0010 	add.w	r0, r7, #16
 80173f8:	4623      	mov	r3, r4
 80173fa:	f7fe fdaf 	bl	8015f5c <RegionCommonLinkAdrReqVerifyParams>
 80173fe:	4603      	mov	r3, r0
 8017400:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017404:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017408:	2b07      	cmp	r3, #7
 801740a:	d10d      	bne.n	8017428 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801740c:	4b11      	ldr	r3, [pc, #68]	@ (8017454 <RegionEU868LinkAdrReq+0x240>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017414:	220c      	movs	r2, #12
 8017416:	2100      	movs	r1, #0
 8017418:	4618      	mov	r0, r3
 801741a:	f000 fb35 	bl	8017a88 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801741e:	4b0d      	ldr	r3, [pc, #52]	@ (8017454 <RegionEU868LinkAdrReq+0x240>)
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017424:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8017428:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 801742c:	68bb      	ldr	r3, [r7, #8]
 801742e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017430:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017438:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801743c:	683b      	ldr	r3, [r7, #0]
 801743e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017440:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017442:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8017446:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8017448:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801744c:	4618      	mov	r0, r3
 801744e:	374c      	adds	r7, #76	@ 0x4c
 8017450:	46bd      	mov	sp, r7
 8017452:	bd90      	pop	{r4, r7, pc}
 8017454:	20001b5c 	.word	0x20001b5c

08017458 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b084      	sub	sp, #16
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017460:	2307      	movs	r3, #7
 8017462:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017464:	2300      	movs	r3, #0
 8017466:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	685b      	ldr	r3, [r3, #4]
 801746c:	f107 020e 	add.w	r2, r7, #14
 8017470:	4611      	mov	r1, r2
 8017472:	4618      	mov	r0, r3
 8017474:	f7ff f8e4 	bl	8016640 <VerifyRfFreq>
 8017478:	4603      	mov	r3, r0
 801747a:	f083 0301 	eor.w	r3, r3, #1
 801747e:	b2db      	uxtb	r3, r3
 8017480:	2b00      	cmp	r3, #0
 8017482:	d003      	beq.n	801748c <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8017484:	7bfb      	ldrb	r3, [r7, #15]
 8017486:	f023 0301 	bic.w	r3, r3, #1
 801748a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	f993 3000 	ldrsb.w	r3, [r3]
 8017492:	2207      	movs	r2, #7
 8017494:	2100      	movs	r1, #0
 8017496:	4618      	mov	r0, r3
 8017498:	f7fe fb71 	bl	8015b7e <RegionCommonValueInRange>
 801749c:	4603      	mov	r3, r0
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d103      	bne.n	80174aa <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80174a2:	7bfb      	ldrb	r3, [r7, #15]
 80174a4:	f023 0302 	bic.w	r3, r3, #2
 80174a8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80174b0:	2205      	movs	r2, #5
 80174b2:	2100      	movs	r1, #0
 80174b4:	4618      	mov	r0, r3
 80174b6:	f7fe fb62 	bl	8015b7e <RegionCommonValueInRange>
 80174ba:	4603      	mov	r3, r0
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d103      	bne.n	80174c8 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80174c0:	7bfb      	ldrb	r3, [r7, #15]
 80174c2:	f023 0304 	bic.w	r3, r3, #4
 80174c6:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80174c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80174ca:	4618      	mov	r0, r3
 80174cc:	3710      	adds	r7, #16
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bd80      	pop	{r7, pc}
	...

080174d4 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b086      	sub	sp, #24
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80174dc:	2303      	movs	r3, #3
 80174de:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d114      	bne.n	8017514 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80174f0:	b2db      	uxtb	r3, r3
 80174f2:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80174f4:	f107 0308 	add.w	r3, r7, #8
 80174f8:	4618      	mov	r0, r3
 80174fa:	f000 f9ff 	bl	80178fc <RegionEU868ChannelsRemove>
 80174fe:	4603      	mov	r3, r0
 8017500:	f083 0301 	eor.w	r3, r3, #1
 8017504:	b2db      	uxtb	r3, r3
 8017506:	2b00      	cmp	r3, #0
 8017508:	d03b      	beq.n	8017582 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801750a:	7dfb      	ldrb	r3, [r7, #23]
 801750c:	f023 0303 	bic.w	r3, r3, #3
 8017510:	75fb      	strb	r3, [r7, #23]
 8017512:	e036      	b.n	8017582 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017520:	b2db      	uxtb	r3, r3
 8017522:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8017524:	f107 030c 	add.w	r3, r7, #12
 8017528:	4618      	mov	r0, r3
 801752a:	f000 f945 	bl	80177b8 <RegionEU868ChannelAdd>
 801752e:	4603      	mov	r3, r0
 8017530:	2b06      	cmp	r3, #6
 8017532:	d820      	bhi.n	8017576 <RegionEU868NewChannelReq+0xa2>
 8017534:	a201      	add	r2, pc, #4	@ (adr r2, 801753c <RegionEU868NewChannelReq+0x68>)
 8017536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801753a:	bf00      	nop
 801753c:	08017581 	.word	0x08017581
 8017540:	08017577 	.word	0x08017577
 8017544:	08017577 	.word	0x08017577
 8017548:	08017577 	.word	0x08017577
 801754c:	08017559 	.word	0x08017559
 8017550:	08017563 	.word	0x08017563
 8017554:	0801756d 	.word	0x0801756d
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8017558:	7dfb      	ldrb	r3, [r7, #23]
 801755a:	f023 0301 	bic.w	r3, r3, #1
 801755e:	75fb      	strb	r3, [r7, #23]
                break;
 8017560:	e00f      	b.n	8017582 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8017562:	7dfb      	ldrb	r3, [r7, #23]
 8017564:	f023 0302 	bic.w	r3, r3, #2
 8017568:	75fb      	strb	r3, [r7, #23]
                break;
 801756a:	e00a      	b.n	8017582 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801756c:	7dfb      	ldrb	r3, [r7, #23]
 801756e:	f023 0303 	bic.w	r3, r3, #3
 8017572:	75fb      	strb	r3, [r7, #23]
                break;
 8017574:	e005      	b.n	8017582 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8017576:	7dfb      	ldrb	r3, [r7, #23]
 8017578:	f023 0303 	bic.w	r3, r3, #3
 801757c:	75fb      	strb	r3, [r7, #23]
                break;
 801757e:	e000      	b.n	8017582 <RegionEU868NewChannelReq+0xae>
                break;
 8017580:	bf00      	nop
            }
        }
    }

    return status;
 8017582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017586:	4618      	mov	r0, r3
 8017588:	3718      	adds	r7, #24
 801758a:	46bd      	mov	sp, r7
 801758c:	bd80      	pop	{r7, pc}
 801758e:	bf00      	nop

08017590 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017590:	b480      	push	{r7}
 8017592:	b083      	sub	sp, #12
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017598:	f04f 33ff 	mov.w	r3, #4294967295
}
 801759c:	4618      	mov	r0, r3
 801759e:	370c      	adds	r7, #12
 80175a0:	46bd      	mov	sp, r7
 80175a2:	bc80      	pop	{r7}
 80175a4:	4770      	bx	lr
	...

080175a8 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b084      	sub	sp, #16
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80175b0:	2303      	movs	r3, #3
 80175b2:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 80175b4:	2300      	movs	r3, #0
 80175b6:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	781b      	ldrb	r3, [r3, #0]
 80175bc:	2b0f      	cmp	r3, #15
 80175be:	d901      	bls.n	80175c4 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 80175c0:	2300      	movs	r3, #0
 80175c2:	e035      	b.n	8017630 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	685b      	ldr	r3, [r3, #4]
 80175c8:	f107 020e 	add.w	r2, r7, #14
 80175cc:	4611      	mov	r1, r2
 80175ce:	4618      	mov	r0, r3
 80175d0:	f7ff f836 	bl	8016640 <VerifyRfFreq>
 80175d4:	4603      	mov	r3, r0
 80175d6:	f083 0301 	eor.w	r3, r3, #1
 80175da:	b2db      	uxtb	r3, r3
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d003      	beq.n	80175e8 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80175e0:	7bfb      	ldrb	r3, [r7, #15]
 80175e2:	f023 0301 	bic.w	r3, r3, #1
 80175e6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80175e8:	4b13      	ldr	r3, [pc, #76]	@ (8017638 <RegionEU868DlChannelReq+0x90>)
 80175ea:	681a      	ldr	r2, [r3, #0]
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	781b      	ldrb	r3, [r3, #0]
 80175f0:	4619      	mov	r1, r3
 80175f2:	460b      	mov	r3, r1
 80175f4:	005b      	lsls	r3, r3, #1
 80175f6:	440b      	add	r3, r1
 80175f8:	009b      	lsls	r3, r3, #2
 80175fa:	4413      	add	r3, r2
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d103      	bne.n	801760a <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8017602:	7bfb      	ldrb	r3, [r7, #15]
 8017604:	f023 0302 	bic.w	r3, r3, #2
 8017608:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801760a:	7bfb      	ldrb	r3, [r7, #15]
 801760c:	2b03      	cmp	r3, #3
 801760e:	d10d      	bne.n	801762c <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8017610:	4b09      	ldr	r3, [pc, #36]	@ (8017638 <RegionEU868DlChannelReq+0x90>)
 8017612:	6819      	ldr	r1, [r3, #0]
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	781b      	ldrb	r3, [r3, #0]
 8017618:	4618      	mov	r0, r3
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	685a      	ldr	r2, [r3, #4]
 801761e:	4603      	mov	r3, r0
 8017620:	005b      	lsls	r3, r3, #1
 8017622:	4403      	add	r3, r0
 8017624:	009b      	lsls	r3, r3, #2
 8017626:	440b      	add	r3, r1
 8017628:	3304      	adds	r3, #4
 801762a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 801762c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017630:	4618      	mov	r0, r3
 8017632:	3710      	adds	r7, #16
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}
 8017638:	20001b5c 	.word	0x20001b5c

0801763c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801763c:	b480      	push	{r7}
 801763e:	b083      	sub	sp, #12
 8017640:	af00      	add	r7, sp, #0
 8017642:	4603      	mov	r3, r0
 8017644:	460a      	mov	r2, r1
 8017646:	71fb      	strb	r3, [r7, #7]
 8017648:	4613      	mov	r3, r2
 801764a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 801764c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8017650:	4618      	mov	r0, r3
 8017652:	370c      	adds	r7, #12
 8017654:	46bd      	mov	sp, r7
 8017656:	bc80      	pop	{r7}
 8017658:	4770      	bx	lr
	...

0801765c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b09a      	sub	sp, #104	@ 0x68
 8017660:	af02      	add	r7, sp, #8
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	60b9      	str	r1, [r7, #8]
 8017666:	607a      	str	r2, [r7, #4]
 8017668:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801766a:	2300      	movs	r3, #0
 801766c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8017670:	2300      	movs	r3, #0
 8017672:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8017676:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801767a:	2200      	movs	r2, #0
 801767c:	601a      	str	r2, [r3, #0]
 801767e:	605a      	str	r2, [r3, #4]
 8017680:	609a      	str	r2, [r3, #8]
 8017682:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017684:	230c      	movs	r3, #12
 8017686:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801768a:	2307      	movs	r3, #7
 801768c:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801768e:	4b48      	ldr	r3, [pc, #288]	@ (80177b0 <RegionEU868NextChannel+0x154>)
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017696:	2201      	movs	r2, #1
 8017698:	2100      	movs	r1, #0
 801769a:	4618      	mov	r0, r3
 801769c:	f7fe fac0 	bl	8015c20 <RegionCommonCountChannels>
 80176a0:	4603      	mov	r3, r0
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d10a      	bne.n	80176bc <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80176a6:	4b42      	ldr	r3, [pc, #264]	@ (80177b0 <RegionEU868NextChannel+0x154>)
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80176ae:	4b40      	ldr	r3, [pc, #256]	@ (80177b0 <RegionEU868NextChannel+0x154>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	f042 0207 	orr.w	r2, r2, #7
 80176b6:	b292      	uxth	r2, r2
 80176b8:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	7a5b      	ldrb	r3, [r3, #9]
 80176c0:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80176c8:	b2db      	uxtb	r3, r3
 80176ca:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80176cc:	4b38      	ldr	r3, [pc, #224]	@ (80177b0 <RegionEU868NextChannel+0x154>)
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80176d4:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80176d6:	4b36      	ldr	r3, [pc, #216]	@ (80177b0 <RegionEU868NextChannel+0x154>)
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
 80176dc:	4b35      	ldr	r3, [pc, #212]	@ (80177b4 <RegionEU868NextChannel+0x158>)
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80176e2:	2310      	movs	r3, #16
 80176e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80176e6:	f107 0312 	add.w	r3, r7, #18
 80176ea:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	685b      	ldr	r3, [r3, #4]
 80176f6:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	7a9b      	ldrb	r3, [r3, #10]
 80176fc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8017700:	2306      	movs	r3, #6
 8017702:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017706:	68fa      	ldr	r2, [r7, #12]
 8017708:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801770c:	320c      	adds	r2, #12
 801770e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017712:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	7d1b      	ldrb	r3, [r3, #20]
 801771a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	8adb      	ldrh	r3, [r3, #22]
 8017728:	4619      	mov	r1, r3
 801772a:	4610      	mov	r0, r2
 801772c:	f7fe fffe 	bl	801672c <GetTimeOnAir>
 8017730:	4603      	mov	r3, r0
 8017732:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8017734:	f107 0314 	add.w	r3, r7, #20
 8017738:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801773a:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 801773e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8017742:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	9301      	str	r3, [sp, #4]
 801774a:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 801774e:	9300      	str	r3, [sp, #0]
 8017750:	460b      	mov	r3, r1
 8017752:	6839      	ldr	r1, [r7, #0]
 8017754:	f7fe fe57 	bl	8016406 <RegionCommonIdentifyChannels>
 8017758:	4603      	mov	r3, r0
 801775a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801775e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8017762:	2b00      	cmp	r3, #0
 8017764:	d10e      	bne.n	8017784 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017766:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 801776a:	3b01      	subs	r3, #1
 801776c:	4619      	mov	r1, r3
 801776e:	2000      	movs	r0, #0
 8017770:	f000 f938 	bl	80179e4 <randr>
 8017774:	4603      	mov	r3, r0
 8017776:	3360      	adds	r3, #96	@ 0x60
 8017778:	443b      	add	r3, r7
 801777a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801777e:	68bb      	ldr	r3, [r7, #8]
 8017780:	701a      	strb	r2, [r3, #0]
 8017782:	e00e      	b.n	80177a2 <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8017784:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8017788:	2b0c      	cmp	r3, #12
 801778a:	d10a      	bne.n	80177a2 <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801778c:	4b08      	ldr	r3, [pc, #32]	@ (80177b0 <RegionEU868NextChannel+0x154>)
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8017794:	4b06      	ldr	r3, [pc, #24]	@ (80177b0 <RegionEU868NextChannel+0x154>)
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	f042 0207 	orr.w	r2, r2, #7
 801779c:	b292      	uxth	r2, r2
 801779e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 80177a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80177a6:	4618      	mov	r0, r3
 80177a8:	3760      	adds	r7, #96	@ 0x60
 80177aa:	46bd      	mov	sp, r7
 80177ac:	bd80      	pop	{r7, pc}
 80177ae:	bf00      	nop
 80177b0:	20001b5c 	.word	0x20001b5c
 80177b4:	20001b60 	.word	0x20001b60

080177b8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b084      	sub	sp, #16
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80177c0:	2300      	movs	r3, #0
 80177c2:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80177c4:	2300      	movs	r3, #0
 80177c6:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80177c8:	2300      	movs	r3, #0
 80177ca:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	791b      	ldrb	r3, [r3, #4]
 80177d0:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80177d2:	7b7b      	ldrb	r3, [r7, #13]
 80177d4:	2b02      	cmp	r3, #2
 80177d6:	d801      	bhi.n	80177dc <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80177d8:	2306      	movs	r3, #6
 80177da:	e089      	b.n	80178f0 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80177dc:	7b7b      	ldrb	r3, [r7, #13]
 80177de:	2b0f      	cmp	r3, #15
 80177e0:	d901      	bls.n	80177e6 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80177e2:	2303      	movs	r3, #3
 80177e4:	e084      	b.n	80178f0 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	7a1b      	ldrb	r3, [r3, #8]
 80177ec:	f343 0303 	sbfx	r3, r3, #0, #4
 80177f0:	b25b      	sxtb	r3, r3
 80177f2:	2207      	movs	r2, #7
 80177f4:	2100      	movs	r1, #0
 80177f6:	4618      	mov	r0, r3
 80177f8:	f7fe f9c1 	bl	8015b7e <RegionCommonValueInRange>
 80177fc:	4603      	mov	r3, r0
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d101      	bne.n	8017806 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8017802:	2301      	movs	r3, #1
 8017804:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	7a1b      	ldrb	r3, [r3, #8]
 801780c:	f343 1303 	sbfx	r3, r3, #4, #4
 8017810:	b25b      	sxtb	r3, r3
 8017812:	2207      	movs	r2, #7
 8017814:	2100      	movs	r1, #0
 8017816:	4618      	mov	r0, r3
 8017818:	f7fe f9b1 	bl	8015b7e <RegionCommonValueInRange>
 801781c:	4603      	mov	r3, r0
 801781e:	2b00      	cmp	r3, #0
 8017820:	d101      	bne.n	8017826 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8017822:	2301      	movs	r3, #1
 8017824:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	7a1b      	ldrb	r3, [r3, #8]
 801782c:	f343 0303 	sbfx	r3, r3, #0, #4
 8017830:	b25a      	sxtb	r2, r3
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	7a1b      	ldrb	r3, [r3, #8]
 8017838:	f343 1303 	sbfx	r3, r3, #4, #4
 801783c:	b25b      	sxtb	r3, r3
 801783e:	429a      	cmp	r2, r3
 8017840:	dd01      	ble.n	8017846 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8017842:	2301      	movs	r3, #1
 8017844:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8017846:	7bbb      	ldrb	r3, [r7, #14]
 8017848:	f083 0301 	eor.w	r3, r3, #1
 801784c:	b2db      	uxtb	r3, r3
 801784e:	2b00      	cmp	r3, #0
 8017850:	d010      	beq.n	8017874 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	f107 020c 	add.w	r2, r7, #12
 801785c:	4611      	mov	r1, r2
 801785e:	4618      	mov	r0, r3
 8017860:	f7fe feee 	bl	8016640 <VerifyRfFreq>
 8017864:	4603      	mov	r3, r0
 8017866:	f083 0301 	eor.w	r3, r3, #1
 801786a:	b2db      	uxtb	r3, r3
 801786c:	2b00      	cmp	r3, #0
 801786e:	d001      	beq.n	8017874 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8017870:	2301      	movs	r3, #1
 8017872:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8017874:	7bfb      	ldrb	r3, [r7, #15]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d004      	beq.n	8017884 <RegionEU868ChannelAdd+0xcc>
 801787a:	7bbb      	ldrb	r3, [r7, #14]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d001      	beq.n	8017884 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017880:	2306      	movs	r3, #6
 8017882:	e035      	b.n	80178f0 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8017884:	7bfb      	ldrb	r3, [r7, #15]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d001      	beq.n	801788e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801788a:	2305      	movs	r3, #5
 801788c:	e030      	b.n	80178f0 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801788e:	7bbb      	ldrb	r3, [r7, #14]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d001      	beq.n	8017898 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017894:	2304      	movs	r3, #4
 8017896:	e02b      	b.n	80178f0 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8017898:	4b17      	ldr	r3, [pc, #92]	@ (80178f8 <RegionEU868ChannelAdd+0x140>)
 801789a:	6819      	ldr	r1, [r3, #0]
 801789c:	7b7a      	ldrb	r2, [r7, #13]
 801789e:	4613      	mov	r3, r2
 80178a0:	005b      	lsls	r3, r3, #1
 80178a2:	4413      	add	r3, r2
 80178a4:	009b      	lsls	r3, r3, #2
 80178a6:	18c8      	adds	r0, r1, r3
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	220c      	movs	r2, #12
 80178ae:	4619      	mov	r1, r3
 80178b0:	f000 f8af 	bl	8017a12 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80178b4:	4b10      	ldr	r3, [pc, #64]	@ (80178f8 <RegionEU868ChannelAdd+0x140>)
 80178b6:	6819      	ldr	r1, [r3, #0]
 80178b8:	7b7a      	ldrb	r2, [r7, #13]
 80178ba:	7b38      	ldrb	r0, [r7, #12]
 80178bc:	4613      	mov	r3, r2
 80178be:	005b      	lsls	r3, r3, #1
 80178c0:	4413      	add	r3, r2
 80178c2:	009b      	lsls	r3, r3, #2
 80178c4:	440b      	add	r3, r1
 80178c6:	3309      	adds	r3, #9
 80178c8:	4602      	mov	r2, r0
 80178ca:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80178cc:	4b0a      	ldr	r3, [pc, #40]	@ (80178f8 <RegionEU868ChannelAdd+0x140>)
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80178d4:	b21a      	sxth	r2, r3
 80178d6:	7b7b      	ldrb	r3, [r7, #13]
 80178d8:	2101      	movs	r1, #1
 80178da:	fa01 f303 	lsl.w	r3, r1, r3
 80178de:	b21b      	sxth	r3, r3
 80178e0:	4313      	orrs	r3, r2
 80178e2:	b21a      	sxth	r2, r3
 80178e4:	4b04      	ldr	r3, [pc, #16]	@ (80178f8 <RegionEU868ChannelAdd+0x140>)
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	b292      	uxth	r2, r2
 80178ea:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 80178ee:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80178f0:	4618      	mov	r0, r3
 80178f2:	3710      	adds	r7, #16
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}
 80178f8:	20001b5c 	.word	0x20001b5c

080178fc <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b086      	sub	sp, #24
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	781b      	ldrb	r3, [r3, #0]
 8017908:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801790a:	7dfb      	ldrb	r3, [r7, #23]
 801790c:	2b02      	cmp	r3, #2
 801790e:	d801      	bhi.n	8017914 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8017910:	2300      	movs	r3, #0
 8017912:	e016      	b.n	8017942 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8017914:	4b0d      	ldr	r3, [pc, #52]	@ (801794c <RegionEU868ChannelsRemove+0x50>)
 8017916:	6819      	ldr	r1, [r3, #0]
 8017918:	7dfa      	ldrb	r2, [r7, #23]
 801791a:	4613      	mov	r3, r2
 801791c:	005b      	lsls	r3, r3, #1
 801791e:	4413      	add	r3, r2
 8017920:	009b      	lsls	r3, r3, #2
 8017922:	440b      	add	r3, r1
 8017924:	461a      	mov	r2, r3
 8017926:	2300      	movs	r3, #0
 8017928:	6013      	str	r3, [r2, #0]
 801792a:	6053      	str	r3, [r2, #4]
 801792c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801792e:	4b07      	ldr	r3, [pc, #28]	@ (801794c <RegionEU868ChannelsRemove+0x50>)
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017936:	7df9      	ldrb	r1, [r7, #23]
 8017938:	2210      	movs	r2, #16
 801793a:	4618      	mov	r0, r3
 801793c:	f7fe f93c 	bl	8015bb8 <RegionCommonChanDisable>
 8017940:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8017942:	4618      	mov	r0, r3
 8017944:	3718      	adds	r7, #24
 8017946:	46bd      	mov	sp, r7
 8017948:	bd80      	pop	{r7, pc}
 801794a:	bf00      	nop
 801794c:	20001b5c 	.word	0x20001b5c

08017950 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017950:	b480      	push	{r7}
 8017952:	b085      	sub	sp, #20
 8017954:	af00      	add	r7, sp, #0
 8017956:	4603      	mov	r3, r0
 8017958:	71fb      	strb	r3, [r7, #7]
 801795a:	460b      	mov	r3, r1
 801795c:	71bb      	strb	r3, [r7, #6]
 801795e:	4613      	mov	r3, r2
 8017960:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8017962:	79ba      	ldrb	r2, [r7, #6]
 8017964:	797b      	ldrb	r3, [r7, #5]
 8017966:	1ad3      	subs	r3, r2, r3
 8017968:	b2db      	uxtb	r3, r3
 801796a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801796c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017970:	2b00      	cmp	r3, #0
 8017972:	da01      	bge.n	8017978 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8017974:	2300      	movs	r3, #0
 8017976:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8017978:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801797a:	4618      	mov	r0, r3
 801797c:	3714      	adds	r7, #20
 801797e:	46bd      	mov	sp, r7
 8017980:	bc80      	pop	{r7}
 8017982:	4770      	bx	lr

08017984 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8017984:	b480      	push	{r7}
 8017986:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8017988:	4b0d      	ldr	r3, [pc, #52]	@ (80179c0 <rand1+0x3c>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	4a0d      	ldr	r2, [pc, #52]	@ (80179c4 <rand1+0x40>)
 801798e:	fb02 f303 	mul.w	r3, r2, r3
 8017992:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017996:	3339      	adds	r3, #57	@ 0x39
 8017998:	4a09      	ldr	r2, [pc, #36]	@ (80179c0 <rand1+0x3c>)
 801799a:	6013      	str	r3, [r2, #0]
 801799c:	4b08      	ldr	r3, [pc, #32]	@ (80179c0 <rand1+0x3c>)
 801799e:	681a      	ldr	r2, [r3, #0]
 80179a0:	2303      	movs	r3, #3
 80179a2:	fba3 1302 	umull	r1, r3, r3, r2
 80179a6:	1ad1      	subs	r1, r2, r3
 80179a8:	0849      	lsrs	r1, r1, #1
 80179aa:	440b      	add	r3, r1
 80179ac:	0f99      	lsrs	r1, r3, #30
 80179ae:	460b      	mov	r3, r1
 80179b0:	07db      	lsls	r3, r3, #31
 80179b2:	1a5b      	subs	r3, r3, r1
 80179b4:	1ad1      	subs	r1, r2, r3
 80179b6:	460b      	mov	r3, r1
}
 80179b8:	4618      	mov	r0, r3
 80179ba:	46bd      	mov	sp, r7
 80179bc:	bc80      	pop	{r7}
 80179be:	4770      	bx	lr
 80179c0:	20000130 	.word	0x20000130
 80179c4:	41c64e6d 	.word	0x41c64e6d

080179c8 <srand1>:

void srand1( uint32_t seed )
{
 80179c8:	b480      	push	{r7}
 80179ca:	b083      	sub	sp, #12
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
    next = seed;
 80179d0:	4a03      	ldr	r2, [pc, #12]	@ (80179e0 <srand1+0x18>)
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	6013      	str	r3, [r2, #0]
}
 80179d6:	bf00      	nop
 80179d8:	370c      	adds	r7, #12
 80179da:	46bd      	mov	sp, r7
 80179dc:	bc80      	pop	{r7}
 80179de:	4770      	bx	lr
 80179e0:	20000130 	.word	0x20000130

080179e4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b082      	sub	sp, #8
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
 80179ec:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80179ee:	f7ff ffc9 	bl	8017984 <rand1>
 80179f2:	4602      	mov	r2, r0
 80179f4:	6839      	ldr	r1, [r7, #0]
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	1acb      	subs	r3, r1, r3
 80179fa:	3301      	adds	r3, #1
 80179fc:	fb92 f1f3 	sdiv	r1, r2, r3
 8017a00:	fb01 f303 	mul.w	r3, r1, r3
 8017a04:	1ad2      	subs	r2, r2, r3
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	4413      	add	r3, r2
}
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	3708      	adds	r7, #8
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bd80      	pop	{r7, pc}

08017a12 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017a12:	b480      	push	{r7}
 8017a14:	b085      	sub	sp, #20
 8017a16:	af00      	add	r7, sp, #0
 8017a18:	60f8      	str	r0, [r7, #12]
 8017a1a:	60b9      	str	r1, [r7, #8]
 8017a1c:	4613      	mov	r3, r2
 8017a1e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8017a20:	e007      	b.n	8017a32 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8017a22:	68ba      	ldr	r2, [r7, #8]
 8017a24:	1c53      	adds	r3, r2, #1
 8017a26:	60bb      	str	r3, [r7, #8]
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	1c59      	adds	r1, r3, #1
 8017a2c:	60f9      	str	r1, [r7, #12]
 8017a2e:	7812      	ldrb	r2, [r2, #0]
 8017a30:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017a32:	88fb      	ldrh	r3, [r7, #6]
 8017a34:	1e5a      	subs	r2, r3, #1
 8017a36:	80fa      	strh	r2, [r7, #6]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d1f2      	bne.n	8017a22 <memcpy1+0x10>
    }
}
 8017a3c:	bf00      	nop
 8017a3e:	bf00      	nop
 8017a40:	3714      	adds	r7, #20
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bc80      	pop	{r7}
 8017a46:	4770      	bx	lr

08017a48 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017a48:	b480      	push	{r7}
 8017a4a:	b085      	sub	sp, #20
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	60f8      	str	r0, [r7, #12]
 8017a50:	60b9      	str	r1, [r7, #8]
 8017a52:	4613      	mov	r3, r2
 8017a54:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8017a56:	88fb      	ldrh	r3, [r7, #6]
 8017a58:	3b01      	subs	r3, #1
 8017a5a:	68fa      	ldr	r2, [r7, #12]
 8017a5c:	4413      	add	r3, r2
 8017a5e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8017a60:	e007      	b.n	8017a72 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8017a62:	68ba      	ldr	r2, [r7, #8]
 8017a64:	1c53      	adds	r3, r2, #1
 8017a66:	60bb      	str	r3, [r7, #8]
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	1e59      	subs	r1, r3, #1
 8017a6c:	60f9      	str	r1, [r7, #12]
 8017a6e:	7812      	ldrb	r2, [r2, #0]
 8017a70:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017a72:	88fb      	ldrh	r3, [r7, #6]
 8017a74:	1e5a      	subs	r2, r3, #1
 8017a76:	80fa      	strh	r2, [r7, #6]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d1f2      	bne.n	8017a62 <memcpyr+0x1a>
    }
}
 8017a7c:	bf00      	nop
 8017a7e:	bf00      	nop
 8017a80:	3714      	adds	r7, #20
 8017a82:	46bd      	mov	sp, r7
 8017a84:	bc80      	pop	{r7}
 8017a86:	4770      	bx	lr

08017a88 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8017a88:	b480      	push	{r7}
 8017a8a:	b083      	sub	sp, #12
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	6078      	str	r0, [r7, #4]
 8017a90:	460b      	mov	r3, r1
 8017a92:	70fb      	strb	r3, [r7, #3]
 8017a94:	4613      	mov	r3, r2
 8017a96:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8017a98:	e004      	b.n	8017aa4 <memset1+0x1c>
    {
        *dst++ = value;
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	1c5a      	adds	r2, r3, #1
 8017a9e:	607a      	str	r2, [r7, #4]
 8017aa0:	78fa      	ldrb	r2, [r7, #3]
 8017aa2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017aa4:	883b      	ldrh	r3, [r7, #0]
 8017aa6:	1e5a      	subs	r2, r3, #1
 8017aa8:	803a      	strh	r2, [r7, #0]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d1f5      	bne.n	8017a9a <memset1+0x12>
    }
}
 8017aae:	bf00      	nop
 8017ab0:	bf00      	nop
 8017ab2:	370c      	adds	r7, #12
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bc80      	pop	{r7}
 8017ab8:	4770      	bx	lr
	...

08017abc <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8017abc:	b480      	push	{r7}
 8017abe:	b085      	sub	sp, #20
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
 8017ac4:	460b      	mov	r3, r1
 8017ac6:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8017ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8017acc:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d101      	bne.n	8017ad8 <Crc32+0x1c>
    {
        return 0;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	e026      	b.n	8017b26 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8017ad8:	2300      	movs	r3, #0
 8017ada:	817b      	strh	r3, [r7, #10]
 8017adc:	e01d      	b.n	8017b1a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8017ade:	897b      	ldrh	r3, [r7, #10]
 8017ae0:	687a      	ldr	r2, [r7, #4]
 8017ae2:	4413      	add	r3, r2
 8017ae4:	781b      	ldrb	r3, [r3, #0]
 8017ae6:	461a      	mov	r2, r3
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	4053      	eors	r3, r2
 8017aec:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017aee:	2300      	movs	r3, #0
 8017af0:	813b      	strh	r3, [r7, #8]
 8017af2:	e00c      	b.n	8017b0e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	085a      	lsrs	r2, r3, #1
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	f003 0301 	and.w	r3, r3, #1
 8017afe:	425b      	negs	r3, r3
 8017b00:	490b      	ldr	r1, [pc, #44]	@ (8017b30 <Crc32+0x74>)
 8017b02:	400b      	ands	r3, r1
 8017b04:	4053      	eors	r3, r2
 8017b06:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017b08:	893b      	ldrh	r3, [r7, #8]
 8017b0a:	3301      	adds	r3, #1
 8017b0c:	813b      	strh	r3, [r7, #8]
 8017b0e:	893b      	ldrh	r3, [r7, #8]
 8017b10:	2b07      	cmp	r3, #7
 8017b12:	d9ef      	bls.n	8017af4 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017b14:	897b      	ldrh	r3, [r7, #10]
 8017b16:	3301      	adds	r3, #1
 8017b18:	817b      	strh	r3, [r7, #10]
 8017b1a:	897a      	ldrh	r2, [r7, #10]
 8017b1c:	887b      	ldrh	r3, [r7, #2]
 8017b1e:	429a      	cmp	r2, r3
 8017b20:	d3dd      	bcc.n	8017ade <Crc32+0x22>
        }
    }

    return ~crc;
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	43db      	mvns	r3, r3
}
 8017b26:	4618      	mov	r0, r3
 8017b28:	3714      	adds	r7, #20
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bc80      	pop	{r7}
 8017b2e:	4770      	bx	lr
 8017b30:	edb88320 	.word	0xedb88320

08017b34 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b084      	sub	sp, #16
 8017b38:	af02      	add	r7, sp, #8
 8017b3a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8017b3c:	4a24      	ldr	r2, [pc, #144]	@ (8017bd0 <RadioInit+0x9c>)
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8017b42:	4b24      	ldr	r3, [pc, #144]	@ (8017bd4 <RadioInit+0xa0>)
 8017b44:	2200      	movs	r2, #0
 8017b46:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8017b48:	4b22      	ldr	r3, [pc, #136]	@ (8017bd4 <RadioInit+0xa0>)
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8017b4e:	4b21      	ldr	r3, [pc, #132]	@ (8017bd4 <RadioInit+0xa0>)
 8017b50:	2200      	movs	r2, #0
 8017b52:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017b54:	4b1f      	ldr	r3, [pc, #124]	@ (8017bd4 <RadioInit+0xa0>)
 8017b56:	2200      	movs	r2, #0
 8017b58:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8017b5a:	481f      	ldr	r0, [pc, #124]	@ (8017bd8 <RadioInit+0xa4>)
 8017b5c:	f001 ffc6 	bl	8019aec <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8017b60:	4b1c      	ldr	r3, [pc, #112]	@ (8017bd4 <RadioInit+0xa0>)
 8017b62:	2200      	movs	r2, #0
 8017b64:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8017b66:	4b1b      	ldr	r3, [pc, #108]	@ (8017bd4 <RadioInit+0xa0>)
 8017b68:	2200      	movs	r2, #0
 8017b6a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8017b6c:	f002 fa5c 	bl	801a028 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8017b70:	2100      	movs	r1, #0
 8017b72:	2000      	movs	r0, #0
 8017b74:	f002 fe28 	bl	801a7c8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8017b78:	2204      	movs	r2, #4
 8017b7a:	2100      	movs	r1, #0
 8017b7c:	2001      	movs	r0, #1
 8017b7e:	f002 fbeb 	bl	801a358 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017b82:	2300      	movs	r3, #0
 8017b84:	2200      	movs	r2, #0
 8017b86:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017b8a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017b8e:	f002 fb1b 	bl	801a1c8 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8017b92:	f000 fe99 	bl	80188c8 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8017b96:	2300      	movs	r3, #0
 8017b98:	9300      	str	r3, [sp, #0]
 8017b9a:	4b10      	ldr	r3, [pc, #64]	@ (8017bdc <RadioInit+0xa8>)
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	f04f 31ff 	mov.w	r1, #4294967295
 8017ba2:	480f      	ldr	r0, [pc, #60]	@ (8017be0 <RadioInit+0xac>)
 8017ba4:	f003 ffe4 	bl	801bb70 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8017ba8:	2300      	movs	r3, #0
 8017baa:	9300      	str	r3, [sp, #0]
 8017bac:	4b0d      	ldr	r3, [pc, #52]	@ (8017be4 <RadioInit+0xb0>)
 8017bae:	2200      	movs	r2, #0
 8017bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8017bb4:	480c      	ldr	r0, [pc, #48]	@ (8017be8 <RadioInit+0xb4>)
 8017bb6:	f003 ffdb 	bl	801bb70 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8017bba:	4809      	ldr	r0, [pc, #36]	@ (8017be0 <RadioInit+0xac>)
 8017bbc:	f004 f87c 	bl	801bcb8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8017bc0:	4809      	ldr	r0, [pc, #36]	@ (8017be8 <RadioInit+0xb4>)
 8017bc2:	f004 f879 	bl	801bcb8 <UTIL_TIMER_Stop>
}
 8017bc6:	bf00      	nop
 8017bc8:	3708      	adds	r7, #8
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd80      	pop	{r7, pc}
 8017bce:	bf00      	nop
 8017bd0:	20001c64 	.word	0x20001c64
 8017bd4:	20001c68 	.word	0x20001c68
 8017bd8:	08018cbd 	.word	0x08018cbd
 8017bdc:	08018c45 	.word	0x08018c45
 8017be0:	20001cc4 	.word	0x20001cc4
 8017be4:	08018c59 	.word	0x08018c59
 8017be8:	20001cdc 	.word	0x20001cdc

08017bec <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8017bec:	b580      	push	{r7, lr}
 8017bee:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8017bf0:	f001 ffc4 	bl	8019b7c <SUBGRF_GetOperatingMode>
 8017bf4:	4603      	mov	r3, r0
 8017bf6:	2b07      	cmp	r3, #7
 8017bf8:	d00a      	beq.n	8017c10 <RadioGetStatus+0x24>
 8017bfa:	2b07      	cmp	r3, #7
 8017bfc:	dc0a      	bgt.n	8017c14 <RadioGetStatus+0x28>
 8017bfe:	2b04      	cmp	r3, #4
 8017c00:	d002      	beq.n	8017c08 <RadioGetStatus+0x1c>
 8017c02:	2b05      	cmp	r3, #5
 8017c04:	d002      	beq.n	8017c0c <RadioGetStatus+0x20>
 8017c06:	e005      	b.n	8017c14 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8017c08:	2302      	movs	r3, #2
 8017c0a:	e004      	b.n	8017c16 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017c0c:	2301      	movs	r3, #1
 8017c0e:	e002      	b.n	8017c16 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8017c10:	2303      	movs	r3, #3
 8017c12:	e000      	b.n	8017c16 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017c14:	2300      	movs	r3, #0
    }
}
 8017c16:	4618      	mov	r0, r3
 8017c18:	bd80      	pop	{r7, pc}
	...

08017c1c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b082      	sub	sp, #8
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	4603      	mov	r3, r0
 8017c24:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8017c26:	4a2a      	ldr	r2, [pc, #168]	@ (8017cd0 <RadioSetModem+0xb4>)
 8017c28:	79fb      	ldrb	r3, [r7, #7]
 8017c2a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8017c2c:	79fb      	ldrb	r3, [r7, #7]
 8017c2e:	4618      	mov	r0, r3
 8017c30:	f003 f9b7 	bl	801afa2 <RFW_SetRadioModem>
    switch( modem )
 8017c34:	79fb      	ldrb	r3, [r7, #7]
 8017c36:	2b05      	cmp	r3, #5
 8017c38:	d80e      	bhi.n	8017c58 <RadioSetModem+0x3c>
 8017c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8017c40 <RadioSetModem+0x24>)
 8017c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c40:	08017c67 	.word	0x08017c67
 8017c44:	08017c75 	.word	0x08017c75
 8017c48:	08017c59 	.word	0x08017c59
 8017c4c:	08017c9b 	.word	0x08017c9b
 8017c50:	08017ca9 	.word	0x08017ca9
 8017c54:	08017cb7 	.word	0x08017cb7
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8017c58:	2003      	movs	r0, #3
 8017c5a:	f002 fb57 	bl	801a30c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8017cd0 <RadioSetModem+0xb4>)
 8017c60:	2200      	movs	r2, #0
 8017c62:	735a      	strb	r2, [r3, #13]
        break;
 8017c64:	e02f      	b.n	8017cc6 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017c66:	2000      	movs	r0, #0
 8017c68:	f002 fb50 	bl	801a30c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017c6c:	4b18      	ldr	r3, [pc, #96]	@ (8017cd0 <RadioSetModem+0xb4>)
 8017c6e:	2200      	movs	r2, #0
 8017c70:	735a      	strb	r2, [r3, #13]
        break;
 8017c72:	e028      	b.n	8017cc6 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8017c74:	2001      	movs	r0, #1
 8017c76:	f002 fb49 	bl	801a30c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8017c7a:	4b15      	ldr	r3, [pc, #84]	@ (8017cd0 <RadioSetModem+0xb4>)
 8017c7c:	7b5a      	ldrb	r2, [r3, #13]
 8017c7e:	4b14      	ldr	r3, [pc, #80]	@ (8017cd0 <RadioSetModem+0xb4>)
 8017c80:	7b1b      	ldrb	r3, [r3, #12]
 8017c82:	429a      	cmp	r2, r3
 8017c84:	d01e      	beq.n	8017cc4 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8017c86:	4b12      	ldr	r3, [pc, #72]	@ (8017cd0 <RadioSetModem+0xb4>)
 8017c88:	7b1a      	ldrb	r2, [r3, #12]
 8017c8a:	4b11      	ldr	r3, [pc, #68]	@ (8017cd0 <RadioSetModem+0xb4>)
 8017c8c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8017c8e:	4b10      	ldr	r3, [pc, #64]	@ (8017cd0 <RadioSetModem+0xb4>)
 8017c90:	7b5b      	ldrb	r3, [r3, #13]
 8017c92:	4618      	mov	r0, r3
 8017c94:	f000 ffa0 	bl	8018bd8 <RadioSetPublicNetwork>
        }
        break;
 8017c98:	e014      	b.n	8017cc4 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017c9a:	2002      	movs	r0, #2
 8017c9c:	f002 fb36 	bl	801a30c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8017cd0 <RadioSetModem+0xb4>)
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	735a      	strb	r2, [r3, #13]
        break;
 8017ca6:	e00e      	b.n	8017cc6 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017ca8:	2002      	movs	r0, #2
 8017caa:	f002 fb2f 	bl	801a30c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017cae:	4b08      	ldr	r3, [pc, #32]	@ (8017cd0 <RadioSetModem+0xb4>)
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	735a      	strb	r2, [r3, #13]
        break;
 8017cb4:	e007      	b.n	8017cc6 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017cb6:	2000      	movs	r0, #0
 8017cb8:	f002 fb28 	bl	801a30c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017cbc:	4b04      	ldr	r3, [pc, #16]	@ (8017cd0 <RadioSetModem+0xb4>)
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	735a      	strb	r2, [r3, #13]
        break;
 8017cc2:	e000      	b.n	8017cc6 <RadioSetModem+0xaa>
        break;
 8017cc4:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8017cc6:	bf00      	nop
 8017cc8:	3708      	adds	r7, #8
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	bd80      	pop	{r7, pc}
 8017cce:	bf00      	nop
 8017cd0:	20001c68 	.word	0x20001c68

08017cd4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b082      	sub	sp, #8
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8017cdc:	6878      	ldr	r0, [r7, #4]
 8017cde:	f002 facf 	bl	801a280 <SUBGRF_SetRfFrequency>
}
 8017ce2:	bf00      	nop
 8017ce4:	3708      	adds	r7, #8
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	bd80      	pop	{r7, pc}

08017cea <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8017cea:	b580      	push	{r7, lr}
 8017cec:	b090      	sub	sp, #64	@ 0x40
 8017cee:	af0a      	add	r7, sp, #40	@ 0x28
 8017cf0:	60f8      	str	r0, [r7, #12]
 8017cf2:	60b9      	str	r1, [r7, #8]
 8017cf4:	603b      	str	r3, [r7, #0]
 8017cf6:	4613      	mov	r3, r2
 8017cf8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8017cfa:	2301      	movs	r3, #1
 8017cfc:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8017cfe:	2300      	movs	r3, #0
 8017d00:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8017d02:	2300      	movs	r3, #0
 8017d04:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8017d06:	f000 fdf2 	bl	80188ee <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8017d0a:	2000      	movs	r0, #0
 8017d0c:	f7ff ff86 	bl	8017c1c <RadioSetModem>

    RadioSetChannel( freq );
 8017d10:	68f8      	ldr	r0, [r7, #12]
 8017d12:	f7ff ffdf 	bl	8017cd4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017d16:	2301      	movs	r3, #1
 8017d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	9308      	str	r3, [sp, #32]
 8017d1e:	2300      	movs	r3, #0
 8017d20:	9307      	str	r3, [sp, #28]
 8017d22:	2300      	movs	r3, #0
 8017d24:	9306      	str	r3, [sp, #24]
 8017d26:	2300      	movs	r3, #0
 8017d28:	9305      	str	r3, [sp, #20]
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	9304      	str	r3, [sp, #16]
 8017d2e:	2300      	movs	r3, #0
 8017d30:	9303      	str	r3, [sp, #12]
 8017d32:	2300      	movs	r3, #0
 8017d34:	9302      	str	r3, [sp, #8]
 8017d36:	2303      	movs	r3, #3
 8017d38:	9301      	str	r3, [sp, #4]
 8017d3a:	68bb      	ldr	r3, [r7, #8]
 8017d3c:	9300      	str	r3, [sp, #0]
 8017d3e:	2300      	movs	r3, #0
 8017d40:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8017d44:	68b9      	ldr	r1, [r7, #8]
 8017d46:	2000      	movs	r0, #0
 8017d48:	f000 f83c 	bl	8017dc4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017d4c:	2000      	movs	r0, #0
 8017d4e:	f000 fdd5 	bl	80188fc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017d52:	f000 ff6f 	bl	8018c34 <RadioGetWakeupTime>
 8017d56:	4603      	mov	r3, r0
 8017d58:	4618      	mov	r0, r3
 8017d5a:	f7ea facb 	bl	80022f4 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8017d5e:	f004 f8c5 	bl	801beec <UTIL_TIMER_GetCurrentTime>
 8017d62:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017d64:	e00d      	b.n	8017d82 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017d66:	2000      	movs	r0, #0
 8017d68:	f000 feb6 	bl	8018ad8 <RadioRssi>
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8017d70:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017d78:	429a      	cmp	r2, r3
 8017d7a:	dd02      	ble.n	8017d82 <RadioIsChannelFree+0x98>
        {
            status = false;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	75fb      	strb	r3, [r7, #23]
            break;
 8017d80:	e006      	b.n	8017d90 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017d82:	6938      	ldr	r0, [r7, #16]
 8017d84:	f004 f8c4 	bl	801bf10 <UTIL_TIMER_GetElapsedTime>
 8017d88:	4602      	mov	r2, r0
 8017d8a:	683b      	ldr	r3, [r7, #0]
 8017d8c:	4293      	cmp	r3, r2
 8017d8e:	d8ea      	bhi.n	8017d66 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8017d90:	f000 fdad 	bl	80188ee <RadioStandby>

    return status;
 8017d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8017d96:	4618      	mov	r0, r3
 8017d98:	3718      	adds	r7, #24
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	bd80      	pop	{r7, pc}

08017d9e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8017d9e:	b580      	push	{r7, lr}
 8017da0:	b082      	sub	sp, #8
 8017da2:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017da4:	2300      	movs	r3, #0
 8017da6:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017da8:	2300      	movs	r3, #0
 8017daa:	2200      	movs	r2, #0
 8017dac:	2100      	movs	r1, #0
 8017dae:	2000      	movs	r0, #0
 8017db0:	f002 fa0a 	bl	801a1c8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8017db4:	f001 ffb3 	bl	8019d1e <SUBGRF_GetRandom>
 8017db8:	6078      	str	r0, [r7, #4]

    return rnd;
 8017dba:	687b      	ldr	r3, [r7, #4]
}
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	3708      	adds	r7, #8
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	bd80      	pop	{r7, pc}

08017dc4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b08a      	sub	sp, #40	@ 0x28
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	60b9      	str	r1, [r7, #8]
 8017dcc:	607a      	str	r2, [r7, #4]
 8017dce:	461a      	mov	r2, r3
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	73fb      	strb	r3, [r7, #15]
 8017dd4:	4613      	mov	r3, r2
 8017dd6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8017dd8:	4ab9      	ldr	r2, [pc, #740]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017dda:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017dde:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8017de0:	f003 f89d 	bl	801af1e <RFW_DeInit>
    if( rxContinuous == true )
 8017de4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d001      	beq.n	8017df0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017dec:	2300      	movs	r3, #0
 8017dee:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8017df0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d004      	beq.n	8017e02 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017df8:	4ab2      	ldr	r2, [pc, #712]	@ (80180c4 <RadioSetRxConfig+0x300>)
 8017dfa:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017dfe:	7013      	strb	r3, [r2, #0]
 8017e00:	e002      	b.n	8017e08 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8017e02:	4bb0      	ldr	r3, [pc, #704]	@ (80180c4 <RadioSetRxConfig+0x300>)
 8017e04:	22ff      	movs	r2, #255	@ 0xff
 8017e06:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017e08:	7bfb      	ldrb	r3, [r7, #15]
 8017e0a:	2b05      	cmp	r3, #5
 8017e0c:	d009      	beq.n	8017e22 <RadioSetRxConfig+0x5e>
 8017e0e:	2b05      	cmp	r3, #5
 8017e10:	f300 81d7 	bgt.w	80181c2 <RadioSetRxConfig+0x3fe>
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	f000 80bf 	beq.w	8017f98 <RadioSetRxConfig+0x1d4>
 8017e1a:	2b01      	cmp	r3, #1
 8017e1c:	f000 8124 	beq.w	8018068 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017e20:	e1cf      	b.n	80181c2 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8017e22:	2001      	movs	r0, #1
 8017e24:	f002 f8c2 	bl	8019fac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017e28:	4ba5      	ldr	r3, [pc, #660]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017e30:	4aa3      	ldr	r2, [pc, #652]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8017e36:	4ba2      	ldr	r3, [pc, #648]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e38:	2209      	movs	r2, #9
 8017e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8017e3e:	4ba0      	ldr	r3, [pc, #640]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e40:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017e44:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017e46:	68b8      	ldr	r0, [r7, #8]
 8017e48:	f002 ff9c 	bl	801ad84 <SUBGRF_GetFskBandwidthRegValue>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	461a      	mov	r2, r3
 8017e50:	4b9b      	ldr	r3, [pc, #620]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017e56:	4b9a      	ldr	r3, [pc, #616]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e58:	2200      	movs	r2, #0
 8017e5a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017e5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017e5e:	00db      	lsls	r3, r3, #3
 8017e60:	b29a      	uxth	r2, r3
 8017e62:	4b97      	ldr	r3, [pc, #604]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e64:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8017e66:	4b96      	ldr	r3, [pc, #600]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e68:	2200      	movs	r2, #0
 8017e6a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8017e6c:	4b94      	ldr	r3, [pc, #592]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e6e:	2210      	movs	r2, #16
 8017e70:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017e72:	4b93      	ldr	r3, [pc, #588]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e74:	2200      	movs	r2, #0
 8017e76:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8017e78:	4b91      	ldr	r3, [pc, #580]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017e7e:	4b91      	ldr	r3, [pc, #580]	@ (80180c4 <RadioSetRxConfig+0x300>)
 8017e80:	781a      	ldrb	r2, [r3, #0]
 8017e82:	4b8f      	ldr	r3, [pc, #572]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e84:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017e86:	4b8e      	ldr	r3, [pc, #568]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e88:	2201      	movs	r2, #1
 8017e8a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8017e8c:	4b8c      	ldr	r3, [pc, #560]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017e8e:	2200      	movs	r2, #0
 8017e90:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8017e92:	2005      	movs	r0, #5
 8017e94:	f7ff fec2 	bl	8017c1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017e98:	488b      	ldr	r0, [pc, #556]	@ (80180c8 <RadioSetRxConfig+0x304>)
 8017e9a:	f002 fb2b 	bl	801a4f4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e9e:	488b      	ldr	r0, [pc, #556]	@ (80180cc <RadioSetRxConfig+0x308>)
 8017ea0:	f002 fbf6 	bl	801a690 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017ea4:	4a8a      	ldr	r2, [pc, #552]	@ (80180d0 <RadioSetRxConfig+0x30c>)
 8017ea6:	f107 031c 	add.w	r3, r7, #28
 8017eaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017eae:	e883 0003 	stmia.w	r3, {r0, r1}
 8017eb2:	f107 031c 	add.w	r3, r7, #28
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f001 feaf 	bl	8019c1a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017ebc:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017ec0:	f001 fefa 	bl	8019cb8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8017ec4:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017ec8:	f000 fe24 	bl	8018b14 <RadioRead>
 8017ecc:	4603      	mov	r3, r0
 8017ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8017ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ed6:	f023 0310 	bic.w	r3, r3, #16
 8017eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8017ede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ee2:	4619      	mov	r1, r3
 8017ee4:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017ee8:	f000 fe02 	bl	8018af0 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8017eec:	2104      	movs	r1, #4
 8017eee:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8017ef2:	f000 fdfd 	bl	8018af0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8017ef6:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017efa:	f000 fe0b 	bl	8018b14 <RadioRead>
 8017efe:	4603      	mov	r3, r0
 8017f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f08:	f023 031c 	bic.w	r3, r3, #28
 8017f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8017f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f14:	f043 0308 	orr.w	r3, r3, #8
 8017f18:	b2db      	uxtb	r3, r3
 8017f1a:	4619      	mov	r1, r3
 8017f1c:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017f20:	f000 fde6 	bl	8018af0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8017f24:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017f28:	f000 fdf4 	bl	8018b14 <RadioRead>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017f32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f36:	f023 0318 	bic.w	r3, r3, #24
 8017f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8017f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f42:	f043 0318 	orr.w	r3, r3, #24
 8017f46:	b2db      	uxtb	r3, r3
 8017f48:	4619      	mov	r1, r3
 8017f4a:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017f4e:	f000 fdcf 	bl	8018af0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8017f52:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017f56:	f000 fddd 	bl	8018b14 <RadioRead>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8017f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017f68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8017f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f70:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8017f74:	b2db      	uxtb	r3, r3
 8017f76:	4619      	mov	r1, r3
 8017f78:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017f7c:	f000 fdb8 	bl	8018af0 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017f80:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017f82:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017f86:	fb02 f303 	mul.w	r3, r2, r3
 8017f8a:	461a      	mov	r2, r3
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017f92:	4a4b      	ldr	r2, [pc, #300]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017f94:	6093      	str	r3, [r2, #8]
            break;
 8017f96:	e115      	b.n	80181c4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017f98:	2000      	movs	r0, #0
 8017f9a:	f002 f807 	bl	8019fac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017f9e:	4b48      	ldr	r3, [pc, #288]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017fa6:	4a46      	ldr	r2, [pc, #280]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017fac:	4b44      	ldr	r3, [pc, #272]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017fae:	220b      	movs	r2, #11
 8017fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017fb4:	68b8      	ldr	r0, [r7, #8]
 8017fb6:	f002 fee5 	bl	801ad84 <SUBGRF_GetFskBandwidthRegValue>
 8017fba:	4603      	mov	r3, r0
 8017fbc:	461a      	mov	r2, r3
 8017fbe:	4b40      	ldr	r3, [pc, #256]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017fca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017fcc:	00db      	lsls	r3, r3, #3
 8017fce:	b29a      	uxth	r2, r3
 8017fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017fd2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017fd6:	2204      	movs	r2, #4
 8017fd8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017fda:	4b39      	ldr	r3, [pc, #228]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017fdc:	2218      	movs	r2, #24
 8017fde:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017fe0:	4b37      	ldr	r3, [pc, #220]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017fe6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017fea:	f083 0301 	eor.w	r3, r3, #1
 8017fee:	b2db      	uxtb	r3, r3
 8017ff0:	461a      	mov	r2, r3
 8017ff2:	4b33      	ldr	r3, [pc, #204]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017ff4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017ff6:	4b33      	ldr	r3, [pc, #204]	@ (80180c4 <RadioSetRxConfig+0x300>)
 8017ff8:	781a      	ldrb	r2, [r3, #0]
 8017ffa:	4b31      	ldr	r3, [pc, #196]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8017ffc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017ffe:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018002:	2b00      	cmp	r3, #0
 8018004:	d003      	beq.n	801800e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018006:	4b2e      	ldr	r3, [pc, #184]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8018008:	22f2      	movs	r2, #242	@ 0xf2
 801800a:	75da      	strb	r2, [r3, #23]
 801800c:	e002      	b.n	8018014 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801800e:	4b2c      	ldr	r3, [pc, #176]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8018010:	2201      	movs	r2, #1
 8018012:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018014:	4b2a      	ldr	r3, [pc, #168]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8018016:	2201      	movs	r2, #1
 8018018:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801801a:	f000 fc68 	bl	80188ee <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801801e:	2000      	movs	r0, #0
 8018020:	f7ff fdfc 	bl	8017c1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018024:	4828      	ldr	r0, [pc, #160]	@ (80180c8 <RadioSetRxConfig+0x304>)
 8018026:	f002 fa65 	bl	801a4f4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801802a:	4828      	ldr	r0, [pc, #160]	@ (80180cc <RadioSetRxConfig+0x308>)
 801802c:	f002 fb30 	bl	801a690 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018030:	4a28      	ldr	r2, [pc, #160]	@ (80180d4 <RadioSetRxConfig+0x310>)
 8018032:	f107 0314 	add.w	r3, r7, #20
 8018036:	e892 0003 	ldmia.w	r2, {r0, r1}
 801803a:	e883 0003 	stmia.w	r3, {r0, r1}
 801803e:	f107 0314 	add.w	r3, r7, #20
 8018042:	4618      	mov	r0, r3
 8018044:	f001 fde9 	bl	8019c1a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018048:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801804c:	f001 fe34 	bl	8019cb8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018050:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018052:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018056:	fb02 f303 	mul.w	r3, r2, r3
 801805a:	461a      	mov	r2, r3
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018062:	4a17      	ldr	r2, [pc, #92]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8018064:	6093      	str	r3, [r2, #8]
            break;
 8018066:	e0ad      	b.n	80181c4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018068:	2000      	movs	r0, #0
 801806a:	f001 ff9f 	bl	8019fac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801806e:	4b14      	ldr	r3, [pc, #80]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8018070:	2201      	movs	r2, #1
 8018072:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	b2da      	uxtb	r2, r3
 801807a:	4b11      	ldr	r3, [pc, #68]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 801807c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8018080:	4a15      	ldr	r2, [pc, #84]	@ (80180d8 <RadioSetRxConfig+0x314>)
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	4413      	add	r3, r2
 8018086:	781a      	ldrb	r2, [r3, #0]
 8018088:	4b0d      	ldr	r3, [pc, #52]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 801808a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801808e:	4a0c      	ldr	r2, [pc, #48]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 8018090:	7bbb      	ldrb	r3, [r7, #14]
 8018092:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d105      	bne.n	80180a8 <RadioSetRxConfig+0x2e4>
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	2b0b      	cmp	r3, #11
 80180a0:	d008      	beq.n	80180b4 <RadioSetRxConfig+0x2f0>
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	2b0c      	cmp	r3, #12
 80180a6:	d005      	beq.n	80180b4 <RadioSetRxConfig+0x2f0>
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	2b01      	cmp	r3, #1
 80180ac:	d116      	bne.n	80180dc <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	2b0c      	cmp	r3, #12
 80180b2:	d113      	bne.n	80180dc <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80180b4:	4b02      	ldr	r3, [pc, #8]	@ (80180c0 <RadioSetRxConfig+0x2fc>)
 80180b6:	2201      	movs	r2, #1
 80180b8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80180bc:	e012      	b.n	80180e4 <RadioSetRxConfig+0x320>
 80180be:	bf00      	nop
 80180c0:	20001c68 	.word	0x20001c68
 80180c4:	20000134 	.word	0x20000134
 80180c8:	20001ca0 	.word	0x20001ca0
 80180cc:	20001c76 	.word	0x20001c76
 80180d0:	0801cf3c 	.word	0x0801cf3c
 80180d4:	0801cf44 	.word	0x0801cf44
 80180d8:	0801d598 	.word	0x0801d598
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80180dc:	4b3b      	ldr	r3, [pc, #236]	@ (80181cc <RadioSetRxConfig+0x408>)
 80180de:	2200      	movs	r2, #0
 80180e0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80180e4:	4b39      	ldr	r3, [pc, #228]	@ (80181cc <RadioSetRxConfig+0x408>)
 80180e6:	2201      	movs	r2, #1
 80180e8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80180ea:	4b38      	ldr	r3, [pc, #224]	@ (80181cc <RadioSetRxConfig+0x408>)
 80180ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80180f0:	2b05      	cmp	r3, #5
 80180f2:	d004      	beq.n	80180fe <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80180f4:	4b35      	ldr	r3, [pc, #212]	@ (80181cc <RadioSetRxConfig+0x408>)
 80180f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80180fa:	2b06      	cmp	r3, #6
 80180fc:	d10a      	bne.n	8018114 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80180fe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018100:	2b0b      	cmp	r3, #11
 8018102:	d803      	bhi.n	801810c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018104:	4b31      	ldr	r3, [pc, #196]	@ (80181cc <RadioSetRxConfig+0x408>)
 8018106:	220c      	movs	r2, #12
 8018108:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801810a:	e006      	b.n	801811a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801810c:	4a2f      	ldr	r2, [pc, #188]	@ (80181cc <RadioSetRxConfig+0x408>)
 801810e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018110:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018112:	e002      	b.n	801811a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018114:	4a2d      	ldr	r2, [pc, #180]	@ (80181cc <RadioSetRxConfig+0x408>)
 8018116:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018118:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801811a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801811e:	4b2b      	ldr	r3, [pc, #172]	@ (80181cc <RadioSetRxConfig+0x408>)
 8018120:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018122:	4b2b      	ldr	r3, [pc, #172]	@ (80181d0 <RadioSetRxConfig+0x40c>)
 8018124:	781a      	ldrb	r2, [r3, #0]
 8018126:	4b29      	ldr	r3, [pc, #164]	@ (80181cc <RadioSetRxConfig+0x408>)
 8018128:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801812a:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801812e:	4b27      	ldr	r3, [pc, #156]	@ (80181cc <RadioSetRxConfig+0x408>)
 8018130:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018134:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8018138:	4b24      	ldr	r3, [pc, #144]	@ (80181cc <RadioSetRxConfig+0x408>)
 801813a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801813e:	f000 fbd6 	bl	80188ee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018142:	2001      	movs	r0, #1
 8018144:	f7ff fd6a 	bl	8017c1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018148:	4822      	ldr	r0, [pc, #136]	@ (80181d4 <RadioSetRxConfig+0x410>)
 801814a:	f002 f9d3 	bl	801a4f4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801814e:	4822      	ldr	r0, [pc, #136]	@ (80181d8 <RadioSetRxConfig+0x414>)
 8018150:	f002 fa9e 	bl	801a690 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018154:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018156:	b2db      	uxtb	r3, r3
 8018158:	4618      	mov	r0, r3
 801815a:	f001 ff36 	bl	8019fca <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801815e:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8018162:	f002 fbfd 	bl	801a960 <SUBGRF_ReadRegister>
 8018166:	4603      	mov	r3, r0
 8018168:	f003 0301 	and.w	r3, r3, #1
 801816c:	b2db      	uxtb	r3, r3
 801816e:	4619      	mov	r1, r3
 8018170:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8018174:	f002 fbd2 	bl	801a91c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018178:	4b14      	ldr	r3, [pc, #80]	@ (80181cc <RadioSetRxConfig+0x408>)
 801817a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801817e:	2b01      	cmp	r3, #1
 8018180:	d10d      	bne.n	801819e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018182:	f240 7036 	movw	r0, #1846	@ 0x736
 8018186:	f002 fbeb 	bl	801a960 <SUBGRF_ReadRegister>
 801818a:	4603      	mov	r3, r0
 801818c:	f023 0304 	bic.w	r3, r3, #4
 8018190:	b2db      	uxtb	r3, r3
 8018192:	4619      	mov	r1, r3
 8018194:	f240 7036 	movw	r0, #1846	@ 0x736
 8018198:	f002 fbc0 	bl	801a91c <SUBGRF_WriteRegister>
 801819c:	e00c      	b.n	80181b8 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801819e:	f240 7036 	movw	r0, #1846	@ 0x736
 80181a2:	f002 fbdd 	bl	801a960 <SUBGRF_ReadRegister>
 80181a6:	4603      	mov	r3, r0
 80181a8:	f043 0304 	orr.w	r3, r3, #4
 80181ac:	b2db      	uxtb	r3, r3
 80181ae:	4619      	mov	r1, r3
 80181b0:	f240 7036 	movw	r0, #1846	@ 0x736
 80181b4:	f002 fbb2 	bl	801a91c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80181b8:	4b04      	ldr	r3, [pc, #16]	@ (80181cc <RadioSetRxConfig+0x408>)
 80181ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80181be:	609a      	str	r2, [r3, #8]
            break;
 80181c0:	e000      	b.n	80181c4 <RadioSetRxConfig+0x400>
            break;
 80181c2:	bf00      	nop
    }
}
 80181c4:	bf00      	nop
 80181c6:	3728      	adds	r7, #40	@ 0x28
 80181c8:	46bd      	mov	sp, r7
 80181ca:	bd80      	pop	{r7, pc}
 80181cc:	20001c68 	.word	0x20001c68
 80181d0:	20000134 	.word	0x20000134
 80181d4:	20001ca0 	.word	0x20001ca0
 80181d8:	20001c76 	.word	0x20001c76

080181dc <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b086      	sub	sp, #24
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	60ba      	str	r2, [r7, #8]
 80181e4:	607b      	str	r3, [r7, #4]
 80181e6:	4603      	mov	r3, r0
 80181e8:	73fb      	strb	r3, [r7, #15]
 80181ea:	460b      	mov	r3, r1
 80181ec:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80181ee:	f002 fe96 	bl	801af1e <RFW_DeInit>
    switch( modem )
 80181f2:	7bfb      	ldrb	r3, [r7, #15]
 80181f4:	2b04      	cmp	r3, #4
 80181f6:	f000 80c7 	beq.w	8018388 <RadioSetTxConfig+0x1ac>
 80181fa:	2b04      	cmp	r3, #4
 80181fc:	f300 80d6 	bgt.w	80183ac <RadioSetTxConfig+0x1d0>
 8018200:	2b00      	cmp	r3, #0
 8018202:	d002      	beq.n	801820a <RadioSetTxConfig+0x2e>
 8018204:	2b01      	cmp	r3, #1
 8018206:	d059      	beq.n	80182bc <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018208:	e0d0      	b.n	80183ac <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801820a:	4b77      	ldr	r3, [pc, #476]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 801820c:	2200      	movs	r2, #0
 801820e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018212:	4a75      	ldr	r2, [pc, #468]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018214:	6a3b      	ldr	r3, [r7, #32]
 8018216:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018218:	4b73      	ldr	r3, [pc, #460]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 801821a:	220b      	movs	r2, #11
 801821c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018220:	6878      	ldr	r0, [r7, #4]
 8018222:	f002 fdaf 	bl	801ad84 <SUBGRF_GetFskBandwidthRegValue>
 8018226:	4603      	mov	r3, r0
 8018228:	461a      	mov	r2, r3
 801822a:	4b6f      	ldr	r3, [pc, #444]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 801822c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018230:	4a6d      	ldr	r2, [pc, #436]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018232:	68bb      	ldr	r3, [r7, #8]
 8018234:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018236:	4b6c      	ldr	r3, [pc, #432]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018238:	2200      	movs	r2, #0
 801823a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801823c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801823e:	00db      	lsls	r3, r3, #3
 8018240:	b29a      	uxth	r2, r3
 8018242:	4b69      	ldr	r3, [pc, #420]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018244:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018246:	4b68      	ldr	r3, [pc, #416]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018248:	2204      	movs	r2, #4
 801824a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801824c:	4b66      	ldr	r3, [pc, #408]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 801824e:	2218      	movs	r2, #24
 8018250:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018252:	4b65      	ldr	r3, [pc, #404]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018254:	2200      	movs	r2, #0
 8018256:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018258:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801825c:	f083 0301 	eor.w	r3, r3, #1
 8018260:	b2db      	uxtb	r3, r3
 8018262:	461a      	mov	r2, r3
 8018264:	4b60      	ldr	r3, [pc, #384]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018266:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018268:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801826c:	2b00      	cmp	r3, #0
 801826e:	d003      	beq.n	8018278 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018270:	4b5d      	ldr	r3, [pc, #372]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018272:	22f2      	movs	r2, #242	@ 0xf2
 8018274:	75da      	strb	r2, [r3, #23]
 8018276:	e002      	b.n	801827e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018278:	4b5b      	ldr	r3, [pc, #364]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 801827a:	2201      	movs	r2, #1
 801827c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801827e:	4b5a      	ldr	r3, [pc, #360]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018280:	2201      	movs	r2, #1
 8018282:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018284:	f000 fb33 	bl	80188ee <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018288:	2000      	movs	r0, #0
 801828a:	f7ff fcc7 	bl	8017c1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801828e:	4857      	ldr	r0, [pc, #348]	@ (80183ec <RadioSetTxConfig+0x210>)
 8018290:	f002 f930 	bl	801a4f4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018294:	4856      	ldr	r0, [pc, #344]	@ (80183f0 <RadioSetTxConfig+0x214>)
 8018296:	f002 f9fb 	bl	801a690 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801829a:	4a56      	ldr	r2, [pc, #344]	@ (80183f4 <RadioSetTxConfig+0x218>)
 801829c:	f107 0310 	add.w	r3, r7, #16
 80182a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80182a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80182a8:	f107 0310 	add.w	r3, r7, #16
 80182ac:	4618      	mov	r0, r3
 80182ae:	f001 fcb4 	bl	8019c1a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80182b2:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80182b6:	f001 fcff 	bl	8019cb8 <SUBGRF_SetWhiteningSeed>
            break;
 80182ba:	e078      	b.n	80183ae <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80182bc:	4b4a      	ldr	r3, [pc, #296]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 80182be:	2201      	movs	r2, #1
 80182c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80182c4:	6a3b      	ldr	r3, [r7, #32]
 80182c6:	b2da      	uxtb	r2, r3
 80182c8:	4b47      	ldr	r3, [pc, #284]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 80182ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80182ce:	4a4a      	ldr	r2, [pc, #296]	@ (80183f8 <RadioSetTxConfig+0x21c>)
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	4413      	add	r3, r2
 80182d4:	781a      	ldrb	r2, [r3, #0]
 80182d6:	4b44      	ldr	r3, [pc, #272]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 80182d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80182dc:	4a42      	ldr	r2, [pc, #264]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 80182de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80182e2:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d105      	bne.n	80182f8 <RadioSetTxConfig+0x11c>
 80182ec:	6a3b      	ldr	r3, [r7, #32]
 80182ee:	2b0b      	cmp	r3, #11
 80182f0:	d008      	beq.n	8018304 <RadioSetTxConfig+0x128>
 80182f2:	6a3b      	ldr	r3, [r7, #32]
 80182f4:	2b0c      	cmp	r3, #12
 80182f6:	d005      	beq.n	8018304 <RadioSetTxConfig+0x128>
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	2b01      	cmp	r3, #1
 80182fc:	d107      	bne.n	801830e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80182fe:	6a3b      	ldr	r3, [r7, #32]
 8018300:	2b0c      	cmp	r3, #12
 8018302:	d104      	bne.n	801830e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018304:	4b38      	ldr	r3, [pc, #224]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018306:	2201      	movs	r2, #1
 8018308:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801830c:	e003      	b.n	8018316 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801830e:	4b36      	ldr	r3, [pc, #216]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018310:	2200      	movs	r2, #0
 8018312:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018316:	4b34      	ldr	r3, [pc, #208]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018318:	2201      	movs	r2, #1
 801831a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801831c:	4b32      	ldr	r3, [pc, #200]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 801831e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018322:	2b05      	cmp	r3, #5
 8018324:	d004      	beq.n	8018330 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018326:	4b30      	ldr	r3, [pc, #192]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018328:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801832c:	2b06      	cmp	r3, #6
 801832e:	d10a      	bne.n	8018346 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018330:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018332:	2b0b      	cmp	r3, #11
 8018334:	d803      	bhi.n	801833e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018336:	4b2c      	ldr	r3, [pc, #176]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018338:	220c      	movs	r2, #12
 801833a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801833c:	e006      	b.n	801834c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801833e:	4a2a      	ldr	r2, [pc, #168]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018340:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018342:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018344:	e002      	b.n	801834c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018346:	4a28      	ldr	r2, [pc, #160]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018348:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801834a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801834c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8018350:	4b25      	ldr	r3, [pc, #148]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018352:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018354:	4b29      	ldr	r3, [pc, #164]	@ (80183fc <RadioSetTxConfig+0x220>)
 8018356:	781a      	ldrb	r2, [r3, #0]
 8018358:	4b23      	ldr	r3, [pc, #140]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 801835a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801835c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018360:	4b21      	ldr	r3, [pc, #132]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018362:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018366:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801836a:	4b1f      	ldr	r3, [pc, #124]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 801836c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018370:	f000 fabd 	bl	80188ee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018374:	2001      	movs	r0, #1
 8018376:	f7ff fc51 	bl	8017c1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801837a:	481c      	ldr	r0, [pc, #112]	@ (80183ec <RadioSetTxConfig+0x210>)
 801837c:	f002 f8ba 	bl	801a4f4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018380:	481b      	ldr	r0, [pc, #108]	@ (80183f0 <RadioSetTxConfig+0x214>)
 8018382:	f002 f985 	bl	801a690 <SUBGRF_SetPacketParams>
            break;
 8018386:	e012      	b.n	80183ae <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018388:	2004      	movs	r0, #4
 801838a:	f7ff fc47 	bl	8017c1c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801838e:	4b16      	ldr	r3, [pc, #88]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018390:	2202      	movs	r2, #2
 8018392:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018396:	4a14      	ldr	r2, [pc, #80]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 8018398:	6a3b      	ldr	r3, [r7, #32]
 801839a:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801839c:	4b12      	ldr	r3, [pc, #72]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 801839e:	2216      	movs	r2, #22
 80183a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80183a4:	4811      	ldr	r0, [pc, #68]	@ (80183ec <RadioSetTxConfig+0x210>)
 80183a6:	f002 f8a5 	bl	801a4f4 <SUBGRF_SetModulationParams>
            break;
 80183aa:	e000      	b.n	80183ae <RadioSetTxConfig+0x1d2>
            break;
 80183ac:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80183ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80183b2:	4618      	mov	r0, r3
 80183b4:	f002 fbe8 	bl	801ab88 <SUBGRF_SetRfTxPower>
 80183b8:	4603      	mov	r3, r0
 80183ba:	461a      	mov	r2, r3
 80183bc:	4b0a      	ldr	r3, [pc, #40]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 80183be:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80183c2:	210e      	movs	r1, #14
 80183c4:	f640 101f 	movw	r0, #2335	@ 0x91f
 80183c8:	f002 faa8 	bl	801a91c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80183cc:	4b06      	ldr	r3, [pc, #24]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 80183ce:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80183d2:	4618      	mov	r0, r3
 80183d4:	f002 fdb7 	bl	801af46 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80183d8:	4a03      	ldr	r2, [pc, #12]	@ (80183e8 <RadioSetTxConfig+0x20c>)
 80183da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80183dc:	6053      	str	r3, [r2, #4]
}
 80183de:	bf00      	nop
 80183e0:	3718      	adds	r7, #24
 80183e2:	46bd      	mov	sp, r7
 80183e4:	bd80      	pop	{r7, pc}
 80183e6:	bf00      	nop
 80183e8:	20001c68 	.word	0x20001c68
 80183ec:	20001ca0 	.word	0x20001ca0
 80183f0:	20001c76 	.word	0x20001c76
 80183f4:	0801cf44 	.word	0x0801cf44
 80183f8:	0801d598 	.word	0x0801d598
 80183fc:	20000134 	.word	0x20000134

08018400 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018400:	b480      	push	{r7}
 8018402:	b083      	sub	sp, #12
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
    return true;
 8018408:	2301      	movs	r3, #1
}
 801840a:	4618      	mov	r0, r3
 801840c:	370c      	adds	r7, #12
 801840e:	46bd      	mov	sp, r7
 8018410:	bc80      	pop	{r7}
 8018412:	4770      	bx	lr

08018414 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018414:	b480      	push	{r7}
 8018416:	b085      	sub	sp, #20
 8018418:	af00      	add	r7, sp, #0
 801841a:	4603      	mov	r3, r0
 801841c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801841e:	2300      	movs	r3, #0
 8018420:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018422:	79fb      	ldrb	r3, [r7, #7]
 8018424:	2b0a      	cmp	r3, #10
 8018426:	d83e      	bhi.n	80184a6 <RadioGetLoRaBandwidthInHz+0x92>
 8018428:	a201      	add	r2, pc, #4	@ (adr r2, 8018430 <RadioGetLoRaBandwidthInHz+0x1c>)
 801842a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801842e:	bf00      	nop
 8018430:	0801845d 	.word	0x0801845d
 8018434:	0801846d 	.word	0x0801846d
 8018438:	0801847d 	.word	0x0801847d
 801843c:	0801848d 	.word	0x0801848d
 8018440:	08018495 	.word	0x08018495
 8018444:	0801849b 	.word	0x0801849b
 8018448:	080184a1 	.word	0x080184a1
 801844c:	080184a7 	.word	0x080184a7
 8018450:	08018465 	.word	0x08018465
 8018454:	08018475 	.word	0x08018475
 8018458:	08018485 	.word	0x08018485
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801845c:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8018460:	60fb      	str	r3, [r7, #12]
        break;
 8018462:	e020      	b.n	80184a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018464:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8018468:	60fb      	str	r3, [r7, #12]
        break;
 801846a:	e01c      	b.n	80184a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801846c:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8018470:	60fb      	str	r3, [r7, #12]
        break;
 8018472:	e018      	b.n	80184a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018474:	f245 1361 	movw	r3, #20833	@ 0x5161
 8018478:	60fb      	str	r3, [r7, #12]
        break;
 801847a:	e014      	b.n	80184a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801847c:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8018480:	60fb      	str	r3, [r7, #12]
        break;
 8018482:	e010      	b.n	80184a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018484:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8018488:	60fb      	str	r3, [r7, #12]
        break;
 801848a:	e00c      	b.n	80184a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801848c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8018490:	60fb      	str	r3, [r7, #12]
        break;
 8018492:	e008      	b.n	80184a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018494:	4b07      	ldr	r3, [pc, #28]	@ (80184b4 <RadioGetLoRaBandwidthInHz+0xa0>)
 8018496:	60fb      	str	r3, [r7, #12]
        break;
 8018498:	e005      	b.n	80184a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801849a:	4b07      	ldr	r3, [pc, #28]	@ (80184b8 <RadioGetLoRaBandwidthInHz+0xa4>)
 801849c:	60fb      	str	r3, [r7, #12]
        break;
 801849e:	e002      	b.n	80184a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80184a0:	4b06      	ldr	r3, [pc, #24]	@ (80184bc <RadioGetLoRaBandwidthInHz+0xa8>)
 80184a2:	60fb      	str	r3, [r7, #12]
        break;
 80184a4:	bf00      	nop
    }

    return bandwidthInHz;
 80184a6:	68fb      	ldr	r3, [r7, #12]
}
 80184a8:	4618      	mov	r0, r3
 80184aa:	3714      	adds	r7, #20
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bc80      	pop	{r7}
 80184b0:	4770      	bx	lr
 80184b2:	bf00      	nop
 80184b4:	0001e848 	.word	0x0001e848
 80184b8:	0003d090 	.word	0x0003d090
 80184bc:	0007a120 	.word	0x0007a120

080184c0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80184c0:	b480      	push	{r7}
 80184c2:	b083      	sub	sp, #12
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	6078      	str	r0, [r7, #4]
 80184c8:	4608      	mov	r0, r1
 80184ca:	4611      	mov	r1, r2
 80184cc:	461a      	mov	r2, r3
 80184ce:	4603      	mov	r3, r0
 80184d0:	70fb      	strb	r3, [r7, #3]
 80184d2:	460b      	mov	r3, r1
 80184d4:	803b      	strh	r3, [r7, #0]
 80184d6:	4613      	mov	r3, r2
 80184d8:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80184da:	883b      	ldrh	r3, [r7, #0]
 80184dc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80184de:	78ba      	ldrb	r2, [r7, #2]
 80184e0:	f082 0201 	eor.w	r2, r2, #1
 80184e4:	b2d2      	uxtb	r2, r2
 80184e6:	2a00      	cmp	r2, #0
 80184e8:	d001      	beq.n	80184ee <RadioGetGfskTimeOnAirNumerator+0x2e>
 80184ea:	2208      	movs	r2, #8
 80184ec:	e000      	b.n	80184f0 <RadioGetGfskTimeOnAirNumerator+0x30>
 80184ee:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80184f0:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80184f2:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80184f6:	7c3b      	ldrb	r3, [r7, #16]
 80184f8:	7d39      	ldrb	r1, [r7, #20]
 80184fa:	2900      	cmp	r1, #0
 80184fc:	d001      	beq.n	8018502 <RadioGetGfskTimeOnAirNumerator+0x42>
 80184fe:	2102      	movs	r1, #2
 8018500:	e000      	b.n	8018504 <RadioGetGfskTimeOnAirNumerator+0x44>
 8018502:	2100      	movs	r1, #0
 8018504:	440b      	add	r3, r1
 8018506:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018508:	4413      	add	r3, r2
}
 801850a:	4618      	mov	r0, r3
 801850c:	370c      	adds	r7, #12
 801850e:	46bd      	mov	sp, r7
 8018510:	bc80      	pop	{r7}
 8018512:	4770      	bx	lr

08018514 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018514:	b480      	push	{r7}
 8018516:	b08b      	sub	sp, #44	@ 0x2c
 8018518:	af00      	add	r7, sp, #0
 801851a:	60f8      	str	r0, [r7, #12]
 801851c:	60b9      	str	r1, [r7, #8]
 801851e:	4611      	mov	r1, r2
 8018520:	461a      	mov	r2, r3
 8018522:	460b      	mov	r3, r1
 8018524:	71fb      	strb	r3, [r7, #7]
 8018526:	4613      	mov	r3, r2
 8018528:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801852a:	79fb      	ldrb	r3, [r7, #7]
 801852c:	3304      	adds	r3, #4
 801852e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8018530:	2300      	movs	r3, #0
 8018532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8018536:	68bb      	ldr	r3, [r7, #8]
 8018538:	2b05      	cmp	r3, #5
 801853a:	d002      	beq.n	8018542 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801853c:	68bb      	ldr	r3, [r7, #8]
 801853e:	2b06      	cmp	r3, #6
 8018540:	d104      	bne.n	801854c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8018542:	88bb      	ldrh	r3, [r7, #4]
 8018544:	2b0b      	cmp	r3, #11
 8018546:	d801      	bhi.n	801854c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8018548:	230c      	movs	r3, #12
 801854a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d105      	bne.n	801855e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8018552:	68bb      	ldr	r3, [r7, #8]
 8018554:	2b0b      	cmp	r3, #11
 8018556:	d008      	beq.n	801856a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018558:	68bb      	ldr	r3, [r7, #8]
 801855a:	2b0c      	cmp	r3, #12
 801855c:	d005      	beq.n	801856a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	2b01      	cmp	r3, #1
 8018562:	d105      	bne.n	8018570 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018564:	68bb      	ldr	r3, [r7, #8]
 8018566:	2b0c      	cmp	r3, #12
 8018568:	d102      	bne.n	8018570 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801856a:	2301      	movs	r3, #1
 801856c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018570:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8018574:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8018576:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801857a:	2a00      	cmp	r2, #0
 801857c:	d001      	beq.n	8018582 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801857e:	2210      	movs	r2, #16
 8018580:	e000      	b.n	8018584 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8018582:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018584:	4413      	add	r3, r2
 8018586:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8018588:	68bb      	ldr	r3, [r7, #8]
 801858a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801858c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801858e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018592:	2a00      	cmp	r2, #0
 8018594:	d001      	beq.n	801859a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8018596:	2200      	movs	r2, #0
 8018598:	e000      	b.n	801859c <RadioGetLoRaTimeOnAirNumerator+0x88>
 801859a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801859c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801859e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80185a0:	68bb      	ldr	r3, [r7, #8]
 80185a2:	2b06      	cmp	r3, #6
 80185a4:	d803      	bhi.n	80185ae <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80185a6:	68bb      	ldr	r3, [r7, #8]
 80185a8:	009b      	lsls	r3, r3, #2
 80185aa:	623b      	str	r3, [r7, #32]
 80185ac:	e00e      	b.n	80185cc <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80185ae:	69fb      	ldr	r3, [r7, #28]
 80185b0:	3308      	adds	r3, #8
 80185b2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80185b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d004      	beq.n	80185c6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80185bc:	68bb      	ldr	r3, [r7, #8]
 80185be:	3b02      	subs	r3, #2
 80185c0:	009b      	lsls	r3, r3, #2
 80185c2:	623b      	str	r3, [r7, #32]
 80185c4:	e002      	b.n	80185cc <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80185c6:	68bb      	ldr	r3, [r7, #8]
 80185c8:	009b      	lsls	r3, r3, #2
 80185ca:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80185cc:	69fb      	ldr	r3, [r7, #28]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	da01      	bge.n	80185d6 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80185d2:	2300      	movs	r3, #0
 80185d4:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80185d6:	69fa      	ldr	r2, [r7, #28]
 80185d8:	6a3b      	ldr	r3, [r7, #32]
 80185da:	4413      	add	r3, r2
 80185dc:	1e5a      	subs	r2, r3, #1
 80185de:	6a3b      	ldr	r3, [r7, #32]
 80185e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80185e4:	697a      	ldr	r2, [r7, #20]
 80185e6:	fb03 f202 	mul.w	r2, r3, r2
 80185ea:	88bb      	ldrh	r3, [r7, #4]
 80185ec:	4413      	add	r3, r2
    int32_t intermediate =
 80185ee:	330c      	adds	r3, #12
 80185f0:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80185f2:	68bb      	ldr	r3, [r7, #8]
 80185f4:	2b06      	cmp	r3, #6
 80185f6:	d802      	bhi.n	80185fe <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80185f8:	69bb      	ldr	r3, [r7, #24]
 80185fa:	3302      	adds	r3, #2
 80185fc:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80185fe:	69bb      	ldr	r3, [r7, #24]
 8018600:	009b      	lsls	r3, r3, #2
 8018602:	1c5a      	adds	r2, r3, #1
 8018604:	68bb      	ldr	r3, [r7, #8]
 8018606:	3b02      	subs	r3, #2
 8018608:	fa02 f303 	lsl.w	r3, r2, r3
}
 801860c:	4618      	mov	r0, r3
 801860e:	372c      	adds	r7, #44	@ 0x2c
 8018610:	46bd      	mov	sp, r7
 8018612:	bc80      	pop	{r7}
 8018614:	4770      	bx	lr
	...

08018618 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b08a      	sub	sp, #40	@ 0x28
 801861c:	af04      	add	r7, sp, #16
 801861e:	60b9      	str	r1, [r7, #8]
 8018620:	607a      	str	r2, [r7, #4]
 8018622:	461a      	mov	r2, r3
 8018624:	4603      	mov	r3, r0
 8018626:	73fb      	strb	r3, [r7, #15]
 8018628:	4613      	mov	r3, r2
 801862a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801862c:	2300      	movs	r3, #0
 801862e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8018630:	2301      	movs	r3, #1
 8018632:	613b      	str	r3, [r7, #16]

    switch( modem )
 8018634:	7bfb      	ldrb	r3, [r7, #15]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d002      	beq.n	8018640 <RadioTimeOnAir+0x28>
 801863a:	2b01      	cmp	r3, #1
 801863c:	d017      	beq.n	801866e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801863e:	e035      	b.n	80186ac <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8018640:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8018644:	8c3a      	ldrh	r2, [r7, #32]
 8018646:	7bb9      	ldrb	r1, [r7, #14]
 8018648:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801864c:	9301      	str	r3, [sp, #4]
 801864e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018652:	9300      	str	r3, [sp, #0]
 8018654:	4603      	mov	r3, r0
 8018656:	6878      	ldr	r0, [r7, #4]
 8018658:	f7ff ff32 	bl	80184c0 <RadioGetGfskTimeOnAirNumerator>
 801865c:	4603      	mov	r3, r0
 801865e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018662:	fb02 f303 	mul.w	r3, r2, r3
 8018666:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	613b      	str	r3, [r7, #16]
        break;
 801866c:	e01e      	b.n	80186ac <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801866e:	8c39      	ldrh	r1, [r7, #32]
 8018670:	7bba      	ldrb	r2, [r7, #14]
 8018672:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018676:	9302      	str	r3, [sp, #8]
 8018678:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801867c:	9301      	str	r3, [sp, #4]
 801867e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018682:	9300      	str	r3, [sp, #0]
 8018684:	460b      	mov	r3, r1
 8018686:	6879      	ldr	r1, [r7, #4]
 8018688:	68b8      	ldr	r0, [r7, #8]
 801868a:	f7ff ff43 	bl	8018514 <RadioGetLoRaTimeOnAirNumerator>
 801868e:	4603      	mov	r3, r0
 8018690:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018694:	fb02 f303 	mul.w	r3, r2, r3
 8018698:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801869a:	4a0a      	ldr	r2, [pc, #40]	@ (80186c4 <RadioTimeOnAir+0xac>)
 801869c:	68bb      	ldr	r3, [r7, #8]
 801869e:	4413      	add	r3, r2
 80186a0:	781b      	ldrb	r3, [r3, #0]
 80186a2:	4618      	mov	r0, r3
 80186a4:	f7ff feb6 	bl	8018414 <RadioGetLoRaBandwidthInHz>
 80186a8:	6138      	str	r0, [r7, #16]
        break;
 80186aa:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80186ac:	697a      	ldr	r2, [r7, #20]
 80186ae:	693b      	ldr	r3, [r7, #16]
 80186b0:	4413      	add	r3, r2
 80186b2:	1e5a      	subs	r2, r3, #1
 80186b4:	693b      	ldr	r3, [r7, #16]
 80186b6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80186ba:	4618      	mov	r0, r3
 80186bc:	3718      	adds	r7, #24
 80186be:	46bd      	mov	sp, r7
 80186c0:	bd80      	pop	{r7, pc}
 80186c2:	bf00      	nop
 80186c4:	0801d598 	.word	0x0801d598

080186c8 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b084      	sub	sp, #16
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	6078      	str	r0, [r7, #4]
 80186d0:	460b      	mov	r3, r1
 80186d2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80186d4:	2300      	movs	r3, #0
 80186d6:	2200      	movs	r2, #0
 80186d8:	f240 2101 	movw	r1, #513	@ 0x201
 80186dc:	f240 2001 	movw	r0, #513	@ 0x201
 80186e0:	f001 fd72 	bl	801a1c8 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80186e4:	4b73      	ldr	r3, [pc, #460]	@ (80188b4 <RadioSend+0x1ec>)
 80186e6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80186ea:	2101      	movs	r1, #1
 80186ec:	4618      	mov	r0, r3
 80186ee:	f002 fa23 	bl	801ab38 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80186f2:	4b70      	ldr	r3, [pc, #448]	@ (80188b4 <RadioSend+0x1ec>)
 80186f4:	781b      	ldrb	r3, [r3, #0]
 80186f6:	2b01      	cmp	r3, #1
 80186f8:	d112      	bne.n	8018720 <RadioSend+0x58>
 80186fa:	4b6e      	ldr	r3, [pc, #440]	@ (80188b4 <RadioSend+0x1ec>)
 80186fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8018700:	2b06      	cmp	r3, #6
 8018702:	d10d      	bne.n	8018720 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018704:	f640 0089 	movw	r0, #2185	@ 0x889
 8018708:	f002 f92a 	bl	801a960 <SUBGRF_ReadRegister>
 801870c:	4603      	mov	r3, r0
 801870e:	f023 0304 	bic.w	r3, r3, #4
 8018712:	b2db      	uxtb	r3, r3
 8018714:	4619      	mov	r1, r3
 8018716:	f640 0089 	movw	r0, #2185	@ 0x889
 801871a:	f002 f8ff 	bl	801a91c <SUBGRF_WriteRegister>
 801871e:	e00c      	b.n	801873a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018720:	f640 0089 	movw	r0, #2185	@ 0x889
 8018724:	f002 f91c 	bl	801a960 <SUBGRF_ReadRegister>
 8018728:	4603      	mov	r3, r0
 801872a:	f043 0304 	orr.w	r3, r3, #4
 801872e:	b2db      	uxtb	r3, r3
 8018730:	4619      	mov	r1, r3
 8018732:	f640 0089 	movw	r0, #2185	@ 0x889
 8018736:	f002 f8f1 	bl	801a91c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801873a:	4b5e      	ldr	r3, [pc, #376]	@ (80188b4 <RadioSend+0x1ec>)
 801873c:	781b      	ldrb	r3, [r3, #0]
 801873e:	2b04      	cmp	r3, #4
 8018740:	f200 80a8 	bhi.w	8018894 <RadioSend+0x1cc>
 8018744:	a201      	add	r2, pc, #4	@ (adr r2, 801874c <RadioSend+0x84>)
 8018746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801874a:	bf00      	nop
 801874c:	0801877b 	.word	0x0801877b
 8018750:	08018761 	.word	0x08018761
 8018754:	0801877b 	.word	0x0801877b
 8018758:	080187dd 	.word	0x080187dd
 801875c:	080187fd 	.word	0x080187fd
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8018760:	4a54      	ldr	r2, [pc, #336]	@ (80188b4 <RadioSend+0x1ec>)
 8018762:	78fb      	ldrb	r3, [r7, #3]
 8018764:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018766:	4854      	ldr	r0, [pc, #336]	@ (80188b8 <RadioSend+0x1f0>)
 8018768:	f001 ff92 	bl	801a690 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801876c:	78fb      	ldrb	r3, [r7, #3]
 801876e:	2200      	movs	r2, #0
 8018770:	4619      	mov	r1, r3
 8018772:	6878      	ldr	r0, [r7, #4]
 8018774:	f001 fa3e 	bl	8019bf4 <SUBGRF_SendPayload>
            break;
 8018778:	e08d      	b.n	8018896 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801877a:	f002 fbd6 	bl	801af2a <RFW_Is_Init>
 801877e:	4603      	mov	r3, r0
 8018780:	2b01      	cmp	r3, #1
 8018782:	d11e      	bne.n	80187c2 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8018784:	f107 020d 	add.w	r2, r7, #13
 8018788:	78fb      	ldrb	r3, [r7, #3]
 801878a:	4619      	mov	r1, r3
 801878c:	6878      	ldr	r0, [r7, #4]
 801878e:	f002 fbe4 	bl	801af5a <RFW_TransmitInit>
 8018792:	4603      	mov	r3, r0
 8018794:	2b00      	cmp	r3, #0
 8018796:	d10c      	bne.n	80187b2 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8018798:	7b7a      	ldrb	r2, [r7, #13]
 801879a:	4b46      	ldr	r3, [pc, #280]	@ (80188b4 <RadioSend+0x1ec>)
 801879c:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801879e:	4846      	ldr	r0, [pc, #280]	@ (80188b8 <RadioSend+0x1f0>)
 80187a0:	f001 ff76 	bl	801a690 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80187a4:	7b7b      	ldrb	r3, [r7, #13]
 80187a6:	2200      	movs	r2, #0
 80187a8:	4619      	mov	r1, r3
 80187aa:	6878      	ldr	r0, [r7, #4]
 80187ac:	f001 fa22 	bl	8019bf4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80187b0:	e071      	b.n	8018896 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80187b2:	4b42      	ldr	r3, [pc, #264]	@ (80188bc <RadioSend+0x1f4>)
 80187b4:	2201      	movs	r2, #1
 80187b6:	2100      	movs	r1, #0
 80187b8:	2002      	movs	r0, #2
 80187ba:	f003 fc87 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80187be:	2303      	movs	r3, #3
 80187c0:	e073      	b.n	80188aa <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80187c2:	4a3c      	ldr	r2, [pc, #240]	@ (80188b4 <RadioSend+0x1ec>)
 80187c4:	78fb      	ldrb	r3, [r7, #3]
 80187c6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80187c8:	483b      	ldr	r0, [pc, #236]	@ (80188b8 <RadioSend+0x1f0>)
 80187ca:	f001 ff61 	bl	801a690 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80187ce:	78fb      	ldrb	r3, [r7, #3]
 80187d0:	2200      	movs	r2, #0
 80187d2:	4619      	mov	r1, r3
 80187d4:	6878      	ldr	r0, [r7, #4]
 80187d6:	f001 fa0d 	bl	8019bf4 <SUBGRF_SendPayload>
            break;
 80187da:	e05c      	b.n	8018896 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80187dc:	4b35      	ldr	r3, [pc, #212]	@ (80188b4 <RadioSend+0x1ec>)
 80187de:	2202      	movs	r2, #2
 80187e0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80187e2:	4a34      	ldr	r2, [pc, #208]	@ (80188b4 <RadioSend+0x1ec>)
 80187e4:	78fb      	ldrb	r3, [r7, #3]
 80187e6:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80187e8:	4833      	ldr	r0, [pc, #204]	@ (80188b8 <RadioSend+0x1f0>)
 80187ea:	f001 ff51 	bl	801a690 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80187ee:	78fb      	ldrb	r3, [r7, #3]
 80187f0:	2200      	movs	r2, #0
 80187f2:	4619      	mov	r1, r3
 80187f4:	6878      	ldr	r0, [r7, #4]
 80187f6:	f001 f9fd 	bl	8019bf4 <SUBGRF_SendPayload>
            break;
 80187fa:	e04c      	b.n	8018896 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80187fc:	78fb      	ldrb	r3, [r7, #3]
 80187fe:	461a      	mov	r2, r3
 8018800:	6879      	ldr	r1, [r7, #4]
 8018802:	482f      	ldr	r0, [pc, #188]	@ (80188c0 <RadioSend+0x1f8>)
 8018804:	f000 fcca 	bl	801919c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018808:	4b2a      	ldr	r3, [pc, #168]	@ (80188b4 <RadioSend+0x1ec>)
 801880a:	2202      	movs	r2, #2
 801880c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801880e:	78fb      	ldrb	r3, [r7, #3]
 8018810:	3301      	adds	r3, #1
 8018812:	b2da      	uxtb	r2, r3
 8018814:	4b27      	ldr	r3, [pc, #156]	@ (80188b4 <RadioSend+0x1ec>)
 8018816:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018818:	4827      	ldr	r0, [pc, #156]	@ (80188b8 <RadioSend+0x1f0>)
 801881a:	f001 ff39 	bl	801a690 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801881e:	2100      	movs	r1, #0
 8018820:	20f1      	movs	r0, #241	@ 0xf1
 8018822:	f000 f965 	bl	8018af0 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8018826:	2100      	movs	r1, #0
 8018828:	20f0      	movs	r0, #240	@ 0xf0
 801882a:	f000 f961 	bl	8018af0 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801882e:	4b21      	ldr	r3, [pc, #132]	@ (80188b4 <RadioSend+0x1ec>)
 8018830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018832:	2b64      	cmp	r3, #100	@ 0x64
 8018834:	d108      	bne.n	8018848 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8018836:	2170      	movs	r1, #112	@ 0x70
 8018838:	20f3      	movs	r0, #243	@ 0xf3
 801883a:	f000 f959 	bl	8018af0 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801883e:	211d      	movs	r1, #29
 8018840:	20f2      	movs	r0, #242	@ 0xf2
 8018842:	f000 f955 	bl	8018af0 <RadioWrite>
 8018846:	e007      	b.n	8018858 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8018848:	21e1      	movs	r1, #225	@ 0xe1
 801884a:	20f3      	movs	r0, #243	@ 0xf3
 801884c:	f000 f950 	bl	8018af0 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8018850:	2104      	movs	r1, #4
 8018852:	20f2      	movs	r0, #242	@ 0xf2
 8018854:	f000 f94c 	bl	8018af0 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8018858:	78fb      	ldrb	r3, [r7, #3]
 801885a:	b29b      	uxth	r3, r3
 801885c:	00db      	lsls	r3, r3, #3
 801885e:	b29b      	uxth	r3, r3
 8018860:	3302      	adds	r3, #2
 8018862:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8018864:	89fb      	ldrh	r3, [r7, #14]
 8018866:	0a1b      	lsrs	r3, r3, #8
 8018868:	b29b      	uxth	r3, r3
 801886a:	b2db      	uxtb	r3, r3
 801886c:	4619      	mov	r1, r3
 801886e:	20f4      	movs	r0, #244	@ 0xf4
 8018870:	f000 f93e 	bl	8018af0 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8018874:	89fb      	ldrh	r3, [r7, #14]
 8018876:	b2db      	uxtb	r3, r3
 8018878:	4619      	mov	r1, r3
 801887a:	20f5      	movs	r0, #245	@ 0xf5
 801887c:	f000 f938 	bl	8018af0 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8018880:	78fb      	ldrb	r3, [r7, #3]
 8018882:	3301      	adds	r3, #1
 8018884:	b2db      	uxtb	r3, r3
 8018886:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 801888a:	4619      	mov	r1, r3
 801888c:	480c      	ldr	r0, [pc, #48]	@ (80188c0 <RadioSend+0x1f8>)
 801888e:	f001 f9b1 	bl	8019bf4 <SUBGRF_SendPayload>
            break;
 8018892:	e000      	b.n	8018896 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018894:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8018896:	4b07      	ldr	r3, [pc, #28]	@ (80188b4 <RadioSend+0x1ec>)
 8018898:	685b      	ldr	r3, [r3, #4]
 801889a:	4619      	mov	r1, r3
 801889c:	4809      	ldr	r0, [pc, #36]	@ (80188c4 <RadioSend+0x1fc>)
 801889e:	f003 fa7b 	bl	801bd98 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80188a2:	4808      	ldr	r0, [pc, #32]	@ (80188c4 <RadioSend+0x1fc>)
 80188a4:	f003 f99a 	bl	801bbdc <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80188a8:	2300      	movs	r3, #0
}
 80188aa:	4618      	mov	r0, r3
 80188ac:	3710      	adds	r7, #16
 80188ae:	46bd      	mov	sp, r7
 80188b0:	bd80      	pop	{r7, pc}
 80188b2:	bf00      	nop
 80188b4:	20001c68 	.word	0x20001c68
 80188b8:	20001c76 	.word	0x20001c76
 80188bc:	0801cf4c 	.word	0x0801cf4c
 80188c0:	20001b64 	.word	0x20001b64
 80188c4:	20001cc4 	.word	0x20001cc4

080188c8 <RadioSleep>:

static void RadioSleep( void )
{
 80188c8:	b580      	push	{r7, lr}
 80188ca:	b082      	sub	sp, #8
 80188cc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80188ce:	2300      	movs	r3, #0
 80188d0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80188d2:	793b      	ldrb	r3, [r7, #4]
 80188d4:	f043 0304 	orr.w	r3, r3, #4
 80188d8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80188da:	7938      	ldrb	r0, [r7, #4]
 80188dc:	f001 fa66 	bl	8019dac <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80188e0:	2002      	movs	r0, #2
 80188e2:	f7e9 fd07 	bl	80022f4 <HAL_Delay>
}
 80188e6:	bf00      	nop
 80188e8:	3708      	adds	r7, #8
 80188ea:	46bd      	mov	sp, r7
 80188ec:	bd80      	pop	{r7, pc}

080188ee <RadioStandby>:

static void RadioStandby( void )
{
 80188ee:	b580      	push	{r7, lr}
 80188f0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80188f2:	2000      	movs	r0, #0
 80188f4:	f001 fa8e 	bl	8019e14 <SUBGRF_SetStandby>
}
 80188f8:	bf00      	nop
 80188fa:	bd80      	pop	{r7, pc}

080188fc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b082      	sub	sp, #8
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8018904:	f002 fb11 	bl	801af2a <RFW_Is_Init>
 8018908:	4603      	mov	r3, r0
 801890a:	2b01      	cmp	r3, #1
 801890c:	d102      	bne.n	8018914 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801890e:	f002 fb34 	bl	801af7a <RFW_ReceiveInit>
 8018912:	e007      	b.n	8018924 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018914:	2300      	movs	r3, #0
 8018916:	2200      	movs	r2, #0
 8018918:	f240 2162 	movw	r1, #610	@ 0x262
 801891c:	f240 2062 	movw	r0, #610	@ 0x262
 8018920:	f001 fc52 	bl	801a1c8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d006      	beq.n	8018938 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801892a:	6879      	ldr	r1, [r7, #4]
 801892c:	4811      	ldr	r0, [pc, #68]	@ (8018974 <RadioRx+0x78>)
 801892e:	f003 fa33 	bl	801bd98 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8018932:	4810      	ldr	r0, [pc, #64]	@ (8018974 <RadioRx+0x78>)
 8018934:	f003 f952 	bl	801bbdc <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018938:	4b0f      	ldr	r3, [pc, #60]	@ (8018978 <RadioRx+0x7c>)
 801893a:	2200      	movs	r2, #0
 801893c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801893e:	4b0e      	ldr	r3, [pc, #56]	@ (8018978 <RadioRx+0x7c>)
 8018940:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018944:	2100      	movs	r1, #0
 8018946:	4618      	mov	r0, r3
 8018948:	f002 f8f6 	bl	801ab38 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801894c:	4b0a      	ldr	r3, [pc, #40]	@ (8018978 <RadioRx+0x7c>)
 801894e:	785b      	ldrb	r3, [r3, #1]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d004      	beq.n	801895e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018954:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018958:	f001 fa98 	bl	8019e8c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801895c:	e005      	b.n	801896a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801895e:	4b06      	ldr	r3, [pc, #24]	@ (8018978 <RadioRx+0x7c>)
 8018960:	689b      	ldr	r3, [r3, #8]
 8018962:	019b      	lsls	r3, r3, #6
 8018964:	4618      	mov	r0, r3
 8018966:	f001 fa91 	bl	8019e8c <SUBGRF_SetRx>
}
 801896a:	bf00      	nop
 801896c:	3708      	adds	r7, #8
 801896e:	46bd      	mov	sp, r7
 8018970:	bd80      	pop	{r7, pc}
 8018972:	bf00      	nop
 8018974:	20001cdc 	.word	0x20001cdc
 8018978:	20001c68 	.word	0x20001c68

0801897c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b082      	sub	sp, #8
 8018980:	af00      	add	r7, sp, #0
 8018982:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8018984:	f002 fad1 	bl	801af2a <RFW_Is_Init>
 8018988:	4603      	mov	r3, r0
 801898a:	2b01      	cmp	r3, #1
 801898c:	d102      	bne.n	8018994 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801898e:	f002 faf4 	bl	801af7a <RFW_ReceiveInit>
 8018992:	e007      	b.n	80189a4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018994:	2300      	movs	r3, #0
 8018996:	2200      	movs	r2, #0
 8018998:	f240 2162 	movw	r1, #610	@ 0x262
 801899c:	f240 2062 	movw	r0, #610	@ 0x262
 80189a0:	f001 fc12 	bl	801a1c8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d006      	beq.n	80189b8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80189aa:	6879      	ldr	r1, [r7, #4]
 80189ac:	4811      	ldr	r0, [pc, #68]	@ (80189f4 <RadioRxBoosted+0x78>)
 80189ae:	f003 f9f3 	bl	801bd98 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80189b2:	4810      	ldr	r0, [pc, #64]	@ (80189f4 <RadioRxBoosted+0x78>)
 80189b4:	f003 f912 	bl	801bbdc <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80189b8:	4b0f      	ldr	r3, [pc, #60]	@ (80189f8 <RadioRxBoosted+0x7c>)
 80189ba:	2200      	movs	r2, #0
 80189bc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80189be:	4b0e      	ldr	r3, [pc, #56]	@ (80189f8 <RadioRxBoosted+0x7c>)
 80189c0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80189c4:	2100      	movs	r1, #0
 80189c6:	4618      	mov	r0, r3
 80189c8:	f002 f8b6 	bl	801ab38 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80189cc:	4b0a      	ldr	r3, [pc, #40]	@ (80189f8 <RadioRxBoosted+0x7c>)
 80189ce:	785b      	ldrb	r3, [r3, #1]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d004      	beq.n	80189de <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80189d4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80189d8:	f001 fa78 	bl	8019ecc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80189dc:	e005      	b.n	80189ea <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80189de:	4b06      	ldr	r3, [pc, #24]	@ (80189f8 <RadioRxBoosted+0x7c>)
 80189e0:	689b      	ldr	r3, [r3, #8]
 80189e2:	019b      	lsls	r3, r3, #6
 80189e4:	4618      	mov	r0, r3
 80189e6:	f001 fa71 	bl	8019ecc <SUBGRF_SetRxBoosted>
}
 80189ea:	bf00      	nop
 80189ec:	3708      	adds	r7, #8
 80189ee:	46bd      	mov	sp, r7
 80189f0:	bd80      	pop	{r7, pc}
 80189f2:	bf00      	nop
 80189f4:	20001cdc 	.word	0x20001cdc
 80189f8:	20001c68 	.word	0x20001c68

080189fc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b082      	sub	sp, #8
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
 8018a04:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	005a      	lsls	r2, r3, #1
 8018a0a:	683b      	ldr	r3, [r7, #0]
 8018a0c:	4413      	add	r3, r2
 8018a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8018a40 <RadioSetRxDutyCycle+0x44>)
 8018a10:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018a12:	2300      	movs	r3, #0
 8018a14:	2200      	movs	r2, #0
 8018a16:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018a1a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018a1e:	f001 fbd3 	bl	801a1c8 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018a22:	4b07      	ldr	r3, [pc, #28]	@ (8018a40 <RadioSetRxDutyCycle+0x44>)
 8018a24:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018a28:	2100      	movs	r1, #0
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	f002 f884 	bl	801ab38 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8018a30:	6839      	ldr	r1, [r7, #0]
 8018a32:	6878      	ldr	r0, [r7, #4]
 8018a34:	f001 fa6e 	bl	8019f14 <SUBGRF_SetRxDutyCycle>
}
 8018a38:	bf00      	nop
 8018a3a:	3708      	adds	r7, #8
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	bd80      	pop	{r7, pc}
 8018a40:	20001c68 	.word	0x20001c68

08018a44 <RadioStartCad>:

static void RadioStartCad( void )
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018a48:	4b09      	ldr	r3, [pc, #36]	@ (8018a70 <RadioStartCad+0x2c>)
 8018a4a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018a4e:	2100      	movs	r1, #0
 8018a50:	4618      	mov	r0, r3
 8018a52:	f002 f871 	bl	801ab38 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8018a56:	2300      	movs	r3, #0
 8018a58:	2200      	movs	r2, #0
 8018a5a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8018a5e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8018a62:	f001 fbb1 	bl	801a1c8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8018a66:	f001 fa81 	bl	8019f6c <SUBGRF_SetCad>
}
 8018a6a:	bf00      	nop
 8018a6c:	bd80      	pop	{r7, pc}
 8018a6e:	bf00      	nop
 8018a70:	20001c68 	.word	0x20001c68

08018a74 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b084      	sub	sp, #16
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
 8018a7c:	460b      	mov	r3, r1
 8018a7e:	70fb      	strb	r3, [r7, #3]
 8018a80:	4613      	mov	r3, r2
 8018a82:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8018a84:	883b      	ldrh	r3, [r7, #0]
 8018a86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018a8a:	fb02 f303 	mul.w	r3, r2, r3
 8018a8e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8018a90:	6878      	ldr	r0, [r7, #4]
 8018a92:	f001 fbf5 	bl	801a280 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8018a96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f002 f874 	bl	801ab88 <SUBGRF_SetRfTxPower>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018aa4:	210e      	movs	r1, #14
 8018aa6:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018aaa:	f001 ff37 	bl	801a91c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8018aae:	7afb      	ldrb	r3, [r7, #11]
 8018ab0:	2101      	movs	r1, #1
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	f002 f840 	bl	801ab38 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8018ab8:	f001 fa66 	bl	8019f88 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8018abc:	68f9      	ldr	r1, [r7, #12]
 8018abe:	4805      	ldr	r0, [pc, #20]	@ (8018ad4 <RadioSetTxContinuousWave+0x60>)
 8018ac0:	f003 f96a 	bl	801bd98 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018ac4:	4803      	ldr	r0, [pc, #12]	@ (8018ad4 <RadioSetTxContinuousWave+0x60>)
 8018ac6:	f003 f889 	bl	801bbdc <UTIL_TIMER_Start>
}
 8018aca:	bf00      	nop
 8018acc:	3710      	adds	r7, #16
 8018ace:	46bd      	mov	sp, r7
 8018ad0:	bd80      	pop	{r7, pc}
 8018ad2:	bf00      	nop
 8018ad4:	20001cc4 	.word	0x20001cc4

08018ad8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b082      	sub	sp, #8
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	4603      	mov	r3, r0
 8018ae0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8018ae2:	f001 fe88 	bl	801a7f6 <SUBGRF_GetRssiInst>
 8018ae6:	4603      	mov	r3, r0
}
 8018ae8:	4618      	mov	r0, r3
 8018aea:	3708      	adds	r7, #8
 8018aec:	46bd      	mov	sp, r7
 8018aee:	bd80      	pop	{r7, pc}

08018af0 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b082      	sub	sp, #8
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	4603      	mov	r3, r0
 8018af8:	460a      	mov	r2, r1
 8018afa:	80fb      	strh	r3, [r7, #6]
 8018afc:	4613      	mov	r3, r2
 8018afe:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8018b00:	797a      	ldrb	r2, [r7, #5]
 8018b02:	88fb      	ldrh	r3, [r7, #6]
 8018b04:	4611      	mov	r1, r2
 8018b06:	4618      	mov	r0, r3
 8018b08:	f001 ff08 	bl	801a91c <SUBGRF_WriteRegister>
}
 8018b0c:	bf00      	nop
 8018b0e:	3708      	adds	r7, #8
 8018b10:	46bd      	mov	sp, r7
 8018b12:	bd80      	pop	{r7, pc}

08018b14 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b082      	sub	sp, #8
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8018b1e:	88fb      	ldrh	r3, [r7, #6]
 8018b20:	4618      	mov	r0, r3
 8018b22:	f001 ff1d 	bl	801a960 <SUBGRF_ReadRegister>
 8018b26:	4603      	mov	r3, r0
}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	3708      	adds	r7, #8
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}

08018b30 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b082      	sub	sp, #8
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	4603      	mov	r3, r0
 8018b38:	6039      	str	r1, [r7, #0]
 8018b3a:	80fb      	strh	r3, [r7, #6]
 8018b3c:	4613      	mov	r3, r2
 8018b3e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8018b40:	797b      	ldrb	r3, [r7, #5]
 8018b42:	b29a      	uxth	r2, r3
 8018b44:	88fb      	ldrh	r3, [r7, #6]
 8018b46:	6839      	ldr	r1, [r7, #0]
 8018b48:	4618      	mov	r0, r3
 8018b4a:	f001 ff29 	bl	801a9a0 <SUBGRF_WriteRegisters>
}
 8018b4e:	bf00      	nop
 8018b50:	3708      	adds	r7, #8
 8018b52:	46bd      	mov	sp, r7
 8018b54:	bd80      	pop	{r7, pc}

08018b56 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018b56:	b580      	push	{r7, lr}
 8018b58:	b082      	sub	sp, #8
 8018b5a:	af00      	add	r7, sp, #0
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	6039      	str	r1, [r7, #0]
 8018b60:	80fb      	strh	r3, [r7, #6]
 8018b62:	4613      	mov	r3, r2
 8018b64:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8018b66:	797b      	ldrb	r3, [r7, #5]
 8018b68:	b29a      	uxth	r2, r3
 8018b6a:	88fb      	ldrh	r3, [r7, #6]
 8018b6c:	6839      	ldr	r1, [r7, #0]
 8018b6e:	4618      	mov	r0, r3
 8018b70:	f001 ff38 	bl	801a9e4 <SUBGRF_ReadRegisters>
}
 8018b74:	bf00      	nop
 8018b76:	3708      	adds	r7, #8
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}

08018b7c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b082      	sub	sp, #8
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	4603      	mov	r3, r0
 8018b84:	460a      	mov	r2, r1
 8018b86:	71fb      	strb	r3, [r7, #7]
 8018b88:	4613      	mov	r3, r2
 8018b8a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8018b8c:	79fb      	ldrb	r3, [r7, #7]
 8018b8e:	2b01      	cmp	r3, #1
 8018b90:	d10a      	bne.n	8018ba8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8018b92:	4a0e      	ldr	r2, [pc, #56]	@ (8018bcc <RadioSetMaxPayloadLength+0x50>)
 8018b94:	79bb      	ldrb	r3, [r7, #6]
 8018b96:	7013      	strb	r3, [r2, #0]
 8018b98:	4b0c      	ldr	r3, [pc, #48]	@ (8018bcc <RadioSetMaxPayloadLength+0x50>)
 8018b9a:	781a      	ldrb	r2, [r3, #0]
 8018b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8018bd0 <RadioSetMaxPayloadLength+0x54>)
 8018b9e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018ba0:	480c      	ldr	r0, [pc, #48]	@ (8018bd4 <RadioSetMaxPayloadLength+0x58>)
 8018ba2:	f001 fd75 	bl	801a690 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8018ba6:	e00d      	b.n	8018bc4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8018ba8:	4b09      	ldr	r3, [pc, #36]	@ (8018bd0 <RadioSetMaxPayloadLength+0x54>)
 8018baa:	7d5b      	ldrb	r3, [r3, #21]
 8018bac:	2b01      	cmp	r3, #1
 8018bae:	d109      	bne.n	8018bc4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8018bb0:	4a06      	ldr	r2, [pc, #24]	@ (8018bcc <RadioSetMaxPayloadLength+0x50>)
 8018bb2:	79bb      	ldrb	r3, [r7, #6]
 8018bb4:	7013      	strb	r3, [r2, #0]
 8018bb6:	4b05      	ldr	r3, [pc, #20]	@ (8018bcc <RadioSetMaxPayloadLength+0x50>)
 8018bb8:	781a      	ldrb	r2, [r3, #0]
 8018bba:	4b05      	ldr	r3, [pc, #20]	@ (8018bd0 <RadioSetMaxPayloadLength+0x54>)
 8018bbc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018bbe:	4805      	ldr	r0, [pc, #20]	@ (8018bd4 <RadioSetMaxPayloadLength+0x58>)
 8018bc0:	f001 fd66 	bl	801a690 <SUBGRF_SetPacketParams>
}
 8018bc4:	bf00      	nop
 8018bc6:	3708      	adds	r7, #8
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	bd80      	pop	{r7, pc}
 8018bcc:	20000134 	.word	0x20000134
 8018bd0:	20001c68 	.word	0x20001c68
 8018bd4:	20001c76 	.word	0x20001c76

08018bd8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b082      	sub	sp, #8
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	4603      	mov	r3, r0
 8018be0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8018be2:	4a13      	ldr	r2, [pc, #76]	@ (8018c30 <RadioSetPublicNetwork+0x58>)
 8018be4:	79fb      	ldrb	r3, [r7, #7]
 8018be6:	7313      	strb	r3, [r2, #12]
 8018be8:	4b11      	ldr	r3, [pc, #68]	@ (8018c30 <RadioSetPublicNetwork+0x58>)
 8018bea:	7b1a      	ldrb	r2, [r3, #12]
 8018bec:	4b10      	ldr	r3, [pc, #64]	@ (8018c30 <RadioSetPublicNetwork+0x58>)
 8018bee:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8018bf0:	2001      	movs	r0, #1
 8018bf2:	f7ff f813 	bl	8017c1c <RadioSetModem>
    if( enable == true )
 8018bf6:	79fb      	ldrb	r3, [r7, #7]
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d00a      	beq.n	8018c12 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8018bfc:	2134      	movs	r1, #52	@ 0x34
 8018bfe:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018c02:	f001 fe8b 	bl	801a91c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8018c06:	2144      	movs	r1, #68	@ 0x44
 8018c08:	f240 7041 	movw	r0, #1857	@ 0x741
 8018c0c:	f001 fe86 	bl	801a91c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8018c10:	e009      	b.n	8018c26 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8018c12:	2114      	movs	r1, #20
 8018c14:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018c18:	f001 fe80 	bl	801a91c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8018c1c:	2124      	movs	r1, #36	@ 0x24
 8018c1e:	f240 7041 	movw	r0, #1857	@ 0x741
 8018c22:	f001 fe7b 	bl	801a91c <SUBGRF_WriteRegister>
}
 8018c26:	bf00      	nop
 8018c28:	3708      	adds	r7, #8
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	bd80      	pop	{r7, pc}
 8018c2e:	bf00      	nop
 8018c30:	20001c68 	.word	0x20001c68

08018c34 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8018c38:	f001 ffda 	bl	801abf0 <SUBGRF_GetRadioWakeUpTime>
 8018c3c:	4603      	mov	r3, r0
 8018c3e:	3303      	adds	r3, #3
}
 8018c40:	4618      	mov	r0, r3
 8018c42:	bd80      	pop	{r7, pc}

08018c44 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b082      	sub	sp, #8
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018c4c:	f000 f80e 	bl	8018c6c <RadioOnTxTimeoutProcess>
}
 8018c50:	bf00      	nop
 8018c52:	3708      	adds	r7, #8
 8018c54:	46bd      	mov	sp, r7
 8018c56:	bd80      	pop	{r7, pc}

08018c58 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b082      	sub	sp, #8
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8018c60:	f000 f818 	bl	8018c94 <RadioOnRxTimeoutProcess>
}
 8018c64:	bf00      	nop
 8018c66:	3708      	adds	r7, #8
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	bd80      	pop	{r7, pc}

08018c6c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018c70:	4b07      	ldr	r3, [pc, #28]	@ (8018c90 <RadioOnTxTimeoutProcess+0x24>)
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d008      	beq.n	8018c8a <RadioOnTxTimeoutProcess+0x1e>
 8018c78:	4b05      	ldr	r3, [pc, #20]	@ (8018c90 <RadioOnTxTimeoutProcess+0x24>)
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	685b      	ldr	r3, [r3, #4]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d003      	beq.n	8018c8a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8018c82:	4b03      	ldr	r3, [pc, #12]	@ (8018c90 <RadioOnTxTimeoutProcess+0x24>)
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	685b      	ldr	r3, [r3, #4]
 8018c88:	4798      	blx	r3
    }
}
 8018c8a:	bf00      	nop
 8018c8c:	bd80      	pop	{r7, pc}
 8018c8e:	bf00      	nop
 8018c90:	20001c64 	.word	0x20001c64

08018c94 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018c98:	4b07      	ldr	r3, [pc, #28]	@ (8018cb8 <RadioOnRxTimeoutProcess+0x24>)
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d008      	beq.n	8018cb2 <RadioOnRxTimeoutProcess+0x1e>
 8018ca0:	4b05      	ldr	r3, [pc, #20]	@ (8018cb8 <RadioOnRxTimeoutProcess+0x24>)
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	68db      	ldr	r3, [r3, #12]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d003      	beq.n	8018cb2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8018caa:	4b03      	ldr	r3, [pc, #12]	@ (8018cb8 <RadioOnRxTimeoutProcess+0x24>)
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	68db      	ldr	r3, [r3, #12]
 8018cb0:	4798      	blx	r3
    }
}
 8018cb2:	bf00      	nop
 8018cb4:	bd80      	pop	{r7, pc}
 8018cb6:	bf00      	nop
 8018cb8:	20001c64 	.word	0x20001c64

08018cbc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b082      	sub	sp, #8
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	4603      	mov	r3, r0
 8018cc4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8018cc6:	4a05      	ldr	r2, [pc, #20]	@ (8018cdc <RadioOnDioIrq+0x20>)
 8018cc8:	88fb      	ldrh	r3, [r7, #6]
 8018cca:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8018cce:	f000 f807 	bl	8018ce0 <RadioIrqProcess>
}
 8018cd2:	bf00      	nop
 8018cd4:	3708      	adds	r7, #8
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}
 8018cda:	bf00      	nop
 8018cdc:	20001c68 	.word	0x20001c68

08018ce0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8018ce0:	b5b0      	push	{r4, r5, r7, lr}
 8018ce2:	b082      	sub	sp, #8
 8018ce4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8018cea:	2300      	movs	r3, #0
 8018cec:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8018cee:	4ba8      	ldr	r3, [pc, #672]	@ (8018f90 <RadioIrqProcess+0x2b0>)
 8018cf0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8018cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018cf8:	f000 810d 	beq.w	8018f16 <RadioIrqProcess+0x236>
 8018cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018d00:	f300 81e8 	bgt.w	80190d4 <RadioIrqProcess+0x3f4>
 8018d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018d08:	f000 80f1 	beq.w	8018eee <RadioIrqProcess+0x20e>
 8018d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018d10:	f300 81e0 	bgt.w	80190d4 <RadioIrqProcess+0x3f4>
 8018d14:	2b80      	cmp	r3, #128	@ 0x80
 8018d16:	f000 80d6 	beq.w	8018ec6 <RadioIrqProcess+0x1e6>
 8018d1a:	2b80      	cmp	r3, #128	@ 0x80
 8018d1c:	f300 81da 	bgt.w	80190d4 <RadioIrqProcess+0x3f4>
 8018d20:	2b20      	cmp	r3, #32
 8018d22:	dc49      	bgt.n	8018db8 <RadioIrqProcess+0xd8>
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	f340 81d5 	ble.w	80190d4 <RadioIrqProcess+0x3f4>
 8018d2a:	3b01      	subs	r3, #1
 8018d2c:	2b1f      	cmp	r3, #31
 8018d2e:	f200 81d1 	bhi.w	80190d4 <RadioIrqProcess+0x3f4>
 8018d32:	a201      	add	r2, pc, #4	@ (adr r2, 8018d38 <RadioIrqProcess+0x58>)
 8018d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d38:	08018dc1 	.word	0x08018dc1
 8018d3c:	08018dfb 	.word	0x08018dfb
 8018d40:	080190d5 	.word	0x080190d5
 8018d44:	08018fb1 	.word	0x08018fb1
 8018d48:	080190d5 	.word	0x080190d5
 8018d4c:	080190d5 	.word	0x080190d5
 8018d50:	080190d5 	.word	0x080190d5
 8018d54:	0801902d 	.word	0x0801902d
 8018d58:	080190d5 	.word	0x080190d5
 8018d5c:	080190d5 	.word	0x080190d5
 8018d60:	080190d5 	.word	0x080190d5
 8018d64:	080190d5 	.word	0x080190d5
 8018d68:	080190d5 	.word	0x080190d5
 8018d6c:	080190d5 	.word	0x080190d5
 8018d70:	080190d5 	.word	0x080190d5
 8018d74:	08019049 	.word	0x08019049
 8018d78:	080190d5 	.word	0x080190d5
 8018d7c:	080190d5 	.word	0x080190d5
 8018d80:	080190d5 	.word	0x080190d5
 8018d84:	080190d5 	.word	0x080190d5
 8018d88:	080190d5 	.word	0x080190d5
 8018d8c:	080190d5 	.word	0x080190d5
 8018d90:	080190d5 	.word	0x080190d5
 8018d94:	080190d5 	.word	0x080190d5
 8018d98:	080190d5 	.word	0x080190d5
 8018d9c:	080190d5 	.word	0x080190d5
 8018da0:	080190d5 	.word	0x080190d5
 8018da4:	080190d5 	.word	0x080190d5
 8018da8:	080190d5 	.word	0x080190d5
 8018dac:	080190d5 	.word	0x080190d5
 8018db0:	080190d5 	.word	0x080190d5
 8018db4:	08019057 	.word	0x08019057
 8018db8:	2b40      	cmp	r3, #64	@ 0x40
 8018dba:	f000 816d 	beq.w	8019098 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8018dbe:	e189      	b.n	80190d4 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8018dc0:	4874      	ldr	r0, [pc, #464]	@ (8018f94 <RadioIrqProcess+0x2b4>)
 8018dc2:	f002 ff79 	bl	801bcb8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8018dc6:	2000      	movs	r0, #0
 8018dc8:	f001 f824 	bl	8019e14 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8018dcc:	f002 f8b4 	bl	801af38 <RFW_Is_LongPacketModeEnabled>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	2b01      	cmp	r3, #1
 8018dd4:	d101      	bne.n	8018dda <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8018dd6:	f002 f8d8 	bl	801af8a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8018dda:	4b6f      	ldr	r3, [pc, #444]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	f000 817a 	beq.w	80190d8 <RadioIrqProcess+0x3f8>
 8018de4:	4b6c      	ldr	r3, [pc, #432]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	f000 8174 	beq.w	80190d8 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8018df0:	4b69      	ldr	r3, [pc, #420]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	4798      	blx	r3
        break;
 8018df8:	e16e      	b.n	80190d8 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8018dfa:	4868      	ldr	r0, [pc, #416]	@ (8018f9c <RadioIrqProcess+0x2bc>)
 8018dfc:	f002 ff5c 	bl	801bcb8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018e00:	4b63      	ldr	r3, [pc, #396]	@ (8018f90 <RadioIrqProcess+0x2b0>)
 8018e02:	785b      	ldrb	r3, [r3, #1]
 8018e04:	f083 0301 	eor.w	r3, r3, #1
 8018e08:	b2db      	uxtb	r3, r3
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d014      	beq.n	8018e38 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8018e0e:	2000      	movs	r0, #0
 8018e10:	f001 f800 	bl	8019e14 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8018e14:	2100      	movs	r1, #0
 8018e16:	f640 1002 	movw	r0, #2306	@ 0x902
 8018e1a:	f001 fd7f 	bl	801a91c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018e1e:	f640 1044 	movw	r0, #2372	@ 0x944
 8018e22:	f001 fd9d 	bl	801a960 <SUBGRF_ReadRegister>
 8018e26:	4603      	mov	r3, r0
 8018e28:	f043 0302 	orr.w	r3, r3, #2
 8018e2c:	b2db      	uxtb	r3, r3
 8018e2e:	4619      	mov	r1, r3
 8018e30:	f640 1044 	movw	r0, #2372	@ 0x944
 8018e34:	f001 fd72 	bl	801a91c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018e38:	1dfb      	adds	r3, r7, #7
 8018e3a:	22ff      	movs	r2, #255	@ 0xff
 8018e3c:	4619      	mov	r1, r3
 8018e3e:	4858      	ldr	r0, [pc, #352]	@ (8018fa0 <RadioIrqProcess+0x2c0>)
 8018e40:	f000 feb6 	bl	8019bb0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018e44:	4857      	ldr	r0, [pc, #348]	@ (8018fa4 <RadioIrqProcess+0x2c4>)
 8018e46:	f001 fd17 	bl	801a878 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018e4a:	4b53      	ldr	r3, [pc, #332]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	f000 8144 	beq.w	80190dc <RadioIrqProcess+0x3fc>
 8018e54:	4b50      	ldr	r3, [pc, #320]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	689b      	ldr	r3, [r3, #8]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	f000 813e 	beq.w	80190dc <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8018e60:	4b4b      	ldr	r3, [pc, #300]	@ (8018f90 <RadioIrqProcess+0x2b0>)
 8018e62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018e66:	2b01      	cmp	r3, #1
 8018e68:	d10e      	bne.n	8018e88 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8018e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	689c      	ldr	r4, [r3, #8]
 8018e70:	79fb      	ldrb	r3, [r7, #7]
 8018e72:	4619      	mov	r1, r3
 8018e74:	4b46      	ldr	r3, [pc, #280]	@ (8018f90 <RadioIrqProcess+0x2b0>)
 8018e76:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8018e7a:	461a      	mov	r2, r3
 8018e7c:	4b44      	ldr	r3, [pc, #272]	@ (8018f90 <RadioIrqProcess+0x2b0>)
 8018e7e:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8018e82:	4847      	ldr	r0, [pc, #284]	@ (8018fa0 <RadioIrqProcess+0x2c0>)
 8018e84:	47a0      	blx	r4
                break;
 8018e86:	e01d      	b.n	8018ec4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8018e88:	4b41      	ldr	r3, [pc, #260]	@ (8018f90 <RadioIrqProcess+0x2b0>)
 8018e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018e8c:	463a      	mov	r2, r7
 8018e8e:	4611      	mov	r1, r2
 8018e90:	4618      	mov	r0, r3
 8018e92:	f001 ff9f 	bl	801add4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8018e96:	4b40      	ldr	r3, [pc, #256]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	689c      	ldr	r4, [r3, #8]
 8018e9c:	79fb      	ldrb	r3, [r7, #7]
 8018e9e:	4619      	mov	r1, r3
 8018ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8018f90 <RadioIrqProcess+0x2b0>)
 8018ea2:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	683b      	ldr	r3, [r7, #0]
 8018eaa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8018eae:	4a3e      	ldr	r2, [pc, #248]	@ (8018fa8 <RadioIrqProcess+0x2c8>)
 8018eb0:	fb82 5203 	smull	r5, r2, r2, r3
 8018eb4:	1192      	asrs	r2, r2, #6
 8018eb6:	17db      	asrs	r3, r3, #31
 8018eb8:	1ad3      	subs	r3, r2, r3
 8018eba:	b25b      	sxtb	r3, r3
 8018ebc:	4602      	mov	r2, r0
 8018ebe:	4838      	ldr	r0, [pc, #224]	@ (8018fa0 <RadioIrqProcess+0x2c0>)
 8018ec0:	47a0      	blx	r4
                break;
 8018ec2:	bf00      	nop
        break;
 8018ec4:	e10a      	b.n	80190dc <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8018ec6:	2000      	movs	r0, #0
 8018ec8:	f000 ffa4 	bl	8019e14 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018ecc:	4b32      	ldr	r3, [pc, #200]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	f000 8105 	beq.w	80190e0 <RadioIrqProcess+0x400>
 8018ed6:	4b30      	ldr	r3, [pc, #192]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	699b      	ldr	r3, [r3, #24]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	f000 80ff 	beq.w	80190e0 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8018ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	699b      	ldr	r3, [r3, #24]
 8018ee8:	2000      	movs	r0, #0
 8018eea:	4798      	blx	r3
        break;
 8018eec:	e0f8      	b.n	80190e0 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8018eee:	2000      	movs	r0, #0
 8018ef0:	f000 ff90 	bl	8019e14 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018ef4:	4b28      	ldr	r3, [pc, #160]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	f000 80f3 	beq.w	80190e4 <RadioIrqProcess+0x404>
 8018efe:	4b26      	ldr	r3, [pc, #152]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	699b      	ldr	r3, [r3, #24]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	f000 80ed 	beq.w	80190e4 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8018f0a:	4b23      	ldr	r3, [pc, #140]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	699b      	ldr	r3, [r3, #24]
 8018f10:	2001      	movs	r0, #1
 8018f12:	4798      	blx	r3
        break;
 8018f14:	e0e6      	b.n	80190e4 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8018f16:	4b25      	ldr	r3, [pc, #148]	@ (8018fac <RadioIrqProcess+0x2cc>)
 8018f18:	2201      	movs	r2, #1
 8018f1a:	2100      	movs	r1, #0
 8018f1c:	2002      	movs	r0, #2
 8018f1e:	f003 f8d5 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8018f22:	f000 fe2b 	bl	8019b7c <SUBGRF_GetOperatingMode>
 8018f26:	4603      	mov	r3, r0
 8018f28:	2b04      	cmp	r3, #4
 8018f2a:	d115      	bne.n	8018f58 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8018f2c:	4819      	ldr	r0, [pc, #100]	@ (8018f94 <RadioIrqProcess+0x2b4>)
 8018f2e:	f002 fec3 	bl	801bcb8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018f32:	2000      	movs	r0, #0
 8018f34:	f000 ff6e 	bl	8019e14 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018f38:	4b17      	ldr	r3, [pc, #92]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	f000 80d3 	beq.w	80190e8 <RadioIrqProcess+0x408>
 8018f42:	4b15      	ldr	r3, [pc, #84]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	685b      	ldr	r3, [r3, #4]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	f000 80cd 	beq.w	80190e8 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8018f4e:	4b12      	ldr	r3, [pc, #72]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	685b      	ldr	r3, [r3, #4]
 8018f54:	4798      	blx	r3
        break;
 8018f56:	e0c7      	b.n	80190e8 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018f58:	f000 fe10 	bl	8019b7c <SUBGRF_GetOperatingMode>
 8018f5c:	4603      	mov	r3, r0
 8018f5e:	2b05      	cmp	r3, #5
 8018f60:	f040 80c2 	bne.w	80190e8 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8018f64:	480d      	ldr	r0, [pc, #52]	@ (8018f9c <RadioIrqProcess+0x2bc>)
 8018f66:	f002 fea7 	bl	801bcb8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018f6a:	2000      	movs	r0, #0
 8018f6c:	f000 ff52 	bl	8019e14 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018f70:	4b09      	ldr	r3, [pc, #36]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	f000 80b7 	beq.w	80190e8 <RadioIrqProcess+0x408>
 8018f7a:	4b07      	ldr	r3, [pc, #28]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	68db      	ldr	r3, [r3, #12]
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	f000 80b1 	beq.w	80190e8 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8018f86:	4b04      	ldr	r3, [pc, #16]	@ (8018f98 <RadioIrqProcess+0x2b8>)
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	68db      	ldr	r3, [r3, #12]
 8018f8c:	4798      	blx	r3
        break;
 8018f8e:	e0ab      	b.n	80190e8 <RadioIrqProcess+0x408>
 8018f90:	20001c68 	.word	0x20001c68
 8018f94:	20001cc4 	.word	0x20001cc4
 8018f98:	20001c64 	.word	0x20001c64
 8018f9c:	20001cdc 	.word	0x20001cdc
 8018fa0:	20001b64 	.word	0x20001b64
 8018fa4:	20001c8c 	.word	0x20001c8c
 8018fa8:	10624dd3 	.word	0x10624dd3
 8018fac:	0801cf64 	.word	0x0801cf64
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8018fb0:	4b54      	ldr	r3, [pc, #336]	@ (8019104 <RadioIrqProcess+0x424>)
 8018fb2:	2201      	movs	r2, #1
 8018fb4:	2100      	movs	r1, #0
 8018fb6:	2002      	movs	r0, #2
 8018fb8:	f003 f888 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018fbc:	4b52      	ldr	r3, [pc, #328]	@ (8019108 <RadioIrqProcess+0x428>)
 8018fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	f000 8093 	beq.w	80190ec <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8018fc6:	4a51      	ldr	r2, [pc, #324]	@ (801910c <RadioIrqProcess+0x42c>)
 8018fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8019108 <RadioIrqProcess+0x428>)
 8018fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018fcc:	0c1b      	lsrs	r3, r3, #16
 8018fce:	b2db      	uxtb	r3, r3
 8018fd0:	4619      	mov	r1, r3
 8018fd2:	f640 1003 	movw	r0, #2307	@ 0x903
 8018fd6:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8018fd8:	4a4c      	ldr	r2, [pc, #304]	@ (801910c <RadioIrqProcess+0x42c>)
 8018fda:	4b4b      	ldr	r3, [pc, #300]	@ (8019108 <RadioIrqProcess+0x428>)
 8018fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018fde:	0a1b      	lsrs	r3, r3, #8
 8018fe0:	b2db      	uxtb	r3, r3
 8018fe2:	4619      	mov	r1, r3
 8018fe4:	f640 1004 	movw	r0, #2308	@ 0x904
 8018fe8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8018fea:	4a48      	ldr	r2, [pc, #288]	@ (801910c <RadioIrqProcess+0x42c>)
 8018fec:	4b46      	ldr	r3, [pc, #280]	@ (8019108 <RadioIrqProcess+0x428>)
 8018fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018ff0:	b2db      	uxtb	r3, r3
 8018ff2:	4619      	mov	r1, r3
 8018ff4:	f640 1005 	movw	r0, #2309	@ 0x905
 8018ff8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8018ffa:	4c44      	ldr	r4, [pc, #272]	@ (801910c <RadioIrqProcess+0x42c>)
 8018ffc:	4b44      	ldr	r3, [pc, #272]	@ (8019110 <RadioIrqProcess+0x430>)
 8018ffe:	f640 1002 	movw	r0, #2306	@ 0x902
 8019002:	4798      	blx	r3
 8019004:	4603      	mov	r3, r0
 8019006:	f043 0301 	orr.w	r3, r3, #1
 801900a:	b2db      	uxtb	r3, r3
 801900c:	4619      	mov	r1, r3
 801900e:	f640 1002 	movw	r0, #2306	@ 0x902
 8019012:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8019014:	4b3c      	ldr	r3, [pc, #240]	@ (8019108 <RadioIrqProcess+0x428>)
 8019016:	2200      	movs	r2, #0
 8019018:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801901a:	2300      	movs	r3, #0
 801901c:	2200      	movs	r2, #0
 801901e:	f240 2162 	movw	r1, #610	@ 0x262
 8019022:	f240 2062 	movw	r0, #610	@ 0x262
 8019026:	f001 f8cf 	bl	801a1c8 <SUBGRF_SetDioIrqParams>
        break;
 801902a:	e05f      	b.n	80190ec <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801902c:	4b39      	ldr	r3, [pc, #228]	@ (8019114 <RadioIrqProcess+0x434>)
 801902e:	2201      	movs	r2, #1
 8019030:	2100      	movs	r1, #0
 8019032:	2002      	movs	r0, #2
 8019034:	f003 f84a 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8019038:	f001 ff77 	bl	801af2a <RFW_Is_Init>
 801903c:	4603      	mov	r3, r0
 801903e:	2b01      	cmp	r3, #1
 8019040:	d156      	bne.n	80190f0 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8019042:	f001 ffa8 	bl	801af96 <RFW_ReceivePayload>
        break;
 8019046:	e053      	b.n	80190f0 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8019048:	4b33      	ldr	r3, [pc, #204]	@ (8019118 <RadioIrqProcess+0x438>)
 801904a:	2201      	movs	r2, #1
 801904c:	2100      	movs	r1, #0
 801904e:	2002      	movs	r0, #2
 8019050:	f003 f83c 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019054:	e051      	b.n	80190fa <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8019056:	4831      	ldr	r0, [pc, #196]	@ (801911c <RadioIrqProcess+0x43c>)
 8019058:	f002 fe2e 	bl	801bcb8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801905c:	4b2a      	ldr	r3, [pc, #168]	@ (8019108 <RadioIrqProcess+0x428>)
 801905e:	785b      	ldrb	r3, [r3, #1]
 8019060:	f083 0301 	eor.w	r3, r3, #1
 8019064:	b2db      	uxtb	r3, r3
 8019066:	2b00      	cmp	r3, #0
 8019068:	d002      	beq.n	8019070 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801906a:	2000      	movs	r0, #0
 801906c:	f000 fed2 	bl	8019e14 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019070:	4b2b      	ldr	r3, [pc, #172]	@ (8019120 <RadioIrqProcess+0x440>)
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	2b00      	cmp	r3, #0
 8019076:	d03d      	beq.n	80190f4 <RadioIrqProcess+0x414>
 8019078:	4b29      	ldr	r3, [pc, #164]	@ (8019120 <RadioIrqProcess+0x440>)
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	68db      	ldr	r3, [r3, #12]
 801907e:	2b00      	cmp	r3, #0
 8019080:	d038      	beq.n	80190f4 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8019082:	4b27      	ldr	r3, [pc, #156]	@ (8019120 <RadioIrqProcess+0x440>)
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	68db      	ldr	r3, [r3, #12]
 8019088:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801908a:	4b26      	ldr	r3, [pc, #152]	@ (8019124 <RadioIrqProcess+0x444>)
 801908c:	2201      	movs	r2, #1
 801908e:	2100      	movs	r1, #0
 8019090:	2002      	movs	r0, #2
 8019092:	f003 f81b 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019096:	e02d      	b.n	80190f4 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8019098:	4b23      	ldr	r3, [pc, #140]	@ (8019128 <RadioIrqProcess+0x448>)
 801909a:	2201      	movs	r2, #1
 801909c:	2100      	movs	r1, #0
 801909e:	2002      	movs	r0, #2
 80190a0:	f003 f814 	bl	801c0cc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80190a4:	4b18      	ldr	r3, [pc, #96]	@ (8019108 <RadioIrqProcess+0x428>)
 80190a6:	785b      	ldrb	r3, [r3, #1]
 80190a8:	f083 0301 	eor.w	r3, r3, #1
 80190ac:	b2db      	uxtb	r3, r3
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d002      	beq.n	80190b8 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 80190b2:	2000      	movs	r0, #0
 80190b4:	f000 feae 	bl	8019e14 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80190b8:	4b19      	ldr	r3, [pc, #100]	@ (8019120 <RadioIrqProcess+0x440>)
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d01b      	beq.n	80190f8 <RadioIrqProcess+0x418>
 80190c0:	4b17      	ldr	r3, [pc, #92]	@ (8019120 <RadioIrqProcess+0x440>)
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	691b      	ldr	r3, [r3, #16]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d016      	beq.n	80190f8 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 80190ca:	4b15      	ldr	r3, [pc, #84]	@ (8019120 <RadioIrqProcess+0x440>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	691b      	ldr	r3, [r3, #16]
 80190d0:	4798      	blx	r3
        break;
 80190d2:	e011      	b.n	80190f8 <RadioIrqProcess+0x418>
        break;
 80190d4:	bf00      	nop
 80190d6:	e010      	b.n	80190fa <RadioIrqProcess+0x41a>
        break;
 80190d8:	bf00      	nop
 80190da:	e00e      	b.n	80190fa <RadioIrqProcess+0x41a>
        break;
 80190dc:	bf00      	nop
 80190de:	e00c      	b.n	80190fa <RadioIrqProcess+0x41a>
        break;
 80190e0:	bf00      	nop
 80190e2:	e00a      	b.n	80190fa <RadioIrqProcess+0x41a>
        break;
 80190e4:	bf00      	nop
 80190e6:	e008      	b.n	80190fa <RadioIrqProcess+0x41a>
        break;
 80190e8:	bf00      	nop
 80190ea:	e006      	b.n	80190fa <RadioIrqProcess+0x41a>
        break;
 80190ec:	bf00      	nop
 80190ee:	e004      	b.n	80190fa <RadioIrqProcess+0x41a>
        break;
 80190f0:	bf00      	nop
 80190f2:	e002      	b.n	80190fa <RadioIrqProcess+0x41a>
        break;
 80190f4:	bf00      	nop
 80190f6:	e000      	b.n	80190fa <RadioIrqProcess+0x41a>
        break;
 80190f8:	bf00      	nop
    }
}
 80190fa:	bf00      	nop
 80190fc:	3708      	adds	r7, #8
 80190fe:	46bd      	mov	sp, r7
 8019100:	bdb0      	pop	{r4, r5, r7, pc}
 8019102:	bf00      	nop
 8019104:	0801cf78 	.word	0x0801cf78
 8019108:	20001c68 	.word	0x20001c68
 801910c:	08018af1 	.word	0x08018af1
 8019110:	08018b15 	.word	0x08018b15
 8019114:	0801cf84 	.word	0x0801cf84
 8019118:	0801cf90 	.word	0x0801cf90
 801911c:	20001cdc 	.word	0x20001cdc
 8019120:	20001c64 	.word	0x20001c64
 8019124:	0801cf9c 	.word	0x0801cf9c
 8019128:	0801cfa8 	.word	0x0801cfa8

0801912c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801912c:	b580      	push	{r7, lr}
 801912e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019130:	4b09      	ldr	r3, [pc, #36]	@ (8019158 <RadioTxPrbs+0x2c>)
 8019132:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019136:	2101      	movs	r1, #1
 8019138:	4618      	mov	r0, r3
 801913a:	f001 fcfd 	bl	801ab38 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801913e:	4b07      	ldr	r3, [pc, #28]	@ (801915c <RadioTxPrbs+0x30>)
 8019140:	212d      	movs	r1, #45	@ 0x2d
 8019142:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019146:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019148:	f000 ff27 	bl	8019f9a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801914c:	4804      	ldr	r0, [pc, #16]	@ (8019160 <RadioTxPrbs+0x34>)
 801914e:	f000 fe7d 	bl	8019e4c <SUBGRF_SetTx>
}
 8019152:	bf00      	nop
 8019154:	bd80      	pop	{r7, pc}
 8019156:	bf00      	nop
 8019158:	20001c68 	.word	0x20001c68
 801915c:	08018af1 	.word	0x08018af1
 8019160:	000fffff 	.word	0x000fffff

08019164 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019164:	b580      	push	{r7, lr}
 8019166:	b084      	sub	sp, #16
 8019168:	af00      	add	r7, sp, #0
 801916a:	4603      	mov	r3, r0
 801916c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801916e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019172:	4618      	mov	r0, r3
 8019174:	f001 fd08 	bl	801ab88 <SUBGRF_SetRfTxPower>
 8019178:	4603      	mov	r3, r0
 801917a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801917c:	210e      	movs	r1, #14
 801917e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019182:	f001 fbcb 	bl	801a91c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019186:	7bfb      	ldrb	r3, [r7, #15]
 8019188:	2101      	movs	r1, #1
 801918a:	4618      	mov	r0, r3
 801918c:	f001 fcd4 	bl	801ab38 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019190:	f000 fefa 	bl	8019f88 <SUBGRF_SetTxContinuousWave>
}
 8019194:	bf00      	nop
 8019196:	3710      	adds	r7, #16
 8019198:	46bd      	mov	sp, r7
 801919a:	bd80      	pop	{r7, pc}

0801919c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801919c:	b480      	push	{r7}
 801919e:	b089      	sub	sp, #36	@ 0x24
 80191a0:	af00      	add	r7, sp, #0
 80191a2:	60f8      	str	r0, [r7, #12]
 80191a4:	60b9      	str	r1, [r7, #8]
 80191a6:	4613      	mov	r3, r2
 80191a8:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80191aa:	2300      	movs	r3, #0
 80191ac:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80191ae:	2300      	movs	r3, #0
 80191b0:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80191b2:	2300      	movs	r3, #0
 80191b4:	61bb      	str	r3, [r7, #24]
 80191b6:	e011      	b.n	80191dc <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80191b8:	69bb      	ldr	r3, [r7, #24]
 80191ba:	68ba      	ldr	r2, [r7, #8]
 80191bc:	4413      	add	r3, r2
 80191be:	781a      	ldrb	r2, [r3, #0]
 80191c0:	69bb      	ldr	r3, [r7, #24]
 80191c2:	68b9      	ldr	r1, [r7, #8]
 80191c4:	440b      	add	r3, r1
 80191c6:	43d2      	mvns	r2, r2
 80191c8:	b2d2      	uxtb	r2, r2
 80191ca:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80191cc:	69bb      	ldr	r3, [r7, #24]
 80191ce:	68fa      	ldr	r2, [r7, #12]
 80191d0:	4413      	add	r3, r2
 80191d2:	2200      	movs	r2, #0
 80191d4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80191d6:	69bb      	ldr	r3, [r7, #24]
 80191d8:	3301      	adds	r3, #1
 80191da:	61bb      	str	r3, [r7, #24]
 80191dc:	79fb      	ldrb	r3, [r7, #7]
 80191de:	69ba      	ldr	r2, [r7, #24]
 80191e0:	429a      	cmp	r2, r3
 80191e2:	dbe9      	blt.n	80191b8 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80191e4:	2300      	movs	r3, #0
 80191e6:	61bb      	str	r3, [r7, #24]
 80191e8:	e049      	b.n	801927e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80191ea:	69bb      	ldr	r3, [r7, #24]
 80191ec:	425a      	negs	r2, r3
 80191ee:	f003 0307 	and.w	r3, r3, #7
 80191f2:	f002 0207 	and.w	r2, r2, #7
 80191f6:	bf58      	it	pl
 80191f8:	4253      	negpl	r3, r2
 80191fa:	b2db      	uxtb	r3, r3
 80191fc:	f1c3 0307 	rsb	r3, r3, #7
 8019200:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019202:	69bb      	ldr	r3, [r7, #24]
 8019204:	2b00      	cmp	r3, #0
 8019206:	da00      	bge.n	801920a <payload_integration+0x6e>
 8019208:	3307      	adds	r3, #7
 801920a:	10db      	asrs	r3, r3, #3
 801920c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801920e:	69bb      	ldr	r3, [r7, #24]
 8019210:	3301      	adds	r3, #1
 8019212:	425a      	negs	r2, r3
 8019214:	f003 0307 	and.w	r3, r3, #7
 8019218:	f002 0207 	and.w	r2, r2, #7
 801921c:	bf58      	it	pl
 801921e:	4253      	negpl	r3, r2
 8019220:	b2db      	uxtb	r3, r3
 8019222:	f1c3 0307 	rsb	r3, r3, #7
 8019226:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8019228:	69bb      	ldr	r3, [r7, #24]
 801922a:	3301      	adds	r3, #1
 801922c:	2b00      	cmp	r3, #0
 801922e:	da00      	bge.n	8019232 <payload_integration+0x96>
 8019230:	3307      	adds	r3, #7
 8019232:	10db      	asrs	r3, r3, #3
 8019234:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8019236:	7dbb      	ldrb	r3, [r7, #22]
 8019238:	68ba      	ldr	r2, [r7, #8]
 801923a:	4413      	add	r3, r2
 801923c:	781b      	ldrb	r3, [r3, #0]
 801923e:	461a      	mov	r2, r3
 8019240:	7dfb      	ldrb	r3, [r7, #23]
 8019242:	fa42 f303 	asr.w	r3, r2, r3
 8019246:	b2db      	uxtb	r3, r3
 8019248:	f003 0301 	and.w	r3, r3, #1
 801924c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801924e:	7ffa      	ldrb	r2, [r7, #31]
 8019250:	7cfb      	ldrb	r3, [r7, #19]
 8019252:	4053      	eors	r3, r2
 8019254:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8019256:	7d3b      	ldrb	r3, [r7, #20]
 8019258:	68fa      	ldr	r2, [r7, #12]
 801925a:	4413      	add	r3, r2
 801925c:	781b      	ldrb	r3, [r3, #0]
 801925e:	b25a      	sxtb	r2, r3
 8019260:	7ff9      	ldrb	r1, [r7, #31]
 8019262:	7d7b      	ldrb	r3, [r7, #21]
 8019264:	fa01 f303 	lsl.w	r3, r1, r3
 8019268:	b25b      	sxtb	r3, r3
 801926a:	4313      	orrs	r3, r2
 801926c:	b259      	sxtb	r1, r3
 801926e:	7d3b      	ldrb	r3, [r7, #20]
 8019270:	68fa      	ldr	r2, [r7, #12]
 8019272:	4413      	add	r3, r2
 8019274:	b2ca      	uxtb	r2, r1
 8019276:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8019278:	69bb      	ldr	r3, [r7, #24]
 801927a:	3301      	adds	r3, #1
 801927c:	61bb      	str	r3, [r7, #24]
 801927e:	79fb      	ldrb	r3, [r7, #7]
 8019280:	00db      	lsls	r3, r3, #3
 8019282:	69ba      	ldr	r2, [r7, #24]
 8019284:	429a      	cmp	r2, r3
 8019286:	dbb0      	blt.n	80191ea <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019288:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801928c:	01db      	lsls	r3, r3, #7
 801928e:	b25a      	sxtb	r2, r3
 8019290:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019294:	019b      	lsls	r3, r3, #6
 8019296:	b25b      	sxtb	r3, r3
 8019298:	4313      	orrs	r3, r2
 801929a:	b25b      	sxtb	r3, r3
 801929c:	7ffa      	ldrb	r2, [r7, #31]
 801929e:	2a00      	cmp	r2, #0
 80192a0:	d101      	bne.n	80192a6 <payload_integration+0x10a>
 80192a2:	2220      	movs	r2, #32
 80192a4:	e000      	b.n	80192a8 <payload_integration+0x10c>
 80192a6:	2200      	movs	r2, #0
 80192a8:	4313      	orrs	r3, r2
 80192aa:	b259      	sxtb	r1, r3
 80192ac:	79fb      	ldrb	r3, [r7, #7]
 80192ae:	68fa      	ldr	r2, [r7, #12]
 80192b0:	4413      	add	r3, r2
 80192b2:	b2ca      	uxtb	r2, r1
 80192b4:	701a      	strb	r2, [r3, #0]
}
 80192b6:	bf00      	nop
 80192b8:	3724      	adds	r7, #36	@ 0x24
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bc80      	pop	{r7}
 80192be:	4770      	bx	lr

080192c0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b08c      	sub	sp, #48	@ 0x30
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	60b9      	str	r1, [r7, #8]
 80192c8:	607a      	str	r2, [r7, #4]
 80192ca:	603b      	str	r3, [r7, #0]
 80192cc:	4603      	mov	r3, r0
 80192ce:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80192d0:	2300      	movs	r3, #0
 80192d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80192d4:	f107 0320 	add.w	r3, r7, #32
 80192d8:	2200      	movs	r2, #0
 80192da:	601a      	str	r2, [r3, #0]
 80192dc:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80192de:	f001 fe1e 	bl	801af1e <RFW_DeInit>

    if( rxContinuous != 0 )
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d001      	beq.n	80192ec <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 80192e8:	2300      	movs	r3, #0
 80192ea:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	bf14      	ite	ne
 80192f2:	2301      	movne	r3, #1
 80192f4:	2300      	moveq	r3, #0
 80192f6:	b2da      	uxtb	r2, r3
 80192f8:	4ba3      	ldr	r3, [pc, #652]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 80192fa:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80192fc:	7bfb      	ldrb	r3, [r7, #15]
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d003      	beq.n	801930a <RadioSetRxGenericConfig+0x4a>
 8019302:	2b01      	cmp	r3, #1
 8019304:	f000 80dc 	beq.w	80194c0 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019308:	e195      	b.n	8019636 <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801930a:	68bb      	ldr	r3, [r7, #8]
 801930c:	689b      	ldr	r3, [r3, #8]
 801930e:	2b00      	cmp	r3, #0
 8019310:	d003      	beq.n	801931a <RadioSetRxGenericConfig+0x5a>
 8019312:	68bb      	ldr	r3, [r7, #8]
 8019314:	68db      	ldr	r3, [r3, #12]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d102      	bne.n	8019320 <RadioSetRxGenericConfig+0x60>
            return -1;
 801931a:	f04f 33ff 	mov.w	r3, #4294967295
 801931e:	e18b      	b.n	8019638 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8019320:	68bb      	ldr	r3, [r7, #8]
 8019322:	7f9b      	ldrb	r3, [r3, #30]
 8019324:	2b08      	cmp	r3, #8
 8019326:	d902      	bls.n	801932e <RadioSetRxGenericConfig+0x6e>
            return -1;
 8019328:	f04f 33ff 	mov.w	r3, #4294967295
 801932c:	e184      	b.n	8019638 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801932e:	68bb      	ldr	r3, [r7, #8]
 8019330:	6919      	ldr	r1, [r3, #16]
 8019332:	68bb      	ldr	r3, [r7, #8]
 8019334:	7f9b      	ldrb	r3, [r3, #30]
 8019336:	461a      	mov	r2, r3
 8019338:	f107 0320 	add.w	r3, r7, #32
 801933c:	4618      	mov	r0, r3
 801933e:	f001 fee1 	bl	801b104 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019342:	68bb      	ldr	r3, [r7, #8]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	2b00      	cmp	r3, #0
 8019348:	bf14      	ite	ne
 801934a:	2301      	movne	r3, #1
 801934c:	2300      	moveq	r3, #0
 801934e:	b2db      	uxtb	r3, r3
 8019350:	4618      	mov	r0, r3
 8019352:	f000 fe2b 	bl	8019fac <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019356:	4b8c      	ldr	r3, [pc, #560]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019358:	2200      	movs	r2, #0
 801935a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801935e:	68bb      	ldr	r3, [r7, #8]
 8019360:	689b      	ldr	r3, [r3, #8]
 8019362:	4a89      	ldr	r2, [pc, #548]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019364:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019366:	68bb      	ldr	r3, [r7, #8]
 8019368:	f893 2020 	ldrb.w	r2, [r3, #32]
 801936c:	4b86      	ldr	r3, [pc, #536]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 801936e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019372:	68bb      	ldr	r3, [r7, #8]
 8019374:	685b      	ldr	r3, [r3, #4]
 8019376:	4618      	mov	r0, r3
 8019378:	f001 fd04 	bl	801ad84 <SUBGRF_GetFskBandwidthRegValue>
 801937c:	4603      	mov	r3, r0
 801937e:	461a      	mov	r2, r3
 8019380:	4b81      	ldr	r3, [pc, #516]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019382:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019386:	4b80      	ldr	r3, [pc, #512]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019388:	2200      	movs	r2, #0
 801938a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801938c:	68bb      	ldr	r3, [r7, #8]
 801938e:	68db      	ldr	r3, [r3, #12]
 8019390:	b29b      	uxth	r3, r3
 8019392:	00db      	lsls	r3, r3, #3
 8019394:	b29a      	uxth	r2, r3
 8019396:	4b7c      	ldr	r3, [pc, #496]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019398:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801939a:	68bb      	ldr	r3, [r7, #8]
 801939c:	7fda      	ldrb	r2, [r3, #31]
 801939e:	4b7a      	ldr	r3, [pc, #488]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 80193a0:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80193a2:	68bb      	ldr	r3, [r7, #8]
 80193a4:	7f9b      	ldrb	r3, [r3, #30]
 80193a6:	00db      	lsls	r3, r3, #3
 80193a8:	b2da      	uxtb	r2, r3
 80193aa:	4b77      	ldr	r3, [pc, #476]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 80193ac:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80193ae:	68bb      	ldr	r3, [r7, #8]
 80193b0:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80193b4:	4b74      	ldr	r3, [pc, #464]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 80193b6:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80193b8:	68bb      	ldr	r3, [r7, #8]
 80193ba:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d105      	bne.n	80193ce <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80193c2:	68bb      	ldr	r3, [r7, #8]
 80193c4:	695b      	ldr	r3, [r3, #20]
 80193c6:	b2da      	uxtb	r2, r3
 80193c8:	4b6f      	ldr	r3, [pc, #444]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 80193ca:	759a      	strb	r2, [r3, #22]
 80193cc:	e00b      	b.n	80193e6 <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80193ce:	68bb      	ldr	r3, [r7, #8]
 80193d0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80193d4:	2b02      	cmp	r3, #2
 80193d6:	d103      	bne.n	80193e0 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80193d8:	4b6b      	ldr	r3, [pc, #428]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 80193da:	22ff      	movs	r2, #255	@ 0xff
 80193dc:	759a      	strb	r2, [r3, #22]
 80193de:	e002      	b.n	80193e6 <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80193e0:	4b69      	ldr	r3, [pc, #420]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 80193e2:	22ff      	movs	r2, #255	@ 0xff
 80193e4:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80193e6:	68bb      	ldr	r3, [r7, #8]
 80193e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80193ec:	2b02      	cmp	r3, #2
 80193ee:	d004      	beq.n	80193fa <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80193f6:	2b02      	cmp	r3, #2
 80193f8:	d12d      	bne.n	8019456 <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80193fa:	68bb      	ldr	r3, [r7, #8]
 80193fc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019400:	2bf1      	cmp	r3, #241	@ 0xf1
 8019402:	d00c      	beq.n	801941e <RadioSetRxGenericConfig+0x15e>
 8019404:	68bb      	ldr	r3, [r7, #8]
 8019406:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801940a:	2bf2      	cmp	r3, #242	@ 0xf2
 801940c:	d007      	beq.n	801941e <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801940e:	68bb      	ldr	r3, [r7, #8]
 8019410:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019414:	2b01      	cmp	r3, #1
 8019416:	d002      	beq.n	801941e <RadioSetRxGenericConfig+0x15e>
                return -1;
 8019418:	f04f 33ff 	mov.w	r3, #4294967295
 801941c:	e10c      	b.n	8019638 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 801941e:	2300      	movs	r3, #0
 8019420:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8019422:	68bb      	ldr	r3, [r7, #8]
 8019424:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019426:	4b59      	ldr	r3, [pc, #356]	@ (801958c <RadioSetRxGenericConfig+0x2cc>)
 8019428:	6819      	ldr	r1, [r3, #0]
 801942a:	f107 0314 	add.w	r3, r7, #20
 801942e:	4a58      	ldr	r2, [pc, #352]	@ (8019590 <RadioSetRxGenericConfig+0x2d0>)
 8019430:	4618      	mov	r0, r3
 8019432:	f001 fd67 	bl	801af04 <RFW_Init>
 8019436:	4603      	mov	r3, r0
 8019438:	2b00      	cmp	r3, #0
 801943a:	d002      	beq.n	8019442 <RadioSetRxGenericConfig+0x182>
                return -1;
 801943c:	f04f 33ff 	mov.w	r3, #4294967295
 8019440:	e0fa      	b.n	8019638 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019442:	4b51      	ldr	r3, [pc, #324]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019444:	2200      	movs	r2, #0
 8019446:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019448:	4b4f      	ldr	r3, [pc, #316]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 801944a:	2201      	movs	r2, #1
 801944c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801944e:	4b4e      	ldr	r3, [pc, #312]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019450:	2200      	movs	r2, #0
 8019452:	755a      	strb	r2, [r3, #21]
        {
 8019454:	e00e      	b.n	8019474 <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019456:	68bb      	ldr	r3, [r7, #8]
 8019458:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801945c:	4b4a      	ldr	r3, [pc, #296]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 801945e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019460:	68bb      	ldr	r3, [r7, #8]
 8019462:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8019466:	4b48      	ldr	r3, [pc, #288]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019468:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801946a:	68bb      	ldr	r3, [r7, #8]
 801946c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8019470:	4b45      	ldr	r3, [pc, #276]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019472:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019474:	f7ff fa3b 	bl	80188ee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019478:	2000      	movs	r0, #0
 801947a:	f7fe fbcf 	bl	8017c1c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801947e:	4845      	ldr	r0, [pc, #276]	@ (8019594 <RadioSetRxGenericConfig+0x2d4>)
 8019480:	f001 f838 	bl	801a4f4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019484:	4844      	ldr	r0, [pc, #272]	@ (8019598 <RadioSetRxGenericConfig+0x2d8>)
 8019486:	f001 f903 	bl	801a690 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801948a:	f107 0320 	add.w	r3, r7, #32
 801948e:	4618      	mov	r0, r3
 8019490:	f000 fbc3 	bl	8019c1a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019494:	68bb      	ldr	r3, [r7, #8]
 8019496:	8b9b      	ldrh	r3, [r3, #28]
 8019498:	4618      	mov	r0, r3
 801949a:	f000 fc0d 	bl	8019cb8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801949e:	68bb      	ldr	r3, [r7, #8]
 80194a0:	8b1b      	ldrh	r3, [r3, #24]
 80194a2:	4618      	mov	r0, r3
 80194a4:	f000 fbe8 	bl	8019c78 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80194a8:	683b      	ldr	r3, [r7, #0]
 80194aa:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80194ae:	fb03 f202 	mul.w	r2, r3, r2
 80194b2:	68bb      	ldr	r3, [r7, #8]
 80194b4:	689b      	ldr	r3, [r3, #8]
 80194b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80194ba:	4a33      	ldr	r2, [pc, #204]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 80194bc:	6093      	str	r3, [r2, #8]
        break;
 80194be:	e0ba      	b.n	8019636 <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 80194c0:	68bb      	ldr	r3, [r7, #8]
 80194c2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d102      	bne.n	80194ce <RadioSetRxGenericConfig+0x20e>
            return -1;
 80194c8:	f04f 33ff 	mov.w	r3, #4294967295
 80194cc:	e0b4      	b.n	8019638 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80194ce:	68bb      	ldr	r3, [r7, #8]
 80194d0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80194d4:	2b01      	cmp	r3, #1
 80194d6:	d105      	bne.n	80194e4 <RadioSetRxGenericConfig+0x224>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80194de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80194e2:	e002      	b.n	80194ea <RadioSetRxGenericConfig+0x22a>
            MaxPayloadLength = 0xFF;
 80194e4:	23ff      	movs	r3, #255	@ 0xff
 80194e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80194ea:	68bb      	ldr	r3, [r7, #8]
 80194ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	bf14      	ite	ne
 80194f2:	2301      	movne	r3, #1
 80194f4:	2300      	moveq	r3, #0
 80194f6:	b2db      	uxtb	r3, r3
 80194f8:	4618      	mov	r0, r3
 80194fa:	f000 fd57 	bl	8019fac <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80194fe:	683b      	ldr	r3, [r7, #0]
 8019500:	b2db      	uxtb	r3, r3
 8019502:	4618      	mov	r0, r3
 8019504:	f000 fd61 	bl	8019fca <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019508:	4b1f      	ldr	r3, [pc, #124]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 801950a:	2201      	movs	r2, #1
 801950c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019510:	68bb      	ldr	r3, [r7, #8]
 8019512:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8019516:	4b1c      	ldr	r3, [pc, #112]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019518:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801951c:	68bb      	ldr	r3, [r7, #8]
 801951e:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8019522:	4b19      	ldr	r3, [pc, #100]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019524:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019528:	68bb      	ldr	r3, [r7, #8]
 801952a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801952e:	4b16      	ldr	r3, [pc, #88]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019530:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8019534:	68bb      	ldr	r3, [r7, #8]
 8019536:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801953a:	2b02      	cmp	r3, #2
 801953c:	d010      	beq.n	8019560 <RadioSetRxGenericConfig+0x2a0>
 801953e:	2b02      	cmp	r3, #2
 8019540:	dc2c      	bgt.n	801959c <RadioSetRxGenericConfig+0x2dc>
 8019542:	2b00      	cmp	r3, #0
 8019544:	d002      	beq.n	801954c <RadioSetRxGenericConfig+0x28c>
 8019546:	2b01      	cmp	r3, #1
 8019548:	d005      	beq.n	8019556 <RadioSetRxGenericConfig+0x296>
            break;
 801954a:	e027      	b.n	801959c <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801954c:	4b0e      	ldr	r3, [pc, #56]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 801954e:	2200      	movs	r2, #0
 8019550:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019554:	e023      	b.n	801959e <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019556:	4b0c      	ldr	r3, [pc, #48]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019558:	2201      	movs	r2, #1
 801955a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801955e:	e01e      	b.n	801959e <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019560:	68bb      	ldr	r3, [r7, #8]
 8019562:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019566:	2b0b      	cmp	r3, #11
 8019568:	d004      	beq.n	8019574 <RadioSetRxGenericConfig+0x2b4>
 801956a:	68bb      	ldr	r3, [r7, #8]
 801956c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019570:	2b0c      	cmp	r3, #12
 8019572:	d104      	bne.n	801957e <RadioSetRxGenericConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019574:	4b04      	ldr	r3, [pc, #16]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019576:	2201      	movs	r2, #1
 8019578:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801957c:	e00f      	b.n	801959e <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801957e:	4b02      	ldr	r3, [pc, #8]	@ (8019588 <RadioSetRxGenericConfig+0x2c8>)
 8019580:	2200      	movs	r2, #0
 8019582:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019586:	e00a      	b.n	801959e <RadioSetRxGenericConfig+0x2de>
 8019588:	20001c68 	.word	0x20001c68
 801958c:	20001c64 	.word	0x20001c64
 8019590:	20001cdc 	.word	0x20001cdc
 8019594:	20001ca0 	.word	0x20001ca0
 8019598:	20001c76 	.word	0x20001c76
            break;
 801959c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801959e:	4b28      	ldr	r3, [pc, #160]	@ (8019640 <RadioSetRxGenericConfig+0x380>)
 80195a0:	2201      	movs	r2, #1
 80195a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80195a4:	68bb      	ldr	r3, [r7, #8]
 80195a6:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80195a8:	4b25      	ldr	r3, [pc, #148]	@ (8019640 <RadioSetRxGenericConfig+0x380>)
 80195aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80195b2:	4b23      	ldr	r3, [pc, #140]	@ (8019640 <RadioSetRxGenericConfig+0x380>)
 80195b4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80195b6:	4a22      	ldr	r2, [pc, #136]	@ (8019640 <RadioSetRxGenericConfig+0x380>)
 80195b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80195bc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80195be:	68bb      	ldr	r3, [r7, #8]
 80195c0:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80195c4:	4b1e      	ldr	r3, [pc, #120]	@ (8019640 <RadioSetRxGenericConfig+0x380>)
 80195c6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80195ca:	68bb      	ldr	r3, [r7, #8]
 80195cc:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80195d0:	4b1b      	ldr	r3, [pc, #108]	@ (8019640 <RadioSetRxGenericConfig+0x380>)
 80195d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 80195d6:	f7ff f98a 	bl	80188ee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80195da:	2001      	movs	r0, #1
 80195dc:	f7fe fb1e 	bl	8017c1c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80195e0:	4818      	ldr	r0, [pc, #96]	@ (8019644 <RadioSetRxGenericConfig+0x384>)
 80195e2:	f000 ff87 	bl	801a4f4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195e6:	4818      	ldr	r0, [pc, #96]	@ (8019648 <RadioSetRxGenericConfig+0x388>)
 80195e8:	f001 f852 	bl	801a690 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80195ec:	4b14      	ldr	r3, [pc, #80]	@ (8019640 <RadioSetRxGenericConfig+0x380>)
 80195ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80195f2:	2b01      	cmp	r3, #1
 80195f4:	d10d      	bne.n	8019612 <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80195f6:	f240 7036 	movw	r0, #1846	@ 0x736
 80195fa:	f001 f9b1 	bl	801a960 <SUBGRF_ReadRegister>
 80195fe:	4603      	mov	r3, r0
 8019600:	f023 0304 	bic.w	r3, r3, #4
 8019604:	b2db      	uxtb	r3, r3
 8019606:	4619      	mov	r1, r3
 8019608:	f240 7036 	movw	r0, #1846	@ 0x736
 801960c:	f001 f986 	bl	801a91c <SUBGRF_WriteRegister>
 8019610:	e00c      	b.n	801962c <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019612:	f240 7036 	movw	r0, #1846	@ 0x736
 8019616:	f001 f9a3 	bl	801a960 <SUBGRF_ReadRegister>
 801961a:	4603      	mov	r3, r0
 801961c:	f043 0304 	orr.w	r3, r3, #4
 8019620:	b2db      	uxtb	r3, r3
 8019622:	4619      	mov	r1, r3
 8019624:	f240 7036 	movw	r0, #1846	@ 0x736
 8019628:	f001 f978 	bl	801a91c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801962c:	4b04      	ldr	r3, [pc, #16]	@ (8019640 <RadioSetRxGenericConfig+0x380>)
 801962e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019632:	609a      	str	r2, [r3, #8]
        break;
 8019634:	bf00      	nop
    }
    return status;
 8019636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019638:	4618      	mov	r0, r3
 801963a:	3730      	adds	r7, #48	@ 0x30
 801963c:	46bd      	mov	sp, r7
 801963e:	bd80      	pop	{r7, pc}
 8019640:	20001c68 	.word	0x20001c68
 8019644:	20001ca0 	.word	0x20001ca0
 8019648:	20001c76 	.word	0x20001c76

0801964c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b08e      	sub	sp, #56	@ 0x38
 8019650:	af00      	add	r7, sp, #0
 8019652:	60b9      	str	r1, [r7, #8]
 8019654:	607b      	str	r3, [r7, #4]
 8019656:	4603      	mov	r3, r0
 8019658:	73fb      	strb	r3, [r7, #15]
 801965a:	4613      	mov	r3, r2
 801965c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801965e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019662:	2200      	movs	r2, #0
 8019664:	601a      	str	r2, [r3, #0]
 8019666:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019668:	f001 fc59 	bl	801af1e <RFW_DeInit>
    switch( modem )
 801966c:	7bfb      	ldrb	r3, [r7, #15]
 801966e:	2b03      	cmp	r3, #3
 8019670:	f200 8205 	bhi.w	8019a7e <RadioSetTxGenericConfig+0x432>
 8019674:	a201      	add	r2, pc, #4	@ (adr r2, 801967c <RadioSetTxGenericConfig+0x30>)
 8019676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801967a:	bf00      	nop
 801967c:	08019801 	.word	0x08019801
 8019680:	08019949 	.word	0x08019949
 8019684:	08019a41 	.word	0x08019a41
 8019688:	0801968d 	.word	0x0801968d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801968c:	68bb      	ldr	r3, [r7, #8]
 801968e:	7c9b      	ldrb	r3, [r3, #18]
 8019690:	2b08      	cmp	r3, #8
 8019692:	d902      	bls.n	801969a <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 8019694:	f04f 33ff 	mov.w	r3, #4294967295
 8019698:	e206      	b.n	8019aa8 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801969a:	68bb      	ldr	r3, [r7, #8]
 801969c:	6899      	ldr	r1, [r3, #8]
 801969e:	68bb      	ldr	r3, [r7, #8]
 80196a0:	7c9b      	ldrb	r3, [r3, #18]
 80196a2:	461a      	mov	r2, r3
 80196a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80196a8:	4618      	mov	r0, r3
 80196aa:	f001 fd2b 	bl	801b104 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80196ae:	68bb      	ldr	r3, [r7, #8]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d102      	bne.n	80196bc <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 80196b6:	f04f 33ff 	mov.w	r3, #4294967295
 80196ba:	e1f5      	b.n	8019aa8 <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 80196bc:	68bb      	ldr	r3, [r7, #8]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80196c4:	4293      	cmp	r3, r2
 80196c6:	d813      	bhi.n	80196f0 <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 80196c8:	2302      	movs	r3, #2
 80196ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80196ce:	4b99      	ldr	r3, [pc, #612]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80196d0:	2203      	movs	r2, #3
 80196d2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80196d4:	4b97      	ldr	r3, [pc, #604]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80196d6:	2203      	movs	r2, #3
 80196d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80196dc:	68bb      	ldr	r3, [r7, #8]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	4a94      	ldr	r2, [pc, #592]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80196e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80196e4:	68bb      	ldr	r3, [r7, #8]
 80196e6:	7cda      	ldrb	r2, [r3, #19]
 80196e8:	4b92      	ldr	r3, [pc, #584]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80196ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80196ee:	e017      	b.n	8019720 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 80196f0:	2300      	movs	r3, #0
 80196f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80196f6:	4b8f      	ldr	r3, [pc, #572]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80196f8:	2200      	movs	r2, #0
 80196fa:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80196fc:	4b8d      	ldr	r3, [pc, #564]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80196fe:	2200      	movs	r2, #0
 8019700:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019704:	68bb      	ldr	r3, [r7, #8]
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	4a8a      	ldr	r2, [pc, #552]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 801970a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801970c:	68bb      	ldr	r3, [r7, #8]
 801970e:	7cda      	ldrb	r2, [r3, #19]
 8019710:	4b88      	ldr	r3, [pc, #544]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 8019712:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8019716:	68bb      	ldr	r3, [r7, #8]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	089b      	lsrs	r3, r3, #2
 801971c:	4a85      	ldr	r2, [pc, #532]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 801971e:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8019720:	68bb      	ldr	r3, [r7, #8]
 8019722:	685b      	ldr	r3, [r3, #4]
 8019724:	b29b      	uxth	r3, r3
 8019726:	00db      	lsls	r3, r3, #3
 8019728:	b29a      	uxth	r2, r3
 801972a:	4b82      	ldr	r3, [pc, #520]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 801972c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801972e:	4b81      	ldr	r3, [pc, #516]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 8019730:	2204      	movs	r2, #4
 8019732:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8019734:	68bb      	ldr	r3, [r7, #8]
 8019736:	7c9b      	ldrb	r3, [r3, #18]
 8019738:	00db      	lsls	r3, r3, #3
 801973a:	b2da      	uxtb	r2, r3
 801973c:	4b7d      	ldr	r3, [pc, #500]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 801973e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019740:	4b7c      	ldr	r3, [pc, #496]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 8019742:	2200      	movs	r2, #0
 8019744:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8019746:	68bb      	ldr	r3, [r7, #8]
 8019748:	7d9b      	ldrb	r3, [r3, #22]
 801974a:	2b02      	cmp	r3, #2
 801974c:	d003      	beq.n	8019756 <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801974e:	68bb      	ldr	r3, [r7, #8]
 8019750:	7d1b      	ldrb	r3, [r3, #20]
 8019752:	2b02      	cmp	r3, #2
 8019754:	d12b      	bne.n	80197ae <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8019756:	68bb      	ldr	r3, [r7, #8]
 8019758:	7d5b      	ldrb	r3, [r3, #21]
 801975a:	2bf1      	cmp	r3, #241	@ 0xf1
 801975c:	d00a      	beq.n	8019774 <RadioSetTxGenericConfig+0x128>
 801975e:	68bb      	ldr	r3, [r7, #8]
 8019760:	7d5b      	ldrb	r3, [r3, #21]
 8019762:	2bf2      	cmp	r3, #242	@ 0xf2
 8019764:	d006      	beq.n	8019774 <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019766:	68bb      	ldr	r3, [r7, #8]
 8019768:	7d5b      	ldrb	r3, [r3, #21]
 801976a:	2b01      	cmp	r3, #1
 801976c:	d002      	beq.n	8019774 <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 801976e:	f04f 33ff 	mov.w	r3, #4294967295
 8019772:	e199      	b.n	8019aa8 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8019774:	68bb      	ldr	r3, [r7, #8]
 8019776:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8019778:	2301      	movs	r3, #1
 801977a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801977e:	4b6e      	ldr	r3, [pc, #440]	@ (8019938 <RadioSetTxGenericConfig+0x2ec>)
 8019780:	6819      	ldr	r1, [r3, #0]
 8019782:	f107 0320 	add.w	r3, r7, #32
 8019786:	4a6d      	ldr	r2, [pc, #436]	@ (801993c <RadioSetTxGenericConfig+0x2f0>)
 8019788:	4618      	mov	r0, r3
 801978a:	f001 fbbb 	bl	801af04 <RFW_Init>
 801978e:	4603      	mov	r3, r0
 8019790:	2b00      	cmp	r3, #0
 8019792:	d002      	beq.n	801979a <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 8019794:	f04f 33ff 	mov.w	r3, #4294967295
 8019798:	e186      	b.n	8019aa8 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801979a:	4b66      	ldr	r3, [pc, #408]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 801979c:	2200      	movs	r2, #0
 801979e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80197a0:	4b64      	ldr	r3, [pc, #400]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80197a2:	2201      	movs	r2, #1
 80197a4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80197a6:	4b63      	ldr	r3, [pc, #396]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80197a8:	2200      	movs	r2, #0
 80197aa:	755a      	strb	r2, [r3, #21]
        {
 80197ac:	e00b      	b.n	80197c6 <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80197ae:	68bb      	ldr	r3, [r7, #8]
 80197b0:	7d5a      	ldrb	r2, [r3, #21]
 80197b2:	4b60      	ldr	r3, [pc, #384]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80197b4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80197b6:	68bb      	ldr	r3, [r7, #8]
 80197b8:	7d9a      	ldrb	r2, [r3, #22]
 80197ba:	4b5e      	ldr	r3, [pc, #376]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80197bc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80197be:	68bb      	ldr	r3, [r7, #8]
 80197c0:	7d1a      	ldrb	r2, [r3, #20]
 80197c2:	4b5c      	ldr	r3, [pc, #368]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80197c4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80197c6:	f7ff f892 	bl	80188ee <RadioStandby>
        RadioSetModem( radio_modem );
 80197ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80197ce:	4618      	mov	r0, r3
 80197d0:	f7fe fa24 	bl	8017c1c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80197d4:	485a      	ldr	r0, [pc, #360]	@ (8019940 <RadioSetTxGenericConfig+0x2f4>)
 80197d6:	f000 fe8d 	bl	801a4f4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80197da:	485a      	ldr	r0, [pc, #360]	@ (8019944 <RadioSetTxGenericConfig+0x2f8>)
 80197dc:	f000 ff58 	bl	801a690 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80197e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80197e4:	4618      	mov	r0, r3
 80197e6:	f000 fa18 	bl	8019c1a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80197ea:	68bb      	ldr	r3, [r7, #8]
 80197ec:	8a1b      	ldrh	r3, [r3, #16]
 80197ee:	4618      	mov	r0, r3
 80197f0:	f000 fa62 	bl	8019cb8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80197f4:	68bb      	ldr	r3, [r7, #8]
 80197f6:	899b      	ldrh	r3, [r3, #12]
 80197f8:	4618      	mov	r0, r3
 80197fa:	f000 fa3d 	bl	8019c78 <SUBGRF_SetCrcPolynomial>
        break;
 80197fe:	e13f      	b.n	8019a80 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8019800:	68bb      	ldr	r3, [r7, #8]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	2b00      	cmp	r3, #0
 8019806:	d102      	bne.n	801980e <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 8019808:	f04f 33ff 	mov.w	r3, #4294967295
 801980c:	e14c      	b.n	8019aa8 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 801980e:	68bb      	ldr	r3, [r7, #8]
 8019810:	7c9b      	ldrb	r3, [r3, #18]
 8019812:	2b08      	cmp	r3, #8
 8019814:	d902      	bls.n	801981c <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 8019816:	f04f 33ff 	mov.w	r3, #4294967295
 801981a:	e145      	b.n	8019aa8 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801981c:	68bb      	ldr	r3, [r7, #8]
 801981e:	6899      	ldr	r1, [r3, #8]
 8019820:	68bb      	ldr	r3, [r7, #8]
 8019822:	7c9b      	ldrb	r3, [r3, #18]
 8019824:	461a      	mov	r2, r3
 8019826:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801982a:	4618      	mov	r0, r3
 801982c:	f001 fc6a 	bl	801b104 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019830:	4b40      	ldr	r3, [pc, #256]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 8019832:	2200      	movs	r2, #0
 8019834:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019838:	68bb      	ldr	r3, [r7, #8]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	4a3d      	ldr	r2, [pc, #244]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 801983e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019840:	68bb      	ldr	r3, [r7, #8]
 8019842:	7cda      	ldrb	r2, [r3, #19]
 8019844:	4b3b      	ldr	r3, [pc, #236]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 8019846:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801984a:	68bb      	ldr	r3, [r7, #8]
 801984c:	699b      	ldr	r3, [r3, #24]
 801984e:	4a39      	ldr	r2, [pc, #228]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 8019850:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019852:	4b38      	ldr	r3, [pc, #224]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 8019854:	2200      	movs	r2, #0
 8019856:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8019858:	68bb      	ldr	r3, [r7, #8]
 801985a:	685b      	ldr	r3, [r3, #4]
 801985c:	b29b      	uxth	r3, r3
 801985e:	00db      	lsls	r3, r3, #3
 8019860:	b29a      	uxth	r2, r3
 8019862:	4b34      	ldr	r3, [pc, #208]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 8019864:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019866:	4b33      	ldr	r3, [pc, #204]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 8019868:	2204      	movs	r2, #4
 801986a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801986c:	68bb      	ldr	r3, [r7, #8]
 801986e:	7c9b      	ldrb	r3, [r3, #18]
 8019870:	00db      	lsls	r3, r3, #3
 8019872:	b2da      	uxtb	r2, r3
 8019874:	4b2f      	ldr	r3, [pc, #188]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 8019876:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019878:	4b2e      	ldr	r3, [pc, #184]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 801987a:	2200      	movs	r2, #0
 801987c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801987e:	68bb      	ldr	r3, [r7, #8]
 8019880:	7d9b      	ldrb	r3, [r3, #22]
 8019882:	2b02      	cmp	r3, #2
 8019884:	d003      	beq.n	801988e <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019886:	68bb      	ldr	r3, [r7, #8]
 8019888:	7d1b      	ldrb	r3, [r3, #20]
 801988a:	2b02      	cmp	r3, #2
 801988c:	d12a      	bne.n	80198e4 <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801988e:	68bb      	ldr	r3, [r7, #8]
 8019890:	7d5b      	ldrb	r3, [r3, #21]
 8019892:	2bf1      	cmp	r3, #241	@ 0xf1
 8019894:	d00a      	beq.n	80198ac <RadioSetTxGenericConfig+0x260>
 8019896:	68bb      	ldr	r3, [r7, #8]
 8019898:	7d5b      	ldrb	r3, [r3, #21]
 801989a:	2bf2      	cmp	r3, #242	@ 0xf2
 801989c:	d006      	beq.n	80198ac <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801989e:	68bb      	ldr	r3, [r7, #8]
 80198a0:	7d5b      	ldrb	r3, [r3, #21]
 80198a2:	2b01      	cmp	r3, #1
 80198a4:	d002      	beq.n	80198ac <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 80198a6:	f04f 33ff 	mov.w	r3, #4294967295
 80198aa:	e0fd      	b.n	8019aa8 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80198ac:	2301      	movs	r3, #1
 80198ae:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80198b0:	68bb      	ldr	r3, [r7, #8]
 80198b2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80198b4:	4b20      	ldr	r3, [pc, #128]	@ (8019938 <RadioSetTxGenericConfig+0x2ec>)
 80198b6:	6819      	ldr	r1, [r3, #0]
 80198b8:	f107 0314 	add.w	r3, r7, #20
 80198bc:	4a1f      	ldr	r2, [pc, #124]	@ (801993c <RadioSetTxGenericConfig+0x2f0>)
 80198be:	4618      	mov	r0, r3
 80198c0:	f001 fb20 	bl	801af04 <RFW_Init>
 80198c4:	4603      	mov	r3, r0
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d002      	beq.n	80198d0 <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 80198ca:	f04f 33ff 	mov.w	r3, #4294967295
 80198ce:	e0eb      	b.n	8019aa8 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80198d0:	4b18      	ldr	r3, [pc, #96]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80198d2:	2200      	movs	r2, #0
 80198d4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80198d6:	4b17      	ldr	r3, [pc, #92]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80198d8:	2201      	movs	r2, #1
 80198da:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80198dc:	4b15      	ldr	r3, [pc, #84]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80198de:	2200      	movs	r2, #0
 80198e0:	755a      	strb	r2, [r3, #21]
        {
 80198e2:	e00b      	b.n	80198fc <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80198e4:	68bb      	ldr	r3, [r7, #8]
 80198e6:	7d5a      	ldrb	r2, [r3, #21]
 80198e8:	4b12      	ldr	r3, [pc, #72]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80198ea:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80198ec:	68bb      	ldr	r3, [r7, #8]
 80198ee:	7d9a      	ldrb	r2, [r3, #22]
 80198f0:	4b10      	ldr	r3, [pc, #64]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80198f2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80198f4:	68bb      	ldr	r3, [r7, #8]
 80198f6:	7d1a      	ldrb	r2, [r3, #20]
 80198f8:	4b0e      	ldr	r3, [pc, #56]	@ (8019934 <RadioSetTxGenericConfig+0x2e8>)
 80198fa:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80198fc:	f7fe fff7 	bl	80188ee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019900:	2000      	movs	r0, #0
 8019902:	f7fe f98b 	bl	8017c1c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019906:	480e      	ldr	r0, [pc, #56]	@ (8019940 <RadioSetTxGenericConfig+0x2f4>)
 8019908:	f000 fdf4 	bl	801a4f4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801990c:	480d      	ldr	r0, [pc, #52]	@ (8019944 <RadioSetTxGenericConfig+0x2f8>)
 801990e:	f000 febf 	bl	801a690 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019916:	4618      	mov	r0, r3
 8019918:	f000 f97f 	bl	8019c1a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801991c:	68bb      	ldr	r3, [r7, #8]
 801991e:	8a1b      	ldrh	r3, [r3, #16]
 8019920:	4618      	mov	r0, r3
 8019922:	f000 f9c9 	bl	8019cb8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019926:	68bb      	ldr	r3, [r7, #8]
 8019928:	899b      	ldrh	r3, [r3, #12]
 801992a:	4618      	mov	r0, r3
 801992c:	f000 f9a4 	bl	8019c78 <SUBGRF_SetCrcPolynomial>
        break;
 8019930:	e0a6      	b.n	8019a80 <RadioSetTxGenericConfig+0x434>
 8019932:	bf00      	nop
 8019934:	20001c68 	.word	0x20001c68
 8019938:	20001c64 	.word	0x20001c64
 801993c:	20001cc4 	.word	0x20001cc4
 8019940:	20001ca0 	.word	0x20001ca0
 8019944:	20001c76 	.word	0x20001c76
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019948:	4b59      	ldr	r3, [pc, #356]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 801994a:	2201      	movs	r2, #1
 801994c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019950:	68bb      	ldr	r3, [r7, #8]
 8019952:	781a      	ldrb	r2, [r3, #0]
 8019954:	4b56      	ldr	r3, [pc, #344]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 8019956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801995a:	68bb      	ldr	r3, [r7, #8]
 801995c:	785a      	ldrb	r2, [r3, #1]
 801995e:	4b54      	ldr	r3, [pc, #336]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 8019960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019964:	68bb      	ldr	r3, [r7, #8]
 8019966:	789a      	ldrb	r2, [r3, #2]
 8019968:	4b51      	ldr	r3, [pc, #324]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 801996a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801996e:	68bb      	ldr	r3, [r7, #8]
 8019970:	78db      	ldrb	r3, [r3, #3]
 8019972:	2b02      	cmp	r3, #2
 8019974:	d010      	beq.n	8019998 <RadioSetTxGenericConfig+0x34c>
 8019976:	2b02      	cmp	r3, #2
 8019978:	dc20      	bgt.n	80199bc <RadioSetTxGenericConfig+0x370>
 801997a:	2b00      	cmp	r3, #0
 801997c:	d002      	beq.n	8019984 <RadioSetTxGenericConfig+0x338>
 801997e:	2b01      	cmp	r3, #1
 8019980:	d005      	beq.n	801998e <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8019982:	e01b      	b.n	80199bc <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019984:	4b4a      	ldr	r3, [pc, #296]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 8019986:	2200      	movs	r2, #0
 8019988:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801998c:	e017      	b.n	80199be <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801998e:	4b48      	ldr	r3, [pc, #288]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 8019990:	2201      	movs	r2, #1
 8019992:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019996:	e012      	b.n	80199be <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019998:	68bb      	ldr	r3, [r7, #8]
 801999a:	781b      	ldrb	r3, [r3, #0]
 801999c:	2b0b      	cmp	r3, #11
 801999e:	d003      	beq.n	80199a8 <RadioSetTxGenericConfig+0x35c>
 80199a0:	68bb      	ldr	r3, [r7, #8]
 80199a2:	781b      	ldrb	r3, [r3, #0]
 80199a4:	2b0c      	cmp	r3, #12
 80199a6:	d104      	bne.n	80199b2 <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80199a8:	4b41      	ldr	r3, [pc, #260]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 80199aa:	2201      	movs	r2, #1
 80199ac:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80199b0:	e005      	b.n	80199be <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80199b2:	4b3f      	ldr	r3, [pc, #252]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 80199b4:	2200      	movs	r2, #0
 80199b6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80199ba:	e000      	b.n	80199be <RadioSetTxGenericConfig+0x372>
            break;
 80199bc:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80199be:	4b3c      	ldr	r3, [pc, #240]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 80199c0:	2201      	movs	r2, #1
 80199c2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80199c4:	68bb      	ldr	r3, [r7, #8]
 80199c6:	889a      	ldrh	r2, [r3, #4]
 80199c8:	4b39      	ldr	r3, [pc, #228]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 80199ca:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80199cc:	68bb      	ldr	r3, [r7, #8]
 80199ce:	799a      	ldrb	r2, [r3, #6]
 80199d0:	4b37      	ldr	r3, [pc, #220]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 80199d2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80199d4:	68bb      	ldr	r3, [r7, #8]
 80199d6:	79da      	ldrb	r2, [r3, #7]
 80199d8:	4b35      	ldr	r3, [pc, #212]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 80199da:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80199de:	68bb      	ldr	r3, [r7, #8]
 80199e0:	7a1a      	ldrb	r2, [r3, #8]
 80199e2:	4b33      	ldr	r3, [pc, #204]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 80199e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 80199e8:	f7fe ff81 	bl	80188ee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80199ec:	2001      	movs	r0, #1
 80199ee:	f7fe f915 	bl	8017c1c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80199f2:	4830      	ldr	r0, [pc, #192]	@ (8019ab4 <RadioSetTxGenericConfig+0x468>)
 80199f4:	f000 fd7e 	bl	801a4f4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80199f8:	482f      	ldr	r0, [pc, #188]	@ (8019ab8 <RadioSetTxGenericConfig+0x46c>)
 80199fa:	f000 fe49 	bl	801a690 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80199fe:	4b2c      	ldr	r3, [pc, #176]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 8019a00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019a04:	2b06      	cmp	r3, #6
 8019a06:	d10d      	bne.n	8019a24 <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019a08:	f640 0089 	movw	r0, #2185	@ 0x889
 8019a0c:	f000 ffa8 	bl	801a960 <SUBGRF_ReadRegister>
 8019a10:	4603      	mov	r3, r0
 8019a12:	f023 0304 	bic.w	r3, r3, #4
 8019a16:	b2db      	uxtb	r3, r3
 8019a18:	4619      	mov	r1, r3
 8019a1a:	f640 0089 	movw	r0, #2185	@ 0x889
 8019a1e:	f000 ff7d 	bl	801a91c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8019a22:	e02d      	b.n	8019a80 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019a24:	f640 0089 	movw	r0, #2185	@ 0x889
 8019a28:	f000 ff9a 	bl	801a960 <SUBGRF_ReadRegister>
 8019a2c:	4603      	mov	r3, r0
 8019a2e:	f043 0304 	orr.w	r3, r3, #4
 8019a32:	b2db      	uxtb	r3, r3
 8019a34:	4619      	mov	r1, r3
 8019a36:	f640 0089 	movw	r0, #2185	@ 0x889
 8019a3a:	f000 ff6f 	bl	801a91c <SUBGRF_WriteRegister>
        break;
 8019a3e:	e01f      	b.n	8019a80 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8019a40:	68bb      	ldr	r3, [r7, #8]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d004      	beq.n	8019a52 <RadioSetTxGenericConfig+0x406>
 8019a48:	68bb      	ldr	r3, [r7, #8]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019a50:	d902      	bls.n	8019a58 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 8019a52:	f04f 33ff 	mov.w	r3, #4294967295
 8019a56:	e027      	b.n	8019aa8 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 8019a58:	2003      	movs	r0, #3
 8019a5a:	f7fe f8df 	bl	8017c1c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019a5e:	4b14      	ldr	r3, [pc, #80]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 8019a60:	2202      	movs	r2, #2
 8019a62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8019a66:	68bb      	ldr	r3, [r7, #8]
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	4a11      	ldr	r2, [pc, #68]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 8019a6c:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019a6e:	4b10      	ldr	r3, [pc, #64]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 8019a70:	2216      	movs	r2, #22
 8019a72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019a76:	480f      	ldr	r0, [pc, #60]	@ (8019ab4 <RadioSetTxGenericConfig+0x468>)
 8019a78:	f000 fd3c 	bl	801a4f4 <SUBGRF_SetModulationParams>
        break;
 8019a7c:	e000      	b.n	8019a80 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 8019a7e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019a84:	4618      	mov	r0, r3
 8019a86:	f001 f87f 	bl	801ab88 <SUBGRF_SetRfTxPower>
 8019a8a:	4603      	mov	r3, r0
 8019a8c:	461a      	mov	r2, r3
 8019a8e:	4b08      	ldr	r3, [pc, #32]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 8019a90:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019a94:	4b06      	ldr	r3, [pc, #24]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 8019a96:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	f001 fa53 	bl	801af46 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019aa0:	4a03      	ldr	r2, [pc, #12]	@ (8019ab0 <RadioSetTxGenericConfig+0x464>)
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	6053      	str	r3, [r2, #4]
    return 0;
 8019aa6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	3738      	adds	r7, #56	@ 0x38
 8019aac:	46bd      	mov	sp, r7
 8019aae:	bd80      	pop	{r7, pc}
 8019ab0:	20001c68 	.word	0x20001c68
 8019ab4:	20001ca0 	.word	0x20001ca0
 8019ab8:	20001c76 	.word	0x20001c76

08019abc <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8019abc:	b480      	push	{r7}
 8019abe:	b085      	sub	sp, #20
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8019ac4:	2301      	movs	r3, #1
 8019ac6:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8019ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8019aca:	4618      	mov	r0, r3
 8019acc:	3714      	adds	r7, #20
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	bc80      	pop	{r7}
 8019ad2:	4770      	bx	lr

08019ad4 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8019ad4:	b480      	push	{r7}
 8019ad6:	b083      	sub	sp, #12
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
 8019adc:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8019ade:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	370c      	adds	r7, #12
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	bc80      	pop	{r7}
 8019ae8:	4770      	bx	lr
	...

08019aec <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b084      	sub	sp, #16
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d002      	beq.n	8019b00 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8019afa:	4a1d      	ldr	r2, [pc, #116]	@ (8019b70 <SUBGRF_Init+0x84>)
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8019b00:	f7e8 fa2a 	bl	8001f58 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019b04:	2002      	movs	r0, #2
 8019b06:	f001 f91b 	bl	801ad40 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8019b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8019b74 <SUBGRF_Init+0x88>)
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8019b10:	2000      	movs	r0, #0
 8019b12:	f000 f97f 	bl	8019e14 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8019b16:	f7f1 fab7 	bl	800b088 <RBI_IsTCXO>
 8019b1a:	4603      	mov	r3, r0
 8019b1c:	2b01      	cmp	r3, #1
 8019b1e:	d10e      	bne.n	8019b3e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8019b20:	2140      	movs	r1, #64	@ 0x40
 8019b22:	2001      	movs	r0, #1
 8019b24:	f000 fb8a 	bl	801a23c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8019b28:	2100      	movs	r1, #0
 8019b2a:	f640 1011 	movw	r0, #2321	@ 0x911
 8019b2e:	f000 fef5 	bl	801a91c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8019b32:	237f      	movs	r3, #127	@ 0x7f
 8019b34:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8019b36:	7b38      	ldrb	r0, [r7, #12]
 8019b38:	f000 fa8d 	bl	801a056 <SUBGRF_Calibrate>
 8019b3c:	e009      	b.n	8019b52 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019b3e:	2120      	movs	r1, #32
 8019b40:	f640 1011 	movw	r0, #2321	@ 0x911
 8019b44:	f000 feea 	bl	801a91c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019b48:	2120      	movs	r1, #32
 8019b4a:	f640 1012 	movw	r0, #2322	@ 0x912
 8019b4e:	f000 fee5 	bl	801a91c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019b52:	210e      	movs	r1, #14
 8019b54:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019b58:	f000 fee0 	bl	801a91c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8019b5c:	f7f1 fa78 	bl	800b050 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8019b60:	4b05      	ldr	r3, [pc, #20]	@ (8019b78 <SUBGRF_Init+0x8c>)
 8019b62:	2201      	movs	r2, #1
 8019b64:	701a      	strb	r2, [r3, #0]
}
 8019b66:	bf00      	nop
 8019b68:	3710      	adds	r7, #16
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	bd80      	pop	{r7, pc}
 8019b6e:	bf00      	nop
 8019b70:	20001d00 	.word	0x20001d00
 8019b74:	20001cfc 	.word	0x20001cfc
 8019b78:	20001cf4 	.word	0x20001cf4

08019b7c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8019b7c:	b480      	push	{r7}
 8019b7e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019b80:	4b02      	ldr	r3, [pc, #8]	@ (8019b8c <SUBGRF_GetOperatingMode+0x10>)
 8019b82:	781b      	ldrb	r3, [r3, #0]
}
 8019b84:	4618      	mov	r0, r3
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bc80      	pop	{r7}
 8019b8a:	4770      	bx	lr
 8019b8c:	20001cf4 	.word	0x20001cf4

08019b90 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b082      	sub	sp, #8
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
 8019b98:	460b      	mov	r3, r1
 8019b9a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8019b9c:	78fb      	ldrb	r3, [r7, #3]
 8019b9e:	461a      	mov	r2, r3
 8019ba0:	6879      	ldr	r1, [r7, #4]
 8019ba2:	2000      	movs	r0, #0
 8019ba4:	f000 ff40 	bl	801aa28 <SUBGRF_WriteBuffer>
}
 8019ba8:	bf00      	nop
 8019baa:	3708      	adds	r7, #8
 8019bac:	46bd      	mov	sp, r7
 8019bae:	bd80      	pop	{r7, pc}

08019bb0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8019bb0:	b580      	push	{r7, lr}
 8019bb2:	b086      	sub	sp, #24
 8019bb4:	af00      	add	r7, sp, #0
 8019bb6:	60f8      	str	r0, [r7, #12]
 8019bb8:	60b9      	str	r1, [r7, #8]
 8019bba:	4613      	mov	r3, r2
 8019bbc:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8019bc2:	f107 0317 	add.w	r3, r7, #23
 8019bc6:	4619      	mov	r1, r3
 8019bc8:	68b8      	ldr	r0, [r7, #8]
 8019bca:	f000 fe29 	bl	801a820 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8019bce:	68bb      	ldr	r3, [r7, #8]
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	79fa      	ldrb	r2, [r7, #7]
 8019bd4:	429a      	cmp	r2, r3
 8019bd6:	d201      	bcs.n	8019bdc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8019bd8:	2301      	movs	r3, #1
 8019bda:	e007      	b.n	8019bec <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8019bdc:	7df8      	ldrb	r0, [r7, #23]
 8019bde:	68bb      	ldr	r3, [r7, #8]
 8019be0:	781b      	ldrb	r3, [r3, #0]
 8019be2:	461a      	mov	r2, r3
 8019be4:	68f9      	ldr	r1, [r7, #12]
 8019be6:	f000 ff41 	bl	801aa6c <SUBGRF_ReadBuffer>

    return 0;
 8019bea:	2300      	movs	r3, #0
}
 8019bec:	4618      	mov	r0, r3
 8019bee:	3718      	adds	r7, #24
 8019bf0:	46bd      	mov	sp, r7
 8019bf2:	bd80      	pop	{r7, pc}

08019bf4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b084      	sub	sp, #16
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	60f8      	str	r0, [r7, #12]
 8019bfc:	460b      	mov	r3, r1
 8019bfe:	607a      	str	r2, [r7, #4]
 8019c00:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8019c02:	7afb      	ldrb	r3, [r7, #11]
 8019c04:	4619      	mov	r1, r3
 8019c06:	68f8      	ldr	r0, [r7, #12]
 8019c08:	f7ff ffc2 	bl	8019b90 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8019c0c:	6878      	ldr	r0, [r7, #4]
 8019c0e:	f000 f91d 	bl	8019e4c <SUBGRF_SetTx>
}
 8019c12:	bf00      	nop
 8019c14:	3710      	adds	r7, #16
 8019c16:	46bd      	mov	sp, r7
 8019c18:	bd80      	pop	{r7, pc}

08019c1a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8019c1a:	b580      	push	{r7, lr}
 8019c1c:	b082      	sub	sp, #8
 8019c1e:	af00      	add	r7, sp, #0
 8019c20:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8019c22:	2208      	movs	r2, #8
 8019c24:	6879      	ldr	r1, [r7, #4]
 8019c26:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8019c2a:	f000 feb9 	bl	801a9a0 <SUBGRF_WriteRegisters>
    return 0;
 8019c2e:	2300      	movs	r3, #0
}
 8019c30:	4618      	mov	r0, r3
 8019c32:	3708      	adds	r7, #8
 8019c34:	46bd      	mov	sp, r7
 8019c36:	bd80      	pop	{r7, pc}

08019c38 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b084      	sub	sp, #16
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	4603      	mov	r3, r0
 8019c40:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8019c42:	88fb      	ldrh	r3, [r7, #6]
 8019c44:	0a1b      	lsrs	r3, r3, #8
 8019c46:	b29b      	uxth	r3, r3
 8019c48:	b2db      	uxtb	r3, r3
 8019c4a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8019c4c:	88fb      	ldrh	r3, [r7, #6]
 8019c4e:	b2db      	uxtb	r3, r3
 8019c50:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019c52:	f000 fb77 	bl	801a344 <SUBGRF_GetPacketType>
 8019c56:	4603      	mov	r3, r0
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d108      	bne.n	8019c6e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8019c5c:	f107 030c 	add.w	r3, r7, #12
 8019c60:	2202      	movs	r2, #2
 8019c62:	4619      	mov	r1, r3
 8019c64:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8019c68:	f000 fe9a 	bl	801a9a0 <SUBGRF_WriteRegisters>
            break;
 8019c6c:	e000      	b.n	8019c70 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8019c6e:	bf00      	nop
    }
}
 8019c70:	bf00      	nop
 8019c72:	3710      	adds	r7, #16
 8019c74:	46bd      	mov	sp, r7
 8019c76:	bd80      	pop	{r7, pc}

08019c78 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b084      	sub	sp, #16
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	4603      	mov	r3, r0
 8019c80:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8019c82:	88fb      	ldrh	r3, [r7, #6]
 8019c84:	0a1b      	lsrs	r3, r3, #8
 8019c86:	b29b      	uxth	r3, r3
 8019c88:	b2db      	uxtb	r3, r3
 8019c8a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8019c8c:	88fb      	ldrh	r3, [r7, #6]
 8019c8e:	b2db      	uxtb	r3, r3
 8019c90:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019c92:	f000 fb57 	bl	801a344 <SUBGRF_GetPacketType>
 8019c96:	4603      	mov	r3, r0
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d108      	bne.n	8019cae <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8019c9c:	f107 030c 	add.w	r3, r7, #12
 8019ca0:	2202      	movs	r2, #2
 8019ca2:	4619      	mov	r1, r3
 8019ca4:	f240 60be 	movw	r0, #1726	@ 0x6be
 8019ca8:	f000 fe7a 	bl	801a9a0 <SUBGRF_WriteRegisters>
            break;
 8019cac:	e000      	b.n	8019cb0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8019cae:	bf00      	nop
    }
}
 8019cb0:	bf00      	nop
 8019cb2:	3710      	adds	r7, #16
 8019cb4:	46bd      	mov	sp, r7
 8019cb6:	bd80      	pop	{r7, pc}

08019cb8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8019cb8:	b580      	push	{r7, lr}
 8019cba:	b084      	sub	sp, #16
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8019cc6:	f000 fb3d 	bl	801a344 <SUBGRF_GetPacketType>
 8019cca:	4603      	mov	r3, r0
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d121      	bne.n	8019d14 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019cd0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019cd4:	f000 fe44 	bl	801a960 <SUBGRF_ReadRegister>
 8019cd8:	4603      	mov	r3, r0
 8019cda:	f023 0301 	bic.w	r3, r3, #1
 8019cde:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019ce0:	88fb      	ldrh	r3, [r7, #6]
 8019ce2:	0a1b      	lsrs	r3, r3, #8
 8019ce4:	b29b      	uxth	r3, r3
 8019ce6:	b25b      	sxtb	r3, r3
 8019ce8:	f003 0301 	and.w	r3, r3, #1
 8019cec:	b25a      	sxtb	r2, r3
 8019cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019cf2:	4313      	orrs	r3, r2
 8019cf4:	b25b      	sxtb	r3, r3
 8019cf6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8019cf8:	7bfb      	ldrb	r3, [r7, #15]
 8019cfa:	4619      	mov	r1, r3
 8019cfc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019d00:	f000 fe0c 	bl	801a91c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8019d04:	88fb      	ldrh	r3, [r7, #6]
 8019d06:	b2db      	uxtb	r3, r3
 8019d08:	4619      	mov	r1, r3
 8019d0a:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8019d0e:	f000 fe05 	bl	801a91c <SUBGRF_WriteRegister>
            break;
 8019d12:	e000      	b.n	8019d16 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8019d14:	bf00      	nop
    }
}
 8019d16:	bf00      	nop
 8019d18:	3710      	adds	r7, #16
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	bd80      	pop	{r7, pc}

08019d1e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8019d1e:	b580      	push	{r7, lr}
 8019d20:	b082      	sub	sp, #8
 8019d22:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8019d24:	2300      	movs	r3, #0
 8019d26:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8019d28:	2300      	movs	r3, #0
 8019d2a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8019d30:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019d34:	f000 fe14 	bl	801a960 <SUBGRF_ReadRegister>
 8019d38:	4603      	mov	r3, r0
 8019d3a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8019d3c:	79fb      	ldrb	r3, [r7, #7]
 8019d3e:	f023 0301 	bic.w	r3, r3, #1
 8019d42:	b2db      	uxtb	r3, r3
 8019d44:	4619      	mov	r1, r3
 8019d46:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019d4a:	f000 fde7 	bl	801a91c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8019d4e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019d52:	f000 fe05 	bl	801a960 <SUBGRF_ReadRegister>
 8019d56:	4603      	mov	r3, r0
 8019d58:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8019d5a:	79bb      	ldrb	r3, [r7, #6]
 8019d5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019d60:	b2db      	uxtb	r3, r3
 8019d62:	4619      	mov	r1, r3
 8019d64:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019d68:	f000 fdd8 	bl	801a91c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019d6c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019d70:	f000 f88c 	bl	8019e8c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8019d74:	463b      	mov	r3, r7
 8019d76:	2204      	movs	r2, #4
 8019d78:	4619      	mov	r1, r3
 8019d7a:	f640 0019 	movw	r0, #2073	@ 0x819
 8019d7e:	f000 fe31 	bl	801a9e4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019d82:	2000      	movs	r0, #0
 8019d84:	f000 f846 	bl	8019e14 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8019d88:	79fb      	ldrb	r3, [r7, #7]
 8019d8a:	4619      	mov	r1, r3
 8019d8c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019d90:	f000 fdc4 	bl	801a91c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019d94:	79bb      	ldrb	r3, [r7, #6]
 8019d96:	4619      	mov	r1, r3
 8019d98:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019d9c:	f000 fdbe 	bl	801a91c <SUBGRF_WriteRegister>

    return number;
 8019da0:	683b      	ldr	r3, [r7, #0]
}
 8019da2:	4618      	mov	r0, r3
 8019da4:	3708      	adds	r7, #8
 8019da6:	46bd      	mov	sp, r7
 8019da8:	bd80      	pop	{r7, pc}
	...

08019dac <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019dac:	b580      	push	{r7, lr}
 8019dae:	b084      	sub	sp, #16
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8019db4:	2000      	movs	r0, #0
 8019db6:	f7f1 f952 	bl	800b05e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019dba:	2002      	movs	r0, #2
 8019dbc:	f000 ffc0 	bl	801ad40 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019dc0:	793b      	ldrb	r3, [r7, #4]
 8019dc2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019dc6:	b2db      	uxtb	r3, r3
 8019dc8:	b25b      	sxtb	r3, r3
 8019dca:	009b      	lsls	r3, r3, #2
 8019dcc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019dce:	793b      	ldrb	r3, [r7, #4]
 8019dd0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019dd4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019dd6:	b25b      	sxtb	r3, r3
 8019dd8:	005b      	lsls	r3, r3, #1
 8019dda:	b25b      	sxtb	r3, r3
 8019ddc:	4313      	orrs	r3, r2
 8019dde:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019de0:	793b      	ldrb	r3, [r7, #4]
 8019de2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019de6:	b2db      	uxtb	r3, r3
 8019de8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019dea:	4313      	orrs	r3, r2
 8019dec:	b25b      	sxtb	r3, r3
 8019dee:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019df0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8019df2:	f107 030f 	add.w	r3, r7, #15
 8019df6:	2201      	movs	r2, #1
 8019df8:	4619      	mov	r1, r3
 8019dfa:	2084      	movs	r0, #132	@ 0x84
 8019dfc:	f000 fe58 	bl	801aab0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019e00:	4b03      	ldr	r3, [pc, #12]	@ (8019e10 <SUBGRF_SetSleep+0x64>)
 8019e02:	2200      	movs	r2, #0
 8019e04:	701a      	strb	r2, [r3, #0]
}
 8019e06:	bf00      	nop
 8019e08:	3710      	adds	r7, #16
 8019e0a:	46bd      	mov	sp, r7
 8019e0c:	bd80      	pop	{r7, pc}
 8019e0e:	bf00      	nop
 8019e10:	20001cf4 	.word	0x20001cf4

08019e14 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b082      	sub	sp, #8
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	4603      	mov	r3, r0
 8019e1c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8019e1e:	1dfb      	adds	r3, r7, #7
 8019e20:	2201      	movs	r2, #1
 8019e22:	4619      	mov	r1, r3
 8019e24:	2080      	movs	r0, #128	@ 0x80
 8019e26:	f000 fe43 	bl	801aab0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8019e2a:	79fb      	ldrb	r3, [r7, #7]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d103      	bne.n	8019e38 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8019e30:	4b05      	ldr	r3, [pc, #20]	@ (8019e48 <SUBGRF_SetStandby+0x34>)
 8019e32:	2201      	movs	r2, #1
 8019e34:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8019e36:	e002      	b.n	8019e3e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8019e38:	4b03      	ldr	r3, [pc, #12]	@ (8019e48 <SUBGRF_SetStandby+0x34>)
 8019e3a:	2202      	movs	r2, #2
 8019e3c:	701a      	strb	r2, [r3, #0]
}
 8019e3e:	bf00      	nop
 8019e40:	3708      	adds	r7, #8
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bd80      	pop	{r7, pc}
 8019e46:	bf00      	nop
 8019e48:	20001cf4 	.word	0x20001cf4

08019e4c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b084      	sub	sp, #16
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8019e54:	4b0c      	ldr	r3, [pc, #48]	@ (8019e88 <SUBGRF_SetTx+0x3c>)
 8019e56:	2204      	movs	r2, #4
 8019e58:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	0c1b      	lsrs	r3, r3, #16
 8019e5e:	b2db      	uxtb	r3, r3
 8019e60:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	0a1b      	lsrs	r3, r3, #8
 8019e66:	b2db      	uxtb	r3, r3
 8019e68:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	b2db      	uxtb	r3, r3
 8019e6e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019e70:	f107 030c 	add.w	r3, r7, #12
 8019e74:	2203      	movs	r2, #3
 8019e76:	4619      	mov	r1, r3
 8019e78:	2083      	movs	r0, #131	@ 0x83
 8019e7a:	f000 fe19 	bl	801aab0 <SUBGRF_WriteCommand>
}
 8019e7e:	bf00      	nop
 8019e80:	3710      	adds	r7, #16
 8019e82:	46bd      	mov	sp, r7
 8019e84:	bd80      	pop	{r7, pc}
 8019e86:	bf00      	nop
 8019e88:	20001cf4 	.word	0x20001cf4

08019e8c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8019e8c:	b580      	push	{r7, lr}
 8019e8e:	b084      	sub	sp, #16
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019e94:	4b0c      	ldr	r3, [pc, #48]	@ (8019ec8 <SUBGRF_SetRx+0x3c>)
 8019e96:	2205      	movs	r2, #5
 8019e98:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	0c1b      	lsrs	r3, r3, #16
 8019e9e:	b2db      	uxtb	r3, r3
 8019ea0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	0a1b      	lsrs	r3, r3, #8
 8019ea6:	b2db      	uxtb	r3, r3
 8019ea8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	b2db      	uxtb	r3, r3
 8019eae:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019eb0:	f107 030c 	add.w	r3, r7, #12
 8019eb4:	2203      	movs	r2, #3
 8019eb6:	4619      	mov	r1, r3
 8019eb8:	2082      	movs	r0, #130	@ 0x82
 8019eba:	f000 fdf9 	bl	801aab0 <SUBGRF_WriteCommand>
}
 8019ebe:	bf00      	nop
 8019ec0:	3710      	adds	r7, #16
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	bd80      	pop	{r7, pc}
 8019ec6:	bf00      	nop
 8019ec8:	20001cf4 	.word	0x20001cf4

08019ecc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8019ecc:	b580      	push	{r7, lr}
 8019ece:	b084      	sub	sp, #16
 8019ed0:	af00      	add	r7, sp, #0
 8019ed2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8019f10 <SUBGRF_SetRxBoosted+0x44>)
 8019ed6:	2205      	movs	r2, #5
 8019ed8:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8019eda:	2197      	movs	r1, #151	@ 0x97
 8019edc:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8019ee0:	f000 fd1c 	bl	801a91c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	0c1b      	lsrs	r3, r3, #16
 8019ee8:	b2db      	uxtb	r3, r3
 8019eea:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	0a1b      	lsrs	r3, r3, #8
 8019ef0:	b2db      	uxtb	r3, r3
 8019ef2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	b2db      	uxtb	r3, r3
 8019ef8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019efa:	f107 030c 	add.w	r3, r7, #12
 8019efe:	2203      	movs	r2, #3
 8019f00:	4619      	mov	r1, r3
 8019f02:	2082      	movs	r0, #130	@ 0x82
 8019f04:	f000 fdd4 	bl	801aab0 <SUBGRF_WriteCommand>
}
 8019f08:	bf00      	nop
 8019f0a:	3710      	adds	r7, #16
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	bd80      	pop	{r7, pc}
 8019f10:	20001cf4 	.word	0x20001cf4

08019f14 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019f14:	b580      	push	{r7, lr}
 8019f16:	b084      	sub	sp, #16
 8019f18:	af00      	add	r7, sp, #0
 8019f1a:	6078      	str	r0, [r7, #4]
 8019f1c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	0c1b      	lsrs	r3, r3, #16
 8019f22:	b2db      	uxtb	r3, r3
 8019f24:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	0a1b      	lsrs	r3, r3, #8
 8019f2a:	b2db      	uxtb	r3, r3
 8019f2c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	b2db      	uxtb	r3, r3
 8019f32:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8019f34:	683b      	ldr	r3, [r7, #0]
 8019f36:	0c1b      	lsrs	r3, r3, #16
 8019f38:	b2db      	uxtb	r3, r3
 8019f3a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8019f3c:	683b      	ldr	r3, [r7, #0]
 8019f3e:	0a1b      	lsrs	r3, r3, #8
 8019f40:	b2db      	uxtb	r3, r3
 8019f42:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8019f44:	683b      	ldr	r3, [r7, #0]
 8019f46:	b2db      	uxtb	r3, r3
 8019f48:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8019f4a:	f107 0308 	add.w	r3, r7, #8
 8019f4e:	2206      	movs	r2, #6
 8019f50:	4619      	mov	r1, r3
 8019f52:	2094      	movs	r0, #148	@ 0x94
 8019f54:	f000 fdac 	bl	801aab0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8019f58:	4b03      	ldr	r3, [pc, #12]	@ (8019f68 <SUBGRF_SetRxDutyCycle+0x54>)
 8019f5a:	2206      	movs	r2, #6
 8019f5c:	701a      	strb	r2, [r3, #0]
}
 8019f5e:	bf00      	nop
 8019f60:	3710      	adds	r7, #16
 8019f62:	46bd      	mov	sp, r7
 8019f64:	bd80      	pop	{r7, pc}
 8019f66:	bf00      	nop
 8019f68:	20001cf4 	.word	0x20001cf4

08019f6c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019f70:	2200      	movs	r2, #0
 8019f72:	2100      	movs	r1, #0
 8019f74:	20c5      	movs	r0, #197	@ 0xc5
 8019f76:	f000 fd9b 	bl	801aab0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8019f7a:	4b02      	ldr	r3, [pc, #8]	@ (8019f84 <SUBGRF_SetCad+0x18>)
 8019f7c:	2207      	movs	r2, #7
 8019f7e:	701a      	strb	r2, [r3, #0]
}
 8019f80:	bf00      	nop
 8019f82:	bd80      	pop	{r7, pc}
 8019f84:	20001cf4 	.word	0x20001cf4

08019f88 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8019f8c:	2200      	movs	r2, #0
 8019f8e:	2100      	movs	r1, #0
 8019f90:	20d1      	movs	r0, #209	@ 0xd1
 8019f92:	f000 fd8d 	bl	801aab0 <SUBGRF_WriteCommand>
}
 8019f96:	bf00      	nop
 8019f98:	bd80      	pop	{r7, pc}

08019f9a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8019f9a:	b580      	push	{r7, lr}
 8019f9c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8019f9e:	2200      	movs	r2, #0
 8019fa0:	2100      	movs	r1, #0
 8019fa2:	20d2      	movs	r0, #210	@ 0xd2
 8019fa4:	f000 fd84 	bl	801aab0 <SUBGRF_WriteCommand>
}
 8019fa8:	bf00      	nop
 8019faa:	bd80      	pop	{r7, pc}

08019fac <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b082      	sub	sp, #8
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8019fb6:	1dfb      	adds	r3, r7, #7
 8019fb8:	2201      	movs	r2, #1
 8019fba:	4619      	mov	r1, r3
 8019fbc:	209f      	movs	r0, #159	@ 0x9f
 8019fbe:	f000 fd77 	bl	801aab0 <SUBGRF_WriteCommand>
}
 8019fc2:	bf00      	nop
 8019fc4:	3708      	adds	r7, #8
 8019fc6:	46bd      	mov	sp, r7
 8019fc8:	bd80      	pop	{r7, pc}

08019fca <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8019fca:	b580      	push	{r7, lr}
 8019fcc:	b084      	sub	sp, #16
 8019fce:	af00      	add	r7, sp, #0
 8019fd0:	4603      	mov	r3, r0
 8019fd2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019fd4:	1dfb      	adds	r3, r7, #7
 8019fd6:	2201      	movs	r2, #1
 8019fd8:	4619      	mov	r1, r3
 8019fda:	20a0      	movs	r0, #160	@ 0xa0
 8019fdc:	f000 fd68 	bl	801aab0 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019fe0:	79fb      	ldrb	r3, [r7, #7]
 8019fe2:	2b3f      	cmp	r3, #63	@ 0x3f
 8019fe4:	d91c      	bls.n	801a020 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8019fe6:	79fb      	ldrb	r3, [r7, #7]
 8019fe8:	085b      	lsrs	r3, r3, #1
 8019fea:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019fec:	2300      	movs	r3, #0
 8019fee:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019ff4:	e005      	b.n	801a002 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8019ff6:	7bfb      	ldrb	r3, [r7, #15]
 8019ff8:	089b      	lsrs	r3, r3, #2
 8019ffa:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019ffc:	7bbb      	ldrb	r3, [r7, #14]
 8019ffe:	3301      	adds	r3, #1
 801a000:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801a002:	7bfb      	ldrb	r3, [r7, #15]
 801a004:	2b1f      	cmp	r3, #31
 801a006:	d8f6      	bhi.n	8019ff6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801a008:	7bfb      	ldrb	r3, [r7, #15]
 801a00a:	00db      	lsls	r3, r3, #3
 801a00c:	b2da      	uxtb	r2, r3
 801a00e:	7bbb      	ldrb	r3, [r7, #14]
 801a010:	4413      	add	r3, r2
 801a012:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801a014:	7b7b      	ldrb	r3, [r7, #13]
 801a016:	4619      	mov	r1, r3
 801a018:	f240 7006 	movw	r0, #1798	@ 0x706
 801a01c:	f000 fc7e 	bl	801a91c <SUBGRF_WriteRegister>
    }
}
 801a020:	bf00      	nop
 801a022:	3710      	adds	r7, #16
 801a024:	46bd      	mov	sp, r7
 801a026:	bd80      	pop	{r7, pc}

0801a028 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801a028:	b580      	push	{r7, lr}
 801a02a:	b082      	sub	sp, #8
 801a02c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801a02e:	f7f1 f832 	bl	800b096 <RBI_IsDCDC>
 801a032:	4603      	mov	r3, r0
 801a034:	2b01      	cmp	r3, #1
 801a036:	d102      	bne.n	801a03e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801a038:	2301      	movs	r3, #1
 801a03a:	71fb      	strb	r3, [r7, #7]
 801a03c:	e001      	b.n	801a042 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801a03e:	2300      	movs	r3, #0
 801a040:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801a042:	1dfb      	adds	r3, r7, #7
 801a044:	2201      	movs	r2, #1
 801a046:	4619      	mov	r1, r3
 801a048:	2096      	movs	r0, #150	@ 0x96
 801a04a:	f000 fd31 	bl	801aab0 <SUBGRF_WriteCommand>
}
 801a04e:	bf00      	nop
 801a050:	3708      	adds	r7, #8
 801a052:	46bd      	mov	sp, r7
 801a054:	bd80      	pop	{r7, pc}

0801a056 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801a056:	b580      	push	{r7, lr}
 801a058:	b084      	sub	sp, #16
 801a05a:	af00      	add	r7, sp, #0
 801a05c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a05e:	793b      	ldrb	r3, [r7, #4]
 801a060:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801a064:	b2db      	uxtb	r3, r3
 801a066:	b25b      	sxtb	r3, r3
 801a068:	019b      	lsls	r3, r3, #6
 801a06a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a06c:	793b      	ldrb	r3, [r7, #4]
 801a06e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801a072:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a074:	b25b      	sxtb	r3, r3
 801a076:	015b      	lsls	r3, r3, #5
 801a078:	b25b      	sxtb	r3, r3
 801a07a:	4313      	orrs	r3, r2
 801a07c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a07e:	793b      	ldrb	r3, [r7, #4]
 801a080:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a084:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a086:	b25b      	sxtb	r3, r3
 801a088:	011b      	lsls	r3, r3, #4
 801a08a:	b25b      	sxtb	r3, r3
 801a08c:	4313      	orrs	r3, r2
 801a08e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a090:	793b      	ldrb	r3, [r7, #4]
 801a092:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801a096:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a098:	b25b      	sxtb	r3, r3
 801a09a:	00db      	lsls	r3, r3, #3
 801a09c:	b25b      	sxtb	r3, r3
 801a09e:	4313      	orrs	r3, r2
 801a0a0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a0a2:	793b      	ldrb	r3, [r7, #4]
 801a0a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a0a8:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a0aa:	b25b      	sxtb	r3, r3
 801a0ac:	009b      	lsls	r3, r3, #2
 801a0ae:	b25b      	sxtb	r3, r3
 801a0b0:	4313      	orrs	r3, r2
 801a0b2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a0b4:	793b      	ldrb	r3, [r7, #4]
 801a0b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a0ba:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a0bc:	b25b      	sxtb	r3, r3
 801a0be:	005b      	lsls	r3, r3, #1
 801a0c0:	b25b      	sxtb	r3, r3
 801a0c2:	4313      	orrs	r3, r2
 801a0c4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801a0c6:	793b      	ldrb	r3, [r7, #4]
 801a0c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a0cc:	b2db      	uxtb	r3, r3
 801a0ce:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a0d0:	4313      	orrs	r3, r2
 801a0d2:	b25b      	sxtb	r3, r3
 801a0d4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a0d6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801a0d8:	f107 030f 	add.w	r3, r7, #15
 801a0dc:	2201      	movs	r2, #1
 801a0de:	4619      	mov	r1, r3
 801a0e0:	2089      	movs	r0, #137	@ 0x89
 801a0e2:	f000 fce5 	bl	801aab0 <SUBGRF_WriteCommand>
}
 801a0e6:	bf00      	nop
 801a0e8:	3710      	adds	r7, #16
 801a0ea:	46bd      	mov	sp, r7
 801a0ec:	bd80      	pop	{r7, pc}
	...

0801a0f0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b084      	sub	sp, #16
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	4a1d      	ldr	r2, [pc, #116]	@ (801a170 <SUBGRF_CalibrateImage+0x80>)
 801a0fc:	4293      	cmp	r3, r2
 801a0fe:	d904      	bls.n	801a10a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801a100:	23e1      	movs	r3, #225	@ 0xe1
 801a102:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801a104:	23e9      	movs	r3, #233	@ 0xe9
 801a106:	737b      	strb	r3, [r7, #13]
 801a108:	e027      	b.n	801a15a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	4a19      	ldr	r2, [pc, #100]	@ (801a174 <SUBGRF_CalibrateImage+0x84>)
 801a10e:	4293      	cmp	r3, r2
 801a110:	d904      	bls.n	801a11c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801a112:	23d7      	movs	r3, #215	@ 0xd7
 801a114:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801a116:	23db      	movs	r3, #219	@ 0xdb
 801a118:	737b      	strb	r3, [r7, #13]
 801a11a:	e01e      	b.n	801a15a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	4a16      	ldr	r2, [pc, #88]	@ (801a178 <SUBGRF_CalibrateImage+0x88>)
 801a120:	4293      	cmp	r3, r2
 801a122:	d904      	bls.n	801a12e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801a124:	23c1      	movs	r3, #193	@ 0xc1
 801a126:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801a128:	23c5      	movs	r3, #197	@ 0xc5
 801a12a:	737b      	strb	r3, [r7, #13]
 801a12c:	e015      	b.n	801a15a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	4a12      	ldr	r2, [pc, #72]	@ (801a17c <SUBGRF_CalibrateImage+0x8c>)
 801a132:	4293      	cmp	r3, r2
 801a134:	d904      	bls.n	801a140 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801a136:	2375      	movs	r3, #117	@ 0x75
 801a138:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801a13a:	2381      	movs	r3, #129	@ 0x81
 801a13c:	737b      	strb	r3, [r7, #13]
 801a13e:	e00c      	b.n	801a15a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	4a0f      	ldr	r2, [pc, #60]	@ (801a180 <SUBGRF_CalibrateImage+0x90>)
 801a144:	4293      	cmp	r3, r2
 801a146:	d904      	bls.n	801a152 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801a148:	236b      	movs	r3, #107	@ 0x6b
 801a14a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801a14c:	236f      	movs	r3, #111	@ 0x6f
 801a14e:	737b      	strb	r3, [r7, #13]
 801a150:	e003      	b.n	801a15a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801a152:	2329      	movs	r3, #41	@ 0x29
 801a154:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801a156:	232b      	movs	r3, #43	@ 0x2b
 801a158:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801a15a:	f107 030c 	add.w	r3, r7, #12
 801a15e:	2202      	movs	r2, #2
 801a160:	4619      	mov	r1, r3
 801a162:	2098      	movs	r0, #152	@ 0x98
 801a164:	f000 fca4 	bl	801aab0 <SUBGRF_WriteCommand>
}
 801a168:	bf00      	nop
 801a16a:	3710      	adds	r7, #16
 801a16c:	46bd      	mov	sp, r7
 801a16e:	bd80      	pop	{r7, pc}
 801a170:	35a4e900 	.word	0x35a4e900
 801a174:	32a9f880 	.word	0x32a9f880
 801a178:	2de54480 	.word	0x2de54480
 801a17c:	1b6b0b00 	.word	0x1b6b0b00
 801a180:	1954fc40 	.word	0x1954fc40

0801a184 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801a184:	b590      	push	{r4, r7, lr}
 801a186:	b085      	sub	sp, #20
 801a188:	af00      	add	r7, sp, #0
 801a18a:	4604      	mov	r4, r0
 801a18c:	4608      	mov	r0, r1
 801a18e:	4611      	mov	r1, r2
 801a190:	461a      	mov	r2, r3
 801a192:	4623      	mov	r3, r4
 801a194:	71fb      	strb	r3, [r7, #7]
 801a196:	4603      	mov	r3, r0
 801a198:	71bb      	strb	r3, [r7, #6]
 801a19a:	460b      	mov	r3, r1
 801a19c:	717b      	strb	r3, [r7, #5]
 801a19e:	4613      	mov	r3, r2
 801a1a0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801a1a2:	79fb      	ldrb	r3, [r7, #7]
 801a1a4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801a1a6:	79bb      	ldrb	r3, [r7, #6]
 801a1a8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801a1aa:	797b      	ldrb	r3, [r7, #5]
 801a1ac:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801a1ae:	793b      	ldrb	r3, [r7, #4]
 801a1b0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801a1b2:	f107 030c 	add.w	r3, r7, #12
 801a1b6:	2204      	movs	r2, #4
 801a1b8:	4619      	mov	r1, r3
 801a1ba:	2095      	movs	r0, #149	@ 0x95
 801a1bc:	f000 fc78 	bl	801aab0 <SUBGRF_WriteCommand>
}
 801a1c0:	bf00      	nop
 801a1c2:	3714      	adds	r7, #20
 801a1c4:	46bd      	mov	sp, r7
 801a1c6:	bd90      	pop	{r4, r7, pc}

0801a1c8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801a1c8:	b590      	push	{r4, r7, lr}
 801a1ca:	b085      	sub	sp, #20
 801a1cc:	af00      	add	r7, sp, #0
 801a1ce:	4604      	mov	r4, r0
 801a1d0:	4608      	mov	r0, r1
 801a1d2:	4611      	mov	r1, r2
 801a1d4:	461a      	mov	r2, r3
 801a1d6:	4623      	mov	r3, r4
 801a1d8:	80fb      	strh	r3, [r7, #6]
 801a1da:	4603      	mov	r3, r0
 801a1dc:	80bb      	strh	r3, [r7, #4]
 801a1de:	460b      	mov	r3, r1
 801a1e0:	807b      	strh	r3, [r7, #2]
 801a1e2:	4613      	mov	r3, r2
 801a1e4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801a1e6:	88fb      	ldrh	r3, [r7, #6]
 801a1e8:	0a1b      	lsrs	r3, r3, #8
 801a1ea:	b29b      	uxth	r3, r3
 801a1ec:	b2db      	uxtb	r3, r3
 801a1ee:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801a1f0:	88fb      	ldrh	r3, [r7, #6]
 801a1f2:	b2db      	uxtb	r3, r3
 801a1f4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801a1f6:	88bb      	ldrh	r3, [r7, #4]
 801a1f8:	0a1b      	lsrs	r3, r3, #8
 801a1fa:	b29b      	uxth	r3, r3
 801a1fc:	b2db      	uxtb	r3, r3
 801a1fe:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801a200:	88bb      	ldrh	r3, [r7, #4]
 801a202:	b2db      	uxtb	r3, r3
 801a204:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801a206:	887b      	ldrh	r3, [r7, #2]
 801a208:	0a1b      	lsrs	r3, r3, #8
 801a20a:	b29b      	uxth	r3, r3
 801a20c:	b2db      	uxtb	r3, r3
 801a20e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801a210:	887b      	ldrh	r3, [r7, #2]
 801a212:	b2db      	uxtb	r3, r3
 801a214:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801a216:	883b      	ldrh	r3, [r7, #0]
 801a218:	0a1b      	lsrs	r3, r3, #8
 801a21a:	b29b      	uxth	r3, r3
 801a21c:	b2db      	uxtb	r3, r3
 801a21e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801a220:	883b      	ldrh	r3, [r7, #0]
 801a222:	b2db      	uxtb	r3, r3
 801a224:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801a226:	f107 0308 	add.w	r3, r7, #8
 801a22a:	2208      	movs	r2, #8
 801a22c:	4619      	mov	r1, r3
 801a22e:	2008      	movs	r0, #8
 801a230:	f000 fc3e 	bl	801aab0 <SUBGRF_WriteCommand>
}
 801a234:	bf00      	nop
 801a236:	3714      	adds	r7, #20
 801a238:	46bd      	mov	sp, r7
 801a23a:	bd90      	pop	{r4, r7, pc}

0801a23c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801a23c:	b580      	push	{r7, lr}
 801a23e:	b084      	sub	sp, #16
 801a240:	af00      	add	r7, sp, #0
 801a242:	4603      	mov	r3, r0
 801a244:	6039      	str	r1, [r7, #0]
 801a246:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801a248:	79fb      	ldrb	r3, [r7, #7]
 801a24a:	f003 0307 	and.w	r3, r3, #7
 801a24e:	b2db      	uxtb	r3, r3
 801a250:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a252:	683b      	ldr	r3, [r7, #0]
 801a254:	0c1b      	lsrs	r3, r3, #16
 801a256:	b2db      	uxtb	r3, r3
 801a258:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a25a:	683b      	ldr	r3, [r7, #0]
 801a25c:	0a1b      	lsrs	r3, r3, #8
 801a25e:	b2db      	uxtb	r3, r3
 801a260:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801a262:	683b      	ldr	r3, [r7, #0]
 801a264:	b2db      	uxtb	r3, r3
 801a266:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801a268:	f107 030c 	add.w	r3, r7, #12
 801a26c:	2204      	movs	r2, #4
 801a26e:	4619      	mov	r1, r3
 801a270:	2097      	movs	r0, #151	@ 0x97
 801a272:	f000 fc1d 	bl	801aab0 <SUBGRF_WriteCommand>
}
 801a276:	bf00      	nop
 801a278:	3710      	adds	r7, #16
 801a27a:	46bd      	mov	sp, r7
 801a27c:	bd80      	pop	{r7, pc}
	...

0801a280 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801a280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a284:	b084      	sub	sp, #16
 801a286:	af00      	add	r7, sp, #0
 801a288:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801a28a:	2300      	movs	r3, #0
 801a28c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801a28e:	4b1d      	ldr	r3, [pc, #116]	@ (801a304 <SUBGRF_SetRfFrequency+0x84>)
 801a290:	781b      	ldrb	r3, [r3, #0]
 801a292:	f083 0301 	eor.w	r3, r3, #1
 801a296:	b2db      	uxtb	r3, r3
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d005      	beq.n	801a2a8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801a29c:	6878      	ldr	r0, [r7, #4]
 801a29e:	f7ff ff27 	bl	801a0f0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801a2a2:	4b18      	ldr	r3, [pc, #96]	@ (801a304 <SUBGRF_SetRfFrequency+0x84>)
 801a2a4:	2201      	movs	r2, #1
 801a2a6:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	2200      	movs	r2, #0
 801a2ac:	461c      	mov	r4, r3
 801a2ae:	4615      	mov	r5, r2
 801a2b0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a2b4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a2b8:	4a13      	ldr	r2, [pc, #76]	@ (801a308 <SUBGRF_SetRfFrequency+0x88>)
 801a2ba:	f04f 0300 	mov.w	r3, #0
 801a2be:	4640      	mov	r0, r8
 801a2c0:	4649      	mov	r1, r9
 801a2c2:	f7e6 fc71 	bl	8000ba8 <__aeabi_uldivmod>
 801a2c6:	4602      	mov	r2, r0
 801a2c8:	460b      	mov	r3, r1
 801a2ca:	4613      	mov	r3, r2
 801a2cc:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801a2ce:	68fb      	ldr	r3, [r7, #12]
 801a2d0:	0e1b      	lsrs	r3, r3, #24
 801a2d2:	b2db      	uxtb	r3, r3
 801a2d4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801a2d6:	68fb      	ldr	r3, [r7, #12]
 801a2d8:	0c1b      	lsrs	r3, r3, #16
 801a2da:	b2db      	uxtb	r3, r3
 801a2dc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	0a1b      	lsrs	r3, r3, #8
 801a2e2:	b2db      	uxtb	r3, r3
 801a2e4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	b2db      	uxtb	r3, r3
 801a2ea:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801a2ec:	f107 0308 	add.w	r3, r7, #8
 801a2f0:	2204      	movs	r2, #4
 801a2f2:	4619      	mov	r1, r3
 801a2f4:	2086      	movs	r0, #134	@ 0x86
 801a2f6:	f000 fbdb 	bl	801aab0 <SUBGRF_WriteCommand>
}
 801a2fa:	bf00      	nop
 801a2fc:	3710      	adds	r7, #16
 801a2fe:	46bd      	mov	sp, r7
 801a300:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a304:	20001cfc 	.word	0x20001cfc
 801a308:	01e84800 	.word	0x01e84800

0801a30c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801a30c:	b580      	push	{r7, lr}
 801a30e:	b082      	sub	sp, #8
 801a310:	af00      	add	r7, sp, #0
 801a312:	4603      	mov	r3, r0
 801a314:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801a316:	79fa      	ldrb	r2, [r7, #7]
 801a318:	4b09      	ldr	r3, [pc, #36]	@ (801a340 <SUBGRF_SetPacketType+0x34>)
 801a31a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801a31c:	79fb      	ldrb	r3, [r7, #7]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d104      	bne.n	801a32c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801a322:	2100      	movs	r1, #0
 801a324:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801a328:	f000 faf8 	bl	801a91c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801a32c:	1dfb      	adds	r3, r7, #7
 801a32e:	2201      	movs	r2, #1
 801a330:	4619      	mov	r1, r3
 801a332:	208a      	movs	r0, #138	@ 0x8a
 801a334:	f000 fbbc 	bl	801aab0 <SUBGRF_WriteCommand>
}
 801a338:	bf00      	nop
 801a33a:	3708      	adds	r7, #8
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}
 801a340:	20001cf5 	.word	0x20001cf5

0801a344 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801a344:	b480      	push	{r7}
 801a346:	af00      	add	r7, sp, #0
    return PacketType;
 801a348:	4b02      	ldr	r3, [pc, #8]	@ (801a354 <SUBGRF_GetPacketType+0x10>)
 801a34a:	781b      	ldrb	r3, [r3, #0]
}
 801a34c:	4618      	mov	r0, r3
 801a34e:	46bd      	mov	sp, r7
 801a350:	bc80      	pop	{r7}
 801a352:	4770      	bx	lr
 801a354:	20001cf5 	.word	0x20001cf5

0801a358 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801a358:	b580      	push	{r7, lr}
 801a35a:	b084      	sub	sp, #16
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	4603      	mov	r3, r0
 801a360:	71fb      	strb	r3, [r7, #7]
 801a362:	460b      	mov	r3, r1
 801a364:	71bb      	strb	r3, [r7, #6]
 801a366:	4613      	mov	r3, r2
 801a368:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801a36a:	79fb      	ldrb	r3, [r7, #7]
 801a36c:	2b01      	cmp	r3, #1
 801a36e:	d149      	bne.n	801a404 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801a370:	2000      	movs	r0, #0
 801a372:	f7f0 fe97 	bl	800b0a4 <RBI_GetRFOMaxPowerConfig>
 801a376:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801a378:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a37c:	68fa      	ldr	r2, [r7, #12]
 801a37e:	429a      	cmp	r2, r3
 801a380:	da01      	bge.n	801a386 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	2b0e      	cmp	r3, #14
 801a38a:	d10e      	bne.n	801a3aa <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801a38c:	2301      	movs	r3, #1
 801a38e:	2201      	movs	r2, #1
 801a390:	2100      	movs	r1, #0
 801a392:	2004      	movs	r0, #4
 801a394:	f7ff fef6 	bl	801a184 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a398:	79ba      	ldrb	r2, [r7, #6]
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	b2db      	uxtb	r3, r3
 801a39e:	1ad3      	subs	r3, r2, r3
 801a3a0:	b2db      	uxtb	r3, r3
 801a3a2:	330e      	adds	r3, #14
 801a3a4:	b2db      	uxtb	r3, r3
 801a3a6:	71bb      	strb	r3, [r7, #6]
 801a3a8:	e01f      	b.n	801a3ea <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801a3aa:	68fb      	ldr	r3, [r7, #12]
 801a3ac:	2b0a      	cmp	r3, #10
 801a3ae:	d10e      	bne.n	801a3ce <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801a3b0:	2301      	movs	r3, #1
 801a3b2:	2201      	movs	r2, #1
 801a3b4:	2100      	movs	r1, #0
 801a3b6:	2001      	movs	r0, #1
 801a3b8:	f7ff fee4 	bl	801a184 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801a3bc:	79ba      	ldrb	r2, [r7, #6]
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	b2db      	uxtb	r3, r3
 801a3c2:	1ad3      	subs	r3, r2, r3
 801a3c4:	b2db      	uxtb	r3, r3
 801a3c6:	330d      	adds	r3, #13
 801a3c8:	b2db      	uxtb	r3, r3
 801a3ca:	71bb      	strb	r3, [r7, #6]
 801a3cc:	e00d      	b.n	801a3ea <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801a3ce:	2301      	movs	r3, #1
 801a3d0:	2201      	movs	r2, #1
 801a3d2:	2100      	movs	r1, #0
 801a3d4:	2007      	movs	r0, #7
 801a3d6:	f7ff fed5 	bl	801a184 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a3da:	79ba      	ldrb	r2, [r7, #6]
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	b2db      	uxtb	r3, r3
 801a3e0:	1ad3      	subs	r3, r2, r3
 801a3e2:	b2db      	uxtb	r3, r3
 801a3e4:	330e      	adds	r3, #14
 801a3e6:	b2db      	uxtb	r3, r3
 801a3e8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801a3ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a3ee:	f113 0f11 	cmn.w	r3, #17
 801a3f2:	da01      	bge.n	801a3f8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801a3f4:	23ef      	movs	r3, #239	@ 0xef
 801a3f6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801a3f8:	2118      	movs	r1, #24
 801a3fa:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a3fe:	f000 fa8d 	bl	801a91c <SUBGRF_WriteRegister>
 801a402:	e067      	b.n	801a4d4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801a404:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a408:	f000 faaa 	bl	801a960 <SUBGRF_ReadRegister>
 801a40c:	4603      	mov	r3, r0
 801a40e:	f043 031e 	orr.w	r3, r3, #30
 801a412:	b2db      	uxtb	r3, r3
 801a414:	4619      	mov	r1, r3
 801a416:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a41a:	f000 fa7f 	bl	801a91c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801a41e:	2001      	movs	r0, #1
 801a420:	f7f0 fe40 	bl	800b0a4 <RBI_GetRFOMaxPowerConfig>
 801a424:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801a426:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a42a:	68fa      	ldr	r2, [r7, #12]
 801a42c:	429a      	cmp	r2, r3
 801a42e:	da01      	bge.n	801a434 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	2b14      	cmp	r3, #20
 801a438:	d10e      	bne.n	801a458 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801a43a:	2301      	movs	r3, #1
 801a43c:	2200      	movs	r2, #0
 801a43e:	2105      	movs	r1, #5
 801a440:	2003      	movs	r0, #3
 801a442:	f7ff fe9f 	bl	801a184 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a446:	79ba      	ldrb	r2, [r7, #6]
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	b2db      	uxtb	r3, r3
 801a44c:	1ad3      	subs	r3, r2, r3
 801a44e:	b2db      	uxtb	r3, r3
 801a450:	3316      	adds	r3, #22
 801a452:	b2db      	uxtb	r3, r3
 801a454:	71bb      	strb	r3, [r7, #6]
 801a456:	e031      	b.n	801a4bc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801a458:	68fb      	ldr	r3, [r7, #12]
 801a45a:	2b11      	cmp	r3, #17
 801a45c:	d10e      	bne.n	801a47c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801a45e:	2301      	movs	r3, #1
 801a460:	2200      	movs	r2, #0
 801a462:	2103      	movs	r1, #3
 801a464:	2002      	movs	r0, #2
 801a466:	f7ff fe8d 	bl	801a184 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a46a:	79ba      	ldrb	r2, [r7, #6]
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	b2db      	uxtb	r3, r3
 801a470:	1ad3      	subs	r3, r2, r3
 801a472:	b2db      	uxtb	r3, r3
 801a474:	3316      	adds	r3, #22
 801a476:	b2db      	uxtb	r3, r3
 801a478:	71bb      	strb	r3, [r7, #6]
 801a47a:	e01f      	b.n	801a4bc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	2b0e      	cmp	r3, #14
 801a480:	d10e      	bne.n	801a4a0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801a482:	2301      	movs	r3, #1
 801a484:	2200      	movs	r2, #0
 801a486:	2102      	movs	r1, #2
 801a488:	2002      	movs	r0, #2
 801a48a:	f7ff fe7b 	bl	801a184 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a48e:	79ba      	ldrb	r2, [r7, #6]
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	b2db      	uxtb	r3, r3
 801a494:	1ad3      	subs	r3, r2, r3
 801a496:	b2db      	uxtb	r3, r3
 801a498:	330e      	adds	r3, #14
 801a49a:	b2db      	uxtb	r3, r3
 801a49c:	71bb      	strb	r3, [r7, #6]
 801a49e:	e00d      	b.n	801a4bc <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801a4a0:	2301      	movs	r3, #1
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	2107      	movs	r1, #7
 801a4a6:	2004      	movs	r0, #4
 801a4a8:	f7ff fe6c 	bl	801a184 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a4ac:	79ba      	ldrb	r2, [r7, #6]
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	b2db      	uxtb	r3, r3
 801a4b2:	1ad3      	subs	r3, r2, r3
 801a4b4:	b2db      	uxtb	r3, r3
 801a4b6:	3316      	adds	r3, #22
 801a4b8:	b2db      	uxtb	r3, r3
 801a4ba:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801a4bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a4c0:	f113 0f09 	cmn.w	r3, #9
 801a4c4:	da01      	bge.n	801a4ca <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801a4c6:	23f7      	movs	r3, #247	@ 0xf7
 801a4c8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801a4ca:	2138      	movs	r1, #56	@ 0x38
 801a4cc:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a4d0:	f000 fa24 	bl	801a91c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801a4d4:	79bb      	ldrb	r3, [r7, #6]
 801a4d6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801a4d8:	797b      	ldrb	r3, [r7, #5]
 801a4da:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801a4dc:	f107 0308 	add.w	r3, r7, #8
 801a4e0:	2202      	movs	r2, #2
 801a4e2:	4619      	mov	r1, r3
 801a4e4:	208e      	movs	r0, #142	@ 0x8e
 801a4e6:	f000 fae3 	bl	801aab0 <SUBGRF_WriteCommand>
}
 801a4ea:	bf00      	nop
 801a4ec:	3710      	adds	r7, #16
 801a4ee:	46bd      	mov	sp, r7
 801a4f0:	bd80      	pop	{r7, pc}
	...

0801a4f4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801a4f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a4f8:	b086      	sub	sp, #24
 801a4fa:	af00      	add	r7, sp, #0
 801a4fc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801a4fe:	2300      	movs	r3, #0
 801a500:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a502:	f107 0308 	add.w	r3, r7, #8
 801a506:	2200      	movs	r2, #0
 801a508:	601a      	str	r2, [r3, #0]
 801a50a:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	781a      	ldrb	r2, [r3, #0]
 801a510:	4b5c      	ldr	r3, [pc, #368]	@ (801a684 <SUBGRF_SetModulationParams+0x190>)
 801a512:	781b      	ldrb	r3, [r3, #0]
 801a514:	429a      	cmp	r2, r3
 801a516:	d004      	beq.n	801a522 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	781b      	ldrb	r3, [r3, #0]
 801a51c:	4618      	mov	r0, r3
 801a51e:	f7ff fef5 	bl	801a30c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	781b      	ldrb	r3, [r3, #0]
 801a526:	2b03      	cmp	r3, #3
 801a528:	f200 80a5 	bhi.w	801a676 <SUBGRF_SetModulationParams+0x182>
 801a52c:	a201      	add	r2, pc, #4	@ (adr r2, 801a534 <SUBGRF_SetModulationParams+0x40>)
 801a52e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a532:	bf00      	nop
 801a534:	0801a545 	.word	0x0801a545
 801a538:	0801a605 	.word	0x0801a605
 801a53c:	0801a5c7 	.word	0x0801a5c7
 801a540:	0801a633 	.word	0x0801a633
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801a544:	2308      	movs	r3, #8
 801a546:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	685b      	ldr	r3, [r3, #4]
 801a54c:	4a4e      	ldr	r2, [pc, #312]	@ (801a688 <SUBGRF_SetModulationParams+0x194>)
 801a54e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a552:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a554:	697b      	ldr	r3, [r7, #20]
 801a556:	0c1b      	lsrs	r3, r3, #16
 801a558:	b2db      	uxtb	r3, r3
 801a55a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a55c:	697b      	ldr	r3, [r7, #20]
 801a55e:	0a1b      	lsrs	r3, r3, #8
 801a560:	b2db      	uxtb	r3, r3
 801a562:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a564:	697b      	ldr	r3, [r7, #20]
 801a566:	b2db      	uxtb	r3, r3
 801a568:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	7b1b      	ldrb	r3, [r3, #12]
 801a56e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	7b5b      	ldrb	r3, [r3, #13]
 801a574:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	689b      	ldr	r3, [r3, #8]
 801a57a:	2200      	movs	r2, #0
 801a57c:	461c      	mov	r4, r3
 801a57e:	4615      	mov	r5, r2
 801a580:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a584:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a588:	4a40      	ldr	r2, [pc, #256]	@ (801a68c <SUBGRF_SetModulationParams+0x198>)
 801a58a:	f04f 0300 	mov.w	r3, #0
 801a58e:	4640      	mov	r0, r8
 801a590:	4649      	mov	r1, r9
 801a592:	f7e6 fb09 	bl	8000ba8 <__aeabi_uldivmod>
 801a596:	4602      	mov	r2, r0
 801a598:	460b      	mov	r3, r1
 801a59a:	4613      	mov	r3, r2
 801a59c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801a59e:	697b      	ldr	r3, [r7, #20]
 801a5a0:	0c1b      	lsrs	r3, r3, #16
 801a5a2:	b2db      	uxtb	r3, r3
 801a5a4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801a5a6:	697b      	ldr	r3, [r7, #20]
 801a5a8:	0a1b      	lsrs	r3, r3, #8
 801a5aa:	b2db      	uxtb	r3, r3
 801a5ac:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801a5ae:	697b      	ldr	r3, [r7, #20]
 801a5b0:	b2db      	uxtb	r3, r3
 801a5b2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a5b4:	7cfb      	ldrb	r3, [r7, #19]
 801a5b6:	b29a      	uxth	r2, r3
 801a5b8:	f107 0308 	add.w	r3, r7, #8
 801a5bc:	4619      	mov	r1, r3
 801a5be:	208b      	movs	r0, #139	@ 0x8b
 801a5c0:	f000 fa76 	bl	801aab0 <SUBGRF_WriteCommand>
        break;
 801a5c4:	e058      	b.n	801a678 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 801a5c6:	2304      	movs	r3, #4
 801a5c8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	691b      	ldr	r3, [r3, #16]
 801a5ce:	4a2e      	ldr	r2, [pc, #184]	@ (801a688 <SUBGRF_SetModulationParams+0x194>)
 801a5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 801a5d4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a5d6:	697b      	ldr	r3, [r7, #20]
 801a5d8:	0c1b      	lsrs	r3, r3, #16
 801a5da:	b2db      	uxtb	r3, r3
 801a5dc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a5de:	697b      	ldr	r3, [r7, #20]
 801a5e0:	0a1b      	lsrs	r3, r3, #8
 801a5e2:	b2db      	uxtb	r3, r3
 801a5e4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a5e6:	697b      	ldr	r3, [r7, #20]
 801a5e8:	b2db      	uxtb	r3, r3
 801a5ea:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	7d1b      	ldrb	r3, [r3, #20]
 801a5f0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a5f2:	7cfb      	ldrb	r3, [r7, #19]
 801a5f4:	b29a      	uxth	r2, r3
 801a5f6:	f107 0308 	add.w	r3, r7, #8
 801a5fa:	4619      	mov	r1, r3
 801a5fc:	208b      	movs	r0, #139	@ 0x8b
 801a5fe:	f000 fa57 	bl	801aab0 <SUBGRF_WriteCommand>
        break;
 801a602:	e039      	b.n	801a678 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 801a604:	2304      	movs	r3, #4
 801a606:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	7e1b      	ldrb	r3, [r3, #24]
 801a60c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	7e5b      	ldrb	r3, [r3, #25]
 801a612:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	7e9b      	ldrb	r3, [r3, #26]
 801a618:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	7edb      	ldrb	r3, [r3, #27]
 801a61e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a620:	7cfb      	ldrb	r3, [r7, #19]
 801a622:	b29a      	uxth	r2, r3
 801a624:	f107 0308 	add.w	r3, r7, #8
 801a628:	4619      	mov	r1, r3
 801a62a:	208b      	movs	r0, #139	@ 0x8b
 801a62c:	f000 fa40 	bl	801aab0 <SUBGRF_WriteCommand>

        break;
 801a630:	e022      	b.n	801a678 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 801a632:	2305      	movs	r3, #5
 801a634:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	685b      	ldr	r3, [r3, #4]
 801a63a:	4a13      	ldr	r2, [pc, #76]	@ (801a688 <SUBGRF_SetModulationParams+0x194>)
 801a63c:	fbb2 f3f3 	udiv	r3, r2, r3
 801a640:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a642:	697b      	ldr	r3, [r7, #20]
 801a644:	0c1b      	lsrs	r3, r3, #16
 801a646:	b2db      	uxtb	r3, r3
 801a648:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a64a:	697b      	ldr	r3, [r7, #20]
 801a64c:	0a1b      	lsrs	r3, r3, #8
 801a64e:	b2db      	uxtb	r3, r3
 801a650:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a652:	697b      	ldr	r3, [r7, #20]
 801a654:	b2db      	uxtb	r3, r3
 801a656:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	7b1b      	ldrb	r3, [r3, #12]
 801a65c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	7b5b      	ldrb	r3, [r3, #13]
 801a662:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a664:	7cfb      	ldrb	r3, [r7, #19]
 801a666:	b29a      	uxth	r2, r3
 801a668:	f107 0308 	add.w	r3, r7, #8
 801a66c:	4619      	mov	r1, r3
 801a66e:	208b      	movs	r0, #139	@ 0x8b
 801a670:	f000 fa1e 	bl	801aab0 <SUBGRF_WriteCommand>
        break;
 801a674:	e000      	b.n	801a678 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 801a676:	bf00      	nop
    }
}
 801a678:	bf00      	nop
 801a67a:	3718      	adds	r7, #24
 801a67c:	46bd      	mov	sp, r7
 801a67e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a682:	bf00      	nop
 801a684:	20001cf5 	.word	0x20001cf5
 801a688:	3d090000 	.word	0x3d090000
 801a68c:	01e84800 	.word	0x01e84800

0801a690 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b086      	sub	sp, #24
 801a694:	af00      	add	r7, sp, #0
 801a696:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801a698:	2300      	movs	r3, #0
 801a69a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a69c:	f107 030c 	add.w	r3, r7, #12
 801a6a0:	2200      	movs	r2, #0
 801a6a2:	601a      	str	r2, [r3, #0]
 801a6a4:	605a      	str	r2, [r3, #4]
 801a6a6:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	781a      	ldrb	r2, [r3, #0]
 801a6ac:	4b44      	ldr	r3, [pc, #272]	@ (801a7c0 <SUBGRF_SetPacketParams+0x130>)
 801a6ae:	781b      	ldrb	r3, [r3, #0]
 801a6b0:	429a      	cmp	r2, r3
 801a6b2:	d004      	beq.n	801a6be <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	781b      	ldrb	r3, [r3, #0]
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	f7ff fe27 	bl	801a30c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	781b      	ldrb	r3, [r3, #0]
 801a6c2:	2b03      	cmp	r3, #3
 801a6c4:	d878      	bhi.n	801a7b8 <SUBGRF_SetPacketParams+0x128>
 801a6c6:	a201      	add	r2, pc, #4	@ (adr r2, 801a6cc <SUBGRF_SetPacketParams+0x3c>)
 801a6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a6cc:	0801a6dd 	.word	0x0801a6dd
 801a6d0:	0801a76d 	.word	0x0801a76d
 801a6d4:	0801a761 	.word	0x0801a761
 801a6d8:	0801a6dd 	.word	0x0801a6dd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	7a5b      	ldrb	r3, [r3, #9]
 801a6e0:	2bf1      	cmp	r3, #241	@ 0xf1
 801a6e2:	d10a      	bne.n	801a6fa <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801a6e4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801a6e8:	f7ff faa6 	bl	8019c38 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801a6ec:	f248 0005 	movw	r0, #32773	@ 0x8005
 801a6f0:	f7ff fac2 	bl	8019c78 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801a6f4:	2302      	movs	r3, #2
 801a6f6:	75bb      	strb	r3, [r7, #22]
 801a6f8:	e011      	b.n	801a71e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	7a5b      	ldrb	r3, [r3, #9]
 801a6fe:	2bf2      	cmp	r3, #242	@ 0xf2
 801a700:	d10a      	bne.n	801a718 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801a702:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801a706:	f7ff fa97 	bl	8019c38 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801a70a:	f241 0021 	movw	r0, #4129	@ 0x1021
 801a70e:	f7ff fab3 	bl	8019c78 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801a712:	2306      	movs	r3, #6
 801a714:	75bb      	strb	r3, [r7, #22]
 801a716:	e002      	b.n	801a71e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	7a5b      	ldrb	r3, [r3, #9]
 801a71c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801a71e:	2309      	movs	r3, #9
 801a720:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	885b      	ldrh	r3, [r3, #2]
 801a726:	0a1b      	lsrs	r3, r3, #8
 801a728:	b29b      	uxth	r3, r3
 801a72a:	b2db      	uxtb	r3, r3
 801a72c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	885b      	ldrh	r3, [r3, #2]
 801a732:	b2db      	uxtb	r3, r3
 801a734:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	791b      	ldrb	r3, [r3, #4]
 801a73a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	795b      	ldrb	r3, [r3, #5]
 801a740:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	799b      	ldrb	r3, [r3, #6]
 801a746:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	79db      	ldrb	r3, [r3, #7]
 801a74c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	7a1b      	ldrb	r3, [r3, #8]
 801a752:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801a754:	7dbb      	ldrb	r3, [r7, #22]
 801a756:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	7a9b      	ldrb	r3, [r3, #10]
 801a75c:	753b      	strb	r3, [r7, #20]
        break;
 801a75e:	e022      	b.n	801a7a6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801a760:	2301      	movs	r3, #1
 801a762:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	7b1b      	ldrb	r3, [r3, #12]
 801a768:	733b      	strb	r3, [r7, #12]
        break;
 801a76a:	e01c      	b.n	801a7a6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801a76c:	2306      	movs	r3, #6
 801a76e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	89db      	ldrh	r3, [r3, #14]
 801a774:	0a1b      	lsrs	r3, r3, #8
 801a776:	b29b      	uxth	r3, r3
 801a778:	b2db      	uxtb	r3, r3
 801a77a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	89db      	ldrh	r3, [r3, #14]
 801a780:	b2db      	uxtb	r3, r3
 801a782:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	7c1a      	ldrb	r2, [r3, #16]
 801a788:	4b0e      	ldr	r3, [pc, #56]	@ (801a7c4 <SUBGRF_SetPacketParams+0x134>)
 801a78a:	4611      	mov	r1, r2
 801a78c:	7019      	strb	r1, [r3, #0]
 801a78e:	4613      	mov	r3, r2
 801a790:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	7c5b      	ldrb	r3, [r3, #17]
 801a796:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	7c9b      	ldrb	r3, [r3, #18]
 801a79c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	7cdb      	ldrb	r3, [r3, #19]
 801a7a2:	747b      	strb	r3, [r7, #17]
        break;
 801a7a4:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801a7a6:	7dfb      	ldrb	r3, [r7, #23]
 801a7a8:	b29a      	uxth	r2, r3
 801a7aa:	f107 030c 	add.w	r3, r7, #12
 801a7ae:	4619      	mov	r1, r3
 801a7b0:	208c      	movs	r0, #140	@ 0x8c
 801a7b2:	f000 f97d 	bl	801aab0 <SUBGRF_WriteCommand>
 801a7b6:	e000      	b.n	801a7ba <SUBGRF_SetPacketParams+0x12a>
        return;
 801a7b8:	bf00      	nop
}
 801a7ba:	3718      	adds	r7, #24
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	bd80      	pop	{r7, pc}
 801a7c0:	20001cf5 	.word	0x20001cf5
 801a7c4:	20001cf6 	.word	0x20001cf6

0801a7c8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801a7c8:	b580      	push	{r7, lr}
 801a7ca:	b084      	sub	sp, #16
 801a7cc:	af00      	add	r7, sp, #0
 801a7ce:	4603      	mov	r3, r0
 801a7d0:	460a      	mov	r2, r1
 801a7d2:	71fb      	strb	r3, [r7, #7]
 801a7d4:	4613      	mov	r3, r2
 801a7d6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801a7d8:	79fb      	ldrb	r3, [r7, #7]
 801a7da:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801a7dc:	79bb      	ldrb	r3, [r7, #6]
 801a7de:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801a7e0:	f107 030c 	add.w	r3, r7, #12
 801a7e4:	2202      	movs	r2, #2
 801a7e6:	4619      	mov	r1, r3
 801a7e8:	208f      	movs	r0, #143	@ 0x8f
 801a7ea:	f000 f961 	bl	801aab0 <SUBGRF_WriteCommand>
}
 801a7ee:	bf00      	nop
 801a7f0:	3710      	adds	r7, #16
 801a7f2:	46bd      	mov	sp, r7
 801a7f4:	bd80      	pop	{r7, pc}

0801a7f6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801a7f6:	b580      	push	{r7, lr}
 801a7f8:	b082      	sub	sp, #8
 801a7fa:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801a800:	1d3b      	adds	r3, r7, #4
 801a802:	2201      	movs	r2, #1
 801a804:	4619      	mov	r1, r3
 801a806:	2015      	movs	r0, #21
 801a808:	f000 f974 	bl	801aaf4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801a80c:	793b      	ldrb	r3, [r7, #4]
 801a80e:	425b      	negs	r3, r3
 801a810:	105b      	asrs	r3, r3, #1
 801a812:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801a814:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a818:	4618      	mov	r0, r3
 801a81a:	3708      	adds	r7, #8
 801a81c:	46bd      	mov	sp, r7
 801a81e:	bd80      	pop	{r7, pc}

0801a820 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801a820:	b580      	push	{r7, lr}
 801a822:	b084      	sub	sp, #16
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
 801a828:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801a82a:	f107 030c 	add.w	r3, r7, #12
 801a82e:	2202      	movs	r2, #2
 801a830:	4619      	mov	r1, r3
 801a832:	2013      	movs	r0, #19
 801a834:	f000 f95e 	bl	801aaf4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801a838:	f7ff fd84 	bl	801a344 <SUBGRF_GetPacketType>
 801a83c:	4603      	mov	r3, r0
 801a83e:	2b01      	cmp	r3, #1
 801a840:	d10d      	bne.n	801a85e <SUBGRF_GetRxBufferStatus+0x3e>
 801a842:	4b0c      	ldr	r3, [pc, #48]	@ (801a874 <SUBGRF_GetRxBufferStatus+0x54>)
 801a844:	781b      	ldrb	r3, [r3, #0]
 801a846:	b2db      	uxtb	r3, r3
 801a848:	2b01      	cmp	r3, #1
 801a84a:	d108      	bne.n	801a85e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801a84c:	f240 7002 	movw	r0, #1794	@ 0x702
 801a850:	f000 f886 	bl	801a960 <SUBGRF_ReadRegister>
 801a854:	4603      	mov	r3, r0
 801a856:	461a      	mov	r2, r3
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	701a      	strb	r2, [r3, #0]
 801a85c:	e002      	b.n	801a864 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801a85e:	7b3a      	ldrb	r2, [r7, #12]
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801a864:	7b7a      	ldrb	r2, [r7, #13]
 801a866:	683b      	ldr	r3, [r7, #0]
 801a868:	701a      	strb	r2, [r3, #0]
}
 801a86a:	bf00      	nop
 801a86c:	3710      	adds	r7, #16
 801a86e:	46bd      	mov	sp, r7
 801a870:	bd80      	pop	{r7, pc}
 801a872:	bf00      	nop
 801a874:	20001cf6 	.word	0x20001cf6

0801a878 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801a878:	b580      	push	{r7, lr}
 801a87a:	b084      	sub	sp, #16
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801a880:	f107 030c 	add.w	r3, r7, #12
 801a884:	2203      	movs	r2, #3
 801a886:	4619      	mov	r1, r3
 801a888:	2014      	movs	r0, #20
 801a88a:	f000 f933 	bl	801aaf4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801a88e:	f7ff fd59 	bl	801a344 <SUBGRF_GetPacketType>
 801a892:	4603      	mov	r3, r0
 801a894:	461a      	mov	r2, r3
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	781b      	ldrb	r3, [r3, #0]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d002      	beq.n	801a8a8 <SUBGRF_GetPacketStatus+0x30>
 801a8a2:	2b01      	cmp	r3, #1
 801a8a4:	d013      	beq.n	801a8ce <SUBGRF_GetPacketStatus+0x56>
 801a8a6:	e02a      	b.n	801a8fe <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801a8a8:	7b3a      	ldrb	r2, [r7, #12]
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801a8ae:	7b7b      	ldrb	r3, [r7, #13]
 801a8b0:	425b      	negs	r3, r3
 801a8b2:	105b      	asrs	r3, r3, #1
 801a8b4:	b25a      	sxtb	r2, r3
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801a8ba:	7bbb      	ldrb	r3, [r7, #14]
 801a8bc:	425b      	negs	r3, r3
 801a8be:	105b      	asrs	r3, r3, #1
 801a8c0:	b25a      	sxtb	r2, r3
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	609a      	str	r2, [r3, #8]
            break;
 801a8cc:	e020      	b.n	801a910 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801a8ce:	7b3b      	ldrb	r3, [r7, #12]
 801a8d0:	425b      	negs	r3, r3
 801a8d2:	105b      	asrs	r3, r3, #1
 801a8d4:	b25a      	sxtb	r2, r3
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801a8da:	7b7b      	ldrb	r3, [r7, #13]
 801a8dc:	b25b      	sxtb	r3, r3
 801a8de:	3302      	adds	r3, #2
 801a8e0:	109b      	asrs	r3, r3, #2
 801a8e2:	b25a      	sxtb	r2, r3
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801a8e8:	7bbb      	ldrb	r3, [r7, #14]
 801a8ea:	425b      	negs	r3, r3
 801a8ec:	105b      	asrs	r3, r3, #1
 801a8ee:	b25a      	sxtb	r2, r3
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801a8f4:	4b08      	ldr	r3, [pc, #32]	@ (801a918 <SUBGRF_GetPacketStatus+0xa0>)
 801a8f6:	681a      	ldr	r2, [r3, #0]
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	611a      	str	r2, [r3, #16]
            break;
 801a8fc:	e008      	b.n	801a910 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801a8fe:	2214      	movs	r2, #20
 801a900:	2100      	movs	r1, #0
 801a902:	6878      	ldr	r0, [r7, #4]
 801a904:	f000 fc1d 	bl	801b142 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	220f      	movs	r2, #15
 801a90c:	701a      	strb	r2, [r3, #0]
            break;
 801a90e:	bf00      	nop
    }
}
 801a910:	bf00      	nop
 801a912:	3710      	adds	r7, #16
 801a914:	46bd      	mov	sp, r7
 801a916:	bd80      	pop	{r7, pc}
 801a918:	20001cf8 	.word	0x20001cf8

0801a91c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b086      	sub	sp, #24
 801a920:	af00      	add	r7, sp, #0
 801a922:	4603      	mov	r3, r0
 801a924:	460a      	mov	r2, r1
 801a926:	80fb      	strh	r3, [r7, #6]
 801a928:	4613      	mov	r3, r2
 801a92a:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a92c:	f3ef 8310 	mrs	r3, PRIMASK
 801a930:	60fb      	str	r3, [r7, #12]
  return(result);
 801a932:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a936:	b672      	cpsid	i
}
 801a938:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801a93a:	1d7a      	adds	r2, r7, #5
 801a93c:	88f9      	ldrh	r1, [r7, #6]
 801a93e:	2301      	movs	r3, #1
 801a940:	4806      	ldr	r0, [pc, #24]	@ (801a95c <SUBGRF_WriteRegister+0x40>)
 801a942:	f7ec ff07 	bl	8007754 <HAL_SUBGHZ_WriteRegisters>
 801a946:	697b      	ldr	r3, [r7, #20]
 801a948:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a94a:	693b      	ldr	r3, [r7, #16]
 801a94c:	f383 8810 	msr	PRIMASK, r3
}
 801a950:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a952:	bf00      	nop
 801a954:	3718      	adds	r7, #24
 801a956:	46bd      	mov	sp, r7
 801a958:	bd80      	pop	{r7, pc}
 801a95a:	bf00      	nop
 801a95c:	20000258 	.word	0x20000258

0801a960 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801a960:	b580      	push	{r7, lr}
 801a962:	b086      	sub	sp, #24
 801a964:	af00      	add	r7, sp, #0
 801a966:	4603      	mov	r3, r0
 801a968:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a96a:	f3ef 8310 	mrs	r3, PRIMASK
 801a96e:	60fb      	str	r3, [r7, #12]
  return(result);
 801a970:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 801a972:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a974:	b672      	cpsid	i
}
 801a976:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801a978:	f107 020b 	add.w	r2, r7, #11
 801a97c:	88f9      	ldrh	r1, [r7, #6]
 801a97e:	2301      	movs	r3, #1
 801a980:	4806      	ldr	r0, [pc, #24]	@ (801a99c <SUBGRF_ReadRegister+0x3c>)
 801a982:	f7ec ff46 	bl	8007812 <HAL_SUBGHZ_ReadRegisters>
 801a986:	697b      	ldr	r3, [r7, #20]
 801a988:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a98a:	693b      	ldr	r3, [r7, #16]
 801a98c:	f383 8810 	msr	PRIMASK, r3
}
 801a990:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 801a992:	7afb      	ldrb	r3, [r7, #11]
}
 801a994:	4618      	mov	r0, r3
 801a996:	3718      	adds	r7, #24
 801a998:	46bd      	mov	sp, r7
 801a99a:	bd80      	pop	{r7, pc}
 801a99c:	20000258 	.word	0x20000258

0801a9a0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a9a0:	b580      	push	{r7, lr}
 801a9a2:	b086      	sub	sp, #24
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	6039      	str	r1, [r7, #0]
 801a9aa:	80fb      	strh	r3, [r7, #6]
 801a9ac:	4613      	mov	r3, r2
 801a9ae:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9b0:	f3ef 8310 	mrs	r3, PRIMASK
 801a9b4:	60fb      	str	r3, [r7, #12]
  return(result);
 801a9b6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a9b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9ba:	b672      	cpsid	i
}
 801a9bc:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801a9be:	88bb      	ldrh	r3, [r7, #4]
 801a9c0:	88f9      	ldrh	r1, [r7, #6]
 801a9c2:	683a      	ldr	r2, [r7, #0]
 801a9c4:	4806      	ldr	r0, [pc, #24]	@ (801a9e0 <SUBGRF_WriteRegisters+0x40>)
 801a9c6:	f7ec fec5 	bl	8007754 <HAL_SUBGHZ_WriteRegisters>
 801a9ca:	697b      	ldr	r3, [r7, #20]
 801a9cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9ce:	693b      	ldr	r3, [r7, #16]
 801a9d0:	f383 8810 	msr	PRIMASK, r3
}
 801a9d4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a9d6:	bf00      	nop
 801a9d8:	3718      	adds	r7, #24
 801a9da:	46bd      	mov	sp, r7
 801a9dc:	bd80      	pop	{r7, pc}
 801a9de:	bf00      	nop
 801a9e0:	20000258 	.word	0x20000258

0801a9e4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b086      	sub	sp, #24
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	4603      	mov	r3, r0
 801a9ec:	6039      	str	r1, [r7, #0]
 801a9ee:	80fb      	strh	r3, [r7, #6]
 801a9f0:	4613      	mov	r3, r2
 801a9f2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9f4:	f3ef 8310 	mrs	r3, PRIMASK
 801a9f8:	60fb      	str	r3, [r7, #12]
  return(result);
 801a9fa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a9fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9fe:	b672      	cpsid	i
}
 801aa00:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801aa02:	88bb      	ldrh	r3, [r7, #4]
 801aa04:	88f9      	ldrh	r1, [r7, #6]
 801aa06:	683a      	ldr	r2, [r7, #0]
 801aa08:	4806      	ldr	r0, [pc, #24]	@ (801aa24 <SUBGRF_ReadRegisters+0x40>)
 801aa0a:	f7ec ff02 	bl	8007812 <HAL_SUBGHZ_ReadRegisters>
 801aa0e:	697b      	ldr	r3, [r7, #20]
 801aa10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa12:	693b      	ldr	r3, [r7, #16]
 801aa14:	f383 8810 	msr	PRIMASK, r3
}
 801aa18:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801aa1a:	bf00      	nop
 801aa1c:	3718      	adds	r7, #24
 801aa1e:	46bd      	mov	sp, r7
 801aa20:	bd80      	pop	{r7, pc}
 801aa22:	bf00      	nop
 801aa24:	20000258 	.word	0x20000258

0801aa28 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801aa28:	b580      	push	{r7, lr}
 801aa2a:	b086      	sub	sp, #24
 801aa2c:	af00      	add	r7, sp, #0
 801aa2e:	4603      	mov	r3, r0
 801aa30:	6039      	str	r1, [r7, #0]
 801aa32:	71fb      	strb	r3, [r7, #7]
 801aa34:	4613      	mov	r3, r2
 801aa36:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa38:	f3ef 8310 	mrs	r3, PRIMASK
 801aa3c:	60fb      	str	r3, [r7, #12]
  return(result);
 801aa3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801aa40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa42:	b672      	cpsid	i
}
 801aa44:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801aa46:	79bb      	ldrb	r3, [r7, #6]
 801aa48:	b29b      	uxth	r3, r3
 801aa4a:	79f9      	ldrb	r1, [r7, #7]
 801aa4c:	683a      	ldr	r2, [r7, #0]
 801aa4e:	4806      	ldr	r0, [pc, #24]	@ (801aa68 <SUBGRF_WriteBuffer+0x40>)
 801aa50:	f7ec fff3 	bl	8007a3a <HAL_SUBGHZ_WriteBuffer>
 801aa54:	697b      	ldr	r3, [r7, #20]
 801aa56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa58:	693b      	ldr	r3, [r7, #16]
 801aa5a:	f383 8810 	msr	PRIMASK, r3
}
 801aa5e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801aa60:	bf00      	nop
 801aa62:	3718      	adds	r7, #24
 801aa64:	46bd      	mov	sp, r7
 801aa66:	bd80      	pop	{r7, pc}
 801aa68:	20000258 	.word	0x20000258

0801aa6c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	b086      	sub	sp, #24
 801aa70:	af00      	add	r7, sp, #0
 801aa72:	4603      	mov	r3, r0
 801aa74:	6039      	str	r1, [r7, #0]
 801aa76:	71fb      	strb	r3, [r7, #7]
 801aa78:	4613      	mov	r3, r2
 801aa7a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa7c:	f3ef 8310 	mrs	r3, PRIMASK
 801aa80:	60fb      	str	r3, [r7, #12]
  return(result);
 801aa82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801aa84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa86:	b672      	cpsid	i
}
 801aa88:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801aa8a:	79bb      	ldrb	r3, [r7, #6]
 801aa8c:	b29b      	uxth	r3, r3
 801aa8e:	79f9      	ldrb	r1, [r7, #7]
 801aa90:	683a      	ldr	r2, [r7, #0]
 801aa92:	4806      	ldr	r0, [pc, #24]	@ (801aaac <SUBGRF_ReadBuffer+0x40>)
 801aa94:	f7ed f824 	bl	8007ae0 <HAL_SUBGHZ_ReadBuffer>
 801aa98:	697b      	ldr	r3, [r7, #20]
 801aa9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa9c:	693b      	ldr	r3, [r7, #16]
 801aa9e:	f383 8810 	msr	PRIMASK, r3
}
 801aaa2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801aaa4:	bf00      	nop
 801aaa6:	3718      	adds	r7, #24
 801aaa8:	46bd      	mov	sp, r7
 801aaaa:	bd80      	pop	{r7, pc}
 801aaac:	20000258 	.word	0x20000258

0801aab0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801aab0:	b580      	push	{r7, lr}
 801aab2:	b086      	sub	sp, #24
 801aab4:	af00      	add	r7, sp, #0
 801aab6:	4603      	mov	r3, r0
 801aab8:	6039      	str	r1, [r7, #0]
 801aaba:	71fb      	strb	r3, [r7, #7]
 801aabc:	4613      	mov	r3, r2
 801aabe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aac0:	f3ef 8310 	mrs	r3, PRIMASK
 801aac4:	60fb      	str	r3, [r7, #12]
  return(result);
 801aac6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801aac8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aaca:	b672      	cpsid	i
}
 801aacc:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801aace:	88bb      	ldrh	r3, [r7, #4]
 801aad0:	79f9      	ldrb	r1, [r7, #7]
 801aad2:	683a      	ldr	r2, [r7, #0]
 801aad4:	4806      	ldr	r0, [pc, #24]	@ (801aaf0 <SUBGRF_WriteCommand+0x40>)
 801aad6:	f7ec fefd 	bl	80078d4 <HAL_SUBGHZ_ExecSetCmd>
 801aada:	697b      	ldr	r3, [r7, #20]
 801aadc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aade:	693b      	ldr	r3, [r7, #16]
 801aae0:	f383 8810 	msr	PRIMASK, r3
}
 801aae4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801aae6:	bf00      	nop
 801aae8:	3718      	adds	r7, #24
 801aaea:	46bd      	mov	sp, r7
 801aaec:	bd80      	pop	{r7, pc}
 801aaee:	bf00      	nop
 801aaf0:	20000258 	.word	0x20000258

0801aaf4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b086      	sub	sp, #24
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	4603      	mov	r3, r0
 801aafc:	6039      	str	r1, [r7, #0]
 801aafe:	71fb      	strb	r3, [r7, #7]
 801ab00:	4613      	mov	r3, r2
 801ab02:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab04:	f3ef 8310 	mrs	r3, PRIMASK
 801ab08:	60fb      	str	r3, [r7, #12]
  return(result);
 801ab0a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ab0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab0e:	b672      	cpsid	i
}
 801ab10:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801ab12:	88bb      	ldrh	r3, [r7, #4]
 801ab14:	79f9      	ldrb	r1, [r7, #7]
 801ab16:	683a      	ldr	r2, [r7, #0]
 801ab18:	4806      	ldr	r0, [pc, #24]	@ (801ab34 <SUBGRF_ReadCommand+0x40>)
 801ab1a:	f7ec ff3a 	bl	8007992 <HAL_SUBGHZ_ExecGetCmd>
 801ab1e:	697b      	ldr	r3, [r7, #20]
 801ab20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab22:	693b      	ldr	r3, [r7, #16]
 801ab24:	f383 8810 	msr	PRIMASK, r3
}
 801ab28:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ab2a:	bf00      	nop
 801ab2c:	3718      	adds	r7, #24
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	bd80      	pop	{r7, pc}
 801ab32:	bf00      	nop
 801ab34:	20000258 	.word	0x20000258

0801ab38 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b084      	sub	sp, #16
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	4603      	mov	r3, r0
 801ab40:	460a      	mov	r2, r1
 801ab42:	71fb      	strb	r3, [r7, #7]
 801ab44:	4613      	mov	r3, r2
 801ab46:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801ab48:	2301      	movs	r3, #1
 801ab4a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801ab4c:	79bb      	ldrb	r3, [r7, #6]
 801ab4e:	2b01      	cmp	r3, #1
 801ab50:	d10d      	bne.n	801ab6e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801ab52:	79fb      	ldrb	r3, [r7, #7]
 801ab54:	2b01      	cmp	r3, #1
 801ab56:	d104      	bne.n	801ab62 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801ab58:	2302      	movs	r3, #2
 801ab5a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801ab5c:	2004      	movs	r0, #4
 801ab5e:	f000 f8ef 	bl	801ad40 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801ab62:	79fb      	ldrb	r3, [r7, #7]
 801ab64:	2b02      	cmp	r3, #2
 801ab66:	d107      	bne.n	801ab78 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801ab68:	2303      	movs	r3, #3
 801ab6a:	73fb      	strb	r3, [r7, #15]
 801ab6c:	e004      	b.n	801ab78 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801ab6e:	79bb      	ldrb	r3, [r7, #6]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d101      	bne.n	801ab78 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801ab74:	2301      	movs	r3, #1
 801ab76:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801ab78:	7bfb      	ldrb	r3, [r7, #15]
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	f7f0 fa6f 	bl	800b05e <RBI_ConfigRFSwitch>
}
 801ab80:	bf00      	nop
 801ab82:	3710      	adds	r7, #16
 801ab84:	46bd      	mov	sp, r7
 801ab86:	bd80      	pop	{r7, pc}

0801ab88 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801ab88:	b580      	push	{r7, lr}
 801ab8a:	b084      	sub	sp, #16
 801ab8c:	af00      	add	r7, sp, #0
 801ab8e:	4603      	mov	r3, r0
 801ab90:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801ab92:	2301      	movs	r3, #1
 801ab94:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801ab96:	f7f0 fa70 	bl	800b07a <RBI_GetTxConfig>
 801ab9a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801ab9c:	68bb      	ldr	r3, [r7, #8]
 801ab9e:	2b02      	cmp	r3, #2
 801aba0:	d016      	beq.n	801abd0 <SUBGRF_SetRfTxPower+0x48>
 801aba2:	68bb      	ldr	r3, [r7, #8]
 801aba4:	2b02      	cmp	r3, #2
 801aba6:	dc16      	bgt.n	801abd6 <SUBGRF_SetRfTxPower+0x4e>
 801aba8:	68bb      	ldr	r3, [r7, #8]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d003      	beq.n	801abb6 <SUBGRF_SetRfTxPower+0x2e>
 801abae:	68bb      	ldr	r3, [r7, #8]
 801abb0:	2b01      	cmp	r3, #1
 801abb2:	d00a      	beq.n	801abca <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801abb4:	e00f      	b.n	801abd6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801abb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801abba:	2b0f      	cmp	r3, #15
 801abbc:	dd02      	ble.n	801abc4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801abbe:	2302      	movs	r3, #2
 801abc0:	73fb      	strb	r3, [r7, #15]
            break;
 801abc2:	e009      	b.n	801abd8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801abc4:	2301      	movs	r3, #1
 801abc6:	73fb      	strb	r3, [r7, #15]
            break;
 801abc8:	e006      	b.n	801abd8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801abca:	2301      	movs	r3, #1
 801abcc:	73fb      	strb	r3, [r7, #15]
            break;
 801abce:	e003      	b.n	801abd8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801abd0:	2302      	movs	r3, #2
 801abd2:	73fb      	strb	r3, [r7, #15]
            break;
 801abd4:	e000      	b.n	801abd8 <SUBGRF_SetRfTxPower+0x50>
            break;
 801abd6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801abd8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801abdc:	7bfb      	ldrb	r3, [r7, #15]
 801abde:	2202      	movs	r2, #2
 801abe0:	4618      	mov	r0, r3
 801abe2:	f7ff fbb9 	bl	801a358 <SUBGRF_SetTxParams>

    return paSelect;
 801abe6:	7bfb      	ldrb	r3, [r7, #15]
}
 801abe8:	4618      	mov	r0, r3
 801abea:	3710      	adds	r7, #16
 801abec:	46bd      	mov	sp, r7
 801abee:	bd80      	pop	{r7, pc}

0801abf0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801abf0:	b480      	push	{r7}
 801abf2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801abf4:	2301      	movs	r3, #1
}
 801abf6:	4618      	mov	r0, r3
 801abf8:	46bd      	mov	sp, r7
 801abfa:	bc80      	pop	{r7}
 801abfc:	4770      	bx	lr
	...

0801ac00 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ac00:	b580      	push	{r7, lr}
 801ac02:	b082      	sub	sp, #8
 801ac04:	af00      	add	r7, sp, #0
 801ac06:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801ac08:	4b03      	ldr	r3, [pc, #12]	@ (801ac18 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	2001      	movs	r0, #1
 801ac0e:	4798      	blx	r3
}
 801ac10:	bf00      	nop
 801ac12:	3708      	adds	r7, #8
 801ac14:	46bd      	mov	sp, r7
 801ac16:	bd80      	pop	{r7, pc}
 801ac18:	20001d00 	.word	0x20001d00

0801ac1c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ac1c:	b580      	push	{r7, lr}
 801ac1e:	b082      	sub	sp, #8
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801ac24:	4b03      	ldr	r3, [pc, #12]	@ (801ac34 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	2002      	movs	r0, #2
 801ac2a:	4798      	blx	r3
}
 801ac2c:	bf00      	nop
 801ac2e:	3708      	adds	r7, #8
 801ac30:	46bd      	mov	sp, r7
 801ac32:	bd80      	pop	{r7, pc}
 801ac34:	20001d00 	.word	0x20001d00

0801ac38 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	b082      	sub	sp, #8
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801ac40:	4b03      	ldr	r3, [pc, #12]	@ (801ac50 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	2040      	movs	r0, #64	@ 0x40
 801ac46:	4798      	blx	r3
}
 801ac48:	bf00      	nop
 801ac4a:	3708      	adds	r7, #8
 801ac4c:	46bd      	mov	sp, r7
 801ac4e:	bd80      	pop	{r7, pc}
 801ac50:	20001d00 	.word	0x20001d00

0801ac54 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801ac54:	b580      	push	{r7, lr}
 801ac56:	b082      	sub	sp, #8
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	6078      	str	r0, [r7, #4]
 801ac5c:	460b      	mov	r3, r1
 801ac5e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801ac60:	78fb      	ldrb	r3, [r7, #3]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d002      	beq.n	801ac6c <HAL_SUBGHZ_CADStatusCallback+0x18>
 801ac66:	2b01      	cmp	r3, #1
 801ac68:	d005      	beq.n	801ac76 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801ac6a:	e00a      	b.n	801ac82 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801ac6c:	4b07      	ldr	r3, [pc, #28]	@ (801ac8c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	2080      	movs	r0, #128	@ 0x80
 801ac72:	4798      	blx	r3
            break;
 801ac74:	e005      	b.n	801ac82 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801ac76:	4b05      	ldr	r3, [pc, #20]	@ (801ac8c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801ac7e:	4798      	blx	r3
            break;
 801ac80:	bf00      	nop
    }
}
 801ac82:	bf00      	nop
 801ac84:	3708      	adds	r7, #8
 801ac86:	46bd      	mov	sp, r7
 801ac88:	bd80      	pop	{r7, pc}
 801ac8a:	bf00      	nop
 801ac8c:	20001d00 	.word	0x20001d00

0801ac90 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ac90:	b580      	push	{r7, lr}
 801ac92:	b082      	sub	sp, #8
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801ac98:	4b04      	ldr	r3, [pc, #16]	@ (801acac <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801aca0:	4798      	blx	r3
}
 801aca2:	bf00      	nop
 801aca4:	3708      	adds	r7, #8
 801aca6:	46bd      	mov	sp, r7
 801aca8:	bd80      	pop	{r7, pc}
 801acaa:	bf00      	nop
 801acac:	20001d00 	.word	0x20001d00

0801acb0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801acb0:	b580      	push	{r7, lr}
 801acb2:	b082      	sub	sp, #8
 801acb4:	af00      	add	r7, sp, #0
 801acb6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801acb8:	4b03      	ldr	r3, [pc, #12]	@ (801acc8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	2020      	movs	r0, #32
 801acbe:	4798      	blx	r3
}
 801acc0:	bf00      	nop
 801acc2:	3708      	adds	r7, #8
 801acc4:	46bd      	mov	sp, r7
 801acc6:	bd80      	pop	{r7, pc}
 801acc8:	20001d00 	.word	0x20001d00

0801accc <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801accc:	b580      	push	{r7, lr}
 801acce:	b082      	sub	sp, #8
 801acd0:	af00      	add	r7, sp, #0
 801acd2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801acd4:	4b03      	ldr	r3, [pc, #12]	@ (801ace4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	2004      	movs	r0, #4
 801acda:	4798      	blx	r3
}
 801acdc:	bf00      	nop
 801acde:	3708      	adds	r7, #8
 801ace0:	46bd      	mov	sp, r7
 801ace2:	bd80      	pop	{r7, pc}
 801ace4:	20001d00 	.word	0x20001d00

0801ace8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b082      	sub	sp, #8
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801acf0:	4b03      	ldr	r3, [pc, #12]	@ (801ad00 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	2008      	movs	r0, #8
 801acf6:	4798      	blx	r3
}
 801acf8:	bf00      	nop
 801acfa:	3708      	adds	r7, #8
 801acfc:	46bd      	mov	sp, r7
 801acfe:	bd80      	pop	{r7, pc}
 801ad00:	20001d00 	.word	0x20001d00

0801ad04 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ad04:	b580      	push	{r7, lr}
 801ad06:	b082      	sub	sp, #8
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801ad0c:	4b03      	ldr	r3, [pc, #12]	@ (801ad1c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	2010      	movs	r0, #16
 801ad12:	4798      	blx	r3
}
 801ad14:	bf00      	nop
 801ad16:	3708      	adds	r7, #8
 801ad18:	46bd      	mov	sp, r7
 801ad1a:	bd80      	pop	{r7, pc}
 801ad1c:	20001d00 	.word	0x20001d00

0801ad20 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b082      	sub	sp, #8
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801ad28:	4b04      	ldr	r3, [pc, #16]	@ (801ad3c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801ad30:	4798      	blx	r3
}
 801ad32:	bf00      	nop
 801ad34:	3708      	adds	r7, #8
 801ad36:	46bd      	mov	sp, r7
 801ad38:	bd80      	pop	{r7, pc}
 801ad3a:	bf00      	nop
 801ad3c:	20001d00 	.word	0x20001d00

0801ad40 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801ad40:	b580      	push	{r7, lr}
 801ad42:	b084      	sub	sp, #16
 801ad44:	af00      	add	r7, sp, #0
 801ad46:	4603      	mov	r3, r0
 801ad48:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801ad4a:	f7f0 f9a4 	bl	800b096 <RBI_IsDCDC>
 801ad4e:	4603      	mov	r3, r0
 801ad50:	2b01      	cmp	r3, #1
 801ad52:	d112      	bne.n	801ad7a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801ad54:	f640 1023 	movw	r0, #2339	@ 0x923
 801ad58:	f7ff fe02 	bl	801a960 <SUBGRF_ReadRegister>
 801ad5c:	4603      	mov	r3, r0
 801ad5e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801ad60:	7bfb      	ldrb	r3, [r7, #15]
 801ad62:	f023 0306 	bic.w	r3, r3, #6
 801ad66:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801ad68:	7bfa      	ldrb	r2, [r7, #15]
 801ad6a:	79fb      	ldrb	r3, [r7, #7]
 801ad6c:	4313      	orrs	r3, r2
 801ad6e:	b2db      	uxtb	r3, r3
 801ad70:	4619      	mov	r1, r3
 801ad72:	f640 1023 	movw	r0, #2339	@ 0x923
 801ad76:	f7ff fdd1 	bl	801a91c <SUBGRF_WriteRegister>
  }
}
 801ad7a:	bf00      	nop
 801ad7c:	3710      	adds	r7, #16
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bd80      	pop	{r7, pc}
	...

0801ad84 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801ad84:	b480      	push	{r7}
 801ad86:	b085      	sub	sp, #20
 801ad88:	af00      	add	r7, sp, #0
 801ad8a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d101      	bne.n	801ad96 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801ad92:	231f      	movs	r3, #31
 801ad94:	e017      	b.n	801adc6 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801ad96:	2300      	movs	r3, #0
 801ad98:	73fb      	strb	r3, [r7, #15]
 801ad9a:	e00f      	b.n	801adbc <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801ad9c:	7bfb      	ldrb	r3, [r7, #15]
 801ad9e:	4a0c      	ldr	r2, [pc, #48]	@ (801add0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ada0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ada4:	687a      	ldr	r2, [r7, #4]
 801ada6:	429a      	cmp	r2, r3
 801ada8:	d205      	bcs.n	801adb6 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801adaa:	7bfb      	ldrb	r3, [r7, #15]
 801adac:	4a08      	ldr	r2, [pc, #32]	@ (801add0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801adae:	00db      	lsls	r3, r3, #3
 801adb0:	4413      	add	r3, r2
 801adb2:	791b      	ldrb	r3, [r3, #4]
 801adb4:	e007      	b.n	801adc6 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801adb6:	7bfb      	ldrb	r3, [r7, #15]
 801adb8:	3301      	adds	r3, #1
 801adba:	73fb      	strb	r3, [r7, #15]
 801adbc:	7bfb      	ldrb	r3, [r7, #15]
 801adbe:	2b15      	cmp	r3, #21
 801adc0:	d9ec      	bls.n	801ad9c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801adc2:	bf00      	nop
 801adc4:	e7fd      	b.n	801adc2 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801adc6:	4618      	mov	r0, r3
 801adc8:	3714      	adds	r7, #20
 801adca:	46bd      	mov	sp, r7
 801adcc:	bc80      	pop	{r7}
 801adce:	4770      	bx	lr
 801add0:	0801d59c 	.word	0x0801d59c

0801add4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801add4:	b580      	push	{r7, lr}
 801add6:	b08a      	sub	sp, #40	@ 0x28
 801add8:	af00      	add	r7, sp, #0
 801adda:	6078      	str	r0, [r7, #4]
 801addc:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801adde:	4b35      	ldr	r3, [pc, #212]	@ (801aeb4 <SUBGRF_GetCFO+0xe0>)
 801ade0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801ade2:	f640 0007 	movw	r0, #2055	@ 0x807
 801ade6:	f7ff fdbb 	bl	801a960 <SUBGRF_ReadRegister>
 801adea:	4603      	mov	r3, r0
 801adec:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801adee:	7ffb      	ldrb	r3, [r7, #31]
 801adf0:	08db      	lsrs	r3, r3, #3
 801adf2:	b2db      	uxtb	r3, r3
 801adf4:	f003 0303 	and.w	r3, r3, #3
 801adf8:	3328      	adds	r3, #40	@ 0x28
 801adfa:	443b      	add	r3, r7
 801adfc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801ae00:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801ae02:	7ffb      	ldrb	r3, [r7, #31]
 801ae04:	f003 0307 	and.w	r3, r3, #7
 801ae08:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801ae0a:	7fba      	ldrb	r2, [r7, #30]
 801ae0c:	7f7b      	ldrb	r3, [r7, #29]
 801ae0e:	3301      	adds	r3, #1
 801ae10:	fa02 f303 	lsl.w	r3, r2, r3
 801ae14:	461a      	mov	r2, r3
 801ae16:	4b28      	ldr	r3, [pc, #160]	@ (801aeb8 <SUBGRF_GetCFO+0xe4>)
 801ae18:	fbb3 f3f2 	udiv	r3, r3, r2
 801ae1c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801ae1e:	69ba      	ldr	r2, [r7, #24]
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	fbb2 f3f3 	udiv	r3, r2, r3
 801ae26:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801ae28:	2301      	movs	r3, #1
 801ae2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801ae2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ae32:	697a      	ldr	r2, [r7, #20]
 801ae34:	fb02 f303 	mul.w	r3, r2, r3
 801ae38:	2b07      	cmp	r3, #7
 801ae3a:	d802      	bhi.n	801ae42 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801ae3c:	2302      	movs	r3, #2
 801ae3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801ae42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ae46:	697a      	ldr	r2, [r7, #20]
 801ae48:	fb02 f303 	mul.w	r3, r2, r3
 801ae4c:	2b03      	cmp	r3, #3
 801ae4e:	d802      	bhi.n	801ae56 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801ae50:	2304      	movs	r3, #4
 801ae52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801ae56:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ae5a:	69bb      	ldr	r3, [r7, #24]
 801ae5c:	fb02 f303 	mul.w	r3, r2, r3
 801ae60:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801ae62:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801ae66:	f7ff fd7b 	bl	801a960 <SUBGRF_ReadRegister>
 801ae6a:	4603      	mov	r3, r0
 801ae6c:	021b      	lsls	r3, r3, #8
 801ae6e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801ae72:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801ae74:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801ae78:	f7ff fd72 	bl	801a960 <SUBGRF_ReadRegister>
 801ae7c:	4603      	mov	r3, r0
 801ae7e:	461a      	mov	r2, r3
 801ae80:	6a3b      	ldr	r3, [r7, #32]
 801ae82:	4313      	orrs	r3, r2
 801ae84:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ae86:	6a3b      	ldr	r3, [r7, #32]
 801ae88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d005      	beq.n	801ae9c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ae90:	6a3b      	ldr	r3, [r7, #32]
 801ae92:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ae96:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ae9a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ae9c:	693b      	ldr	r3, [r7, #16]
 801ae9e:	095b      	lsrs	r3, r3, #5
 801aea0:	6a3a      	ldr	r2, [r7, #32]
 801aea2:	fb02 f303 	mul.w	r3, r2, r3
 801aea6:	11da      	asrs	r2, r3, #7
 801aea8:	683b      	ldr	r3, [r7, #0]
 801aeaa:	601a      	str	r2, [r3, #0]
}
 801aeac:	bf00      	nop
 801aeae:	3728      	adds	r7, #40	@ 0x28
 801aeb0:	46bd      	mov	sp, r7
 801aeb2:	bd80      	pop	{r7, pc}
 801aeb4:	0c0a0804 	.word	0x0c0a0804
 801aeb8:	01e84800 	.word	0x01e84800

0801aebc <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801aebc:	b480      	push	{r7}
 801aebe:	b087      	sub	sp, #28
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	4603      	mov	r3, r0
 801aec4:	60b9      	str	r1, [r7, #8]
 801aec6:	607a      	str	r2, [r7, #4]
 801aec8:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801aeca:	2300      	movs	r3, #0
 801aecc:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801aece:	f04f 33ff 	mov.w	r3, #4294967295
 801aed2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801aed4:	697b      	ldr	r3, [r7, #20]
}
 801aed6:	4618      	mov	r0, r3
 801aed8:	371c      	adds	r7, #28
 801aeda:	46bd      	mov	sp, r7
 801aedc:	bc80      	pop	{r7}
 801aede:	4770      	bx	lr

0801aee0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801aee0:	b480      	push	{r7}
 801aee2:	b087      	sub	sp, #28
 801aee4:	af00      	add	r7, sp, #0
 801aee6:	4603      	mov	r3, r0
 801aee8:	60b9      	str	r1, [r7, #8]
 801aeea:	607a      	str	r2, [r7, #4]
 801aeec:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801aeee:	2300      	movs	r3, #0
 801aef0:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801aef2:	f04f 33ff 	mov.w	r3, #4294967295
 801aef6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801aef8:	697b      	ldr	r3, [r7, #20]
}
 801aefa:	4618      	mov	r0, r3
 801aefc:	371c      	adds	r7, #28
 801aefe:	46bd      	mov	sp, r7
 801af00:	bc80      	pop	{r7}
 801af02:	4770      	bx	lr

0801af04 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801af04:	b480      	push	{r7}
 801af06:	b085      	sub	sp, #20
 801af08:	af00      	add	r7, sp, #0
 801af0a:	60f8      	str	r0, [r7, #12]
 801af0c:	60b9      	str	r1, [r7, #8]
 801af0e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801af10:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801af14:	4618      	mov	r0, r3
 801af16:	3714      	adds	r7, #20
 801af18:	46bd      	mov	sp, r7
 801af1a:	bc80      	pop	{r7}
 801af1c:	4770      	bx	lr

0801af1e <RFW_DeInit>:

void RFW_DeInit( void )
{
 801af1e:	b480      	push	{r7}
 801af20:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801af22:	bf00      	nop
 801af24:	46bd      	mov	sp, r7
 801af26:	bc80      	pop	{r7}
 801af28:	4770      	bx	lr

0801af2a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801af2a:	b480      	push	{r7}
 801af2c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801af2e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801af30:	4618      	mov	r0, r3
 801af32:	46bd      	mov	sp, r7
 801af34:	bc80      	pop	{r7}
 801af36:	4770      	bx	lr

0801af38 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801af38:	b480      	push	{r7}
 801af3a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801af3c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801af3e:	4618      	mov	r0, r3
 801af40:	46bd      	mov	sp, r7
 801af42:	bc80      	pop	{r7}
 801af44:	4770      	bx	lr

0801af46 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801af46:	b480      	push	{r7}
 801af48:	b083      	sub	sp, #12
 801af4a:	af00      	add	r7, sp, #0
 801af4c:	4603      	mov	r3, r0
 801af4e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801af50:	bf00      	nop
 801af52:	370c      	adds	r7, #12
 801af54:	46bd      	mov	sp, r7
 801af56:	bc80      	pop	{r7}
 801af58:	4770      	bx	lr

0801af5a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801af5a:	b480      	push	{r7}
 801af5c:	b087      	sub	sp, #28
 801af5e:	af00      	add	r7, sp, #0
 801af60:	60f8      	str	r0, [r7, #12]
 801af62:	460b      	mov	r3, r1
 801af64:	607a      	str	r2, [r7, #4]
 801af66:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801af68:	f04f 33ff 	mov.w	r3, #4294967295
 801af6c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801af6e:	697b      	ldr	r3, [r7, #20]
}
 801af70:	4618      	mov	r0, r3
 801af72:	371c      	adds	r7, #28
 801af74:	46bd      	mov	sp, r7
 801af76:	bc80      	pop	{r7}
 801af78:	4770      	bx	lr

0801af7a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801af7a:	b480      	push	{r7}
 801af7c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801af7e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801af82:	4618      	mov	r0, r3
 801af84:	46bd      	mov	sp, r7
 801af86:	bc80      	pop	{r7}
 801af88:	4770      	bx	lr

0801af8a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801af8a:	b480      	push	{r7}
 801af8c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801af8e:	bf00      	nop
 801af90:	46bd      	mov	sp, r7
 801af92:	bc80      	pop	{r7}
 801af94:	4770      	bx	lr

0801af96 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801af96:	b480      	push	{r7}
 801af98:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801af9a:	bf00      	nop
 801af9c:	46bd      	mov	sp, r7
 801af9e:	bc80      	pop	{r7}
 801afa0:	4770      	bx	lr

0801afa2 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801afa2:	b480      	push	{r7}
 801afa4:	b083      	sub	sp, #12
 801afa6:	af00      	add	r7, sp, #0
 801afa8:	4603      	mov	r3, r0
 801afaa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801afac:	bf00      	nop
 801afae:	370c      	adds	r7, #12
 801afb0:	46bd      	mov	sp, r7
 801afb2:	bc80      	pop	{r7}
 801afb4:	4770      	bx	lr
	...

0801afb8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801afb8:	b480      	push	{r7}
 801afba:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801afbc:	4b04      	ldr	r3, [pc, #16]	@ (801afd0 <UTIL_LPM_Init+0x18>)
 801afbe:	2200      	movs	r2, #0
 801afc0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801afc2:	4b04      	ldr	r3, [pc, #16]	@ (801afd4 <UTIL_LPM_Init+0x1c>)
 801afc4:	2200      	movs	r2, #0
 801afc6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801afc8:	bf00      	nop
 801afca:	46bd      	mov	sp, r7
 801afcc:	bc80      	pop	{r7}
 801afce:	4770      	bx	lr
 801afd0:	20001d04 	.word	0x20001d04
 801afd4:	20001d08 	.word	0x20001d08

0801afd8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801afd8:	b480      	push	{r7}
 801afda:	b087      	sub	sp, #28
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
 801afe0:	460b      	mov	r3, r1
 801afe2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801afe4:	f3ef 8310 	mrs	r3, PRIMASK
 801afe8:	613b      	str	r3, [r7, #16]
  return(result);
 801afea:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801afec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801afee:	b672      	cpsid	i
}
 801aff0:	bf00      	nop
  
  switch( state )
 801aff2:	78fb      	ldrb	r3, [r7, #3]
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d008      	beq.n	801b00a <UTIL_LPM_SetStopMode+0x32>
 801aff8:	2b01      	cmp	r3, #1
 801affa:	d10e      	bne.n	801b01a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801affc:	4b0d      	ldr	r3, [pc, #52]	@ (801b034 <UTIL_LPM_SetStopMode+0x5c>)
 801affe:	681a      	ldr	r2, [r3, #0]
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	4313      	orrs	r3, r2
 801b004:	4a0b      	ldr	r2, [pc, #44]	@ (801b034 <UTIL_LPM_SetStopMode+0x5c>)
 801b006:	6013      	str	r3, [r2, #0]
      break;
 801b008:	e008      	b.n	801b01c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	43da      	mvns	r2, r3
 801b00e:	4b09      	ldr	r3, [pc, #36]	@ (801b034 <UTIL_LPM_SetStopMode+0x5c>)
 801b010:	681b      	ldr	r3, [r3, #0]
 801b012:	4013      	ands	r3, r2
 801b014:	4a07      	ldr	r2, [pc, #28]	@ (801b034 <UTIL_LPM_SetStopMode+0x5c>)
 801b016:	6013      	str	r3, [r2, #0]
      break;
 801b018:	e000      	b.n	801b01c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801b01a:	bf00      	nop
 801b01c:	697b      	ldr	r3, [r7, #20]
 801b01e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	f383 8810 	msr	PRIMASK, r3
}
 801b026:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b028:	bf00      	nop
 801b02a:	371c      	adds	r7, #28
 801b02c:	46bd      	mov	sp, r7
 801b02e:	bc80      	pop	{r7}
 801b030:	4770      	bx	lr
 801b032:	bf00      	nop
 801b034:	20001d04 	.word	0x20001d04

0801b038 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b038:	b480      	push	{r7}
 801b03a:	b087      	sub	sp, #28
 801b03c:	af00      	add	r7, sp, #0
 801b03e:	6078      	str	r0, [r7, #4]
 801b040:	460b      	mov	r3, r1
 801b042:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b044:	f3ef 8310 	mrs	r3, PRIMASK
 801b048:	613b      	str	r3, [r7, #16]
  return(result);
 801b04a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b04c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b04e:	b672      	cpsid	i
}
 801b050:	bf00      	nop
  
  switch(state)
 801b052:	78fb      	ldrb	r3, [r7, #3]
 801b054:	2b00      	cmp	r3, #0
 801b056:	d008      	beq.n	801b06a <UTIL_LPM_SetOffMode+0x32>
 801b058:	2b01      	cmp	r3, #1
 801b05a:	d10e      	bne.n	801b07a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801b05c:	4b0d      	ldr	r3, [pc, #52]	@ (801b094 <UTIL_LPM_SetOffMode+0x5c>)
 801b05e:	681a      	ldr	r2, [r3, #0]
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	4313      	orrs	r3, r2
 801b064:	4a0b      	ldr	r2, [pc, #44]	@ (801b094 <UTIL_LPM_SetOffMode+0x5c>)
 801b066:	6013      	str	r3, [r2, #0]
      break;
 801b068:	e008      	b.n	801b07c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	43da      	mvns	r2, r3
 801b06e:	4b09      	ldr	r3, [pc, #36]	@ (801b094 <UTIL_LPM_SetOffMode+0x5c>)
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	4013      	ands	r3, r2
 801b074:	4a07      	ldr	r2, [pc, #28]	@ (801b094 <UTIL_LPM_SetOffMode+0x5c>)
 801b076:	6013      	str	r3, [r2, #0]
      break;
 801b078:	e000      	b.n	801b07c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801b07a:	bf00      	nop
 801b07c:	697b      	ldr	r3, [r7, #20]
 801b07e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	f383 8810 	msr	PRIMASK, r3
}
 801b086:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b088:	bf00      	nop
 801b08a:	371c      	adds	r7, #28
 801b08c:	46bd      	mov	sp, r7
 801b08e:	bc80      	pop	{r7}
 801b090:	4770      	bx	lr
 801b092:	bf00      	nop
 801b094:	20001d08 	.word	0x20001d08

0801b098 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801b098:	b580      	push	{r7, lr}
 801b09a:	b084      	sub	sp, #16
 801b09c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b09e:	f3ef 8310 	mrs	r3, PRIMASK
 801b0a2:	60bb      	str	r3, [r7, #8]
  return(result);
 801b0a4:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801b0a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b0a8:	b672      	cpsid	i
}
 801b0aa:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801b0ac:	4b12      	ldr	r3, [pc, #72]	@ (801b0f8 <UTIL_LPM_EnterLowPower+0x60>)
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d006      	beq.n	801b0c2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801b0b4:	4b11      	ldr	r3, [pc, #68]	@ (801b0fc <UTIL_LPM_EnterLowPower+0x64>)
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801b0ba:	4b10      	ldr	r3, [pc, #64]	@ (801b0fc <UTIL_LPM_EnterLowPower+0x64>)
 801b0bc:	685b      	ldr	r3, [r3, #4]
 801b0be:	4798      	blx	r3
 801b0c0:	e010      	b.n	801b0e4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801b0c2:	4b0f      	ldr	r3, [pc, #60]	@ (801b100 <UTIL_LPM_EnterLowPower+0x68>)
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d006      	beq.n	801b0d8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801b0ca:	4b0c      	ldr	r3, [pc, #48]	@ (801b0fc <UTIL_LPM_EnterLowPower+0x64>)
 801b0cc:	689b      	ldr	r3, [r3, #8]
 801b0ce:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801b0d0:	4b0a      	ldr	r3, [pc, #40]	@ (801b0fc <UTIL_LPM_EnterLowPower+0x64>)
 801b0d2:	68db      	ldr	r3, [r3, #12]
 801b0d4:	4798      	blx	r3
 801b0d6:	e005      	b.n	801b0e4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801b0d8:	4b08      	ldr	r3, [pc, #32]	@ (801b0fc <UTIL_LPM_EnterLowPower+0x64>)
 801b0da:	691b      	ldr	r3, [r3, #16]
 801b0dc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801b0de:	4b07      	ldr	r3, [pc, #28]	@ (801b0fc <UTIL_LPM_EnterLowPower+0x64>)
 801b0e0:	695b      	ldr	r3, [r3, #20]
 801b0e2:	4798      	blx	r3
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	f383 8810 	msr	PRIMASK, r3
}
 801b0ee:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801b0f0:	bf00      	nop
 801b0f2:	3710      	adds	r7, #16
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	bd80      	pop	{r7, pc}
 801b0f8:	20001d04 	.word	0x20001d04
 801b0fc:	0801d010 	.word	0x0801d010
 801b100:	20001d08 	.word	0x20001d08

0801b104 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801b104:	b480      	push	{r7}
 801b106:	b087      	sub	sp, #28
 801b108:	af00      	add	r7, sp, #0
 801b10a:	60f8      	str	r0, [r7, #12]
 801b10c:	60b9      	str	r1, [r7, #8]
 801b10e:	4613      	mov	r3, r2
 801b110:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801b116:	68bb      	ldr	r3, [r7, #8]
 801b118:	613b      	str	r3, [r7, #16]

  while( size-- )
 801b11a:	e007      	b.n	801b12c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801b11c:	693a      	ldr	r2, [r7, #16]
 801b11e:	1c53      	adds	r3, r2, #1
 801b120:	613b      	str	r3, [r7, #16]
 801b122:	697b      	ldr	r3, [r7, #20]
 801b124:	1c59      	adds	r1, r3, #1
 801b126:	6179      	str	r1, [r7, #20]
 801b128:	7812      	ldrb	r2, [r2, #0]
 801b12a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b12c:	88fb      	ldrh	r3, [r7, #6]
 801b12e:	1e5a      	subs	r2, r3, #1
 801b130:	80fa      	strh	r2, [r7, #6]
 801b132:	2b00      	cmp	r3, #0
 801b134:	d1f2      	bne.n	801b11c <UTIL_MEM_cpy_8+0x18>
    }
}
 801b136:	bf00      	nop
 801b138:	bf00      	nop
 801b13a:	371c      	adds	r7, #28
 801b13c:	46bd      	mov	sp, r7
 801b13e:	bc80      	pop	{r7}
 801b140:	4770      	bx	lr

0801b142 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801b142:	b480      	push	{r7}
 801b144:	b085      	sub	sp, #20
 801b146:	af00      	add	r7, sp, #0
 801b148:	6078      	str	r0, [r7, #4]
 801b14a:	460b      	mov	r3, r1
 801b14c:	70fb      	strb	r3, [r7, #3]
 801b14e:	4613      	mov	r3, r2
 801b150:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801b156:	e004      	b.n	801b162 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	1c5a      	adds	r2, r3, #1
 801b15c:	60fa      	str	r2, [r7, #12]
 801b15e:	78fa      	ldrb	r2, [r7, #3]
 801b160:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b162:	883b      	ldrh	r3, [r7, #0]
 801b164:	1e5a      	subs	r2, r3, #1
 801b166:	803a      	strh	r2, [r7, #0]
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d1f5      	bne.n	801b158 <UTIL_MEM_set_8+0x16>
  }
}
 801b16c:	bf00      	nop
 801b16e:	bf00      	nop
 801b170:	3714      	adds	r7, #20
 801b172:	46bd      	mov	sp, r7
 801b174:	bc80      	pop	{r7}
 801b176:	4770      	bx	lr

0801b178 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801b178:	b082      	sub	sp, #8
 801b17a:	b480      	push	{r7}
 801b17c:	b087      	sub	sp, #28
 801b17e:	af00      	add	r7, sp, #0
 801b180:	60f8      	str	r0, [r7, #12]
 801b182:	1d38      	adds	r0, r7, #4
 801b184:	e880 0006 	stmia.w	r0, {r1, r2}
 801b188:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801b18a:	2300      	movs	r3, #0
 801b18c:	613b      	str	r3, [r7, #16]
 801b18e:	2300      	movs	r3, #0
 801b190:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801b192:	687a      	ldr	r2, [r7, #4]
 801b194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b196:	4413      	add	r3, r2
 801b198:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801b19a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b19e:	b29a      	uxth	r2, r3
 801b1a0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801b1a4:	b29b      	uxth	r3, r3
 801b1a6:	4413      	add	r3, r2
 801b1a8:	b29b      	uxth	r3, r3
 801b1aa:	b21b      	sxth	r3, r3
 801b1ac:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801b1ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b1b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b1b6:	db0a      	blt.n	801b1ce <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801b1b8:	693b      	ldr	r3, [r7, #16]
 801b1ba:	3301      	adds	r3, #1
 801b1bc:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801b1be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b1c2:	b29b      	uxth	r3, r3
 801b1c4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801b1c8:	b29b      	uxth	r3, r3
 801b1ca:	b21b      	sxth	r3, r3
 801b1cc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	461a      	mov	r2, r3
 801b1d2:	f107 0310 	add.w	r3, r7, #16
 801b1d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b1da:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b1de:	68f8      	ldr	r0, [r7, #12]
 801b1e0:	371c      	adds	r7, #28
 801b1e2:	46bd      	mov	sp, r7
 801b1e4:	bc80      	pop	{r7}
 801b1e6:	b002      	add	sp, #8
 801b1e8:	4770      	bx	lr

0801b1ea <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801b1ea:	b082      	sub	sp, #8
 801b1ec:	b480      	push	{r7}
 801b1ee:	b087      	sub	sp, #28
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	60f8      	str	r0, [r7, #12]
 801b1f4:	1d38      	adds	r0, r7, #4
 801b1f6:	e880 0006 	stmia.w	r0, {r1, r2}
 801b1fa:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801b1fc:	2300      	movs	r3, #0
 801b1fe:	613b      	str	r3, [r7, #16]
 801b200:	2300      	movs	r3, #0
 801b202:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801b204:	687a      	ldr	r2, [r7, #4]
 801b206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b208:	1ad3      	subs	r3, r2, r3
 801b20a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801b20c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b210:	b29a      	uxth	r2, r3
 801b212:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801b216:	b29b      	uxth	r3, r3
 801b218:	1ad3      	subs	r3, r2, r3
 801b21a:	b29b      	uxth	r3, r3
 801b21c:	b21b      	sxth	r3, r3
 801b21e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801b220:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b224:	2b00      	cmp	r3, #0
 801b226:	da0a      	bge.n	801b23e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801b228:	693b      	ldr	r3, [r7, #16]
 801b22a:	3b01      	subs	r3, #1
 801b22c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801b22e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b232:	b29b      	uxth	r3, r3
 801b234:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801b238:	b29b      	uxth	r3, r3
 801b23a:	b21b      	sxth	r3, r3
 801b23c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b23e:	68fb      	ldr	r3, [r7, #12]
 801b240:	461a      	mov	r2, r3
 801b242:	f107 0310 	add.w	r3, r7, #16
 801b246:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b24a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b24e:	68f8      	ldr	r0, [r7, #12]
 801b250:	371c      	adds	r7, #28
 801b252:	46bd      	mov	sp, r7
 801b254:	bc80      	pop	{r7}
 801b256:	b002      	add	sp, #8
 801b258:	4770      	bx	lr
	...

0801b25c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801b25c:	b580      	push	{r7, lr}
 801b25e:	b088      	sub	sp, #32
 801b260:	af02      	add	r7, sp, #8
 801b262:	463b      	mov	r3, r7
 801b264:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b268:	2300      	movs	r3, #0
 801b26a:	60bb      	str	r3, [r7, #8]
 801b26c:	2300      	movs	r3, #0
 801b26e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b270:	4b10      	ldr	r3, [pc, #64]	@ (801b2b4 <SysTimeSet+0x58>)
 801b272:	691b      	ldr	r3, [r3, #16]
 801b274:	f107 0208 	add.w	r2, r7, #8
 801b278:	3204      	adds	r2, #4
 801b27a:	4610      	mov	r0, r2
 801b27c:	4798      	blx	r3
 801b27e:	4603      	mov	r3, r0
 801b280:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801b282:	f107 0010 	add.w	r0, r7, #16
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	9300      	str	r3, [sp, #0]
 801b28a:	68bb      	ldr	r3, [r7, #8]
 801b28c:	463a      	mov	r2, r7
 801b28e:	ca06      	ldmia	r2, {r1, r2}
 801b290:	f7ff ffab 	bl	801b1ea <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801b294:	4b07      	ldr	r3, [pc, #28]	@ (801b2b4 <SysTimeSet+0x58>)
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	693a      	ldr	r2, [r7, #16]
 801b29a:	4610      	mov	r0, r2
 801b29c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801b29e:	4b05      	ldr	r3, [pc, #20]	@ (801b2b4 <SysTimeSet+0x58>)
 801b2a0:	689b      	ldr	r3, [r3, #8]
 801b2a2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b2a6:	4610      	mov	r0, r2
 801b2a8:	4798      	blx	r3
}
 801b2aa:	bf00      	nop
 801b2ac:	3718      	adds	r7, #24
 801b2ae:	46bd      	mov	sp, r7
 801b2b0:	bd80      	pop	{r7, pc}
 801b2b2:	bf00      	nop
 801b2b4:	0801d0f4 	.word	0x0801d0f4

0801b2b8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801b2b8:	b580      	push	{r7, lr}
 801b2ba:	b08a      	sub	sp, #40	@ 0x28
 801b2bc:	af02      	add	r7, sp, #8
 801b2be:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b2c0:	2300      	movs	r3, #0
 801b2c2:	61bb      	str	r3, [r7, #24]
 801b2c4:	2300      	movs	r3, #0
 801b2c6:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801b2c8:	2300      	movs	r3, #0
 801b2ca:	613b      	str	r3, [r7, #16]
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b2d0:	4b14      	ldr	r3, [pc, #80]	@ (801b324 <SysTimeGet+0x6c>)
 801b2d2:	691b      	ldr	r3, [r3, #16]
 801b2d4:	f107 0218 	add.w	r2, r7, #24
 801b2d8:	3204      	adds	r2, #4
 801b2da:	4610      	mov	r0, r2
 801b2dc:	4798      	blx	r3
 801b2de:	4603      	mov	r3, r0
 801b2e0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b2e2:	4b10      	ldr	r3, [pc, #64]	@ (801b324 <SysTimeGet+0x6c>)
 801b2e4:	68db      	ldr	r3, [r3, #12]
 801b2e6:	4798      	blx	r3
 801b2e8:	4603      	mov	r3, r0
 801b2ea:	b21b      	sxth	r3, r3
 801b2ec:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b2ee:	4b0d      	ldr	r3, [pc, #52]	@ (801b324 <SysTimeGet+0x6c>)
 801b2f0:	685b      	ldr	r3, [r3, #4]
 801b2f2:	4798      	blx	r3
 801b2f4:	4603      	mov	r3, r0
 801b2f6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801b2f8:	f107 0010 	add.w	r0, r7, #16
 801b2fc:	69fb      	ldr	r3, [r7, #28]
 801b2fe:	9300      	str	r3, [sp, #0]
 801b300:	69bb      	ldr	r3, [r7, #24]
 801b302:	f107 0208 	add.w	r2, r7, #8
 801b306:	ca06      	ldmia	r2, {r1, r2}
 801b308:	f7ff ff36 	bl	801b178 <SysTimeAdd>

  return sysTime;
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	461a      	mov	r2, r3
 801b310:	f107 0310 	add.w	r3, r7, #16
 801b314:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b318:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b31c:	6878      	ldr	r0, [r7, #4]
 801b31e:	3720      	adds	r7, #32
 801b320:	46bd      	mov	sp, r7
 801b322:	bd80      	pop	{r7, pc}
 801b324:	0801d0f4 	.word	0x0801d0f4

0801b328 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b084      	sub	sp, #16
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b330:	2300      	movs	r3, #0
 801b332:	60bb      	str	r3, [r7, #8]
 801b334:	2300      	movs	r3, #0
 801b336:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b338:	4b0a      	ldr	r3, [pc, #40]	@ (801b364 <SysTimeGetMcuTime+0x3c>)
 801b33a:	691b      	ldr	r3, [r3, #16]
 801b33c:	f107 0208 	add.w	r2, r7, #8
 801b340:	3204      	adds	r2, #4
 801b342:	4610      	mov	r0, r2
 801b344:	4798      	blx	r3
 801b346:	4603      	mov	r3, r0
 801b348:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	461a      	mov	r2, r3
 801b34e:	f107 0308 	add.w	r3, r7, #8
 801b352:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b356:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b35a:	6878      	ldr	r0, [r7, #4]
 801b35c:	3710      	adds	r7, #16
 801b35e:	46bd      	mov	sp, r7
 801b360:	bd80      	pop	{r7, pc}
 801b362:	bf00      	nop
 801b364:	0801d0f4 	.word	0x0801d0f4

0801b368 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801b368:	b480      	push	{r7}
 801b36a:	b085      	sub	sp, #20
 801b36c:	af00      	add	r7, sp, #0
 801b36e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801b370:	2300      	movs	r3, #0
 801b372:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801b374:	e00e      	b.n	801b394 <ee_skip_atoi+0x2c>
 801b376:	68fa      	ldr	r2, [r7, #12]
 801b378:	4613      	mov	r3, r2
 801b37a:	009b      	lsls	r3, r3, #2
 801b37c:	4413      	add	r3, r2
 801b37e:	005b      	lsls	r3, r3, #1
 801b380:	4618      	mov	r0, r3
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	1c59      	adds	r1, r3, #1
 801b388:	687a      	ldr	r2, [r7, #4]
 801b38a:	6011      	str	r1, [r2, #0]
 801b38c:	781b      	ldrb	r3, [r3, #0]
 801b38e:	4403      	add	r3, r0
 801b390:	3b30      	subs	r3, #48	@ 0x30
 801b392:	60fb      	str	r3, [r7, #12]
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	781b      	ldrb	r3, [r3, #0]
 801b39a:	2b2f      	cmp	r3, #47	@ 0x2f
 801b39c:	d904      	bls.n	801b3a8 <ee_skip_atoi+0x40>
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	681b      	ldr	r3, [r3, #0]
 801b3a2:	781b      	ldrb	r3, [r3, #0]
 801b3a4:	2b39      	cmp	r3, #57	@ 0x39
 801b3a6:	d9e6      	bls.n	801b376 <ee_skip_atoi+0xe>
  return i;
 801b3a8:	68fb      	ldr	r3, [r7, #12]
}
 801b3aa:	4618      	mov	r0, r3
 801b3ac:	3714      	adds	r7, #20
 801b3ae:	46bd      	mov	sp, r7
 801b3b0:	bc80      	pop	{r7}
 801b3b2:	4770      	bx	lr

0801b3b4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801b3b4:	b480      	push	{r7}
 801b3b6:	b099      	sub	sp, #100	@ 0x64
 801b3b8:	af00      	add	r7, sp, #0
 801b3ba:	60f8      	str	r0, [r7, #12]
 801b3bc:	60b9      	str	r1, [r7, #8]
 801b3be:	607a      	str	r2, [r7, #4]
 801b3c0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801b3c2:	4b71      	ldr	r3, [pc, #452]	@ (801b588 <ee_number+0x1d4>)
 801b3c4:	681b      	ldr	r3, [r3, #0]
 801b3c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801b3c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b3ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d002      	beq.n	801b3d8 <ee_number+0x24>
 801b3d2:	4b6e      	ldr	r3, [pc, #440]	@ (801b58c <ee_number+0x1d8>)
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801b3d8:	683b      	ldr	r3, [r7, #0]
 801b3da:	2b01      	cmp	r3, #1
 801b3dc:	dd02      	ble.n	801b3e4 <ee_number+0x30>
 801b3de:	683b      	ldr	r3, [r7, #0]
 801b3e0:	2b24      	cmp	r3, #36	@ 0x24
 801b3e2:	dd01      	ble.n	801b3e8 <ee_number+0x34>
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	e0ca      	b.n	801b57e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801b3e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b3ea:	f003 0301 	and.w	r3, r3, #1
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d001      	beq.n	801b3f6 <ee_number+0x42>
 801b3f2:	2330      	movs	r3, #48	@ 0x30
 801b3f4:	e000      	b.n	801b3f8 <ee_number+0x44>
 801b3f6:	2320      	movs	r3, #32
 801b3f8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801b402:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b404:	f003 0302 	and.w	r3, r3, #2
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d00b      	beq.n	801b424 <ee_number+0x70>
  {
    if (num < 0)
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	da08      	bge.n	801b424 <ee_number+0x70>
    {
      sign = '-';
 801b412:	232d      	movs	r3, #45	@ 0x2d
 801b414:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	425b      	negs	r3, r3
 801b41c:	607b      	str	r3, [r7, #4]
      size--;
 801b41e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b420:	3b01      	subs	r3, #1
 801b422:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801b424:	2300      	movs	r3, #0
 801b426:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d11e      	bne.n	801b46c <ee_number+0xb8>
    tmp[i++] = '0';
 801b42e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b430:	1c5a      	adds	r2, r3, #1
 801b432:	657a      	str	r2, [r7, #84]	@ 0x54
 801b434:	3360      	adds	r3, #96	@ 0x60
 801b436:	443b      	add	r3, r7
 801b438:	2230      	movs	r2, #48	@ 0x30
 801b43a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801b43e:	e018      	b.n	801b472 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	683a      	ldr	r2, [r7, #0]
 801b444:	fbb3 f1f2 	udiv	r1, r3, r2
 801b448:	fb01 f202 	mul.w	r2, r1, r2
 801b44c:	1a9b      	subs	r3, r3, r2
 801b44e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b450:	441a      	add	r2, r3
 801b452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b454:	1c59      	adds	r1, r3, #1
 801b456:	6579      	str	r1, [r7, #84]	@ 0x54
 801b458:	7812      	ldrb	r2, [r2, #0]
 801b45a:	3360      	adds	r3, #96	@ 0x60
 801b45c:	443b      	add	r3, r7
 801b45e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801b462:	687a      	ldr	r2, [r7, #4]
 801b464:	683b      	ldr	r3, [r7, #0]
 801b466:	fbb2 f3f3 	udiv	r3, r2, r3
 801b46a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d1e6      	bne.n	801b440 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801b472:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b476:	429a      	cmp	r2, r3
 801b478:	dd01      	ble.n	801b47e <ee_number+0xca>
 801b47a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b47c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801b47e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b482:	1ad3      	subs	r3, r2, r3
 801b484:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801b486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b488:	f003 0301 	and.w	r3, r3, #1
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d112      	bne.n	801b4b6 <ee_number+0x102>
 801b490:	e00c      	b.n	801b4ac <ee_number+0xf8>
 801b492:	68fb      	ldr	r3, [r7, #12]
 801b494:	1c5a      	adds	r2, r3, #1
 801b496:	60fa      	str	r2, [r7, #12]
 801b498:	2220      	movs	r2, #32
 801b49a:	701a      	strb	r2, [r3, #0]
 801b49c:	68bb      	ldr	r3, [r7, #8]
 801b49e:	3b01      	subs	r3, #1
 801b4a0:	60bb      	str	r3, [r7, #8]
 801b4a2:	68bb      	ldr	r3, [r7, #8]
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	d101      	bne.n	801b4ac <ee_number+0xf8>
 801b4a8:	68fb      	ldr	r3, [r7, #12]
 801b4aa:	e068      	b.n	801b57e <ee_number+0x1ca>
 801b4ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b4ae:	1e5a      	subs	r2, r3, #1
 801b4b0:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	dced      	bgt.n	801b492 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801b4b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d01b      	beq.n	801b4f6 <ee_number+0x142>
 801b4be:	68fb      	ldr	r3, [r7, #12]
 801b4c0:	1c5a      	adds	r2, r3, #1
 801b4c2:	60fa      	str	r2, [r7, #12]
 801b4c4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801b4c8:	701a      	strb	r2, [r3, #0]
 801b4ca:	68bb      	ldr	r3, [r7, #8]
 801b4cc:	3b01      	subs	r3, #1
 801b4ce:	60bb      	str	r3, [r7, #8]
 801b4d0:	68bb      	ldr	r3, [r7, #8]
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d10f      	bne.n	801b4f6 <ee_number+0x142>
 801b4d6:	68fb      	ldr	r3, [r7, #12]
 801b4d8:	e051      	b.n	801b57e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801b4da:	68fb      	ldr	r3, [r7, #12]
 801b4dc:	1c5a      	adds	r2, r3, #1
 801b4de:	60fa      	str	r2, [r7, #12]
 801b4e0:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801b4e4:	701a      	strb	r2, [r3, #0]
 801b4e6:	68bb      	ldr	r3, [r7, #8]
 801b4e8:	3b01      	subs	r3, #1
 801b4ea:	60bb      	str	r3, [r7, #8]
 801b4ec:	68bb      	ldr	r3, [r7, #8]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d101      	bne.n	801b4f6 <ee_number+0x142>
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	e043      	b.n	801b57e <ee_number+0x1ca>
 801b4f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b4f8:	1e5a      	subs	r2, r3, #1
 801b4fa:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	dcec      	bgt.n	801b4da <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801b500:	e00c      	b.n	801b51c <ee_number+0x168>
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	1c5a      	adds	r2, r3, #1
 801b506:	60fa      	str	r2, [r7, #12]
 801b508:	2230      	movs	r2, #48	@ 0x30
 801b50a:	701a      	strb	r2, [r3, #0]
 801b50c:	68bb      	ldr	r3, [r7, #8]
 801b50e:	3b01      	subs	r3, #1
 801b510:	60bb      	str	r3, [r7, #8]
 801b512:	68bb      	ldr	r3, [r7, #8]
 801b514:	2b00      	cmp	r3, #0
 801b516:	d101      	bne.n	801b51c <ee_number+0x168>
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	e030      	b.n	801b57e <ee_number+0x1ca>
 801b51c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b51e:	1e5a      	subs	r2, r3, #1
 801b520:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b522:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b524:	429a      	cmp	r2, r3
 801b526:	dbec      	blt.n	801b502 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801b528:	e010      	b.n	801b54c <ee_number+0x198>
 801b52a:	68fb      	ldr	r3, [r7, #12]
 801b52c:	1c5a      	adds	r2, r3, #1
 801b52e:	60fa      	str	r2, [r7, #12]
 801b530:	f107 0110 	add.w	r1, r7, #16
 801b534:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b536:	440a      	add	r2, r1
 801b538:	7812      	ldrb	r2, [r2, #0]
 801b53a:	701a      	strb	r2, [r3, #0]
 801b53c:	68bb      	ldr	r3, [r7, #8]
 801b53e:	3b01      	subs	r3, #1
 801b540:	60bb      	str	r3, [r7, #8]
 801b542:	68bb      	ldr	r3, [r7, #8]
 801b544:	2b00      	cmp	r3, #0
 801b546:	d101      	bne.n	801b54c <ee_number+0x198>
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	e018      	b.n	801b57e <ee_number+0x1ca>
 801b54c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b54e:	1e5a      	subs	r2, r3, #1
 801b550:	657a      	str	r2, [r7, #84]	@ 0x54
 801b552:	2b00      	cmp	r3, #0
 801b554:	dce9      	bgt.n	801b52a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801b556:	e00c      	b.n	801b572 <ee_number+0x1be>
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	1c5a      	adds	r2, r3, #1
 801b55c:	60fa      	str	r2, [r7, #12]
 801b55e:	2220      	movs	r2, #32
 801b560:	701a      	strb	r2, [r3, #0]
 801b562:	68bb      	ldr	r3, [r7, #8]
 801b564:	3b01      	subs	r3, #1
 801b566:	60bb      	str	r3, [r7, #8]
 801b568:	68bb      	ldr	r3, [r7, #8]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d101      	bne.n	801b572 <ee_number+0x1be>
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	e005      	b.n	801b57e <ee_number+0x1ca>
 801b572:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b574:	1e5a      	subs	r2, r3, #1
 801b576:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b578:	2b00      	cmp	r3, #0
 801b57a:	dced      	bgt.n	801b558 <ee_number+0x1a4>

  return str;
 801b57c:	68fb      	ldr	r3, [r7, #12]
}
 801b57e:	4618      	mov	r0, r3
 801b580:	3764      	adds	r7, #100	@ 0x64
 801b582:	46bd      	mov	sp, r7
 801b584:	bc80      	pop	{r7}
 801b586:	4770      	bx	lr
 801b588:	20000138 	.word	0x20000138
 801b58c:	2000013c 	.word	0x2000013c

0801b590 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801b590:	b580      	push	{r7, lr}
 801b592:	b092      	sub	sp, #72	@ 0x48
 801b594:	af04      	add	r7, sp, #16
 801b596:	60f8      	str	r0, [r7, #12]
 801b598:	60b9      	str	r1, [r7, #8]
 801b59a:	607a      	str	r2, [r7, #4]
 801b59c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801b59e:	68bb      	ldr	r3, [r7, #8]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	dc01      	bgt.n	801b5a8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	e13e      	b.n	801b826 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b5ac:	e128      	b.n	801b800 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801b5ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	1ad2      	subs	r2, r2, r3
 801b5b4:	68bb      	ldr	r3, [r7, #8]
 801b5b6:	3b01      	subs	r3, #1
 801b5b8:	429a      	cmp	r2, r3
 801b5ba:	f280 812e 	bge.w	801b81a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	781b      	ldrb	r3, [r3, #0]
 801b5c2:	2b25      	cmp	r3, #37	@ 0x25
 801b5c4:	d006      	beq.n	801b5d4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801b5c6:	687a      	ldr	r2, [r7, #4]
 801b5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5ca:	1c59      	adds	r1, r3, #1
 801b5cc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b5ce:	7812      	ldrb	r2, [r2, #0]
 801b5d0:	701a      	strb	r2, [r3, #0]
      continue;
 801b5d2:	e112      	b.n	801b7fa <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801b5d4:	2300      	movs	r3, #0
 801b5d6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	3301      	adds	r3, #1
 801b5dc:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	781b      	ldrb	r3, [r3, #0]
 801b5e2:	2b30      	cmp	r3, #48	@ 0x30
 801b5e4:	d103      	bne.n	801b5ee <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801b5e6:	6a3b      	ldr	r3, [r7, #32]
 801b5e8:	f043 0301 	orr.w	r3, r3, #1
 801b5ec:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801b5ee:	f04f 33ff 	mov.w	r3, #4294967295
 801b5f2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	781b      	ldrb	r3, [r3, #0]
 801b5f8:	2b2f      	cmp	r3, #47	@ 0x2f
 801b5fa:	d908      	bls.n	801b60e <tiny_vsnprintf_like+0x7e>
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	781b      	ldrb	r3, [r3, #0]
 801b600:	2b39      	cmp	r3, #57	@ 0x39
 801b602:	d804      	bhi.n	801b60e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801b604:	1d3b      	adds	r3, r7, #4
 801b606:	4618      	mov	r0, r3
 801b608:	f7ff feae 	bl	801b368 <ee_skip_atoi>
 801b60c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801b60e:	f04f 33ff 	mov.w	r3, #4294967295
 801b612:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801b614:	f04f 33ff 	mov.w	r3, #4294967295
 801b618:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801b61a:	230a      	movs	r3, #10
 801b61c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	781b      	ldrb	r3, [r3, #0]
 801b622:	3b58      	subs	r3, #88	@ 0x58
 801b624:	2b20      	cmp	r3, #32
 801b626:	f200 8094 	bhi.w	801b752 <tiny_vsnprintf_like+0x1c2>
 801b62a:	a201      	add	r2, pc, #4	@ (adr r2, 801b630 <tiny_vsnprintf_like+0xa0>)
 801b62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b630:	0801b73b 	.word	0x0801b73b
 801b634:	0801b753 	.word	0x0801b753
 801b638:	0801b753 	.word	0x0801b753
 801b63c:	0801b753 	.word	0x0801b753
 801b640:	0801b753 	.word	0x0801b753
 801b644:	0801b753 	.word	0x0801b753
 801b648:	0801b753 	.word	0x0801b753
 801b64c:	0801b753 	.word	0x0801b753
 801b650:	0801b753 	.word	0x0801b753
 801b654:	0801b753 	.word	0x0801b753
 801b658:	0801b753 	.word	0x0801b753
 801b65c:	0801b6bf 	.word	0x0801b6bf
 801b660:	0801b749 	.word	0x0801b749
 801b664:	0801b753 	.word	0x0801b753
 801b668:	0801b753 	.word	0x0801b753
 801b66c:	0801b753 	.word	0x0801b753
 801b670:	0801b753 	.word	0x0801b753
 801b674:	0801b749 	.word	0x0801b749
 801b678:	0801b753 	.word	0x0801b753
 801b67c:	0801b753 	.word	0x0801b753
 801b680:	0801b753 	.word	0x0801b753
 801b684:	0801b753 	.word	0x0801b753
 801b688:	0801b753 	.word	0x0801b753
 801b68c:	0801b753 	.word	0x0801b753
 801b690:	0801b753 	.word	0x0801b753
 801b694:	0801b753 	.word	0x0801b753
 801b698:	0801b753 	.word	0x0801b753
 801b69c:	0801b6df 	.word	0x0801b6df
 801b6a0:	0801b753 	.word	0x0801b753
 801b6a4:	0801b79f 	.word	0x0801b79f
 801b6a8:	0801b753 	.word	0x0801b753
 801b6ac:	0801b753 	.word	0x0801b753
 801b6b0:	0801b743 	.word	0x0801b743
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801b6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6b6:	1c5a      	adds	r2, r3, #1
 801b6b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b6ba:	2220      	movs	r2, #32
 801b6bc:	701a      	strb	r2, [r3, #0]
 801b6be:	69fb      	ldr	r3, [r7, #28]
 801b6c0:	3b01      	subs	r3, #1
 801b6c2:	61fb      	str	r3, [r7, #28]
 801b6c4:	69fb      	ldr	r3, [r7, #28]
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	dcf4      	bgt.n	801b6b4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801b6ca:	683b      	ldr	r3, [r7, #0]
 801b6cc:	1d1a      	adds	r2, r3, #4
 801b6ce:	603a      	str	r2, [r7, #0]
 801b6d0:	6819      	ldr	r1, [r3, #0]
 801b6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6d4:	1c5a      	adds	r2, r3, #1
 801b6d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b6d8:	b2ca      	uxtb	r2, r1
 801b6da:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801b6dc:	e08d      	b.n	801b7fa <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801b6de:	683b      	ldr	r3, [r7, #0]
 801b6e0:	1d1a      	adds	r2, r3, #4
 801b6e2:	603a      	str	r2, [r7, #0]
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801b6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d101      	bne.n	801b6f2 <tiny_vsnprintf_like+0x162>
 801b6ee:	4b50      	ldr	r3, [pc, #320]	@ (801b830 <tiny_vsnprintf_like+0x2a0>)
 801b6f0:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801b6f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b6f4:	f7e4 fd40 	bl	8000178 <strlen>
 801b6f8:	4603      	mov	r3, r0
 801b6fa:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801b6fc:	e004      	b.n	801b708 <tiny_vsnprintf_like+0x178>
 801b6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b700:	1c5a      	adds	r2, r3, #1
 801b702:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b704:	2220      	movs	r2, #32
 801b706:	701a      	strb	r2, [r3, #0]
 801b708:	69fb      	ldr	r3, [r7, #28]
 801b70a:	1e5a      	subs	r2, r3, #1
 801b70c:	61fa      	str	r2, [r7, #28]
 801b70e:	693a      	ldr	r2, [r7, #16]
 801b710:	429a      	cmp	r2, r3
 801b712:	dbf4      	blt.n	801b6fe <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801b714:	2300      	movs	r3, #0
 801b716:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b718:	e00a      	b.n	801b730 <tiny_vsnprintf_like+0x1a0>
 801b71a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b71c:	1c53      	adds	r3, r2, #1
 801b71e:	627b      	str	r3, [r7, #36]	@ 0x24
 801b720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b722:	1c59      	adds	r1, r3, #1
 801b724:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b726:	7812      	ldrb	r2, [r2, #0]
 801b728:	701a      	strb	r2, [r3, #0]
 801b72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b72c:	3301      	adds	r3, #1
 801b72e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b730:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b732:	693b      	ldr	r3, [r7, #16]
 801b734:	429a      	cmp	r2, r3
 801b736:	dbf0      	blt.n	801b71a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801b738:	e05f      	b.n	801b7fa <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801b73a:	6a3b      	ldr	r3, [r7, #32]
 801b73c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b740:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801b742:	2310      	movs	r3, #16
 801b744:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801b746:	e02b      	b.n	801b7a0 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801b748:	6a3b      	ldr	r3, [r7, #32]
 801b74a:	f043 0302 	orr.w	r3, r3, #2
 801b74e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801b750:	e025      	b.n	801b79e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	781b      	ldrb	r3, [r3, #0]
 801b756:	2b25      	cmp	r3, #37	@ 0x25
 801b758:	d004      	beq.n	801b764 <tiny_vsnprintf_like+0x1d4>
 801b75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b75c:	1c5a      	adds	r2, r3, #1
 801b75e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b760:	2225      	movs	r2, #37	@ 0x25
 801b762:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801b764:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	1ad2      	subs	r2, r2, r3
 801b76a:	68bb      	ldr	r3, [r7, #8]
 801b76c:	3b01      	subs	r3, #1
 801b76e:	429a      	cmp	r2, r3
 801b770:	da16      	bge.n	801b7a0 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	781b      	ldrb	r3, [r3, #0]
 801b776:	2b00      	cmp	r3, #0
 801b778:	d006      	beq.n	801b788 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801b77a:	687a      	ldr	r2, [r7, #4]
 801b77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b77e:	1c59      	adds	r1, r3, #1
 801b780:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b782:	7812      	ldrb	r2, [r2, #0]
 801b784:	701a      	strb	r2, [r3, #0]
 801b786:	e002      	b.n	801b78e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	3b01      	subs	r3, #1
 801b78c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801b78e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b790:	68fb      	ldr	r3, [r7, #12]
 801b792:	1ad2      	subs	r2, r2, r3
 801b794:	68bb      	ldr	r3, [r7, #8]
 801b796:	3b01      	subs	r3, #1
 801b798:	429a      	cmp	r2, r3
 801b79a:	db2d      	blt.n	801b7f8 <tiny_vsnprintf_like+0x268>
 801b79c:	e000      	b.n	801b7a0 <tiny_vsnprintf_like+0x210>
        break;
 801b79e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801b7a0:	697b      	ldr	r3, [r7, #20]
 801b7a2:	2b6c      	cmp	r3, #108	@ 0x6c
 801b7a4:	d105      	bne.n	801b7b2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801b7a6:	683b      	ldr	r3, [r7, #0]
 801b7a8:	1d1a      	adds	r2, r3, #4
 801b7aa:	603a      	str	r2, [r7, #0]
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	637b      	str	r3, [r7, #52]	@ 0x34
 801b7b0:	e00f      	b.n	801b7d2 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801b7b2:	6a3b      	ldr	r3, [r7, #32]
 801b7b4:	f003 0302 	and.w	r3, r3, #2
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d005      	beq.n	801b7c8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801b7bc:	683b      	ldr	r3, [r7, #0]
 801b7be:	1d1a      	adds	r2, r3, #4
 801b7c0:	603a      	str	r2, [r7, #0]
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	637b      	str	r3, [r7, #52]	@ 0x34
 801b7c6:	e004      	b.n	801b7d2 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801b7c8:	683b      	ldr	r3, [r7, #0]
 801b7ca:	1d1a      	adds	r2, r3, #4
 801b7cc:	603a      	str	r2, [r7, #0]
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801b7d2:	68bb      	ldr	r3, [r7, #8]
 801b7d4:	1e5a      	subs	r2, r3, #1
 801b7d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b7d8:	68fb      	ldr	r3, [r7, #12]
 801b7da:	1acb      	subs	r3, r1, r3
 801b7dc:	1ad1      	subs	r1, r2, r3
 801b7de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b7e0:	6a3b      	ldr	r3, [r7, #32]
 801b7e2:	9302      	str	r3, [sp, #8]
 801b7e4:	69bb      	ldr	r3, [r7, #24]
 801b7e6:	9301      	str	r3, [sp, #4]
 801b7e8:	69fb      	ldr	r3, [r7, #28]
 801b7ea:	9300      	str	r3, [sp, #0]
 801b7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b7f0:	f7ff fde0 	bl	801b3b4 <ee_number>
 801b7f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801b7f6:	e000      	b.n	801b7fa <tiny_vsnprintf_like+0x26a>
        continue;
 801b7f8:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	3301      	adds	r3, #1
 801b7fe:	607b      	str	r3, [r7, #4]
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	781b      	ldrb	r3, [r3, #0]
 801b804:	2b00      	cmp	r3, #0
 801b806:	f47f aed2 	bne.w	801b5ae <tiny_vsnprintf_like+0x1e>
 801b80a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b80c:	68fb      	ldr	r3, [r7, #12]
 801b80e:	1ad2      	subs	r2, r2, r3
 801b810:	68bb      	ldr	r3, [r7, #8]
 801b812:	3b01      	subs	r3, #1
 801b814:	429a      	cmp	r2, r3
 801b816:	f6bf aeca 	bge.w	801b5ae <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801b81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b81c:	2200      	movs	r2, #0
 801b81e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801b820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	1ad3      	subs	r3, r2, r3
}
 801b826:	4618      	mov	r0, r3
 801b828:	3738      	adds	r7, #56	@ 0x38
 801b82a:	46bd      	mov	sp, r7
 801b82c:	bd80      	pop	{r7, pc}
 801b82e:	bf00      	nop
 801b830:	0801d008 	.word	0x0801d008

0801b834 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801b834:	b580      	push	{r7, lr}
 801b836:	b090      	sub	sp, #64	@ 0x40
 801b838:	af00      	add	r7, sp, #0
 801b83a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801b83c:	4b73      	ldr	r3, [pc, #460]	@ (801ba0c <UTIL_SEQ_Run+0x1d8>)
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801b842:	4b72      	ldr	r3, [pc, #456]	@ (801ba0c <UTIL_SEQ_Run+0x1d8>)
 801b844:	681a      	ldr	r2, [r3, #0]
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	4013      	ands	r3, r2
 801b84a:	4a70      	ldr	r2, [pc, #448]	@ (801ba0c <UTIL_SEQ_Run+0x1d8>)
 801b84c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801b84e:	4b70      	ldr	r3, [pc, #448]	@ (801ba10 <UTIL_SEQ_Run+0x1dc>)
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b854:	4b6f      	ldr	r3, [pc, #444]	@ (801ba14 <UTIL_SEQ_Run+0x1e0>)
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b85a:	4b6f      	ldr	r3, [pc, #444]	@ (801ba18 <UTIL_SEQ_Run+0x1e4>)
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801b860:	4b6e      	ldr	r3, [pc, #440]	@ (801ba1c <UTIL_SEQ_Run+0x1e8>)
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b866:	e08d      	b.n	801b984 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801b868:	2300      	movs	r3, #0
 801b86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b86c:	e002      	b.n	801b874 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801b86e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b870:	3301      	adds	r3, #1
 801b872:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b874:	4a6a      	ldr	r2, [pc, #424]	@ (801ba20 <UTIL_SEQ_Run+0x1ec>)
 801b876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b878:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b87e:	401a      	ands	r2, r3
 801b880:	4b62      	ldr	r3, [pc, #392]	@ (801ba0c <UTIL_SEQ_Run+0x1d8>)
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	4013      	ands	r3, r2
 801b886:	2b00      	cmp	r3, #0
 801b888:	d0f1      	beq.n	801b86e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801b88a:	4a65      	ldr	r2, [pc, #404]	@ (801ba20 <UTIL_SEQ_Run+0x1ec>)
 801b88c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b88e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b894:	401a      	ands	r2, r3
 801b896:	4b5d      	ldr	r3, [pc, #372]	@ (801ba0c <UTIL_SEQ_Run+0x1d8>)
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	4013      	ands	r3, r2
 801b89c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801b89e:	4a60      	ldr	r2, [pc, #384]	@ (801ba20 <UTIL_SEQ_Run+0x1ec>)
 801b8a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8a2:	00db      	lsls	r3, r3, #3
 801b8a4:	4413      	add	r3, r2
 801b8a6:	685a      	ldr	r2, [r3, #4]
 801b8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8aa:	4013      	ands	r3, r2
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d106      	bne.n	801b8be <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801b8b0:	4a5b      	ldr	r2, [pc, #364]	@ (801ba20 <UTIL_SEQ_Run+0x1ec>)
 801b8b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8b4:	00db      	lsls	r3, r3, #3
 801b8b6:	4413      	add	r3, r2
 801b8b8:	f04f 32ff 	mov.w	r2, #4294967295
 801b8bc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801b8be:	4a58      	ldr	r2, [pc, #352]	@ (801ba20 <UTIL_SEQ_Run+0x1ec>)
 801b8c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8c2:	00db      	lsls	r3, r3, #3
 801b8c4:	4413      	add	r3, r2
 801b8c6:	685a      	ldr	r2, [r3, #4]
 801b8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8ca:	4013      	ands	r3, r2
 801b8cc:	4618      	mov	r0, r3
 801b8ce:	f000 f907 	bl	801bae0 <SEQ_BitPosition>
 801b8d2:	4603      	mov	r3, r0
 801b8d4:	461a      	mov	r2, r3
 801b8d6:	4b53      	ldr	r3, [pc, #332]	@ (801ba24 <UTIL_SEQ_Run+0x1f0>)
 801b8d8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801b8da:	4a51      	ldr	r2, [pc, #324]	@ (801ba20 <UTIL_SEQ_Run+0x1ec>)
 801b8dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8de:	00db      	lsls	r3, r3, #3
 801b8e0:	4413      	add	r3, r2
 801b8e2:	685a      	ldr	r2, [r3, #4]
 801b8e4:	4b4f      	ldr	r3, [pc, #316]	@ (801ba24 <UTIL_SEQ_Run+0x1f0>)
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	2101      	movs	r1, #1
 801b8ea:	fa01 f303 	lsl.w	r3, r1, r3
 801b8ee:	43db      	mvns	r3, r3
 801b8f0:	401a      	ands	r2, r3
 801b8f2:	494b      	ldr	r1, [pc, #300]	@ (801ba20 <UTIL_SEQ_Run+0x1ec>)
 801b8f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8f6:	00db      	lsls	r3, r3, #3
 801b8f8:	440b      	add	r3, r1
 801b8fa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b8fc:	f3ef 8310 	mrs	r3, PRIMASK
 801b900:	61bb      	str	r3, [r7, #24]
  return(result);
 801b902:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b904:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801b906:	b672      	cpsid	i
}
 801b908:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801b90a:	4b46      	ldr	r3, [pc, #280]	@ (801ba24 <UTIL_SEQ_Run+0x1f0>)
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	2201      	movs	r2, #1
 801b910:	fa02 f303 	lsl.w	r3, r2, r3
 801b914:	43da      	mvns	r2, r3
 801b916:	4b3e      	ldr	r3, [pc, #248]	@ (801ba10 <UTIL_SEQ_Run+0x1dc>)
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	4013      	ands	r3, r2
 801b91c:	4a3c      	ldr	r2, [pc, #240]	@ (801ba10 <UTIL_SEQ_Run+0x1dc>)
 801b91e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b920:	2301      	movs	r3, #1
 801b922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b924:	e013      	b.n	801b94e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801b926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b928:	3b01      	subs	r3, #1
 801b92a:	4a3d      	ldr	r2, [pc, #244]	@ (801ba20 <UTIL_SEQ_Run+0x1ec>)
 801b92c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801b930:	4b3c      	ldr	r3, [pc, #240]	@ (801ba24 <UTIL_SEQ_Run+0x1f0>)
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	2201      	movs	r2, #1
 801b936:	fa02 f303 	lsl.w	r3, r2, r3
 801b93a:	43da      	mvns	r2, r3
 801b93c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b93e:	3b01      	subs	r3, #1
 801b940:	400a      	ands	r2, r1
 801b942:	4937      	ldr	r1, [pc, #220]	@ (801ba20 <UTIL_SEQ_Run+0x1ec>)
 801b944:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b94a:	3b01      	subs	r3, #1
 801b94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b950:	2b00      	cmp	r3, #0
 801b952:	d1e8      	bne.n	801b926 <UTIL_SEQ_Run+0xf2>
 801b954:	6a3b      	ldr	r3, [r7, #32]
 801b956:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b958:	697b      	ldr	r3, [r7, #20]
 801b95a:	f383 8810 	msr	PRIMASK, r3
}
 801b95e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801b960:	4b30      	ldr	r3, [pc, #192]	@ (801ba24 <UTIL_SEQ_Run+0x1f0>)
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	4a30      	ldr	r2, [pc, #192]	@ (801ba28 <UTIL_SEQ_Run+0x1f4>)
 801b966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b96a:	4798      	blx	r3

    local_taskset = TaskSet;
 801b96c:	4b28      	ldr	r3, [pc, #160]	@ (801ba10 <UTIL_SEQ_Run+0x1dc>)
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801b972:	4b28      	ldr	r3, [pc, #160]	@ (801ba14 <UTIL_SEQ_Run+0x1e0>)
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801b978:	4b27      	ldr	r3, [pc, #156]	@ (801ba18 <UTIL_SEQ_Run+0x1e4>)
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801b97e:	4b27      	ldr	r3, [pc, #156]	@ (801ba1c <UTIL_SEQ_Run+0x1e8>)
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b984:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b988:	401a      	ands	r2, r3
 801b98a:	4b20      	ldr	r3, [pc, #128]	@ (801ba0c <UTIL_SEQ_Run+0x1d8>)
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	4013      	ands	r3, r2
 801b990:	2b00      	cmp	r3, #0
 801b992:	d005      	beq.n	801b9a0 <UTIL_SEQ_Run+0x16c>
 801b994:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b998:	4013      	ands	r3, r2
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	f43f af64 	beq.w	801b868 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801b9a0:	4b20      	ldr	r3, [pc, #128]	@ (801ba24 <UTIL_SEQ_Run+0x1f0>)
 801b9a2:	f04f 32ff 	mov.w	r2, #4294967295
 801b9a6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801b9a8:	f000 f88e 	bl	801bac8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b9ac:	f3ef 8310 	mrs	r3, PRIMASK
 801b9b0:	613b      	str	r3, [r7, #16]
  return(result);
 801b9b2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801b9b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b9b6:	b672      	cpsid	i
}
 801b9b8:	bf00      	nop
  local_taskset = TaskSet;
 801b9ba:	4b15      	ldr	r3, [pc, #84]	@ (801ba10 <UTIL_SEQ_Run+0x1dc>)
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b9c0:	4b14      	ldr	r3, [pc, #80]	@ (801ba14 <UTIL_SEQ_Run+0x1e0>)
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b9c6:	4b14      	ldr	r3, [pc, #80]	@ (801ba18 <UTIL_SEQ_Run+0x1e4>)
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801b9cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9d0:	401a      	ands	r2, r3
 801b9d2:	4b0e      	ldr	r3, [pc, #56]	@ (801ba0c <UTIL_SEQ_Run+0x1d8>)
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	4013      	ands	r3, r2
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d107      	bne.n	801b9ec <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801b9dc:	4b0f      	ldr	r3, [pc, #60]	@ (801ba1c <UTIL_SEQ_Run+0x1e8>)
 801b9de:	681a      	ldr	r2, [r3, #0]
 801b9e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b9e2:	4013      	ands	r3, r2
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d101      	bne.n	801b9ec <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801b9e8:	f7e6 fb3a 	bl	8002060 <UTIL_SEQ_Idle>
 801b9ec:	69fb      	ldr	r3, [r7, #28]
 801b9ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	f383 8810 	msr	PRIMASK, r3
}
 801b9f6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801b9f8:	f000 f86c 	bl	801bad4 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801b9fc:	4a03      	ldr	r2, [pc, #12]	@ (801ba0c <UTIL_SEQ_Run+0x1d8>)
 801b9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba00:	6013      	str	r3, [r2, #0]

  return;
 801ba02:	bf00      	nop
}
 801ba04:	3740      	adds	r7, #64	@ 0x40
 801ba06:	46bd      	mov	sp, r7
 801ba08:	bd80      	pop	{r7, pc}
 801ba0a:	bf00      	nop
 801ba0c:	20000144 	.word	0x20000144
 801ba10:	20001d0c 	.word	0x20001d0c
 801ba14:	20001d10 	.word	0x20001d10
 801ba18:	20000140 	.word	0x20000140
 801ba1c:	20001d14 	.word	0x20001d14
 801ba20:	20001d2c 	.word	0x20001d2c
 801ba24:	20001d18 	.word	0x20001d18
 801ba28:	20001d1c 	.word	0x20001d1c

0801ba2c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b088      	sub	sp, #32
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	60f8      	str	r0, [r7, #12]
 801ba34:	60b9      	str	r1, [r7, #8]
 801ba36:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba38:	f3ef 8310 	mrs	r3, PRIMASK
 801ba3c:	617b      	str	r3, [r7, #20]
  return(result);
 801ba3e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801ba40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba42:	b672      	cpsid	i
}
 801ba44:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801ba46:	68f8      	ldr	r0, [r7, #12]
 801ba48:	f000 f84a 	bl	801bae0 <SEQ_BitPosition>
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	4619      	mov	r1, r3
 801ba50:	4a06      	ldr	r2, [pc, #24]	@ (801ba6c <UTIL_SEQ_RegTask+0x40>)
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ba58:	69fb      	ldr	r3, [r7, #28]
 801ba5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba5c:	69bb      	ldr	r3, [r7, #24]
 801ba5e:	f383 8810 	msr	PRIMASK, r3
}
 801ba62:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801ba64:	bf00      	nop
}
 801ba66:	3720      	adds	r7, #32
 801ba68:	46bd      	mov	sp, r7
 801ba6a:	bd80      	pop	{r7, pc}
 801ba6c:	20001d1c 	.word	0x20001d1c

0801ba70 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801ba70:	b480      	push	{r7}
 801ba72:	b087      	sub	sp, #28
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	6078      	str	r0, [r7, #4]
 801ba78:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba7a:	f3ef 8310 	mrs	r3, PRIMASK
 801ba7e:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba80:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ba82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba84:	b672      	cpsid	i
}
 801ba86:	bf00      	nop

  TaskSet |= TaskId_bm;
 801ba88:	4b0d      	ldr	r3, [pc, #52]	@ (801bac0 <UTIL_SEQ_SetTask+0x50>)
 801ba8a:	681a      	ldr	r2, [r3, #0]
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	4313      	orrs	r3, r2
 801ba90:	4a0b      	ldr	r2, [pc, #44]	@ (801bac0 <UTIL_SEQ_SetTask+0x50>)
 801ba92:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801ba94:	4a0b      	ldr	r2, [pc, #44]	@ (801bac4 <UTIL_SEQ_SetTask+0x54>)
 801ba96:	683b      	ldr	r3, [r7, #0]
 801ba98:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	431a      	orrs	r2, r3
 801baa0:	4908      	ldr	r1, [pc, #32]	@ (801bac4 <UTIL_SEQ_SetTask+0x54>)
 801baa2:	683b      	ldr	r3, [r7, #0]
 801baa4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801baa8:	697b      	ldr	r3, [r7, #20]
 801baaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801baac:	693b      	ldr	r3, [r7, #16]
 801baae:	f383 8810 	msr	PRIMASK, r3
}
 801bab2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801bab4:	bf00      	nop
}
 801bab6:	371c      	adds	r7, #28
 801bab8:	46bd      	mov	sp, r7
 801baba:	bc80      	pop	{r7}
 801babc:	4770      	bx	lr
 801babe:	bf00      	nop
 801bac0:	20001d0c 	.word	0x20001d0c
 801bac4:	20001d2c 	.word	0x20001d2c

0801bac8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801bac8:	b480      	push	{r7}
 801baca:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801bacc:	bf00      	nop
}
 801bace:	46bd      	mov	sp, r7
 801bad0:	bc80      	pop	{r7}
 801bad2:	4770      	bx	lr

0801bad4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801bad4:	b480      	push	{r7}
 801bad6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801bad8:	bf00      	nop
}
 801bada:	46bd      	mov	sp, r7
 801badc:	bc80      	pop	{r7}
 801bade:	4770      	bx	lr

0801bae0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801bae0:	b480      	push	{r7}
 801bae2:	b085      	sub	sp, #20
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801bae8:	2300      	movs	r3, #0
 801baea:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801baf0:	68bb      	ldr	r3, [r7, #8]
 801baf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801baf6:	d204      	bcs.n	801bb02 <SEQ_BitPosition+0x22>
 801baf8:	2310      	movs	r3, #16
 801bafa:	73fb      	strb	r3, [r7, #15]
 801bafc:	68bb      	ldr	r3, [r7, #8]
 801bafe:	041b      	lsls	r3, r3, #16
 801bb00:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801bb02:	68bb      	ldr	r3, [r7, #8]
 801bb04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bb08:	d205      	bcs.n	801bb16 <SEQ_BitPosition+0x36>
 801bb0a:	7bfb      	ldrb	r3, [r7, #15]
 801bb0c:	3308      	adds	r3, #8
 801bb0e:	73fb      	strb	r3, [r7, #15]
 801bb10:	68bb      	ldr	r3, [r7, #8]
 801bb12:	021b      	lsls	r3, r3, #8
 801bb14:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801bb16:	68bb      	ldr	r3, [r7, #8]
 801bb18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801bb1c:	d205      	bcs.n	801bb2a <SEQ_BitPosition+0x4a>
 801bb1e:	7bfb      	ldrb	r3, [r7, #15]
 801bb20:	3304      	adds	r3, #4
 801bb22:	73fb      	strb	r3, [r7, #15]
 801bb24:	68bb      	ldr	r3, [r7, #8]
 801bb26:	011b      	lsls	r3, r3, #4
 801bb28:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801bb2a:	68bb      	ldr	r3, [r7, #8]
 801bb2c:	0f1b      	lsrs	r3, r3, #28
 801bb2e:	4a07      	ldr	r2, [pc, #28]	@ (801bb4c <SEQ_BitPosition+0x6c>)
 801bb30:	5cd2      	ldrb	r2, [r2, r3]
 801bb32:	7bfb      	ldrb	r3, [r7, #15]
 801bb34:	4413      	add	r3, r2
 801bb36:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801bb38:	7bfb      	ldrb	r3, [r7, #15]
 801bb3a:	f1c3 031f 	rsb	r3, r3, #31
 801bb3e:	b2db      	uxtb	r3, r3
}
 801bb40:	4618      	mov	r0, r3
 801bb42:	3714      	adds	r7, #20
 801bb44:	46bd      	mov	sp, r7
 801bb46:	bc80      	pop	{r7}
 801bb48:	4770      	bx	lr
 801bb4a:	bf00      	nop
 801bb4c:	0801d64c 	.word	0x0801d64c

0801bb50 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801bb50:	b580      	push	{r7, lr}
 801bb52:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801bb54:	4b04      	ldr	r3, [pc, #16]	@ (801bb68 <UTIL_TIMER_Init+0x18>)
 801bb56:	2200      	movs	r2, #0
 801bb58:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801bb5a:	4b04      	ldr	r3, [pc, #16]	@ (801bb6c <UTIL_TIMER_Init+0x1c>)
 801bb5c:	681b      	ldr	r3, [r3, #0]
 801bb5e:	4798      	blx	r3
 801bb60:	4603      	mov	r3, r0
}
 801bb62:	4618      	mov	r0, r3
 801bb64:	bd80      	pop	{r7, pc}
 801bb66:	bf00      	nop
 801bb68:	20001d34 	.word	0x20001d34
 801bb6c:	0801d0c8 	.word	0x0801d0c8

0801bb70 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801bb70:	b580      	push	{r7, lr}
 801bb72:	b084      	sub	sp, #16
 801bb74:	af00      	add	r7, sp, #0
 801bb76:	60f8      	str	r0, [r7, #12]
 801bb78:	60b9      	str	r1, [r7, #8]
 801bb7a:	603b      	str	r3, [r7, #0]
 801bb7c:	4613      	mov	r3, r2
 801bb7e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801bb80:	68fb      	ldr	r3, [r7, #12]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d023      	beq.n	801bbce <UTIL_TIMER_Create+0x5e>
 801bb86:	683b      	ldr	r3, [r7, #0]
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d020      	beq.n	801bbce <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801bb8c:	68fb      	ldr	r3, [r7, #12]
 801bb8e:	2200      	movs	r2, #0
 801bb90:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801bb92:	4b11      	ldr	r3, [pc, #68]	@ (801bbd8 <UTIL_TIMER_Create+0x68>)
 801bb94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb96:	68b8      	ldr	r0, [r7, #8]
 801bb98:	4798      	blx	r3
 801bb9a:	4602      	mov	r2, r0
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801bba0:	68fb      	ldr	r3, [r7, #12]
 801bba2:	2200      	movs	r2, #0
 801bba4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	2200      	movs	r2, #0
 801bbaa:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	2200      	movs	r2, #0
 801bbb0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801bbb2:	68fb      	ldr	r3, [r7, #12]
 801bbb4:	683a      	ldr	r2, [r7, #0]
 801bbb6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	69ba      	ldr	r2, [r7, #24]
 801bbbc:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	79fa      	ldrb	r2, [r7, #7]
 801bbc2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801bbc4:	68fb      	ldr	r3, [r7, #12]
 801bbc6:	2200      	movs	r2, #0
 801bbc8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801bbca:	2300      	movs	r3, #0
 801bbcc:	e000      	b.n	801bbd0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801bbce:	2301      	movs	r3, #1
  }
}
 801bbd0:	4618      	mov	r0, r3
 801bbd2:	3710      	adds	r7, #16
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	bd80      	pop	{r7, pc}
 801bbd8:	0801d0c8 	.word	0x0801d0c8

0801bbdc <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801bbdc:	b580      	push	{r7, lr}
 801bbde:	b08a      	sub	sp, #40	@ 0x28
 801bbe0:	af00      	add	r7, sp, #0
 801bbe2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bbe4:	2300      	movs	r3, #0
 801bbe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d056      	beq.n	801bc9e <UTIL_TIMER_Start+0xc2>
 801bbf0:	6878      	ldr	r0, [r7, #4]
 801bbf2:	f000 f9a9 	bl	801bf48 <TimerExists>
 801bbf6:	4603      	mov	r3, r0
 801bbf8:	f083 0301 	eor.w	r3, r3, #1
 801bbfc:	b2db      	uxtb	r3, r3
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d04d      	beq.n	801bc9e <UTIL_TIMER_Start+0xc2>
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	7a5b      	ldrb	r3, [r3, #9]
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d149      	bne.n	801bc9e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc0a:	f3ef 8310 	mrs	r3, PRIMASK
 801bc0e:	613b      	str	r3, [r7, #16]
  return(result);
 801bc10:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bc12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc14:	b672      	cpsid	i
}
 801bc16:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	685b      	ldr	r3, [r3, #4]
 801bc1c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801bc1e:	4b24      	ldr	r3, [pc, #144]	@ (801bcb0 <UTIL_TIMER_Start+0xd4>)
 801bc20:	6a1b      	ldr	r3, [r3, #32]
 801bc22:	4798      	blx	r3
 801bc24:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801bc26:	6a3a      	ldr	r2, [r7, #32]
 801bc28:	69bb      	ldr	r3, [r7, #24]
 801bc2a:	429a      	cmp	r2, r3
 801bc2c:	d201      	bcs.n	801bc32 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801bc2e:	69bb      	ldr	r3, [r7, #24]
 801bc30:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	6a3a      	ldr	r2, [r7, #32]
 801bc36:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	2200      	movs	r2, #0
 801bc3c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	2201      	movs	r2, #1
 801bc42:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	2200      	movs	r2, #0
 801bc48:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801bc4a:	4b1a      	ldr	r3, [pc, #104]	@ (801bcb4 <UTIL_TIMER_Start+0xd8>)
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d106      	bne.n	801bc60 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801bc52:	4b17      	ldr	r3, [pc, #92]	@ (801bcb0 <UTIL_TIMER_Start+0xd4>)
 801bc54:	691b      	ldr	r3, [r3, #16]
 801bc56:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801bc58:	6878      	ldr	r0, [r7, #4]
 801bc5a:	f000 f9eb 	bl	801c034 <TimerInsertNewHeadTimer>
 801bc5e:	e017      	b.n	801bc90 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801bc60:	4b13      	ldr	r3, [pc, #76]	@ (801bcb0 <UTIL_TIMER_Start+0xd4>)
 801bc62:	699b      	ldr	r3, [r3, #24]
 801bc64:	4798      	blx	r3
 801bc66:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	681a      	ldr	r2, [r3, #0]
 801bc6c:	697b      	ldr	r3, [r7, #20]
 801bc6e:	441a      	add	r2, r3
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	681a      	ldr	r2, [r3, #0]
 801bc78:	4b0e      	ldr	r3, [pc, #56]	@ (801bcb4 <UTIL_TIMER_Start+0xd8>)
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	429a      	cmp	r2, r3
 801bc80:	d203      	bcs.n	801bc8a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801bc82:	6878      	ldr	r0, [r7, #4]
 801bc84:	f000 f9d6 	bl	801c034 <TimerInsertNewHeadTimer>
 801bc88:	e002      	b.n	801bc90 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801bc8a:	6878      	ldr	r0, [r7, #4]
 801bc8c:	f000 f9a2 	bl	801bfd4 <TimerInsertTimer>
 801bc90:	69fb      	ldr	r3, [r7, #28]
 801bc92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	f383 8810 	msr	PRIMASK, r3
}
 801bc9a:	bf00      	nop
  {
 801bc9c:	e002      	b.n	801bca4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801bc9e:	2301      	movs	r3, #1
 801bca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801bca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801bca8:	4618      	mov	r0, r3
 801bcaa:	3728      	adds	r7, #40	@ 0x28
 801bcac:	46bd      	mov	sp, r7
 801bcae:	bd80      	pop	{r7, pc}
 801bcb0:	0801d0c8 	.word	0x0801d0c8
 801bcb4:	20001d34 	.word	0x20001d34

0801bcb8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801bcb8:	b580      	push	{r7, lr}
 801bcba:	b088      	sub	sp, #32
 801bcbc:	af00      	add	r7, sp, #0
 801bcbe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bcc0:	2300      	movs	r3, #0
 801bcc2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d05b      	beq.n	801bd82 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bcca:	f3ef 8310 	mrs	r3, PRIMASK
 801bcce:	60fb      	str	r3, [r7, #12]
  return(result);
 801bcd0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bcd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bcd4:	b672      	cpsid	i
}
 801bcd6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801bcd8:	4b2d      	ldr	r3, [pc, #180]	@ (801bd90 <UTIL_TIMER_Stop+0xd8>)
 801bcda:	681b      	ldr	r3, [r3, #0]
 801bcdc:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801bcde:	4b2c      	ldr	r3, [pc, #176]	@ (801bd90 <UTIL_TIMER_Stop+0xd8>)
 801bce0:	681b      	ldr	r3, [r3, #0]
 801bce2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	2201      	movs	r2, #1
 801bce8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801bcea:	4b29      	ldr	r3, [pc, #164]	@ (801bd90 <UTIL_TIMER_Stop+0xd8>)
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d041      	beq.n	801bd76 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	2200      	movs	r2, #0
 801bcf6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801bcf8:	4b25      	ldr	r3, [pc, #148]	@ (801bd90 <UTIL_TIMER_Stop+0xd8>)
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	687a      	ldr	r2, [r7, #4]
 801bcfe:	429a      	cmp	r2, r3
 801bd00:	d134      	bne.n	801bd6c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801bd02:	4b23      	ldr	r3, [pc, #140]	@ (801bd90 <UTIL_TIMER_Stop+0xd8>)
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	2200      	movs	r2, #0
 801bd08:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801bd0a:	4b21      	ldr	r3, [pc, #132]	@ (801bd90 <UTIL_TIMER_Stop+0xd8>)
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	695b      	ldr	r3, [r3, #20]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d00a      	beq.n	801bd2a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801bd14:	4b1e      	ldr	r3, [pc, #120]	@ (801bd90 <UTIL_TIMER_Stop+0xd8>)
 801bd16:	681b      	ldr	r3, [r3, #0]
 801bd18:	695b      	ldr	r3, [r3, #20]
 801bd1a:	4a1d      	ldr	r2, [pc, #116]	@ (801bd90 <UTIL_TIMER_Stop+0xd8>)
 801bd1c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801bd1e:	4b1c      	ldr	r3, [pc, #112]	@ (801bd90 <UTIL_TIMER_Stop+0xd8>)
 801bd20:	681b      	ldr	r3, [r3, #0]
 801bd22:	4618      	mov	r0, r3
 801bd24:	f000 f92c 	bl	801bf80 <TimerSetTimeout>
 801bd28:	e023      	b.n	801bd72 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801bd2a:	4b1a      	ldr	r3, [pc, #104]	@ (801bd94 <UTIL_TIMER_Stop+0xdc>)
 801bd2c:	68db      	ldr	r3, [r3, #12]
 801bd2e:	4798      	blx	r3
            TimerListHead = NULL;
 801bd30:	4b17      	ldr	r3, [pc, #92]	@ (801bd90 <UTIL_TIMER_Stop+0xd8>)
 801bd32:	2200      	movs	r2, #0
 801bd34:	601a      	str	r2, [r3, #0]
 801bd36:	e01c      	b.n	801bd72 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801bd38:	697a      	ldr	r2, [r7, #20]
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	429a      	cmp	r2, r3
 801bd3e:	d110      	bne.n	801bd62 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801bd40:	697b      	ldr	r3, [r7, #20]
 801bd42:	695b      	ldr	r3, [r3, #20]
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d006      	beq.n	801bd56 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801bd48:	697b      	ldr	r3, [r7, #20]
 801bd4a:	695b      	ldr	r3, [r3, #20]
 801bd4c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801bd4e:	69bb      	ldr	r3, [r7, #24]
 801bd50:	697a      	ldr	r2, [r7, #20]
 801bd52:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801bd54:	e00d      	b.n	801bd72 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801bd56:	2300      	movs	r3, #0
 801bd58:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801bd5a:	69bb      	ldr	r3, [r7, #24]
 801bd5c:	697a      	ldr	r2, [r7, #20]
 801bd5e:	615a      	str	r2, [r3, #20]
            break;
 801bd60:	e007      	b.n	801bd72 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801bd62:	697b      	ldr	r3, [r7, #20]
 801bd64:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801bd66:	697b      	ldr	r3, [r7, #20]
 801bd68:	695b      	ldr	r3, [r3, #20]
 801bd6a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801bd6c:	697b      	ldr	r3, [r7, #20]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d1e2      	bne.n	801bd38 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801bd72:	2300      	movs	r3, #0
 801bd74:	77fb      	strb	r3, [r7, #31]
 801bd76:	693b      	ldr	r3, [r7, #16]
 801bd78:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd7a:	68bb      	ldr	r3, [r7, #8]
 801bd7c:	f383 8810 	msr	PRIMASK, r3
}
 801bd80:	e001      	b.n	801bd86 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801bd82:	2301      	movs	r3, #1
 801bd84:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801bd86:	7ffb      	ldrb	r3, [r7, #31]
}
 801bd88:	4618      	mov	r0, r3
 801bd8a:	3720      	adds	r7, #32
 801bd8c:	46bd      	mov	sp, r7
 801bd8e:	bd80      	pop	{r7, pc}
 801bd90:	20001d34 	.word	0x20001d34
 801bd94:	0801d0c8 	.word	0x0801d0c8

0801bd98 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801bd98:	b580      	push	{r7, lr}
 801bd9a:	b084      	sub	sp, #16
 801bd9c:	af00      	add	r7, sp, #0
 801bd9e:	6078      	str	r0, [r7, #4]
 801bda0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bda2:	2300      	movs	r3, #0
 801bda4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d102      	bne.n	801bdb2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801bdac:	2301      	movs	r3, #1
 801bdae:	73fb      	strb	r3, [r7, #15]
 801bdb0:	e014      	b.n	801bddc <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801bdb2:	4b0d      	ldr	r3, [pc, #52]	@ (801bde8 <UTIL_TIMER_SetPeriod+0x50>)
 801bdb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bdb6:	6838      	ldr	r0, [r7, #0]
 801bdb8:	4798      	blx	r3
 801bdba:	4602      	mov	r2, r0
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801bdc0:	6878      	ldr	r0, [r7, #4]
 801bdc2:	f000 f8c1 	bl	801bf48 <TimerExists>
 801bdc6:	4603      	mov	r3, r0
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d007      	beq.n	801bddc <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801bdcc:	6878      	ldr	r0, [r7, #4]
 801bdce:	f7ff ff73 	bl	801bcb8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801bdd2:	6878      	ldr	r0, [r7, #4]
 801bdd4:	f7ff ff02 	bl	801bbdc <UTIL_TIMER_Start>
 801bdd8:	4603      	mov	r3, r0
 801bdda:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801bddc:	7bfb      	ldrb	r3, [r7, #15]
}
 801bdde:	4618      	mov	r0, r3
 801bde0:	3710      	adds	r7, #16
 801bde2:	46bd      	mov	sp, r7
 801bde4:	bd80      	pop	{r7, pc}
 801bde6:	bf00      	nop
 801bde8:	0801d0c8 	.word	0x0801d0c8

0801bdec <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801bdec:	b590      	push	{r4, r7, lr}
 801bdee:	b089      	sub	sp, #36	@ 0x24
 801bdf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bdf2:	f3ef 8310 	mrs	r3, PRIMASK
 801bdf6:	60bb      	str	r3, [r7, #8]
  return(result);
 801bdf8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bdfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801bdfc:	b672      	cpsid	i
}
 801bdfe:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801be00:	4b38      	ldr	r3, [pc, #224]	@ (801bee4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801be02:	695b      	ldr	r3, [r3, #20]
 801be04:	4798      	blx	r3
 801be06:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801be08:	4b36      	ldr	r3, [pc, #216]	@ (801bee4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801be0a:	691b      	ldr	r3, [r3, #16]
 801be0c:	4798      	blx	r3
 801be0e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801be10:	693a      	ldr	r2, [r7, #16]
 801be12:	697b      	ldr	r3, [r7, #20]
 801be14:	1ad3      	subs	r3, r2, r3
 801be16:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801be18:	4b33      	ldr	r3, [pc, #204]	@ (801bee8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be1a:	681b      	ldr	r3, [r3, #0]
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d037      	beq.n	801be90 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801be20:	4b31      	ldr	r3, [pc, #196]	@ (801bee8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801be26:	69fb      	ldr	r3, [r7, #28]
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	68fa      	ldr	r2, [r7, #12]
 801be2c:	429a      	cmp	r2, r3
 801be2e:	d206      	bcs.n	801be3e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801be30:	69fb      	ldr	r3, [r7, #28]
 801be32:	681a      	ldr	r2, [r3, #0]
 801be34:	68fb      	ldr	r3, [r7, #12]
 801be36:	1ad2      	subs	r2, r2, r3
 801be38:	69fb      	ldr	r3, [r7, #28]
 801be3a:	601a      	str	r2, [r3, #0]
 801be3c:	e002      	b.n	801be44 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801be3e:	69fb      	ldr	r3, [r7, #28]
 801be40:	2200      	movs	r2, #0
 801be42:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801be44:	69fb      	ldr	r3, [r7, #28]
 801be46:	695b      	ldr	r3, [r3, #20]
 801be48:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801be4a:	69fb      	ldr	r3, [r7, #28]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d1ea      	bne.n	801be26 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801be50:	e01e      	b.n	801be90 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801be52:	4b25      	ldr	r3, [pc, #148]	@ (801bee8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801be58:	4b23      	ldr	r3, [pc, #140]	@ (801bee8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	695b      	ldr	r3, [r3, #20]
 801be5e:	4a22      	ldr	r2, [pc, #136]	@ (801bee8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be60:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801be62:	69fb      	ldr	r3, [r7, #28]
 801be64:	2200      	movs	r2, #0
 801be66:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801be68:	69fb      	ldr	r3, [r7, #28]
 801be6a:	2200      	movs	r2, #0
 801be6c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801be6e:	69fb      	ldr	r3, [r7, #28]
 801be70:	68db      	ldr	r3, [r3, #12]
 801be72:	69fa      	ldr	r2, [r7, #28]
 801be74:	6912      	ldr	r2, [r2, #16]
 801be76:	4610      	mov	r0, r2
 801be78:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801be7a:	69fb      	ldr	r3, [r7, #28]
 801be7c:	7adb      	ldrb	r3, [r3, #11]
 801be7e:	2b01      	cmp	r3, #1
 801be80:	d106      	bne.n	801be90 <UTIL_TIMER_IRQ_Handler+0xa4>
 801be82:	69fb      	ldr	r3, [r7, #28]
 801be84:	7a9b      	ldrb	r3, [r3, #10]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d102      	bne.n	801be90 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801be8a:	69f8      	ldr	r0, [r7, #28]
 801be8c:	f7ff fea6 	bl	801bbdc <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801be90:	4b15      	ldr	r3, [pc, #84]	@ (801bee8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	2b00      	cmp	r3, #0
 801be96:	d00d      	beq.n	801beb4 <UTIL_TIMER_IRQ_Handler+0xc8>
 801be98:	4b13      	ldr	r3, [pc, #76]	@ (801bee8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be9a:	681b      	ldr	r3, [r3, #0]
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d0d7      	beq.n	801be52 <UTIL_TIMER_IRQ_Handler+0x66>
 801bea2:	4b11      	ldr	r3, [pc, #68]	@ (801bee8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	681c      	ldr	r4, [r3, #0]
 801bea8:	4b0e      	ldr	r3, [pc, #56]	@ (801bee4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801beaa:	699b      	ldr	r3, [r3, #24]
 801beac:	4798      	blx	r3
 801beae:	4603      	mov	r3, r0
 801beb0:	429c      	cmp	r4, r3
 801beb2:	d3ce      	bcc.n	801be52 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801beb4:	4b0c      	ldr	r3, [pc, #48]	@ (801bee8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d009      	beq.n	801bed0 <UTIL_TIMER_IRQ_Handler+0xe4>
 801bebc:	4b0a      	ldr	r3, [pc, #40]	@ (801bee8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	7a1b      	ldrb	r3, [r3, #8]
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d104      	bne.n	801bed0 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801bec6:	4b08      	ldr	r3, [pc, #32]	@ (801bee8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	4618      	mov	r0, r3
 801becc:	f000 f858 	bl	801bf80 <TimerSetTimeout>
 801bed0:	69bb      	ldr	r3, [r7, #24]
 801bed2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	f383 8810 	msr	PRIMASK, r3
}
 801beda:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801bedc:	bf00      	nop
 801bede:	3724      	adds	r7, #36	@ 0x24
 801bee0:	46bd      	mov	sp, r7
 801bee2:	bd90      	pop	{r4, r7, pc}
 801bee4:	0801d0c8 	.word	0x0801d0c8
 801bee8:	20001d34 	.word	0x20001d34

0801beec <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801beec:	b580      	push	{r7, lr}
 801beee:	b082      	sub	sp, #8
 801bef0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801bef2:	4b06      	ldr	r3, [pc, #24]	@ (801bf0c <UTIL_TIMER_GetCurrentTime+0x20>)
 801bef4:	69db      	ldr	r3, [r3, #28]
 801bef6:	4798      	blx	r3
 801bef8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801befa:	4b04      	ldr	r3, [pc, #16]	@ (801bf0c <UTIL_TIMER_GetCurrentTime+0x20>)
 801befc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801befe:	6878      	ldr	r0, [r7, #4]
 801bf00:	4798      	blx	r3
 801bf02:	4603      	mov	r3, r0
}
 801bf04:	4618      	mov	r0, r3
 801bf06:	3708      	adds	r7, #8
 801bf08:	46bd      	mov	sp, r7
 801bf0a:	bd80      	pop	{r7, pc}
 801bf0c:	0801d0c8 	.word	0x0801d0c8

0801bf10 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b084      	sub	sp, #16
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801bf18:	4b0a      	ldr	r3, [pc, #40]	@ (801bf44 <UTIL_TIMER_GetElapsedTime+0x34>)
 801bf1a:	69db      	ldr	r3, [r3, #28]
 801bf1c:	4798      	blx	r3
 801bf1e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801bf20:	4b08      	ldr	r3, [pc, #32]	@ (801bf44 <UTIL_TIMER_GetElapsedTime+0x34>)
 801bf22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bf24:	6878      	ldr	r0, [r7, #4]
 801bf26:	4798      	blx	r3
 801bf28:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801bf2a:	4b06      	ldr	r3, [pc, #24]	@ (801bf44 <UTIL_TIMER_GetElapsedTime+0x34>)
 801bf2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bf2e:	68f9      	ldr	r1, [r7, #12]
 801bf30:	68ba      	ldr	r2, [r7, #8]
 801bf32:	1a8a      	subs	r2, r1, r2
 801bf34:	4610      	mov	r0, r2
 801bf36:	4798      	blx	r3
 801bf38:	4603      	mov	r3, r0
}
 801bf3a:	4618      	mov	r0, r3
 801bf3c:	3710      	adds	r7, #16
 801bf3e:	46bd      	mov	sp, r7
 801bf40:	bd80      	pop	{r7, pc}
 801bf42:	bf00      	nop
 801bf44:	0801d0c8 	.word	0x0801d0c8

0801bf48 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801bf48:	b480      	push	{r7}
 801bf4a:	b085      	sub	sp, #20
 801bf4c:	af00      	add	r7, sp, #0
 801bf4e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bf50:	4b0a      	ldr	r3, [pc, #40]	@ (801bf7c <TimerExists+0x34>)
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801bf56:	e008      	b.n	801bf6a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801bf58:	68fa      	ldr	r2, [r7, #12]
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	429a      	cmp	r2, r3
 801bf5e:	d101      	bne.n	801bf64 <TimerExists+0x1c>
    {
      return true;
 801bf60:	2301      	movs	r3, #1
 801bf62:	e006      	b.n	801bf72 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801bf64:	68fb      	ldr	r3, [r7, #12]
 801bf66:	695b      	ldr	r3, [r3, #20]
 801bf68:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d1f3      	bne.n	801bf58 <TimerExists+0x10>
  }
  return false;
 801bf70:	2300      	movs	r3, #0
}
 801bf72:	4618      	mov	r0, r3
 801bf74:	3714      	adds	r7, #20
 801bf76:	46bd      	mov	sp, r7
 801bf78:	bc80      	pop	{r7}
 801bf7a:	4770      	bx	lr
 801bf7c:	20001d34 	.word	0x20001d34

0801bf80 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801bf80:	b590      	push	{r4, r7, lr}
 801bf82:	b085      	sub	sp, #20
 801bf84:	af00      	add	r7, sp, #0
 801bf86:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801bf88:	4b11      	ldr	r3, [pc, #68]	@ (801bfd0 <TimerSetTimeout+0x50>)
 801bf8a:	6a1b      	ldr	r3, [r3, #32]
 801bf8c:	4798      	blx	r3
 801bf8e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	2201      	movs	r2, #1
 801bf94:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	681c      	ldr	r4, [r3, #0]
 801bf9a:	4b0d      	ldr	r3, [pc, #52]	@ (801bfd0 <TimerSetTimeout+0x50>)
 801bf9c:	699b      	ldr	r3, [r3, #24]
 801bf9e:	4798      	blx	r3
 801bfa0:	4602      	mov	r2, r0
 801bfa2:	68fb      	ldr	r3, [r7, #12]
 801bfa4:	4413      	add	r3, r2
 801bfa6:	429c      	cmp	r4, r3
 801bfa8:	d207      	bcs.n	801bfba <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801bfaa:	4b09      	ldr	r3, [pc, #36]	@ (801bfd0 <TimerSetTimeout+0x50>)
 801bfac:	699b      	ldr	r3, [r3, #24]
 801bfae:	4798      	blx	r3
 801bfb0:	4602      	mov	r2, r0
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	441a      	add	r2, r3
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801bfba:	4b05      	ldr	r3, [pc, #20]	@ (801bfd0 <TimerSetTimeout+0x50>)
 801bfbc:	689b      	ldr	r3, [r3, #8]
 801bfbe:	687a      	ldr	r2, [r7, #4]
 801bfc0:	6812      	ldr	r2, [r2, #0]
 801bfc2:	4610      	mov	r0, r2
 801bfc4:	4798      	blx	r3
}
 801bfc6:	bf00      	nop
 801bfc8:	3714      	adds	r7, #20
 801bfca:	46bd      	mov	sp, r7
 801bfcc:	bd90      	pop	{r4, r7, pc}
 801bfce:	bf00      	nop
 801bfd0:	0801d0c8 	.word	0x0801d0c8

0801bfd4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801bfd4:	b480      	push	{r7}
 801bfd6:	b085      	sub	sp, #20
 801bfd8:	af00      	add	r7, sp, #0
 801bfda:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bfdc:	4b14      	ldr	r3, [pc, #80]	@ (801c030 <TimerInsertTimer+0x5c>)
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801bfe2:	4b13      	ldr	r3, [pc, #76]	@ (801c030 <TimerInsertTimer+0x5c>)
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	695b      	ldr	r3, [r3, #20]
 801bfe8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801bfea:	e012      	b.n	801c012 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	681a      	ldr	r2, [r3, #0]
 801bff0:	68bb      	ldr	r3, [r7, #8]
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	429a      	cmp	r2, r3
 801bff6:	d905      	bls.n	801c004 <TimerInsertTimer+0x30>
    {
        cur = next;
 801bff8:	68bb      	ldr	r3, [r7, #8]
 801bffa:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801bffc:	68bb      	ldr	r3, [r7, #8]
 801bffe:	695b      	ldr	r3, [r3, #20]
 801c000:	60bb      	str	r3, [r7, #8]
 801c002:	e006      	b.n	801c012 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c004:	68fb      	ldr	r3, [r7, #12]
 801c006:	687a      	ldr	r2, [r7, #4]
 801c008:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	68ba      	ldr	r2, [r7, #8]
 801c00e:	615a      	str	r2, [r3, #20]
        return;
 801c010:	e009      	b.n	801c026 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	695b      	ldr	r3, [r3, #20]
 801c016:	2b00      	cmp	r3, #0
 801c018:	d1e8      	bne.n	801bfec <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	687a      	ldr	r2, [r7, #4]
 801c01e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	2200      	movs	r2, #0
 801c024:	615a      	str	r2, [r3, #20]
}
 801c026:	3714      	adds	r7, #20
 801c028:	46bd      	mov	sp, r7
 801c02a:	bc80      	pop	{r7}
 801c02c:	4770      	bx	lr
 801c02e:	bf00      	nop
 801c030:	20001d34 	.word	0x20001d34

0801c034 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b084      	sub	sp, #16
 801c038:	af00      	add	r7, sp, #0
 801c03a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c03c:	4b0b      	ldr	r3, [pc, #44]	@ (801c06c <TimerInsertNewHeadTimer+0x38>)
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	2b00      	cmp	r3, #0
 801c046:	d002      	beq.n	801c04e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	2200      	movs	r2, #0
 801c04c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	68fa      	ldr	r2, [r7, #12]
 801c052:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801c054:	4a05      	ldr	r2, [pc, #20]	@ (801c06c <TimerInsertNewHeadTimer+0x38>)
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801c05a:	4b04      	ldr	r3, [pc, #16]	@ (801c06c <TimerInsertNewHeadTimer+0x38>)
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	4618      	mov	r0, r3
 801c060:	f7ff ff8e 	bl	801bf80 <TimerSetTimeout>
}
 801c064:	bf00      	nop
 801c066:	3710      	adds	r7, #16
 801c068:	46bd      	mov	sp, r7
 801c06a:	bd80      	pop	{r7, pc}
 801c06c:	20001d34 	.word	0x20001d34

0801c070 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801c070:	b580      	push	{r7, lr}
 801c072:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801c074:	2218      	movs	r2, #24
 801c076:	2100      	movs	r1, #0
 801c078:	4807      	ldr	r0, [pc, #28]	@ (801c098 <UTIL_ADV_TRACE_Init+0x28>)
 801c07a:	f7ff f862 	bl	801b142 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801c07e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801c082:	2100      	movs	r1, #0
 801c084:	4805      	ldr	r0, [pc, #20]	@ (801c09c <UTIL_ADV_TRACE_Init+0x2c>)
 801c086:	f7ff f85c 	bl	801b142 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c08a:	4b05      	ldr	r3, [pc, #20]	@ (801c0a0 <UTIL_ADV_TRACE_Init+0x30>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	4805      	ldr	r0, [pc, #20]	@ (801c0a4 <UTIL_ADV_TRACE_Init+0x34>)
 801c090:	4798      	blx	r3
 801c092:	4603      	mov	r3, r0
}
 801c094:	4618      	mov	r0, r3
 801c096:	bd80      	pop	{r7, pc}
 801c098:	20001d38 	.word	0x20001d38
 801c09c:	20001d50 	.word	0x20001d50
 801c0a0:	0801d108 	.word	0x0801d108
 801c0a4:	0801c311 	.word	0x0801c311

0801c0a8 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c0a8:	b480      	push	{r7}
 801c0aa:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c0ac:	4b06      	ldr	r3, [pc, #24]	@ (801c0c8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c0ae:	8a5a      	ldrh	r2, [r3, #18]
 801c0b0:	4b05      	ldr	r3, [pc, #20]	@ (801c0c8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c0b2:	8a1b      	ldrh	r3, [r3, #16]
 801c0b4:	429a      	cmp	r2, r3
 801c0b6:	d101      	bne.n	801c0bc <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c0b8:	2301      	movs	r3, #1
 801c0ba:	e000      	b.n	801c0be <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c0bc:	2300      	movs	r3, #0
}
 801c0be:	4618      	mov	r0, r3
 801c0c0:	46bd      	mov	sp, r7
 801c0c2:	bc80      	pop	{r7}
 801c0c4:	4770      	bx	lr
 801c0c6:	bf00      	nop
 801c0c8:	20001d38 	.word	0x20001d38

0801c0cc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c0cc:	b408      	push	{r3}
 801c0ce:	b580      	push	{r7, lr}
 801c0d0:	b08d      	sub	sp, #52	@ 0x34
 801c0d2:	af00      	add	r7, sp, #0
 801c0d4:	60f8      	str	r0, [r7, #12]
 801c0d6:	60b9      	str	r1, [r7, #8]
 801c0d8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c0da:	2300      	movs	r3, #0
 801c0dc:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c0de:	2300      	movs	r3, #0
 801c0e0:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c0e2:	4b37      	ldr	r3, [pc, #220]	@ (801c1c0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c0e4:	7a1b      	ldrb	r3, [r3, #8]
 801c0e6:	461a      	mov	r2, r3
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	4293      	cmp	r3, r2
 801c0ec:	d902      	bls.n	801c0f4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c0ee:	f06f 0304 	mvn.w	r3, #4
 801c0f2:	e05e      	b.n	801c1b2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c0f4:	4b32      	ldr	r3, [pc, #200]	@ (801c1c0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c0f6:	68da      	ldr	r2, [r3, #12]
 801c0f8:	68bb      	ldr	r3, [r7, #8]
 801c0fa:	4013      	ands	r3, r2
 801c0fc:	68ba      	ldr	r2, [r7, #8]
 801c0fe:	429a      	cmp	r2, r3
 801c100:	d002      	beq.n	801c108 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c102:	f06f 0305 	mvn.w	r3, #5
 801c106:	e054      	b.n	801c1b2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c108:	4b2d      	ldr	r3, [pc, #180]	@ (801c1c0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c10a:	685b      	ldr	r3, [r3, #4]
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d00a      	beq.n	801c126 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	2b00      	cmp	r3, #0
 801c114:	d007      	beq.n	801c126 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c116:	4b2a      	ldr	r3, [pc, #168]	@ (801c1c0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c118:	685b      	ldr	r3, [r3, #4]
 801c11a:	f107 0116 	add.w	r1, r7, #22
 801c11e:	f107 0218 	add.w	r2, r7, #24
 801c122:	4610      	mov	r0, r2
 801c124:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c126:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801c12a:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c12e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c130:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c134:	4823      	ldr	r0, [pc, #140]	@ (801c1c4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c136:	f7ff fa2b 	bl	801b590 <tiny_vsnprintf_like>
 801c13a:	4603      	mov	r3, r0
 801c13c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801c13e:	f000 f9f1 	bl	801c524 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c142:	8afa      	ldrh	r2, [r7, #22]
 801c144:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801c146:	4413      	add	r3, r2
 801c148:	b29b      	uxth	r3, r3
 801c14a:	f107 0214 	add.w	r2, r7, #20
 801c14e:	4611      	mov	r1, r2
 801c150:	4618      	mov	r0, r3
 801c152:	f000 f969 	bl	801c428 <TRACE_AllocateBufer>
 801c156:	4603      	mov	r3, r0
 801c158:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c15c:	d025      	beq.n	801c1aa <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c15e:	2300      	movs	r3, #0
 801c160:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801c162:	e00e      	b.n	801c182 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c164:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c166:	8aba      	ldrh	r2, [r7, #20]
 801c168:	3330      	adds	r3, #48	@ 0x30
 801c16a:	443b      	add	r3, r7
 801c16c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c170:	4b15      	ldr	r3, [pc, #84]	@ (801c1c8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c172:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c174:	8abb      	ldrh	r3, [r7, #20]
 801c176:	3301      	adds	r3, #1
 801c178:	b29b      	uxth	r3, r3
 801c17a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c17c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c17e:	3301      	adds	r3, #1
 801c180:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801c182:	8afb      	ldrh	r3, [r7, #22]
 801c184:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c186:	429a      	cmp	r2, r3
 801c188:	d3ec      	bcc.n	801c164 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c18a:	8abb      	ldrh	r3, [r7, #20]
 801c18c:	461a      	mov	r2, r3
 801c18e:	4b0e      	ldr	r3, [pc, #56]	@ (801c1c8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c190:	18d0      	adds	r0, r2, r3
 801c192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c194:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c196:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c19a:	f7ff f9f9 	bl	801b590 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c19e:	f000 f9df 	bl	801c560 <TRACE_UnLock>

    return TRACE_Send();
 801c1a2:	f000 f831 	bl	801c208 <TRACE_Send>
 801c1a6:	4603      	mov	r3, r0
 801c1a8:	e003      	b.n	801c1b2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c1aa:	f000 f9d9 	bl	801c560 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c1ae:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c1b2:	4618      	mov	r0, r3
 801c1b4:	3734      	adds	r7, #52	@ 0x34
 801c1b6:	46bd      	mov	sp, r7
 801c1b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c1bc:	b001      	add	sp, #4
 801c1be:	4770      	bx	lr
 801c1c0:	20001d38 	.word	0x20001d38
 801c1c4:	20002150 	.word	0x20002150
 801c1c8:	20001d50 	.word	0x20001d50

0801c1cc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c1cc:	b480      	push	{r7}
 801c1ce:	b083      	sub	sp, #12
 801c1d0:	af00      	add	r7, sp, #0
 801c1d2:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c1d4:	4a03      	ldr	r2, [pc, #12]	@ (801c1e4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	6053      	str	r3, [r2, #4]
}
 801c1da:	bf00      	nop
 801c1dc:	370c      	adds	r7, #12
 801c1de:	46bd      	mov	sp, r7
 801c1e0:	bc80      	pop	{r7}
 801c1e2:	4770      	bx	lr
 801c1e4:	20001d38 	.word	0x20001d38

0801c1e8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c1e8:	b480      	push	{r7}
 801c1ea:	b083      	sub	sp, #12
 801c1ec:	af00      	add	r7, sp, #0
 801c1ee:	4603      	mov	r3, r0
 801c1f0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c1f2:	4a04      	ldr	r2, [pc, #16]	@ (801c204 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c1f4:	79fb      	ldrb	r3, [r7, #7]
 801c1f6:	7213      	strb	r3, [r2, #8]
}
 801c1f8:	bf00      	nop
 801c1fa:	370c      	adds	r7, #12
 801c1fc:	46bd      	mov	sp, r7
 801c1fe:	bc80      	pop	{r7}
 801c200:	4770      	bx	lr
 801c202:	bf00      	nop
 801c204:	20001d38 	.word	0x20001d38

0801c208 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c208:	b580      	push	{r7, lr}
 801c20a:	b088      	sub	sp, #32
 801c20c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c20e:	2300      	movs	r3, #0
 801c210:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c212:	2300      	movs	r3, #0
 801c214:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c216:	f3ef 8310 	mrs	r3, PRIMASK
 801c21a:	613b      	str	r3, [r7, #16]
  return(result);
 801c21c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c21e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c220:	b672      	cpsid	i
}
 801c222:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c224:	f000 f9ba 	bl	801c59c <TRACE_IsLocked>
 801c228:	4603      	mov	r3, r0
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d15d      	bne.n	801c2ea <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c22e:	f000 f979 	bl	801c524 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c232:	4b34      	ldr	r3, [pc, #208]	@ (801c304 <TRACE_Send+0xfc>)
 801c234:	8a1a      	ldrh	r2, [r3, #16]
 801c236:	4b33      	ldr	r3, [pc, #204]	@ (801c304 <TRACE_Send+0xfc>)
 801c238:	8a5b      	ldrh	r3, [r3, #18]
 801c23a:	429a      	cmp	r2, r3
 801c23c:	d04d      	beq.n	801c2da <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c23e:	4b31      	ldr	r3, [pc, #196]	@ (801c304 <TRACE_Send+0xfc>)
 801c240:	789b      	ldrb	r3, [r3, #2]
 801c242:	2b01      	cmp	r3, #1
 801c244:	d117      	bne.n	801c276 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c246:	4b2f      	ldr	r3, [pc, #188]	@ (801c304 <TRACE_Send+0xfc>)
 801c248:	881a      	ldrh	r2, [r3, #0]
 801c24a:	4b2e      	ldr	r3, [pc, #184]	@ (801c304 <TRACE_Send+0xfc>)
 801c24c:	8a1b      	ldrh	r3, [r3, #16]
 801c24e:	1ad3      	subs	r3, r2, r3
 801c250:	b29a      	uxth	r2, r3
 801c252:	4b2c      	ldr	r3, [pc, #176]	@ (801c304 <TRACE_Send+0xfc>)
 801c254:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c256:	4b2b      	ldr	r3, [pc, #172]	@ (801c304 <TRACE_Send+0xfc>)
 801c258:	2202      	movs	r2, #2
 801c25a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c25c:	4b29      	ldr	r3, [pc, #164]	@ (801c304 <TRACE_Send+0xfc>)
 801c25e:	2200      	movs	r2, #0
 801c260:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c262:	4b28      	ldr	r3, [pc, #160]	@ (801c304 <TRACE_Send+0xfc>)
 801c264:	8a9b      	ldrh	r3, [r3, #20]
 801c266:	2b00      	cmp	r3, #0
 801c268:	d105      	bne.n	801c276 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c26a:	4b26      	ldr	r3, [pc, #152]	@ (801c304 <TRACE_Send+0xfc>)
 801c26c:	2200      	movs	r2, #0
 801c26e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c270:	4b24      	ldr	r3, [pc, #144]	@ (801c304 <TRACE_Send+0xfc>)
 801c272:	2200      	movs	r2, #0
 801c274:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c276:	4b23      	ldr	r3, [pc, #140]	@ (801c304 <TRACE_Send+0xfc>)
 801c278:	789b      	ldrb	r3, [r3, #2]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d115      	bne.n	801c2aa <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c27e:	4b21      	ldr	r3, [pc, #132]	@ (801c304 <TRACE_Send+0xfc>)
 801c280:	8a5a      	ldrh	r2, [r3, #18]
 801c282:	4b20      	ldr	r3, [pc, #128]	@ (801c304 <TRACE_Send+0xfc>)
 801c284:	8a1b      	ldrh	r3, [r3, #16]
 801c286:	429a      	cmp	r2, r3
 801c288:	d908      	bls.n	801c29c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c28a:	4b1e      	ldr	r3, [pc, #120]	@ (801c304 <TRACE_Send+0xfc>)
 801c28c:	8a5a      	ldrh	r2, [r3, #18]
 801c28e:	4b1d      	ldr	r3, [pc, #116]	@ (801c304 <TRACE_Send+0xfc>)
 801c290:	8a1b      	ldrh	r3, [r3, #16]
 801c292:	1ad3      	subs	r3, r2, r3
 801c294:	b29a      	uxth	r2, r3
 801c296:	4b1b      	ldr	r3, [pc, #108]	@ (801c304 <TRACE_Send+0xfc>)
 801c298:	829a      	strh	r2, [r3, #20]
 801c29a:	e006      	b.n	801c2aa <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c29c:	4b19      	ldr	r3, [pc, #100]	@ (801c304 <TRACE_Send+0xfc>)
 801c29e:	8a1b      	ldrh	r3, [r3, #16]
 801c2a0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c2a4:	b29a      	uxth	r2, r3
 801c2a6:	4b17      	ldr	r3, [pc, #92]	@ (801c304 <TRACE_Send+0xfc>)
 801c2a8:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c2aa:	4b16      	ldr	r3, [pc, #88]	@ (801c304 <TRACE_Send+0xfc>)
 801c2ac:	8a1b      	ldrh	r3, [r3, #16]
 801c2ae:	461a      	mov	r2, r3
 801c2b0:	4b15      	ldr	r3, [pc, #84]	@ (801c308 <TRACE_Send+0x100>)
 801c2b2:	4413      	add	r3, r2
 801c2b4:	61bb      	str	r3, [r7, #24]
 801c2b6:	697b      	ldr	r3, [r7, #20]
 801c2b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	f383 8810 	msr	PRIMASK, r3
}
 801c2c0:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c2c2:	f7e5 ffd3 	bl	800226c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c2c6:	4b11      	ldr	r3, [pc, #68]	@ (801c30c <TRACE_Send+0x104>)
 801c2c8:	68db      	ldr	r3, [r3, #12]
 801c2ca:	4a0e      	ldr	r2, [pc, #56]	@ (801c304 <TRACE_Send+0xfc>)
 801c2cc:	8a92      	ldrh	r2, [r2, #20]
 801c2ce:	4611      	mov	r1, r2
 801c2d0:	69b8      	ldr	r0, [r7, #24]
 801c2d2:	4798      	blx	r3
 801c2d4:	4603      	mov	r3, r0
 801c2d6:	77fb      	strb	r3, [r7, #31]
 801c2d8:	e00d      	b.n	801c2f6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801c2da:	f000 f941 	bl	801c560 <TRACE_UnLock>
 801c2de:	697b      	ldr	r3, [r7, #20]
 801c2e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2e2:	68bb      	ldr	r3, [r7, #8]
 801c2e4:	f383 8810 	msr	PRIMASK, r3
}
 801c2e8:	e005      	b.n	801c2f6 <TRACE_Send+0xee>
 801c2ea:	697b      	ldr	r3, [r7, #20]
 801c2ec:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	f383 8810 	msr	PRIMASK, r3
}
 801c2f4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801c2f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c2fa:	4618      	mov	r0, r3
 801c2fc:	3720      	adds	r7, #32
 801c2fe:	46bd      	mov	sp, r7
 801c300:	bd80      	pop	{r7, pc}
 801c302:	bf00      	nop
 801c304:	20001d38 	.word	0x20001d38
 801c308:	20001d50 	.word	0x20001d50
 801c30c:	0801d108 	.word	0x0801d108

0801c310 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801c310:	b580      	push	{r7, lr}
 801c312:	b088      	sub	sp, #32
 801c314:	af00      	add	r7, sp, #0
 801c316:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801c318:	2300      	movs	r3, #0
 801c31a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c31c:	f3ef 8310 	mrs	r3, PRIMASK
 801c320:	617b      	str	r3, [r7, #20]
  return(result);
 801c322:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c324:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c326:	b672      	cpsid	i
}
 801c328:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c32a:	4b3c      	ldr	r3, [pc, #240]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c32c:	789b      	ldrb	r3, [r3, #2]
 801c32e:	2b02      	cmp	r3, #2
 801c330:	d106      	bne.n	801c340 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c332:	4b3a      	ldr	r3, [pc, #232]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c334:	2200      	movs	r2, #0
 801c336:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c338:	4b38      	ldr	r3, [pc, #224]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c33a:	2200      	movs	r2, #0
 801c33c:	821a      	strh	r2, [r3, #16]
 801c33e:	e00a      	b.n	801c356 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c340:	4b36      	ldr	r3, [pc, #216]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c342:	8a1a      	ldrh	r2, [r3, #16]
 801c344:	4b35      	ldr	r3, [pc, #212]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c346:	8a9b      	ldrh	r3, [r3, #20]
 801c348:	4413      	add	r3, r2
 801c34a:	b29b      	uxth	r3, r3
 801c34c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c350:	b29a      	uxth	r2, r3
 801c352:	4b32      	ldr	r3, [pc, #200]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c354:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c356:	4b31      	ldr	r3, [pc, #196]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c358:	8a1a      	ldrh	r2, [r3, #16]
 801c35a:	4b30      	ldr	r3, [pc, #192]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c35c:	8a5b      	ldrh	r3, [r3, #18]
 801c35e:	429a      	cmp	r2, r3
 801c360:	d04d      	beq.n	801c3fe <TRACE_TxCpltCallback+0xee>
 801c362:	4b2e      	ldr	r3, [pc, #184]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c364:	8adb      	ldrh	r3, [r3, #22]
 801c366:	2b01      	cmp	r3, #1
 801c368:	d149      	bne.n	801c3fe <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c36a:	4b2c      	ldr	r3, [pc, #176]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c36c:	789b      	ldrb	r3, [r3, #2]
 801c36e:	2b01      	cmp	r3, #1
 801c370:	d117      	bne.n	801c3a2 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c372:	4b2a      	ldr	r3, [pc, #168]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c374:	881a      	ldrh	r2, [r3, #0]
 801c376:	4b29      	ldr	r3, [pc, #164]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c378:	8a1b      	ldrh	r3, [r3, #16]
 801c37a:	1ad3      	subs	r3, r2, r3
 801c37c:	b29a      	uxth	r2, r3
 801c37e:	4b27      	ldr	r3, [pc, #156]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c380:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c382:	4b26      	ldr	r3, [pc, #152]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c384:	2202      	movs	r2, #2
 801c386:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c388:	4b24      	ldr	r3, [pc, #144]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c38a:	2200      	movs	r2, #0
 801c38c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c38e:	4b23      	ldr	r3, [pc, #140]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c390:	8a9b      	ldrh	r3, [r3, #20]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d105      	bne.n	801c3a2 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c396:	4b21      	ldr	r3, [pc, #132]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c398:	2200      	movs	r2, #0
 801c39a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c39c:	4b1f      	ldr	r3, [pc, #124]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c39e:	2200      	movs	r2, #0
 801c3a0:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c3a2:	4b1e      	ldr	r3, [pc, #120]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c3a4:	789b      	ldrb	r3, [r3, #2]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d115      	bne.n	801c3d6 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c3aa:	4b1c      	ldr	r3, [pc, #112]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c3ac:	8a5a      	ldrh	r2, [r3, #18]
 801c3ae:	4b1b      	ldr	r3, [pc, #108]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c3b0:	8a1b      	ldrh	r3, [r3, #16]
 801c3b2:	429a      	cmp	r2, r3
 801c3b4:	d908      	bls.n	801c3c8 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c3b6:	4b19      	ldr	r3, [pc, #100]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c3b8:	8a5a      	ldrh	r2, [r3, #18]
 801c3ba:	4b18      	ldr	r3, [pc, #96]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c3bc:	8a1b      	ldrh	r3, [r3, #16]
 801c3be:	1ad3      	subs	r3, r2, r3
 801c3c0:	b29a      	uxth	r2, r3
 801c3c2:	4b16      	ldr	r3, [pc, #88]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c3c4:	829a      	strh	r2, [r3, #20]
 801c3c6:	e006      	b.n	801c3d6 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c3c8:	4b14      	ldr	r3, [pc, #80]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c3ca:	8a1b      	ldrh	r3, [r3, #16]
 801c3cc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c3d0:	b29a      	uxth	r2, r3
 801c3d2:	4b12      	ldr	r3, [pc, #72]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c3d4:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c3d6:	4b11      	ldr	r3, [pc, #68]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c3d8:	8a1b      	ldrh	r3, [r3, #16]
 801c3da:	461a      	mov	r2, r3
 801c3dc:	4b10      	ldr	r3, [pc, #64]	@ (801c420 <TRACE_TxCpltCallback+0x110>)
 801c3de:	4413      	add	r3, r2
 801c3e0:	61fb      	str	r3, [r7, #28]
 801c3e2:	69bb      	ldr	r3, [r7, #24]
 801c3e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c3e6:	693b      	ldr	r3, [r7, #16]
 801c3e8:	f383 8810 	msr	PRIMASK, r3
}
 801c3ec:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c3ee:	4b0d      	ldr	r3, [pc, #52]	@ (801c424 <TRACE_TxCpltCallback+0x114>)
 801c3f0:	68db      	ldr	r3, [r3, #12]
 801c3f2:	4a0a      	ldr	r2, [pc, #40]	@ (801c41c <TRACE_TxCpltCallback+0x10c>)
 801c3f4:	8a92      	ldrh	r2, [r2, #20]
 801c3f6:	4611      	mov	r1, r2
 801c3f8:	69f8      	ldr	r0, [r7, #28]
 801c3fa:	4798      	blx	r3
 801c3fc:	e00a      	b.n	801c414 <TRACE_TxCpltCallback+0x104>
 801c3fe:	69bb      	ldr	r3, [r7, #24]
 801c400:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c402:	68fb      	ldr	r3, [r7, #12]
 801c404:	f383 8810 	msr	PRIMASK, r3
}
 801c408:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801c40a:	f7e5 ff37 	bl	800227c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801c40e:	f000 f8a7 	bl	801c560 <TRACE_UnLock>
  }
}
 801c412:	bf00      	nop
 801c414:	bf00      	nop
 801c416:	3720      	adds	r7, #32
 801c418:	46bd      	mov	sp, r7
 801c41a:	bd80      	pop	{r7, pc}
 801c41c:	20001d38 	.word	0x20001d38
 801c420:	20001d50 	.word	0x20001d50
 801c424:	0801d108 	.word	0x0801d108

0801c428 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c428:	b480      	push	{r7}
 801c42a:	b087      	sub	sp, #28
 801c42c:	af00      	add	r7, sp, #0
 801c42e:	4603      	mov	r3, r0
 801c430:	6039      	str	r1, [r7, #0]
 801c432:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801c434:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c438:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c43a:	f3ef 8310 	mrs	r3, PRIMASK
 801c43e:	60fb      	str	r3, [r7, #12]
  return(result);
 801c440:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c444:	b672      	cpsid	i
}
 801c446:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c448:	4b35      	ldr	r3, [pc, #212]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c44a:	8a5a      	ldrh	r2, [r3, #18]
 801c44c:	4b34      	ldr	r3, [pc, #208]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c44e:	8a1b      	ldrh	r3, [r3, #16]
 801c450:	429a      	cmp	r2, r3
 801c452:	d11b      	bne.n	801c48c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c454:	4b32      	ldr	r3, [pc, #200]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c456:	8a5b      	ldrh	r3, [r3, #18]
 801c458:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c45c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c45e:	88fa      	ldrh	r2, [r7, #6]
 801c460:	8afb      	ldrh	r3, [r7, #22]
 801c462:	429a      	cmp	r2, r3
 801c464:	d33a      	bcc.n	801c4dc <TRACE_AllocateBufer+0xb4>
 801c466:	4b2e      	ldr	r3, [pc, #184]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c468:	8a1b      	ldrh	r3, [r3, #16]
 801c46a:	88fa      	ldrh	r2, [r7, #6]
 801c46c:	429a      	cmp	r2, r3
 801c46e:	d235      	bcs.n	801c4dc <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c470:	4b2b      	ldr	r3, [pc, #172]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c472:	2201      	movs	r2, #1
 801c474:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c476:	4b2a      	ldr	r3, [pc, #168]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c478:	8a5a      	ldrh	r2, [r3, #18]
 801c47a:	4b29      	ldr	r3, [pc, #164]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c47c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c47e:	4b28      	ldr	r3, [pc, #160]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c480:	8a1b      	ldrh	r3, [r3, #16]
 801c482:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c484:	4b26      	ldr	r3, [pc, #152]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c486:	2200      	movs	r2, #0
 801c488:	825a      	strh	r2, [r3, #18]
 801c48a:	e027      	b.n	801c4dc <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c48c:	4b24      	ldr	r3, [pc, #144]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c48e:	8a5a      	ldrh	r2, [r3, #18]
 801c490:	4b23      	ldr	r3, [pc, #140]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c492:	8a1b      	ldrh	r3, [r3, #16]
 801c494:	429a      	cmp	r2, r3
 801c496:	d91b      	bls.n	801c4d0 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c498:	4b21      	ldr	r3, [pc, #132]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c49a:	8a5b      	ldrh	r3, [r3, #18]
 801c49c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c4a0:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c4a2:	88fa      	ldrh	r2, [r7, #6]
 801c4a4:	8afb      	ldrh	r3, [r7, #22]
 801c4a6:	429a      	cmp	r2, r3
 801c4a8:	d318      	bcc.n	801c4dc <TRACE_AllocateBufer+0xb4>
 801c4aa:	4b1d      	ldr	r3, [pc, #116]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c4ac:	8a1b      	ldrh	r3, [r3, #16]
 801c4ae:	88fa      	ldrh	r2, [r7, #6]
 801c4b0:	429a      	cmp	r2, r3
 801c4b2:	d213      	bcs.n	801c4dc <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c4b4:	4b1a      	ldr	r3, [pc, #104]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c4b6:	2201      	movs	r2, #1
 801c4b8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c4ba:	4b19      	ldr	r3, [pc, #100]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c4bc:	8a5a      	ldrh	r2, [r3, #18]
 801c4be:	4b18      	ldr	r3, [pc, #96]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c4c0:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c4c2:	4b17      	ldr	r3, [pc, #92]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c4c4:	8a1b      	ldrh	r3, [r3, #16]
 801c4c6:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c4c8:	4b15      	ldr	r3, [pc, #84]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	825a      	strh	r2, [r3, #18]
 801c4ce:	e005      	b.n	801c4dc <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c4d0:	4b13      	ldr	r3, [pc, #76]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c4d2:	8a1a      	ldrh	r2, [r3, #16]
 801c4d4:	4b12      	ldr	r3, [pc, #72]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c4d6:	8a5b      	ldrh	r3, [r3, #18]
 801c4d8:	1ad3      	subs	r3, r2, r3
 801c4da:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801c4dc:	8afa      	ldrh	r2, [r7, #22]
 801c4de:	88fb      	ldrh	r3, [r7, #6]
 801c4e0:	429a      	cmp	r2, r3
 801c4e2:	d90f      	bls.n	801c504 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c4e4:	4b0e      	ldr	r3, [pc, #56]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c4e6:	8a5a      	ldrh	r2, [r3, #18]
 801c4e8:	683b      	ldr	r3, [r7, #0]
 801c4ea:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c4ec:	4b0c      	ldr	r3, [pc, #48]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c4ee:	8a5a      	ldrh	r2, [r3, #18]
 801c4f0:	88fb      	ldrh	r3, [r7, #6]
 801c4f2:	4413      	add	r3, r2
 801c4f4:	b29b      	uxth	r3, r3
 801c4f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c4fa:	b29a      	uxth	r2, r3
 801c4fc:	4b08      	ldr	r3, [pc, #32]	@ (801c520 <TRACE_AllocateBufer+0xf8>)
 801c4fe:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c500:	2300      	movs	r3, #0
 801c502:	82bb      	strh	r3, [r7, #20]
 801c504:	693b      	ldr	r3, [r7, #16]
 801c506:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c508:	68bb      	ldr	r3, [r7, #8]
 801c50a:	f383 8810 	msr	PRIMASK, r3
}
 801c50e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801c510:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801c514:	4618      	mov	r0, r3
 801c516:	371c      	adds	r7, #28
 801c518:	46bd      	mov	sp, r7
 801c51a:	bc80      	pop	{r7}
 801c51c:	4770      	bx	lr
 801c51e:	bf00      	nop
 801c520:	20001d38 	.word	0x20001d38

0801c524 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801c524:	b480      	push	{r7}
 801c526:	b085      	sub	sp, #20
 801c528:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c52a:	f3ef 8310 	mrs	r3, PRIMASK
 801c52e:	607b      	str	r3, [r7, #4]
  return(result);
 801c530:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c532:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c534:	b672      	cpsid	i
}
 801c536:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801c538:	4b08      	ldr	r3, [pc, #32]	@ (801c55c <TRACE_Lock+0x38>)
 801c53a:	8adb      	ldrh	r3, [r3, #22]
 801c53c:	3301      	adds	r3, #1
 801c53e:	b29a      	uxth	r2, r3
 801c540:	4b06      	ldr	r3, [pc, #24]	@ (801c55c <TRACE_Lock+0x38>)
 801c542:	82da      	strh	r2, [r3, #22]
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c548:	68bb      	ldr	r3, [r7, #8]
 801c54a:	f383 8810 	msr	PRIMASK, r3
}
 801c54e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c550:	bf00      	nop
 801c552:	3714      	adds	r7, #20
 801c554:	46bd      	mov	sp, r7
 801c556:	bc80      	pop	{r7}
 801c558:	4770      	bx	lr
 801c55a:	bf00      	nop
 801c55c:	20001d38 	.word	0x20001d38

0801c560 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801c560:	b480      	push	{r7}
 801c562:	b085      	sub	sp, #20
 801c564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c566:	f3ef 8310 	mrs	r3, PRIMASK
 801c56a:	607b      	str	r3, [r7, #4]
  return(result);
 801c56c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c56e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c570:	b672      	cpsid	i
}
 801c572:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801c574:	4b08      	ldr	r3, [pc, #32]	@ (801c598 <TRACE_UnLock+0x38>)
 801c576:	8adb      	ldrh	r3, [r3, #22]
 801c578:	3b01      	subs	r3, #1
 801c57a:	b29a      	uxth	r2, r3
 801c57c:	4b06      	ldr	r3, [pc, #24]	@ (801c598 <TRACE_UnLock+0x38>)
 801c57e:	82da      	strh	r2, [r3, #22]
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c584:	68bb      	ldr	r3, [r7, #8]
 801c586:	f383 8810 	msr	PRIMASK, r3
}
 801c58a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c58c:	bf00      	nop
 801c58e:	3714      	adds	r7, #20
 801c590:	46bd      	mov	sp, r7
 801c592:	bc80      	pop	{r7}
 801c594:	4770      	bx	lr
 801c596:	bf00      	nop
 801c598:	20001d38 	.word	0x20001d38

0801c59c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801c59c:	b480      	push	{r7}
 801c59e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c5a0:	4b05      	ldr	r3, [pc, #20]	@ (801c5b8 <TRACE_IsLocked+0x1c>)
 801c5a2:	8adb      	ldrh	r3, [r3, #22]
 801c5a4:	2b00      	cmp	r3, #0
 801c5a6:	bf14      	ite	ne
 801c5a8:	2301      	movne	r3, #1
 801c5aa:	2300      	moveq	r3, #0
 801c5ac:	b2db      	uxtb	r3, r3
}
 801c5ae:	4618      	mov	r0, r3
 801c5b0:	46bd      	mov	sp, r7
 801c5b2:	bc80      	pop	{r7}
 801c5b4:	4770      	bx	lr
 801c5b6:	bf00      	nop
 801c5b8:	20001d38 	.word	0x20001d38

0801c5bc <memset>:
 801c5bc:	4402      	add	r2, r0
 801c5be:	4603      	mov	r3, r0
 801c5c0:	4293      	cmp	r3, r2
 801c5c2:	d100      	bne.n	801c5c6 <memset+0xa>
 801c5c4:	4770      	bx	lr
 801c5c6:	f803 1b01 	strb.w	r1, [r3], #1
 801c5ca:	e7f9      	b.n	801c5c0 <memset+0x4>

0801c5cc <__libc_init_array>:
 801c5cc:	b570      	push	{r4, r5, r6, lr}
 801c5ce:	4d0d      	ldr	r5, [pc, #52]	@ (801c604 <__libc_init_array+0x38>)
 801c5d0:	4c0d      	ldr	r4, [pc, #52]	@ (801c608 <__libc_init_array+0x3c>)
 801c5d2:	1b64      	subs	r4, r4, r5
 801c5d4:	10a4      	asrs	r4, r4, #2
 801c5d6:	2600      	movs	r6, #0
 801c5d8:	42a6      	cmp	r6, r4
 801c5da:	d109      	bne.n	801c5f0 <__libc_init_array+0x24>
 801c5dc:	4d0b      	ldr	r5, [pc, #44]	@ (801c60c <__libc_init_array+0x40>)
 801c5de:	4c0c      	ldr	r4, [pc, #48]	@ (801c610 <__libc_init_array+0x44>)
 801c5e0:	f000 f89a 	bl	801c718 <_init>
 801c5e4:	1b64      	subs	r4, r4, r5
 801c5e6:	10a4      	asrs	r4, r4, #2
 801c5e8:	2600      	movs	r6, #0
 801c5ea:	42a6      	cmp	r6, r4
 801c5ec:	d105      	bne.n	801c5fa <__libc_init_array+0x2e>
 801c5ee:	bd70      	pop	{r4, r5, r6, pc}
 801c5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801c5f4:	4798      	blx	r3
 801c5f6:	3601      	adds	r6, #1
 801c5f8:	e7ee      	b.n	801c5d8 <__libc_init_array+0xc>
 801c5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801c5fe:	4798      	blx	r3
 801c600:	3601      	adds	r6, #1
 801c602:	e7f2      	b.n	801c5ea <__libc_init_array+0x1e>
 801c604:	0801d73c 	.word	0x0801d73c
 801c608:	0801d73c 	.word	0x0801d73c
 801c60c:	0801d73c 	.word	0x0801d73c
 801c610:	0801d740 	.word	0x0801d740
 801c614:	00000000 	.word	0x00000000

0801c618 <floor>:
 801c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c61c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c620:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801c624:	2e13      	cmp	r6, #19
 801c626:	4602      	mov	r2, r0
 801c628:	460b      	mov	r3, r1
 801c62a:	460c      	mov	r4, r1
 801c62c:	4605      	mov	r5, r0
 801c62e:	4680      	mov	r8, r0
 801c630:	dc35      	bgt.n	801c69e <floor+0x86>
 801c632:	2e00      	cmp	r6, #0
 801c634:	da17      	bge.n	801c666 <floor+0x4e>
 801c636:	a334      	add	r3, pc, #208	@ (adr r3, 801c708 <floor+0xf0>)
 801c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c63c:	f7e3 fdaa 	bl	8000194 <__adddf3>
 801c640:	2200      	movs	r2, #0
 801c642:	2300      	movs	r3, #0
 801c644:	f7e3 ffda 	bl	80005fc <__aeabi_dcmpgt>
 801c648:	b150      	cbz	r0, 801c660 <floor+0x48>
 801c64a:	2c00      	cmp	r4, #0
 801c64c:	da57      	bge.n	801c6fe <floor+0xe6>
 801c64e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801c652:	432c      	orrs	r4, r5
 801c654:	2500      	movs	r5, #0
 801c656:	42ac      	cmp	r4, r5
 801c658:	4c2d      	ldr	r4, [pc, #180]	@ (801c710 <floor+0xf8>)
 801c65a:	bf08      	it	eq
 801c65c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801c660:	4623      	mov	r3, r4
 801c662:	462a      	mov	r2, r5
 801c664:	e024      	b.n	801c6b0 <floor+0x98>
 801c666:	4f2b      	ldr	r7, [pc, #172]	@ (801c714 <floor+0xfc>)
 801c668:	4137      	asrs	r7, r6
 801c66a:	ea01 0c07 	and.w	ip, r1, r7
 801c66e:	ea5c 0c00 	orrs.w	ip, ip, r0
 801c672:	d01d      	beq.n	801c6b0 <floor+0x98>
 801c674:	a324      	add	r3, pc, #144	@ (adr r3, 801c708 <floor+0xf0>)
 801c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c67a:	f7e3 fd8b 	bl	8000194 <__adddf3>
 801c67e:	2200      	movs	r2, #0
 801c680:	2300      	movs	r3, #0
 801c682:	f7e3 ffbb 	bl	80005fc <__aeabi_dcmpgt>
 801c686:	2800      	cmp	r0, #0
 801c688:	d0ea      	beq.n	801c660 <floor+0x48>
 801c68a:	2c00      	cmp	r4, #0
 801c68c:	bfbe      	ittt	lt
 801c68e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801c692:	4133      	asrlt	r3, r6
 801c694:	18e4      	addlt	r4, r4, r3
 801c696:	ea24 0407 	bic.w	r4, r4, r7
 801c69a:	2500      	movs	r5, #0
 801c69c:	e7e0      	b.n	801c660 <floor+0x48>
 801c69e:	2e33      	cmp	r6, #51	@ 0x33
 801c6a0:	dd0a      	ble.n	801c6b8 <floor+0xa0>
 801c6a2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801c6a6:	d103      	bne.n	801c6b0 <floor+0x98>
 801c6a8:	f7e3 fd74 	bl	8000194 <__adddf3>
 801c6ac:	4602      	mov	r2, r0
 801c6ae:	460b      	mov	r3, r1
 801c6b0:	4610      	mov	r0, r2
 801c6b2:	4619      	mov	r1, r3
 801c6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6b8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801c6bc:	f04f 3cff 	mov.w	ip, #4294967295
 801c6c0:	fa2c f707 	lsr.w	r7, ip, r7
 801c6c4:	4207      	tst	r7, r0
 801c6c6:	d0f3      	beq.n	801c6b0 <floor+0x98>
 801c6c8:	a30f      	add	r3, pc, #60	@ (adr r3, 801c708 <floor+0xf0>)
 801c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6ce:	f7e3 fd61 	bl	8000194 <__adddf3>
 801c6d2:	2200      	movs	r2, #0
 801c6d4:	2300      	movs	r3, #0
 801c6d6:	f7e3 ff91 	bl	80005fc <__aeabi_dcmpgt>
 801c6da:	2800      	cmp	r0, #0
 801c6dc:	d0c0      	beq.n	801c660 <floor+0x48>
 801c6de:	2c00      	cmp	r4, #0
 801c6e0:	da0a      	bge.n	801c6f8 <floor+0xe0>
 801c6e2:	2e14      	cmp	r6, #20
 801c6e4:	d101      	bne.n	801c6ea <floor+0xd2>
 801c6e6:	3401      	adds	r4, #1
 801c6e8:	e006      	b.n	801c6f8 <floor+0xe0>
 801c6ea:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801c6ee:	2301      	movs	r3, #1
 801c6f0:	40b3      	lsls	r3, r6
 801c6f2:	441d      	add	r5, r3
 801c6f4:	4545      	cmp	r5, r8
 801c6f6:	d3f6      	bcc.n	801c6e6 <floor+0xce>
 801c6f8:	ea25 0507 	bic.w	r5, r5, r7
 801c6fc:	e7b0      	b.n	801c660 <floor+0x48>
 801c6fe:	2500      	movs	r5, #0
 801c700:	462c      	mov	r4, r5
 801c702:	e7ad      	b.n	801c660 <floor+0x48>
 801c704:	f3af 8000 	nop.w
 801c708:	8800759c 	.word	0x8800759c
 801c70c:	7e37e43c 	.word	0x7e37e43c
 801c710:	bff00000 	.word	0xbff00000
 801c714:	000fffff 	.word	0x000fffff

0801c718 <_init>:
 801c718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c71a:	bf00      	nop
 801c71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c71e:	bc08      	pop	{r3}
 801c720:	469e      	mov	lr, r3
 801c722:	4770      	bx	lr

0801c724 <_fini>:
 801c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c726:	bf00      	nop
 801c728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c72a:	bc08      	pop	{r3}
 801c72c:	469e      	mov	lr, r3
 801c72e:	4770      	bx	lr


Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000206f4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012ac  08020838  08020838  00021838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  08021ae4  08021ae4  00022ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08021bbc  08021bbc  00023308  2**0
                  CONTENTS
  5 .ARM          00000008  08021bbc  08021bbc  00022bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08021bc4  08021bc4  00023308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08021bc4  08021bc4  00022bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08021bc8  08021bc8  00022bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000308  20000000  08021bcc  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000235c  20000308  08021ed4  00023308  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002664  08021ed4  00023664  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00023308  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004489f  00000000  00000000  00023332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a93a  00000000  00000000  00067bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003690  00000000  00000000  00072510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000029bb  00000000  00000000  00075ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a8f0  00000000  00000000  0007855b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00044512  00000000  00000000  000a2e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d00c6  00000000  00000000  000e735d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b7423  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f1e4  00000000  00000000  001b7468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001c664c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000308 	.word	0x20000308
 800015c:	00000000 	.word	0x00000000
 8000160:	0802081c 	.word	0x0802081c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000030c 	.word	0x2000030c
 800017c:	0802081c 	.word	0x0802081c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e66:	2afd      	cmp	r2, #253	@ 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	@ 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	@ 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__aeabi_f2iz>:
 80010b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010bc:	d30f      	bcc.n	80010de <__aeabi_f2iz+0x2a>
 80010be:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c6:	d90d      	bls.n	80010e4 <__aeabi_f2iz+0x30>
 80010c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010d0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010d4:	fa23 f002 	lsr.w	r0, r3, r2
 80010d8:	bf18      	it	ne
 80010da:	4240      	negne	r0, r0
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2iz+0x3a>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d105      	bne.n	80010fa <__aeabi_f2iz+0x46>
 80010ee:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010f2:	bf08      	it	eq
 80010f4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr

08001100 <__aeabi_f2uiz>:
 8001100:	0042      	lsls	r2, r0, #1
 8001102:	d20e      	bcs.n	8001122 <__aeabi_f2uiz+0x22>
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001108:	d30b      	bcc.n	8001122 <__aeabi_f2uiz+0x22>
 800110a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d409      	bmi.n	8001128 <__aeabi_f2uiz+0x28>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr
 8001128:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800112c:	d101      	bne.n	8001132 <__aeabi_f2uiz+0x32>
 800112e:	0242      	lsls	r2, r0, #9
 8001130:	d102      	bne.n	8001138 <__aeabi_f2uiz+0x38>
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	4770      	bx	lr
 8001138:	f04f 0000 	mov.w	r0, #0
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <__aeabi_uldivmod>:
 8001140:	b953      	cbnz	r3, 8001158 <__aeabi_uldivmod+0x18>
 8001142:	b94a      	cbnz	r2, 8001158 <__aeabi_uldivmod+0x18>
 8001144:	2900      	cmp	r1, #0
 8001146:	bf08      	it	eq
 8001148:	2800      	cmpeq	r0, #0
 800114a:	bf1c      	itt	ne
 800114c:	f04f 31ff 	movne.w	r1, #4294967295
 8001150:	f04f 30ff 	movne.w	r0, #4294967295
 8001154:	f000 b988 	b.w	8001468 <__aeabi_idiv0>
 8001158:	f1ad 0c08 	sub.w	ip, sp, #8
 800115c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001160:	f000 f806 	bl	8001170 <__udivmoddi4>
 8001164:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800116c:	b004      	add	sp, #16
 800116e:	4770      	bx	lr

08001170 <__udivmoddi4>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	9d08      	ldr	r5, [sp, #32]
 8001176:	468e      	mov	lr, r1
 8001178:	4604      	mov	r4, r0
 800117a:	4688      	mov	r8, r1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14a      	bne.n	8001216 <__udivmoddi4+0xa6>
 8001180:	428a      	cmp	r2, r1
 8001182:	4617      	mov	r7, r2
 8001184:	d962      	bls.n	800124c <__udivmoddi4+0xdc>
 8001186:	fab2 f682 	clz	r6, r2
 800118a:	b14e      	cbz	r6, 80011a0 <__udivmoddi4+0x30>
 800118c:	f1c6 0320 	rsb	r3, r6, #32
 8001190:	fa01 f806 	lsl.w	r8, r1, r6
 8001194:	fa20 f303 	lsr.w	r3, r0, r3
 8001198:	40b7      	lsls	r7, r6
 800119a:	ea43 0808 	orr.w	r8, r3, r8
 800119e:	40b4      	lsls	r4, r6
 80011a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011a4:	fa1f fc87 	uxth.w	ip, r7
 80011a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80011ac:	0c23      	lsrs	r3, r4, #16
 80011ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80011b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011b6:	fb01 f20c 	mul.w	r2, r1, ip
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d909      	bls.n	80011d2 <__udivmoddi4+0x62>
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80011c4:	f080 80ea 	bcs.w	800139c <__udivmoddi4+0x22c>
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f240 80e7 	bls.w	800139c <__udivmoddi4+0x22c>
 80011ce:	3902      	subs	r1, #2
 80011d0:	443b      	add	r3, r7
 80011d2:	1a9a      	subs	r2, r3, r2
 80011d4:	b2a3      	uxth	r3, r4
 80011d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80011da:	fb0e 2210 	mls	r2, lr, r0, r2
 80011de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80011e6:	459c      	cmp	ip, r3
 80011e8:	d909      	bls.n	80011fe <__udivmoddi4+0x8e>
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80011f0:	f080 80d6 	bcs.w	80013a0 <__udivmoddi4+0x230>
 80011f4:	459c      	cmp	ip, r3
 80011f6:	f240 80d3 	bls.w	80013a0 <__udivmoddi4+0x230>
 80011fa:	443b      	add	r3, r7
 80011fc:	3802      	subs	r0, #2
 80011fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001202:	eba3 030c 	sub.w	r3, r3, ip
 8001206:	2100      	movs	r1, #0
 8001208:	b11d      	cbz	r5, 8001212 <__udivmoddi4+0xa2>
 800120a:	40f3      	lsrs	r3, r6
 800120c:	2200      	movs	r2, #0
 800120e:	e9c5 3200 	strd	r3, r2, [r5]
 8001212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001216:	428b      	cmp	r3, r1
 8001218:	d905      	bls.n	8001226 <__udivmoddi4+0xb6>
 800121a:	b10d      	cbz	r5, 8001220 <__udivmoddi4+0xb0>
 800121c:	e9c5 0100 	strd	r0, r1, [r5]
 8001220:	2100      	movs	r1, #0
 8001222:	4608      	mov	r0, r1
 8001224:	e7f5      	b.n	8001212 <__udivmoddi4+0xa2>
 8001226:	fab3 f183 	clz	r1, r3
 800122a:	2900      	cmp	r1, #0
 800122c:	d146      	bne.n	80012bc <__udivmoddi4+0x14c>
 800122e:	4573      	cmp	r3, lr
 8001230:	d302      	bcc.n	8001238 <__udivmoddi4+0xc8>
 8001232:	4282      	cmp	r2, r0
 8001234:	f200 8105 	bhi.w	8001442 <__udivmoddi4+0x2d2>
 8001238:	1a84      	subs	r4, r0, r2
 800123a:	eb6e 0203 	sbc.w	r2, lr, r3
 800123e:	2001      	movs	r0, #1
 8001240:	4690      	mov	r8, r2
 8001242:	2d00      	cmp	r5, #0
 8001244:	d0e5      	beq.n	8001212 <__udivmoddi4+0xa2>
 8001246:	e9c5 4800 	strd	r4, r8, [r5]
 800124a:	e7e2      	b.n	8001212 <__udivmoddi4+0xa2>
 800124c:	2a00      	cmp	r2, #0
 800124e:	f000 8090 	beq.w	8001372 <__udivmoddi4+0x202>
 8001252:	fab2 f682 	clz	r6, r2
 8001256:	2e00      	cmp	r6, #0
 8001258:	f040 80a4 	bne.w	80013a4 <__udivmoddi4+0x234>
 800125c:	1a8a      	subs	r2, r1, r2
 800125e:	0c03      	lsrs	r3, r0, #16
 8001260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001264:	b280      	uxth	r0, r0
 8001266:	b2bc      	uxth	r4, r7
 8001268:	2101      	movs	r1, #1
 800126a:	fbb2 fcfe 	udiv	ip, r2, lr
 800126e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001276:	fb04 f20c 	mul.w	r2, r4, ip
 800127a:	429a      	cmp	r2, r3
 800127c:	d907      	bls.n	800128e <__udivmoddi4+0x11e>
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001284:	d202      	bcs.n	800128c <__udivmoddi4+0x11c>
 8001286:	429a      	cmp	r2, r3
 8001288:	f200 80e0 	bhi.w	800144c <__udivmoddi4+0x2dc>
 800128c:	46c4      	mov	ip, r8
 800128e:	1a9b      	subs	r3, r3, r2
 8001290:	fbb3 f2fe 	udiv	r2, r3, lr
 8001294:	fb0e 3312 	mls	r3, lr, r2, r3
 8001298:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800129c:	fb02 f404 	mul.w	r4, r2, r4
 80012a0:	429c      	cmp	r4, r3
 80012a2:	d907      	bls.n	80012b4 <__udivmoddi4+0x144>
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80012aa:	d202      	bcs.n	80012b2 <__udivmoddi4+0x142>
 80012ac:	429c      	cmp	r4, r3
 80012ae:	f200 80ca 	bhi.w	8001446 <__udivmoddi4+0x2d6>
 80012b2:	4602      	mov	r2, r0
 80012b4:	1b1b      	subs	r3, r3, r4
 80012b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80012ba:	e7a5      	b.n	8001208 <__udivmoddi4+0x98>
 80012bc:	f1c1 0620 	rsb	r6, r1, #32
 80012c0:	408b      	lsls	r3, r1
 80012c2:	fa22 f706 	lsr.w	r7, r2, r6
 80012c6:	431f      	orrs	r7, r3
 80012c8:	fa0e f401 	lsl.w	r4, lr, r1
 80012cc:	fa20 f306 	lsr.w	r3, r0, r6
 80012d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80012d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80012d8:	4323      	orrs	r3, r4
 80012da:	fa00 f801 	lsl.w	r8, r0, r1
 80012de:	fa1f fc87 	uxth.w	ip, r7
 80012e2:	fbbe f0f9 	udiv	r0, lr, r9
 80012e6:	0c1c      	lsrs	r4, r3, #16
 80012e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80012ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80012f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80012f4:	45a6      	cmp	lr, r4
 80012f6:	fa02 f201 	lsl.w	r2, r2, r1
 80012fa:	d909      	bls.n	8001310 <__udivmoddi4+0x1a0>
 80012fc:	193c      	adds	r4, r7, r4
 80012fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8001302:	f080 809c 	bcs.w	800143e <__udivmoddi4+0x2ce>
 8001306:	45a6      	cmp	lr, r4
 8001308:	f240 8099 	bls.w	800143e <__udivmoddi4+0x2ce>
 800130c:	3802      	subs	r0, #2
 800130e:	443c      	add	r4, r7
 8001310:	eba4 040e 	sub.w	r4, r4, lr
 8001314:	fa1f fe83 	uxth.w	lr, r3
 8001318:	fbb4 f3f9 	udiv	r3, r4, r9
 800131c:	fb09 4413 	mls	r4, r9, r3, r4
 8001320:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001324:	fb03 fc0c 	mul.w	ip, r3, ip
 8001328:	45a4      	cmp	ip, r4
 800132a:	d908      	bls.n	800133e <__udivmoddi4+0x1ce>
 800132c:	193c      	adds	r4, r7, r4
 800132e:	f103 3eff 	add.w	lr, r3, #4294967295
 8001332:	f080 8082 	bcs.w	800143a <__udivmoddi4+0x2ca>
 8001336:	45a4      	cmp	ip, r4
 8001338:	d97f      	bls.n	800143a <__udivmoddi4+0x2ca>
 800133a:	3b02      	subs	r3, #2
 800133c:	443c      	add	r4, r7
 800133e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001342:	eba4 040c 	sub.w	r4, r4, ip
 8001346:	fba0 ec02 	umull	lr, ip, r0, r2
 800134a:	4564      	cmp	r4, ip
 800134c:	4673      	mov	r3, lr
 800134e:	46e1      	mov	r9, ip
 8001350:	d362      	bcc.n	8001418 <__udivmoddi4+0x2a8>
 8001352:	d05f      	beq.n	8001414 <__udivmoddi4+0x2a4>
 8001354:	b15d      	cbz	r5, 800136e <__udivmoddi4+0x1fe>
 8001356:	ebb8 0203 	subs.w	r2, r8, r3
 800135a:	eb64 0409 	sbc.w	r4, r4, r9
 800135e:	fa04 f606 	lsl.w	r6, r4, r6
 8001362:	fa22 f301 	lsr.w	r3, r2, r1
 8001366:	431e      	orrs	r6, r3
 8001368:	40cc      	lsrs	r4, r1
 800136a:	e9c5 6400 	strd	r6, r4, [r5]
 800136e:	2100      	movs	r1, #0
 8001370:	e74f      	b.n	8001212 <__udivmoddi4+0xa2>
 8001372:	fbb1 fcf2 	udiv	ip, r1, r2
 8001376:	0c01      	lsrs	r1, r0, #16
 8001378:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800137c:	b280      	uxth	r0, r0
 800137e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001382:	463b      	mov	r3, r7
 8001384:	4638      	mov	r0, r7
 8001386:	463c      	mov	r4, r7
 8001388:	46b8      	mov	r8, r7
 800138a:	46be      	mov	lr, r7
 800138c:	2620      	movs	r6, #32
 800138e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001392:	eba2 0208 	sub.w	r2, r2, r8
 8001396:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800139a:	e766      	b.n	800126a <__udivmoddi4+0xfa>
 800139c:	4601      	mov	r1, r0
 800139e:	e718      	b.n	80011d2 <__udivmoddi4+0x62>
 80013a0:	4610      	mov	r0, r2
 80013a2:	e72c      	b.n	80011fe <__udivmoddi4+0x8e>
 80013a4:	f1c6 0220 	rsb	r2, r6, #32
 80013a8:	fa2e f302 	lsr.w	r3, lr, r2
 80013ac:	40b7      	lsls	r7, r6
 80013ae:	40b1      	lsls	r1, r6
 80013b0:	fa20 f202 	lsr.w	r2, r0, r2
 80013b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013b8:	430a      	orrs	r2, r1
 80013ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80013be:	b2bc      	uxth	r4, r7
 80013c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80013c4:	0c11      	lsrs	r1, r2, #16
 80013c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80013ca:	fb08 f904 	mul.w	r9, r8, r4
 80013ce:	40b0      	lsls	r0, r6
 80013d0:	4589      	cmp	r9, r1
 80013d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80013d6:	b280      	uxth	r0, r0
 80013d8:	d93e      	bls.n	8001458 <__udivmoddi4+0x2e8>
 80013da:	1879      	adds	r1, r7, r1
 80013dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80013e0:	d201      	bcs.n	80013e6 <__udivmoddi4+0x276>
 80013e2:	4589      	cmp	r9, r1
 80013e4:	d81f      	bhi.n	8001426 <__udivmoddi4+0x2b6>
 80013e6:	eba1 0109 	sub.w	r1, r1, r9
 80013ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80013ee:	fb09 f804 	mul.w	r8, r9, r4
 80013f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80013f6:	b292      	uxth	r2, r2
 80013f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013fc:	4542      	cmp	r2, r8
 80013fe:	d229      	bcs.n	8001454 <__udivmoddi4+0x2e4>
 8001400:	18ba      	adds	r2, r7, r2
 8001402:	f109 31ff 	add.w	r1, r9, #4294967295
 8001406:	d2c4      	bcs.n	8001392 <__udivmoddi4+0x222>
 8001408:	4542      	cmp	r2, r8
 800140a:	d2c2      	bcs.n	8001392 <__udivmoddi4+0x222>
 800140c:	f1a9 0102 	sub.w	r1, r9, #2
 8001410:	443a      	add	r2, r7
 8001412:	e7be      	b.n	8001392 <__udivmoddi4+0x222>
 8001414:	45f0      	cmp	r8, lr
 8001416:	d29d      	bcs.n	8001354 <__udivmoddi4+0x1e4>
 8001418:	ebbe 0302 	subs.w	r3, lr, r2
 800141c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001420:	3801      	subs	r0, #1
 8001422:	46e1      	mov	r9, ip
 8001424:	e796      	b.n	8001354 <__udivmoddi4+0x1e4>
 8001426:	eba7 0909 	sub.w	r9, r7, r9
 800142a:	4449      	add	r1, r9
 800142c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001430:	fbb1 f9fe 	udiv	r9, r1, lr
 8001434:	fb09 f804 	mul.w	r8, r9, r4
 8001438:	e7db      	b.n	80013f2 <__udivmoddi4+0x282>
 800143a:	4673      	mov	r3, lr
 800143c:	e77f      	b.n	800133e <__udivmoddi4+0x1ce>
 800143e:	4650      	mov	r0, sl
 8001440:	e766      	b.n	8001310 <__udivmoddi4+0x1a0>
 8001442:	4608      	mov	r0, r1
 8001444:	e6fd      	b.n	8001242 <__udivmoddi4+0xd2>
 8001446:	443b      	add	r3, r7
 8001448:	3a02      	subs	r2, #2
 800144a:	e733      	b.n	80012b4 <__udivmoddi4+0x144>
 800144c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001450:	443b      	add	r3, r7
 8001452:	e71c      	b.n	800128e <__udivmoddi4+0x11e>
 8001454:	4649      	mov	r1, r9
 8001456:	e79c      	b.n	8001392 <__udivmoddi4+0x222>
 8001458:	eba1 0109 	sub.w	r1, r1, r9
 800145c:	46c4      	mov	ip, r8
 800145e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001462:	fb09 f804 	mul.w	r8, r9, r4
 8001466:	e7c4      	b.n	80013f2 <__udivmoddi4+0x282>

08001468 <__aeabi_idiv0>:
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop

0800146c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001478:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800147a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4313      	orrs	r3, r2
 8001482:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001488:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001490:	68fb      	ldr	r3, [r7, #12]
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c0:	68fb      	ldr	r3, [r7, #12]
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80014d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	43db      	mvns	r3, r3
 80014de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014e2:	4013      	ands	r3, r2
 80014e4:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80014f4:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <MX_ADC_Init+0x94>)
 80014f6:	4a24      	ldr	r2, [pc, #144]	@ (8001588 <MX_ADC_Init+0x98>)
 80014f8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <MX_ADC_Init+0x94>)
 80014fc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001500:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001502:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <MX_ADC_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001508:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <MX_ADC_Init+0x94>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800150e:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <MX_ADC_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <MX_ADC_Init+0x94>)
 8001516:	2204      	movs	r2, #4
 8001518:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <MX_ADC_Init+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <MX_ADC_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001526:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <MX_ADC_Init+0x94>)
 8001528:	2200      	movs	r2, #0
 800152a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 800152c:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <MX_ADC_Init+0x94>)
 800152e:	2201      	movs	r2, #1
 8001530:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <MX_ADC_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800153a:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <MX_ADC_Init+0x94>)
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001540:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <MX_ADC_Init+0x94>)
 8001542:	2200      	movs	r2, #0
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_ADC_Init+0x94>)
 8001548:	2200      	movs	r2, #0
 800154a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <MX_ADC_Init+0x94>)
 8001550:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001554:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <MX_ADC_Init+0x94>)
 8001558:	2207      	movs	r2, #7
 800155a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <MX_ADC_Init+0x94>)
 800155e:	2207      	movs	r2, #7
 8001560:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001562:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <MX_ADC_Init+0x94>)
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <MX_ADC_Init+0x94>)
 800156c:	2200      	movs	r2, #0
 800156e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	@ (8001584 <MX_ADC_Init+0x94>)
 8001572:	f002 fb83 	bl	8003c7c <HAL_ADC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 800157c:	f000 fe1c 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000324 	.word	0x20000324
 8001588:	40012400 	.word	0x40012400

0800158c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <HAL_ADC_MspInit+0x54>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d113      	bne.n	80015d6 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015b2:	f7ff ff73 	bl	800149c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	2002      	movs	r0, #2
 80015b8:	f7ff ff58 	bl	800146c <LL_AHB2_GRP1_EnableClock>
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_OUT_CUR_Pin|ADC_IN_VOLT_Pin|ADC_OUT_VOLT_Pin|ADC_TEMP_Pin;
 80015bc:	f246 0318 	movw	r3, #24600	@ 0x6018
 80015c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c2:	2303      	movs	r3, #3
 80015c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	4619      	mov	r1, r3
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <HAL_ADC_MspInit+0x58>)
 80015d2:	f004 f953 	bl	800587c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40012400 	.word	0x40012400
 80015e4:	48000400 	.word	0x48000400

080015e8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	@ (8001614 <HAL_ADC_MspDeInit+0x2c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d108      	bne.n	800160c <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80015fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015fe:	f7ff ff65 	bl	80014cc <LL_APB2_GRP1_DisableClock>
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB14     ------> ADC_IN1
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, ADC_OUT_CUR_Pin|ADC_IN_VOLT_Pin|ADC_OUT_VOLT_Pin|ADC_TEMP_Pin);
 8001602:	f246 0118 	movw	r1, #24600	@ 0x6018
 8001606:	4804      	ldr	r0, [pc, #16]	@ (8001618 <HAL_ADC_MspDeInit+0x30>)
 8001608:	f004 fa98 	bl	8005b3c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40012400 	.word	0x40012400
 8001618:	48000400 	.word	0x48000400

0800161c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <SYS_InitMeasurement+0x14>)
 8001622:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <SYS_InitMeasurement+0x18>)
 8001624:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000324 	.word	0x20000324
 8001634:	40012400 	.word	0x40012400

08001638 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001646:	f000 f869 	bl	800171c <SYS_GetBatteryLevel>
 800164a:	4603      	mov	r3, r0
 800164c:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 800164e:	482d      	ldr	r0, [pc, #180]	@ (8001704 <SYS_GetTemperatureLevel+0xcc>)
 8001650:	f000 f8e6 	bl	8001820 <ADC_ReadChannels>
 8001654:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001656:	4b2c      	ldr	r3, [pc, #176]	@ (8001708 <SYS_GetTemperatureLevel+0xd0>)
 8001658:	881a      	ldrh	r2, [r3, #0]
 800165a:	4b2c      	ldr	r3, [pc, #176]	@ (800170c <SYS_GetTemperatureLevel+0xd4>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d026      	beq.n	80016b0 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001662:	4b29      	ldr	r3, [pc, #164]	@ (8001708 <SYS_GetTemperatureLevel+0xd0>)
 8001664:	881a      	ldrh	r2, [r3, #0]
 8001666:	4b29      	ldr	r3, [pc, #164]	@ (800170c <SYS_GetTemperatureLevel+0xd4>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d01c      	beq.n	80016a8 <SYS_GetTemperatureLevel+0x70>
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	4a25      	ldr	r2, [pc, #148]	@ (8001710 <SYS_GetTemperatureLevel+0xd8>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	461a      	mov	r2, r3
 8001682:	4b22      	ldr	r3, [pc, #136]	@ (800170c <SYS_GetTemperatureLevel+0xd4>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2264      	movs	r2, #100	@ 0x64
 800168a:	fb03 f202 	mul.w	r2, r3, r2
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <SYS_GetTemperatureLevel+0xd0>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <SYS_GetTemperatureLevel+0xd4>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	1acb      	subs	r3, r1, r3
 800169a:	fb92 f3f3 	sdiv	r3, r2, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	331e      	adds	r3, #30
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	e001      	b.n	80016ac <SYS_GetTemperatureLevel+0x74>
 80016a8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80016ac:	803b      	strh	r3, [r7, #0]
 80016ae:	e01d      	b.n	80016ec <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	fb03 f202 	mul.w	r2, r3, r2
 80016b8:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <SYS_GetTemperatureLevel+0xdc>)
 80016ba:	fba3 1302 	umull	r1, r3, r3, r2
 80016be:	1ad2      	subs	r2, r2, r3
 80016c0:	0852      	lsrs	r2, r2, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	0adb      	lsrs	r3, r3, #11
 80016c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 80016d2:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 80016d6:	4a10      	ldr	r2, [pc, #64]	@ (8001718 <SYS_GetTemperatureLevel+0xe0>)
 80016d8:	fb82 1203 	smull	r1, r2, r2, r3
 80016dc:	1292      	asrs	r2, r2, #10
 80016de:	17db      	asrs	r3, r3, #31
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	331e      	adds	r3, #30
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 80016ec:	883b      	ldrh	r3, [r7, #0]
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 80016f6:	883b      	ldrh	r3, [r7, #0]
 80016f8:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	b0001000 	.word	0xb0001000
 8001708:	1fff75c8 	.word	0x1fff75c8
 800170c:	1fff75a8 	.word	0x1fff75a8
 8001710:	09ee009f 	.word	0x09ee009f
 8001714:	00100101 	.word	0x00100101
 8001718:	68db8bad 	.word	0x68db8bad

0800171c <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800172a:	4813      	ldr	r0, [pc, #76]	@ (8001778 <SYS_GetBatteryLevel+0x5c>)
 800172c:	f000 f878 	bl	8001820 <ADC_ReadChannels>
 8001730:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	80fb      	strh	r3, [r7, #6]
 800173c:	e016      	b.n	800176c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <SYS_GetBatteryLevel+0x60>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001746:	4293      	cmp	r3, r2
 8001748:	d00b      	beq.n	8001762 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800174a:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <SYS_GetBatteryLevel+0x60>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001754:	fb03 f202 	mul.w	r2, r3, r2
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	80fb      	strh	r3, [r7, #6]
 8001760:	e004      	b.n	800176c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001762:	4a07      	ldr	r2, [pc, #28]	@ (8001780 <SYS_GetBatteryLevel+0x64>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 800176c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	b4002000 	.word	0xb4002000
 800177c:	1fff75aa 	.word	0x1fff75aa
 8001780:	004c08d8 	.word	0x004c08d8

08001784 <SYS_GetADC0>:

/* Private Functions Definition -----------------------------------------------*/
/* USER CODE BEGIN PrFD */
uint16_t SYS_GetADC0(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_0);
 8001792:	2001      	movs	r0, #1
 8001794:	f000 f844 	bl	8001820 <ADC_ReadChannels>
 8001798:	4603      	mov	r3, r0
 800179a:	80fb      	strh	r3, [r7, #6]
	return voltage;
 800179c:	88fb      	ldrh	r3, [r7, #6]
	//outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
	//return outvoltage;
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <SYS_GetADC1>:

uint16_t SYS_GetADC1(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_1);
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <SYS_GetADC1+0x24>)
 80017b8:	f000 f832 	bl	8001820 <ADC_ReadChannels>
 80017bc:	4603      	mov	r3, r0
 80017be:	80fb      	strh	r3, [r7, #6]
	return voltage;
 80017c0:	88fb      	ldrh	r3, [r7, #6]
	//outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
	//return outvoltage;
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	04000002 	.word	0x04000002

080017d0 <SYS_GetADC2>:

uint16_t SYS_GetADC2(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_2);
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <SYS_GetADC2+0x24>)
 80017e0:	f000 f81e 	bl	8001820 <ADC_ReadChannels>
 80017e4:	4603      	mov	r3, r0
 80017e6:	80fb      	strh	r3, [r7, #6]
	return voltage;
 80017e8:	88fb      	ldrh	r3, [r7, #6]
	//outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
	//return outvoltage;
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08000004 	.word	0x08000004

080017f8 <SYS_GetADC3>:

uint16_t SYS_GetADC3(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
	uint16_t voltage = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	80fb      	strh	r3, [r7, #6]
	uint32_t outvoltage = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
	voltage = ADC_ReadChannels(ADC_CHANNEL_3);
 8001806:	4805      	ldr	r0, [pc, #20]	@ (800181c <SYS_GetADC3+0x24>)
 8001808:	f000 f80a 	bl	8001820 <ADC_ReadChannels>
 800180c:	4603      	mov	r3, r0
 800180e:	80fb      	strh	r3, [r7, #6]
	return voltage;
 8001810:	88fb      	ldrh	r3, [r7, #6]
	//outvoltage = __LL_ADC_CALC_DATA_TO_VOLTAGE(3300, voltage, ADC_RESOLUTION_12B);
	//return outvoltage;
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	0c000008 	.word	0x0c000008

08001820 <ADC_ReadChannels>:
/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001838:	f7ff fe5a 	bl	80014f0 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800183c:	481a      	ldr	r0, [pc, #104]	@ (80018a8 <ADC_ReadChannels+0x88>)
 800183e:	f003 f83c 	bl	80048ba <HAL_ADCEx_Calibration_Start>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001848:	f000 fcb6 	bl	80021b8 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	4619      	mov	r1, r3
 800185e:	4812      	ldr	r0, [pc, #72]	@ (80018a8 <ADC_ReadChannels+0x88>)
 8001860:	f002 fd48 	bl	80042f4 <HAL_ADC_ConfigChannel>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800186a:	f000 fca5 	bl	80021b8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800186e:	480e      	ldr	r0, [pc, #56]	@ (80018a8 <ADC_ReadChannels+0x88>)
 8001870:	f002 fc24 	bl	80040bc <HAL_ADC_Start>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800187a:	f000 fc9d 	bl	80021b8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800187e:	f04f 31ff 	mov.w	r1, #4294967295
 8001882:	4809      	ldr	r0, [pc, #36]	@ (80018a8 <ADC_ReadChannels+0x88>)
 8001884:	f002 fc92 	bl	80041ac <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001888:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <ADC_ReadChannels+0x88>)
 800188a:	f002 fc5d 	bl	8004148 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800188e:	4806      	ldr	r0, [pc, #24]	@ (80018a8 <ADC_ReadChannels+0x88>)
 8001890:	f002 fd23 	bl	80042da <HAL_ADC_GetValue>
 8001894:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001896:	4804      	ldr	r0, [pc, #16]	@ (80018a8 <ADC_ReadChannels+0x88>)
 8001898:	f002 fb84 	bl	8003fa4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800189c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000324 	.word	0x20000324

080018ac <LL_AHB1_GRP1_EnableClock>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80018ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4013      	ands	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d0:	68fb      	ldr	r3, [r7, #12]
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018e0:	2004      	movs	r0, #4
 80018e2:	f7ff ffe3 	bl	80018ac <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff ffe0 	bl	80018ac <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2102      	movs	r1, #2
 80018f0:	200b      	movs	r0, #11
 80018f2:	f003 f988 	bl	8004c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018f6:	200b      	movs	r0, #11
 80018f8:	f003 f99f 	bl	8004c3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	200c      	movs	r0, #12
 8001902:	f003 f980 	bl	8004c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001906:	200c      	movs	r0, #12
 8001908:	f003 f997 	bl	8004c3a <HAL_NVIC_EnableIRQ>

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800191c:	23ff      	movs	r3, #255	@ 0xff
 800191e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001926:	d311      	bcc.n	800194c <FLASH_IF_Write+0x3c>
 8001928:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <FLASH_IF_Write+0x48>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	029a      	lsls	r2, r3, #10
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <FLASH_IF_Write+0x4c>)
 8001930:	4013      	ands	r3, r2
 8001932:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001936:	3b01      	subs	r3, #1
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4293      	cmp	r3, r2
 800193c:	d306      	bcc.n	800194c <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f85a 	bl	80019fc <FLASH_IF_INT_Write>
 8001948:	4603      	mov	r3, r0
 800194a:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 800194c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	1fff75e0 	.word	0x1fff75e0
 800195c:	03fffc00 	.word	0x03fffc00

08001960 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800196c:	23ff      	movs	r3, #255	@ 0xff
 800196e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001976:	d311      	bcc.n	800199c <FLASH_IF_Read+0x3c>
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <FLASH_IF_Read+0x48>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	029a      	lsls	r2, r3, #10
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <FLASH_IF_Read+0x4c>)
 8001980:	4013      	ands	r3, r2
 8001982:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001986:	3b01      	subs	r3, #1
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	4293      	cmp	r3, r2
 800198c:	d306      	bcc.n	800199c <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 f93a 	bl	8001c0c <FLASH_IF_INT_Read>
 8001998:	4603      	mov	r3, r0
 800199a:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 800199c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	1fff75e0 	.word	0x1fff75e0
 80019ac:	03fffc00 	.word	0x03fffc00

080019b0 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80019ba:	23ff      	movs	r3, #255	@ 0xff
 80019bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80019c4:	d310      	bcc.n	80019e8 <FLASH_IF_Erase+0x38>
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <FLASH_IF_Erase+0x44>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	029a      	lsls	r2, r3, #10
 80019cc:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <FLASH_IF_Erase+0x48>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80019d4:	3b01      	subs	r3, #1
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4293      	cmp	r3, r2
 80019da:	d305      	bcc.n	80019e8 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80019dc:	6839      	ldr	r1, [r7, #0]
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f932 	bl	8001c48 <FLASH_IF_INT_Erase>
 80019e4:	4603      	mov	r3, r0
 80019e6:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80019e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	1fff75e0 	.word	0x1fff75e0
 80019f8:	03fffc00 	.word	0x03fffc00

080019fc <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b090      	sub	sp, #64	@ 0x40
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00c      	beq.n	8001a3a <FLASH_IF_INT_Write+0x3e>
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <FLASH_IF_INT_Write+0x3e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d104      	bne.n	8001a3a <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001a3a:	f06f 0305 	mvn.w	r3, #5
 8001a3e:	e0da      	b.n	8001bf6 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001a40:	f000 f992 	bl	8001d68 <FLASH_IF_INT_Clear_Error>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 8001a4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 80cf 	bne.w	8001bf2 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001a54:	f003 fd3c 	bl	80054d0 <HAL_FLASH_Unlock>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 80c6 	bne.w	8001bec <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a62:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001a66:	4b66      	ldr	r3, [pc, #408]	@ (8001c00 <FLASH_IF_INT_Write+0x204>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0299      	lsls	r1, r3, #10
 8001a6c:	4b65      	ldr	r3, [pc, #404]	@ (8001c04 <FLASH_IF_INT_Write+0x208>)
 8001a6e:	400b      	ands	r3, r1
 8001a70:	fbb2 f1f3 	udiv	r1, r2, r3
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	0adb      	lsrs	r3, r3, #11
 8001a7c:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001a7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	4a5d      	ldr	r2, [pc, #372]	@ (8001c00 <FLASH_IF_INT_Write+0x204>)
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	0291      	lsls	r1, r2, #10
 8001a90:	4a5c      	ldr	r2, [pc, #368]	@ (8001c04 <FLASH_IF_INT_Write+0x208>)
 8001a92:	400a      	ands	r2, r1
 8001a94:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a98:	fb01 f202 	mul.w	r2, r1, r2
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	0ada      	lsrs	r2, r3, #11
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d905      	bls.n	8001aba <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001ab8:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001abe:	e089      	b.n	8001bd4 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001ac6:	02db      	lsls	r3, r3, #11
 8001ac8:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001aca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f925 	bl	8001d1c <FLASH_IF_INT_IsEmpty>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d031      	beq.n	8001b3c <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c08 <FLASH_IF_INT_Write+0x20c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d103      	bne.n	8001ae8 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001ae0:	23fa      	movs	r3, #250	@ 0xfa
 8001ae2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001ae6:	e07e      	b.n	8001be6 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001ae8:	4b47      	ldr	r3, [pc, #284]	@ (8001c08 <FLASH_IF_INT_Write+0x20c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6939      	ldr	r1, [r7, #16]
 8001aee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f88a 	bl	8001c0c <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001af8:	4b43      	ldr	r3, [pc, #268]	@ (8001c08 <FLASH_IF_INT_Write+0x20c>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b02:	4413      	add	r3, r2
 8001b04:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f01a fd4c 	bl	801c5a8 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f896 	bl	8001c48 <FLASH_IF_INT_Erase>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 8001b22:	23fe      	movs	r3, #254	@ 0xfe
 8001b24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001b28:	e05d      	b.n	8001be6 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001b2e:	4b36      	ldr	r3, [pc, #216]	@ (8001c08 <FLASH_IF_INT_Write+0x20c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001b34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e005      	b.n	8001b48 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 8001b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b42:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b46:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b4c:	e026      	b.n	8001b9c <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001b4e:	6a3a      	ldr	r2, [r7, #32]
 8001b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b52:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f003 fc74 	bl	8005448 <HAL_FLASH_Program>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d113      	bne.n	8001b8e <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b6c:	6a3a      	ldr	r2, [r7, #32]
 8001b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b70:	4413      	add	r3, r2
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	4299      	cmp	r1, r3
 8001b78:	bf08      	it	eq
 8001b7a:	4290      	cmpeq	r0, r2
 8001b7c:	d003      	beq.n	8001b86 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001b7e:	23fc      	movs	r3, #252	@ 0xfc
 8001b80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 8001b84:	e00e      	b.n	8001ba4 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	3308      	adds	r3, #8
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b8c:	e003      	b.n	8001b96 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001b8e:	23fc      	movs	r3, #252	@ 0xfc
 8001b90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8001b94:	e006      	b.n	8001ba4 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b98:	3308      	adds	r3, #8
 8001b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d3d4      	bcc.n	8001b4e <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001ba4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d11b      	bne.n	8001be4 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001bac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bb0:	4413      	add	r3, r2
 8001bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 8001bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bb8:	4413      	add	r3, r2
 8001bba:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bc6:	bf28      	it	cs
 8001bc8:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8001bcc:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	4413      	add	r3, r2
 8001bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f4ff af6f 	bcc.w	8001ac0 <FLASH_IF_INT_Write+0xc4>
 8001be2:	e000      	b.n	8001be6 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001be4:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001be6:	f003 fc95 	bl	8005514 <HAL_FLASH_Lock>
 8001bea:	e002      	b.n	8001bf2 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001bec:	23fb      	movs	r3, #251	@ 0xfb
 8001bee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001bf2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3740      	adds	r7, #64	@ 0x40
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	1fff75e0 	.word	0x1fff75e0
 8001c04:	03fffc00 	.word	0x03fffc00
 8001c08:	20000388 	.word	0x20000388

08001c0c <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <FLASH_IF_INT_Read+0x1c>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001c28:	f06f 0305 	mvn.w	r3, #5
 8001c2c:	e008      	b.n	8001c40 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f01a fcb6 	bl	801c5a8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001c68:	f06f 0305 	mvn.w	r3, #5
 8001c6c:	e04e      	b.n	8001d0c <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001c6e:	f000 f87b 	bl	8001d68 <FLASH_IF_INT_Clear_Error>
 8001c72:	4603      	mov	r3, r0
 8001c74:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001c76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d144      	bne.n	8001d08 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001c7e:	f003 fc27 	bl	80054d0 <HAL_FLASH_Unlock>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d13d      	bne.n	8001d04 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001c92:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <FLASH_IF_INT_Erase+0xcc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0299      	lsls	r1, r3, #10
 8001c98:	4b1f      	ldr	r3, [pc, #124]	@ (8001d18 <FLASH_IF_INT_Erase+0xd0>)
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	0adb      	lsrs	r3, r3, #11
 8001ca8:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <FLASH_IF_INT_Erase+0xcc>)
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	0291      	lsls	r1, r2, #10
 8001cbc:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <FLASH_IF_INT_Erase+0xd0>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cc4:	fb01 f202 	mul.w	r2, r1, r2
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	0ada      	lsrs	r2, r3, #11
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001cd4:	f107 0214 	add.w	r2, r7, #20
 8001cd8:	f107 0308 	add.w	r3, r7, #8
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 fcf8 	bl	80056d4 <HAL_FLASHEx_Erase>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001ce8:	7fbb      	ldrb	r3, [r7, #30]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001cee:	7fbb      	ldrb	r3, [r7, #30]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d101      	bne.n	8001cf8 <FLASH_IF_INT_Erase+0xb0>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e001      	b.n	8001cfc <FLASH_IF_INT_Erase+0xb4>
 8001cf8:	f06f 0301 	mvn.w	r3, #1
 8001cfc:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001cfe:	f003 fc09 	bl	8005514 <HAL_FLASH_Lock>
 8001d02:	e001      	b.n	8001d08 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001d04:	23fb      	movs	r3, #251	@ 0xfb
 8001d06:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001d08:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	1fff75e0 	.word	0x1fff75e0
 8001d18:	03fffc00 	.word	0x03fffc00

08001d1c <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	e011      	b.n	8001d54 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3a:	bf08      	it	eq
 8001d3c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001d40:	d002      	beq.n	8001d48 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001d42:	2301      	movs	r3, #1
 8001d44:	60fb      	str	r3, [r7, #12]
      break;
 8001d46:	e009      	b.n	8001d5c <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	3308      	adds	r3, #8
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3e9      	bcc.n	8001d30 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001d6e:	23fb      	movs	r3, #251	@ 0xfb
 8001d70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001d72:	f003 fbad 	bl	80054d0 <HAL_FLASH_Unlock>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d110      	bne.n	8001d9e <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <FLASH_IF_INT_Clear_Error+0x44>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <FLASH_IF_INT_Clear_Error+0x44>)
 8001d82:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <FLASH_IF_INT_Clear_Error+0x44>)
 8001d8a:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001d8e:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001d90:	f003 fbc0 	bl	8005514 <HAL_FLASH_Lock>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	58004000 	.word	0x58004000

08001db0 <LL_AHB2_GRP1_EnableClock>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001dbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df4:	2001      	movs	r0, #1
 8001df6:	f7ff ffdb 	bl	8001db0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	f7ff ffd8 	bl	8001db0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e00:	2004      	movs	r0, #4
 8001e02:	f7ff ffd5 	bl	8001db0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e06:	2080      	movs	r0, #128	@ 0x80
 8001e08:	f7ff ffd2 	bl	8001db0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|VCC_OUT_EN_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f248 0131 	movw	r1, #32817	@ 0x8031
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e16:	f003 ff5f 	bl	8005cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e20:	483c      	ldr	r0, [pc, #240]	@ (8001f14 <MX_GPIO_Init+0x134>)
 8001e22:	f003 ff59 	bl	8005cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_RE_GPIO_Port, RS485_RE_Pin, GPIO_PIN_SET);
 8001e26:	2201      	movs	r2, #1
 8001e28:	2102      	movs	r1, #2
 8001e2a:	483b      	ldr	r0, [pc, #236]	@ (8001f18 <MX_GPIO_Init+0x138>)
 8001e2c:	f003 ff54 	bl	8005cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2101      	movs	r1, #1
 8001e34:	4838      	ldr	r0, [pc, #224]	@ (8001f18 <MX_GPIO_Init+0x138>)
 8001e36:	f003 ff4f 	bl	8005cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA12 PA11 PA6 PA1
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_6|GPIO_PIN_1
 8001e3a:	f641 13c2 	movw	r3, #6594	@ 0x19c2
 8001e3e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e40:	2303      	movs	r3, #3
 8001e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e50:	f003 fd14 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin RF_CTRL1_Pin RF_CTRL2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001e54:	f248 0330 	movw	r3, #32816	@ 0x8030
 8001e58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e6e:	f003 fd05 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	4619      	mov	r1, r3
 8001e88:	4822      	ldr	r0, [pc, #136]	@ (8001f14 <MX_GPIO_Init+0x134>)
 8001e8a:	f003 fcf7 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB5 PB8 PB2
                           PB12 PB1 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_2
 8001e8e:	f641 7326 	movw	r3, #7974	@ 0x1f26
 8001e92:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e94:	2303      	movs	r3, #3
 8001e96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	481c      	ldr	r0, [pc, #112]	@ (8001f14 <MX_GPIO_Init+0x134>)
 8001ea2:	f003 fceb 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC2 PC3 PC5
                           PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8001ea6:	f242 037c 	movw	r3, #8316	@ 0x207c
 8001eaa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eac:	2303      	movs	r3, #3
 8001eae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4817      	ldr	r0, [pc, #92]	@ (8001f18 <MX_GPIO_Init+0x138>)
 8001eba:	f003 fcdf 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCC_OUT_EN_Pin */
  GPIO_InitStruct.Pin = VCC_OUT_EN_Pin;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VCC_OUT_EN_GPIO_Port, &GPIO_InitStruct);
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ed6:	f003 fcd1 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_RE_Pin RS485_DE_Pin */
  GPIO_InitStruct.Pin = RS485_RE_Pin|RS485_DE_Pin;
 8001eda:	2303      	movs	r3, #3
 8001edc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	480a      	ldr	r0, [pc, #40]	@ (8001f18 <MX_GPIO_Init+0x138>)
 8001ef0:	f003 fcc4 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <MX_GPIO_Init+0x13c>)
 8001f06:	f003 fcb9 	bl	800587c <HAL_GPIO_Init>

}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	48000400 	.word	0x48000400
 8001f18:	48000800 	.word	0x48000800
 8001f1c:	48001c00 	.word	0x48001c00

08001f20 <LL_AHB2_GRP1_EnableClock>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4013      	ands	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f44:	68fb      	ldr	r3, [r7, #12]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <LL_APB1_GRP1_EnableClock>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4013      	ands	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f74:	68fb      	ldr	r3, [r7, #12]
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff4 <MX_I2C1_Init+0x74>)
 8001f86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff8 <MX_I2C1_Init+0x78>)
 8001f88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <MX_I2C1_Init+0x74>)
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ffc <MX_I2C1_Init+0x7c>)
 8001f8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 136;
 8001f90:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <MX_I2C1_Init+0x74>)
 8001f92:	2288      	movs	r2, #136	@ 0x88
 8001f94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f96:	4b17      	ldr	r3, [pc, #92]	@ (8001ff4 <MX_I2C1_Init+0x74>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <MX_I2C1_Init+0x74>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fa2:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <MX_I2C1_Init+0x74>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <MX_I2C1_Init+0x74>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <MX_I2C1_Init+0x74>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <MX_I2C1_Init+0x74>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fba:	480e      	ldr	r0, [pc, #56]	@ (8001ff4 <MX_I2C1_Init+0x74>)
 8001fbc:	f003 febc 	bl	8005d38 <HAL_I2C_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fc6:	f000 f8f7 	bl	80021b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4809      	ldr	r0, [pc, #36]	@ (8001ff4 <MX_I2C1_Init+0x74>)
 8001fce:	f004 fbff 	bl	80067d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fd8:	f000 f8ee 	bl	80021b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4805      	ldr	r0, [pc, #20]	@ (8001ff4 <MX_I2C1_Init+0x74>)
 8001fe0:	f004 fc40 	bl	8006864 <HAL_I2CEx_ConfigDigitalFilter>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fea:	f000 f8e5 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000038c 	.word	0x2000038c
 8001ff8:	40005400 	.word	0x40005400
 8001ffc:	10805d88 	.word	0x10805d88

08002000 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b096      	sub	sp, #88	@ 0x58
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	2238      	movs	r2, #56	@ 0x38
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f01c f84f 	bl	801e0c4 <memset>
  if(i2cHandle->Instance==I2C1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a21      	ldr	r2, [pc, #132]	@ (80020b0 <HAL_I2C_MspInit+0xb0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d13a      	bne.n	80020a6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002030:	2340      	movs	r3, #64	@ 0x40
 8002032:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002034:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002038:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	4618      	mov	r0, r3
 8002040:	f005 fecc 	bl	8007ddc <HAL_RCCEx_PeriphCLKConfig>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800204a:	f000 f8b5 	bl	80021b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204e:	2002      	movs	r0, #2
 8002050:	f7ff ff66 	bl	8001f20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002054:	2001      	movs	r0, #1
 8002056:	f7ff ff63 	bl	8001f20 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = HDC_SDA_Pin;
 800205a:	2380      	movs	r3, #128	@ 0x80
 800205c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800205e:	2312      	movs	r3, #18
 8002060:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002062:	2301      	movs	r3, #1
 8002064:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800206a:	2304      	movs	r3, #4
 800206c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(HDC_SDA_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002072:	4619      	mov	r1, r3
 8002074:	480f      	ldr	r0, [pc, #60]	@ (80020b4 <HAL_I2C_MspInit+0xb4>)
 8002076:	f003 fc01 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HDC_SCL_Pin;
 800207a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800207e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002080:	2312      	movs	r3, #18
 8002082:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002084:	2301      	movs	r3, #1
 8002086:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800208c:	2304      	movs	r3, #4
 800208e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(HDC_SCL_GPIO_Port, &GPIO_InitStruct);
 8002090:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002094:	4619      	mov	r1, r3
 8002096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800209a:	f003 fbef 	bl	800587c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800209e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80020a2:	f7ff ff55 	bl	8001f50 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020a6:	bf00      	nop
 80020a8:	3758      	adds	r7, #88	@ 0x58
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40005400 	.word	0x40005400
 80020b4:	48000400 	.word	0x48000400

080020b8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c8:	f023 0218 	bic.w	r2, r3, #24
 80020cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e6:	f001 fbdb 	bl	80038a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ea:	f000 f80b 	bl	8002104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ee:	f7ff fe77 	bl	8001de0 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80020f2:	f009 fa1d 	bl	800b530 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 80020f6:	f001 f84d 	bl	8003194 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80020fa:	f7ff ff41 	bl	8001f80 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80020fe:	f009 fa1f 	bl	800b540 <MX_LoRaWAN_Process>
 8002102:	e7fc      	b.n	80020fe <main+0x1c>

08002104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b09a      	sub	sp, #104	@ 0x68
 8002108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210a:	f107 0320 	add.w	r3, r7, #32
 800210e:	2248      	movs	r2, #72	@ 0x48
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f01b ffd6 	bl	801e0c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002118:	f107 0308 	add.w	r3, r7, #8
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
 8002128:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800212a:	f004 fbe7 	bl	80068fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff ffc2 	bl	80020b8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002134:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <SystemClock_Config+0xb0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800213c:	4a1d      	ldr	r2, [pc, #116]	@ (80021b4 <SystemClock_Config+0xb0>)
 800213e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <SystemClock_Config+0xb0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002150:	2324      	movs	r3, #36	@ 0x24
 8002152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002154:	2381      	movs	r3, #129	@ 0x81
 8002156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002158:	2301      	movs	r3, #1
 800215a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800215c:	2300      	movs	r3, #0
 800215e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002160:	23b0      	movs	r3, #176	@ 0xb0
 8002162:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002164:	2300      	movs	r3, #0
 8002166:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002168:	f107 0320 	add.w	r3, r7, #32
 800216c:	4618      	mov	r0, r3
 800216e:	f004 ff11 	bl	8006f94 <HAL_RCC_OscConfig>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002178:	f000 f81e 	bl	80021b8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800217c:	234f      	movs	r3, #79	@ 0x4f
 800217e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002194:	f107 0308 	add.w	r3, r7, #8
 8002198:	2102      	movs	r1, #2
 800219a:	4618      	mov	r0, r3
 800219c:	f005 fa7c 	bl	8007698 <HAL_RCC_ClockConfig>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80021a6:	f000 f807 	bl	80021b8 <Error_Handler>
  }
}
 80021aa:	bf00      	nop
 80021ac:	3768      	adds	r7, #104	@ 0x68
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	58000400 	.word	0x58000400

080021b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021bc:	b672      	cpsid	i
}
 80021be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <Error_Handler+0x8>

080021c4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <LL_APB1_GRP1_EnableClock>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002200:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4013      	ands	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002208:	68fb      	ldr	r3, [r7, #12]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	@ 0x30
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	222c      	movs	r2, #44	@ 0x2c
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f01b ff4f 	bl	801e0c4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002226:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <MX_RTC_Init+0x9c>)
 8002228:	4a22      	ldr	r2, [pc, #136]	@ (80022b4 <MX_RTC_Init+0xa0>)
 800222a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800222c:	4b20      	ldr	r3, [pc, #128]	@ (80022b0 <MX_RTC_Init+0x9c>)
 800222e:	221f      	movs	r2, #31
 8002230:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002232:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <MX_RTC_Init+0x9c>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002238:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <MX_RTC_Init+0x9c>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <MX_RTC_Init+0x9c>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002244:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <MX_RTC_Init+0x9c>)
 8002246:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800224a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800224c:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <MX_RTC_Init+0x9c>)
 800224e:	2200      	movs	r2, #0
 8002250:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002252:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <MX_RTC_Init+0x9c>)
 8002254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002258:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800225a:	4815      	ldr	r0, [pc, #84]	@ (80022b0 <MX_RTC_Init+0x9c>)
 800225c:	f005 fed8 	bl	8008010 <HAL_RTC_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002266:	f7ff ffa7 	bl	80021b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800226a:	4811      	ldr	r0, [pc, #68]	@ (80022b0 <MX_RTC_Init+0x9c>)
 800226c:	f006 f9ce 	bl	800860c <HAL_RTCEx_SetSSRU_IT>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002276:	f7ff ff9f 	bl	80021b8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002286:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800228a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800228c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	4619      	mov	r1, r3
 8002298:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <MX_RTC_Init+0x9c>)
 800229a:	f005 ff3b 	bl	8008114 <HAL_RTC_SetAlarm_IT>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80022a4:	f7ff ff88 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	3730      	adds	r7, #48	@ 0x30
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200003e0 	.word	0x200003e0
 80022b4:	40002800 	.word	0x40002800

080022b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b090      	sub	sp, #64	@ 0x40
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c0:	f107 0308 	add.w	r3, r7, #8
 80022c4:	2238      	movs	r2, #56	@ 0x38
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f01b fefb 	bl	801e0c4 <memset>
  if(rtcHandle->Instance==RTC)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a16      	ldr	r2, [pc, #88]	@ (800232c <HAL_RTC_MspInit+0x74>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d125      	bne.n	8002324 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022dc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	4618      	mov	r0, r3
 80022ea:	f005 fd77 	bl	8007ddc <HAL_RCCEx_PeriphCLKConfig>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80022f4:	f7ff ff60 	bl	80021b8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022f8:	f7ff ff64 	bl	80021c4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80022fc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002300:	f7ff ff70 	bl	80021e4 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	2002      	movs	r0, #2
 800230a:	f002 fc7c 	bl	8004c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800230e:	2002      	movs	r0, #2
 8002310:	f002 fc93 	bl	8004c3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	202a      	movs	r0, #42	@ 0x2a
 800231a:	f002 fc74 	bl	8004c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800231e:	202a      	movs	r0, #42	@ 0x2a
 8002320:	f002 fc8b 	bl	8004c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002324:	bf00      	nop
 8002326:	3740      	adds	r7, #64	@ 0x40
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40002800 	.word	0x40002800

08002330 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002336:	2201      	movs	r2, #1
 8002338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	58000400 	.word	0x58000400

08002348 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002364:	f001 fabc 	bl	80038e0 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002368:	f7ff ffe2 	bl	8002330 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800236c:	2001      	movs	r0, #1
 800236e:	f004 fb57 	bl	8006a20 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}

08002376 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800237a:	f001 fabf 	bl	80038fc <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800237e:	f001 f93f 	bl	8003600 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}

08002386 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800238a:	f001 faa9 	bl	80038e0 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800238e:	2101      	movs	r1, #1
 8002390:	2000      	movs	r0, #0
 8002392:	f004 fac1 	bl	8006918 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}

0800239a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800239e:	f001 faad 	bl	80038fc <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b6:	bf00      	nop
 80023b8:	e7fd      	b.n	80023b6 <NMI_Handler+0x4>

080023ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023be:	bf00      	nop
 80023c0:	e7fd      	b.n	80023be <HardFault_Handler+0x4>

080023c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c6:	bf00      	nop
 80023c8:	e7fd      	b.n	80023c6 <MemManage_Handler+0x4>

080023ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ce:	bf00      	nop
 80023d0:	e7fd      	b.n	80023ce <BusFault_Handler+0x4>

080023d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d6:	bf00      	nop
 80023d8:	e7fd      	b.n	80023d6 <UsageFault_Handler+0x4>

080023da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
	...

0800240c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002410:	4802      	ldr	r0, [pc, #8]	@ (800241c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002412:	f006 f937 	bl	8008684 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200003e0 	.word	0x200003e0

08002420 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002424:	4802      	ldr	r0, [pc, #8]	@ (8002430 <DMA1_Channel1_IRQHandler+0x10>)
 8002426:	f002 fe9f 	bl	8005168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000055c 	.word	0x2000055c

08002434 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <DMA1_Channel2_IRQHandler+0x10>)
 800243a:	f002 fe95 	bl	8005168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200005bc 	.word	0x200005bc

08002448 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800244c:	4802      	ldr	r0, [pc, #8]	@ (8002458 <USART1_IRQHandler+0x10>)
 800244e:	f006 ff73 	bl	8009338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000434 	.word	0x20000434

0800245c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002460:	4802      	ldr	r0, [pc, #8]	@ (800246c <USART2_IRQHandler+0x10>)
 8002462:	f006 ff69 	bl	8009338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200004c8 	.word	0x200004c8

08002470 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002474:	4802      	ldr	r0, [pc, #8]	@ (8002480 <RTC_Alarm_IRQHandler+0x10>)
 8002476:	f005 ffb5 	bl	80083e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200003e0 	.word	0x200003e0

08002484 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002488:	4802      	ldr	r0, [pc, #8]	@ (8002494 <SUBGHZ_Radio_IRQHandler+0x10>)
 800248a:	f006 fc69 	bl	8008d60 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000418 	.word	0x20000418

08002498 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80024a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80024a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80024b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024bc:	68fb      	ldr	r3, [r7, #12]
}
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <MX_SUBGHZ_Init+0x20>)
 80024ce:	2208      	movs	r2, #8
 80024d0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80024d2:	4805      	ldr	r0, [pc, #20]	@ (80024e8 <MX_SUBGHZ_Init+0x20>)
 80024d4:	f006 f9c2 	bl	800885c <HAL_SUBGHZ_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80024de:	f7ff fe6b 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000418 	.word	0x20000418

080024ec <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80024f4:	2001      	movs	r0, #1
 80024f6:	f7ff ffcf 	bl	8002498 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	2032      	movs	r0, #50	@ 0x32
 8002500:	f002 fb81 	bl	8004c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002504:	2032      	movs	r0, #50	@ 0x32
 8002506:	f002 fb98 	bl	8004c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002524:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800253c:	4b02      	ldr	r3, [pc, #8]	@ (8002548 <LL_FLASH_GetUDN+0x10>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	1fff7580 	.word	0x1fff7580

0800254c <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002550:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <LL_FLASH_GetDeviceID+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	1fff7584 	.word	0x1fff7584

08002564 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002568:	4b03      	ldr	r3, [pc, #12]	@ (8002578 <LL_FLASH_GetSTCompanyID+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0a1b      	lsrs	r3, r3, #8
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	1fff7584 	.word	0x1fff7584

0800257c <sht40>:
#define SHT40_CMD_HEATER_01S_110MW	0x24
#define SHT40_CMD_HEATER_1S_20MW	0x1E
#define SHT40_CMD_HEATER_01S_20MW	0x15

uint32_t sht40(void)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b08f      	sub	sp, #60	@ 0x3c
 8002580:	af02      	add	r7, sp, #8
	uint8_t tx_data[10]={0};
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	811a      	strh	r2, [r3, #8]
	uint8_t rx_data[10]={0};
 800258e:	463b      	mov	r3, r7
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	811a      	strh	r2, [r3, #8]
	float t_ticks=0, checksum_t=0, rh_ticks=0, checksum_rh=0;
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	623b      	str	r3, [r7, #32]
	uint32_t t_degC=0, rh_pRH=0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
	tx_data[0] = SHT40_CMD_HPR;
 80025b8:	23fd      	movs	r3, #253	@ 0xfd
 80025ba:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, SHT40_ADR, tx_data, 1, 10);
 80025bc:	f107 020c 	add.w	r2, r7, #12
 80025c0:	230a      	movs	r3, #10
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2301      	movs	r3, #1
 80025c6:	2188      	movs	r1, #136	@ 0x88
 80025c8:	4841      	ldr	r0, [pc, #260]	@ (80026d0 <sht40+0x154>)
 80025ca:	f003 fc51 	bl	8005e70 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80025ce:	200a      	movs	r0, #10
 80025d0:	f000 fa04 	bl	80029dc <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, (SHT40_ADR | 0x01), rx_data, 6, 10);
 80025d4:	463a      	mov	r2, r7
 80025d6:	230a      	movs	r3, #10
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2306      	movs	r3, #6
 80025dc:	2189      	movs	r1, #137	@ 0x89
 80025de:	483c      	ldr	r0, [pc, #240]	@ (80026d0 <sht40+0x154>)
 80025e0:	f003 fd5e 	bl	80060a0 <HAL_I2C_Master_Receive>
	t_ticks = (float) rx_data[0] * 256 + (float) rx_data[1];
 80025e4:	783b      	ldrb	r3, [r7, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fbbc 	bl	8000d64 <__aeabi_ui2f>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fc0e 	bl	8000e14 <__aeabi_fmul>
 80025f8:	4603      	mov	r3, r0
 80025fa:	461c      	mov	r4, r3
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fbb0 	bl	8000d64 <__aeabi_ui2f>
 8002604:	4603      	mov	r3, r0
 8002606:	4619      	mov	r1, r3
 8002608:	4620      	mov	r0, r4
 800260a:	f7fe fafb 	bl	8000c04 <__addsf3>
 800260e:	4603      	mov	r3, r0
 8002610:	62fb      	str	r3, [r7, #44]	@ 0x2c
	checksum_t = (float) rx_data[2];
 8002612:	78bb      	ldrb	r3, [r7, #2]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe fba5 	bl	8000d64 <__aeabi_ui2f>
 800261a:	4603      	mov	r3, r0
 800261c:	62bb      	str	r3, [r7, #40]	@ 0x28
	rh_ticks = (float) rx_data[3] * 256 + rx_data[4];
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fb9f 	bl	8000d64 <__aeabi_ui2f>
 8002626:	4603      	mov	r3, r0
 8002628:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fbf1 	bl	8000e14 <__aeabi_fmul>
 8002632:	4603      	mov	r3, r0
 8002634:	461c      	mov	r4, r3
 8002636:	793b      	ldrb	r3, [r7, #4]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fb97 	bl	8000d6c <__aeabi_i2f>
 800263e:	4603      	mov	r3, r0
 8002640:	4619      	mov	r1, r3
 8002642:	4620      	mov	r0, r4
 8002644:	f7fe fade 	bl	8000c04 <__addsf3>
 8002648:	4603      	mov	r3, r0
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24
	checksum_rh = (float) rx_data[5];
 800264c:	797b      	ldrb	r3, [r7, #5]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb88 	bl	8000d64 <__aeabi_ui2f>
 8002654:	4603      	mov	r3, r0
 8002656:	623b      	str	r3, [r7, #32]
	t_degC = (-45 + 175 * t_ticks/65535) * 100;
 8002658:	491e      	ldr	r1, [pc, #120]	@ (80026d4 <sht40+0x158>)
 800265a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800265c:	f7fe fbda 	bl	8000e14 <__aeabi_fmul>
 8002660:	4603      	mov	r3, r0
 8002662:	491d      	ldr	r1, [pc, #116]	@ (80026d8 <sht40+0x15c>)
 8002664:	4618      	mov	r0, r3
 8002666:	f7fe fc89 	bl	8000f7c <__aeabi_fdiv>
 800266a:	4603      	mov	r3, r0
 800266c:	491b      	ldr	r1, [pc, #108]	@ (80026dc <sht40+0x160>)
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fac6 	bl	8000c00 <__aeabi_fsub>
 8002674:	4603      	mov	r3, r0
 8002676:	491a      	ldr	r1, [pc, #104]	@ (80026e0 <sht40+0x164>)
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fbcb 	bl	8000e14 <__aeabi_fmul>
 800267e:	4603      	mov	r3, r0
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fd3d 	bl	8001100 <__aeabi_f2uiz>
 8002686:	4603      	mov	r3, r0
 8002688:	61fb      	str	r3, [r7, #28]
	rh_pRH = (-6 + 125 * rh_ticks/65535) * 100;
 800268a:	4916      	ldr	r1, [pc, #88]	@ (80026e4 <sht40+0x168>)
 800268c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800268e:	f7fe fbc1 	bl	8000e14 <__aeabi_fmul>
 8002692:	4603      	mov	r3, r0
 8002694:	4910      	ldr	r1, [pc, #64]	@ (80026d8 <sht40+0x15c>)
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fc70 	bl	8000f7c <__aeabi_fdiv>
 800269c:	4603      	mov	r3, r0
 800269e:	4912      	ldr	r1, [pc, #72]	@ (80026e8 <sht40+0x16c>)
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe faad 	bl	8000c00 <__aeabi_fsub>
 80026a6:	4603      	mov	r3, r0
 80026a8:	490d      	ldr	r1, [pc, #52]	@ (80026e0 <sht40+0x164>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fbb2 	bl	8000e14 <__aeabi_fmul>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fd24 	bl	8001100 <__aeabi_f2uiz>
 80026b8:	4603      	mov	r3, r0
 80026ba:	61bb      	str	r3, [r7, #24]
	return (uint32_t)((t_degC << 16) | (rh_pRH & 0xFFFF));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	041a      	lsls	r2, r3, #16
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4313      	orrs	r3, r2
		rh_pRH = 100;
	if (rh_pRH < 0)
		rh_pRH = 0;
	*/

}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3734      	adds	r7, #52	@ 0x34
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd90      	pop	{r4, r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000038c 	.word	0x2000038c
 80026d4:	432f0000 	.word	0x432f0000
 80026d8:	477fff00 	.word	0x477fff00
 80026dc:	42340000 	.word	0x42340000
 80026e0:	42c80000 	.word	0x42c80000
 80026e4:	42fa0000 	.word	0x42fa0000
 80026e8:	40c00000 	.word	0x40c00000

080026ec <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7ff ff0e 	bl	8002512 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80026f6:	f01a fa17 	bl	801cb28 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80026fa:	4b10      	ldr	r3, [pc, #64]	@ (800273c <SystemApp_Init+0x50>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002700:	f000 f98c 	bl	8002a1c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002704:	f01a fca0 	bl	801d048 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002708:	480d      	ldr	r0, [pc, #52]	@ (8002740 <SystemApp_Init+0x54>)
 800270a:	f01a fd4b 	bl	801d1a4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800270e:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <SystemApp_Init+0x58>)
 8002710:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002714:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002716:	2003      	movs	r0, #3
 8002718:	f01a fd52 	bl	801d1c0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800271c:	f7fe ff7e 	bl	800161c <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002720:	f000 f9bc 	bl	8002a9c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002724:	f019 fe9a 	bl	801c45c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002728:	2101      	movs	r1, #1
 800272a:	2001      	movs	r0, #1
 800272c:	f019 fed6 	bl	801c4dc <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002730:	2101      	movs	r1, #1
 8002732:	2001      	movs	r0, #1
 8002734:	f019 fea2 	bl	801c47c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000424 	.word	0x20000424
 8002740:	08002915 	.word	0x08002915
 8002744:	58004000 	.word	0x58004000

08002748 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 800274c:	f019 fef6 	bl	801c53c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800275e:	f7fe ffdd 	bl	800171c <SYS_GetBatteryLevel>
 8002762:	4603      	mov	r3, r0
 8002764:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002766:	88bb      	ldrh	r3, [r7, #4]
 8002768:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800276c:	4293      	cmp	r3, r2
 800276e:	d902      	bls.n	8002776 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002770:	23fe      	movs	r3, #254	@ 0xfe
 8002772:	71fb      	strb	r3, [r7, #7]
 8002774:	e014      	b.n	80027a0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002776:	88bb      	ldrh	r3, [r7, #4]
 8002778:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800277c:	d202      	bcs.n	8002784 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	71fb      	strb	r3, [r7, #7]
 8002782:	e00d      	b.n	80027a0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002784:	88bb      	ldrh	r3, [r7, #4]
 8002786:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 800278a:	461a      	mov	r2, r3
 800278c:	4613      	mov	r3, r2
 800278e:	01db      	lsls	r3, r3, #7
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	461a      	mov	r2, r3
 8002796:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <GetBatteryLevel+0x58>)
 8002798:	fba3 2302 	umull	r2, r3, r3, r2
 800279c:	09db      	lsrs	r3, r3, #7
 800279e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80027a0:	79fb      	ldrb	r3, [r7, #7]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	1b4e81b5 	.word	0x1b4e81b5

080027b0 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f93b 	bl	8002a38 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fc75 	bl	80010b4 <__aeabi_f2iz>
 80027ca:	4603      	mov	r3, r0
 80027cc:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80027ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80027da:	b590      	push	{r4, r7, lr}
 80027dc:	b087      	sub	sp, #28
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80027e6:	f7ff fea7 	bl	8002538 <LL_FLASH_GetUDN>
 80027ea:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d138      	bne.n	8002866 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80027f4:	f001 f890 	bl	8003918 <HAL_GetUIDw0>
 80027f8:	4604      	mov	r4, r0
 80027fa:	f001 f8a1 	bl	8003940 <HAL_GetUIDw2>
 80027fe:	4603      	mov	r3, r0
 8002800:	4423      	add	r3, r4
 8002802:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002804:	f001 f892 	bl	800392c <HAL_GetUIDw1>
 8002808:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	0e1a      	lsrs	r2, r3, #24
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3307      	adds	r3, #7
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	0c1a      	lsrs	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3306      	adds	r3, #6
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	0a1a      	lsrs	r2, r3, #8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3305      	adds	r3, #5
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	0e1a      	lsrs	r2, r3, #24
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3303      	adds	r3, #3
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	0c1a      	lsrs	r2, r3, #16
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3302      	adds	r3, #2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	0a1a      	lsrs	r2, r3, #8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3301      	adds	r3, #1
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002864:	e031      	b.n	80028ca <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3307      	adds	r3, #7
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	0a1a      	lsrs	r2, r3, #8
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3306      	adds	r3, #6
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	0c1a      	lsrs	r2, r3, #16
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3305      	adds	r3, #5
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	0e1a      	lsrs	r2, r3, #24
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002894:	f7ff fe5a 	bl	800254c <LL_FLASH_GetDeviceID>
 8002898:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3303      	adds	r3, #3
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80028a4:	f7ff fe5e 	bl	8002564 <LL_FLASH_GetSTCompanyID>
 80028a8:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3302      	adds	r3, #2
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	0a1a      	lsrs	r2, r3, #8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3301      	adds	r3, #1
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	701a      	strb	r2, [r3, #0]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd90      	pop	{r4, r7, pc}

080028d2 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80028d2:	b590      	push	{r4, r7, lr}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80028da:	f7ff fe2d 	bl	8002538 <LL_FLASH_GetUDN>
 80028de:	4602      	mov	r2, r0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d10d      	bne.n	800290a <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80028ee:	f001 f813 	bl	8003918 <HAL_GetUIDw0>
 80028f2:	4604      	mov	r4, r0
 80028f4:	f001 f81a 	bl	800392c <HAL_GetUIDw1>
 80028f8:	4603      	mov	r3, r0
 80028fa:	405c      	eors	r4, r3
 80028fc:	f001 f820 	bl	8003940 <HAL_GetUIDw2>
 8002900:	4603      	mov	r3, r0
 8002902:	ea84 0203 	eor.w	r2, r4, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bd90      	pop	{r4, r7, pc}
	...

08002914 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af02      	add	r7, sp, #8
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800291e:	f107 0308 	add.w	r3, r7, #8
 8002922:	4618      	mov	r0, r3
 8002924:	f019 ff1a 	bl	801c75c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800292e:	9200      	str	r2, [sp, #0]
 8002930:	4a07      	ldr	r2, [pc, #28]	@ (8002950 <TimestampNow+0x3c>)
 8002932:	2110      	movs	r1, #16
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f81d 	bl	8002974 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fd fc70 	bl	8000220 <strlen>
 8002940:	4603      	mov	r3, r0
 8002942:	b29a      	uxth	r2, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	08020838 	.word	0x08020838

08002954 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002958:	2101      	movs	r1, #1
 800295a:	2002      	movs	r0, #2
 800295c:	f019 fd8e 	bl	801c47c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002968:	2100      	movs	r1, #0
 800296a:	2002      	movs	r0, #2
 800296c:	f019 fd86 	bl	801c47c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002974:	b40c      	push	{r2, r3}
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	6839      	ldr	r1, [r7, #0]
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f01b fb8b 	bl	801e0a8 <vsniprintf>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800299c:	b002      	add	sp, #8
 800299e:	4770      	bx	lr

080029a0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80029be:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_GetTick+0x24>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80029c6:	f000 f9f7 	bl	8002db8 <TIMER_IF_GetTimerValue>
 80029ca:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80029cc:	687b      	ldr	r3, [r7, #4]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000424 	.word	0x20000424

080029dc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fa6d 	bl	8002ec6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <LL_EXTI_EnableIT_32_63+0x24>)
 80029fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002a02:	4905      	ldr	r1, [pc, #20]	@ (8002a18 <LL_EXTI_EnableIT_32_63+0x24>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	58000800 	.word	0x58000800

08002a1c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002a20:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002a24:	f7ff ffe6 	bl	80029f4 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002a28:	f000 ff94 	bl	8003954 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002a2c:	f000 ff98 	bl	8003960 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002a30:	f000 ff9c 	bl	800396c <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002a40:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <EnvSensors_Read+0x50>)
 8002a42:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002a44:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <EnvSensors_Read+0x54>)
 8002a46:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <EnvSensors_Read+0x58>)
 8002a4a:	60fb      	str	r3, [r7, #12]

  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8002a4c:	f7fe fdf4 	bl	8001638 <SYS_GetTemperatureLevel>
 8002a50:	4603      	mov	r3, r0
 8002a52:	121b      	asrs	r3, r3, #8
 8002a54:	b21b      	sxth	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe f988 	bl	8000d6c <__aeabi_i2f>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	613b      	str	r3, [r7, #16]

  sensor_data->humidity    = HUMIDITY_Value;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a07      	ldr	r2, [pc, #28]	@ (8002a94 <EnvSensors_Read+0x5c>)
 8002a76:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a07      	ldr	r2, [pc, #28]	@ (8002a98 <EnvSensors_Read+0x60>)
 8002a7c:	611a      	str	r2, [r3, #16]

  return 0;
 8002a7e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	42480000 	.word	0x42480000
 8002a8c:	41900000 	.word	0x41900000
 8002a90:	447a0000 	.word	0x447a0000
 8002a94:	003e090d 	.word	0x003e090d
 8002a98:	000503ab 	.word	0x000503ab

08002a9c <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002aa6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
	return 1;
 8002ab6:	2301      	movs	r3, #1
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <_kill>:

int _kill(int pid, int sig)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002aca:	f01b fb4d 	bl	801e168 <__errno>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2216      	movs	r2, #22
 8002ad2:	601a      	str	r2, [r3, #0]
	return -1;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <_exit>:

void _exit (int status)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ffe7 	bl	8002ac0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002af2:	bf00      	nop
 8002af4:	e7fd      	b.n	8002af2 <_exit+0x12>

08002af6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	e00a      	b.n	8002b1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b08:	f3af 8000 	nop.w
 8002b0c:	4601      	mov	r1, r0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	60ba      	str	r2, [r7, #8]
 8002b14:	b2ca      	uxtb	r2, r1
 8002b16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	dbf0      	blt.n	8002b08 <_read+0x12>
	}

return len;
 8002b26:	687b      	ldr	r3, [r7, #4]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e009      	b.n	8002b56 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	60ba      	str	r2, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3301      	adds	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	dbf1      	blt.n	8002b42 <_write+0x12>
	}
	return len;
 8002b5e:	687b      	ldr	r3, [r7, #4]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_close>:

int _close(int file)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	return -1;
 8002b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b8e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <_isatty>:

int _isatty(int file)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	return 1;
 8002ba4:	2301      	movs	r3, #1
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
	return 0;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd0:	4a14      	ldr	r2, [pc, #80]	@ (8002c24 <_sbrk+0x5c>)
 8002bd2:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <_sbrk+0x60>)
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bdc:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <_sbrk+0x64>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <_sbrk+0x64>)
 8002be6:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <_sbrk+0x68>)
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d207      	bcs.n	8002c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf8:	f01b fab6 	bl	801e168 <__errno>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	220c      	movs	r2, #12
 8002c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	e009      	b.n	8002c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c08:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	4a05      	ldr	r2, [pc, #20]	@ (8002c2c <_sbrk+0x64>)
 8002c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20010000 	.word	0x20010000
 8002c28:	00000400 	.word	0x00000400
 8002c2c:	20000428 	.word	0x20000428
 8002c30:	20002668 	.word	0x20002668

08002c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
	...

08002c58 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002c62:	4b14      	ldr	r3, [pc, #80]	@ (8002cb4 <TIMER_IF_Init+0x5c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	f083 0301 	eor.w	r3, r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01b      	beq.n	8002ca8 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <TIMER_IF_Init+0x60>)
 8002c72:	f04f 32ff 	mov.w	r2, #4294967295
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002c78:	f7ff facc 	bl	8002214 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002c7c:	f000 f856 	bl	8002d2c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002c80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c84:	480c      	ldr	r0, [pc, #48]	@ (8002cb8 <TIMER_IF_Init+0x60>)
 8002c86:	f005 fb51 	bl	800832c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <TIMER_IF_Init+0x60>)
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002c92:	4809      	ldr	r0, [pc, #36]	@ (8002cb8 <TIMER_IF_Init+0x60>)
 8002c94:	f005 fc88 	bl	80085a8 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f000 f9d3 	bl	8003044 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002c9e:	f000 f85f 	bl	8002d60 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002ca2:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <TIMER_IF_Init+0x5c>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	2000042c 	.word	0x2000042c
 8002cb8:	200003e0 	.word	0x200003e0

08002cbc <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08e      	sub	sp, #56	@ 0x38
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002cca:	f107 0308 	add.w	r3, r7, #8
 8002cce:	222c      	movs	r2, #44	@ 0x2c
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f01b f9f6 	bl	801e0c4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002cd8:	f000 f828 	bl	8002d2c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <TIMER_IF_StartTimer+0x68>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002cf4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002cf8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002d00:	f107 0308 	add.w	r3, r7, #8
 8002d04:	2201      	movs	r2, #1
 8002d06:	4619      	mov	r1, r3
 8002d08:	4807      	ldr	r0, [pc, #28]	@ (8002d28 <TIMER_IF_StartTimer+0x6c>)
 8002d0a:	f005 fa03 	bl	8008114 <HAL_RTC_SetAlarm_IT>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002d14:	f7ff fa50 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002d18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3738      	adds	r7, #56	@ 0x38
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000430 	.word	0x20000430
 8002d28:	200003e0 	.word	0x200003e0

08002d2c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002d36:	4b08      	ldr	r3, [pc, #32]	@ (8002d58 <TIMER_IF_StopTimer+0x2c>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002d3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d40:	4806      	ldr	r0, [pc, #24]	@ (8002d5c <TIMER_IF_StopTimer+0x30>)
 8002d42:	f005 faf3 	bl	800832c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002d46:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <TIMER_IF_StopTimer+0x30>)
 8002d48:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40002800 	.word	0x40002800
 8002d5c:	200003e0 	.word	0x200003e0

08002d60 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002d64:	f000 f98e 	bl	8003084 <GetTimerTicks>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4a03      	ldr	r2, [pc, #12]	@ (8002d78 <TIMER_IF_SetTimerContext+0x18>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002d6e:	4b02      	ldr	r3, [pc, #8]	@ (8002d78 <TIMER_IF_SetTimerContext+0x18>)
 8002d70:	681b      	ldr	r3, [r3, #0]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000430 	.word	0x20000430

08002d7c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002d80:	4b02      	ldr	r3, [pc, #8]	@ (8002d8c <TIMER_IF_GetTimerContext+0x10>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	20000430 	.word	0x20000430

08002d90 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002d9a:	f000 f973 	bl	8003084 <GetTimerTicks>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002da8:	687b      	ldr	r3, [r7, #4]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000430 	.word	0x20000430

08002db8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002dc2:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <TIMER_IF_GetTimerValue+0x24>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002dca:	f000 f95b 	bl	8003084 <GetTimerTicks>
 8002dce:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002dd0:	687b      	ldr	r3, [r7, #4]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	2000042c 	.word	0x2000042c

08002de0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002dea:	2303      	movs	r3, #3
 8002dec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002dee:	687b      	ldr	r3, [r7, #4]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002dfa:	b5b0      	push	{r4, r5, r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002e02:	2100      	movs	r1, #0
 8002e04:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	2000      	movs	r0, #0
 8002e0a:	460a      	mov	r2, r1
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	0d95      	lsrs	r5, r2, #22
 8002e10:	0294      	lsls	r4, r2, #10
 8002e12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	4629      	mov	r1, r5
 8002e1e:	f7fe f98f 	bl	8001140 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4613      	mov	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bdb0      	pop	{r4, r5, r7, pc}

08002e34 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002e34:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e38:	b085      	sub	sp, #20
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002e3e:	2100      	movs	r1, #0
 8002e40:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	2000      	movs	r0, #0
 8002e46:	460c      	mov	r4, r1
 8002e48:	4605      	mov	r5, r0
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	f04f 0a00 	mov.w	sl, #0
 8002e52:	f04f 0b00 	mov.w	fp, #0
 8002e56:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002e5a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002e5e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002e62:	4650      	mov	r0, sl
 8002e64:	4659      	mov	r1, fp
 8002e66:	1b02      	subs	r2, r0, r4
 8002e68:	eb61 0305 	sbc.w	r3, r1, r5
 8002e6c:	f04f 0000 	mov.w	r0, #0
 8002e70:	f04f 0100 	mov.w	r1, #0
 8002e74:	0099      	lsls	r1, r3, #2
 8002e76:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002e7a:	0090      	lsls	r0, r2, #2
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	eb12 0804 	adds.w	r8, r2, r4
 8002e84:	eb43 0905 	adc.w	r9, r3, r5
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e9c:	4690      	mov	r8, r2
 8002e9e:	4699      	mov	r9, r3
 8002ea0:	4640      	mov	r0, r8
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	0a82      	lsrs	r2, r0, #10
 8002eae:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002eb2:	0a8b      	lsrs	r3, r1, #10
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ec4:	4770      	bx	lr

08002ec6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff ff93 	bl	8002dfa <TIMER_IF_Convert_ms2Tick>
 8002ed4:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002ed6:	f000 f8d5 	bl	8003084 <GetTimerTicks>
 8002eda:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002edc:	e000      	b.n	8002ee0 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002ede:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002ee0:	f000 f8d0 	bl	8003084 <GetTimerTicks>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d8f6      	bhi.n	8002ede <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002f02:	f019 ff5f 	bl	801cdc4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002f16:	f000 f8a5 	bl	8003064 <TIMER_IF_BkUp_Read_MSBticks>
 8002f1a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 f88f 	bl	8003044 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002f2e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f32:	b08c      	sub	sp, #48	@ 0x30
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002f3c:	f000 f8a2 	bl	8003084 <GetTimerTicks>
 8002f40:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002f42:	f000 f88f 	bl	8003064 <TIMER_IF_BkUp_Read_MSBticks>
 8002f46:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	60fa      	str	r2, [r7, #12]
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	000b      	movs	r3, r1
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f60:	2000      	movs	r0, #0
 8002f62:	460c      	mov	r4, r1
 8002f64:	4605      	mov	r5, r0
 8002f66:	eb12 0804 	adds.w	r8, r2, r4
 8002f6a:	eb43 0905 	adc.w	r9, r3, r5
 8002f6e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002f72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	0a82      	lsrs	r2, r0, #10
 8002f80:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002f84:	0a8b      	lsrs	r3, r1, #10
 8002f86:	4613      	mov	r3, r2
 8002f88:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002f98:	f04f 0b00 	mov.w	fp, #0
 8002f9c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff46 	bl	8002e34 <TIMER_IF_Convert_Tick2ms>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3730      	adds	r7, #48	@ 0x30
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002fbc <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4803      	ldr	r0, [pc, #12]	@ (8002fd8 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002fca:	f005 fb7f 	bl	80086cc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200003e0 	.word	0x200003e0

08002fdc <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	4803      	ldr	r0, [pc, #12]	@ (8002ff8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002fea:	f005 fb6f 	bl	80086cc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200003e0 	.word	0x200003e0

08002ffc <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8003006:	2100      	movs	r1, #0
 8003008:	4804      	ldr	r0, [pc, #16]	@ (800301c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800300a:	f005 fb77 	bl	80086fc <HAL_RTCEx_BKUPRead>
 800300e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8003010:	687b      	ldr	r3, [r7, #4]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200003e0 	.word	0x200003e0

08003020 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800302a:	2101      	movs	r1, #1
 800302c:	4804      	ldr	r0, [pc, #16]	@ (8003040 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800302e:	f005 fb65 	bl	80086fc <HAL_RTCEx_BKUPRead>
 8003032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8003034:	687b      	ldr	r3, [r7, #4]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200003e0 	.word	0x200003e0

08003044 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	2102      	movs	r1, #2
 8003050:	4803      	ldr	r0, [pc, #12]	@ (8003060 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8003052:	f005 fb3b 	bl	80086cc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	200003e0 	.word	0x200003e0

08003064 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800306a:	2102      	movs	r1, #2
 800306c:	4804      	ldr	r0, [pc, #16]	@ (8003080 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800306e:	f005 fb45 	bl	80086fc <HAL_RTCEx_BKUPRead>
 8003072:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8003074:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200003e0 	.word	0x200003e0

08003084 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800308a:	480b      	ldr	r0, [pc, #44]	@ (80030b8 <GetTimerTicks+0x34>)
 800308c:	f7ff fdd8 	bl	8002c40 <LL_RTC_TIME_GetSubSecond>
 8003090:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003092:	e003      	b.n	800309c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8003094:	4808      	ldr	r0, [pc, #32]	@ (80030b8 <GetTimerTicks+0x34>)
 8003096:	f7ff fdd3 	bl	8002c40 <LL_RTC_TIME_GetSubSecond>
 800309a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800309c:	4806      	ldr	r0, [pc, #24]	@ (80030b8 <GetTimerTicks+0x34>)
 800309e:	f7ff fdcf 	bl	8002c40 <LL_RTC_TIME_GetSubSecond>
 80030a2:	4602      	mov	r2, r0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d1f4      	bne.n	8003094 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40002800 	.word	0x40002800

080030bc <LL_AHB2_GRP1_EnableClock>:
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4013      	ands	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030e0:	68fb      	ldr	r3, [r7, #12]
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <LL_APB1_GRP1_EnableClock>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4313      	orrs	r3, r2
 8003102:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003108:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003110:	68fb      	ldr	r3, [r7, #12]
}
 8003112:	bf00      	nop
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <LL_APB1_GRP1_DisableClock>:
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003128:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	43db      	mvns	r3, r3
 800312e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003132:	4013      	ands	r3, r2
 8003134:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <LL_APB2_GRP1_EnableClock>:
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800314c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800314e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4313      	orrs	r3, r2
 8003156:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800315c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4013      	ands	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003164:	68fb      	ldr	r3, [r7, #12]
}
 8003166:	bf00      	nop
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <LL_APB2_GRP1_DisableClock>:
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800317c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	43db      	mvns	r3, r3
 8003182:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003186:	4013      	ands	r3, r2
 8003188:	660b      	str	r3, [r1, #96]	@ 0x60
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003198:	4b22      	ldr	r3, [pc, #136]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 800319a:	4a23      	ldr	r2, [pc, #140]	@ (8003228 <MX_USART2_UART_Init+0x94>)
 800319c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800319e:	4b21      	ldr	r3, [pc, #132]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 80031a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 80031ba:	220c      	movs	r2, #12
 80031bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031be:	4b19      	ldr	r3, [pc, #100]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c4:	4b17      	ldr	r3, [pc, #92]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ca:	4b16      	ldr	r3, [pc, #88]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031d0:	4b14      	ldr	r3, [pc, #80]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031d6:	4b13      	ldr	r3, [pc, #76]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 80031d8:	2200      	movs	r2, #0
 80031da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031dc:	4811      	ldr	r0, [pc, #68]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 80031de:	f005 ff8e 	bl	80090fe <HAL_UART_Init>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80031e8:	f7fe ffe6 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031ec:	2100      	movs	r1, #0
 80031ee:	480d      	ldr	r0, [pc, #52]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 80031f0:	f008 f8b4 	bl	800b35c <HAL_UARTEx_SetTxFifoThreshold>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80031fa:	f7fe ffdd 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031fe:	2100      	movs	r1, #0
 8003200:	4808      	ldr	r0, [pc, #32]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 8003202:	f008 f8e9 	bl	800b3d8 <HAL_UARTEx_SetRxFifoThreshold>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800320c:	f7fe ffd4 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003210:	4804      	ldr	r0, [pc, #16]	@ (8003224 <MX_USART2_UART_Init+0x90>)
 8003212:	f008 f86b 	bl	800b2ec <HAL_UARTEx_DisableFifoMode>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800321c:	f7fe ffcc 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}
 8003224:	200004c8 	.word	0x200004c8
 8003228:	40004400 	.word	0x40004400

0800322c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b096      	sub	sp, #88	@ 0x58
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003244:	f107 030c 	add.w	r3, r7, #12
 8003248:	2238      	movs	r2, #56	@ 0x38
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f01a ff39 	bl	801e0c4 <memset>
  if(uartHandle->Instance==USART1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a68      	ldr	r2, [pc, #416]	@ (80033f8 <HAL_UART_MspInit+0x1cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d16c      	bne.n	8003336 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800325c:	2301      	movs	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003260:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003264:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	4618      	mov	r0, r3
 800326c:	f004 fdb6 	bl	8007ddc <HAL_RCCEx_PeriphCLKConfig>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003276:	f7fe ff9f 	bl	80021b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800327a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800327e:	f7ff ff5f 	bl	8003140 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	2001      	movs	r0, #1
 8003284:	f7ff ff1a 	bl	80030bc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003288:	2002      	movs	r0, #2
 800328a:	f7ff ff17 	bl	80030bc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 800328e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003292:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329c:	2303      	movs	r3, #3
 800329e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032a0:	2307      	movs	r3, #7
 80032a2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 80032a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80032a8:	4619      	mov	r1, r3
 80032aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032ae:	f002 fae5 	bl	800587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_TX_Pin;
 80032b2:	2340      	movs	r3, #64	@ 0x40
 80032b4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032be:	2303      	movs	r3, #3
 80032c0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032c2:	2307      	movs	r3, #7
 80032c4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 80032c6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80032ca:	4619      	mov	r1, r3
 80032cc:	484b      	ldr	r0, [pc, #300]	@ (80033fc <HAL_UART_MspInit+0x1d0>)
 80032ce:	f002 fad5 	bl	800587c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80032d2:	4b4b      	ldr	r3, [pc, #300]	@ (8003400 <HAL_UART_MspInit+0x1d4>)
 80032d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003404 <HAL_UART_MspInit+0x1d8>)
 80032d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80032d8:	4b49      	ldr	r3, [pc, #292]	@ (8003400 <HAL_UART_MspInit+0x1d4>)
 80032da:	2212      	movs	r2, #18
 80032dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032de:	4b48      	ldr	r3, [pc, #288]	@ (8003400 <HAL_UART_MspInit+0x1d4>)
 80032e0:	2210      	movs	r2, #16
 80032e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e4:	4b46      	ldr	r3, [pc, #280]	@ (8003400 <HAL_UART_MspInit+0x1d4>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032ea:	4b45      	ldr	r3, [pc, #276]	@ (8003400 <HAL_UART_MspInit+0x1d4>)
 80032ec:	2280      	movs	r2, #128	@ 0x80
 80032ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f0:	4b43      	ldr	r3, [pc, #268]	@ (8003400 <HAL_UART_MspInit+0x1d4>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032f6:	4b42      	ldr	r3, [pc, #264]	@ (8003400 <HAL_UART_MspInit+0x1d4>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80032fc:	4b40      	ldr	r3, [pc, #256]	@ (8003400 <HAL_UART_MspInit+0x1d4>)
 80032fe:	2200      	movs	r2, #0
 8003300:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003302:	4b3f      	ldr	r3, [pc, #252]	@ (8003400 <HAL_UART_MspInit+0x1d4>)
 8003304:	2200      	movs	r2, #0
 8003306:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003308:	483d      	ldr	r0, [pc, #244]	@ (8003400 <HAL_UART_MspInit+0x1d4>)
 800330a:	f001 fcb3 	bl	8004c74 <HAL_DMA_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8003314:	f7fe ff50 	bl	80021b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a39      	ldr	r2, [pc, #228]	@ (8003400 <HAL_UART_MspInit+0x1d4>)
 800331c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800331e:	4a38      	ldr	r2, [pc, #224]	@ (8003400 <HAL_UART_MspInit+0x1d4>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003324:	2200      	movs	r2, #0
 8003326:	2102      	movs	r1, #2
 8003328:	2024      	movs	r0, #36	@ 0x24
 800332a:	f001 fc6c 	bl	8004c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800332e:	2024      	movs	r0, #36	@ 0x24
 8003330:	f001 fc83 	bl	8004c3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003334:	e05c      	b.n	80033f0 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a33      	ldr	r2, [pc, #204]	@ (8003408 <HAL_UART_MspInit+0x1dc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d157      	bne.n	80033f0 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003340:	2302      	movs	r3, #2
 8003342:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003344:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8003348:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800334a:	f107 030c 	add.w	r3, r7, #12
 800334e:	4618      	mov	r0, r3
 8003350:	f004 fd44 	bl	8007ddc <HAL_RCCEx_PeriphCLKConfig>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_UART_MspInit+0x132>
      Error_Handler();
 800335a:	f7fe ff2d 	bl	80021b8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800335e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003362:	f7ff fec3 	bl	80030ec <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003366:	2001      	movs	r0, #1
 8003368:	f7ff fea8 	bl	80030bc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 800336c:	230c      	movs	r3, #12
 800336e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003374:	2301      	movs	r3, #1
 8003376:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003378:	2300      	movs	r3, #0
 800337a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800337c:	2307      	movs	r3, #7
 800337e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003380:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003384:	4619      	mov	r1, r3
 8003386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800338a:	f002 fa77 	bl	800587c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800338e:	4b1f      	ldr	r3, [pc, #124]	@ (800340c <HAL_UART_MspInit+0x1e0>)
 8003390:	4a1f      	ldr	r2, [pc, #124]	@ (8003410 <HAL_UART_MspInit+0x1e4>)
 8003392:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003394:	4b1d      	ldr	r3, [pc, #116]	@ (800340c <HAL_UART_MspInit+0x1e0>)
 8003396:	2214      	movs	r2, #20
 8003398:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800339a:	4b1c      	ldr	r3, [pc, #112]	@ (800340c <HAL_UART_MspInit+0x1e0>)
 800339c:	2210      	movs	r2, #16
 800339e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033a0:	4b1a      	ldr	r3, [pc, #104]	@ (800340c <HAL_UART_MspInit+0x1e0>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033a6:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_UART_MspInit+0x1e0>)
 80033a8:	2280      	movs	r2, #128	@ 0x80
 80033aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033ac:	4b17      	ldr	r3, [pc, #92]	@ (800340c <HAL_UART_MspInit+0x1e0>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033b2:	4b16      	ldr	r3, [pc, #88]	@ (800340c <HAL_UART_MspInit+0x1e0>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80033b8:	4b14      	ldr	r3, [pc, #80]	@ (800340c <HAL_UART_MspInit+0x1e0>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033be:	4b13      	ldr	r3, [pc, #76]	@ (800340c <HAL_UART_MspInit+0x1e0>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80033c4:	4811      	ldr	r0, [pc, #68]	@ (800340c <HAL_UART_MspInit+0x1e0>)
 80033c6:	f001 fc55 	bl	8004c74 <HAL_DMA_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80033d0:	f7fe fef2 	bl	80021b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a0d      	ldr	r2, [pc, #52]	@ (800340c <HAL_UART_MspInit+0x1e0>)
 80033d8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80033da:	4a0c      	ldr	r2, [pc, #48]	@ (800340c <HAL_UART_MspInit+0x1e0>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2100      	movs	r1, #0
 80033e4:	2025      	movs	r0, #37	@ 0x25
 80033e6:	f001 fc0e 	bl	8004c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033ea:	2025      	movs	r0, #37	@ 0x25
 80033ec:	f001 fc25 	bl	8004c3a <HAL_NVIC_EnableIRQ>
}
 80033f0:	bf00      	nop
 80033f2:	3758      	adds	r7, #88	@ 0x58
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40013800 	.word	0x40013800
 80033fc:	48000400 	.word	0x48000400
 8003400:	2000055c 	.word	0x2000055c
 8003404:	40020008 	.word	0x40020008
 8003408:	40004400 	.word	0x40004400
 800340c:	200005bc 	.word	0x200005bc
 8003410:	4002001c 	.word	0x4002001c

08003414 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a19      	ldr	r2, [pc, #100]	@ (8003488 <HAL_UART_MspDeInit+0x74>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d116      	bne.n	8003454 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003426:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800342a:	f7ff fea1 	bl	8003170 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(RS485_RX_GPIO_Port, RS485_RX_Pin);
 800342e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003436:	f002 fb81 	bl	8005b3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(RS485_TX_GPIO_Port, RS485_TX_Pin);
 800343a:	2140      	movs	r1, #64	@ 0x40
 800343c:	4813      	ldr	r0, [pc, #76]	@ (800348c <HAL_UART_MspDeInit+0x78>)
 800343e:	f002 fb7d 	bl	8005b3c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003446:	4618      	mov	r0, r3
 8003448:	f001 fcbc 	bl	8004dc4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800344c:	2024      	movs	r0, #36	@ 0x24
 800344e:	f001 fc02 	bl	8004c56 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003452:	e015      	b.n	8003480 <HAL_UART_MspDeInit+0x6c>
  else if(uartHandle->Instance==USART2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0d      	ldr	r2, [pc, #52]	@ (8003490 <HAL_UART_MspDeInit+0x7c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d110      	bne.n	8003480 <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_USART2_CLK_DISABLE();
 800345e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003462:	f7ff fe5b 	bl	800311c <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8003466:	210c      	movs	r1, #12
 8003468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800346c:	f002 fb66 	bl	8005b3c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003474:	4618      	mov	r0, r3
 8003476:	f001 fca5 	bl	8004dc4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800347a:	2025      	movs	r0, #37	@ 0x25
 800347c:	f001 fbeb 	bl	8004c56 <HAL_NVIC_DisableIRQ>
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40013800 	.word	0x40013800
 800348c:	48000400 	.word	0x48000400
 8003490:	40004400 	.word	0x40004400

08003494 <LL_APB1_GRP1_ForceReset>:
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800349c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <LL_APB1_GRP1_ReleaseReset>:
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80034be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034cc:	4013      	ands	r3, r2
 80034ce:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
	...

080034dc <LL_EXTI_EnableIT_0_31>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80034e4:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <LL_EXTI_EnableIT_0_31+0x24>)
 80034e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80034ea:	4905      	ldr	r1, [pc, #20]	@ (8003500 <LL_EXTI_EnableIT_0_31+0x24>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	58000800 	.word	0x58000800

08003504 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800350c:	4a07      	ldr	r2, [pc, #28]	@ (800352c <vcom_Init+0x28>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003512:	f7fe f9e3 	bl	80018dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003516:	f7ff fe3d 	bl	8003194 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 800351a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800351e:	f7ff ffdd 	bl	80034dc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003522:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20000620 	.word	0x20000620

08003530 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8003534:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003538:	f7ff ffac 	bl	8003494 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 800353c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003540:	f7ff ffb9 	bl	80034b6 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8003544:	4804      	ldr	r0, [pc, #16]	@ (8003558 <vcom_DeInit+0x28>)
 8003546:	f7ff ff65 	bl	8003414 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800354a:	200f      	movs	r0, #15
 800354c:	f001 fb83 	bl	8004c56 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003550:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003552:	4618      	mov	r0, r3
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	200004c8 	.word	0x200004c8

0800355c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	461a      	mov	r2, r3
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4804      	ldr	r0, [pc, #16]	@ (8003580 <vcom_Trace_DMA+0x24>)
 8003570:	f005 fe62 	bl	8009238 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003574:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200004c8 	.word	0x200004c8

08003584 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800358c:	4a19      	ldr	r2, [pc, #100]	@ (80035f4 <vcom_ReceiveInit+0x70>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003592:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003596:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8003598:	f107 0308 	add.w	r3, r7, #8
 800359c:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035a0:	4815      	ldr	r0, [pc, #84]	@ (80035f8 <vcom_ReceiveInit+0x74>)
 80035a2:	f007 fe16 	bl	800b1d2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80035a6:	bf00      	nop
 80035a8:	4b13      	ldr	r3, [pc, #76]	@ (80035f8 <vcom_ReceiveInit+0x74>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b6:	d0f7      	beq.n	80035a8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80035b8:	bf00      	nop
 80035ba:	4b0f      	ldr	r3, [pc, #60]	@ (80035f8 <vcom_ReceiveInit+0x74>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035c8:	d1f7      	bne.n	80035ba <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80035ca:	4b0b      	ldr	r3, [pc, #44]	@ (80035f8 <vcom_ReceiveInit+0x74>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	4b09      	ldr	r3, [pc, #36]	@ (80035f8 <vcom_ReceiveInit+0x74>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80035d8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80035da:	4807      	ldr	r0, [pc, #28]	@ (80035f8 <vcom_ReceiveInit+0x74>)
 80035dc:	f007 fe54 	bl	800b288 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80035e0:	2201      	movs	r2, #1
 80035e2:	4906      	ldr	r1, [pc, #24]	@ (80035fc <vcom_ReceiveInit+0x78>)
 80035e4:	4804      	ldr	r0, [pc, #16]	@ (80035f8 <vcom_ReceiveInit+0x74>)
 80035e6:	f005 fddb 	bl	80091a0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80035ea:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000624 	.word	0x20000624
 80035f8:	200004c8 	.word	0x200004c8
 80035fc:	2000061c 	.word	0x2000061c

08003600 <vcom_Resume>:

void vcom_Resume(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003604:	4808      	ldr	r0, [pc, #32]	@ (8003628 <vcom_Resume+0x28>)
 8003606:	f005 fd7a 	bl	80090fe <HAL_UART_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003610:	f7fe fdd2 	bl	80021b8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003614:	4805      	ldr	r0, [pc, #20]	@ (800362c <vcom_Resume+0x2c>)
 8003616:	f001 fb2d 	bl	8004c74 <HAL_DMA_Init>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003620:	f7fe fdca 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}
 8003628:	200004c8 	.word	0x200004c8
 800362c:	200005bc 	.word	0x200005bc

08003630 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a05      	ldr	r2, [pc, #20]	@ (8003654 <HAL_UART_TxCpltCallback+0x24>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d103      	bne.n	800364a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003642:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <HAL_UART_TxCpltCallback+0x28>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2000      	movs	r0, #0
 8003648:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40004400 	.word	0x40004400
 8003658:	20000620 	.word	0x20000620

0800365c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0d      	ldr	r2, [pc, #52]	@ (80036a0 <HAL_UART_RxCpltCallback+0x44>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d113      	bne.n	8003696 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <HAL_UART_RxCpltCallback+0x48>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_UART_RxCpltCallback+0x30>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003680:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <HAL_UART_RxCpltCallback+0x48>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2200      	movs	r2, #0
 8003686:	2101      	movs	r1, #1
 8003688:	4807      	ldr	r0, [pc, #28]	@ (80036a8 <HAL_UART_RxCpltCallback+0x4c>)
 800368a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 800368c:	2201      	movs	r2, #1
 800368e:	4906      	ldr	r1, [pc, #24]	@ (80036a8 <HAL_UART_RxCpltCallback+0x4c>)
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f005 fd85 	bl	80091a0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40004400 	.word	0x40004400
 80036a4:	20000624 	.word	0x20000624
 80036a8:	2000061c 	.word	0x2000061c

080036ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036ac:	480d      	ldr	r0, [pc, #52]	@ (80036e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036b0:	f7ff fac0 	bl	8002c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036b4:	480c      	ldr	r0, [pc, #48]	@ (80036e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80036b6:	490d      	ldr	r1, [pc, #52]	@ (80036ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80036b8:	4a0d      	ldr	r2, [pc, #52]	@ (80036f0 <LoopForever+0xe>)
  movs r3, #0
 80036ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036bc:	e002      	b.n	80036c4 <LoopCopyDataInit>

080036be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036c2:	3304      	adds	r3, #4

080036c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036c8:	d3f9      	bcc.n	80036be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ca:	4a0a      	ldr	r2, [pc, #40]	@ (80036f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036cc:	4c0a      	ldr	r4, [pc, #40]	@ (80036f8 <LoopForever+0x16>)
  movs r3, #0
 80036ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d0:	e001      	b.n	80036d6 <LoopFillZerobss>

080036d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d4:	3204      	adds	r2, #4

080036d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036d8:	d3fb      	bcc.n	80036d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036da:	f01a fd4b 	bl	801e174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036de:	f7fe fd00 	bl	80020e2 <main>

080036e2 <LoopForever>:

LoopForever:
    b LoopForever
 80036e2:	e7fe      	b.n	80036e2 <LoopForever>
  ldr   r0, =_estack
 80036e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80036e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036ec:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 80036f0:	08021bcc 	.word	0x08021bcc
  ldr r2, =_sbss
 80036f4:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 80036f8:	20002664 	.word	0x20002664

080036fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036fc:	e7fe      	b.n	80036fc <ADC_IRQHandler>

080036fe <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003704:	1d3b      	adds	r3, r7, #4
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	60da      	str	r2, [r3, #12]
 8003710:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003712:	2310      	movs	r3, #16
 8003714:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003716:	2301      	movs	r3, #1
 8003718:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371e:	2303      	movs	r3, #3
 8003720:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	4619      	mov	r1, r3
 8003726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800372a:	f002 f8a7 	bl	800587c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800372e:	2320      	movs	r3, #32
 8003730:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	4619      	mov	r1, r3
 8003736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800373a:	f002 f89f 	bl	800587c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800373e:	2200      	movs	r2, #0
 8003740:	2120      	movs	r1, #32
 8003742:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003746:	f002 fac7 	bl	8005cd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800374a:	2200      	movs	r2, #0
 800374c:	2110      	movs	r1, #16
 800374e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003752:	f002 fac1 	bl	8005cd8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d83f      	bhi.n	80037f0 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003770:	a201      	add	r2, pc, #4	@ (adr r2, 8003778 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003776:	bf00      	nop
 8003778:	08003789 	.word	0x08003789
 800377c:	080037a3 	.word	0x080037a3
 8003780:	080037bd 	.word	0x080037bd
 8003784:	080037d7 	.word	0x080037d7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003788:	2200      	movs	r2, #0
 800378a:	2110      	movs	r1, #16
 800378c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003790:	f002 faa2 	bl	8005cd8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003794:	2200      	movs	r2, #0
 8003796:	2120      	movs	r1, #32
 8003798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800379c:	f002 fa9c 	bl	8005cd8 <HAL_GPIO_WritePin>
      break;      
 80037a0:	e027      	b.n	80037f2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80037a2:	2201      	movs	r2, #1
 80037a4:	2110      	movs	r1, #16
 80037a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037aa:	f002 fa95 	bl	8005cd8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80037ae:	2200      	movs	r2, #0
 80037b0:	2120      	movs	r1, #32
 80037b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037b6:	f002 fa8f 	bl	8005cd8 <HAL_GPIO_WritePin>
      break;
 80037ba:	e01a      	b.n	80037f2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80037bc:	2201      	movs	r2, #1
 80037be:	2110      	movs	r1, #16
 80037c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037c4:	f002 fa88 	bl	8005cd8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80037c8:	2201      	movs	r2, #1
 80037ca:	2120      	movs	r1, #32
 80037cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037d0:	f002 fa82 	bl	8005cd8 <HAL_GPIO_WritePin>
      break;
 80037d4:	e00d      	b.n	80037f2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80037d6:	2200      	movs	r2, #0
 80037d8:	2110      	movs	r1, #16
 80037da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037de:	f002 fa7b 	bl	8005cd8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80037e2:	2201      	movs	r2, #1
 80037e4:	2120      	movs	r1, #32
 80037e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037ea:	f002 fa75 	bl	8005cd8 <HAL_GPIO_WritePin>
      break;
 80037ee:	e000      	b.n	80037f2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80037f0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003800:	2302      	movs	r3, #2
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800380e:	2301      	movs	r3, #1
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 800381c:	2301      	movs	r3, #1
}
 800381e:	4618      	mov	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	4603      	mov	r3, r0
 800382e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003836:	230f      	movs	r3, #15
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	e001      	b.n	8003840 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800383c:	2316      	movs	r3, #22
 800383e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003840:	68fb      	ldr	r3, [r7, #12]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <LL_DBGMCU_EnableDBGSleepMode>:
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003850:	4b04      	ldr	r3, [pc, #16]	@ (8003864 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a03      	ldr	r2, [pc, #12]	@ (8003864 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6053      	str	r3, [r2, #4]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	e0042000 	.word	0xe0042000

08003868 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800386c:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a03      	ldr	r2, [pc, #12]	@ (8003880 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003872:	f043 0302 	orr.w	r3, r3, #2
 8003876:	6053      	str	r3, [r2, #4]
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	e0042000 	.word	0xe0042000

08003884 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003888:	4b04      	ldr	r3, [pc, #16]	@ (800389c <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	4a03      	ldr	r2, [pc, #12]	@ (800389c <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	6053      	str	r3, [r2, #4]
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	e0042000 	.word	0xe0042000

080038a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038aa:	2003      	movs	r0, #3
 80038ac:	f001 f9a0 	bl	8004bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80038b0:	f004 f8b6 	bl	8007a20 <HAL_RCC_GetHCLKFreq>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4a09      	ldr	r2, [pc, #36]	@ (80038dc <HAL_Init+0x3c>)
 80038b8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038ba:	200f      	movs	r0, #15
 80038bc:	f7ff f870 	bl	80029a0 <HAL_InitTick>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	71fb      	strb	r3, [r7, #7]
 80038ca:	e001      	b.n	80038d0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038cc:	f7fe fd6b 	bl	80023a6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038d0:	79fb      	ldrb	r3, [r7, #7]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000000 	.word	0x20000000

080038e0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <HAL_SuspendTick+0x18>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a03      	ldr	r2, [pc, #12]	@ (80038f8 <HAL_SuspendTick+0x18>)
 80038ea:	f023 0302 	bic.w	r3, r3, #2
 80038ee:	6013      	str	r3, [r2, #0]
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	e000e010 	.word	0xe000e010

080038fc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003900:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <HAL_ResumeTick+0x18>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a03      	ldr	r2, [pc, #12]	@ (8003914 <HAL_ResumeTick+0x18>)
 8003906:	f043 0302 	orr.w	r3, r3, #2
 800390a:	6013      	str	r3, [r2, #0]
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	e000e010 	.word	0xe000e010

08003918 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800391c:	4b02      	ldr	r3, [pc, #8]	@ (8003928 <HAL_GetUIDw0+0x10>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	1fff7590 	.word	0x1fff7590

0800392c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003930:	4b02      	ldr	r3, [pc, #8]	@ (800393c <HAL_GetUIDw1+0x10>)
 8003932:	681b      	ldr	r3, [r3, #0]
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr
 800393c:	1fff7594 	.word	0x1fff7594

08003940 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003944:	4b02      	ldr	r3, [pc, #8]	@ (8003950 <HAL_GetUIDw2+0x10>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	1fff7598 	.word	0x1fff7598

08003954 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003958:	f7ff ff78 	bl	800384c <LL_DBGMCU_EnableDBGSleepMode>
}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003964:	f7ff ff80 	bl	8003868 <LL_DBGMCU_EnableDBGStopMode>
}
 8003968:	bf00      	nop
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003970:	f7ff ff88 	bl	8003884 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}

08003978 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	601a      	str	r2, [r3, #0]
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2107      	movs	r1, #7
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	401a      	ands	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	431a      	orrs	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr

080039f2 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2107      	movs	r1, #7
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	210f      	movs	r1, #15
 8003a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	401a      	ands	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0e9b      	lsrs	r3, r3, #26
 8003a6a:	f003 010f 	and.w	r1, r3, #15
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	fa01 f303 	lsl.w	r3, r1, r3
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	401a      	ands	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	0219      	lsls	r1, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	400b      	ands	r3, r1
 8003af2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003af6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003b1a:	f023 0317 	bic.w	r3, r3, #23
 8003b1e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003b40:	f023 0317 	bic.w	r3, r3, #23
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6093      	str	r3, [r2, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b66:	d101      	bne.n	8003b6c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b88:	f023 0317 	bic.w	r3, r3, #23
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bae:	f023 0317 	bic.w	r3, r3, #23
 8003bb2:	f043 0202 	orr.w	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <LL_ADC_IsEnabled+0x18>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <LL_ADC_IsEnabled+0x1a>
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d101      	bne.n	8003c00 <LL_ADC_IsDisableOngoing+0x18>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <LL_ADC_IsDisableOngoing+0x1a>
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c1c:	f023 0317 	bic.w	r3, r3, #23
 8003c20:	f043 0204 	orr.w	r2, r3, #4
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c42:	f023 0317 	bic.w	r3, r3, #23
 8003c46:	f043 0210 	orr.w	r2, r3, #16
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d101      	bne.n	8003c70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e17e      	b.n	8003f9c <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d109      	bne.n	8003cc0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7fd fc6d 	bl	800158c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff44 	bl	8003b52 <LL_ADC_IsInternalRegulatorEnabled>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d115      	bne.n	8003cfc <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff18 	bl	8003b0a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cda:	4b9e      	ldr	r3, [pc, #632]	@ (8003f54 <HAL_ADC_Init+0x2d8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	099b      	lsrs	r3, r3, #6
 8003ce0:	4a9d      	ldr	r2, [pc, #628]	@ (8003f58 <HAL_ADC_Init+0x2dc>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	3301      	adds	r3, #1
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003cee:	e002      	b.n	8003cf6 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f9      	bne.n	8003cf0 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ff26 	bl	8003b52 <LL_ADC_IsInternalRegulatorEnabled>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10d      	bne.n	8003d28 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d10:	f043 0210 	orr.w	r2, r3, #16
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	f043 0201 	orr.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ff93 	bl	8003c58 <LL_ADC_REG_IsConversionOngoing>
 8003d32:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f040 8124 	bne.w	8003f8a <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f040 8120 	bne.w	8003f8a <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d52:	f043 0202 	orr.w	r2, r3, #2
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff ff30 	bl	8003bc4 <LL_ADC_IsEnabled>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f040 80a7 	bne.w	8003eba <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7e1b      	ldrb	r3, [r3, #24]
 8003d74:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d76:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	7e5b      	ldrb	r3, [r3, #25]
 8003d7c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d7e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	7e9b      	ldrb	r3, [r3, #26]
 8003d84:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d86:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d8c:	2a00      	cmp	r2, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_ADC_Init+0x11a>
 8003d90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d94:	e000      	b.n	8003d98 <HAL_ADC_Init+0x11c>
 8003d96:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d98:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d9e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	da04      	bge.n	8003db2 <HAL_ADC_Init+0x136>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003db0:	e001      	b.n	8003db6 <HAL_ADC_Init+0x13a>
 8003db2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8003db6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003dbe:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003dc0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d114      	bne.n	8003dfc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	7e9b      	ldrb	r3, [r3, #26]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	e00b      	b.n	8003dfc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de8:	f043 0220 	orr.w	r2, r3, #32
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d009      	beq.n	8003e18 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e10:	4313      	orrs	r3, r2
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8003e22:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	69b9      	ldr	r1, [r7, #24]
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d111      	bne.n	8003e72 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e5a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003e60:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003e66:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	4b38      	ldr	r3, [pc, #224]	@ (8003f5c <HAL_ADC_Init+0x2e0>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	430b      	orrs	r3, r1
 8003e84:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003e8e:	d014      	beq.n	8003eba <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e98:	d00f      	beq.n	8003eba <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ea2:	d00a      	beq.n	8003eba <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003ea4:	4b2e      	ldr	r3, [pc, #184]	@ (8003f60 <HAL_ADC_Init+0x2e4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003eb4:	492a      	ldr	r1, [pc, #168]	@ (8003f60 <HAL_ADC_Init+0x2e4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	f7ff fd76 	bl	80039b6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4923      	ldr	r1, [pc, #140]	@ (8003f64 <HAL_ADC_Init+0x2e8>)
 8003ed6:	f7ff fd6e 	bl	80039b6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d108      	bne.n	8003ef4 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f062 020f 	orn	r2, r2, #15
 8003ef0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ef2:	e017      	b.n	8003f24 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003efc:	d112      	bne.n	8003f24 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	f003 031c 	and.w	r3, r3, #28
 8003f10:	f06f 020f 	mvn.w	r2, #15
 8003f14:	fa02 f103 	lsl.w	r1, r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fd61 	bl	80039f2 <LL_ADC_GetSamplingTimeCommonChannels>
 8003f30:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d116      	bne.n	8003f68 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f44:	f023 0303 	bic.w	r3, r3, #3
 8003f48:	f043 0201 	orr.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f50:	e023      	b.n	8003f9a <HAL_ADC_Init+0x31e>
 8003f52:	bf00      	nop
 8003f54:	20000000 	.word	0x20000000
 8003f58:	053e2d63 	.word	0x053e2d63
 8003f5c:	1ffffc02 	.word	0x1ffffc02
 8003f60:	40012708 	.word	0x40012708
 8003f64:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6c:	f023 0312 	bic.w	r3, r3, #18
 8003f70:	f043 0210 	orr.w	r2, r3, #16
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7c:	f043 0201 	orr.w	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f88:	e007      	b.n	8003f9a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8e:	f043 0210 	orr.w	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003f9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e07a      	b.n	80040ac <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fba:	f043 0202 	orr.w	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 face 	bl	8004564 <ADC_ConversionStop>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10f      	bne.n	8003ff2 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fb92 	bl	80046fc <ADC_Disable>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fd9f 	bl	8003b30 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8004000:	f023 0303 	bic.w	r3, r3, #3
 8004004:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f240 329f 	movw	r2, #927	@ 0x39f
 800400e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68d9      	ldr	r1, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b26      	ldr	r3, [pc, #152]	@ (80040b4 <HAL_ADC_DeInit+0x110>)
 800401c:	400b      	ands	r3, r1
 800401e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0207 	bic.w	r2, r2, #7
 800402e:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800404c:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800405c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800406c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 800407c:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800407e:	4b0e      	ldr	r3, [pc, #56]	@ (80040b8 <HAL_ADC_DeInit+0x114>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a0d      	ldr	r2, [pc, #52]	@ (80040b8 <HAL_ADC_DeInit+0x114>)
 8004084:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8004088:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd faac 	bl	80015e8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	833e0200 	.word	0x833e0200
 80040b8:	40012708 	.word	0x40012708

080040bc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fdc5 	bl	8003c58 <LL_ADC_REG_IsConversionOngoing>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d132      	bne.n	800413a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_ADC_Start+0x26>
 80040de:	2302      	movs	r3, #2
 80040e0:	e02e      	b.n	8004140 <HAL_ADC_Start+0x84>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fa80 	bl	80045f0 <ADC_Enable>
 80040f0:	4603      	mov	r3, r0
 80040f2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d11a      	bne.n	8004130 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	221c      	movs	r2, #28
 800411a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff fd6f 	bl	8003c0c <LL_ADC_REG_StartConversion>
 800412e:	e006      	b.n	800413e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004138:	e001      	b.n	800413e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800413a:	2302      	movs	r3, #2
 800413c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800413e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_ADC_Stop+0x16>
 800415a:	2302      	movs	r3, #2
 800415c:	e022      	b.n	80041a4 <HAL_ADC_Stop+0x5c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f9fc 	bl	8004564 <ADC_ConversionStop>
 800416c:	4603      	mov	r3, r0
 800416e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d111      	bne.n	800419a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fac0 	bl	80046fc <ADC_Disable>
 800417c:	4603      	mov	r3, r0
 800417e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	f043 0201 	orr.w	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d102      	bne.n	80041c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80041be:	2308      	movs	r3, #8
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	e010      	b.n	80041e6 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	f043 0220 	orr.w	r2, r3, #32
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e077      	b.n	80042d2 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80041e2:	2304      	movs	r3, #4
 80041e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80041e6:	f7fe fbe5 	bl	80029b4 <HAL_GetTick>
 80041ea:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80041ec:	e021      	b.n	8004232 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d01d      	beq.n	8004232 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80041f6:	f7fe fbdd 	bl	80029b4 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <HAL_ADC_PollForConversion+0x60>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d112      	bne.n	8004232 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421e:	f043 0204 	orr.w	r2, r3, #4
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e04f      	b.n	80042d2 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0d6      	beq.n	80041ee <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004244:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fbe6 	bl	8003a22 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d031      	beq.n	80042c0 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7e9b      	ldrb	r3, [r3, #26]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d12d      	bne.n	80042c0 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b08      	cmp	r3, #8
 8004270:	d126      	bne.n	80042c0 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fcee 	bl	8003c58 <LL_ADC_REG_IsConversionOngoing>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d112      	bne.n	80042a8 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 020c 	bic.w	r2, r2, #12
 8004290:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004296:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	f043 0201 	orr.w	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80042a6:	e00b      	b.n	80042c0 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ac:	f043 0220 	orr.w	r2, r3, #32
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b8:	f043 0201 	orr.w	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	7e1b      	ldrb	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d103      	bne.n	80042d0 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	220c      	movs	r2, #12
 80042ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_ADC_ConfigChannel+0x28>
 8004318:	2302      	movs	r3, #2
 800431a:	e110      	b.n	800453e <HAL_ADC_ConfigChannel+0x24a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fc95 	bl	8003c58 <LL_ADC_REG_IsConversionOngoing>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	f040 80f7 	bne.w	8004524 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b02      	cmp	r3, #2
 800433c:	f000 80b1 	beq.w	80044a2 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004348:	d004      	beq.n	8004354 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800434e:	4a7e      	ldr	r2, [pc, #504]	@ (8004548 <HAL_ADC_ConfigChannel+0x254>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d108      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f7ff fb92 	bl	8003a88 <LL_ADC_REG_SetSequencerChAdd>
 8004364:	e041      	b.n	80043ea <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	210f      	movs	r1, #15
 8004374:	fa01 f303 	lsl.w	r3, r1, r3
 8004378:	43db      	mvns	r3, r3
 800437a:	401a      	ands	r2, r3
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004384:	2b00      	cmp	r3, #0
 8004386:	d105      	bne.n	8004394 <HAL_ADC_ConfigChannel+0xa0>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0e9b      	lsrs	r3, r3, #26
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	e011      	b.n	80043b8 <HAL_ADC_ConfigChannel+0xc4>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80043ac:	2320      	movs	r3, #32
 80043ae:	e003      	b.n	80043b8 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	6839      	ldr	r1, [r7, #0]
 80043ba:	6849      	ldr	r1, [r1, #4]
 80043bc:	f001 011f 	and.w	r1, r1, #31
 80043c0:	408b      	lsls	r3, r1
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	089b      	lsrs	r3, r3, #2
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d808      	bhi.n	80043ea <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	f7ff fb2e 	bl	8003a46 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6819      	ldr	r1, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f7ff fb6b 	bl	8003ad2 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f280 8097 	bge.w	8004534 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004406:	4851      	ldr	r0, [pc, #324]	@ (800454c <HAL_ADC_ConfigChannel+0x258>)
 8004408:	f7ff fac8 	bl	800399c <LL_ADC_GetCommonPathInternalCh>
 800440c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a4f      	ldr	r2, [pc, #316]	@ (8004550 <HAL_ADC_ConfigChannel+0x25c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d120      	bne.n	800445a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800441e:	2b00      	cmp	r3, #0
 8004420:	d11b      	bne.n	800445a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004428:	4619      	mov	r1, r3
 800442a:	4848      	ldr	r0, [pc, #288]	@ (800454c <HAL_ADC_ConfigChannel+0x258>)
 800442c:	f7ff faa4 	bl	8003978 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004430:	4b48      	ldr	r3, [pc, #288]	@ (8004554 <HAL_ADC_ConfigChannel+0x260>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	099b      	lsrs	r3, r3, #6
 8004436:	4a48      	ldr	r2, [pc, #288]	@ (8004558 <HAL_ADC_ConfigChannel+0x264>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	4613      	mov	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800444a:	e002      	b.n	8004452 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	3b01      	subs	r3, #1
 8004450:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f9      	bne.n	800444c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004458:	e06c      	b.n	8004534 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a3f      	ldr	r2, [pc, #252]	@ (800455c <HAL_ADC_ConfigChannel+0x268>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d10c      	bne.n	800447e <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d107      	bne.n	800447e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004474:	4619      	mov	r1, r3
 8004476:	4835      	ldr	r0, [pc, #212]	@ (800454c <HAL_ADC_ConfigChannel+0x258>)
 8004478:	f7ff fa7e 	bl	8003978 <LL_ADC_SetCommonPathInternalCh>
 800447c:	e05a      	b.n	8004534 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a37      	ldr	r2, [pc, #220]	@ (8004560 <HAL_ADC_ConfigChannel+0x26c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d155      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800448e:	2b00      	cmp	r3, #0
 8004490:	d150      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004498:	4619      	mov	r1, r3
 800449a:	482c      	ldr	r0, [pc, #176]	@ (800454c <HAL_ADC_ConfigChannel+0x258>)
 800449c:	f7ff fa6c 	bl	8003978 <LL_ADC_SetCommonPathInternalCh>
 80044a0:	e048      	b.n	8004534 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044aa:	d004      	beq.n	80044b6 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044b0:	4a25      	ldr	r2, [pc, #148]	@ (8004548 <HAL_ADC_ConfigChannel+0x254>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d107      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f7ff faf3 	bl	8003aac <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	da32      	bge.n	8004534 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044ce:	481f      	ldr	r0, [pc, #124]	@ (800454c <HAL_ADC_ConfigChannel+0x258>)
 80044d0:	f7ff fa64 	bl	800399c <LL_ADC_GetCommonPathInternalCh>
 80044d4:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1d      	ldr	r2, [pc, #116]	@ (8004550 <HAL_ADC_ConfigChannel+0x25c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d107      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80044e6:	4619      	mov	r1, r3
 80044e8:	4818      	ldr	r0, [pc, #96]	@ (800454c <HAL_ADC_ConfigChannel+0x258>)
 80044ea:	f7ff fa45 	bl	8003978 <LL_ADC_SetCommonPathInternalCh>
 80044ee:	e021      	b.n	8004534 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a19      	ldr	r2, [pc, #100]	@ (800455c <HAL_ADC_ConfigChannel+0x268>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d107      	bne.n	800450a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004500:	4619      	mov	r1, r3
 8004502:	4812      	ldr	r0, [pc, #72]	@ (800454c <HAL_ADC_ConfigChannel+0x258>)
 8004504:	f7ff fa38 	bl	8003978 <LL_ADC_SetCommonPathInternalCh>
 8004508:	e014      	b.n	8004534 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a14      	ldr	r2, [pc, #80]	@ (8004560 <HAL_ADC_ConfigChannel+0x26c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d10f      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800451a:	4619      	mov	r1, r3
 800451c:	480b      	ldr	r0, [pc, #44]	@ (800454c <HAL_ADC_ConfigChannel+0x258>)
 800451e:	f7ff fa2b 	bl	8003978 <LL_ADC_SetCommonPathInternalCh>
 8004522:	e007      	b.n	8004534 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004528:	f043 0220 	orr.w	r2, r3, #32
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800453c:	7ffb      	ldrb	r3, [r7, #31]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	80000004 	.word	0x80000004
 800454c:	40012708 	.word	0x40012708
 8004550:	b0001000 	.word	0xb0001000
 8004554:	20000000 	.word	0x20000000
 8004558:	053e2d63 	.word	0x053e2d63
 800455c:	b8004000 	.word	0xb8004000
 8004560:	b4002000 	.word	0xb4002000

08004564 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fb71 	bl	8003c58 <LL_ADC_REG_IsConversionOngoing>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d033      	beq.n	80045e4 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fb31 	bl	8003be8 <LL_ADC_IsDisableOngoing>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fb4e 	bl	8003c32 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004596:	f7fe fa0d 	bl	80029b4 <HAL_GetTick>
 800459a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800459c:	e01b      	b.n	80045d6 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800459e:	f7fe fa09 	bl	80029b4 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d914      	bls.n	80045d6 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00d      	beq.n	80045d6 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045be:	f043 0210 	orr.w	r2, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ca:	f043 0201 	orr.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e007      	b.n	80045e6 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1dc      	bne.n	800459e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff fadf 	bl	8003bc4 <LL_ADC_IsEnabled>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d169      	bne.n	80046e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	4b36      	ldr	r3, [pc, #216]	@ (80046ec <ADC_Enable+0xfc>)
 8004614:	4013      	ands	r3, r2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461e:	f043 0210 	orr.w	r2, r3, #16
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	f043 0201 	orr.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e055      	b.n	80046e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fa9c 	bl	8003b78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004640:	482b      	ldr	r0, [pc, #172]	@ (80046f0 <ADC_Enable+0x100>)
 8004642:	f7ff f9ab 	bl	800399c <LL_ADC_GetCommonPathInternalCh>
 8004646:	4603      	mov	r3, r0
 8004648:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00f      	beq.n	8004670 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004650:	4b28      	ldr	r3, [pc, #160]	@ (80046f4 <ADC_Enable+0x104>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	099b      	lsrs	r3, r3, #6
 8004656:	4a28      	ldr	r2, [pc, #160]	@ (80046f8 <ADC_Enable+0x108>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	099b      	lsrs	r3, r3, #6
 800465e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004660:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004662:	e002      	b.n	800466a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	3b01      	subs	r3, #1
 8004668:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f9      	bne.n	8004664 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	7e5b      	ldrb	r3, [r3, #25]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d033      	beq.n	80046e0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004678:	f7fe f99c 	bl	80029b4 <HAL_GetTick>
 800467c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800467e:	e028      	b.n	80046d2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fa9d 	bl	8003bc4 <LL_ADC_IsEnabled>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d104      	bne.n	800469a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fa6f 	bl	8003b78 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800469a:	f7fe f98b 	bl	80029b4 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d914      	bls.n	80046d2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d00d      	beq.n	80046d2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ba:	f043 0210 	orr.w	r2, r3, #16
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c6:	f043 0201 	orr.w	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e007      	b.n	80046e2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d1cf      	bne.n	8004680 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	80000017 	.word	0x80000017
 80046f0:	40012708 	.word	0x40012708
 80046f4:	20000000 	.word	0x20000000
 80046f8:	053e2d63 	.word	0x053e2d63

080046fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fa6d 	bl	8003be8 <LL_ADC_IsDisableOngoing>
 800470e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff fa55 	bl	8003bc4 <LL_ADC_IsEnabled>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d047      	beq.n	80047b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d144      	bne.n	80047b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 0305 	and.w	r3, r3, #5
 8004730:	2b01      	cmp	r3, #1
 8004732:	d10c      	bne.n	800474e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fa30 	bl	8003b9e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2203      	movs	r2, #3
 8004744:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004746:	f7fe f935 	bl	80029b4 <HAL_GetTick>
 800474a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800474c:	e029      	b.n	80047a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004752:	f043 0210 	orr.w	r2, r3, #16
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475e:	f043 0201 	orr.w	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e023      	b.n	80047b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800476a:	f7fe f923 	bl	80029b4 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d914      	bls.n	80047a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00d      	beq.n	80047a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478a:	f043 0210 	orr.w	r2, r3, #16
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	f043 0201 	orr.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e007      	b.n	80047b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1dc      	bne.n	800476a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <LL_ADC_SetCalibrationFactor>:
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047ca:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <LL_ADC_GetCalibrationFactor>:
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr

080047fe <LL_ADC_Enable>:
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800480e:	f023 0317 	bic.w	r3, r3, #23
 8004812:	f043 0201 	orr.w	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	609a      	str	r2, [r3, #8]
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <LL_ADC_Disable>:
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004834:	f023 0317 	bic.w	r3, r3, #23
 8004838:	f043 0202 	orr.w	r2, r3, #2
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	609a      	str	r2, [r3, #8]
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr

0800484a <LL_ADC_IsEnabled>:
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <LL_ADC_IsEnabled+0x18>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <LL_ADC_IsEnabled+0x1a>
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr

0800486e <LL_ADC_StartCalibration>:
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800487e:	f023 0317 	bic.w	r3, r3, #23
 8004882:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	609a      	str	r2, [r3, #8]
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <LL_ADC_IsCalibrationOnGoing>:
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048a8:	d101      	bne.n	80048ae <LL_ADC_IsCalibrationOnGoing+0x1a>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b088      	sub	sp, #32
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_ADCEx_Calibration_Start+0x1e>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e0b9      	b.n	8004a4c <HAL_ADCEx_Calibration_Start+0x192>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff ff0b 	bl	80046fc <ADC_Disable>
 80048e6:	4603      	mov	r3, r0
 80048e8:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff ffab 	bl	800484a <LL_ADC_IsEnabled>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f040 809d 	bne.w	8004a36 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004900:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004904:	f043 0202 	orr.w	r2, r3, #2
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	f248 0303 	movw	r3, #32771	@ 0x8003
 8004916:	4013      	ands	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004928:	f023 0303 	bic.w	r3, r3, #3
 800492c:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	e02e      	b.n	8004992 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff98 	bl	800486e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800493e:	e014      	b.n	800496a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	3301      	adds	r3, #1
 8004944:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 800494c:	d30d      	bcc.n	800496a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004952:	f023 0312 	bic.w	r3, r3, #18
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e070      	b.n	8004a4c <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff ff90 	bl	8004894 <LL_ADC_IsCalibrationOnGoing>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e2      	bne.n	8004940 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff ff2f 	bl	80047e2 <LL_ADC_GetCalibrationFactor>
 8004984:	4602      	mov	r2, r0
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	4413      	add	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	3301      	adds	r3, #1
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	2b07      	cmp	r3, #7
 8004996:	d9cd      	bls.n	8004934 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff ff29 	bl	80047fe <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69b9      	ldr	r1, [r7, #24]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff ff01 	bl	80047ba <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff ff31 	bl	8004824 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049c2:	f7fd fff7 	bl	80029b4 <HAL_GetTick>
 80049c6:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80049c8:	e01c      	b.n	8004a04 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049ca:	f7fd fff3 	bl	80029b4 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d915      	bls.n	8004a04 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff ff34 	bl	800484a <LL_ADC_IsEnabled>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00d      	beq.n	8004a04 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ec:	f043 0210 	orr.w	r2, r3, #16
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f8:	f043 0201 	orr.w	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e023      	b.n	8004a4c <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff ff1e 	bl	800484a <LL_ADC_IsEnabled>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1da      	bne.n	80049ca <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68d9      	ldr	r1, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a28:	f023 0303 	bic.w	r3, r3, #3
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a34:	e005      	b.n	8004a42 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3a:	f043 0210 	orr.w	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3720      	adds	r7, #32
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a64:	4b0c      	ldr	r3, [pc, #48]	@ (8004a98 <__NVIC_SetPriorityGrouping+0x44>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a70:	4013      	ands	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a86:	4a04      	ldr	r2, [pc, #16]	@ (8004a98 <__NVIC_SetPriorityGrouping+0x44>)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	60d3      	str	r3, [r2, #12]
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	e000ed00 	.word	0xe000ed00

08004a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aa0:	4b04      	ldr	r3, [pc, #16]	@ (8004ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	0a1b      	lsrs	r3, r3, #8
 8004aa6:	f003 0307 	and.w	r3, r3, #7
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	e000ed00 	.word	0xe000ed00

08004ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	db0b      	blt.n	8004ae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	f003 021f 	and.w	r2, r3, #31
 8004ad0:	4906      	ldr	r1, [pc, #24]	@ (8004aec <__NVIC_EnableIRQ+0x34>)
 8004ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	2001      	movs	r0, #1
 8004ada:	fa00 f202 	lsl.w	r2, r0, r2
 8004ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	e000e100 	.word	0xe000e100

08004af0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	db12      	blt.n	8004b28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	f003 021f 	and.w	r2, r3, #31
 8004b08:	490a      	ldr	r1, [pc, #40]	@ (8004b34 <__NVIC_DisableIRQ+0x44>)
 8004b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	2001      	movs	r0, #1
 8004b12:	fa00 f202 	lsl.w	r2, r0, r2
 8004b16:	3320      	adds	r3, #32
 8004b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b1c:	f3bf 8f4f 	dsb	sy
}
 8004b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b22:	f3bf 8f6f 	isb	sy
}
 8004b26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e000e100 	.word	0xe000e100

08004b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	6039      	str	r1, [r7, #0]
 8004b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	db0a      	blt.n	8004b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	490c      	ldr	r1, [pc, #48]	@ (8004b84 <__NVIC_SetPriority+0x4c>)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	0112      	lsls	r2, r2, #4
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b60:	e00a      	b.n	8004b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	4908      	ldr	r1, [pc, #32]	@ (8004b88 <__NVIC_SetPriority+0x50>)
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	3b04      	subs	r3, #4
 8004b70:	0112      	lsls	r2, r2, #4
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	440b      	add	r3, r1
 8004b76:	761a      	strb	r2, [r3, #24]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	e000e100 	.word	0xe000e100
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b089      	sub	sp, #36	@ 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f1c3 0307 	rsb	r3, r3, #7
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	bf28      	it	cs
 8004baa:	2304      	movcs	r3, #4
 8004bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d902      	bls.n	8004bbc <NVIC_EncodePriority+0x30>
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3b03      	subs	r3, #3
 8004bba:	e000      	b.n	8004bbe <NVIC_EncodePriority+0x32>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	43da      	mvns	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	401a      	ands	r2, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	43d9      	mvns	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	4313      	orrs	r3, r2
         );
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3724      	adds	r7, #36	@ 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff ff2b 	bl	8004a54 <__NVIC_SetPriorityGrouping>
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c14:	f7ff ff42 	bl	8004a9c <__NVIC_GetPriorityGrouping>
 8004c18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f7ff ffb4 	bl	8004b8c <NVIC_EncodePriority>
 8004c24:	4602      	mov	r2, r0
 8004c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ff83 	bl	8004b38 <__NVIC_SetPriority>
}
 8004c32:	bf00      	nop
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	4603      	mov	r3, r0
 8004c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff35 	bl	8004ab8 <__NVIC_EnableIRQ>
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff ff43 	bl	8004af0 <__NVIC_DisableIRQ>
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e08e      	b.n	8004da4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	4b47      	ldr	r3, [pc, #284]	@ (8004dac <HAL_DMA_Init+0x138>)
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d80f      	bhi.n	8004cb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	4b45      	ldr	r3, [pc, #276]	@ (8004db0 <HAL_DMA_Init+0x13c>)
 8004c9a:	4413      	add	r3, r2
 8004c9c:	4a45      	ldr	r2, [pc, #276]	@ (8004db4 <HAL_DMA_Init+0x140>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	009a      	lsls	r2, r3, #2
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a42      	ldr	r2, [pc, #264]	@ (8004db8 <HAL_DMA_Init+0x144>)
 8004cae:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cb0:	e00e      	b.n	8004cd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	4b40      	ldr	r3, [pc, #256]	@ (8004dbc <HAL_DMA_Init+0x148>)
 8004cba:	4413      	add	r3, r2
 8004cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8004db4 <HAL_DMA_Init+0x140>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	009a      	lsls	r2, r3, #2
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8004dc0 <HAL_DMA_Init+0x14c>)
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cea:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6819      	ldr	r1, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fb24 	bl	8005370 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d30:	d102      	bne.n	8004d38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d44:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d4e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <HAL_DMA_Init+0x106>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d80c      	bhi.n	8004d7a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fb4d 	bl	8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d76:	605a      	str	r2, [r3, #4]
 8004d78:	e008      	b.n	8004d8c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40020407 	.word	0x40020407
 8004db0:	bffdfff8 	.word	0xbffdfff8
 8004db4:	cccccccd 	.word	0xcccccccd
 8004db8:	40020000 	.word	0x40020000
 8004dbc:	bffdfbf8 	.word	0xbffdfbf8
 8004dc0:	40020400 	.word	0x40020400

08004dc4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e07b      	b.n	8004ece <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0201 	bic.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	4b3a      	ldr	r3, [pc, #232]	@ (8004ed8 <HAL_DMA_DeInit+0x114>)
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d80f      	bhi.n	8004e12 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	4b38      	ldr	r3, [pc, #224]	@ (8004edc <HAL_DMA_DeInit+0x118>)
 8004dfa:	4413      	add	r3, r2
 8004dfc:	4a38      	ldr	r2, [pc, #224]	@ (8004ee0 <HAL_DMA_DeInit+0x11c>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	009a      	lsls	r2, r3, #2
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a35      	ldr	r2, [pc, #212]	@ (8004ee4 <HAL_DMA_DeInit+0x120>)
 8004e0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e10:	e00e      	b.n	8004e30 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	4b33      	ldr	r3, [pc, #204]	@ (8004ee8 <HAL_DMA_DeInit+0x124>)
 8004e1a:	4413      	add	r3, r2
 8004e1c:	4a30      	ldr	r2, [pc, #192]	@ (8004ee0 <HAL_DMA_DeInit+0x11c>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	091b      	lsrs	r3, r3, #4
 8004e24:	009a      	lsls	r2, r3, #2
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004eec <HAL_DMA_DeInit+0x128>)
 8004e2e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3c:	f003 021c 	and.w	r2, r3, #28
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e44:	2101      	movs	r1, #1
 8004e46:	fa01 f202 	lsl.w	r2, r1, r2
 8004e4a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fa8f 	bl	8005370 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e62:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00f      	beq.n	8004e8c <HAL_DMA_DeInit+0xc8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d80b      	bhi.n	8004e8c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fac3 	bl	8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e8a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40020407 	.word	0x40020407
 8004edc:	bffdfff8 	.word	0xbffdfff8
 8004ee0:	cccccccd 	.word	0xcccccccd
 8004ee4:	40020000 	.word	0x40020000
 8004ee8:	bffdfbf8 	.word	0xbffdfbf8
 8004eec:	40020400 	.word	0x40020400

08004ef0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_DMA_Start_IT+0x20>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e069      	b.n	8004fe4 <HAL_DMA_Start_IT+0xf4>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d155      	bne.n	8004fd0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0201 	bic.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f9d3 	bl	80052f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d008      	beq.n	8004f68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 020e 	orr.w	r2, r2, #14
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e00f      	b.n	8004f88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0204 	bic.w	r2, r2, #4
 8004f76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 020a 	orr.w	r2, r2, #10
 8004f86:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fa4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fbc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0201 	orr.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	e008      	b.n	8004fe2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2280      	movs	r2, #128	@ 0x80
 8004fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e04f      	b.n	800509e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d008      	beq.n	800501c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2204      	movs	r2, #4
 800500e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e040      	b.n	800509e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 020e 	bic.w	r2, r2, #14
 800502a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005036:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800503a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0201 	bic.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005050:	f003 021c 	and.w	r2, r3, #28
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005058:	2101      	movs	r1, #1
 800505a:	fa01 f202 	lsl.w	r2, r1, r2
 800505e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005068:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00c      	beq.n	800508c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005080:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800508a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr

080050a8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d005      	beq.n	80050cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2204      	movs	r2, #4
 80050c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
 80050ca:	e047      	b.n	800515c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 020e 	bic.w	r2, r2, #14
 80050da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005100:	f003 021c 	and.w	r2, r3, #28
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005108:	2101      	movs	r1, #1
 800510a:	fa01 f202 	lsl.w	r2, r1, r2
 800510e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005118:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00c      	beq.n	800513c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800512c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005130:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800513a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
    }
  }
  return status;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005184:	f003 031c 	and.w	r3, r3, #28
 8005188:	2204      	movs	r2, #4
 800518a:	409a      	lsls	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4013      	ands	r3, r2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d027      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x7c>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d022      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d107      	bne.n	80051bc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0204 	bic.w	r2, r2, #4
 80051ba:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c0:	f003 021c 	and.w	r2, r3, #28
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	2104      	movs	r1, #4
 80051ca:	fa01 f202 	lsl.w	r2, r1, r2
 80051ce:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 8081 	beq.w	80052dc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80051e2:	e07b      	b.n	80052dc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e8:	f003 031c 	and.w	r3, r3, #28
 80051ec:	2202      	movs	r2, #2
 80051ee:	409a      	lsls	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d03d      	beq.n	8005274 <HAL_DMA_IRQHandler+0x10c>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d038      	beq.n	8005274 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10b      	bne.n	8005228 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 020a 	bic.w	r2, r2, #10
 800521e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	4b2e      	ldr	r3, [pc, #184]	@ (80052e8 <HAL_DMA_IRQHandler+0x180>)
 8005230:	429a      	cmp	r2, r3
 8005232:	d909      	bls.n	8005248 <HAL_DMA_IRQHandler+0xe0>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005238:	f003 031c 	and.w	r3, r3, #28
 800523c:	4a2b      	ldr	r2, [pc, #172]	@ (80052ec <HAL_DMA_IRQHandler+0x184>)
 800523e:	2102      	movs	r1, #2
 8005240:	fa01 f303 	lsl.w	r3, r1, r3
 8005244:	6053      	str	r3, [r2, #4]
 8005246:	e008      	b.n	800525a <HAL_DMA_IRQHandler+0xf2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524c:	f003 031c 	and.w	r3, r3, #28
 8005250:	4a27      	ldr	r2, [pc, #156]	@ (80052f0 <HAL_DMA_IRQHandler+0x188>)
 8005252:	2102      	movs	r1, #2
 8005254:	fa01 f303 	lsl.w	r3, r1, r3
 8005258:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d038      	beq.n	80052dc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005272:	e033      	b.n	80052dc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005278:	f003 031c 	and.w	r3, r3, #28
 800527c:	2208      	movs	r2, #8
 800527e:	409a      	lsls	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4013      	ands	r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d02a      	beq.n	80052de <HAL_DMA_IRQHandler+0x176>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d025      	beq.n	80052de <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 020e 	bic.w	r2, r2, #14
 80052a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a6:	f003 021c 	and.w	r2, r3, #28
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ae:	2101      	movs	r1, #1
 80052b0:	fa01 f202 	lsl.w	r2, r1, r2
 80052b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d004      	beq.n	80052de <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052dc:	bf00      	nop
 80052de:	bf00      	nop
}
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40020080 	.word	0x40020080
 80052ec:	40020400 	.word	0x40020400
 80052f0:	40020000 	.word	0x40020000

080052f4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800530a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005310:	2b00      	cmp	r3, #0
 8005312:	d004      	beq.n	800531e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800531c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005322:	f003 021c 	and.w	r2, r3, #28
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	2101      	movs	r1, #1
 800532c:	fa01 f202 	lsl.w	r2, r1, r2
 8005330:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b10      	cmp	r3, #16
 8005340:	d108      	bne.n	8005354 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005352:	e007      	b.n	8005364 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	60da      	str	r2, [r3, #12]
}
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr
	...

08005370 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	4b1c      	ldr	r3, [pc, #112]	@ (80053f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005380:	429a      	cmp	r2, r3
 8005382:	d813      	bhi.n	80053ac <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005388:	089b      	lsrs	r3, r3, #2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005390:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	3b08      	subs	r3, #8
 80053a0:	4a14      	ldr	r2, [pc, #80]	@ (80053f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	091b      	lsrs	r3, r3, #4
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e011      	b.n	80053d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b0:	089b      	lsrs	r3, r3, #2
 80053b2:	009a      	lsls	r2, r3, #2
 80053b4:	4b10      	ldr	r3, [pc, #64]	@ (80053f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80053b6:	4413      	add	r3, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	3b08      	subs	r3, #8
 80053c4:	4a0b      	ldr	r2, [pc, #44]	@ (80053f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	091b      	lsrs	r3, r3, #4
 80053cc:	3307      	adds	r3, #7
 80053ce:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a0a      	ldr	r2, [pc, #40]	@ (80053fc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80053d4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	2201      	movs	r2, #1
 80053de:	409a      	lsls	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40020407 	.word	0x40020407
 80053f4:	cccccccd 	.word	0xcccccccd
 80053f8:	4002081c 	.word	0x4002081c
 80053fc:	40020880 	.word	0x40020880

08005400 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005410:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4b0a      	ldr	r3, [pc, #40]	@ (8005440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	461a      	mov	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a08      	ldr	r2, [pc, #32]	@ (8005444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005424:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3b01      	subs	r3, #1
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2201      	movs	r2, #1
 8005430:	409a      	lsls	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005436:	bf00      	nop
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	1000823f 	.word	0x1000823f
 8005444:	40020940 	.word	0x40020940

08005448 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005456:	4b1c      	ldr	r3, [pc, #112]	@ (80054c8 <HAL_FLASH_Program+0x80>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_FLASH_Program+0x1a>
 800545e:	2302      	movs	r3, #2
 8005460:	e02d      	b.n	80054be <HAL_FLASH_Program+0x76>
 8005462:	4b19      	ldr	r3, [pc, #100]	@ (80054c8 <HAL_FLASH_Program+0x80>)
 8005464:	2201      	movs	r2, #1
 8005466:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005468:	4b17      	ldr	r3, [pc, #92]	@ (80054c8 <HAL_FLASH_Program+0x80>)
 800546a:	2200      	movs	r2, #0
 800546c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800546e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005472:	f000 f869 	bl	8005548 <FLASH_WaitForLastOperation>
 8005476:	4603      	mov	r3, r0
 8005478:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800547a:	7dfb      	ldrb	r3, [r7, #23]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d11a      	bne.n	80054b6 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d105      	bne.n	8005492 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800548a:	68b8      	ldr	r0, [r7, #8]
 800548c:	f000 f8be 	bl	800560c <FLASH_Program_DoubleWord>
 8005490:	e004      	b.n	800549c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	4619      	mov	r1, r3
 8005496:	68b8      	ldr	r0, [r7, #8]
 8005498:	f000 f8de 	bl	8005658 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800549c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80054a0:	f000 f852 	bl	8005548 <FLASH_WaitForLastOperation>
 80054a4:	4603      	mov	r3, r0
 80054a6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80054a8:	4b08      	ldr	r3, [pc, #32]	@ (80054cc <HAL_FLASH_Program+0x84>)
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	43db      	mvns	r3, r3
 80054b0:	4906      	ldr	r1, [pc, #24]	@ (80054cc <HAL_FLASH_Program+0x84>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80054b6:	4b04      	ldr	r3, [pc, #16]	@ (80054c8 <HAL_FLASH_Program+0x80>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000628 	.word	0x20000628
 80054cc:	58004000 	.word	0x58004000

080054d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80054da:	4b0b      	ldr	r3, [pc, #44]	@ (8005508 <HAL_FLASH_Unlock+0x38>)
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	da0b      	bge.n	80054fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80054e2:	4b09      	ldr	r3, [pc, #36]	@ (8005508 <HAL_FLASH_Unlock+0x38>)
 80054e4:	4a09      	ldr	r2, [pc, #36]	@ (800550c <HAL_FLASH_Unlock+0x3c>)
 80054e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80054e8:	4b07      	ldr	r3, [pc, #28]	@ (8005508 <HAL_FLASH_Unlock+0x38>)
 80054ea:	4a09      	ldr	r2, [pc, #36]	@ (8005510 <HAL_FLASH_Unlock+0x40>)
 80054ec:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80054ee:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <HAL_FLASH_Unlock+0x38>)
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	da01      	bge.n	80054fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80054fa:	79fb      	ldrb	r3, [r7, #7]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	58004000 	.word	0x58004000
 800550c:	45670123 	.word	0x45670123
 8005510:	cdef89ab 	.word	0xcdef89ab

08005514 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800551e:	4b09      	ldr	r3, [pc, #36]	@ (8005544 <HAL_FLASH_Lock+0x30>)
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	4a08      	ldr	r2, [pc, #32]	@ (8005544 <HAL_FLASH_Lock+0x30>)
 8005524:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005528:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800552a:	4b06      	ldr	r3, [pc, #24]	@ (8005544 <HAL_FLASH_Lock+0x30>)
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	db01      	blt.n	8005536 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005536:	79fb      	ldrb	r3, [r7, #7]
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	58004000 	.word	0x58004000

08005548 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005550:	f7fd fa30 	bl	80029b4 <HAL_GetTick>
 8005554:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005556:	e009      	b.n	800556c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005558:	f7fd fa2c 	bl	80029b4 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	429a      	cmp	r2, r3
 8005566:	d801      	bhi.n	800556c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e046      	b.n	80055fa <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800556c:	4b25      	ldr	r3, [pc, #148]	@ (8005604 <FLASH_WaitForLastOperation+0xbc>)
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005578:	d0ee      	beq.n	8005558 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800557a:	4b22      	ldr	r3, [pc, #136]	@ (8005604 <FLASH_WaitForLastOperation+0xbc>)
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800558a:	4b1e      	ldr	r3, [pc, #120]	@ (8005604 <FLASH_WaitForLastOperation+0xbc>)
 800558c:	2201      	movs	r2, #1
 800558e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8005596:	4013      	ands	r3, r2
 8005598:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a0:	d307      	bcc.n	80055b2 <FLASH_WaitForLastOperation+0x6a>
 80055a2:	4b18      	ldr	r3, [pc, #96]	@ (8005604 <FLASH_WaitForLastOperation+0xbc>)
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80055ac:	4915      	ldr	r1, [pc, #84]	@ (8005604 <FLASH_WaitForLastOperation+0xbc>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	618b      	str	r3, [r1, #24]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d004      	beq.n	80055c6 <FLASH_WaitForLastOperation+0x7e>
 80055bc:	4a11      	ldr	r2, [pc, #68]	@ (8005604 <FLASH_WaitForLastOperation+0xbc>)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80055c4:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00e      	beq.n	80055ea <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80055cc:	4a0e      	ldr	r2, [pc, #56]	@ (8005608 <FLASH_WaitForLastOperation+0xc0>)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e011      	b.n	80055fa <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80055d6:	f7fd f9ed 	bl	80029b4 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d801      	bhi.n	80055ea <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e007      	b.n	80055fa <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80055ea:	4b06      	ldr	r3, [pc, #24]	@ (8005604 <FLASH_WaitForLastOperation+0xbc>)
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055f6:	d0ee      	beq.n	80055d6 <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	58004000 	.word	0x58004000
 8005608:	20000628 	.word	0x20000628

0800560c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005618:	4b0e      	ldr	r3, [pc, #56]	@ (8005654 <FLASH_Program_DoubleWord+0x48>)
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	4a0d      	ldr	r2, [pc, #52]	@ (8005654 <FLASH_Program_DoubleWord+0x48>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800562a:	f3bf 8f6f 	isb	sy
}
 800562e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	000a      	movs	r2, r1
 800563e:	2300      	movs	r3, #0
 8005640:	68f9      	ldr	r1, [r7, #12]
 8005642:	3104      	adds	r1, #4
 8005644:	4613      	mov	r3, r2
 8005646:	600b      	str	r3, [r1, #0]
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	58004000 	.word	0x58004000

08005658 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005658:	b480      	push	{r7}
 800565a:	b089      	sub	sp, #36	@ 0x24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005662:	2340      	movs	r3, #64	@ 0x40
 8005664:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800566e:	4b18      	ldr	r3, [pc, #96]	@ (80056d0 <FLASH_Program_Fast+0x78>)
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	4a17      	ldr	r2, [pc, #92]	@ (80056d0 <FLASH_Program_Fast+0x78>)
 8005674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005678:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800567a:	f3ef 8310 	mrs	r3, PRIMASK
 800567e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005680:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005682:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005684:	b672      	cpsid	i
}
 8005686:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	3304      	adds	r3, #4
 8005694:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	3304      	adds	r3, #4
 800569a:	617b      	str	r3, [r7, #20]
    row_index--;
 800569c:	7ffb      	ldrb	r3, [r7, #31]
 800569e:	3b01      	subs	r3, #1
 80056a0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80056a2:	7ffb      	ldrb	r3, [r7, #31]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1ef      	bne.n	8005688 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80056a8:	bf00      	nop
 80056aa:	4b09      	ldr	r3, [pc, #36]	@ (80056d0 <FLASH_Program_Fast+0x78>)
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b6:	d0f8      	beq.n	80056aa <FLASH_Program_Fast+0x52>
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f383 8810 	msr	PRIMASK, r3
}
 80056c2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80056c4:	bf00      	nop
 80056c6:	3724      	adds	r7, #36	@ 0x24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	58004000 	.word	0x58004000

080056d4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80056de:	4b28      	ldr	r3, [pc, #160]	@ (8005780 <HAL_FLASHEx_Erase+0xac>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_FLASHEx_Erase+0x16>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e046      	b.n	8005778 <HAL_FLASHEx_Erase+0xa4>
 80056ea:	4b25      	ldr	r3, [pc, #148]	@ (8005780 <HAL_FLASHEx_Erase+0xac>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80056f0:	4b23      	ldr	r3, [pc, #140]	@ (8005780 <HAL_FLASHEx_Erase+0xac>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80056fa:	f7ff ff25 	bl	8005548 <FLASH_WaitForLastOperation>
 80056fe:	4603      	mov	r3, r0
 8005700:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d133      	bne.n	8005770 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b04      	cmp	r3, #4
 800570e:	d108      	bne.n	8005722 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005710:	f000 f838 	bl	8005784 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005714:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005718:	f7ff ff16 	bl	8005548 <FLASH_WaitForLastOperation>
 800571c:	4603      	mov	r3, r0
 800571e:	73fb      	strb	r3, [r7, #15]
 8005720:	e024      	b.n	800576c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f04f 32ff 	mov.w	r2, #4294967295
 8005728:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	e012      	b.n	8005758 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005732:	68b8      	ldr	r0, [r7, #8]
 8005734:	f000 f836 	bl	80057a4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005738:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800573c:	f7ff ff04 	bl	8005548 <FLASH_WaitForLastOperation>
 8005740:	4603      	mov	r3, r0
 8005742:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	601a      	str	r2, [r3, #0]
          break;
 8005750:	e00a      	b.n	8005768 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	3301      	adds	r3, #1
 8005756:	60bb      	str	r3, [r7, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	4413      	add	r3, r2
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	429a      	cmp	r2, r3
 8005766:	d3e4      	bcc.n	8005732 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005768:	f000 f878 	bl	800585c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800576c:	f000 f832 	bl	80057d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005770:	4b03      	ldr	r3, [pc, #12]	@ (8005780 <HAL_FLASHEx_Erase+0xac>)
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]

  return status;
 8005776:	7bfb      	ldrb	r3, [r7, #15]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	20000628 	.word	0x20000628

08005784 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005788:	4b05      	ldr	r3, [pc, #20]	@ (80057a0 <FLASH_MassErase+0x1c>)
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	4a04      	ldr	r2, [pc, #16]	@ (80057a0 <FLASH_MassErase+0x1c>)
 800578e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005792:	f043 0304 	orr.w	r3, r3, #4
 8005796:	6153      	str	r3, [r2, #20]
#endif
}
 8005798:	bf00      	nop
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr
 80057a0:	58004000 	.word	0x58004000

080057a4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80057ac:	4b08      	ldr	r3, [pc, #32]	@ (80057d0 <FLASH_PageErase+0x2c>)
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4313      	orrs	r3, r2
 80057ba:	4a05      	ldr	r2, [pc, #20]	@ (80057d0 <FLASH_PageErase+0x2c>)
 80057bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	6153      	str	r3, [r2, #20]
#endif
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr
 80057d0:	58004000 	.word	0x58004000

080057d4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80057d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005858 <FLASH_FlushCaches+0x84>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d117      	bne.n	8005814 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80057e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005858 <FLASH_FlushCaches+0x84>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005858 <FLASH_FlushCaches+0x84>)
 80057ea:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057ee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80057f0:	4b19      	ldr	r3, [pc, #100]	@ (8005858 <FLASH_FlushCaches+0x84>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a18      	ldr	r2, [pc, #96]	@ (8005858 <FLASH_FlushCaches+0x84>)
 80057f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	4b16      	ldr	r3, [pc, #88]	@ (8005858 <FLASH_FlushCaches+0x84>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a15      	ldr	r2, [pc, #84]	@ (8005858 <FLASH_FlushCaches+0x84>)
 8005802:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005806:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005808:	4b13      	ldr	r3, [pc, #76]	@ (8005858 <FLASH_FlushCaches+0x84>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a12      	ldr	r2, [pc, #72]	@ (8005858 <FLASH_FlushCaches+0x84>)
 800580e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005812:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005814:	4b10      	ldr	r3, [pc, #64]	@ (8005858 <FLASH_FlushCaches+0x84>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800581c:	2b01      	cmp	r3, #1
 800581e:	d117      	bne.n	8005850 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005820:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <FLASH_FlushCaches+0x84>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a0c      	ldr	r2, [pc, #48]	@ (8005858 <FLASH_FlushCaches+0x84>)
 8005826:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800582a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800582c:	4b0a      	ldr	r3, [pc, #40]	@ (8005858 <FLASH_FlushCaches+0x84>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a09      	ldr	r2, [pc, #36]	@ (8005858 <FLASH_FlushCaches+0x84>)
 8005832:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	4b07      	ldr	r3, [pc, #28]	@ (8005858 <FLASH_FlushCaches+0x84>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a06      	ldr	r2, [pc, #24]	@ (8005858 <FLASH_FlushCaches+0x84>)
 800583e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005842:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005844:	4b04      	ldr	r3, [pc, #16]	@ (8005858 <FLASH_FlushCaches+0x84>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a03      	ldr	r2, [pc, #12]	@ (8005858 <FLASH_FlushCaches+0x84>)
 800584a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800584e:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr
 8005858:	58004000 	.word	0x58004000

0800585c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005860:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <FLASH_AcknowledgePageErase+0x1c>)
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	4a04      	ldr	r2, [pc, #16]	@ (8005878 <FLASH_AcknowledgePageErase+0x1c>)
 8005866:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 800586a:	f023 0302 	bic.w	r3, r3, #2
 800586e:	6153      	str	r3, [r2, #20]
#endif
}
 8005870:	bf00      	nop
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr
 8005878:	58004000 	.word	0x58004000

0800587c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800588a:	e140      	b.n	8005b0e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	2101      	movs	r1, #1
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	fa01 f303 	lsl.w	r3, r1, r3
 8005898:	4013      	ands	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 8132 	beq.w	8005b08 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 0303 	and.w	r3, r3, #3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d005      	beq.n	80058bc <HAL_GPIO_Init+0x40>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d130      	bne.n	800591e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	2203      	movs	r2, #3
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	43db      	mvns	r3, r3
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4013      	ands	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058f2:	2201      	movs	r2, #1
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	091b      	lsrs	r3, r3, #4
 8005908:	f003 0201 	and.w	r2, r3, #1
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2b03      	cmp	r3, #3
 8005928:	d017      	beq.n	800595a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	2203      	movs	r2, #3
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	43db      	mvns	r3, r3
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4013      	ands	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d123      	bne.n	80059ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	08da      	lsrs	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3208      	adds	r2, #8
 800596e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	220f      	movs	r2, #15
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	43db      	mvns	r3, r3
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4013      	ands	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	08da      	lsrs	r2, r3, #3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3208      	adds	r2, #8
 80059a8:	6939      	ldr	r1, [r7, #16]
 80059aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	2203      	movs	r2, #3
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	43db      	mvns	r3, r3
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4013      	ands	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f003 0203 	and.w	r2, r3, #3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 808c 	beq.w	8005b08 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80059f0:	4a4e      	ldr	r2, [pc, #312]	@ (8005b2c <HAL_GPIO_Init+0x2b0>)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	089b      	lsrs	r3, r3, #2
 80059f6:	3302      	adds	r3, #2
 80059f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	2207      	movs	r2, #7
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4013      	ands	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a1a:	d00d      	beq.n	8005a38 <HAL_GPIO_Init+0x1bc>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a44      	ldr	r2, [pc, #272]	@ (8005b30 <HAL_GPIO_Init+0x2b4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <HAL_GPIO_Init+0x1b8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a43      	ldr	r2, [pc, #268]	@ (8005b34 <HAL_GPIO_Init+0x2b8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d101      	bne.n	8005a30 <HAL_GPIO_Init+0x1b4>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e004      	b.n	8005a3a <HAL_GPIO_Init+0x1be>
 8005a30:	2307      	movs	r3, #7
 8005a32:	e002      	b.n	8005a3a <HAL_GPIO_Init+0x1be>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <HAL_GPIO_Init+0x1be>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	f002 0203 	and.w	r2, r2, #3
 8005a40:	0092      	lsls	r2, r2, #2
 8005a42:	4093      	lsls	r3, r2
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a4a:	4938      	ldr	r1, [pc, #224]	@ (8005b2c <HAL_GPIO_Init+0x2b0>)
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	3302      	adds	r3, #2
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a58:	4b37      	ldr	r3, [pc, #220]	@ (8005b38 <HAL_GPIO_Init+0x2bc>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4013      	ands	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005b38 <HAL_GPIO_Init+0x2bc>)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a82:	4b2d      	ldr	r3, [pc, #180]	@ (8005b38 <HAL_GPIO_Init+0x2bc>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005aa6:	4a24      	ldr	r2, [pc, #144]	@ (8005b38 <HAL_GPIO_Init+0x2bc>)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005aac:	4b22      	ldr	r3, [pc, #136]	@ (8005b38 <HAL_GPIO_Init+0x2bc>)
 8005aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4013      	ands	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005ad2:	4a19      	ldr	r2, [pc, #100]	@ (8005b38 <HAL_GPIO_Init+0x2bc>)
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005ada:	4b17      	ldr	r3, [pc, #92]	@ (8005b38 <HAL_GPIO_Init+0x2bc>)
 8005adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005b00:	4a0d      	ldr	r2, [pc, #52]	@ (8005b38 <HAL_GPIO_Init+0x2bc>)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	fa22 f303 	lsr.w	r3, r2, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f47f aeb7 	bne.w	800588c <HAL_GPIO_Init+0x10>
  }
}
 8005b1e:	bf00      	nop
 8005b20:	bf00      	nop
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40010000 	.word	0x40010000
 8005b30:	48000400 	.word	0x48000400
 8005b34:	48000800 	.word	0x48000800
 8005b38:	58000800 	.word	0x58000800

08005b3c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005b4a:	e0af      	b.n	8005cac <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	4013      	ands	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80a2 	beq.w	8005ca6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005b62:	4a59      	ldr	r2, [pc, #356]	@ (8005cc8 <HAL_GPIO_DeInit+0x18c>)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	089b      	lsrs	r3, r3, #2
 8005b68:	3302      	adds	r3, #2
 8005b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	2207      	movs	r2, #7
 8005b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4013      	ands	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b8a:	d00d      	beq.n	8005ba8 <HAL_GPIO_DeInit+0x6c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a4f      	ldr	r2, [pc, #316]	@ (8005ccc <HAL_GPIO_DeInit+0x190>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d007      	beq.n	8005ba4 <HAL_GPIO_DeInit+0x68>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a4e      	ldr	r2, [pc, #312]	@ (8005cd0 <HAL_GPIO_DeInit+0x194>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d101      	bne.n	8005ba0 <HAL_GPIO_DeInit+0x64>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e004      	b.n	8005baa <HAL_GPIO_DeInit+0x6e>
 8005ba0:	2307      	movs	r3, #7
 8005ba2:	e002      	b.n	8005baa <HAL_GPIO_DeInit+0x6e>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <HAL_GPIO_DeInit+0x6e>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	f002 0203 	and.w	r2, r2, #3
 8005bb0:	0092      	lsls	r2, r2, #2
 8005bb2:	4093      	lsls	r3, r2
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d136      	bne.n	8005c28 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005bba:	4b46      	ldr	r3, [pc, #280]	@ (8005cd4 <HAL_GPIO_DeInit+0x198>)
 8005bbc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	4943      	ldr	r1, [pc, #268]	@ (8005cd4 <HAL_GPIO_DeInit+0x198>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005bcc:	4b41      	ldr	r3, [pc, #260]	@ (8005cd4 <HAL_GPIO_DeInit+0x198>)
 8005bce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	493f      	ldr	r1, [pc, #252]	@ (8005cd4 <HAL_GPIO_DeInit+0x198>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005bde:	4b3d      	ldr	r3, [pc, #244]	@ (8005cd4 <HAL_GPIO_DeInit+0x198>)
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	493b      	ldr	r1, [pc, #236]	@ (8005cd4 <HAL_GPIO_DeInit+0x198>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005bec:	4b39      	ldr	r3, [pc, #228]	@ (8005cd4 <HAL_GPIO_DeInit+0x198>)
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	4937      	ldr	r1, [pc, #220]	@ (8005cd4 <HAL_GPIO_DeInit+0x198>)
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f003 0303 	and.w	r3, r3, #3
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	2207      	movs	r2, #7
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8005cc8 <HAL_GPIO_DeInit+0x18c>)
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	089b      	lsrs	r3, r3, #2
 8005c10:	3302      	adds	r3, #2
 8005c12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	43da      	mvns	r2, r3
 8005c1a:	482b      	ldr	r0, [pc, #172]	@ (8005cc8 <HAL_GPIO_DeInit+0x18c>)
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	089b      	lsrs	r3, r3, #2
 8005c20:	400a      	ands	r2, r1
 8005c22:	3302      	adds	r3, #2
 8005c24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	2103      	movs	r1, #3
 8005c32:	fa01 f303 	lsl.w	r3, r1, r3
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	08da      	lsrs	r2, r3, #3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3208      	adds	r2, #8
 8005c44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	220f      	movs	r2, #15
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43db      	mvns	r3, r3
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	08d2      	lsrs	r2, r2, #3
 8005c5c:	4019      	ands	r1, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3208      	adds	r2, #8
 8005c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	2103      	movs	r1, #3
 8005c70:	fa01 f303 	lsl.w	r3, r1, r3
 8005c74:	43db      	mvns	r3, r3
 8005c76:	401a      	ands	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	2101      	movs	r1, #1
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	fa01 f303 	lsl.w	r3, r1, r3
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	401a      	ands	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	2103      	movs	r1, #3
 8005c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	401a      	ands	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f af49 	bne.w	8005b4c <HAL_GPIO_DeInit+0x10>
  }
}
 8005cba:	bf00      	nop
 8005cbc:	bf00      	nop
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	48000400 	.word	0x48000400
 8005cd0:	48000800 	.word	0x48000800
 8005cd4:	58000800 	.word	0x58000800

08005cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ce8:	787b      	ldrb	r3, [r7, #1]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cee:	887a      	ldrh	r2, [r7, #2]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005cf4:	e002      	b.n	8005cfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005cf6:	887a      	ldrh	r2, [r7, #2]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d18:	887a      	ldrh	r2, [r7, #2]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	041a      	lsls	r2, r3, #16
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	43d9      	mvns	r1, r3
 8005d24:	887b      	ldrh	r3, [r7, #2]
 8005d26:	400b      	ands	r3, r1
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	619a      	str	r2, [r3, #24]
}
 8005d2e:	bf00      	nop
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e08d      	b.n	8005e66 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fc f94e 	bl	8002000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2224      	movs	r2, #36	@ 0x24
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0201 	bic.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d107      	bne.n	8005db2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dae:	609a      	str	r2, [r3, #8]
 8005db0:	e006      	b.n	8005dc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005dbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d108      	bne.n	8005dda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dd6:	605a      	str	r2, [r3, #4]
 8005dd8:	e007      	b.n	8005dea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005de8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691a      	ldr	r2, [r3, #16]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69d9      	ldr	r1, [r3, #28]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1a      	ldr	r2, [r3, #32]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	817b      	strh	r3, [r7, #10]
 8005e80:	4613      	mov	r3, r2
 8005e82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	f040 80fd 	bne.w	800608c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_I2C_Master_Transmit+0x30>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e0f6      	b.n	800608e <HAL_I2C_Master_Transmit+0x21e>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ea8:	f7fc fd84 	bl	80029b4 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	2319      	movs	r3, #25
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fa09 	bl	80062d2 <I2C_WaitOnFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e0e1      	b.n	800608e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2221      	movs	r2, #33	@ 0x21
 8005ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	893a      	ldrh	r2, [r7, #8]
 8005eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2bff      	cmp	r3, #255	@ 0xff
 8005efa:	d906      	bls.n	8005f0a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	22ff      	movs	r2, #255	@ 0xff
 8005f00:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005f02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	e007      	b.n	8005f1a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005f14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f18:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d024      	beq.n	8005f6c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f26:	781a      	ldrb	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	3301      	adds	r3, #1
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	8979      	ldrh	r1, [r7, #10]
 8005f5e:	4b4e      	ldr	r3, [pc, #312]	@ (8006098 <HAL_I2C_Master_Transmit+0x228>)
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fc03 	bl	8006770 <I2C_TransferConfig>
 8005f6a:	e066      	b.n	800603a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	8979      	ldrh	r1, [r7, #10]
 8005f74:	4b48      	ldr	r3, [pc, #288]	@ (8006098 <HAL_I2C_Master_Transmit+0x228>)
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fbf8 	bl	8006770 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005f80:	e05b      	b.n	800603a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	6a39      	ldr	r1, [r7, #32]
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 f9fc 	bl	8006384 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e07b      	b.n	800608e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9a:	781a      	ldrb	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d034      	beq.n	800603a <HAL_I2C_Master_Transmit+0x1ca>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d130      	bne.n	800603a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2180      	movs	r1, #128	@ 0x80
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f975 	bl	80062d2 <I2C_WaitOnFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e04d      	b.n	800608e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2bff      	cmp	r3, #255	@ 0xff
 8005ffa:	d90e      	bls.n	800601a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	22ff      	movs	r2, #255	@ 0xff
 8006000:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006006:	b2da      	uxtb	r2, r3
 8006008:	8979      	ldrh	r1, [r7, #10]
 800600a:	2300      	movs	r3, #0
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 fbac 	bl	8006770 <I2C_TransferConfig>
 8006018:	e00f      	b.n	800603a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006028:	b2da      	uxtb	r2, r3
 800602a:	8979      	ldrh	r1, [r7, #10]
 800602c:	2300      	movs	r3, #0
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fb9b 	bl	8006770 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d19e      	bne.n	8005f82 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	6a39      	ldr	r1, [r7, #32]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f9e2 	bl	8006412 <I2C_WaitOnSTOPFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e01a      	b.n	800608e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2220      	movs	r2, #32
 800605e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6859      	ldr	r1, [r3, #4]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b0c      	ldr	r3, [pc, #48]	@ (800609c <HAL_I2C_Master_Transmit+0x22c>)
 800606c:	400b      	ands	r3, r1
 800606e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e000      	b.n	800608e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800608c:	2302      	movs	r3, #2
  }
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	80002000 	.word	0x80002000
 800609c:	fe00e800 	.word	0xfe00e800

080060a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	461a      	mov	r2, r3
 80060ac:	460b      	mov	r3, r1
 80060ae:	817b      	strh	r3, [r7, #10]
 80060b0:	4613      	mov	r3, r2
 80060b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b20      	cmp	r3, #32
 80060be:	f040 80db 	bne.w	8006278 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_I2C_Master_Receive+0x30>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e0d4      	b.n	800627a <HAL_I2C_Master_Receive+0x1da>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060d8:	f7fc fc6c 	bl	80029b4 <HAL_GetTick>
 80060dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	2319      	movs	r3, #25
 80060e4:	2201      	movs	r2, #1
 80060e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f8f1 	bl	80062d2 <I2C_WaitOnFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e0bf      	b.n	800627a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2222      	movs	r2, #34	@ 0x22
 80060fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2210      	movs	r2, #16
 8006106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	893a      	ldrh	r2, [r7, #8]
 800611a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006126:	b29b      	uxth	r3, r3
 8006128:	2bff      	cmp	r3, #255	@ 0xff
 800612a:	d90e      	bls.n	800614a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	22ff      	movs	r2, #255	@ 0xff
 8006130:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006136:	b2da      	uxtb	r2, r3
 8006138:	8979      	ldrh	r1, [r7, #10]
 800613a:	4b52      	ldr	r3, [pc, #328]	@ (8006284 <HAL_I2C_Master_Receive+0x1e4>)
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fb14 	bl	8006770 <I2C_TransferConfig>
 8006148:	e06d      	b.n	8006226 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614e:	b29a      	uxth	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006158:	b2da      	uxtb	r2, r3
 800615a:	8979      	ldrh	r1, [r7, #10]
 800615c:	4b49      	ldr	r3, [pc, #292]	@ (8006284 <HAL_I2C_Master_Receive+0x1e4>)
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 fb03 	bl	8006770 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800616a:	e05c      	b.n	8006226 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	6a39      	ldr	r1, [r7, #32]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f991 	bl	8006498 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e07c      	b.n	800627a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d034      	beq.n	8006226 <HAL_I2C_Master_Receive+0x186>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d130      	bne.n	8006226 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	2200      	movs	r2, #0
 80061cc:	2180      	movs	r1, #128	@ 0x80
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f87f 	bl	80062d2 <I2C_WaitOnFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e04d      	b.n	800627a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2bff      	cmp	r3, #255	@ 0xff
 80061e6:	d90e      	bls.n	8006206 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	22ff      	movs	r2, #255	@ 0xff
 80061ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	8979      	ldrh	r1, [r7, #10]
 80061f6:	2300      	movs	r3, #0
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 fab6 	bl	8006770 <I2C_TransferConfig>
 8006204:	e00f      	b.n	8006226 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006214:	b2da      	uxtb	r2, r3
 8006216:	8979      	ldrh	r1, [r7, #10]
 8006218:	2300      	movs	r3, #0
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 faa5 	bl	8006770 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d19d      	bne.n	800616c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	6a39      	ldr	r1, [r7, #32]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 f8ec 	bl	8006412 <I2C_WaitOnSTOPFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e01a      	b.n	800627a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2220      	movs	r2, #32
 800624a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6859      	ldr	r1, [r3, #4]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	4b0c      	ldr	r3, [pc, #48]	@ (8006288 <HAL_I2C_Master_Receive+0x1e8>)
 8006258:	400b      	ands	r3, r1
 800625a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	e000      	b.n	800627a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006278:	2302      	movs	r3, #2
  }
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	80002400 	.word	0x80002400
 8006288:	fe00e800 	.word	0xfe00e800

0800628c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d103      	bne.n	80062aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2200      	movs	r2, #0
 80062a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d007      	beq.n	80062c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	619a      	str	r2, [r3, #24]
  }
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr

080062d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	603b      	str	r3, [r7, #0]
 80062de:	4613      	mov	r3, r2
 80062e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062e2:	e03b      	b.n	800635c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 f961 	bl	80065b0 <I2C_IsErrorOccurred>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e041      	b.n	800637c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d02d      	beq.n	800635c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006300:	f7fc fb58 	bl	80029b4 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d302      	bcc.n	8006316 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d122      	bne.n	800635c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699a      	ldr	r2, [r3, #24]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4013      	ands	r3, r2
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	429a      	cmp	r2, r3
 8006324:	bf0c      	ite	eq
 8006326:	2301      	moveq	r3, #1
 8006328:	2300      	movne	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	461a      	mov	r2, r3
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	429a      	cmp	r2, r3
 8006332:	d113      	bne.n	800635c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006338:	f043 0220 	orr.w	r2, r3, #32
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e00f      	b.n	800637c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4013      	ands	r3, r2
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	429a      	cmp	r2, r3
 800636a:	bf0c      	ite	eq
 800636c:	2301      	moveq	r3, #1
 800636e:	2300      	movne	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	429a      	cmp	r2, r3
 8006378:	d0b4      	beq.n	80062e4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006390:	e033      	b.n	80063fa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	68b9      	ldr	r1, [r7, #8]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 f90a 	bl	80065b0 <I2C_IsErrorOccurred>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e031      	b.n	800640a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ac:	d025      	beq.n	80063fa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ae:	f7fc fb01 	bl	80029b4 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d302      	bcc.n	80063c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d11a      	bne.n	80063fa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d013      	beq.n	80063fa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d6:	f043 0220 	orr.w	r2, r3, #32
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e007      	b.n	800640a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b02      	cmp	r3, #2
 8006406:	d1c4      	bne.n	8006392 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800641e:	e02f      	b.n	8006480 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f8c3 	bl	80065b0 <I2C_IsErrorOccurred>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e02d      	b.n	8006490 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006434:	f7fc fabe 	bl	80029b4 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	429a      	cmp	r2, r3
 8006442:	d302      	bcc.n	800644a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d11a      	bne.n	8006480 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b20      	cmp	r3, #32
 8006456:	d013      	beq.n	8006480 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645c:	f043 0220 	orr.w	r2, r3, #32
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e007      	b.n	8006490 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b20      	cmp	r3, #32
 800648c:	d1c8      	bne.n	8006420 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80064a8:	e071      	b.n	800658e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	68b9      	ldr	r1, [r7, #8]
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 f87e 	bl	80065b0 <I2C_IsErrorOccurred>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d13b      	bne.n	8006544 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d138      	bne.n	8006544 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d105      	bne.n	80064ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f003 0310 	and.w	r3, r3, #16
 80064f6:	2b10      	cmp	r3, #16
 80064f8:	d121      	bne.n	800653e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2210      	movs	r2, #16
 8006500:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2204      	movs	r2, #4
 8006506:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2220      	movs	r2, #32
 800650e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6859      	ldr	r1, [r3, #4]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	4b24      	ldr	r3, [pc, #144]	@ (80065ac <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800651c:	400b      	ands	r3, r1
 800651e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	75fb      	strb	r3, [r7, #23]
 800653c:	e002      	b.n	8006544 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006544:	f7fc fa36 	bl	80029b4 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	429a      	cmp	r2, r3
 8006552:	d302      	bcc.n	800655a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d119      	bne.n	800658e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d116      	bne.n	800658e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b04      	cmp	r3, #4
 800656c:	d00f      	beq.n	800658e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006572:	f043 0220 	orr.w	r2, r3, #32
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b04      	cmp	r3, #4
 800659a:	d002      	beq.n	80065a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d083      	beq.n	80064aa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	fe00e800 	.word	0xfe00e800

080065b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	@ 0x28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	f003 0310 	and.w	r3, r3, #16
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d068      	beq.n	80066ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2210      	movs	r2, #16
 80065e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065e4:	e049      	b.n	800667a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d045      	beq.n	800667a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065ee:	f7fc f9e1 	bl	80029b4 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d302      	bcc.n	8006604 <I2C_IsErrorOccurred+0x54>
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d13a      	bne.n	800667a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800660e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006616:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006626:	d121      	bne.n	800666c <I2C_IsErrorOccurred+0xbc>
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800662e:	d01d      	beq.n	800666c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006630:	7cfb      	ldrb	r3, [r7, #19]
 8006632:	2b20      	cmp	r3, #32
 8006634:	d01a      	beq.n	800666c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006644:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006646:	f7fc f9b5 	bl	80029b4 <HAL_GetTick>
 800664a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800664c:	e00e      	b.n	800666c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800664e:	f7fc f9b1 	bl	80029b4 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b19      	cmp	r3, #25
 800665a:	d907      	bls.n	800666c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	f043 0320 	orr.w	r3, r3, #32
 8006662:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800666a:	e006      	b.n	800667a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b20      	cmp	r3, #32
 8006678:	d1e9      	bne.n	800664e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b20      	cmp	r3, #32
 8006686:	d003      	beq.n	8006690 <I2C_IsErrorOccurred+0xe0>
 8006688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0aa      	beq.n	80065e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2220      	movs	r2, #32
 800669e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	f043 0304 	orr.w	r3, r3, #4
 80066a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00b      	beq.n	80066d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80066d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f043 0308 	orr.w	r3, r3, #8
 80066e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80066f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	f043 0302 	orr.w	r3, r3, #2
 800670a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800671c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01c      	beq.n	800675e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7ff fdb1 	bl	800628c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6859      	ldr	r1, [r3, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b0d      	ldr	r3, [pc, #52]	@ (800676c <I2C_IsErrorOccurred+0x1bc>)
 8006736:	400b      	ands	r3, r1
 8006738:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	431a      	orrs	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800675e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006762:	4618      	mov	r0, r3
 8006764:	3728      	adds	r7, #40	@ 0x28
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	fe00e800 	.word	0xfe00e800

08006770 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	817b      	strh	r3, [r7, #10]
 800677e:	4613      	mov	r3, r2
 8006780:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006782:	897b      	ldrh	r3, [r7, #10]
 8006784:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006788:	7a7b      	ldrb	r3, [r7, #9]
 800678a:	041b      	lsls	r3, r3, #16
 800678c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006790:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	4313      	orrs	r3, r2
 800679a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800679e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	0d5b      	lsrs	r3, r3, #21
 80067aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80067ae:	4b07      	ldr	r3, [pc, #28]	@ (80067cc <I2C_TransferConfig+0x5c>)
 80067b0:	430b      	orrs	r3, r1
 80067b2:	43db      	mvns	r3, r3
 80067b4:	ea02 0103 	and.w	r1, r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80067c2:	bf00      	nop
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr
 80067cc:	03ff63ff 	.word	0x03ff63ff

080067d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d138      	bne.n	8006858 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e032      	b.n	800685a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2224      	movs	r2, #36	@ 0x24
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0201 	bic.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006822:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6819      	ldr	r1, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2220      	movs	r2, #32
 8006848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	e000      	b.n	800685a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006858:	2302      	movs	r3, #2
  }
}
 800685a:	4618      	mov	r0, r3
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr

08006864 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b20      	cmp	r3, #32
 8006878:	d139      	bne.n	80068ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006884:	2302      	movs	r3, #2
 8006886:	e033      	b.n	80068f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2224      	movs	r2, #36	@ 0x24
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0201 	bic.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80068b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0201 	orr.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	e000      	b.n	80068f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068ee:	2302      	movs	r3, #2
  }
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bc80      	pop	{r7}
 80068f8:	4770      	bx	lr
	...

080068fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006900:	4b04      	ldr	r3, [pc, #16]	@ (8006914 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a03      	ldr	r2, [pc, #12]	@ (8006914 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800690a:	6013      	str	r3, [r2, #0]
}
 800690c:	bf00      	nop
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr
 8006914:	58000400 	.word	0x58000400

08006918 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10c      	bne.n	8006944 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800692a:	4b13      	ldr	r3, [pc, #76]	@ (8006978 <HAL_PWR_EnterSLEEPMode+0x60>)
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006936:	d10d      	bne.n	8006954 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006938:	f000 f83c 	bl	80069b4 <HAL_PWREx_DisableLowPowerRunMode>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d008      	beq.n	8006954 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006942:	e015      	b.n	8006970 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006944:	4b0c      	ldr	r3, [pc, #48]	@ (8006978 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006950:	f000 f822 	bl	8006998 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006954:	4b09      	ldr	r3, [pc, #36]	@ (800697c <HAL_PWR_EnterSLEEPMode+0x64>)
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	4a08      	ldr	r2, [pc, #32]	@ (800697c <HAL_PWR_EnterSLEEPMode+0x64>)
 800695a:	f023 0304 	bic.w	r3, r3, #4
 800695e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006966:	bf30      	wfi
 8006968:	e002      	b.n	8006970 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800696a:	bf40      	sev
    __WFE();
 800696c:	bf20      	wfe
    __WFE();
 800696e:	bf20      	wfe
  }
}
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	58000400 	.word	0x58000400
 800697c:	e000ed00 	.word	0xe000ed00

08006980 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006984:	4b03      	ldr	r3, [pc, #12]	@ (8006994 <HAL_PWREx_GetVoltageRange+0x14>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800698c:	4618      	mov	r0, r3
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr
 8006994:	58000400 	.word	0x58000400

08006998 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800699c:	4b04      	ldr	r3, [pc, #16]	@ (80069b0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a03      	ldr	r2, [pc, #12]	@ (80069b0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80069a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069a6:	6013      	str	r3, [r2, #0]
}
 80069a8:	bf00      	nop
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr
 80069b0:	58000400 	.word	0x58000400

080069b4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80069ba:	4b16      	ldr	r3, [pc, #88]	@ (8006a14 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a15      	ldr	r2, [pc, #84]	@ (8006a14 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80069c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069c4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80069c6:	4b14      	ldr	r3, [pc, #80]	@ (8006a18 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2232      	movs	r2, #50	@ 0x32
 80069cc:	fb02 f303 	mul.w	r3, r2, r3
 80069d0:	4a12      	ldr	r2, [pc, #72]	@ (8006a1c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	0c9b      	lsrs	r3, r3, #18
 80069d8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80069da:	e002      	b.n	80069e2 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3b01      	subs	r3, #1
 80069e0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80069e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a14 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ee:	d102      	bne.n	80069f6 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f2      	bne.n	80069dc <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80069f6:	4b07      	ldr	r3, [pc, #28]	@ (8006a14 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a02:	d101      	bne.n	8006a08 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e000      	b.n	8006a0a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr
 8006a14:	58000400 	.word	0x58000400
 8006a18:	20000000 	.word	0x20000000
 8006a1c:	431bde83 	.word	0x431bde83

08006a20 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006a2a:	4b10      	ldr	r3, [pc, #64]	@ (8006a6c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f023 0307 	bic.w	r3, r3, #7
 8006a32:	4a0e      	ldr	r2, [pc, #56]	@ (8006a6c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006a34:	f043 0302 	orr.w	r3, r3, #2
 8006a38:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a70 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006a70 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006a40:	f043 0304 	orr.w	r3, r3, #4
 8006a44:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006a4c:	bf30      	wfi
 8006a4e:	e002      	b.n	8006a56 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006a50:	bf40      	sev
    __WFE();
 8006a52:	bf20      	wfe
    __WFE();
 8006a54:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006a56:	4b06      	ldr	r3, [pc, #24]	@ (8006a70 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	4a05      	ldr	r2, [pc, #20]	@ (8006a70 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006a5c:	f023 0304 	bic.w	r3, r3, #4
 8006a60:	6113      	str	r3, [r2, #16]
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr
 8006a6c:	58000400 	.word	0x58000400
 8006a70:	e000ed00 	.word	0xe000ed00

08006a74 <LL_PWR_IsEnabledBkUpAccess>:
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006a78:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a84:	d101      	bne.n	8006a8a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e000      	b.n	8006a8c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr
 8006a94:	58000400 	.word	0x58000400

08006a98 <LL_RCC_HSE_EnableTcxo>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006a9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006aa6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006aaa:	6013      	str	r3, [r2, #0]
}
 8006aac:	bf00      	nop
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <LL_RCC_HSE_DisableTcxo>:
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ac2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ac6:	6013      	str	r3, [r2, #0]
}
 8006ac8:	bf00      	nop
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr

08006ad0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ae2:	d101      	bne.n	8006ae8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr

08006af2 <LL_RCC_HSE_Enable>:
{
 8006af2:	b480      	push	{r7}
 8006af4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b04:	6013      	str	r3, [r2, #0]
}
 8006b06:	bf00      	nop
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	4770      	bx	lr

08006b0e <LL_RCC_HSE_Disable>:
{
 8006b0e:	b480      	push	{r7}
 8006b10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b20:	6013      	str	r3, [r2, #0]
}
 8006b22:	bf00      	nop
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr

08006b2a <LL_RCC_HSE_IsReady>:
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b3c:	d101      	bne.n	8006b42 <LL_RCC_HSE_IsReady+0x18>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <LL_RCC_HSE_IsReady+0x1a>
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <LL_RCC_HSI_Enable>:
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b5e:	6013      	str	r3, [r2, #0]
}
 8006b60:	bf00      	nop
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr

08006b68 <LL_RCC_HSI_Disable>:
{
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b7a:	6013      	str	r3, [r2, #0]
}
 8006b7c:	bf00      	nop
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr

08006b84 <LL_RCC_HSI_IsReady>:
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b96:	d101      	bne.n	8006b9c <LL_RCC_HSI_IsReady+0x18>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <LL_RCC_HSI_IsReady+0x1a>
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr

08006ba6 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	061b      	lsls	r3, r3, #24
 8006bbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	604b      	str	r3, [r1, #4]
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	4770      	bx	lr

08006bce <LL_RCC_LSE_IsReady>:
{
 8006bce:	b480      	push	{r7}
 8006bd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d101      	bne.n	8006be6 <LL_RCC_LSE_IsReady+0x18>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <LL_RCC_LSE_IsReady+0x1a>
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr

08006bf0 <LL_RCC_LSI_Enable>:
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c00:	f043 0301 	orr.w	r3, r3, #1
 8006c04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006c08:	bf00      	nop
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr

08006c10 <LL_RCC_LSI_Disable>:
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006c28:	bf00      	nop
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr

08006c30 <LL_RCC_LSI_IsReady>:
{
 8006c30:	b480      	push	{r7}
 8006c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d101      	bne.n	8006c48 <LL_RCC_LSI_IsReady+0x18>
 8006c44:	2301      	movs	r3, #1
 8006c46:	e000      	b.n	8006c4a <LL_RCC_LSI_IsReady+0x1a>
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr

08006c52 <LL_RCC_MSI_Enable>:
{
 8006c52:	b480      	push	{r7}
 8006c54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c60:	f043 0301 	orr.w	r3, r3, #1
 8006c64:	6013      	str	r3, [r2, #0]
}
 8006c66:	bf00      	nop
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr

08006c6e <LL_RCC_MSI_Disable>:
{
 8006c6e:	b480      	push	{r7}
 8006c70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c7c:	f023 0301 	bic.w	r3, r3, #1
 8006c80:	6013      	str	r3, [r2, #0]
}
 8006c82:	bf00      	nop
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc80      	pop	{r7}
 8006c88:	4770      	bx	lr

08006c8a <LL_RCC_MSI_IsReady>:
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d101      	bne.n	8006ca0 <LL_RCC_MSI_IsReady+0x16>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <LL_RCC_MSI_IsReady+0x18>
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr

08006caa <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006caa:	b480      	push	{r7}
 8006cac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0308 	and.w	r3, r3, #8
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d101      	bne.n	8006cc0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e000      	b.n	8006cc2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr

08006cca <LL_RCC_MSI_GetRange>:
{
 8006cca:	b480      	push	{r7}
 8006ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr

08006ce0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr

08006cf8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	021b      	lsls	r3, r3, #8
 8006d0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d12:	4313      	orrs	r3, r2
 8006d14:	604b      	str	r3, [r1, #4]
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bc80      	pop	{r7}
 8006d1e:	4770      	bx	lr

08006d20 <LL_RCC_SetSysClkSource>:
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f023 0203 	bic.w	r2, r3, #3
 8006d32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	608b      	str	r3, [r1, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <LL_RCC_GetSysClkSource>:
{
 8006d46:	b480      	push	{r7}
 8006d48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 030c 	and.w	r3, r3, #12
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr

08006d5c <LL_RCC_SetAHBPrescaler>:
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	608b      	str	r3, [r1, #8]
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr

08006d82 <LL_RCC_SetAHB3Prescaler>:
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d92:	f023 020f 	bic.w	r2, r3, #15
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	091b      	lsrs	r3, r3, #4
 8006d9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr

08006dae <LL_RCC_SetAPB1Prescaler>:
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	608b      	str	r3, [r1, #8]
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <LL_RCC_SetAPB2Prescaler>:
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006de6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	608b      	str	r3, [r1, #8]
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr

08006dfa <LL_RCC_GetAHBPrescaler>:
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <LL_RCC_GetAHB3Prescaler>:
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e18:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr

08006e2a <LL_RCC_GetAPB1Prescaler>:
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr

08006e40 <LL_RCC_GetAPB2Prescaler>:
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006e44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006e56:	b480      	push	{r7}
 8006e58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e68:	6013      	str	r3, [r2, #0]
}
 8006e6a:	bf00      	nop
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006e72:	b480      	push	{r7}
 8006e74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e84:	6013      	str	r3, [r2, #0]
}
 8006e86:	bf00      	nop
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr

08006e8e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ea0:	d101      	bne.n	8006ea6 <LL_RCC_PLL_IsReady+0x18>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <LL_RCC_PLL_IsReady+0x1a>
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bc80      	pop	{r7}
 8006eae:	4770      	bx	lr

08006eb0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr

08006ec8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr

08006ef4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f003 0303 	and.w	r3, r3, #3
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr

08006f0a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f1c:	d101      	bne.n	8006f22 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr

08006f2c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f34:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f40:	d101      	bne.n	8006f46 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006f42:	2301      	movs	r3, #1
 8006f44:	e000      	b.n	8006f48 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr

08006f50 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f62:	d101      	bne.n	8006f68 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr

08006f72 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006f72:	b480      	push	{r7}
 8006f74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f84:	d101      	bne.n	8006f8a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr

08006f94 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e36f      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fa6:	f7ff fece 	bl	8006d46 <LL_RCC_GetSysClkSource>
 8006faa:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fac:	f7ff ffa2 	bl	8006ef4 <LL_RCC_PLL_GetMainSource>
 8006fb0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 80c4 	beq.w	8007148 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x3e>
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	2b0c      	cmp	r3, #12
 8006fca:	d176      	bne.n	80070ba <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d173      	bne.n	80070ba <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e353      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0308 	and.w	r3, r3, #8
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d005      	beq.n	8006ffc <HAL_RCC_OscConfig+0x68>
 8006ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ffa:	e006      	b.n	800700a <HAL_RCC_OscConfig+0x76>
 8006ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007004:	091b      	lsrs	r3, r3, #4
 8007006:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800700a:	4293      	cmp	r3, r2
 800700c:	d222      	bcs.n	8007054 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fd3c 	bl	8007a90 <RCC_SetFlashLatencyFromMSIRange>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e331      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800702c:	f043 0308 	orr.w	r3, r3, #8
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007040:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007044:	4313      	orrs	r3, r2
 8007046:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff fe53 	bl	8006cf8 <LL_RCC_MSI_SetCalibTrimming>
 8007052:	e021      	b.n	8007098 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800705e:	f043 0308 	orr.w	r3, r3, #8
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007072:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007076:	4313      	orrs	r3, r2
 8007078:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff fe3a 	bl	8006cf8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007088:	4618      	mov	r0, r3
 800708a:	f000 fd01 	bl	8007a90 <RCC_SetFlashLatencyFromMSIRange>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e2f6      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007098:	f000 fcc2 	bl	8007a20 <HAL_RCC_GetHCLKFreq>
 800709c:	4603      	mov	r3, r0
 800709e:	4aa7      	ldr	r2, [pc, #668]	@ (800733c <HAL_RCC_OscConfig+0x3a8>)
 80070a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80070a2:	4ba7      	ldr	r3, [pc, #668]	@ (8007340 <HAL_RCC_OscConfig+0x3ac>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fb fc7a 	bl	80029a0 <HAL_InitTick>
 80070ac:	4603      	mov	r3, r0
 80070ae:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80070b0:	7cfb      	ldrb	r3, [r7, #19]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d047      	beq.n	8007146 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80070b6:	7cfb      	ldrb	r3, [r7, #19]
 80070b8:	e2e5      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d02c      	beq.n	800711c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80070c2:	f7ff fdc6 	bl	8006c52 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070c6:	f7fb fc75 	bl	80029b4 <HAL_GetTick>
 80070ca:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070ce:	f7fb fc71 	bl	80029b4 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e2d2      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80070e0:	f7ff fdd3 	bl	8006c8a <LL_RCC_MSI_IsReady>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f1      	beq.n	80070ce <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070f4:	f043 0308 	orr.w	r3, r3, #8
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007108:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800710c:	4313      	orrs	r3, r2
 800710e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff fdef 	bl	8006cf8 <LL_RCC_MSI_SetCalibTrimming>
 800711a:	e015      	b.n	8007148 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800711c:	f7ff fda7 	bl	8006c6e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007120:	f7fb fc48 	bl	80029b4 <HAL_GetTick>
 8007124:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007128:	f7fb fc44 	bl	80029b4 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e2a5      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800713a:	f7ff fda6 	bl	8006c8a <LL_RCC_MSI_IsReady>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1f1      	bne.n	8007128 <HAL_RCC_OscConfig+0x194>
 8007144:	e000      	b.n	8007148 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007146:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d058      	beq.n	8007206 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	2b08      	cmp	r3, #8
 8007158:	d005      	beq.n	8007166 <HAL_RCC_OscConfig+0x1d2>
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	2b0c      	cmp	r3, #12
 800715e:	d108      	bne.n	8007172 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b03      	cmp	r3, #3
 8007164:	d105      	bne.n	8007172 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d14b      	bne.n	8007206 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e289      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8007172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007184:	4313      	orrs	r3, r2
 8007186:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007190:	d102      	bne.n	8007198 <HAL_RCC_OscConfig+0x204>
 8007192:	f7ff fcae 	bl	8006af2 <LL_RCC_HSE_Enable>
 8007196:	e00d      	b.n	80071b4 <HAL_RCC_OscConfig+0x220>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80071a0:	d104      	bne.n	80071ac <HAL_RCC_OscConfig+0x218>
 80071a2:	f7ff fc79 	bl	8006a98 <LL_RCC_HSE_EnableTcxo>
 80071a6:	f7ff fca4 	bl	8006af2 <LL_RCC_HSE_Enable>
 80071aa:	e003      	b.n	80071b4 <HAL_RCC_OscConfig+0x220>
 80071ac:	f7ff fcaf 	bl	8006b0e <LL_RCC_HSE_Disable>
 80071b0:	f7ff fc80 	bl	8006ab4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d012      	beq.n	80071e2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071bc:	f7fb fbfa 	bl	80029b4 <HAL_GetTick>
 80071c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80071c2:	e008      	b.n	80071d6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071c4:	f7fb fbf6 	bl	80029b4 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b64      	cmp	r3, #100	@ 0x64
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e257      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80071d6:	f7ff fca8 	bl	8006b2a <LL_RCC_HSE_IsReady>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0f1      	beq.n	80071c4 <HAL_RCC_OscConfig+0x230>
 80071e0:	e011      	b.n	8007206 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e2:	f7fb fbe7 	bl	80029b4 <HAL_GetTick>
 80071e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80071e8:	e008      	b.n	80071fc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071ea:	f7fb fbe3 	bl	80029b4 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b64      	cmp	r3, #100	@ 0x64
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e244      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80071fc:	f7ff fc95 	bl	8006b2a <LL_RCC_HSE_IsReady>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f1      	bne.n	80071ea <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d046      	beq.n	80072a0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	2b04      	cmp	r3, #4
 8007216:	d005      	beq.n	8007224 <HAL_RCC_OscConfig+0x290>
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	2b0c      	cmp	r3, #12
 800721c:	d10e      	bne.n	800723c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d10b      	bne.n	800723c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e22a      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff fcb6 	bl	8006ba6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800723a:	e031      	b.n	80072a0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d019      	beq.n	8007278 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007244:	f7ff fc82 	bl	8006b4c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007248:	f7fb fbb4 	bl	80029b4 <HAL_GetTick>
 800724c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007250:	f7fb fbb0 	bl	80029b4 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e211      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007262:	f7ff fc8f 	bl	8006b84 <LL_RCC_HSI_IsReady>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0f1      	beq.n	8007250 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff fc98 	bl	8006ba6 <LL_RCC_HSI_SetCalibTrimming>
 8007276:	e013      	b.n	80072a0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007278:	f7ff fc76 	bl	8006b68 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800727c:	f7fb fb9a 	bl	80029b4 <HAL_GetTick>
 8007280:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007282:	e008      	b.n	8007296 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007284:	f7fb fb96 	bl	80029b4 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e1f7      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007296:	f7ff fc75 	bl	8006b84 <LL_RCC_HSI_IsReady>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1f1      	bne.n	8007284 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d06e      	beq.n	800738a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d056      	beq.n	8007362 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80072b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072bc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69da      	ldr	r2, [r3, #28]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d031      	beq.n	8007330 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d006      	beq.n	80072e4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e1d0      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d013      	beq.n	8007316 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80072ee:	f7ff fc8f 	bl	8006c10 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072f2:	f7fb fb5f 	bl	80029b4 <HAL_GetTick>
 80072f6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80072f8:	e008      	b.n	800730c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072fa:	f7fb fb5b 	bl	80029b4 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	2b11      	cmp	r3, #17
 8007306:	d901      	bls.n	800730c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e1bc      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800730c:	f7ff fc90 	bl	8006c30 <LL_RCC_LSI_IsReady>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f1      	bne.n	80072fa <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8007316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800731a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800731e:	f023 0210 	bic.w	r2, r3, #16
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007330:	f7ff fc5e 	bl	8006bf0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007334:	f7fb fb3e 	bl	80029b4 <HAL_GetTick>
 8007338:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800733a:	e00c      	b.n	8007356 <HAL_RCC_OscConfig+0x3c2>
 800733c:	20000000 	.word	0x20000000
 8007340:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007344:	f7fb fb36 	bl	80029b4 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b11      	cmp	r3, #17
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e197      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8007356:	f7ff fc6b 	bl	8006c30 <LL_RCC_LSI_IsReady>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0f1      	beq.n	8007344 <HAL_RCC_OscConfig+0x3b0>
 8007360:	e013      	b.n	800738a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007362:	f7ff fc55 	bl	8006c10 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007366:	f7fb fb25 	bl	80029b4 <HAL_GetTick>
 800736a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800736e:	f7fb fb21 	bl	80029b4 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b11      	cmp	r3, #17
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e182      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007380:	f7ff fc56 	bl	8006c30 <LL_RCC_LSI_IsReady>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1f1      	bne.n	800736e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 80d8 	beq.w	8007548 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007398:	f7ff fb6c 	bl	8006a74 <LL_PWR_IsEnabledBkUpAccess>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d113      	bne.n	80073ca <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80073a2:	f7ff faab 	bl	80068fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073a6:	f7fb fb05 	bl	80029b4 <HAL_GetTick>
 80073aa:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80073ac:	e008      	b.n	80073c0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ae:	f7fb fb01 	bl	80029b4 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d901      	bls.n	80073c0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e162      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80073c0:	f7ff fb58 	bl	8006a74 <LL_PWR_IsEnabledBkUpAccess>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f1      	beq.n	80073ae <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d07b      	beq.n	80074ca <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	2b85      	cmp	r3, #133	@ 0x85
 80073d8:	d003      	beq.n	80073e2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d109      	bne.n	80073f6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80073e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073ee:	f043 0304 	orr.w	r3, r3, #4
 80073f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073f6:	f7fb fadd 	bl	80029b4 <HAL_GetTick>
 80073fa:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007404:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007408:	f043 0301 	orr.w	r3, r3, #1
 800740c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007410:	e00a      	b.n	8007428 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007412:	f7fb facf 	bl	80029b4 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007420:	4293      	cmp	r3, r2
 8007422:	d901      	bls.n	8007428 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e12e      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007428:	f7ff fbd1 	bl	8006bce <LL_RCC_LSE_IsReady>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0ef      	beq.n	8007412 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	2b81      	cmp	r3, #129	@ 0x81
 8007438:	d003      	beq.n	8007442 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	2b85      	cmp	r3, #133	@ 0x85
 8007440:	d121      	bne.n	8007486 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007442:	f7fb fab7 	bl	80029b4 <HAL_GetTick>
 8007446:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800744c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007450:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800745c:	e00a      	b.n	8007474 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800745e:	f7fb faa9 	bl	80029b4 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746c:	4293      	cmp	r3, r2
 800746e:	d901      	bls.n	8007474 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e108      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800747c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0ec      	beq.n	800745e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007484:	e060      	b.n	8007548 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007486:	f7fb fa95 	bl	80029b4 <HAL_GetTick>
 800748a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800748c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007494:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007498:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800749c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074a0:	e00a      	b.n	80074b8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a2:	f7fb fa87 	bl	80029b4 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d901      	bls.n	80074b8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e0e6      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1ec      	bne.n	80074a2 <HAL_RCC_OscConfig+0x50e>
 80074c8:	e03e      	b.n	8007548 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074ca:	f7fb fa73 	bl	80029b4 <HAL_GetTick>
 80074ce:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80074d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074e4:	e00a      	b.n	80074fc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e6:	f7fb fa65 	bl	80029b4 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e0c4      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1ec      	bne.n	80074e6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800750c:	f7fb fa52 	bl	80029b4 <HAL_GetTick>
 8007510:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800751a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800751e:	f023 0301 	bic.w	r3, r3, #1
 8007522:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007526:	e00a      	b.n	800753e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007528:	f7fb fa44 	bl	80029b4 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007536:	4293      	cmp	r3, r2
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e0a3      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800753e:	f7ff fb46 	bl	8006bce <LL_RCC_LSE_IsReady>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1ef      	bne.n	8007528 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8099 	beq.w	8007684 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	2b0c      	cmp	r3, #12
 8007556:	d06c      	beq.n	8007632 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755c:	2b02      	cmp	r3, #2
 800755e:	d14b      	bne.n	80075f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007560:	f7ff fc87 	bl	8006e72 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007564:	f7fb fa26 	bl	80029b4 <HAL_GetTick>
 8007568:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800756a:	e008      	b.n	800757e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800756c:	f7fb fa22 	bl	80029b4 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b0a      	cmp	r3, #10
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e083      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800757e:	f7ff fc86 	bl	8006e8e <LL_RCC_PLL_IsReady>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1f1      	bne.n	800756c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	4b40      	ldr	r3, [pc, #256]	@ (8007690 <HAL_RCC_OscConfig+0x6fc>)
 8007590:	4013      	ands	r3, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800759a:	4311      	orrs	r1, r2
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80075a0:	0212      	lsls	r2, r2, #8
 80075a2:	4311      	orrs	r1, r2
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80075a8:	4311      	orrs	r1, r2
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80075ae:	4311      	orrs	r1, r2
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80075b4:	430a      	orrs	r2, r1
 80075b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075be:	f7ff fc4a 	bl	8006e56 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075d0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d2:	f7fb f9ef 	bl	80029b4 <HAL_GetTick>
 80075d6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80075d8:	e008      	b.n	80075ec <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075da:	f7fb f9eb 	bl	80029b4 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b0a      	cmp	r3, #10
 80075e6:	d901      	bls.n	80075ec <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e04c      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80075ec:	f7ff fc4f 	bl	8006e8e <LL_RCC_PLL_IsReady>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f1      	beq.n	80075da <HAL_RCC_OscConfig+0x646>
 80075f6:	e045      	b.n	8007684 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075f8:	f7ff fc3b 	bl	8006e72 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075fc:	f7fb f9da 	bl	80029b4 <HAL_GetTick>
 8007600:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007604:	f7fb f9d6 	bl	80029b4 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b0a      	cmp	r3, #10
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e037      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007616:	f7ff fc3a 	bl	8006e8e <LL_RCC_PLL_IsReady>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1f1      	bne.n	8007604 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800762a:	4b1a      	ldr	r3, [pc, #104]	@ (8007694 <HAL_RCC_OscConfig+0x700>)
 800762c:	4013      	ands	r3, r2
 800762e:	60cb      	str	r3, [r1, #12]
 8007630:	e028      	b.n	8007684 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007636:	2b01      	cmp	r3, #1
 8007638:	d101      	bne.n	800763e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e023      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800763e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	f003 0203 	and.w	r2, r3, #3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007650:	429a      	cmp	r2, r3
 8007652:	d115      	bne.n	8007680 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800765e:	429a      	cmp	r2, r3
 8007660:	d10e      	bne.n	8007680 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	429a      	cmp	r2, r3
 8007670:	d106      	bne.n	8007680 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767c:	429a      	cmp	r2, r3
 800767e:	d001      	beq.n	8007684 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3720      	adds	r7, #32
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	11c1808c 	.word	0x11c1808c
 8007694:	eefefffc 	.word	0xeefefffc

08007698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e10f      	b.n	80078cc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076ac:	4b89      	ldr	r3, [pc, #548]	@ (80078d4 <HAL_RCC_ClockConfig+0x23c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d91b      	bls.n	80076f2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ba:	4b86      	ldr	r3, [pc, #536]	@ (80078d4 <HAL_RCC_ClockConfig+0x23c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f023 0207 	bic.w	r2, r3, #7
 80076c2:	4984      	ldr	r1, [pc, #528]	@ (80078d4 <HAL_RCC_ClockConfig+0x23c>)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076ca:	f7fb f973 	bl	80029b4 <HAL_GetTick>
 80076ce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d0:	e008      	b.n	80076e4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80076d2:	f7fb f96f 	bl	80029b4 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d901      	bls.n	80076e4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e0f3      	b.n	80078cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076e4:	4b7b      	ldr	r3, [pc, #492]	@ (80078d4 <HAL_RCC_ClockConfig+0x23c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d1ef      	bne.n	80076d2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d016      	beq.n	800772c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff fb2a 	bl	8006d5c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007708:	f7fb f954 	bl	80029b4 <HAL_GetTick>
 800770c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800770e:	e008      	b.n	8007722 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007710:	f7fb f950 	bl	80029b4 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	2b02      	cmp	r3, #2
 800771c:	d901      	bls.n	8007722 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e0d4      	b.n	80078cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007722:	f7ff fbf2 	bl	8006f0a <LL_RCC_IsActiveFlag_HPRE>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0f1      	beq.n	8007710 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007734:	2b00      	cmp	r3, #0
 8007736:	d016      	beq.n	8007766 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff fb20 	bl	8006d82 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007742:	f7fb f937 	bl	80029b4 <HAL_GetTick>
 8007746:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007748:	e008      	b.n	800775c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800774a:	f7fb f933 	bl	80029b4 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d901      	bls.n	800775c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e0b7      	b.n	80078cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800775c:	f7ff fbe6 	bl	8006f2c <LL_RCC_IsActiveFlag_SHDHPRE>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0f1      	beq.n	800774a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0304 	and.w	r3, r3, #4
 800776e:	2b00      	cmp	r3, #0
 8007770:	d016      	beq.n	80077a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff fb19 	bl	8006dae <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800777c:	f7fb f91a 	bl	80029b4 <HAL_GetTick>
 8007780:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007782:	e008      	b.n	8007796 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007784:	f7fb f916 	bl	80029b4 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b02      	cmp	r3, #2
 8007790:	d901      	bls.n	8007796 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e09a      	b.n	80078cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007796:	f7ff fbdb 	bl	8006f50 <LL_RCC_IsActiveFlag_PPRE1>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0f1      	beq.n	8007784 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d017      	beq.n	80077dc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff fb0e 	bl	8006dd4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077b8:	f7fb f8fc 	bl	80029b4 <HAL_GetTick>
 80077bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80077be:	e008      	b.n	80077d2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077c0:	f7fb f8f8 	bl	80029b4 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d901      	bls.n	80077d2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e07c      	b.n	80078cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80077d2:	f7ff fbce 	bl	8006f72 <LL_RCC_IsActiveFlag_PPRE2>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0f1      	beq.n	80077c0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d043      	beq.n	8007870 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d106      	bne.n	80077fe <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80077f0:	f7ff f99b 	bl	8006b2a <LL_RCC_HSE_IsReady>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d11e      	bne.n	8007838 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e066      	b.n	80078cc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2b03      	cmp	r3, #3
 8007804:	d106      	bne.n	8007814 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007806:	f7ff fb42 	bl	8006e8e <LL_RCC_PLL_IsReady>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d113      	bne.n	8007838 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e05b      	b.n	80078cc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d106      	bne.n	800782a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800781c:	f7ff fa35 	bl	8006c8a <LL_RCC_MSI_IsReady>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d108      	bne.n	8007838 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e050      	b.n	80078cc <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800782a:	f7ff f9ab 	bl	8006b84 <LL_RCC_HSI_IsReady>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e049      	b.n	80078cc <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff fa6f 	bl	8006d20 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007842:	f7fb f8b7 	bl	80029b4 <HAL_GetTick>
 8007846:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007848:	e00a      	b.n	8007860 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800784a:	f7fb f8b3 	bl	80029b4 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007858:	4293      	cmp	r3, r2
 800785a:	d901      	bls.n	8007860 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e035      	b.n	80078cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007860:	f7ff fa71 	bl	8006d46 <LL_RCC_GetSysClkSource>
 8007864:	4602      	mov	r2, r0
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	429a      	cmp	r2, r3
 800786e:	d1ec      	bne.n	800784a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007870:	4b18      	ldr	r3, [pc, #96]	@ (80078d4 <HAL_RCC_ClockConfig+0x23c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0307 	and.w	r3, r3, #7
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d21b      	bcs.n	80078b6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800787e:	4b15      	ldr	r3, [pc, #84]	@ (80078d4 <HAL_RCC_ClockConfig+0x23c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f023 0207 	bic.w	r2, r3, #7
 8007886:	4913      	ldr	r1, [pc, #76]	@ (80078d4 <HAL_RCC_ClockConfig+0x23c>)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	4313      	orrs	r3, r2
 800788c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800788e:	f7fb f891 	bl	80029b4 <HAL_GetTick>
 8007892:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007894:	e008      	b.n	80078a8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007896:	f7fb f88d 	bl	80029b4 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e011      	b.n	80078cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078a8:	4b0a      	ldr	r3, [pc, #40]	@ (80078d4 <HAL_RCC_ClockConfig+0x23c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0307 	and.w	r3, r3, #7
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d1ef      	bne.n	8007896 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80078b6:	f000 f8b3 	bl	8007a20 <HAL_RCC_GetHCLKFreq>
 80078ba:	4603      	mov	r3, r0
 80078bc:	4a06      	ldr	r2, [pc, #24]	@ (80078d8 <HAL_RCC_ClockConfig+0x240>)
 80078be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80078c0:	4b06      	ldr	r3, [pc, #24]	@ (80078dc <HAL_RCC_ClockConfig+0x244>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fb f86b 	bl	80029a0 <HAL_InitTick>
 80078ca:	4603      	mov	r3, r0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	58004000 	.word	0x58004000
 80078d8:	20000000 	.word	0x20000000
 80078dc:	20000004 	.word	0x20000004

080078e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078e0:	b590      	push	{r4, r7, lr}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078ee:	f7ff fa2a 	bl	8006d46 <LL_RCC_GetSysClkSource>
 80078f2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078f4:	f7ff fafe 	bl	8006ef4 <LL_RCC_PLL_GetMainSource>
 80078f8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <HAL_RCC_GetSysClockFreq+0x2c>
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b0c      	cmp	r3, #12
 8007904:	d139      	bne.n	800797a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d136      	bne.n	800797a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800790c:	f7ff f9cd 	bl	8006caa <LL_RCC_MSI_IsEnabledRangeSelect>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d115      	bne.n	8007942 <HAL_RCC_GetSysClockFreq+0x62>
 8007916:	f7ff f9c8 	bl	8006caa <LL_RCC_MSI_IsEnabledRangeSelect>
 800791a:	4603      	mov	r3, r0
 800791c:	2b01      	cmp	r3, #1
 800791e:	d106      	bne.n	800792e <HAL_RCC_GetSysClockFreq+0x4e>
 8007920:	f7ff f9d3 	bl	8006cca <LL_RCC_MSI_GetRange>
 8007924:	4603      	mov	r3, r0
 8007926:	0a1b      	lsrs	r3, r3, #8
 8007928:	f003 030f 	and.w	r3, r3, #15
 800792c:	e005      	b.n	800793a <HAL_RCC_GetSysClockFreq+0x5a>
 800792e:	f7ff f9d7 	bl	8006ce0 <LL_RCC_MSI_GetRangeAfterStandby>
 8007932:	4603      	mov	r3, r0
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	4a36      	ldr	r2, [pc, #216]	@ (8007a14 <HAL_RCC_GetSysClockFreq+0x134>)
 800793c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007940:	e014      	b.n	800796c <HAL_RCC_GetSysClockFreq+0x8c>
 8007942:	f7ff f9b2 	bl	8006caa <LL_RCC_MSI_IsEnabledRangeSelect>
 8007946:	4603      	mov	r3, r0
 8007948:	2b01      	cmp	r3, #1
 800794a:	d106      	bne.n	800795a <HAL_RCC_GetSysClockFreq+0x7a>
 800794c:	f7ff f9bd 	bl	8006cca <LL_RCC_MSI_GetRange>
 8007950:	4603      	mov	r3, r0
 8007952:	091b      	lsrs	r3, r3, #4
 8007954:	f003 030f 	and.w	r3, r3, #15
 8007958:	e005      	b.n	8007966 <HAL_RCC_GetSysClockFreq+0x86>
 800795a:	f7ff f9c1 	bl	8006ce0 <LL_RCC_MSI_GetRangeAfterStandby>
 800795e:	4603      	mov	r3, r0
 8007960:	091b      	lsrs	r3, r3, #4
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	4a2b      	ldr	r2, [pc, #172]	@ (8007a14 <HAL_RCC_GetSysClockFreq+0x134>)
 8007968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800796c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d115      	bne.n	80079a0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007978:	e012      	b.n	80079a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b04      	cmp	r3, #4
 800797e:	d102      	bne.n	8007986 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007980:	4b25      	ldr	r3, [pc, #148]	@ (8007a18 <HAL_RCC_GetSysClockFreq+0x138>)
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	e00c      	b.n	80079a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b08      	cmp	r3, #8
 800798a:	d109      	bne.n	80079a0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800798c:	f7ff f8a0 	bl	8006ad0 <LL_RCC_HSE_IsEnabledDiv2>
 8007990:	4603      	mov	r3, r0
 8007992:	2b01      	cmp	r3, #1
 8007994:	d102      	bne.n	800799c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007996:	4b20      	ldr	r3, [pc, #128]	@ (8007a18 <HAL_RCC_GetSysClockFreq+0x138>)
 8007998:	617b      	str	r3, [r7, #20]
 800799a:	e001      	b.n	80079a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800799c:	4b1f      	ldr	r3, [pc, #124]	@ (8007a1c <HAL_RCC_GetSysClockFreq+0x13c>)
 800799e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079a0:	f7ff f9d1 	bl	8006d46 <LL_RCC_GetSysClkSource>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b0c      	cmp	r3, #12
 80079a8:	d12f      	bne.n	8007a0a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80079aa:	f7ff faa3 	bl	8006ef4 <LL_RCC_PLL_GetMainSource>
 80079ae:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d003      	beq.n	80079be <HAL_RCC_GetSysClockFreq+0xde>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d003      	beq.n	80079c4 <HAL_RCC_GetSysClockFreq+0xe4>
 80079bc:	e00d      	b.n	80079da <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80079be:	4b16      	ldr	r3, [pc, #88]	@ (8007a18 <HAL_RCC_GetSysClockFreq+0x138>)
 80079c0:	60fb      	str	r3, [r7, #12]
        break;
 80079c2:	e00d      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80079c4:	f7ff f884 	bl	8006ad0 <LL_RCC_HSE_IsEnabledDiv2>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d102      	bne.n	80079d4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80079ce:	4b12      	ldr	r3, [pc, #72]	@ (8007a18 <HAL_RCC_GetSysClockFreq+0x138>)
 80079d0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80079d2:	e005      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80079d4:	4b11      	ldr	r3, [pc, #68]	@ (8007a1c <HAL_RCC_GetSysClockFreq+0x13c>)
 80079d6:	60fb      	str	r3, [r7, #12]
        break;
 80079d8:	e002      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	60fb      	str	r3, [r7, #12]
        break;
 80079de:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80079e0:	f7ff fa66 	bl	8006eb0 <LL_RCC_PLL_GetN>
 80079e4:	4602      	mov	r2, r0
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	fb03 f402 	mul.w	r4, r3, r2
 80079ec:	f7ff fa77 	bl	8006ede <LL_RCC_PLL_GetDivider>
 80079f0:	4603      	mov	r3, r0
 80079f2:	091b      	lsrs	r3, r3, #4
 80079f4:	3301      	adds	r3, #1
 80079f6:	fbb4 f4f3 	udiv	r4, r4, r3
 80079fa:	f7ff fa65 	bl	8006ec8 <LL_RCC_PLL_GetR>
 80079fe:	4603      	mov	r3, r0
 8007a00:	0f5b      	lsrs	r3, r3, #29
 8007a02:	3301      	adds	r3, #1
 8007a04:	fbb4 f3f3 	udiv	r3, r4, r3
 8007a08:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007a0a:	697b      	ldr	r3, [r7, #20]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd90      	pop	{r4, r7, pc}
 8007a14:	0802119c 	.word	0x0802119c
 8007a18:	00f42400 	.word	0x00f42400
 8007a1c:	01e84800 	.word	0x01e84800

08007a20 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a20:	b598      	push	{r3, r4, r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007a24:	f7ff ff5c 	bl	80078e0 <HAL_RCC_GetSysClockFreq>
 8007a28:	4604      	mov	r4, r0
 8007a2a:	f7ff f9e6 	bl	8006dfa <LL_RCC_GetAHBPrescaler>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	091b      	lsrs	r3, r3, #4
 8007a32:	f003 030f 	and.w	r3, r3, #15
 8007a36:	4a03      	ldr	r2, [pc, #12]	@ (8007a44 <HAL_RCC_GetHCLKFreq+0x24>)
 8007a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a3c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	bd98      	pop	{r3, r4, r7, pc}
 8007a44:	0802113c 	.word	0x0802113c

08007a48 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a48:	b598      	push	{r3, r4, r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007a4c:	f7ff ffe8 	bl	8007a20 <HAL_RCC_GetHCLKFreq>
 8007a50:	4604      	mov	r4, r0
 8007a52:	f7ff f9ea 	bl	8006e2a <LL_RCC_GetAPB1Prescaler>
 8007a56:	4603      	mov	r3, r0
 8007a58:	0a1b      	lsrs	r3, r3, #8
 8007a5a:	4a03      	ldr	r2, [pc, #12]	@ (8007a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	bd98      	pop	{r3, r4, r7, pc}
 8007a68:	0802117c 	.word	0x0802117c

08007a6c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a6c:	b598      	push	{r3, r4, r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007a70:	f7ff ffd6 	bl	8007a20 <HAL_RCC_GetHCLKFreq>
 8007a74:	4604      	mov	r4, r0
 8007a76:	f7ff f9e3 	bl	8006e40 <LL_RCC_GetAPB2Prescaler>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	0adb      	lsrs	r3, r3, #11
 8007a7e:	4a03      	ldr	r2, [pc, #12]	@ (8007a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd98      	pop	{r3, r4, r7, pc}
 8007a8c:	0802117c 	.word	0x0802117c

08007a90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007a90:	b590      	push	{r4, r7, lr}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	091b      	lsrs	r3, r3, #4
 8007a9c:	f003 030f 	and.w	r3, r3, #15
 8007aa0:	4a10      	ldr	r2, [pc, #64]	@ (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007aa8:	f7ff f9b2 	bl	8006e10 <LL_RCC_GetAHB3Prescaler>
 8007aac:	4603      	mov	r3, r0
 8007aae:	091b      	lsrs	r3, r3, #4
 8007ab0:	f003 030f 	and.w	r3, r3, #15
 8007ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	4a09      	ldr	r2, [pc, #36]	@ (8007aec <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aca:	0c9c      	lsrs	r4, r3, #18
 8007acc:	f7fe ff58 	bl	8006980 <HAL_PWREx_GetVoltageRange>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 f80b 	bl	8007af0 <RCC_SetFlashLatency>
 8007ada:	4603      	mov	r3, r0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd90      	pop	{r4, r7, pc}
 8007ae4:	0802119c 	.word	0x0802119c
 8007ae8:	0802113c 	.word	0x0802113c
 8007aec:	431bde83 	.word	0x431bde83

08007af0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08e      	sub	sp, #56	@ 0x38
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007afa:	4a3a      	ldr	r2, [pc, #232]	@ (8007be4 <RCC_SetFlashLatency+0xf4>)
 8007afc:	f107 0320 	add.w	r3, r7, #32
 8007b00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b04:	6018      	str	r0, [r3, #0]
 8007b06:	3304      	adds	r3, #4
 8007b08:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007b0a:	4a37      	ldr	r2, [pc, #220]	@ (8007be8 <RCC_SetFlashLatency+0xf8>)
 8007b0c:	f107 0318 	add.w	r3, r7, #24
 8007b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b14:	6018      	str	r0, [r3, #0]
 8007b16:	3304      	adds	r3, #4
 8007b18:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007b1a:	4a34      	ldr	r2, [pc, #208]	@ (8007bec <RCC_SetFlashLatency+0xfc>)
 8007b1c:	f107 030c 	add.w	r3, r7, #12
 8007b20:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b22:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007b26:	2300      	movs	r3, #0
 8007b28:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b30:	d11b      	bne.n	8007b6a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b32:	2300      	movs	r3, #0
 8007b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b36:	e014      	b.n	8007b62 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	3338      	adds	r3, #56	@ 0x38
 8007b3e:	443b      	add	r3, r7
 8007b40:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007b44:	461a      	mov	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d807      	bhi.n	8007b5c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	3338      	adds	r3, #56	@ 0x38
 8007b52:	443b      	add	r3, r7
 8007b54:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b5a:	e021      	b.n	8007ba0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	3301      	adds	r3, #1
 8007b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d9e7      	bls.n	8007b38 <RCC_SetFlashLatency+0x48>
 8007b68:	e01a      	b.n	8007ba0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b6e:	e014      	b.n	8007b9a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	3338      	adds	r3, #56	@ 0x38
 8007b76:	443b      	add	r3, r7
 8007b78:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d807      	bhi.n	8007b94 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	3338      	adds	r3, #56	@ 0x38
 8007b8a:	443b      	add	r3, r7
 8007b8c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b92:	e005      	b.n	8007ba0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b96:	3301      	adds	r3, #1
 8007b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d9e7      	bls.n	8007b70 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ba0:	4b13      	ldr	r3, [pc, #76]	@ (8007bf0 <RCC_SetFlashLatency+0x100>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f023 0207 	bic.w	r2, r3, #7
 8007ba8:	4911      	ldr	r1, [pc, #68]	@ (8007bf0 <RCC_SetFlashLatency+0x100>)
 8007baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bac:	4313      	orrs	r3, r2
 8007bae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bb0:	f7fa ff00 	bl	80029b4 <HAL_GetTick>
 8007bb4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007bb6:	e008      	b.n	8007bca <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007bb8:	f7fa fefc 	bl	80029b4 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d901      	bls.n	8007bca <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e007      	b.n	8007bda <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007bca:	4b09      	ldr	r3, [pc, #36]	@ (8007bf0 <RCC_SetFlashLatency+0x100>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d1ef      	bne.n	8007bb8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3738      	adds	r7, #56	@ 0x38
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	08020844 	.word	0x08020844
 8007be8:	0802084c 	.word	0x0802084c
 8007bec:	08020854 	.word	0x08020854
 8007bf0:	58004000 	.word	0x58004000

08007bf4 <LL_RCC_LSE_IsReady>:
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d101      	bne.n	8007c0c <LL_RCC_LSE_IsReady+0x18>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e000      	b.n	8007c0e <LL_RCC_LSE_IsReady+0x1a>
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr

08007c16 <LL_RCC_SetUSARTClockSource>:
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c22:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	0c1b      	lsrs	r3, r3, #16
 8007c2a:	43db      	mvns	r3, r3
 8007c2c:	401a      	ands	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr

08007c46 <LL_RCC_SetI2SClockSource>:
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c56:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bc80      	pop	{r7}
 8007c6e:	4770      	bx	lr

08007c70 <LL_RCC_SetLPUARTClockSource>:
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bc80      	pop	{r7}
 8007c98:	4770      	bx	lr

08007c9a <LL_RCC_SetI2CClockSource>:
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007ca2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ca6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	091b      	lsrs	r3, r3, #4
 8007cae:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007cb2:	43db      	mvns	r3, r3
 8007cb4:	401a      	ands	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007cbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bc80      	pop	{r7}
 8007cd0:	4770      	bx	lr

08007cd2 <LL_RCC_SetLPTIMClockSource>:
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cde:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	0c1b      	lsrs	r3, r3, #16
 8007ce6:	041b      	lsls	r3, r3, #16
 8007ce8:	43db      	mvns	r3, r3
 8007cea:	401a      	ands	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	041b      	lsls	r3, r3, #16
 8007cf0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bc80      	pop	{r7}
 8007d02:	4770      	bx	lr

08007d04 <LL_RCC_SetRNGClockSource>:
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d14:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007d18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bc80      	pop	{r7}
 8007d2c:	4770      	bx	lr

08007d2e <LL_RCC_SetADCClockSource>:
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007d42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bc80      	pop	{r7}
 8007d56:	4770      	bx	lr

08007d58 <LL_RCC_SetRTCClockSource>:
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bc80      	pop	{r7}
 8007d80:	4770      	bx	lr

08007d82 <LL_RCC_GetRTCClockSource>:
{
 8007d82:	b480      	push	{r7}
 8007d84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr

08007d9a <LL_RCC_ForceBackupDomainReset>:
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007db2:	bf00      	nop
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bc80      	pop	{r7}
 8007db8:	4770      	bx	lr

08007dba <LL_RCC_ReleaseBackupDomainReset>:
{
 8007dba:	b480      	push	{r7}
 8007dbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007dd2:	bf00      	nop
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bc80      	pop	{r7}
 8007dd8:	4770      	bx	lr
	...

08007ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007de8:	2300      	movs	r3, #0
 8007dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007dec:	2300      	movs	r3, #0
 8007dee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d058      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007dfc:	f7fe fd7e 	bl	80068fc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e00:	f7fa fdd8 	bl	80029b4 <HAL_GetTick>
 8007e04:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007e06:	e009      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e08:	f7fa fdd4 	bl	80029b4 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d902      	bls.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	74fb      	strb	r3, [r7, #19]
        break;
 8007e1a:	e006      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007e1c:	4b7b      	ldr	r3, [pc, #492]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e28:	d1ee      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007e2a:	7cfb      	ldrb	r3, [r7, #19]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d13c      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007e30:	f7ff ffa7 	bl	8007d82 <LL_RCC_GetRTCClockSource>
 8007e34:	4602      	mov	r2, r0
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d00f      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e4a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e4c:	f7ff ffa5 	bl	8007d9a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e50:	f7ff ffb3 	bl	8007dba <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007e54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d014      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e68:	f7fa fda4 	bl	80029b4 <HAL_GetTick>
 8007e6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007e6e:	e00b      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e70:	f7fa fda0 	bl	80029b4 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d902      	bls.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	74fb      	strb	r3, [r7, #19]
            break;
 8007e86:	e004      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007e88:	f7ff feb4 	bl	8007bf4 <LL_RCC_LSE_IsReady>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d1ee      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007e92:	7cfb      	ldrb	r3, [r7, #19]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d105      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff ff5b 	bl	8007d58 <LL_RCC_SetRTCClockSource>
 8007ea2:	e004      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ea4:	7cfb      	ldrb	r3, [r7, #19]
 8007ea6:	74bb      	strb	r3, [r7, #18]
 8007ea8:	e001      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eaa:	7cfb      	ldrb	r3, [r7, #19]
 8007eac:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff fea9 	bl	8007c16 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d004      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff fe9e 	bl	8007c16 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d004      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7ff fec0 	bl	8007c70 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d004      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7ff fee6 	bl	8007cd2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d004      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff fedb 	bl	8007cd2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff fed0 	bl	8007cd2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d004      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7ff fea9 	bl	8007c9a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d004      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff fe9e 	bl	8007c9a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d004      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff fe93 	bl	8007c9a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d011      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff fe5e 	bl	8007c46 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f92:	d107      	bne.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007fa2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d010      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fea5 	bl	8007d04 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d107      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007fd0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d011      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7ff fea3 	bl	8007d2e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ff0:	d107      	bne.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008000:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8008002:	7cbb      	ldrb	r3, [r7, #18]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	58000400 	.word	0x58000400

08008010 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d071      	beq.n	8008106 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7fa f93e 	bl	80022b8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008044:	4b32      	ldr	r3, [pc, #200]	@ (8008110 <HAL_RTC_Init+0x100>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	2b10      	cmp	r3, #16
 800804e:	d051      	beq.n	80080f4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008050:	4b2f      	ldr	r3, [pc, #188]	@ (8008110 <HAL_RTC_Init+0x100>)
 8008052:	22ca      	movs	r2, #202	@ 0xca
 8008054:	625a      	str	r2, [r3, #36]	@ 0x24
 8008056:	4b2e      	ldr	r3, [pc, #184]	@ (8008110 <HAL_RTC_Init+0x100>)
 8008058:	2253      	movs	r2, #83	@ 0x53
 800805a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa11 	bl	8008484 <RTC_EnterInitMode>
 8008062:	4603      	mov	r3, r0
 8008064:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d13f      	bne.n	80080ec <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800806c:	4b28      	ldr	r3, [pc, #160]	@ (8008110 <HAL_RTC_Init+0x100>)
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	4a27      	ldr	r2, [pc, #156]	@ (8008110 <HAL_RTC_Init+0x100>)
 8008072:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8008076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800807a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800807c:	4b24      	ldr	r3, [pc, #144]	@ (8008110 <HAL_RTC_Init+0x100>)
 800807e:	699a      	ldr	r2, [r3, #24]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6859      	ldr	r1, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	4319      	orrs	r1, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	430b      	orrs	r3, r1
 8008090:	491f      	ldr	r1, [pc, #124]	@ (8008110 <HAL_RTC_Init+0x100>)
 8008092:	4313      	orrs	r3, r2
 8008094:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	041b      	lsls	r3, r3, #16
 80080a0:	491b      	ldr	r1, [pc, #108]	@ (8008110 <HAL_RTC_Init+0x100>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80080a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008110 <HAL_RTC_Init+0x100>)
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b6:	430b      	orrs	r3, r1
 80080b8:	4915      	ldr	r1, [pc, #84]	@ (8008110 <HAL_RTC_Init+0x100>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fa14 	bl	80084ec <RTC_ExitInitMode>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10e      	bne.n	80080ec <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80080ce:	4b10      	ldr	r3, [pc, #64]	@ (8008110 <HAL_RTC_Init+0x100>)
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a19      	ldr	r1, [r3, #32]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	4319      	orrs	r1, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	430b      	orrs	r3, r1
 80080e6:	490a      	ldr	r1, [pc, #40]	@ (8008110 <HAL_RTC_Init+0x100>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080ec:	4b08      	ldr	r3, [pc, #32]	@ (8008110 <HAL_RTC_Init+0x100>)
 80080ee:	22ff      	movs	r2, #255	@ 0xff
 80080f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80080f2:	e001      	b.n	80080f8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40002800 	.word	0x40002800

08008114 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008114:	b590      	push	{r4, r7, lr}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008120:	2300      	movs	r3, #0
 8008122:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <HAL_RTC_SetAlarm_IT+0x1e>
 800812e:	2302      	movs	r3, #2
 8008130:	e0f3      	b.n	800831a <HAL_RTC_SetAlarm_IT+0x206>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2202      	movs	r2, #2
 800813e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8008142:	4b78      	ldr	r3, [pc, #480]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800814a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008152:	d06a      	beq.n	800822a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d13a      	bne.n	80081d0 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800815a:	4b72      	ldr	r3, [pc, #456]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	d102      	bne.n	800816c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2200      	movs	r2, #0
 800816a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f9f5 	bl	8008568 <RTC_ByteToBcd2>
 800817e:	4603      	mov	r3, r0
 8008180:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f9ee 	bl	8008568 <RTC_ByteToBcd2>
 800818c:	4603      	mov	r3, r0
 800818e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008190:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	789b      	ldrb	r3, [r3, #2]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 f9e6 	bl	8008568 <RTC_ByteToBcd2>
 800819c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800819e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	78db      	ldrb	r3, [r3, #3]
 80081a6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80081a8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 f9d8 	bl	8008568 <RTC_ByteToBcd2>
 80081b8:	4603      	mov	r3, r0
 80081ba:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80081bc:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80081c4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80081ca:	4313      	orrs	r3, r2
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	e02c      	b.n	800822a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 80081d8:	d00d      	beq.n	80081f6 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081e2:	d008      	beq.n	80081f6 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80081e4:	4b4f      	ldr	r3, [pc, #316]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d102      	bne.n	80081f6 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2200      	movs	r2, #0
 80081f4:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008202:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008208:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	78db      	ldrb	r3, [r3, #3]
 800820e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008210:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008218:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800821a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008220:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800822a:	4b3e      	ldr	r3, [pc, #248]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 800822c:	22ca      	movs	r2, #202	@ 0xca
 800822e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008230:	4b3c      	ldr	r3, [pc, #240]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 8008232:	2253      	movs	r2, #83	@ 0x53
 8008234:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800823e:	d12c      	bne.n	800829a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008240:	4b38      	ldr	r3, [pc, #224]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	4a37      	ldr	r2, [pc, #220]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 8008246:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800824a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800824c:	4b35      	ldr	r3, [pc, #212]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 800824e:	2201      	movs	r2, #1
 8008250:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008258:	d107      	bne.n	800826a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	4930      	ldr	r1, [pc, #192]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 8008264:	4313      	orrs	r3, r2
 8008266:	644b      	str	r3, [r1, #68]	@ 0x44
 8008268:	e006      	b.n	8008278 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800826a:	4a2e      	ldr	r2, [pc, #184]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008270:	4a2c      	ldr	r2, [pc, #176]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008278:	4a2a      	ldr	r2, [pc, #168]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008284:	f043 0201 	orr.w	r2, r3, #1
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800828c:	4b25      	ldr	r3, [pc, #148]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	4a24      	ldr	r2, [pc, #144]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 8008292:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8008296:	6193      	str	r3, [r2, #24]
 8008298:	e02b      	b.n	80082f2 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800829a:	4b22      	ldr	r3, [pc, #136]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	4a21      	ldr	r2, [pc, #132]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 80082a0:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80082a4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80082a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 80082a8:	2202      	movs	r2, #2
 80082aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b2:	d107      	bne.n	80082c4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	699a      	ldr	r2, [r3, #24]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	4919      	ldr	r1, [pc, #100]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80082c2:	e006      	b.n	80082d2 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80082c4:	4a17      	ldr	r2, [pc, #92]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80082ca:	4a16      	ldr	r2, [pc, #88]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80082d2:	4a14      	ldr	r2, [pc, #80]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082de:	f043 0202 	orr.w	r2, r3, #2
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80082e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 80082ec:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80082f0:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80082f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008328 <HAL_RTC_SetAlarm_IT+0x214>)
 80082f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082f8:	4a0b      	ldr	r2, [pc, #44]	@ (8008328 <HAL_RTC_SetAlarm_IT+0x214>)
 80082fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082fe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008302:	4b08      	ldr	r3, [pc, #32]	@ (8008324 <HAL_RTC_SetAlarm_IT+0x210>)
 8008304:	22ff      	movs	r2, #255	@ 0xff
 8008306:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	bd90      	pop	{r4, r7, pc}
 8008322:	bf00      	nop
 8008324:	40002800 	.word	0x40002800
 8008328:	58000800 	.word	0x58000800

0800832c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800833c:	2b01      	cmp	r3, #1
 800833e:	d101      	bne.n	8008344 <HAL_RTC_DeactivateAlarm+0x18>
 8008340:	2302      	movs	r3, #2
 8008342:	e048      	b.n	80083d6 <HAL_RTC_DeactivateAlarm+0xaa>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008354:	4b22      	ldr	r3, [pc, #136]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008356:	22ca      	movs	r2, #202	@ 0xca
 8008358:	625a      	str	r2, [r3, #36]	@ 0x24
 800835a:	4b21      	ldr	r3, [pc, #132]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800835c:	2253      	movs	r2, #83	@ 0x53
 800835e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008366:	d115      	bne.n	8008394 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008368:	4b1d      	ldr	r3, [pc, #116]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	4a1c      	ldr	r2, [pc, #112]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800836e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008372:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8008374:	4b1a      	ldr	r3, [pc, #104]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008378:	4a19      	ldr	r2, [pc, #100]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800837a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800837e:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008384:	f023 0201 	bic.w	r2, r3, #1
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800838c:	4b14      	ldr	r3, [pc, #80]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800838e:	2201      	movs	r2, #1
 8008390:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008392:	e014      	b.n	80083be <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008394:	4b12      	ldr	r3, [pc, #72]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	4a11      	ldr	r2, [pc, #68]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800839a:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800839e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80083a0:	4b0f      	ldr	r3, [pc, #60]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80083a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083a4:	4a0e      	ldr	r2, [pc, #56]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80083a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083aa:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b0:	f023 0202 	bic.w	r2, r3, #2
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80083b8:	4b09      	ldr	r3, [pc, #36]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80083ba:	2202      	movs	r2, #2
 80083bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083be:	4b08      	ldr	r3, [pc, #32]	@ (80083e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80083c0:	22ff      	movs	r2, #255	@ 0xff
 80083c2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	bc80      	pop	{r7}
 80083de:	4770      	bx	lr
 80083e0:	40002800 	.word	0x40002800

080083e4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80083ec:	4b11      	ldr	r3, [pc, #68]	@ (8008434 <HAL_RTC_AlarmIRQHandler+0x50>)
 80083ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f4:	4013      	ands	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d005      	beq.n	800840e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008402:	4b0c      	ldr	r3, [pc, #48]	@ (8008434 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008404:	2201      	movs	r2, #1
 8008406:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7fa fd76 	bl	8002efa <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d005      	beq.n	8008424 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008418:	4b06      	ldr	r3, [pc, #24]	@ (8008434 <HAL_RTC_AlarmIRQHandler+0x50>)
 800841a:	2202      	movs	r2, #2
 800841c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f94a 	bl	80086b8 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800842c:	bf00      	nop
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	40002800 	.word	0x40002800

08008438 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008440:	4b0f      	ldr	r3, [pc, #60]	@ (8008480 <HAL_RTC_WaitForSynchro+0x48>)
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	4a0e      	ldr	r2, [pc, #56]	@ (8008480 <HAL_RTC_WaitForSynchro+0x48>)
 8008446:	f023 0320 	bic.w	r3, r3, #32
 800844a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800844c:	f7fa fab2 	bl	80029b4 <HAL_GetTick>
 8008450:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008452:	e009      	b.n	8008468 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008454:	f7fa faae 	bl	80029b4 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008462:	d901      	bls.n	8008468 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e006      	b.n	8008476 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008468:	4b05      	ldr	r3, [pc, #20]	@ (8008480 <HAL_RTC_WaitForSynchro+0x48>)
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f003 0320 	and.w	r3, r3, #32
 8008470:	2b00      	cmp	r3, #0
 8008472:	d0ef      	beq.n	8008454 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	40002800 	.word	0x40002800

08008484 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008490:	4b15      	ldr	r3, [pc, #84]	@ (80084e8 <RTC_EnterInitMode+0x64>)
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d120      	bne.n	80084de <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800849c:	4b12      	ldr	r3, [pc, #72]	@ (80084e8 <RTC_EnterInitMode+0x64>)
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	4a11      	ldr	r2, [pc, #68]	@ (80084e8 <RTC_EnterInitMode+0x64>)
 80084a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084a6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80084a8:	f7fa fa84 	bl	80029b4 <HAL_GetTick>
 80084ac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80084ae:	e00d      	b.n	80084cc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80084b0:	f7fa fa80 	bl	80029b4 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084be:	d905      	bls.n	80084cc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2203      	movs	r2, #3
 80084c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80084cc:	4b06      	ldr	r3, [pc, #24]	@ (80084e8 <RTC_EnterInitMode+0x64>)
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <RTC_EnterInitMode+0x5a>
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d1e8      	bne.n	80084b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	40002800 	.word	0x40002800

080084ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80084f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008564 <RTC_ExitInitMode+0x78>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	4a19      	ldr	r2, [pc, #100]	@ (8008564 <RTC_ExitInitMode+0x78>)
 80084fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008502:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008504:	4b17      	ldr	r3, [pc, #92]	@ (8008564 <RTC_ExitInitMode+0x78>)
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	f003 0320 	and.w	r3, r3, #32
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10c      	bne.n	800852a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff ff91 	bl	8008438 <HAL_RTC_WaitForSynchro>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01e      	beq.n	800855a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2203      	movs	r2, #3
 8008520:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	73fb      	strb	r3, [r7, #15]
 8008528:	e017      	b.n	800855a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800852a:	4b0e      	ldr	r3, [pc, #56]	@ (8008564 <RTC_ExitInitMode+0x78>)
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	4a0d      	ldr	r2, [pc, #52]	@ (8008564 <RTC_ExitInitMode+0x78>)
 8008530:	f023 0320 	bic.w	r3, r3, #32
 8008534:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff ff7e 	bl	8008438 <HAL_RTC_WaitForSynchro>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d005      	beq.n	800854e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2203      	movs	r2, #3
 8008546:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800854e:	4b05      	ldr	r3, [pc, #20]	@ (8008564 <RTC_ExitInitMode+0x78>)
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	4a04      	ldr	r2, [pc, #16]	@ (8008564 <RTC_ExitInitMode+0x78>)
 8008554:	f043 0320 	orr.w	r3, r3, #32
 8008558:	6193      	str	r3, [r2, #24]
  }

  return status;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	40002800 	.word	0x40002800

08008568 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800857a:	e005      	b.n	8008588 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3301      	adds	r3, #1
 8008580:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008582:	7afb      	ldrb	r3, [r7, #11]
 8008584:	3b0a      	subs	r3, #10
 8008586:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008588:	7afb      	ldrb	r3, [r7, #11]
 800858a:	2b09      	cmp	r3, #9
 800858c:	d8f6      	bhi.n	800857c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	b2da      	uxtb	r2, r3
 8008596:	7afb      	ldrb	r3, [r7, #11]
 8008598:	4313      	orrs	r3, r2
 800859a:	b2db      	uxtb	r3, r3
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bc80      	pop	{r7}
 80085a4:	4770      	bx	lr
	...

080085a8 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d101      	bne.n	80085be <HAL_RTCEx_EnableBypassShadow+0x16>
 80085ba:	2302      	movs	r3, #2
 80085bc:	e01f      	b.n	80085fe <HAL_RTCEx_EnableBypassShadow+0x56>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2202      	movs	r2, #2
 80085ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008608 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80085d0:	22ca      	movs	r2, #202	@ 0xca
 80085d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80085d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008608 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80085d6:	2253      	movs	r2, #83	@ 0x53
 80085d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80085da:	4b0b      	ldr	r3, [pc, #44]	@ (8008608 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	4a0a      	ldr	r2, [pc, #40]	@ (8008608 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80085e0:	f043 0320 	orr.w	r3, r3, #32
 80085e4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085e6:	4b08      	ldr	r3, [pc, #32]	@ (8008608 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80085e8:	22ff      	movs	r2, #255	@ 0xff
 80085ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	bc80      	pop	{r7}
 8008606:	4770      	bx	lr
 8008608:	40002800 	.word	0x40002800

0800860c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800861a:	2b01      	cmp	r3, #1
 800861c:	d101      	bne.n	8008622 <HAL_RTCEx_SetSSRU_IT+0x16>
 800861e:	2302      	movs	r3, #2
 8008620:	e027      	b.n	8008672 <HAL_RTCEx_SetSSRU_IT+0x66>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2202      	movs	r2, #2
 800862e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008632:	4b12      	ldr	r3, [pc, #72]	@ (800867c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008634:	22ca      	movs	r2, #202	@ 0xca
 8008636:	625a      	str	r2, [r3, #36]	@ 0x24
 8008638:	4b10      	ldr	r3, [pc, #64]	@ (800867c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800863a:	2253      	movs	r2, #83	@ 0x53
 800863c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800863e:	4b0f      	ldr	r3, [pc, #60]	@ (800867c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	4a0e      	ldr	r2, [pc, #56]	@ (800867c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008648:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800864a:	4b0d      	ldr	r3, [pc, #52]	@ (8008680 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800864c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008650:	4a0b      	ldr	r2, [pc, #44]	@ (8008680 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008652:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008656:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800865a:	4b08      	ldr	r3, [pc, #32]	@ (800867c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800865c:	22ff      	movs	r2, #255	@ 0xff
 800865e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr
 800867c:	40002800 	.word	0x40002800
 8008680:	58000800 	.word	0x58000800

08008684 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800868c:	4b09      	ldr	r3, [pc, #36]	@ (80086b4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800868e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008698:	4b06      	ldr	r3, [pc, #24]	@ (80086b4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800869a:	2240      	movs	r2, #64	@ 0x40
 800869c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7fa fc35 	bl	8002f0e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	40002800 	.word	0x40002800

080086b8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bc80      	pop	{r7}
 80086c8:	4770      	bx	lr
	...

080086cc <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80086d8:	4b07      	ldr	r3, [pc, #28]	@ (80086f8 <HAL_RTCEx_BKUPWrite+0x2c>)
 80086da:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	4413      	add	r3, r2
 80086e4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	601a      	str	r2, [r3, #0]
}
 80086ec:	bf00      	nop
 80086ee:	371c      	adds	r7, #28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bc80      	pop	{r7}
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	4000b100 	.word	0x4000b100

080086fc <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008706:	4b07      	ldr	r3, [pc, #28]	@ (8008724 <HAL_RTCEx_BKUPRead+0x28>)
 8008708:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	4413      	add	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	4000b100 	.word	0x4000b100

08008728 <LL_PWR_SetRadioBusyTrigger>:
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8008730:	4b06      	ldr	r3, [pc, #24]	@ (800874c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008738:	4904      	ldr	r1, [pc, #16]	@ (800874c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4313      	orrs	r3, r2
 800873e:	608b      	str	r3, [r1, #8]
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	58000400 	.word	0x58000400

08008750 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008754:	4b05      	ldr	r3, [pc, #20]	@ (800876c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800875a:	4a04      	ldr	r2, [pc, #16]	@ (800876c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800875c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	bc80      	pop	{r7}
 800876a:	4770      	bx	lr
 800876c:	58000400 	.word	0x58000400

08008770 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8008770:	b480      	push	{r7}
 8008772:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008774:	4b05      	ldr	r3, [pc, #20]	@ (800878c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800877a:	4a04      	ldr	r2, [pc, #16]	@ (800878c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800877c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008784:	bf00      	nop
 8008786:	46bd      	mov	sp, r7
 8008788:	bc80      	pop	{r7}
 800878a:	4770      	bx	lr
 800878c:	58000400 	.word	0x58000400

08008790 <LL_PWR_ClearFlag_RFBUSY>:
{
 8008790:	b480      	push	{r7}
 8008792:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008794:	4b03      	ldr	r3, [pc, #12]	@ (80087a4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8008796:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800879a:	619a      	str	r2, [r3, #24]
}
 800879c:	bf00      	nop
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr
 80087a4:	58000400 	.word	0x58000400

080087a8 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80087ac:	4b06      	ldr	r3, [pc, #24]	@ (80087c8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d101      	bne.n	80087bc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80087b8:	2301      	movs	r3, #1
 80087ba:	e000      	b.n	80087be <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc80      	pop	{r7}
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	58000400 	.word	0x58000400

080087cc <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80087d0:	4b06      	ldr	r3, [pc, #24]	@ (80087ec <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80087d2:	695b      	ldr	r3, [r3, #20]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b04      	cmp	r3, #4
 80087da:	d101      	bne.n	80087e0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80087dc:	2301      	movs	r3, #1
 80087de:	e000      	b.n	80087e2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bc80      	pop	{r7}
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	58000400 	.word	0x58000400

080087f0 <LL_RCC_RF_DisableReset>:
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80087f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008800:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008804:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008808:	bf00      	nop
 800880a:	46bd      	mov	sp, r7
 800880c:	bc80      	pop	{r7}
 800880e:	4770      	bx	lr

08008810 <LL_RCC_IsRFUnderReset>:
{
 8008810:	b480      	push	{r7}
 8008812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800881c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008820:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008824:	d101      	bne.n	800882a <LL_RCC_IsRFUnderReset+0x1a>
 8008826:	2301      	movs	r3, #1
 8008828:	e000      	b.n	800882c <LL_RCC_IsRFUnderReset+0x1c>
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	46bd      	mov	sp, r7
 8008830:	bc80      	pop	{r7}
 8008832:	4770      	bx	lr

08008834 <LL_EXTI_EnableIT_32_63>:
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800883c:	4b06      	ldr	r3, [pc, #24]	@ (8008858 <LL_EXTI_EnableIT_32_63+0x24>)
 800883e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008842:	4905      	ldr	r1, [pc, #20]	@ (8008858 <LL_EXTI_EnableIT_32_63+0x24>)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4313      	orrs	r3, r2
 8008848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	bc80      	pop	{r7}
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	58000800 	.word	0x58000800

0800885c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d103      	bne.n	8008872 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	73fb      	strb	r3, [r7, #15]
    return status;
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	e052      	b.n	8008918 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	799b      	ldrb	r3, [r3, #6]
 800887a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d002      	beq.n	8008888 <HAL_SUBGHZ_Init+0x2c>
 8008882:	7bbb      	ldrb	r3, [r7, #14]
 8008884:	2b03      	cmp	r3, #3
 8008886:	d109      	bne.n	800889c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7f9 fe2c 	bl	80024ec <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8008894:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008898:	f7ff ffcc 	bl	8008834 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d126      	bne.n	80088f0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2202      	movs	r2, #2
 80088a6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80088a8:	f7ff ffa2 	bl	80087f0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80088ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008920 <HAL_SUBGHZ_Init+0xc4>)
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	4613      	mov	r3, r2
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	1a9b      	subs	r3, r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	0cdb      	lsrs	r3, r3, #19
 80088ba:	2264      	movs	r2, #100	@ 0x64
 80088bc:	fb02 f303 	mul.w	r3, r2, r3
 80088c0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d105      	bne.n	80088d4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	609a      	str	r2, [r3, #8]
        break;
 80088d2:	e007      	b.n	80088e4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80088da:	f7ff ff99 	bl	8008810 <LL_RCC_IsRFUnderReset>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1ee      	bne.n	80088c2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80088e4:	f7ff ff34 	bl	8008750 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80088e8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80088ec:	f7ff ff1c 	bl	8008728 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80088f0:	f7ff ff4e 	bl	8008790 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10a      	bne.n	8008910 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fabc 	bl	8008e7c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	719a      	strb	r2, [r3, #6]

  return status;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20000000 	.word	0x20000000

08008924 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	607a      	str	r2, [r7, #4]
 800892e:	461a      	mov	r2, r3
 8008930:	460b      	mov	r3, r1
 8008932:	817b      	strh	r3, [r7, #10]
 8008934:	4613      	mov	r3, r2
 8008936:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	799b      	ldrb	r3, [r3, #6]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b01      	cmp	r3, #1
 8008940:	d14a      	bne.n	80089d8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	795b      	ldrb	r3, [r3, #5]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d101      	bne.n	800894e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800894a:	2302      	movs	r3, #2
 800894c:	e045      	b.n	80089da <HAL_SUBGHZ_WriteRegisters+0xb6>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2201      	movs	r2, #1
 8008952:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2202      	movs	r2, #2
 8008958:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 fb5c 	bl	8009018 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008960:	f7ff ff06 	bl	8008770 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8008964:	210d      	movs	r1, #13
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 faa8 	bl	8008ebc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800896c:	897b      	ldrh	r3, [r7, #10]
 800896e:	0a1b      	lsrs	r3, r3, #8
 8008970:	b29b      	uxth	r3, r3
 8008972:	b2db      	uxtb	r3, r3
 8008974:	4619      	mov	r1, r3
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 faa0 	bl	8008ebc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800897c:	897b      	ldrh	r3, [r7, #10]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	4619      	mov	r1, r3
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 fa9a 	bl	8008ebc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008988:	2300      	movs	r3, #0
 800898a:	82bb      	strh	r3, [r7, #20]
 800898c:	e00a      	b.n	80089a4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800898e:	8abb      	ldrh	r3, [r7, #20]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	4413      	add	r3, r2
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	4619      	mov	r1, r3
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 fa8f 	bl	8008ebc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800899e:	8abb      	ldrh	r3, [r7, #20]
 80089a0:	3301      	adds	r3, #1
 80089a2:	82bb      	strh	r3, [r7, #20]
 80089a4:	8aba      	ldrh	r2, [r7, #20]
 80089a6:	893b      	ldrh	r3, [r7, #8]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d3f0      	bcc.n	800898e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80089ac:	f7ff fed0 	bl	8008750 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fb55 	bl	8009060 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	75fb      	strb	r3, [r7, #23]
 80089c2:	e001      	b.n	80089c8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2201      	movs	r2, #1
 80089cc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	715a      	strb	r2, [r3, #5]

    return status;
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
 80089d6:	e000      	b.n	80089da <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80089d8:	2302      	movs	r3, #2
  }
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b088      	sub	sp, #32
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	461a      	mov	r2, r3
 80089ee:	460b      	mov	r3, r1
 80089f0:	817b      	strh	r3, [r7, #10]
 80089f2:	4613      	mov	r3, r2
 80089f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	799b      	ldrb	r3, [r3, #6]
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d14a      	bne.n	8008a9a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	795b      	ldrb	r3, [r3, #5]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d101      	bne.n	8008a10 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e045      	b.n	8008a9c <HAL_SUBGHZ_ReadRegisters+0xba>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2201      	movs	r2, #1
 8008a14:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 fafe 	bl	8009018 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008a1c:	f7ff fea8 	bl	8008770 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008a20:	211d      	movs	r1, #29
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 fa4a 	bl	8008ebc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008a28:	897b      	ldrh	r3, [r7, #10]
 8008a2a:	0a1b      	lsrs	r3, r3, #8
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	4619      	mov	r1, r3
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 fa42 	bl	8008ebc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008a38:	897b      	ldrh	r3, [r7, #10]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 fa3c 	bl	8008ebc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8008a44:	2100      	movs	r1, #0
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 fa38 	bl	8008ebc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	82fb      	strh	r3, [r7, #22]
 8008a50:	e009      	b.n	8008a66 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008a52:	69b9      	ldr	r1, [r7, #24]
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 fa87 	bl	8008f68 <SUBGHZSPI_Receive>
      pData++;
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008a60:	8afb      	ldrh	r3, [r7, #22]
 8008a62:	3301      	adds	r3, #1
 8008a64:	82fb      	strh	r3, [r7, #22]
 8008a66:	8afa      	ldrh	r2, [r7, #22]
 8008a68:	893b      	ldrh	r3, [r7, #8]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d3f1      	bcc.n	8008a52 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008a6e:	f7ff fe6f 	bl	8008750 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 faf4 	bl	8009060 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	77fb      	strb	r3, [r7, #31]
 8008a84:	e001      	b.n	8008a8a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	715a      	strb	r2, [r3, #5]

    return status;
 8008a96:	7ffb      	ldrb	r3, [r7, #31]
 8008a98:	e000      	b.n	8008a9c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008a9a:	2302      	movs	r3, #2
  }
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3720      	adds	r7, #32
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	607a      	str	r2, [r7, #4]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	72fb      	strb	r3, [r7, #11]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	799b      	ldrb	r3, [r3, #6]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d14a      	bne.n	8008b58 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	795b      	ldrb	r3, [r3, #5]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d101      	bne.n	8008ace <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8008aca:	2302      	movs	r3, #2
 8008acc:	e045      	b.n	8008b5a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f000 fa9f 	bl	8009018 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	2b84      	cmp	r3, #132	@ 0x84
 8008ade:	d002      	beq.n	8008ae6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8008ae0:	7afb      	ldrb	r3, [r7, #11]
 8008ae2:	2b94      	cmp	r3, #148	@ 0x94
 8008ae4:	d103      	bne.n	8008aee <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	711a      	strb	r2, [r3, #4]
 8008aec:	e002      	b.n	8008af4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008af4:	f7ff fe3c 	bl	8008770 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008af8:	7afb      	ldrb	r3, [r7, #11]
 8008afa:	4619      	mov	r1, r3
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 f9dd 	bl	8008ebc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008b02:	2300      	movs	r3, #0
 8008b04:	82bb      	strh	r3, [r7, #20]
 8008b06:	e00a      	b.n	8008b1e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008b08:	8abb      	ldrh	r3, [r7, #20]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	4619      	mov	r1, r3
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 f9d2 	bl	8008ebc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008b18:	8abb      	ldrh	r3, [r7, #20]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	82bb      	strh	r3, [r7, #20]
 8008b1e:	8aba      	ldrh	r2, [r7, #20]
 8008b20:	893b      	ldrh	r3, [r7, #8]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d3f0      	bcc.n	8008b08 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008b26:	f7ff fe13 	bl	8008750 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8008b2a:	7afb      	ldrb	r3, [r7, #11]
 8008b2c:	2b84      	cmp	r3, #132	@ 0x84
 8008b2e:	d002      	beq.n	8008b36 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fa95 	bl	8009060 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	75fb      	strb	r3, [r7, #23]
 8008b42:	e001      	b.n	8008b48 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	715a      	strb	r2, [r3, #5]

    return status;
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	e000      	b.n	8008b5a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008b58:	2302      	movs	r3, #2
  }
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b088      	sub	sp, #32
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	607a      	str	r2, [r7, #4]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	460b      	mov	r3, r1
 8008b70:	72fb      	strb	r3, [r7, #11]
 8008b72:	4613      	mov	r3, r2
 8008b74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	799b      	ldrb	r3, [r3, #6]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d13d      	bne.n	8008c00 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	795b      	ldrb	r3, [r3, #5]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d101      	bne.n	8008b90 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e038      	b.n	8008c02 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2201      	movs	r2, #1
 8008b94:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 fa3e 	bl	8009018 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008b9c:	f7ff fde8 	bl	8008770 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008ba0:	7afb      	ldrb	r3, [r7, #11]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f989 	bl	8008ebc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008baa:	2100      	movs	r1, #0
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f985 	bl	8008ebc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	82fb      	strh	r3, [r7, #22]
 8008bb6:	e009      	b.n	8008bcc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008bb8:	69b9      	ldr	r1, [r7, #24]
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 f9d4 	bl	8008f68 <SUBGHZSPI_Receive>
      pData++;
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008bc6:	8afb      	ldrh	r3, [r7, #22]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	82fb      	strh	r3, [r7, #22]
 8008bcc:	8afa      	ldrh	r2, [r7, #22]
 8008bce:	893b      	ldrh	r3, [r7, #8]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d3f1      	bcc.n	8008bb8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008bd4:	f7ff fdbc 	bl	8008750 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 fa41 	bl	8009060 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	77fb      	strb	r3, [r7, #31]
 8008bea:	e001      	b.n	8008bf0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	715a      	strb	r2, [r3, #5]

    return status;
 8008bfc:	7ffb      	ldrb	r3, [r7, #31]
 8008bfe:	e000      	b.n	8008c02 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008c00:	2302      	movs	r3, #2
  }
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3720      	adds	r7, #32
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b086      	sub	sp, #24
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	607a      	str	r2, [r7, #4]
 8008c14:	461a      	mov	r2, r3
 8008c16:	460b      	mov	r3, r1
 8008c18:	72fb      	strb	r3, [r7, #11]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	799b      	ldrb	r3, [r3, #6]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d13e      	bne.n	8008ca6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	795b      	ldrb	r3, [r3, #5]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d101      	bne.n	8008c34 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008c30:	2302      	movs	r3, #2
 8008c32:	e039      	b.n	8008ca8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2201      	movs	r2, #1
 8008c38:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 f9ec 	bl	8009018 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008c40:	f7ff fd96 	bl	8008770 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008c44:	210e      	movs	r1, #14
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 f938 	bl	8008ebc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 f933 	bl	8008ebc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008c56:	2300      	movs	r3, #0
 8008c58:	82bb      	strh	r3, [r7, #20]
 8008c5a:	e00a      	b.n	8008c72 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008c5c:	8abb      	ldrh	r3, [r7, #20]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	4413      	add	r3, r2
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	4619      	mov	r1, r3
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 f928 	bl	8008ebc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008c6c:	8abb      	ldrh	r3, [r7, #20]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	82bb      	strh	r3, [r7, #20]
 8008c72:	8aba      	ldrh	r2, [r7, #20]
 8008c74:	893b      	ldrh	r3, [r7, #8]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d3f0      	bcc.n	8008c5c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008c7a:	f7ff fd69 	bl	8008750 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 f9ee 	bl	8009060 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	75fb      	strb	r3, [r7, #23]
 8008c90:	e001      	b.n	8008c96 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	715a      	strb	r2, [r3, #5]

    return status;
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
 8008ca4:	e000      	b.n	8008ca8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008ca6:	2302      	movs	r3, #2
  }
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	607a      	str	r2, [r7, #4]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	72fb      	strb	r3, [r7, #11]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	799b      	ldrb	r3, [r3, #6]
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d141      	bne.n	8008d56 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	795b      	ldrb	r3, [r3, #5]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d101      	bne.n	8008cde <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008cda:	2302      	movs	r3, #2
 8008cdc:	e03c      	b.n	8008d58 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f000 f997 	bl	8009018 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008cea:	f7ff fd41 	bl	8008770 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008cee:	211e      	movs	r1, #30
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 f8e3 	bl	8008ebc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008cf6:	7afb      	ldrb	r3, [r7, #11]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 f8de 	bl	8008ebc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008d00:	2100      	movs	r1, #0
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 f8da 	bl	8008ebc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008d08:	2300      	movs	r3, #0
 8008d0a:	82fb      	strh	r3, [r7, #22]
 8008d0c:	e009      	b.n	8008d22 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008d0e:	69b9      	ldr	r1, [r7, #24]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 f929 	bl	8008f68 <SUBGHZSPI_Receive>
      pData++;
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008d1c:	8afb      	ldrh	r3, [r7, #22]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	82fb      	strh	r3, [r7, #22]
 8008d22:	8afa      	ldrh	r2, [r7, #22]
 8008d24:	893b      	ldrh	r3, [r7, #8]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d3f1      	bcc.n	8008d0e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008d2a:	f7ff fd11 	bl	8008750 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 f996 	bl	8009060 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	77fb      	strb	r3, [r7, #31]
 8008d40:	e001      	b.n	8008d46 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	715a      	strb	r2, [r3, #5]

    return status;
 8008d52:	7ffb      	ldrb	r3, [r7, #31]
 8008d54:	e000      	b.n	8008d58 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008d56:	2302      	movs	r3, #2
  }
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8008d68:	2300      	movs	r3, #0
 8008d6a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008d6c:	f107 020c 	add.w	r2, r7, #12
 8008d70:	2302      	movs	r3, #2
 8008d72:	2112      	movs	r1, #18
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff fef4 	bl	8008b62 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008d7a:	7b3b      	ldrb	r3, [r7, #12]
 8008d7c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008d7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	b21a      	sxth	r2, r3
 8008d86:	7b7b      	ldrb	r3, [r7, #13]
 8008d88:	b21b      	sxth	r3, r3
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	b21b      	sxth	r3, r3
 8008d8e:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8008d90:	f107 020c 	add.w	r2, r7, #12
 8008d94:	2302      	movs	r3, #2
 8008d96:	2102      	movs	r1, #2
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff fe83 	bl	8008aa4 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008d9e:	89fb      	ldrh	r3, [r7, #14]
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f013 f97b 	bl	801c0a4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8008dae:	89fb      	ldrh	r3, [r7, #14]
 8008db0:	085b      	lsrs	r3, r3, #1
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d008      	beq.n	8008dcc <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8008dba:	89fb      	ldrh	r3, [r7, #14]
 8008dbc:	099b      	lsrs	r3, r3, #6
 8008dbe:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d102      	bne.n	8008dcc <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f013 f97a 	bl	801c0c0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008dcc:	89fb      	ldrh	r3, [r7, #14]
 8008dce:	089b      	lsrs	r3, r3, #2
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f013 f9c9 	bl	801c170 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008dde:	89fb      	ldrh	r3, [r7, #14]
 8008de0:	08db      	lsrs	r3, r3, #3
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d002      	beq.n	8008df0 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f013 f9ce 	bl	801c18c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008df0:	89fb      	ldrh	r3, [r7, #14]
 8008df2:	091b      	lsrs	r3, r3, #4
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f013 f9d3 	bl	801c1a8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008e02:	89fb      	ldrh	r3, [r7, #14]
 8008e04:	095b      	lsrs	r3, r3, #5
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d002      	beq.n	8008e14 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f013 f9a0 	bl	801c154 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008e14:	89fb      	ldrh	r3, [r7, #14]
 8008e16:	099b      	lsrs	r3, r3, #6
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f013 f95b 	bl	801c0dc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008e26:	89fb      	ldrh	r3, [r7, #14]
 8008e28:	09db      	lsrs	r3, r3, #7
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00e      	beq.n	8008e50 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008e32:	89fb      	ldrh	r3, [r7, #14]
 8008e34:	0a1b      	lsrs	r3, r3, #8
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d004      	beq.n	8008e48 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008e3e:	2101      	movs	r1, #1
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f013 f959 	bl	801c0f8 <HAL_SUBGHZ_CADStatusCallback>
 8008e46:	e003      	b.n	8008e50 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008e48:	2100      	movs	r1, #0
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f013 f954 	bl	801c0f8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008e50:	89fb      	ldrh	r3, [r7, #14]
 8008e52:	0a5b      	lsrs	r3, r3, #9
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f013 f969 	bl	801c134 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8008e62:	89fb      	ldrh	r3, [r7, #14]
 8008e64:	0b9b      	lsrs	r3, r3, #14
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f013 f9a8 	bl	801c1c4 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8008e74:	bf00      	nop
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008e84:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb8 <SUBGHZSPI_Init+0x3c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a0b      	ldr	r2, [pc, #44]	@ (8008eb8 <SUBGHZSPI_Init+0x3c>)
 8008e8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e8e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008e90:	4a09      	ldr	r2, [pc, #36]	@ (8008eb8 <SUBGHZSPI_Init+0x3c>)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8008e98:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008e9a:	4b07      	ldr	r3, [pc, #28]	@ (8008eb8 <SUBGHZSPI_Init+0x3c>)
 8008e9c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8008ea0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008ea2:	4b05      	ldr	r3, [pc, #20]	@ (8008eb8 <SUBGHZSPI_Init+0x3c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a04      	ldr	r2, [pc, #16]	@ (8008eb8 <SUBGHZSPI_Init+0x3c>)
 8008ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eac:	6013      	str	r3, [r2, #0]
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bc80      	pop	{r7}
 8008eb6:	4770      	bx	lr
 8008eb8:	58010000 	.word	0x58010000

08008ebc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008ecc:	4b23      	ldr	r3, [pc, #140]	@ (8008f5c <SUBGHZSPI_Transmit+0xa0>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	1a9b      	subs	r3, r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	0cdb      	lsrs	r3, r3, #19
 8008eda:	2264      	movs	r2, #100	@ 0x64
 8008edc:	fb02 f303 	mul.w	r3, r2, r3
 8008ee0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d105      	bne.n	8008ef4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	609a      	str	r2, [r3, #8]
      break;
 8008ef2:	e008      	b.n	8008f06 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008efa:	4b19      	ldr	r3, [pc, #100]	@ (8008f60 <SUBGHZSPI_Transmit+0xa4>)
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d1ed      	bne.n	8008ee2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008f06:	4b17      	ldr	r3, [pc, #92]	@ (8008f64 <SUBGHZSPI_Transmit+0xa8>)
 8008f08:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	78fa      	ldrb	r2, [r7, #3]
 8008f0e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008f10:	4b12      	ldr	r3, [pc, #72]	@ (8008f5c <SUBGHZSPI_Transmit+0xa0>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	4613      	mov	r3, r2
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	1a9b      	subs	r3, r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	0cdb      	lsrs	r3, r3, #19
 8008f1e:	2264      	movs	r2, #100	@ 0x64
 8008f20:	fb02 f303 	mul.w	r3, r2, r3
 8008f24:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d105      	bne.n	8008f38 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	609a      	str	r2, [r3, #8]
      break;
 8008f36:	e008      	b.n	8008f4a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008f3e:	4b08      	ldr	r3, [pc, #32]	@ (8008f60 <SUBGHZSPI_Transmit+0xa4>)
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d1ed      	bne.n	8008f26 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008f4a:	4b05      	ldr	r3, [pc, #20]	@ (8008f60 <SUBGHZSPI_Transmit+0xa4>)
 8008f4c:	68db      	ldr	r3, [r3, #12]

  return status;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bc80      	pop	{r7}
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20000000 	.word	0x20000000
 8008f60:	58010000 	.word	0x58010000
 8008f64:	5801000c 	.word	0x5801000c

08008f68 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008f76:	4b25      	ldr	r3, [pc, #148]	@ (800900c <SUBGHZSPI_Receive+0xa4>)
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	1a9b      	subs	r3, r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	0cdb      	lsrs	r3, r3, #19
 8008f84:	2264      	movs	r2, #100	@ 0x64
 8008f86:	fb02 f303 	mul.w	r3, r2, r3
 8008f8a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d105      	bne.n	8008f9e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	609a      	str	r2, [r3, #8]
      break;
 8008f9c:	e008      	b.n	8008fb0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8009010 <SUBGHZSPI_Receive+0xa8>)
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d1ed      	bne.n	8008f8c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008fb0:	4b18      	ldr	r3, [pc, #96]	@ (8009014 <SUBGHZSPI_Receive+0xac>)
 8008fb2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	22ff      	movs	r2, #255	@ 0xff
 8008fb8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008fba:	4b14      	ldr	r3, [pc, #80]	@ (800900c <SUBGHZSPI_Receive+0xa4>)
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	1a9b      	subs	r3, r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	0cdb      	lsrs	r3, r3, #19
 8008fc8:	2264      	movs	r2, #100	@ 0x64
 8008fca:	fb02 f303 	mul.w	r3, r2, r3
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d105      	bne.n	8008fe2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	609a      	str	r2, [r3, #8]
      break;
 8008fe0:	e008      	b.n	8008ff4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008fe8:	4b09      	ldr	r3, [pc, #36]	@ (8009010 <SUBGHZSPI_Receive+0xa8>)
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f003 0301 	and.w	r3, r3, #1
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d1ed      	bne.n	8008fd0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008ff4:	4b06      	ldr	r3, [pc, #24]	@ (8009010 <SUBGHZSPI_Receive+0xa8>)
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	701a      	strb	r2, [r3, #0]

  return status;
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009000:	4618      	mov	r0, r3
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	bc80      	pop	{r7}
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	20000000 	.word	0x20000000
 8009010:	58010000 	.word	0x58010000
 8009014:	5801000c 	.word	0x5801000c

08009018 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	791b      	ldrb	r3, [r3, #4]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d111      	bne.n	800904c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8009028:	4b0c      	ldr	r3, [pc, #48]	@ (800905c <SUBGHZ_CheckDeviceReady+0x44>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	4613      	mov	r3, r2
 800902e:	005b      	lsls	r3, r3, #1
 8009030:	4413      	add	r3, r2
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	0c1b      	lsrs	r3, r3, #16
 8009036:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009038:	f7ff fb9a 	bl	8008770 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	3b01      	subs	r3, #1
 8009040:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1f9      	bne.n	800903c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009048:	f7ff fb82 	bl	8008750 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f807 	bl	8009060 <SUBGHZ_WaitOnBusy>
 8009052:	4603      	mov	r3, r0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	20000000 	.word	0x20000000

08009060 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800906c:	4b12      	ldr	r3, [pc, #72]	@ (80090b8 <SUBGHZ_WaitOnBusy+0x58>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	4613      	mov	r3, r2
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	4413      	add	r3, r2
 8009076:	00db      	lsls	r3, r3, #3
 8009078:	0d1b      	lsrs	r3, r3, #20
 800907a:	2264      	movs	r2, #100	@ 0x64
 800907c:	fb02 f303 	mul.w	r3, r2, r3
 8009080:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8009082:	f7ff fba3 	bl	80087cc <LL_PWR_IsActiveFlag_RFBUSYMS>
 8009086:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d105      	bne.n	800909a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2202      	movs	r2, #2
 8009096:	609a      	str	r2, [r3, #8]
      break;
 8009098:	e009      	b.n	80090ae <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3b01      	subs	r3, #1
 800909e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80090a0:	f7ff fb82 	bl	80087a8 <LL_PWR_IsActiveFlag_RFBUSYS>
 80090a4:	4602      	mov	r2, r0
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	4013      	ands	r3, r2
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d0e9      	beq.n	8009082 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	20000000 	.word	0x20000000

080090bc <LL_RCC_GetUSARTClockSource>:
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80090c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	401a      	ands	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	041b      	lsls	r3, r3, #16
 80090d4:	4313      	orrs	r3, r2
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	bc80      	pop	{r7}
 80090de:	4770      	bx	lr

080090e0 <LL_RCC_GetLPUARTClockSource>:
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80090e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4013      	ands	r3, r2
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bc80      	pop	{r7}
 80090fc:	4770      	bx	lr

080090fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e042      	b.n	8009196 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7fa f882 	bl	800322c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2224      	movs	r2, #36	@ 0x24
 800912c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f022 0201 	bic.w	r2, r2, #1
 800913e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 feab 	bl	8009ea4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fc34 	bl	80099bc <UART_SetConfig>
 8009154:	4603      	mov	r3, r0
 8009156:	2b01      	cmp	r3, #1
 8009158:	d101      	bne.n	800915e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e01b      	b.n	8009196 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800916c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800917c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f042 0201 	orr.w	r2, r2, #1
 800918c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 ff29 	bl	8009fe6 <UART_CheckIdleState>
 8009194:	4603      	mov	r3, r0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
	...

080091a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	@ 0x28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	4613      	mov	r3, r2
 80091ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091b4:	2b20      	cmp	r3, #32
 80091b6:	d137      	bne.n	8009228 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <HAL_UART_Receive_IT+0x24>
 80091be:	88fb      	ldrh	r3, [r7, #6]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e030      	b.n	800922a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a18      	ldr	r2, [pc, #96]	@ (8009234 <HAL_UART_Receive_IT+0x94>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d01f      	beq.n	8009218 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d018      	beq.n	8009218 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	613b      	str	r3, [r7, #16]
   return(result);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80091fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	461a      	mov	r2, r3
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	623b      	str	r3, [r7, #32]
 8009206:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	69f9      	ldr	r1, [r7, #28]
 800920a:	6a3a      	ldr	r2, [r7, #32]
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	61bb      	str	r3, [r7, #24]
   return(result);
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e6      	bne.n	80091e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	461a      	mov	r2, r3
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 fffe 	bl	800a220 <UART_Start_Receive_IT>
 8009224:	4603      	mov	r3, r0
 8009226:	e000      	b.n	800922a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009228:	2302      	movs	r3, #2
  }
}
 800922a:	4618      	mov	r0, r3
 800922c:	3728      	adds	r7, #40	@ 0x28
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	40008000 	.word	0x40008000

08009238 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08a      	sub	sp, #40	@ 0x28
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	4613      	mov	r3, r2
 8009244:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800924c:	2b20      	cmp	r3, #32
 800924e:	d167      	bne.n	8009320 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d002      	beq.n	800925c <HAL_UART_Transmit_DMA+0x24>
 8009256:	88fb      	ldrh	r3, [r7, #6]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e060      	b.n	8009322 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	88fa      	ldrh	r2, [r7, #6]
 800926a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	88fa      	ldrh	r2, [r7, #6]
 8009272:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2221      	movs	r2, #33	@ 0x21
 8009282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d028      	beq.n	80092e0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009292:	4a26      	ldr	r2, [pc, #152]	@ (800932c <HAL_UART_Transmit_DMA+0xf4>)
 8009294:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800929a:	4a25      	ldr	r2, [pc, #148]	@ (8009330 <HAL_UART_Transmit_DMA+0xf8>)
 800929c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092a2:	4a24      	ldr	r2, [pc, #144]	@ (8009334 <HAL_UART_Transmit_DMA+0xfc>)
 80092a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092aa:	2200      	movs	r2, #0
 80092ac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092b6:	4619      	mov	r1, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3328      	adds	r3, #40	@ 0x28
 80092be:	461a      	mov	r2, r3
 80092c0:	88fb      	ldrh	r3, [r7, #6]
 80092c2:	f7fb fe15 	bl	8004ef0 <HAL_DMA_Start_IT>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d009      	beq.n	80092e0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2210      	movs	r2, #16
 80092d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e020      	b.n	8009322 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2240      	movs	r2, #64	@ 0x40
 80092e6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3308      	adds	r3, #8
 80092ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	e853 3f00 	ldrex	r3, [r3]
 80092f6:	613b      	str	r3, [r7, #16]
   return(result);
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3308      	adds	r3, #8
 8009306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009308:	623a      	str	r2, [r7, #32]
 800930a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	69f9      	ldr	r1, [r7, #28]
 800930e:	6a3a      	ldr	r2, [r7, #32]
 8009310:	e841 2300 	strex	r3, r2, [r1]
 8009314:	61bb      	str	r3, [r7, #24]
   return(result);
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e5      	bne.n	80092e8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	e000      	b.n	8009322 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009320:	2302      	movs	r3, #2
  }
}
 8009322:	4618      	mov	r0, r3
 8009324:	3728      	adds	r7, #40	@ 0x28
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	0800a5ab 	.word	0x0800a5ab
 8009330:	0800a645 	.word	0x0800a645
 8009334:	0800a661 	.word	0x0800a661

08009338 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b0ba      	sub	sp, #232	@ 0xe8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	69db      	ldr	r3, [r3, #28]
 8009346:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800935e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009362:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009366:	4013      	ands	r3, r2
 8009368:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800936c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009370:	2b00      	cmp	r3, #0
 8009372:	d11b      	bne.n	80093ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009378:	f003 0320 	and.w	r3, r3, #32
 800937c:	2b00      	cmp	r3, #0
 800937e:	d015      	beq.n	80093ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d105      	bne.n	8009398 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800938c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d009      	beq.n	80093ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 82e3 	beq.w	8009968 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	4798      	blx	r3
      }
      return;
 80093aa:	e2dd      	b.n	8009968 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 8123 	beq.w	80095fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80093b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80093ba:	4b8d      	ldr	r3, [pc, #564]	@ (80095f0 <HAL_UART_IRQHandler+0x2b8>)
 80093bc:	4013      	ands	r3, r2
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80093c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80093c6:	4b8b      	ldr	r3, [pc, #556]	@ (80095f4 <HAL_UART_IRQHandler+0x2bc>)
 80093c8:	4013      	ands	r3, r2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 8116 	beq.w	80095fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d011      	beq.n	8009400 <HAL_UART_IRQHandler+0xc8>
 80093dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2201      	movs	r2, #1
 80093ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f6:	f043 0201 	orr.w	r2, r3, #1
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d011      	beq.n	8009430 <HAL_UART_IRQHandler+0xf8>
 800940c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00b      	beq.n	8009430 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2202      	movs	r2, #2
 800941e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009426:	f043 0204 	orr.w	r2, r3, #4
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d011      	beq.n	8009460 <HAL_UART_IRQHandler+0x128>
 800943c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00b      	beq.n	8009460 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2204      	movs	r2, #4
 800944e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009456:	f043 0202 	orr.w	r2, r3, #2
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009464:	f003 0308 	and.w	r3, r3, #8
 8009468:	2b00      	cmp	r3, #0
 800946a:	d017      	beq.n	800949c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800946c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009470:	f003 0320 	and.w	r3, r3, #32
 8009474:	2b00      	cmp	r3, #0
 8009476:	d105      	bne.n	8009484 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009478:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800947c:	4b5c      	ldr	r3, [pc, #368]	@ (80095f0 <HAL_UART_IRQHandler+0x2b8>)
 800947e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00b      	beq.n	800949c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2208      	movs	r2, #8
 800948a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009492:	f043 0208 	orr.w	r2, r3, #8
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800949c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d012      	beq.n	80094ce <HAL_UART_IRQHandler+0x196>
 80094a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00c      	beq.n	80094ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094c4:	f043 0220 	orr.w	r2, r3, #32
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 8249 	beq.w	800996c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d013      	beq.n	800950e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094ea:	f003 0320 	and.w	r3, r3, #32
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d105      	bne.n	80094fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d007      	beq.n	800950e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009502:	2b00      	cmp	r3, #0
 8009504:	d003      	beq.n	800950e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009514:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009522:	2b40      	cmp	r3, #64	@ 0x40
 8009524:	d005      	beq.n	8009532 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800952a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800952e:	2b00      	cmp	r3, #0
 8009530:	d054      	beq.n	80095dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 ffd4 	bl	800a4e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009542:	2b40      	cmp	r3, #64	@ 0x40
 8009544:	d146      	bne.n	80095d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3308      	adds	r3, #8
 800954c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800955c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009560:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3308      	adds	r3, #8
 800956e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009572:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800957e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009582:	e841 2300 	strex	r3, r2, [r1]
 8009586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800958a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1d9      	bne.n	8009546 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009598:	2b00      	cmp	r3, #0
 800959a:	d017      	beq.n	80095cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095a2:	4a15      	ldr	r2, [pc, #84]	@ (80095f8 <HAL_UART_IRQHandler+0x2c0>)
 80095a4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fb fd7b 	bl	80050a8 <HAL_DMA_Abort_IT>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d019      	beq.n	80095ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80095c6:	4610      	mov	r0, r2
 80095c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ca:	e00f      	b.n	80095ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f9e0 	bl	8009992 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d2:	e00b      	b.n	80095ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f9dc 	bl	8009992 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095da:	e007      	b.n	80095ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f9d8 	bl	8009992 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80095ea:	e1bf      	b.n	800996c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ec:	bf00      	nop
    return;
 80095ee:	e1bd      	b.n	800996c <HAL_UART_IRQHandler+0x634>
 80095f0:	10000001 	.word	0x10000001
 80095f4:	04000120 	.word	0x04000120
 80095f8:	0800a6e1 	.word	0x0800a6e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009600:	2b01      	cmp	r3, #1
 8009602:	f040 8153 	bne.w	80098ac <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800960a:	f003 0310 	and.w	r3, r3, #16
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 814c 	beq.w	80098ac <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009618:	f003 0310 	and.w	r3, r3, #16
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 8145 	beq.w	80098ac <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2210      	movs	r2, #16
 8009628:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009634:	2b40      	cmp	r3, #64	@ 0x40
 8009636:	f040 80bb 	bne.w	80097b0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009648:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 818f 	beq.w	8009970 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800965c:	429a      	cmp	r2, r3
 800965e:	f080 8187 	bcs.w	8009970 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009668:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b00      	cmp	r3, #0
 800967c:	f040 8087 	bne.w	800978e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800968c:	e853 3f00 	ldrex	r3, [r3]
 8009690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009694:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800969c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	461a      	mov	r2, r3
 80096a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80096aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80096ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80096b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80096c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1da      	bne.n	8009680 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3308      	adds	r3, #8
 80096d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096d4:	e853 3f00 	ldrex	r3, [r3]
 80096d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80096da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096dc:	f023 0301 	bic.w	r3, r3, #1
 80096e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3308      	adds	r3, #8
 80096ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80096ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80096f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80096f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e1      	bne.n	80096ca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3308      	adds	r3, #8
 800970c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800971c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3308      	adds	r3, #8
 8009726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800972a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800972c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009730:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009732:	e841 2300 	strex	r3, r2, [r1]
 8009736:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009738:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e3      	bne.n	8009706 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2220      	movs	r2, #32
 8009742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800975a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800975c:	f023 0310 	bic.w	r3, r3, #16
 8009760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	461a      	mov	r2, r3
 800976a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800976e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009770:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009772:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009774:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009776:	e841 2300 	strex	r3, r2, [r1]
 800977a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800977c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1e4      	bne.n	800974c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009788:	4618      	mov	r0, r3
 800978a:	f7fb fc2f 	bl	8004fec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2202      	movs	r2, #2
 8009792:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f8fb 	bl	80099a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097ae:	e0df      	b.n	8009970 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097bc:	b29b      	uxth	r3, r3
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 80d1 	beq.w	8009974 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80097d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 80cc 	beq.w	8009974 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e4:	e853 3f00 	ldrex	r3, [r3]
 80097e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	461a      	mov	r2, r3
 80097fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009800:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009804:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009806:	e841 2300 	strex	r3, r2, [r1]
 800980a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800980c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e4      	bne.n	80097dc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	623b      	str	r3, [r7, #32]
   return(result);
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009828:	f023 0301 	bic.w	r3, r3, #1
 800982c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3308      	adds	r3, #8
 8009836:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800983a:	633a      	str	r2, [r7, #48]	@ 0x30
 800983c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e1      	bne.n	8009812 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2220      	movs	r2, #32
 8009852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	e853 3f00 	ldrex	r3, [r3]
 800986e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f023 0310 	bic.w	r3, r3, #16
 8009876:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009884:	61fb      	str	r3, [r7, #28]
 8009886:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009888:	69b9      	ldr	r1, [r7, #24]
 800988a:	69fa      	ldr	r2, [r7, #28]
 800988c:	e841 2300 	strex	r3, r2, [r1]
 8009890:	617b      	str	r3, [r7, #20]
   return(result);
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e4      	bne.n	8009862 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2202      	movs	r2, #2
 800989c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800989e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f87d 	bl	80099a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098aa:	e063      	b.n	8009974 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00e      	beq.n	80098d6 <HAL_UART_IRQHandler+0x59e>
 80098b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d008      	beq.n	80098d6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80098cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 fc64 	bl	800b19c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098d4:	e051      	b.n	800997a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d014      	beq.n	800990c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d105      	bne.n	80098fa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d008      	beq.n	800990c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d03a      	beq.n	8009978 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	4798      	blx	r3
    }
    return;
 800990a:	e035      	b.n	8009978 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800990c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009914:	2b00      	cmp	r3, #0
 8009916:	d009      	beq.n	800992c <HAL_UART_IRQHandler+0x5f4>
 8009918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800991c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009920:	2b00      	cmp	r3, #0
 8009922:	d003      	beq.n	800992c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fef1 	bl	800a70c <UART_EndTransmit_IT>
    return;
 800992a:	e026      	b.n	800997a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800992c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009930:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d009      	beq.n	800994c <HAL_UART_IRQHandler+0x614>
 8009938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800993c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d003      	beq.n	800994c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f001 fc3b 	bl	800b1c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800994a:	e016      	b.n	800997a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800994c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009950:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d010      	beq.n	800997a <HAL_UART_IRQHandler+0x642>
 8009958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800995c:	2b00      	cmp	r3, #0
 800995e:	da0c      	bge.n	800997a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f001 fc24 	bl	800b1ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009966:	e008      	b.n	800997a <HAL_UART_IRQHandler+0x642>
      return;
 8009968:	bf00      	nop
 800996a:	e006      	b.n	800997a <HAL_UART_IRQHandler+0x642>
    return;
 800996c:	bf00      	nop
 800996e:	e004      	b.n	800997a <HAL_UART_IRQHandler+0x642>
      return;
 8009970:	bf00      	nop
 8009972:	e002      	b.n	800997a <HAL_UART_IRQHandler+0x642>
      return;
 8009974:	bf00      	nop
 8009976:	e000      	b.n	800997a <HAL_UART_IRQHandler+0x642>
    return;
 8009978:	bf00      	nop
  }
}
 800997a:	37e8      	adds	r7, #232	@ 0xe8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	bc80      	pop	{r7}
 8009990:	4770      	bx	lr

08009992 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009992:	b480      	push	{r7}
 8009994:	b083      	sub	sp, #12
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800999a:	bf00      	nop
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	bc80      	pop	{r7}
 80099a2:	4770      	bx	lr

080099a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bc80      	pop	{r7}
 80099b8:	4770      	bx	lr
	...

080099bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099c0:	b08c      	sub	sp, #48	@ 0x30
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	689a      	ldr	r2, [r3, #8]
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	431a      	orrs	r2, r3
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	431a      	orrs	r2, r3
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	4b94      	ldr	r3, [pc, #592]	@ (8009c3c <UART_SetConfig+0x280>)
 80099ec:	4013      	ands	r3, r2
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	6812      	ldr	r2, [r2, #0]
 80099f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099f4:	430b      	orrs	r3, r1
 80099f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	68da      	ldr	r2, [r3, #12]
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a89      	ldr	r2, [pc, #548]	@ (8009c40 <UART_SetConfig+0x284>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d004      	beq.n	8009a28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a24:	4313      	orrs	r3, r2
 8009a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009a32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	6812      	ldr	r2, [r2, #0]
 8009a3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a3c:	430b      	orrs	r3, r1
 8009a3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a46:	f023 010f 	bic.w	r1, r3, #15
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	430a      	orrs	r2, r1
 8009a54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a7a      	ldr	r2, [pc, #488]	@ (8009c44 <UART_SetConfig+0x288>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d127      	bne.n	8009ab0 <UART_SetConfig+0xf4>
 8009a60:	2003      	movs	r0, #3
 8009a62:	f7ff fb2b 	bl	80090bc <LL_RCC_GetUSARTClockSource>
 8009a66:	4603      	mov	r3, r0
 8009a68:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d81b      	bhi.n	8009aa8 <UART_SetConfig+0xec>
 8009a70:	a201      	add	r2, pc, #4	@ (adr r2, 8009a78 <UART_SetConfig+0xbc>)
 8009a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a76:	bf00      	nop
 8009a78:	08009a89 	.word	0x08009a89
 8009a7c:	08009a99 	.word	0x08009a99
 8009a80:	08009a91 	.word	0x08009a91
 8009a84:	08009aa1 	.word	0x08009aa1
 8009a88:	2301      	movs	r3, #1
 8009a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a8e:	e080      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009a90:	2302      	movs	r3, #2
 8009a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a96:	e07c      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009a98:	2304      	movs	r3, #4
 8009a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a9e:	e078      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aa6:	e074      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009aa8:	2310      	movs	r3, #16
 8009aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aae:	e070      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a64      	ldr	r2, [pc, #400]	@ (8009c48 <UART_SetConfig+0x28c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d138      	bne.n	8009b2c <UART_SetConfig+0x170>
 8009aba:	200c      	movs	r0, #12
 8009abc:	f7ff fafe 	bl	80090bc <LL_RCC_GetUSARTClockSource>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8009ac6:	2b0c      	cmp	r3, #12
 8009ac8:	d82c      	bhi.n	8009b24 <UART_SetConfig+0x168>
 8009aca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <UART_SetConfig+0x114>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009b05 	.word	0x08009b05
 8009ad4:	08009b25 	.word	0x08009b25
 8009ad8:	08009b25 	.word	0x08009b25
 8009adc:	08009b25 	.word	0x08009b25
 8009ae0:	08009b15 	.word	0x08009b15
 8009ae4:	08009b25 	.word	0x08009b25
 8009ae8:	08009b25 	.word	0x08009b25
 8009aec:	08009b25 	.word	0x08009b25
 8009af0:	08009b0d 	.word	0x08009b0d
 8009af4:	08009b25 	.word	0x08009b25
 8009af8:	08009b25 	.word	0x08009b25
 8009afc:	08009b25 	.word	0x08009b25
 8009b00:	08009b1d 	.word	0x08009b1d
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b0a:	e042      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b12:	e03e      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009b14:	2304      	movs	r3, #4
 8009b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b1a:	e03a      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b22:	e036      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009b24:	2310      	movs	r3, #16
 8009b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b2a:	e032      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a43      	ldr	r2, [pc, #268]	@ (8009c40 <UART_SetConfig+0x284>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d12a      	bne.n	8009b8c <UART_SetConfig+0x1d0>
 8009b36:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8009b3a:	f7ff fad1 	bl	80090e0 <LL_RCC_GetLPUARTClockSource>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b44:	d01a      	beq.n	8009b7c <UART_SetConfig+0x1c0>
 8009b46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b4a:	d81b      	bhi.n	8009b84 <UART_SetConfig+0x1c8>
 8009b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b50:	d00c      	beq.n	8009b6c <UART_SetConfig+0x1b0>
 8009b52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b56:	d815      	bhi.n	8009b84 <UART_SetConfig+0x1c8>
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <UART_SetConfig+0x1a8>
 8009b5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b60:	d008      	beq.n	8009b74 <UART_SetConfig+0x1b8>
 8009b62:	e00f      	b.n	8009b84 <UART_SetConfig+0x1c8>
 8009b64:	2300      	movs	r3, #0
 8009b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b6a:	e012      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b72:	e00e      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009b74:	2304      	movs	r3, #4
 8009b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b7a:	e00a      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009b7c:	2308      	movs	r3, #8
 8009b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b82:	e006      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009b84:	2310      	movs	r3, #16
 8009b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b8a:	e002      	b.n	8009b92 <UART_SetConfig+0x1d6>
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a2a      	ldr	r2, [pc, #168]	@ (8009c40 <UART_SetConfig+0x284>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	f040 80a4 	bne.w	8009ce6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ba2:	2b08      	cmp	r3, #8
 8009ba4:	d823      	bhi.n	8009bee <UART_SetConfig+0x232>
 8009ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bac <UART_SetConfig+0x1f0>)
 8009ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bac:	08009bd1 	.word	0x08009bd1
 8009bb0:	08009bef 	.word	0x08009bef
 8009bb4:	08009bd9 	.word	0x08009bd9
 8009bb8:	08009bef 	.word	0x08009bef
 8009bbc:	08009bdf 	.word	0x08009bdf
 8009bc0:	08009bef 	.word	0x08009bef
 8009bc4:	08009bef 	.word	0x08009bef
 8009bc8:	08009bef 	.word	0x08009bef
 8009bcc:	08009be7 	.word	0x08009be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bd0:	f7fd ff3a 	bl	8007a48 <HAL_RCC_GetPCLK1Freq>
 8009bd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bd6:	e010      	b.n	8009bfa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8009c4c <UART_SetConfig+0x290>)
 8009bda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bdc:	e00d      	b.n	8009bfa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bde:	f7fd fe7f 	bl	80078e0 <HAL_RCC_GetSysClockFreq>
 8009be2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009be4:	e009      	b.n	8009bfa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bec:	e005      	b.n	8009bfa <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009bf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 8137 	beq.w	8009e70 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c06:	4a12      	ldr	r2, [pc, #72]	@ (8009c50 <UART_SetConfig+0x294>)
 8009c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	005b      	lsls	r3, r3, #1
 8009c1e:	4413      	add	r3, r2
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d305      	bcc.n	8009c32 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d910      	bls.n	8009c54 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c38:	e11a      	b.n	8009e70 <UART_SetConfig+0x4b4>
 8009c3a:	bf00      	nop
 8009c3c:	cfff69f3 	.word	0xcfff69f3
 8009c40:	40008000 	.word	0x40008000
 8009c44:	40013800 	.word	0x40013800
 8009c48:	40004400 	.word	0x40004400
 8009c4c:	00f42400 	.word	0x00f42400
 8009c50:	0802122c 	.word	0x0802122c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c56:	2200      	movs	r2, #0
 8009c58:	60bb      	str	r3, [r7, #8]
 8009c5a:	60fa      	str	r2, [r7, #12]
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c60:	4a8e      	ldr	r2, [pc, #568]	@ (8009e9c <UART_SetConfig+0x4e0>)
 8009c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2200      	movs	r2, #0
 8009c6a:	603b      	str	r3, [r7, #0]
 8009c6c:	607a      	str	r2, [r7, #4]
 8009c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c76:	f7f7 fa63 	bl	8001140 <__aeabi_uldivmod>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4610      	mov	r0, r2
 8009c80:	4619      	mov	r1, r3
 8009c82:	f04f 0200 	mov.w	r2, #0
 8009c86:	f04f 0300 	mov.w	r3, #0
 8009c8a:	020b      	lsls	r3, r1, #8
 8009c8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c90:	0202      	lsls	r2, r0, #8
 8009c92:	6979      	ldr	r1, [r7, #20]
 8009c94:	6849      	ldr	r1, [r1, #4]
 8009c96:	0849      	lsrs	r1, r1, #1
 8009c98:	2000      	movs	r0, #0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	eb12 0804 	adds.w	r8, r2, r4
 8009ca2:	eb43 0905 	adc.w	r9, r3, r5
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	469a      	mov	sl, r3
 8009cae:	4693      	mov	fp, r2
 8009cb0:	4652      	mov	r2, sl
 8009cb2:	465b      	mov	r3, fp
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	f7f7 fa42 	bl	8001140 <__aeabi_uldivmod>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cca:	d308      	bcc.n	8009cde <UART_SetConfig+0x322>
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cd2:	d204      	bcs.n	8009cde <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6a3a      	ldr	r2, [r7, #32]
 8009cda:	60da      	str	r2, [r3, #12]
 8009cdc:	e0c8      	b.n	8009e70 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ce4:	e0c4      	b.n	8009e70 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cee:	d167      	bne.n	8009dc0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8009cf0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009cf4:	2b08      	cmp	r3, #8
 8009cf6:	d828      	bhi.n	8009d4a <UART_SetConfig+0x38e>
 8009cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8009d00 <UART_SetConfig+0x344>)
 8009cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfe:	bf00      	nop
 8009d00:	08009d25 	.word	0x08009d25
 8009d04:	08009d2d 	.word	0x08009d2d
 8009d08:	08009d35 	.word	0x08009d35
 8009d0c:	08009d4b 	.word	0x08009d4b
 8009d10:	08009d3b 	.word	0x08009d3b
 8009d14:	08009d4b 	.word	0x08009d4b
 8009d18:	08009d4b 	.word	0x08009d4b
 8009d1c:	08009d4b 	.word	0x08009d4b
 8009d20:	08009d43 	.word	0x08009d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d24:	f7fd fe90 	bl	8007a48 <HAL_RCC_GetPCLK1Freq>
 8009d28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d2a:	e014      	b.n	8009d56 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d2c:	f7fd fe9e 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 8009d30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d32:	e010      	b.n	8009d56 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d34:	4b5a      	ldr	r3, [pc, #360]	@ (8009ea0 <UART_SetConfig+0x4e4>)
 8009d36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d38:	e00d      	b.n	8009d56 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d3a:	f7fd fdd1 	bl	80078e0 <HAL_RCC_GetSysClockFreq>
 8009d3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d40:	e009      	b.n	8009d56 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d48:	e005      	b.n	8009d56 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 8089 	beq.w	8009e70 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d62:	4a4e      	ldr	r2, [pc, #312]	@ (8009e9c <UART_SetConfig+0x4e0>)
 8009d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d70:	005a      	lsls	r2, r3, #1
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	085b      	lsrs	r3, r3, #1
 8009d78:	441a      	add	r2, r3
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d84:	6a3b      	ldr	r3, [r7, #32]
 8009d86:	2b0f      	cmp	r3, #15
 8009d88:	d916      	bls.n	8009db8 <UART_SetConfig+0x3fc>
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d90:	d212      	bcs.n	8009db8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	f023 030f 	bic.w	r3, r3, #15
 8009d9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	085b      	lsrs	r3, r3, #1
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	f003 0307 	and.w	r3, r3, #7
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	8bfb      	ldrh	r3, [r7, #30]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	8bfa      	ldrh	r2, [r7, #30]
 8009db4:	60da      	str	r2, [r3, #12]
 8009db6:	e05b      	b.n	8009e70 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009dbe:	e057      	b.n	8009e70 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dc0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009dc4:	2b08      	cmp	r3, #8
 8009dc6:	d828      	bhi.n	8009e1a <UART_SetConfig+0x45e>
 8009dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd0 <UART_SetConfig+0x414>)
 8009dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dce:	bf00      	nop
 8009dd0:	08009df5 	.word	0x08009df5
 8009dd4:	08009dfd 	.word	0x08009dfd
 8009dd8:	08009e05 	.word	0x08009e05
 8009ddc:	08009e1b 	.word	0x08009e1b
 8009de0:	08009e0b 	.word	0x08009e0b
 8009de4:	08009e1b 	.word	0x08009e1b
 8009de8:	08009e1b 	.word	0x08009e1b
 8009dec:	08009e1b 	.word	0x08009e1b
 8009df0:	08009e13 	.word	0x08009e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009df4:	f7fd fe28 	bl	8007a48 <HAL_RCC_GetPCLK1Freq>
 8009df8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dfa:	e014      	b.n	8009e26 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dfc:	f7fd fe36 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 8009e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e02:	e010      	b.n	8009e26 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e04:	4b26      	ldr	r3, [pc, #152]	@ (8009ea0 <UART_SetConfig+0x4e4>)
 8009e06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e08:	e00d      	b.n	8009e26 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e0a:	f7fd fd69 	bl	80078e0 <HAL_RCC_GetSysClockFreq>
 8009e0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e10:	e009      	b.n	8009e26 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e18:	e005      	b.n	8009e26 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e24:	bf00      	nop
    }

    if (pclk != 0U)
 8009e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d021      	beq.n	8009e70 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e30:	4a1a      	ldr	r2, [pc, #104]	@ (8009e9c <UART_SetConfig+0x4e0>)
 8009e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e36:	461a      	mov	r2, r3
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	085b      	lsrs	r3, r3, #1
 8009e44:	441a      	add	r2, r3
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e50:	6a3b      	ldr	r3, [r7, #32]
 8009e52:	2b0f      	cmp	r3, #15
 8009e54:	d909      	bls.n	8009e6a <UART_SetConfig+0x4ae>
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e5c:	d205      	bcs.n	8009e6a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	60da      	str	r2, [r3, #12]
 8009e68:	e002      	b.n	8009e70 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	2200      	movs	r2, #0
 8009e84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3730      	adds	r7, #48	@ 0x30
 8009e94:	46bd      	mov	sp, r7
 8009e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e9a:	bf00      	nop
 8009e9c:	0802122c 	.word	0x0802122c
 8009ea0:	00f42400 	.word	0x00f42400

08009ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb0:	f003 0308 	and.w	r3, r3, #8
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00a      	beq.n	8009ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00a      	beq.n	8009ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	430a      	orrs	r2, r1
 8009eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef4:	f003 0302 	and.w	r3, r3, #2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00a      	beq.n	8009f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f16:	f003 0304 	and.w	r3, r3, #4
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f38:	f003 0310 	and.w	r3, r3, #16
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00a      	beq.n	8009f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f5a:	f003 0320 	and.w	r3, r3, #32
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00a      	beq.n	8009f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	430a      	orrs	r2, r1
 8009f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01a      	beq.n	8009fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	430a      	orrs	r2, r1
 8009f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fa2:	d10a      	bne.n	8009fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00a      	beq.n	8009fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	430a      	orrs	r2, r1
 8009fda:	605a      	str	r2, [r3, #4]
  }
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bc80      	pop	{r7}
 8009fe4:	4770      	bx	lr

08009fe6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b086      	sub	sp, #24
 8009fea:	af02      	add	r7, sp, #8
 8009fec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ff6:	f7f8 fcdd 	bl	80029b4 <HAL_GetTick>
 8009ffa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0308 	and.w	r3, r3, #8
 800a006:	2b08      	cmp	r3, #8
 800a008:	d10e      	bne.n	800a028 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a00a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f832 	bl	800a082 <UART_WaitOnFlagUntilTimeout>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d001      	beq.n	800a028 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a024:	2303      	movs	r3, #3
 800a026:	e028      	b.n	800a07a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0304 	and.w	r3, r3, #4
 800a032:	2b04      	cmp	r3, #4
 800a034:	d10e      	bne.n	800a054 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a036:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f81c 	bl	800a082 <UART_WaitOnFlagUntilTimeout>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d001      	beq.n	800a054 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e012      	b.n	800a07a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2220      	movs	r2, #32
 800a058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2220      	movs	r2, #32
 800a060:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b09c      	sub	sp, #112	@ 0x70
 800a086:	af00      	add	r7, sp, #0
 800a088:	60f8      	str	r0, [r7, #12]
 800a08a:	60b9      	str	r1, [r7, #8]
 800a08c:	603b      	str	r3, [r7, #0]
 800a08e:	4613      	mov	r3, r2
 800a090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a092:	e0af      	b.n	800a1f4 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a094:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a09a:	f000 80ab 	beq.w	800a1f4 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a09e:	f7f8 fc89 	bl	80029b4 <HAL_GetTick>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d302      	bcc.n	800a0b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a0ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d140      	bne.n	800a136 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0bc:	e853 3f00 	ldrex	r3, [r3]
 800a0c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a0c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0c4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a0c8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0d4:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a0d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a0da:	e841 2300 	strex	r3, r2, [r1]
 800a0de:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a0e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1e6      	bne.n	800a0b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3308      	adds	r3, #8
 800a0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f8:	f023 0301 	bic.w	r3, r3, #1
 800a0fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3308      	adds	r3, #8
 800a104:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a106:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a108:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a10c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e5      	bne.n	800a0e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2220      	movs	r2, #32
 800a11e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2220      	movs	r2, #32
 800a126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e06f      	b.n	800a216 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0304 	and.w	r3, r3, #4
 800a140:	2b00      	cmp	r3, #0
 800a142:	d057      	beq.n	800a1f4 <UART_WaitOnFlagUntilTimeout+0x172>
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2b80      	cmp	r3, #128	@ 0x80
 800a148:	d054      	beq.n	800a1f4 <UART_WaitOnFlagUntilTimeout+0x172>
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2b40      	cmp	r3, #64	@ 0x40
 800a14e:	d051      	beq.n	800a1f4 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a15a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a15e:	d149      	bne.n	800a1f4 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a168:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a172:	e853 3f00 	ldrex	r3, [r3]
 800a176:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a17e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	461a      	mov	r2, r3
 800a186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a188:	637b      	str	r3, [r7, #52]	@ 0x34
 800a18a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a18e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a190:	e841 2300 	strex	r3, r2, [r1]
 800a194:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e6      	bne.n	800a16a <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	e853 3f00 	ldrex	r3, [r3]
 800a1aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f023 0301 	bic.w	r3, r3, #1
 800a1b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a1bc:	623a      	str	r2, [r7, #32]
 800a1be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c0:	69f9      	ldr	r1, [r7, #28]
 800a1c2:	6a3a      	ldr	r2, [r7, #32]
 800a1c4:	e841 2300 	strex	r3, r2, [r1]
 800a1c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e5      	bne.n	800a19c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2220      	movs	r2, #32
 800a1dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2220      	movs	r2, #32
 800a1e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e010      	b.n	800a216 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	69da      	ldr	r2, [r3, #28]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	429a      	cmp	r2, r3
 800a202:	bf0c      	ite	eq
 800a204:	2301      	moveq	r3, #1
 800a206:	2300      	movne	r3, #0
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	461a      	mov	r2, r3
 800a20c:	79fb      	ldrb	r3, [r7, #7]
 800a20e:	429a      	cmp	r2, r3
 800a210:	f43f af40 	beq.w	800a094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3770      	adds	r7, #112	@ 0x70
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
	...

0800a220 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a220:	b480      	push	{r7}
 800a222:	b0a3      	sub	sp, #140	@ 0x8c
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	4613      	mov	r3, r2
 800a22c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	88fa      	ldrh	r2, [r7, #6]
 800a238:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	88fa      	ldrh	r2, [r7, #6]
 800a240:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a252:	d10e      	bne.n	800a272 <UART_Start_Receive_IT+0x52>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d105      	bne.n	800a268 <UART_Start_Receive_IT+0x48>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a262:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a266:	e02d      	b.n	800a2c4 <UART_Start_Receive_IT+0xa4>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	22ff      	movs	r2, #255	@ 0xff
 800a26c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a270:	e028      	b.n	800a2c4 <UART_Start_Receive_IT+0xa4>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10d      	bne.n	800a296 <UART_Start_Receive_IT+0x76>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d104      	bne.n	800a28c <UART_Start_Receive_IT+0x6c>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	22ff      	movs	r2, #255	@ 0xff
 800a286:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a28a:	e01b      	b.n	800a2c4 <UART_Start_Receive_IT+0xa4>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	227f      	movs	r2, #127	@ 0x7f
 800a290:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a294:	e016      	b.n	800a2c4 <UART_Start_Receive_IT+0xa4>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a29e:	d10d      	bne.n	800a2bc <UART_Start_Receive_IT+0x9c>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d104      	bne.n	800a2b2 <UART_Start_Receive_IT+0x92>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	227f      	movs	r2, #127	@ 0x7f
 800a2ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2b0:	e008      	b.n	800a2c4 <UART_Start_Receive_IT+0xa4>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	223f      	movs	r2, #63	@ 0x3f
 800a2b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2ba:	e003      	b.n	800a2c4 <UART_Start_Receive_IT+0xa4>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2222      	movs	r2, #34	@ 0x22
 800a2d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3308      	adds	r3, #8
 800a2da:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2de:	e853 3f00 	ldrex	r3, [r3]
 800a2e2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a2e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2e6:	f043 0301 	orr.w	r3, r3, #1
 800a2ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a2f8:	673a      	str	r2, [r7, #112]	@ 0x70
 800a2fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a2fe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a306:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e3      	bne.n	800a2d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a314:	d14f      	bne.n	800a3b6 <UART_Start_Receive_IT+0x196>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a31c:	88fa      	ldrh	r2, [r7, #6]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d349      	bcc.n	800a3b6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a32a:	d107      	bne.n	800a33c <UART_Start_Receive_IT+0x11c>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d103      	bne.n	800a33c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	4a46      	ldr	r2, [pc, #280]	@ (800a450 <UART_Start_Receive_IT+0x230>)
 800a338:	675a      	str	r2, [r3, #116]	@ 0x74
 800a33a:	e002      	b.n	800a342 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4a45      	ldr	r2, [pc, #276]	@ (800a454 <UART_Start_Receive_IT+0x234>)
 800a340:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d01a      	beq.n	800a380 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a352:	e853 3f00 	ldrex	r3, [r3]
 800a356:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a35a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a35e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	461a      	mov	r2, r3
 800a368:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a36c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a36e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a370:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a372:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a374:	e841 2300 	strex	r3, r2, [r1]
 800a378:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a37a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d1e4      	bne.n	800a34a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3308      	adds	r3, #8
 800a386:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a38a:	e853 3f00 	ldrex	r3, [r3]
 800a38e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a396:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3308      	adds	r3, #8
 800a39e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a3a0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a3a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a3a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3a8:	e841 2300 	strex	r3, r2, [r1]
 800a3ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a3ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1e5      	bne.n	800a380 <UART_Start_Receive_IT+0x160>
 800a3b4:	e046      	b.n	800a444 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3be:	d107      	bne.n	800a3d0 <UART_Start_Receive_IT+0x1b0>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d103      	bne.n	800a3d0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	4a23      	ldr	r2, [pc, #140]	@ (800a458 <UART_Start_Receive_IT+0x238>)
 800a3cc:	675a      	str	r2, [r3, #116]	@ 0x74
 800a3ce:	e002      	b.n	800a3d6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4a22      	ldr	r2, [pc, #136]	@ (800a45c <UART_Start_Receive_IT+0x23c>)
 800a3d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d019      	beq.n	800a412 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e6:	e853 3f00 	ldrex	r3, [r3]
 800a3ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ee:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a3f2:	677b      	str	r3, [r7, #116]	@ 0x74
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3fe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a400:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a402:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a404:	e841 2300 	strex	r3, r2, [r1]
 800a408:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1e6      	bne.n	800a3de <UART_Start_Receive_IT+0x1be>
 800a410:	e018      	b.n	800a444 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	e853 3f00 	ldrex	r3, [r3]
 800a41e:	613b      	str	r3, [r7, #16]
   return(result);
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	f043 0320 	orr.w	r3, r3, #32
 800a426:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	461a      	mov	r2, r3
 800a42e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a430:	623b      	str	r3, [r7, #32]
 800a432:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a434:	69f9      	ldr	r1, [r7, #28]
 800a436:	6a3a      	ldr	r2, [r7, #32]
 800a438:	e841 2300 	strex	r3, r2, [r1]
 800a43c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1e6      	bne.n	800a412 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	378c      	adds	r7, #140	@ 0x8c
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bc80      	pop	{r7}
 800a44e:	4770      	bx	lr
 800a450:	0800ae35 	.word	0x0800ae35
 800a454:	0800aad5 	.word	0x0800aad5
 800a458:	0800a91d 	.word	0x0800a91d
 800a45c:	0800a765 	.word	0x0800a765

0800a460 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a460:	b480      	push	{r7}
 800a462:	b08f      	sub	sp, #60	@ 0x3c
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	e853 3f00 	ldrex	r3, [r3]
 800a474:	61fb      	str	r3, [r7, #28]
   return(result);
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a47c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	461a      	mov	r2, r3
 800a484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a486:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a488:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a48c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a48e:	e841 2300 	strex	r3, r2, [r1]
 800a492:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1e6      	bne.n	800a468 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a4b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3308      	adds	r3, #8
 800a4b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ba:	61ba      	str	r2, [r7, #24]
 800a4bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4be:	6979      	ldr	r1, [r7, #20]
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	e841 2300 	strex	r3, r2, [r1]
 800a4c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1e5      	bne.n	800a49a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2220      	movs	r2, #32
 800a4d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a4d6:	bf00      	nop
 800a4d8:	373c      	adds	r7, #60	@ 0x3c
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bc80      	pop	{r7}
 800a4de:	4770      	bx	lr

0800a4e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b095      	sub	sp, #84	@ 0x54
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	461a      	mov	r2, r3
 800a504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a506:	643b      	str	r3, [r7, #64]	@ 0x40
 800a508:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a50c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a50e:	e841 2300 	strex	r3, r2, [r1]
 800a512:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1e6      	bne.n	800a4e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3308      	adds	r3, #8
 800a520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a522:	6a3b      	ldr	r3, [r7, #32]
 800a524:	e853 3f00 	ldrex	r3, [r3]
 800a528:	61fb      	str	r3, [r7, #28]
   return(result);
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a530:	f023 0301 	bic.w	r3, r3, #1
 800a534:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	3308      	adds	r3, #8
 800a53c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a53e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a540:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a546:	e841 2300 	strex	r3, r2, [r1]
 800a54a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1e3      	bne.n	800a51a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a556:	2b01      	cmp	r3, #1
 800a558:	d118      	bne.n	800a58c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	e853 3f00 	ldrex	r3, [r3]
 800a566:	60bb      	str	r3, [r7, #8]
   return(result);
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	f023 0310 	bic.w	r3, r3, #16
 800a56e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	461a      	mov	r2, r3
 800a576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a578:	61bb      	str	r3, [r7, #24]
 800a57a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57c:	6979      	ldr	r1, [r7, #20]
 800a57e:	69ba      	ldr	r2, [r7, #24]
 800a580:	e841 2300 	strex	r3, r2, [r1]
 800a584:	613b      	str	r3, [r7, #16]
   return(result);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1e6      	bne.n	800a55a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2220      	movs	r2, #32
 800a590:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a5a0:	bf00      	nop
 800a5a2:	3754      	adds	r7, #84	@ 0x54
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bc80      	pop	{r7}
 800a5a8:	4770      	bx	lr

0800a5aa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b090      	sub	sp, #64	@ 0x40
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d137      	bne.n	800a636 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3308      	adds	r3, #8
 800a5d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	623b      	str	r3, [r7, #32]
   return(result);
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a5e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5ee:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5f6:	e841 2300 	strex	r3, r2, [r1]
 800a5fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1e5      	bne.n	800a5ce <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	e853 3f00 	ldrex	r3, [r3]
 800a60e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a616:	637b      	str	r3, [r7, #52]	@ 0x34
 800a618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	461a      	mov	r2, r3
 800a61e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a620:	61fb      	str	r3, [r7, #28]
 800a622:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a624:	69b9      	ldr	r1, [r7, #24]
 800a626:	69fa      	ldr	r2, [r7, #28]
 800a628:	e841 2300 	strex	r3, r2, [r1]
 800a62c:	617b      	str	r3, [r7, #20]
   return(result);
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1e6      	bne.n	800a602 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a634:	e002      	b.n	800a63c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a636:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a638:	f7f8 fffa 	bl	8003630 <HAL_UART_TxCpltCallback>
}
 800a63c:	bf00      	nop
 800a63e:	3740      	adds	r7, #64	@ 0x40
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a650:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f7ff f994 	bl	8009980 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a658:	bf00      	nop
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a66c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a674:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a67c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a688:	2b80      	cmp	r3, #128	@ 0x80
 800a68a:	d109      	bne.n	800a6a0 <UART_DMAError+0x40>
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	2b21      	cmp	r3, #33	@ 0x21
 800a690:	d106      	bne.n	800a6a0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2200      	movs	r2, #0
 800a696:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a69a:	6978      	ldr	r0, [r7, #20]
 800a69c:	f7ff fee0 	bl	800a460 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6aa:	2b40      	cmp	r3, #64	@ 0x40
 800a6ac:	d109      	bne.n	800a6c2 <UART_DMAError+0x62>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2b22      	cmp	r3, #34	@ 0x22
 800a6b2:	d106      	bne.n	800a6c2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a6bc:	6978      	ldr	r0, [r7, #20]
 800a6be:	f7ff ff0f 	bl	800a4e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6c8:	f043 0210 	orr.w	r2, r3, #16
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6d2:	6978      	ldr	r0, [r7, #20]
 800a6d4:	f7ff f95d 	bl	8009992 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6d8:	bf00      	nop
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f7ff f947 	bl	8009992 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a704:	bf00      	nop
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	e853 3f00 	ldrex	r3, [r3]
 800a720:	60bb      	str	r3, [r7, #8]
   return(result);
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a728:	61fb      	str	r3, [r7, #28]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	61bb      	str	r3, [r7, #24]
 800a734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a736:	6979      	ldr	r1, [r7, #20]
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	613b      	str	r3, [r7, #16]
   return(result);
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e6      	bne.n	800a714 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2220      	movs	r2, #32
 800a74a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7f8 ff6b 	bl	8003630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a75a:	bf00      	nop
 800a75c:	3720      	adds	r7, #32
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
	...

0800a764 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b09c      	sub	sp, #112	@ 0x70
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a772:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a77c:	2b22      	cmp	r3, #34	@ 0x22
 800a77e:	f040 80be 	bne.w	800a8fe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a788:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a78c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a790:	b2d9      	uxtb	r1, r3
 800a792:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a796:	b2da      	uxtb	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a79c:	400a      	ands	r2, r1
 800a79e:	b2d2      	uxtb	r2, r2
 800a7a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7a6:	1c5a      	adds	r2, r3, #1
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f040 80a1 	bne.w	800a90e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7d4:	e853 3f00 	ldrex	r3, [r3]
 800a7d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7f2:	e841 2300 	strex	r3, r2, [r1]
 800a7f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1e6      	bne.n	800a7cc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	3308      	adds	r3, #8
 800a804:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a808:	e853 3f00 	ldrex	r3, [r3]
 800a80c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a810:	f023 0301 	bic.w	r3, r3, #1
 800a814:	667b      	str	r3, [r7, #100]	@ 0x64
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3308      	adds	r3, #8
 800a81c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a81e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a820:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a822:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a826:	e841 2300 	strex	r3, r2, [r1]
 800a82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a82c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1e5      	bne.n	800a7fe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2220      	movs	r2, #32
 800a836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a33      	ldr	r2, [pc, #204]	@ (800a918 <UART_RxISR_8BIT+0x1b4>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d01f      	beq.n	800a890 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d018      	beq.n	800a890 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a866:	e853 3f00 	ldrex	r3, [r3]
 800a86a:	623b      	str	r3, [r7, #32]
   return(result);
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a872:	663b      	str	r3, [r7, #96]	@ 0x60
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	461a      	mov	r2, r3
 800a87a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a87c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a87e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a880:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a884:	e841 2300 	strex	r3, r2, [r1]
 800a888:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e6      	bne.n	800a85e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a894:	2b01      	cmp	r3, #1
 800a896:	d12e      	bne.n	800a8f6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	e853 3f00 	ldrex	r3, [r3]
 800a8aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f023 0310 	bic.w	r3, r3, #16
 800a8b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8bc:	61fb      	str	r3, [r7, #28]
 800a8be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c0:	69b9      	ldr	r1, [r7, #24]
 800a8c2:	69fa      	ldr	r2, [r7, #28]
 800a8c4:	e841 2300 	strex	r3, r2, [r1]
 800a8c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1e6      	bne.n	800a89e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	f003 0310 	and.w	r3, r3, #16
 800a8da:	2b10      	cmp	r3, #16
 800a8dc:	d103      	bne.n	800a8e6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2210      	movs	r2, #16
 800a8e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7ff f858 	bl	80099a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8f4:	e00b      	b.n	800a90e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7f8 feb0 	bl	800365c <HAL_UART_RxCpltCallback>
}
 800a8fc:	e007      	b.n	800a90e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	699a      	ldr	r2, [r3, #24]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f042 0208 	orr.w	r2, r2, #8
 800a90c:	619a      	str	r2, [r3, #24]
}
 800a90e:	bf00      	nop
 800a910:	3770      	adds	r7, #112	@ 0x70
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	40008000 	.word	0x40008000

0800a91c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b09c      	sub	sp, #112	@ 0x70
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a92a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a934:	2b22      	cmp	r3, #34	@ 0x22
 800a936:	f040 80be 	bne.w	800aab6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a940:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a948:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a94a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a94e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a952:	4013      	ands	r3, r2
 800a954:	b29a      	uxth	r2, r3
 800a956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a958:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a95e:	1c9a      	adds	r2, r3, #2
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	3b01      	subs	r3, #1
 800a96e:	b29a      	uxth	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f040 80a1 	bne.w	800aac6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a98c:	e853 3f00 	ldrex	r3, [r3]
 800a990:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a998:	667b      	str	r3, [r7, #100]	@ 0x64
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9a4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a9a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a9aa:	e841 2300 	strex	r3, r2, [r1]
 800a9ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a9b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1e6      	bne.n	800a984 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3308      	adds	r3, #8
 800a9bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9c0:	e853 3f00 	ldrex	r3, [r3]
 800a9c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3308      	adds	r3, #8
 800a9d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a9d6:	643a      	str	r2, [r7, #64]	@ 0x40
 800a9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a9dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a9de:	e841 2300 	strex	r3, r2, [r1]
 800a9e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1e5      	bne.n	800a9b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2220      	movs	r2, #32
 800a9ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a33      	ldr	r2, [pc, #204]	@ (800aad0 <UART_RxISR_16BIT+0x1b4>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d01f      	beq.n	800aa48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d018      	beq.n	800aa48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	e853 3f00 	ldrex	r3, [r3]
 800aa22:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	461a      	mov	r2, r3
 800aa32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa36:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa3c:	e841 2300 	strex	r3, r2, [r1]
 800aa40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e6      	bne.n	800aa16 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d12e      	bne.n	800aaae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	e853 3f00 	ldrex	r3, [r3]
 800aa62:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f023 0310 	bic.w	r3, r3, #16
 800aa6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	461a      	mov	r2, r3
 800aa72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa74:	61bb      	str	r3, [r7, #24]
 800aa76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa78:	6979      	ldr	r1, [r7, #20]
 800aa7a:	69ba      	ldr	r2, [r7, #24]
 800aa7c:	e841 2300 	strex	r3, r2, [r1]
 800aa80:	613b      	str	r3, [r7, #16]
   return(result);
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1e6      	bne.n	800aa56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	69db      	ldr	r3, [r3, #28]
 800aa8e:	f003 0310 	and.w	r3, r3, #16
 800aa92:	2b10      	cmp	r3, #16
 800aa94:	d103      	bne.n	800aa9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2210      	movs	r2, #16
 800aa9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7fe ff7c 	bl	80099a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aaac:	e00b      	b.n	800aac6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7f8 fdd4 	bl	800365c <HAL_UART_RxCpltCallback>
}
 800aab4:	e007      	b.n	800aac6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	699a      	ldr	r2, [r3, #24]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f042 0208 	orr.w	r2, r2, #8
 800aac4:	619a      	str	r2, [r3, #24]
}
 800aac6:	bf00      	nop
 800aac8:	3770      	adds	r7, #112	@ 0x70
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	40008000 	.word	0x40008000

0800aad4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b0ac      	sub	sp, #176	@ 0xb0
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aae2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	69db      	ldr	r3, [r3, #28]
 800aaec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab0a:	2b22      	cmp	r3, #34	@ 0x22
 800ab0c:	f040 8182 	bne.w	800ae14 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ab16:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab1a:	e125      	b.n	800ad68 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab22:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab26:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ab2a:	b2d9      	uxtb	r1, r3
 800ab2c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab36:	400a      	ands	r2, r1
 800ab38:	b2d2      	uxtb	r2, r2
 800ab3a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab40:	1c5a      	adds	r2, r3, #1
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	69db      	ldr	r3, [r3, #28]
 800ab5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab66:	f003 0307 	and.w	r3, r3, #7
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d053      	beq.n	800ac16 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d011      	beq.n	800ab9e <UART_RxISR_8BIT_FIFOEN+0xca>
 800ab7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ab7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00b      	beq.n	800ab9e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab94:	f043 0201 	orr.w	r2, r3, #1
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aba2:	f003 0302 	and.w	r3, r3, #2
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d011      	beq.n	800abce <UART_RxISR_8BIT_FIFOEN+0xfa>
 800abaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00b      	beq.n	800abce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2202      	movs	r2, #2
 800abbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abc4:	f043 0204 	orr.w	r2, r3, #4
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abd2:	f003 0304 	and.w	r3, r3, #4
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d011      	beq.n	800abfe <UART_RxISR_8BIT_FIFOEN+0x12a>
 800abda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00b      	beq.n	800abfe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2204      	movs	r2, #4
 800abec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abf4:	f043 0202 	orr.w	r2, r3, #2
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d006      	beq.n	800ac16 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7fe fec2 	bl	8009992 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f040 80a2 	bne.w	800ad68 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ac32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	461a      	mov	r2, r3
 800ac42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac48:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ac4c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ac4e:	e841 2300 	strex	r3, r2, [r1]
 800ac52:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ac54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1e4      	bne.n	800ac24 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	3308      	adds	r3, #8
 800ac60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac64:	e853 3f00 	ldrex	r3, [r3]
 800ac68:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ac6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac70:	f023 0301 	bic.w	r3, r3, #1
 800ac74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ac82:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ac84:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac86:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ac88:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ac8a:	e841 2300 	strex	r3, r2, [r1]
 800ac8e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ac90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1e1      	bne.n	800ac5a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2220      	movs	r2, #32
 800ac9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a5f      	ldr	r2, [pc, #380]	@ (800ae2c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d021      	beq.n	800acf8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d01a      	beq.n	800acf8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acca:	e853 3f00 	ldrex	r3, [r3]
 800acce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800acd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800acd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	461a      	mov	r2, r3
 800ace0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ace4:	657b      	str	r3, [r7, #84]	@ 0x54
 800ace6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800acea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800acec:	e841 2300 	strex	r3, r2, [r1]
 800acf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800acf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1e4      	bne.n	800acc2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d130      	bne.n	800ad62 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad0e:	e853 3f00 	ldrex	r3, [r3]
 800ad12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad16:	f023 0310 	bic.w	r3, r3, #16
 800ad1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad28:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad30:	e841 2300 	strex	r3, r2, [r1]
 800ad34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1e4      	bne.n	800ad06 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	69db      	ldr	r3, [r3, #28]
 800ad42:	f003 0310 	and.w	r3, r3, #16
 800ad46:	2b10      	cmp	r3, #16
 800ad48:	d103      	bne.n	800ad52 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2210      	movs	r2, #16
 800ad50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad58:	4619      	mov	r1, r3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7fe fe22 	bl	80099a4 <HAL_UARTEx_RxEventCallback>
 800ad60:	e002      	b.n	800ad68 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f7f8 fc7a 	bl	800365c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad68:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d006      	beq.n	800ad7e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800ad70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad74:	f003 0320 	and.w	r3, r3, #32
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f47f aecf 	bne.w	800ab1c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad84:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ad88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d049      	beq.n	800ae24 <UART_RxISR_8BIT_FIFOEN+0x350>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad96:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d242      	bcs.n	800ae24 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3308      	adds	r3, #8
 800ada4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	e853 3f00 	ldrex	r3, [r3]
 800adac:	61fb      	str	r3, [r7, #28]
   return(result);
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800adb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	3308      	adds	r3, #8
 800adbe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800adc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800adc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adca:	e841 2300 	strex	r3, r2, [r1]
 800adce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800add0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1e3      	bne.n	800ad9e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a15      	ldr	r2, [pc, #84]	@ (800ae30 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800adda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	e853 3f00 	ldrex	r3, [r3]
 800ade8:	60bb      	str	r3, [r7, #8]
   return(result);
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	f043 0320 	orr.w	r3, r3, #32
 800adf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	461a      	mov	r2, r3
 800adfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800adfe:	61bb      	str	r3, [r7, #24]
 800ae00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae02:	6979      	ldr	r1, [r7, #20]
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	e841 2300 	strex	r3, r2, [r1]
 800ae0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1e4      	bne.n	800addc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae12:	e007      	b.n	800ae24 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	699a      	ldr	r2, [r3, #24]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f042 0208 	orr.w	r2, r2, #8
 800ae22:	619a      	str	r2, [r3, #24]
}
 800ae24:	bf00      	nop
 800ae26:	37b0      	adds	r7, #176	@ 0xb0
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	40008000 	.word	0x40008000
 800ae30:	0800a765 	.word	0x0800a765

0800ae34 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b0ae      	sub	sp, #184	@ 0xb8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae42:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	69db      	ldr	r3, [r3, #28]
 800ae4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae6a:	2b22      	cmp	r3, #34	@ 0x22
 800ae6c:	f040 8186 	bne.w	800b17c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ae76:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae7a:	e129      	b.n	800b0d0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae82:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ae8e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ae92:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ae96:	4013      	ands	r3, r2
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ae9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aea4:	1c9a      	adds	r2, r3, #2
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	69db      	ldr	r3, [r3, #28]
 800aec2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aec6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aeca:	f003 0307 	and.w	r3, r3, #7
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d053      	beq.n	800af7a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d011      	beq.n	800af02 <UART_RxISR_16BIT_FIFOEN+0xce>
 800aede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00b      	beq.n	800af02 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2201      	movs	r2, #1
 800aef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aef8:	f043 0201 	orr.w	r2, r3, #1
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af06:	f003 0302 	and.w	r3, r3, #2
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d011      	beq.n	800af32 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800af0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00b      	beq.n	800af32 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2202      	movs	r2, #2
 800af20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af28:	f043 0204 	orr.w	r2, r3, #4
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af36:	f003 0304 	and.w	r3, r3, #4
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d011      	beq.n	800af62 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800af3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00b      	beq.n	800af62 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2204      	movs	r2, #4
 800af50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af58:	f043 0202 	orr.w	r2, r3, #2
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d006      	beq.n	800af7a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7fe fd10 	bl	8009992 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af80:	b29b      	uxth	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	f040 80a4 	bne.w	800b0d0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	461a      	mov	r2, r3
 800afa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afaa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afae:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800afb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800afb6:	e841 2300 	strex	r3, r2, [r1]
 800afba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800afbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1e2      	bne.n	800af88 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	3308      	adds	r3, #8
 800afc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afcc:	e853 3f00 	ldrex	r3, [r3]
 800afd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800afd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afd8:	f023 0301 	bic.w	r3, r3, #1
 800afdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3308      	adds	r3, #8
 800afe6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800afea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800afec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aff0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1e1      	bne.n	800afc2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2220      	movs	r2, #32
 800b002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a5f      	ldr	r2, [pc, #380]	@ (800b194 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d021      	beq.n	800b060 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b026:	2b00      	cmp	r3, #0
 800b028:	d01a      	beq.n	800b060 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b032:	e853 3f00 	ldrex	r3, [r3]
 800b036:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b03a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b03e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	461a      	mov	r2, r3
 800b048:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b04c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b04e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b050:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b052:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b054:	e841 2300 	strex	r3, r2, [r1]
 800b058:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b05a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d1e4      	bne.n	800b02a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b064:	2b01      	cmp	r3, #1
 800b066:	d130      	bne.n	800b0ca <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b076:	e853 3f00 	ldrex	r3, [r3]
 800b07a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b07e:	f023 0310 	bic.w	r3, r3, #16
 800b082:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	461a      	mov	r2, r3
 800b08c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b090:	647b      	str	r3, [r7, #68]	@ 0x44
 800b092:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b094:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b098:	e841 2300 	strex	r3, r2, [r1]
 800b09c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e4      	bne.n	800b06e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	f003 0310 	and.w	r3, r3, #16
 800b0ae:	2b10      	cmp	r3, #16
 800b0b0:	d103      	bne.n	800b0ba <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2210      	movs	r2, #16
 800b0b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7fe fc6e 	bl	80099a4 <HAL_UARTEx_RxEventCallback>
 800b0c8:	e002      	b.n	800b0d0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7f8 fac6 	bl	800365c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b0d0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d006      	beq.n	800b0e6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800b0d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0dc:	f003 0320 	and.w	r3, r3, #32
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f47f aecb 	bne.w	800ae7c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0ec:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b0f0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d049      	beq.n	800b18c <UART_RxISR_16BIT_FIFOEN+0x358>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b0fe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b102:	429a      	cmp	r2, r3
 800b104:	d242      	bcs.n	800b18c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3308      	adds	r3, #8
 800b10c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b110:	e853 3f00 	ldrex	r3, [r3]
 800b114:	623b      	str	r3, [r7, #32]
   return(result);
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b11c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	3308      	adds	r3, #8
 800b126:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b12a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b12c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b132:	e841 2300 	strex	r3, r2, [r1]
 800b136:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1e3      	bne.n	800b106 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a15      	ldr	r2, [pc, #84]	@ (800b198 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b142:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	e853 3f00 	ldrex	r3, [r3]
 800b150:	60fb      	str	r3, [r7, #12]
   return(result);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f043 0320 	orr.w	r3, r3, #32
 800b158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	461a      	mov	r2, r3
 800b162:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b166:	61fb      	str	r3, [r7, #28]
 800b168:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16a:	69b9      	ldr	r1, [r7, #24]
 800b16c:	69fa      	ldr	r2, [r7, #28]
 800b16e:	e841 2300 	strex	r3, r2, [r1]
 800b172:	617b      	str	r3, [r7, #20]
   return(result);
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1e4      	bne.n	800b144 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b17a:	e007      	b.n	800b18c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	699a      	ldr	r2, [r3, #24]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f042 0208 	orr.w	r2, r2, #8
 800b18a:	619a      	str	r2, [r3, #24]
}
 800b18c:	bf00      	nop
 800b18e:	37b8      	adds	r7, #184	@ 0xb8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	40008000 	.word	0x40008000
 800b198:	0800a91d 	.word	0x0800a91d

0800b19c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bc80      	pop	{r7}
 800b1ac:	4770      	bx	lr

0800b1ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b083      	sub	sp, #12
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b1b6:	bf00      	nop
 800b1b8:	370c      	adds	r7, #12
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bc80      	pop	{r7}
 800b1be:	4770      	bx	lr

0800b1c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bc80      	pop	{r7}
 800b1d0:	4770      	bx	lr

0800b1d2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b088      	sub	sp, #32
 800b1d6:	af02      	add	r7, sp, #8
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	1d3b      	adds	r3, r7, #4
 800b1dc:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d101      	bne.n	800b1f2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e046      	b.n	800b280 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2224      	movs	r2, #36	@ 0x24
 800b1fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f022 0201 	bic.w	r2, r2, #1
 800b210:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	430a      	orrs	r2, r1
 800b224:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d105      	bne.n	800b238 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b22c:	1d3b      	adds	r3, r7, #4
 800b22e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f000 f90e 	bl	800b454 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f042 0201 	orr.w	r2, r2, #1
 800b246:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b248:	f7f7 fbb4 	bl	80029b4 <HAL_GetTick>
 800b24c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b24e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	2200      	movs	r2, #0
 800b258:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f7fe ff10 	bl	800a082 <UART_WaitOnFlagUntilTimeout>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d002      	beq.n	800b26e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800b268:	2303      	movs	r3, #3
 800b26a:	75fb      	strb	r3, [r7, #23]
 800b26c:	e003      	b.n	800b276 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2220      	movs	r2, #32
 800b272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b288:	b480      	push	{r7}
 800b28a:	b089      	sub	sp, #36	@ 0x24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b296:	2b01      	cmp	r3, #1
 800b298:	d101      	bne.n	800b29e <HAL_UARTEx_EnableStopMode+0x16>
 800b29a:	2302      	movs	r3, #2
 800b29c:	e021      	b.n	800b2e2 <HAL_UARTEx_EnableStopMode+0x5a>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	e853 3f00 	ldrex	r3, [r3]
 800b2b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	f043 0302 	orr.w	r3, r3, #2
 800b2ba:	61fb      	str	r3, [r7, #28]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	61bb      	str	r3, [r7, #24]
 800b2c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c8:	6979      	ldr	r1, [r7, #20]
 800b2ca:	69ba      	ldr	r2, [r7, #24]
 800b2cc:	e841 2300 	strex	r3, r2, [r1]
 800b2d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1e6      	bne.n	800b2a6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3724      	adds	r7, #36	@ 0x24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bc80      	pop	{r7}
 800b2ea:	4770      	bx	lr

0800b2ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d101      	bne.n	800b302 <HAL_UARTEx_DisableFifoMode+0x16>
 800b2fe:	2302      	movs	r3, #2
 800b300:	e027      	b.n	800b352 <HAL_UARTEx_DisableFifoMode+0x66>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2224      	movs	r2, #36	@ 0x24
 800b30e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f022 0201 	bic.w	r2, r2, #1
 800b328:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b330:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2220      	movs	r2, #32
 800b344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	bc80      	pop	{r7}
 800b35a:	4770      	bx	lr

0800b35c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d101      	bne.n	800b374 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b370:	2302      	movs	r3, #2
 800b372:	e02d      	b.n	800b3d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2224      	movs	r2, #36	@ 0x24
 800b380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 0201 	bic.w	r2, r2, #1
 800b39a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	430a      	orrs	r2, r1
 800b3ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f871 	bl	800b498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2220      	movs	r2, #32
 800b3c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d101      	bne.n	800b3f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	e02d      	b.n	800b44c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2224      	movs	r2, #36	@ 0x24
 800b3fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f022 0201 	bic.w	r2, r2, #1
 800b416:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	430a      	orrs	r2, r1
 800b42a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f833 	bl	800b498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	1d3b      	adds	r3, r7, #4
 800b45e:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	f023 0210 	bic.w	r2, r3, #16
 800b46c:	893b      	ldrh	r3, [r7, #8]
 800b46e:	4619      	mov	r1, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	430a      	orrs	r2, r1
 800b476:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800b482:	7abb      	ldrb	r3, [r7, #10]
 800b484:	061a      	lsls	r2, r3, #24
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	430a      	orrs	r2, r1
 800b48c:	605a      	str	r2, [r3, #4]
}
 800b48e:	bf00      	nop
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	bc80      	pop	{r7}
 800b496:	4770      	bx	lr

0800b498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d108      	bne.n	800b4ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4b8:	e031      	b.n	800b51e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4ba:	2308      	movs	r3, #8
 800b4bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4be:	2308      	movs	r3, #8
 800b4c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	0e5b      	lsrs	r3, r3, #25
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	f003 0307 	and.w	r3, r3, #7
 800b4d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	0f5b      	lsrs	r3, r3, #29
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	f003 0307 	and.w	r3, r3, #7
 800b4e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4e2:	7bbb      	ldrb	r3, [r7, #14]
 800b4e4:	7b3a      	ldrb	r2, [r7, #12]
 800b4e6:	4910      	ldr	r1, [pc, #64]	@ (800b528 <UARTEx_SetNbDataToProcess+0x90>)
 800b4e8:	5c8a      	ldrb	r2, [r1, r2]
 800b4ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4ee:	7b3a      	ldrb	r2, [r7, #12]
 800b4f0:	490e      	ldr	r1, [pc, #56]	@ (800b52c <UARTEx_SetNbDataToProcess+0x94>)
 800b4f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	7b7a      	ldrb	r2, [r7, #13]
 800b504:	4908      	ldr	r1, [pc, #32]	@ (800b528 <UARTEx_SetNbDataToProcess+0x90>)
 800b506:	5c8a      	ldrb	r2, [r1, r2]
 800b508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b50c:	7b7a      	ldrb	r2, [r7, #13]
 800b50e:	4907      	ldr	r1, [pc, #28]	@ (800b52c <UARTEx_SetNbDataToProcess+0x94>)
 800b510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b512:	fb93 f3f2 	sdiv	r3, r3, r2
 800b516:	b29a      	uxth	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b51e:	bf00      	nop
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	bc80      	pop	{r7}
 800b526:	4770      	bx	lr
 800b528:	08021244 	.word	0x08021244
 800b52c:	0802124c 	.word	0x0802124c

0800b530 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800b534:	f7f7 f8da 	bl	80026ec <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800b538:	f000 f820 	bl	800b57c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800b53c:	bf00      	nop
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
 800b548:	f011 f960 	bl	801c80c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800b54c:	bf00      	nop
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b550:	b480      	push	{r7}
 800b552:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b554:	f3bf 8f4f 	dsb	sy
}
 800b558:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b55a:	4b06      	ldr	r3, [pc, #24]	@ (800b574 <__NVIC_SystemReset+0x24>)
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b562:	4904      	ldr	r1, [pc, #16]	@ (800b574 <__NVIC_SystemReset+0x24>)
 800b564:	4b04      	ldr	r3, [pc, #16]	@ (800b578 <__NVIC_SystemReset+0x28>)
 800b566:	4313      	orrs	r3, r2
 800b568:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b56a:	f3bf 8f4f 	dsb	sy
}
 800b56e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b570:	bf00      	nop
 800b572:	e7fd      	b.n	800b570 <__NVIC_SystemReset+0x20>
 800b574:	e000ed00 	.word	0xe000ed00
 800b578:	05fa0004 	.word	0x05fa0004

0800b57c <LoRaWAN_Init>:


/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b086      	sub	sp, #24
 800b580:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800b582:	2300      	movs	r3, #0
 800b584:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800b586:	2301      	movs	r3, #1
 800b588:	9302      	str	r3, [sp, #8]
 800b58a:	2303      	movs	r3, #3
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	2301      	movs	r3, #1
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	4b59      	ldr	r3, [pc, #356]	@ (800b6f8 <LoRaWAN_Init+0x17c>)
 800b594:	2200      	movs	r2, #0
 800b596:	2100      	movs	r1, #0
 800b598:	2002      	movs	r0, #2
 800b59a:	f011 fd83 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800b59e:	2301      	movs	r3, #1
 800b5a0:	9302      	str	r3, [sp, #8]
 800b5a2:	2306      	movs	r3, #6
 800b5a4:	9301      	str	r3, [sp, #4]
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	4b54      	ldr	r3, [pc, #336]	@ (800b6fc <LoRaWAN_Init+0x180>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	2002      	movs	r0, #2
 800b5b2:	f011 fd77 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	9302      	str	r3, [sp, #8]
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	9301      	str	r3, [sp, #4]
 800b5be:	2301      	movs	r3, #1
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	4b4f      	ldr	r3, [pc, #316]	@ (800b700 <LoRaWAN_Init+0x184>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	2002      	movs	r0, #2
 800b5ca:	f011 fd6b 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800b5ce:	1d3b      	adds	r3, r7, #4
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	f003 fc02 	bl	800eddc <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	0e1b      	lsrs	r3, r3, #24
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	461a      	mov	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	0c1b      	lsrs	r3, r3, #16
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	0a1b      	lsrs	r3, r3, #8
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	9302      	str	r3, [sp, #8]
 800b5f0:	9101      	str	r1, [sp, #4]
 800b5f2:	9200      	str	r2, [sp, #0]
 800b5f4:	4b43      	ldr	r3, [pc, #268]	@ (800b704 <LoRaWAN_Init+0x188>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	2002      	movs	r0, #2
 800b5fc:	f011 fd52 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800b600:	1d3b      	adds	r3, r7, #4
 800b602:	4619      	mov	r1, r3
 800b604:	2001      	movs	r0, #1
 800b606:	f003 fbe9 	bl	800eddc <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	0e1b      	lsrs	r3, r3, #24
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	461a      	mov	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	0c1b      	lsrs	r3, r3, #16
 800b616:	b2db      	uxtb	r3, r3
 800b618:	4619      	mov	r1, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	0a1b      	lsrs	r3, r3, #8
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	b2c0      	uxtb	r0, r0
 800b624:	9003      	str	r0, [sp, #12]
 800b626:	9302      	str	r3, [sp, #8]
 800b628:	9101      	str	r1, [sp, #4]
 800b62a:	9200      	str	r2, [sp, #0]
 800b62c:	4b36      	ldr	r3, [pc, #216]	@ (800b708 <LoRaWAN_Init+0x18c>)
 800b62e:	2200      	movs	r2, #0
 800b630:	2100      	movs	r1, #0
 800b632:	2002      	movs	r0, #2
 800b634:	f011 fd36 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800b638:	2300      	movs	r3, #0
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	4b33      	ldr	r3, [pc, #204]	@ (800b70c <LoRaWAN_Init+0x190>)
 800b63e:	2200      	movs	r2, #0
 800b640:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b644:	4832      	ldr	r0, [pc, #200]	@ (800b710 <LoRaWAN_Init+0x194>)
 800b646:	f011 fa7f 	bl	801cb48 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800b64a:	2300      	movs	r3, #0
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	4b31      	ldr	r3, [pc, #196]	@ (800b714 <LoRaWAN_Init+0x198>)
 800b650:	2200      	movs	r2, #0
 800b652:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b656:	4830      	ldr	r0, [pc, #192]	@ (800b718 <LoRaWAN_Init+0x19c>)
 800b658:	f011 fa76 	bl	801cb48 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800b65c:	2300      	movs	r3, #0
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	4b2e      	ldr	r3, [pc, #184]	@ (800b71c <LoRaWAN_Init+0x1a0>)
 800b662:	2201      	movs	r2, #1
 800b664:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b668:	482d      	ldr	r0, [pc, #180]	@ (800b720 <LoRaWAN_Init+0x1a4>)
 800b66a:	f011 fa6d 	bl	801cb48 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800b66e:	2300      	movs	r3, #0
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	4b2c      	ldr	r3, [pc, #176]	@ (800b724 <LoRaWAN_Init+0x1a8>)
 800b674:	2200      	movs	r2, #0
 800b676:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800b67a:	482b      	ldr	r0, [pc, #172]	@ (800b728 <LoRaWAN_Init+0x1ac>)
 800b67c:	f011 fa64 	bl	801cb48 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800b680:	4a2a      	ldr	r2, [pc, #168]	@ (800b72c <LoRaWAN_Init+0x1b0>)
 800b682:	2100      	movs	r1, #0
 800b684:	2001      	movs	r0, #1
 800b686:	f011 f9bd 	bl	801ca04 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800b68a:	4a29      	ldr	r2, [pc, #164]	@ (800b730 <LoRaWAN_Init+0x1b4>)
 800b68c:	2100      	movs	r1, #0
 800b68e:	2002      	movs	r0, #2
 800b690:	f011 f9b8 	bl	801ca04 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800b694:	4a27      	ldr	r2, [pc, #156]	@ (800b734 <LoRaWAN_Init+0x1b8>)
 800b696:	2100      	movs	r1, #0
 800b698:	2004      	movs	r0, #4
 800b69a:	f011 f9b3 	bl	801ca04 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800b69e:	4a26      	ldr	r2, [pc, #152]	@ (800b738 <LoRaWAN_Init+0x1bc>)
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	2008      	movs	r0, #8
 800b6a4:	f011 f9ae 	bl	801ca04 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800b6a8:	f000 fee8 	bl	800c47c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800b6ac:	4923      	ldr	r1, [pc, #140]	@ (800b73c <LoRaWAN_Init+0x1c0>)
 800b6ae:	4824      	ldr	r0, [pc, #144]	@ (800b740 <LoRaWAN_Init+0x1c4>)
 800b6b0:	f002 fbfa 	bl	800dea8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800b6b4:	4823      	ldr	r0, [pc, #140]	@ (800b744 <LoRaWAN_Init+0x1c8>)
 800b6b6:	f002 fc65 	bl	800df84 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800b6ba:	4819      	ldr	r0, [pc, #100]	@ (800b720 <LoRaWAN_Init+0x1a4>)
 800b6bc:	f011 fa7a 	bl	801cbb4 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800b6c0:	4b21      	ldr	r3, [pc, #132]	@ (800b748 <LoRaWAN_Init+0x1cc>)
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	4a21      	ldr	r2, [pc, #132]	@ (800b74c <LoRaWAN_Init+0x1d0>)
 800b6c6:	7812      	ldrb	r2, [r2, #0]
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f002 fdbe 	bl	800e24c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800b6d0:	4b1f      	ldr	r3, [pc, #124]	@ (800b750 <LoRaWAN_Init+0x1d4>)
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10b      	bne.n	800b6f0 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800b6d8:	4b1e      	ldr	r3, [pc, #120]	@ (800b754 <LoRaWAN_Init+0x1d8>)
 800b6da:	6819      	ldr	r1, [r3, #0]
 800b6dc:	2300      	movs	r3, #0
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b758 <LoRaWAN_Init+0x1dc>)
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	481d      	ldr	r0, [pc, #116]	@ (800b75c <LoRaWAN_Init+0x1e0>)
 800b6e6:	f011 fa2f 	bl	801cb48 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800b6ea:	481c      	ldr	r0, [pc, #112]	@ (800b75c <LoRaWAN_Init+0x1e0>)
 800b6ec:	f011 fa62 	bl	801cbb4 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800b6f0:	bf00      	nop
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	0802089c 	.word	0x0802089c
 800b6fc:	080208c0 	.word	0x080208c0
 800b700:	080208e4 	.word	0x080208e4
 800b704:	08020908 	.word	0x08020908
 800b708:	0802092c 	.word	0x0802092c
 800b70c:	0800bf3d 	.word	0x0800bf3d
 800b710:	20000768 	.word	0x20000768
 800b714:	0800bf5b 	.word	0x0800bf5b
 800b718:	20000780 	.word	0x20000780
 800b71c:	0800bf6d 	.word	0x0800bf6d
 800b720:	20000798 	.word	0x20000798
 800b724:	0800c35d 	.word	0x0800c35d
 800b728:	2000065c 	.word	0x2000065c
 800b72c:	0800e1e1 	.word	0x0800e1e1
 800b730:	0800b8bd 	.word	0x0800b8bd
 800b734:	0800c3a1 	.word	0x0800c3a1
 800b738:	0800c2c1 	.word	0x0800c2c1
 800b73c:	01030100 	.word	0x01030100
 800b740:	20000024 	.word	0x20000024
 800b744:	20000070 	.word	0x20000070
 800b748:	20000020 	.word	0x20000020
 800b74c:	20000021 	.word	0x20000021
 800b750:	20000640 	.word	0x20000640
 800b754:	20000088 	.word	0x20000088
 800b758:	0800bf19 	.word	0x0800bf19
 800b75c:	20000644 	.word	0x20000644

0800b760 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800b760:	b5b0      	push	{r4, r5, r7, lr}
 800b762:	b08a      	sub	sp, #40	@ 0x28
 800b764:	af06      	add	r7, sp, #24
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	f000 8090 	beq.w	800b896 <OnRxData+0x136>
  {
#if defined(DBG)   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800b776:	2201      	movs	r2, #1
 800b778:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b77c:	4848      	ldr	r0, [pc, #288]	@ (800b8a0 <OnRxData+0x140>)
 800b77e:	f7fa faab 	bl	8005cd8 <HAL_GPIO_WritePin>
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800b782:	4848      	ldr	r0, [pc, #288]	@ (800b8a4 <OnRxData+0x144>)
 800b784:	f011 fa16 	bl	801cbb4 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d05e      	beq.n	800b84e <OnRxData+0xee>
    {
      if (appData != NULL)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d05b      	beq.n	800b84e <OnRxData+0xee>
      {
        RxPort = appData->Port;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d054      	beq.n	800b84e <OnRxData+0xee>
        {
          switch (appData->Port)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d01f      	beq.n	800b7ec <OnRxData+0x8c>
 800b7ac:	2b03      	cmp	r3, #3
 800b7ae:	d149      	bne.n	800b844 <OnRxData+0xe4>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	785b      	ldrb	r3, [r3, #1]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d147      	bne.n	800b848 <OnRxData+0xe8>
              {
                switch (appData->Buffer[0])
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	2b02      	cmp	r3, #2
 800b7c0:	d00e      	beq.n	800b7e0 <OnRxData+0x80>
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	dc10      	bgt.n	800b7e8 <OnRxData+0x88>
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d002      	beq.n	800b7d0 <OnRxData+0x70>
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d004      	beq.n	800b7d8 <OnRxData+0x78>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800b7ce:	e00b      	b.n	800b7e8 <OnRxData+0x88>
                    LmHandlerRequestClass(CLASS_A);
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	f002 feef 	bl	800e5b4 <LmHandlerRequestClass>
                    break;
 800b7d6:	e008      	b.n	800b7ea <OnRxData+0x8a>
                    LmHandlerRequestClass(CLASS_B);
 800b7d8:	2001      	movs	r0, #1
 800b7da:	f002 feeb 	bl	800e5b4 <LmHandlerRequestClass>
                    break;
 800b7de:	e004      	b.n	800b7ea <OnRxData+0x8a>
                    LmHandlerRequestClass(CLASS_C);
 800b7e0:	2002      	movs	r0, #2
 800b7e2:	f002 fee7 	bl	800e5b4 <LmHandlerRequestClass>
                    break;
 800b7e6:	e000      	b.n	800b7ea <OnRxData+0x8a>
                    break;
 800b7e8:	bf00      	nop
                }
              }
              break;
 800b7ea:	e02d      	b.n	800b848 <OnRxData+0xe8>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	785b      	ldrb	r3, [r3, #1]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d12b      	bne.n	800b84c <OnRxData+0xec>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	b2da      	uxtb	r2, r3
 800b800:	4b29      	ldr	r3, [pc, #164]	@ (800b8a8 <OnRxData+0x148>)
 800b802:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800b804:	4b28      	ldr	r3, [pc, #160]	@ (800b8a8 <OnRxData+0x148>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10d      	bne.n	800b828 <OnRxData+0xc8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800b80c:	4b27      	ldr	r3, [pc, #156]	@ (800b8ac <OnRxData+0x14c>)
 800b80e:	2200      	movs	r2, #0
 800b810:	2100      	movs	r1, #0
 800b812:	2003      	movs	r0, #3
 800b814:	f011 fc46 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
				  #if defined(DBG)   // XXX:
                  	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800b818:	2201      	movs	r2, #1
 800b81a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b81e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b822:	f7fa fa59 	bl	8005cd8 <HAL_GPIO_WritePin>
					#if defined(DBG)   // XXX:
                  	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
					#endif
                }
              }
              break;
 800b826:	e011      	b.n	800b84c <OnRxData+0xec>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800b828:	4b21      	ldr	r3, [pc, #132]	@ (800b8b0 <OnRxData+0x150>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	2100      	movs	r1, #0
 800b82e:	2003      	movs	r0, #3
 800b830:	f011 fc38 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
                  	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800b834:	2200      	movs	r2, #0
 800b836:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b83a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b83e:	f7fa fa4b 	bl	8005cd8 <HAL_GPIO_WritePin>
              break;
 800b842:	e003      	b.n	800b84c <OnRxData+0xec>

            default:

              break;
 800b844:	bf00      	nop
 800b846:	e002      	b.n	800b84e <OnRxData+0xee>
              break;
 800b848:	bf00      	nop
 800b84a:	e000      	b.n	800b84e <OnRxData+0xee>
              break;
 800b84c:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	7c1b      	ldrb	r3, [r3, #16]
 800b852:	2b05      	cmp	r3, #5
 800b854:	d81f      	bhi.n	800b896 <OnRxData+0x136>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	7bfa      	ldrb	r2, [r7, #15]
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800b862:	460c      	mov	r4, r1
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	7c09      	ldrb	r1, [r1, #16]
 800b868:	4608      	mov	r0, r1
 800b86a:	4912      	ldr	r1, [pc, #72]	@ (800b8b4 <OnRxData+0x154>)
 800b86c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b870:	6838      	ldr	r0, [r7, #0]
 800b872:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800b876:	4605      	mov	r5, r0
 800b878:	6838      	ldr	r0, [r7, #0]
 800b87a:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800b87e:	9005      	str	r0, [sp, #20]
 800b880:	9504      	str	r5, [sp, #16]
 800b882:	9103      	str	r1, [sp, #12]
 800b884:	9402      	str	r4, [sp, #8]
 800b886:	9201      	str	r2, [sp, #4]
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	4b0b      	ldr	r3, [pc, #44]	@ (800b8b8 <OnRxData+0x158>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	2100      	movs	r1, #0
 800b890:	2003      	movs	r0, #3
 800b892:	f011 fc07 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800b896:	bf00      	nop
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bdb0      	pop	{r4, r5, r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	48000400 	.word	0x48000400
 800b8a4:	20000780 	.word	0x20000780
 800b8a8:	20000766 	.word	0x20000766
 800b8ac:	08020950 	.word	0x08020950
 800b8b0:	0802095c 	.word	0x0802095c
 800b8b4:	20000008 	.word	0x20000008
 800b8b8:	08020968 	.word	0x08020968

0800b8bc <SendTxData>:

static void SendTxData(void)
{
 800b8bc:	b590      	push	{r4, r7, lr}
 800b8be:	b09d      	sub	sp, #116	@ 0x74
 800b8c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b8c2:	23ff      	movs	r3, #255	@ 0xff
 800b8c4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  uint8_t batteryLevel = GetBatteryLevel();
 800b8c8:	f7f6 ff44 	bl	8002754 <GetBatteryLevel>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	667b      	str	r3, [r7, #100]	@ 0x64

  uint16_t pressure = 0;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  int16_t temperature = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t humidity = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  uint32_t i = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	663b      	str	r3, [r7, #96]	@ 0x60
  int32_t latitude = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	653b      	str	r3, [r7, #80]	@ 0x50
  int32_t longitude = 0;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint16_t altitudeGps = 0;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  uint16_t t_sht=0, rh_sht=0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800b900:	2300      	movs	r3, #0
 800b902:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  uint32_t data_sht=0;
 800b906:	2300      	movs	r3, #0
 800b908:	643b      	str	r3, [r7, #64]	@ 0x40
  float Rntc = 0;
 800b90a:	f04f 0300 	mov.w	r3, #0
 800b90e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  EnvSensors_Read(&sensor_data);
 800b910:	1d3b      	adds	r3, r7, #4
 800b912:	4618      	mov	r0, r3
 800b914:	f7f7 f890 	bl	8002a38 <EnvSensors_Read>
  uint16_t adc_0 = 0, adc_1 = 0, adc_2 = 0, adc_3 = 0;
 800b918:	2300      	movs	r3, #0
 800b91a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800b91c:	2300      	movs	r3, #0
 800b91e:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b920:	2300      	movs	r3, #0
 800b922:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b924:	2300      	movs	r3, #0
 800b926:	86bb      	strh	r3, [r7, #52]	@ 0x34
  float volt_0 = 0, volt_1 = 0, volt_2 = 0, volt_3 = 0;
 800b928:	f04f 0300 	mov.w	r3, #0
 800b92c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b92e:	f04f 0300 	mov.w	r3, #0
 800b932:	633b      	str	r3, [r7, #48]	@ 0x30
 800b934:	f04f 0300 	mov.w	r3, #0
 800b938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b93a:	f04f 0300 	mov.w	r3, #0
 800b93e:	62bb      	str	r3, [r7, #40]	@ 0x28
  float a = 0, b = 0,c = 0;
 800b940:	f04f 0300 	mov.w	r3, #0
 800b944:	627b      	str	r3, [r7, #36]	@ 0x24
 800b946:	f04f 0300 	mov.w	r3, #0
 800b94a:	623b      	str	r3, [r7, #32]
 800b94c:	f04f 0300 	mov.w	r3, #0
 800b950:	61fb      	str	r3, [r7, #28]
  adc_0 = SYS_GetADC0();
 800b952:	f7f5 ff17 	bl	8001784 <SYS_GetADC0>
 800b956:	4603      	mov	r3, r0
 800b958:	877b      	strh	r3, [r7, #58]	@ 0x3a
  adc_1 = SYS_GetADC1();
 800b95a:	f7f5 ff25 	bl	80017a8 <SYS_GetADC1>
 800b95e:	4603      	mov	r3, r0
 800b960:	873b      	strh	r3, [r7, #56]	@ 0x38
  adc_2 = SYS_GetADC2();
 800b962:	f7f5 ff35 	bl	80017d0 <SYS_GetADC2>
 800b966:	4603      	mov	r3, r0
 800b968:	86fb      	strh	r3, [r7, #54]	@ 0x36
  adc_3 = SYS_GetADC3();
 800b96a:	f7f5 ff45 	bl	80017f8 <SYS_GetADC3>
 800b96e:	4603      	mov	r3, r0
 800b970:	86bb      	strh	r3, [r7, #52]	@ 0x34
  if(adc_0 > 0 || adc_0 < 4096) {
 800b972:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b974:	2b00      	cmp	r3, #0
 800b976:	d103      	bne.n	800b980 <SendTxData+0xc4>
 800b978:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b97a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b97e:	d25b      	bcs.n	800ba38 <SendTxData+0x17c>
	  a = ((3,3 * (float) adc_0) / 4095);
 800b980:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b982:	4618      	mov	r0, r3
 800b984:	f7f5 f9ee 	bl	8000d64 <__aeabi_ui2f>
 800b988:	4603      	mov	r3, r0
 800b98a:	4925      	ldr	r1, [pc, #148]	@ (800ba20 <SendTxData+0x164>)
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7f5 fa41 	bl	8000e14 <__aeabi_fmul>
 800b992:	4603      	mov	r3, r0
 800b994:	4923      	ldr	r1, [pc, #140]	@ (800ba24 <SendTxData+0x168>)
 800b996:	4618      	mov	r0, r3
 800b998:	f7f5 faf0 	bl	8000f7c <__aeabi_fdiv>
 800b99c:	4603      	mov	r3, r0
 800b99e:	627b      	str	r3, [r7, #36]	@ 0x24
	  b = ((a * 7500000) / (3,3 - a));
 800b9a0:	4921      	ldr	r1, [pc, #132]	@ (800ba28 <SendTxData+0x16c>)
 800b9a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b9a4:	f7f5 fa36 	bl	8000e14 <__aeabi_fmul>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	461c      	mov	r4, r3
 800b9ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b9ae:	481c      	ldr	r0, [pc, #112]	@ (800ba20 <SendTxData+0x164>)
 800b9b0:	f7f5 f926 	bl	8000c00 <__aeabi_fsub>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f7f5 fadf 	bl	8000f7c <__aeabi_fdiv>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	623b      	str	r3, [r7, #32]
	  c = log10(b / 470000);
 800b9c2:	491a      	ldr	r1, [pc, #104]	@ (800ba2c <SendTxData+0x170>)
 800b9c4:	6a38      	ldr	r0, [r7, #32]
 800b9c6:	f7f5 fad9 	bl	8000f7c <__aeabi_fdiv>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7f4 fd93 	bl	80004f8 <__aeabi_f2d>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	4619      	mov	r1, r3
 800b9da:	f014 fc39 	bl	8020250 <log10>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	f7f5 f8b7 	bl	8000b58 <__aeabi_d2f>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	61fb      	str	r3, [r7, #28]
	  //Rntc = ((7500000.0 * (float)adc_0) / (4095.0 - (float)adc_0));
	  //volt_0 = (1 / (1/298,15 + ((1/4500) * (log(Rntc/470000))))) - 273,15;
	  volt_0 = ( 1 / ((1/298,15) + (1/4500 * c))) + 25;
 800b9ee:	f04f 0100 	mov.w	r1, #0
 800b9f2:	69f8      	ldr	r0, [r7, #28]
 800b9f4:	f7f5 fa0e 	bl	8000e14 <__aeabi_fmul>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	490d      	ldr	r1, [pc, #52]	@ (800ba30 <SendTxData+0x174>)
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7f5 f901 	bl	8000c04 <__addsf3>
 800ba02:	4603      	mov	r3, r0
 800ba04:	4619      	mov	r1, r3
 800ba06:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ba0a:	f7f5 fab7 	bl	8000f7c <__aeabi_fdiv>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	4908      	ldr	r1, [pc, #32]	@ (800ba34 <SendTxData+0x178>)
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7f5 f8f6 	bl	8000c04 <__addsf3>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba1c:	e00f      	b.n	800ba3e <SendTxData+0x182>
 800ba1e:	bf00      	nop
 800ba20:	40400000 	.word	0x40400000
 800ba24:	457ff000 	.word	0x457ff000
 800ba28:	4ae4e1c0 	.word	0x4ae4e1c0
 800ba2c:	48e57e00 	.word	0x48e57e00
 800ba30:	41700000 	.word	0x41700000
 800ba34:	41c80000 	.word	0x41c80000
	  //invT = (1.0f / T0) + (1.0f / B_K) * logf(Rntc / R25_ohm);
	  //volt_0 = ((((3,3 * adc_0/4095) * (7500000/2700000)) + (3,3 * adc_0/4095)))
  }
  else
	  volt_0 = 0;
 800ba38:	f04f 0300 	mov.w	r3, #0
 800ba3c:	65fb      	str	r3, [r7, #92]	@ 0x5c

  volt_1 = ((((5 * (float)adc_1/4095)   * (7500000/2700000)) + (5 * (float)adc_1/4095)));
 800ba3e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7f5 f98f 	bl	8000d64 <__aeabi_ui2f>
 800ba46:	4603      	mov	r3, r0
 800ba48:	49af      	ldr	r1, [pc, #700]	@ (800bd08 <SendTxData+0x44c>)
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7f5 f9e2 	bl	8000e14 <__aeabi_fmul>
 800ba50:	4603      	mov	r3, r0
 800ba52:	49ae      	ldr	r1, [pc, #696]	@ (800bd0c <SendTxData+0x450>)
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7f5 fa91 	bl	8000f7c <__aeabi_fdiv>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7f5 f8d0 	bl	8000c04 <__addsf3>
 800ba64:	4603      	mov	r3, r0
 800ba66:	461c      	mov	r4, r3
 800ba68:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7f5 f97a 	bl	8000d64 <__aeabi_ui2f>
 800ba70:	4603      	mov	r3, r0
 800ba72:	49a5      	ldr	r1, [pc, #660]	@ (800bd08 <SendTxData+0x44c>)
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7f5 f9cd 	bl	8000e14 <__aeabi_fmul>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	49a3      	ldr	r1, [pc, #652]	@ (800bd0c <SendTxData+0x450>)
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7f5 fa7c 	bl	8000f7c <__aeabi_fdiv>
 800ba84:	4603      	mov	r3, r0
 800ba86:	4619      	mov	r1, r3
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f7f5 f8bb 	bl	8000c04 <__addsf3>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	633b      	str	r3, [r7, #48]	@ 0x30
  volt_2 = ((3,3 * (float)adc_2 ) / 4095);
 800ba92:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7f5 f965 	bl	8000d64 <__aeabi_ui2f>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	499c      	ldr	r1, [pc, #624]	@ (800bd10 <SendTxData+0x454>)
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7f5 f9b8 	bl	8000e14 <__aeabi_fmul>
 800baa4:	4603      	mov	r3, r0
 800baa6:	4999      	ldr	r1, [pc, #612]	@ (800bd0c <SendTxData+0x450>)
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7f5 fa67 	bl	8000f7c <__aeabi_fdiv>
 800baae:	4603      	mov	r3, r0
 800bab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  volt_3 = ((((3,3 * (float)adc_3/4095) * (7500000/2700000)) + (3,3 * (float)adc_3/4095)));
 800bab2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7f5 f955 	bl	8000d64 <__aeabi_ui2f>
 800baba:	4603      	mov	r3, r0
 800babc:	4994      	ldr	r1, [pc, #592]	@ (800bd10 <SendTxData+0x454>)
 800babe:	4618      	mov	r0, r3
 800bac0:	f7f5 f9a8 	bl	8000e14 <__aeabi_fmul>
 800bac4:	4603      	mov	r3, r0
 800bac6:	4991      	ldr	r1, [pc, #580]	@ (800bd0c <SendTxData+0x450>)
 800bac8:	4618      	mov	r0, r3
 800baca:	f7f5 fa57 	bl	8000f7c <__aeabi_fdiv>
 800bace:	4603      	mov	r3, r0
 800bad0:	4619      	mov	r1, r3
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7f5 f896 	bl	8000c04 <__addsf3>
 800bad8:	4603      	mov	r3, r0
 800bada:	461c      	mov	r4, r3
 800badc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bade:	4618      	mov	r0, r3
 800bae0:	f7f5 f940 	bl	8000d64 <__aeabi_ui2f>
 800bae4:	4603      	mov	r3, r0
 800bae6:	498a      	ldr	r1, [pc, #552]	@ (800bd10 <SendTxData+0x454>)
 800bae8:	4618      	mov	r0, r3
 800baea:	f7f5 f993 	bl	8000e14 <__aeabi_fmul>
 800baee:	4603      	mov	r3, r0
 800baf0:	4986      	ldr	r1, [pc, #536]	@ (800bd0c <SendTxData+0x450>)
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7f5 fa42 	bl	8000f7c <__aeabi_fdiv>
 800baf8:	4603      	mov	r3, r0
 800bafa:	4619      	mov	r1, r3
 800bafc:	4620      	mov	r0, r4
 800bafe:	f7f5 f881 	bl	8000c04 <__addsf3>
 800bb02:	4603      	mov	r3, r0
 800bb04:	62bb      	str	r3, [r7, #40]	@ 0x28
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800bb06:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	4b81      	ldr	r3, [pc, #516]	@ (800bd14 <SendTxData+0x458>)
 800bb0e:	2201      	movs	r2, #1
 800bb10:	2100      	movs	r1, #0
 800bb12:	2002      	movs	r0, #2
 800bb14:	f011 fac6 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7f5 faca 	bl	80010b4 <__aeabi_f2iz>
 800bb20:	4603      	mov	r3, r0
 800bb22:	b21b      	sxth	r3, r3
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	4b7c      	ldr	r3, [pc, #496]	@ (800bd18 <SendTxData+0x45c>)
 800bb28:	2201      	movs	r2, #1
 800bb2a:	2100      	movs	r1, #0
 800bb2c:	2002      	movs	r0, #2
 800bb2e:	f011 fab9 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC0 - Temp : %.3f C\r\n", volt_0);
 800bb32:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800bb34:	f7f4 fce0 	bl	80004f8 <__aeabi_f2d>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	e9cd 2300 	strd	r2, r3, [sp]
 800bb40:	4b76      	ldr	r3, [pc, #472]	@ (800bd1c <SendTxData+0x460>)
 800bb42:	2201      	movs	r2, #1
 800bb44:	2100      	movs	r1, #0
 800bb46:	2002      	movs	r0, #2
 800bb48:	f011 faac 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC1 - Out V: %.3f V\r\n", volt_1/10);
 800bb4c:	4974      	ldr	r1, [pc, #464]	@ (800bd20 <SendTxData+0x464>)
 800bb4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb50:	f7f5 fa14 	bl	8000f7c <__aeabi_fdiv>
 800bb54:	4603      	mov	r3, r0
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7f4 fcce 	bl	80004f8 <__aeabi_f2d>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	e9cd 2300 	strd	r2, r3, [sp]
 800bb64:	4b6f      	ldr	r3, [pc, #444]	@ (800bd24 <SendTxData+0x468>)
 800bb66:	2201      	movs	r2, #1
 800bb68:	2100      	movs	r1, #0
 800bb6a:	2002      	movs	r0, #2
 800bb6c:	f011 fa9a 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC2 - Out A: %.3f A\r\n", volt_2);
 800bb70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb72:	f7f4 fcc1 	bl	80004f8 <__aeabi_f2d>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	e9cd 2300 	strd	r2, r3, [sp]
 800bb7e:	4b6a      	ldr	r3, [pc, #424]	@ (800bd28 <SendTxData+0x46c>)
 800bb80:	2201      	movs	r2, #1
 800bb82:	2100      	movs	r1, #0
 800bb84:	2002      	movs	r0, #2
 800bb86:	f011 fa8d 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "ADC3 - In V : %.3f V\r\n", volt_3);
 800bb8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb8c:	f7f4 fcb4 	bl	80004f8 <__aeabi_f2d>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	e9cd 2300 	strd	r2, r3, [sp]
 800bb98:	4b64      	ldr	r3, [pc, #400]	@ (800bd2c <SendTxData+0x470>)
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	2002      	movs	r0, #2
 800bba0:	f011 fa80 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>



  data_sht = sht40();
 800bba4:	f7f6 fcea 	bl	800257c <sht40>
 800bba8:	6438      	str	r0, [r7, #64]	@ 0x40
  t_sht = (data_sht >> 16);
 800bbaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbac:	0c1b      	lsrs	r3, r3, #16
 800bbae:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
  rh_sht = (data_sht & 0xFFFF);
 800bbb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbb4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  //float s = ((float) t_sht / 100);
  //float d = ((float) rh_sht / 100);
  APP_LOG(TS_ON, VLEVEL_M, "TempSHT - In C : %d.%d C\r\n", t_sht/100, t_sht%100);
 800bbb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800bbbc:	4a5c      	ldr	r2, [pc, #368]	@ (800bd30 <SendTxData+0x474>)
 800bbbe:	fba2 2303 	umull	r2, r3, r2, r3
 800bbc2:	095b      	lsrs	r3, r3, #5
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800bbcc:	4a58      	ldr	r2, [pc, #352]	@ (800bd30 <SendTxData+0x474>)
 800bbce:	fba2 1203 	umull	r1, r2, r2, r3
 800bbd2:	0952      	lsrs	r2, r2, #5
 800bbd4:	2164      	movs	r1, #100	@ 0x64
 800bbd6:	fb01 f202 	mul.w	r2, r1, r2
 800bbda:	1a9b      	subs	r3, r3, r2
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	9301      	str	r3, [sp, #4]
 800bbe0:	9000      	str	r0, [sp, #0]
 800bbe2:	4b54      	ldr	r3, [pc, #336]	@ (800bd34 <SendTxData+0x478>)
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	2002      	movs	r0, #2
 800bbea:	f011 fa5b 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "RH SHT  - In % : %d.%d %\r\n", rh_sht/100, rh_sht%100);
 800bbee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bbf2:	4a4f      	ldr	r2, [pc, #316]	@ (800bd30 <SendTxData+0x474>)
 800bbf4:	fba2 2303 	umull	r2, r3, r2, r3
 800bbf8:	095b      	lsrs	r3, r3, #5
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bc02:	4a4b      	ldr	r2, [pc, #300]	@ (800bd30 <SendTxData+0x474>)
 800bc04:	fba2 1203 	umull	r1, r2, r2, r3
 800bc08:	0952      	lsrs	r2, r2, #5
 800bc0a:	2164      	movs	r1, #100	@ 0x64
 800bc0c:	fb01 f202 	mul.w	r2, r1, r2
 800bc10:	1a9b      	subs	r3, r3, r2
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	9000      	str	r0, [sp, #0]
 800bc18:	4b47      	ldr	r3, [pc, #284]	@ (800bd38 <SendTxData+0x47c>)
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	2002      	movs	r0, #2
 800bc20:	f011 fa40 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800bc24:	4b45      	ldr	r3, [pc, #276]	@ (800bd3c <SendTxData+0x480>)
 800bc26:	2202      	movs	r2, #2
 800bc28:	701a      	strb	r2, [r3, #0]

  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	493c      	ldr	r1, [pc, #240]	@ (800bd20 <SendTxData+0x464>)
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7f5 f8f0 	bl	8000e14 <__aeabi_fmul>
 800bc34:	4603      	mov	r3, r0
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7f5 fa62 	bl	8001100 <__aeabi_f2uiz>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  temperature = (int16_t)(sensor_data.temperature);
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7f5 fa35 	bl	80010b4 <__aeabi_f2iz>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	493b      	ldr	r1, [pc, #236]	@ (800bd40 <SendTxData+0x484>)
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7f5 f8dd 	bl	8000e14 <__aeabi_fmul>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	4930      	ldr	r1, [pc, #192]	@ (800bd20 <SendTxData+0x464>)
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7f5 f98c 	bl	8000f7c <__aeabi_fdiv>
 800bc64:	4603      	mov	r3, r0
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7f5 fa4a 	bl	8001100 <__aeabi_f2uiz>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

  AppData.Buffer[i++] = AppLedStateOn;
 800bc72:	4b32      	ldr	r3, [pc, #200]	@ (800bd3c <SendTxData+0x480>)
 800bc74:	685a      	ldr	r2, [r3, #4]
 800bc76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc78:	1c59      	adds	r1, r3, #1
 800bc7a:	6639      	str	r1, [r7, #96]	@ 0x60
 800bc7c:	4413      	add	r3, r2
 800bc7e:	4a31      	ldr	r2, [pc, #196]	@ (800bd44 <SendTxData+0x488>)
 800bc80:	7812      	ldrb	r2, [r2, #0]
 800bc82:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800bc84:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800bc88:	0a1b      	lsrs	r3, r3, #8
 800bc8a:	b298      	uxth	r0, r3
 800bc8c:	4b2b      	ldr	r3, [pc, #172]	@ (800bd3c <SendTxData+0x480>)
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc92:	1c59      	adds	r1, r3, #1
 800bc94:	6639      	str	r1, [r7, #96]	@ 0x60
 800bc96:	4413      	add	r3, r2
 800bc98:	b2c2      	uxtb	r2, r0
 800bc9a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800bc9c:	4b27      	ldr	r3, [pc, #156]	@ (800bd3c <SendTxData+0x480>)
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bca2:	1c59      	adds	r1, r3, #1
 800bca4:	6639      	str	r1, [r7, #96]	@ 0x60
 800bca6:	4413      	add	r3, r2
 800bca8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 800bcac:	b2d2      	uxtb	r2, r2
 800bcae:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800bcb0:	4b22      	ldr	r3, [pc, #136]	@ (800bd3c <SendTxData+0x480>)
 800bcb2:	685a      	ldr	r2, [r3, #4]
 800bcb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bcb6:	1c59      	adds	r1, r3, #1
 800bcb8:	6639      	str	r1, [r7, #96]	@ 0x60
 800bcba:	4413      	add	r3, r2
 800bcbc:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800bcc0:	b2d2      	uxtb	r2, r2
 800bcc2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800bcc4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800bcc8:	0a1b      	lsrs	r3, r3, #8
 800bcca:	b298      	uxth	r0, r3
 800bccc:	4b1b      	ldr	r3, [pc, #108]	@ (800bd3c <SendTxData+0x480>)
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bcd2:	1c59      	adds	r1, r3, #1
 800bcd4:	6639      	str	r1, [r7, #96]	@ 0x60
 800bcd6:	4413      	add	r3, r2
 800bcd8:	b2c2      	uxtb	r2, r0
 800bcda:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800bcdc:	4b17      	ldr	r3, [pc, #92]	@ (800bd3c <SendTxData+0x480>)
 800bcde:	685a      	ldr	r2, [r3, #4]
 800bce0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bce2:	1c59      	adds	r1, r3, #1
 800bce4:	6639      	str	r1, [r7, #96]	@ 0x60
 800bce6:	4413      	add	r3, r2
 800bce8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800bcec:	b2d2      	uxtb	r2, r2
 800bcee:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800bcf0:	4b15      	ldr	r3, [pc, #84]	@ (800bd48 <SendTxData+0x48c>)
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	2b08      	cmp	r3, #8
 800bcf6:	d02a      	beq.n	800bd4e <SendTxData+0x492>
 800bcf8:	4b13      	ldr	r3, [pc, #76]	@ (800bd48 <SendTxData+0x48c>)
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d026      	beq.n	800bd4e <SendTxData+0x492>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800bd00:	4b11      	ldr	r3, [pc, #68]	@ (800bd48 <SendTxData+0x48c>)
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	e021      	b.n	800bd4c <SendTxData+0x490>
 800bd08:	40a00000 	.word	0x40a00000
 800bd0c:	457ff000 	.word	0x457ff000
 800bd10:	40400000 	.word	0x40400000
 800bd14:	080209b0 	.word	0x080209b0
 800bd18:	080209bc 	.word	0x080209bc
 800bd1c:	080209c8 	.word	0x080209c8
 800bd20:	41200000 	.word	0x41200000
 800bd24:	080209e0 	.word	0x080209e0
 800bd28:	080209f8 	.word	0x080209f8
 800bd2c:	08020a10 	.word	0x08020a10
 800bd30:	51eb851f 	.word	0x51eb851f
 800bd34:	08020a28 	.word	0x08020a28
 800bd38:	08020a44 	.word	0x08020a44
 800bd3c:	2000008c 	.word	0x2000008c
 800bd40:	42c80000 	.word	0x42c80000
 800bd44:	20000766 	.word	0x20000766
 800bd48:	20000070 	.word	0x20000070
 800bd4c:	d120      	bne.n	800bd90 <SendTxData+0x4d4>
  {
    AppData.Buffer[i++] = 0;
 800bd4e:	4b69      	ldr	r3, [pc, #420]	@ (800bef4 <SendTxData+0x638>)
 800bd50:	685a      	ldr	r2, [r3, #4]
 800bd52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd54:	1c59      	adds	r1, r3, #1
 800bd56:	6639      	str	r1, [r7, #96]	@ 0x60
 800bd58:	4413      	add	r3, r2
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800bd5e:	4b65      	ldr	r3, [pc, #404]	@ (800bef4 <SendTxData+0x638>)
 800bd60:	685a      	ldr	r2, [r3, #4]
 800bd62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd64:	1c59      	adds	r1, r3, #1
 800bd66:	6639      	str	r1, [r7, #96]	@ 0x60
 800bd68:	4413      	add	r3, r2
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800bd6e:	4b61      	ldr	r3, [pc, #388]	@ (800bef4 <SendTxData+0x638>)
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd74:	1c59      	adds	r1, r3, #1
 800bd76:	6639      	str	r1, [r7, #96]	@ 0x60
 800bd78:	4413      	add	r3, r2
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800bd7e:	4b5d      	ldr	r3, [pc, #372]	@ (800bef4 <SendTxData+0x638>)
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd84:	1c59      	adds	r1, r3, #1
 800bd86:	6639      	str	r1, [r7, #96]	@ 0x60
 800bd88:	4413      	add	r3, r2
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	701a      	strb	r2, [r3, #0]
 800bd8e:	e05d      	b.n	800be4c <SendTxData+0x590>
  }
  else
  {
    latitude = sensor_data.latitude;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	653b      	str	r3, [r7, #80]	@ 0x50
    longitude = sensor_data.longitude;
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	64fb      	str	r3, [r7, #76]	@ 0x4c

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800bd98:	4b56      	ldr	r3, [pc, #344]	@ (800bef4 <SendTxData+0x638>)
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd9e:	1c59      	adds	r1, r3, #1
 800bda0:	6639      	str	r1, [r7, #96]	@ 0x60
 800bda2:	18d4      	adds	r4, r2, r3
 800bda4:	f7f6 fcd6 	bl	8002754 <GetBatteryLevel>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	7023      	strb	r3, [r4, #0]
    //AppData.Buffer[i++] = sht40();        /* 1 (very low) to 254 (fully charged) */
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800bdac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdae:	1418      	asrs	r0, r3, #16
 800bdb0:	4b50      	ldr	r3, [pc, #320]	@ (800bef4 <SendTxData+0x638>)
 800bdb2:	685a      	ldr	r2, [r3, #4]
 800bdb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdb6:	1c59      	adds	r1, r3, #1
 800bdb8:	6639      	str	r1, [r7, #96]	@ 0x60
 800bdba:	4413      	add	r3, r2
 800bdbc:	b2c2      	uxtb	r2, r0
 800bdbe:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800bdc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdc2:	1218      	asrs	r0, r3, #8
 800bdc4:	4b4b      	ldr	r3, [pc, #300]	@ (800bef4 <SendTxData+0x638>)
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdca:	1c59      	adds	r1, r3, #1
 800bdcc:	6639      	str	r1, [r7, #96]	@ 0x60
 800bdce:	4413      	add	r3, r2
 800bdd0:	b2c2      	uxtb	r2, r0
 800bdd2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800bdd4:	4b47      	ldr	r3, [pc, #284]	@ (800bef4 <SendTxData+0x638>)
 800bdd6:	685a      	ldr	r2, [r3, #4]
 800bdd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdda:	1c59      	adds	r1, r3, #1
 800bddc:	6639      	str	r1, [r7, #96]	@ 0x60
 800bdde:	4413      	add	r3, r2
 800bde0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bde2:	b2d2      	uxtb	r2, r2
 800bde4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800bde6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bde8:	1418      	asrs	r0, r3, #16
 800bdea:	4b42      	ldr	r3, [pc, #264]	@ (800bef4 <SendTxData+0x638>)
 800bdec:	685a      	ldr	r2, [r3, #4]
 800bdee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdf0:	1c59      	adds	r1, r3, #1
 800bdf2:	6639      	str	r1, [r7, #96]	@ 0x60
 800bdf4:	4413      	add	r3, r2
 800bdf6:	b2c2      	uxtb	r2, r0
 800bdf8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800bdfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdfc:	1218      	asrs	r0, r3, #8
 800bdfe:	4b3d      	ldr	r3, [pc, #244]	@ (800bef4 <SendTxData+0x638>)
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be04:	1c59      	adds	r1, r3, #1
 800be06:	6639      	str	r1, [r7, #96]	@ 0x60
 800be08:	4413      	add	r3, r2
 800be0a:	b2c2      	uxtb	r2, r0
 800be0c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800be0e:	4b39      	ldr	r3, [pc, #228]	@ (800bef4 <SendTxData+0x638>)
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be14:	1c59      	adds	r1, r3, #1
 800be16:	6639      	str	r1, [r7, #96]	@ 0x60
 800be18:	4413      	add	r3, r2
 800be1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be1c:	b2d2      	uxtb	r2, r2
 800be1e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800be20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800be24:	0a1b      	lsrs	r3, r3, #8
 800be26:	b298      	uxth	r0, r3
 800be28:	4b32      	ldr	r3, [pc, #200]	@ (800bef4 <SendTxData+0x638>)
 800be2a:	685a      	ldr	r2, [r3, #4]
 800be2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be2e:	1c59      	adds	r1, r3, #1
 800be30:	6639      	str	r1, [r7, #96]	@ 0x60
 800be32:	4413      	add	r3, r2
 800be34:	b2c2      	uxtb	r2, r0
 800be36:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800be38:	4b2e      	ldr	r3, [pc, #184]	@ (800bef4 <SendTxData+0x638>)
 800be3a:	685a      	ldr	r2, [r3, #4]
 800be3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be3e:	1c59      	adds	r1, r3, #1
 800be40:	6639      	str	r1, [r7, #96]	@ 0x60
 800be42:	4413      	add	r3, r2
 800be44:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800be48:	b2d2      	uxtb	r2, r2
 800be4a:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800be4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	4b28      	ldr	r3, [pc, #160]	@ (800bef4 <SendTxData+0x638>)
 800be52:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800be54:	4b28      	ldr	r3, [pc, #160]	@ (800bef8 <SendTxData+0x63c>)
 800be56:	7a5b      	ldrb	r3, [r3, #9]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d007      	beq.n	800be6c <SendTxData+0x5b0>
 800be5c:	f002 fa98 	bl	800e390 <LmHandlerJoinStatus>
 800be60:	4603      	mov	r3, r0
 800be62:	2b01      	cmp	r3, #1
 800be64:	d102      	bne.n	800be6c <SendTxData+0x5b0>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800be66:	4824      	ldr	r0, [pc, #144]	@ (800bef8 <SendTxData+0x63c>)
 800be68:	f010 ff12 	bl	801cc90 <UTIL_TIMER_Stop>
#if defined(DBG)   // XXX:
    //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800be6c:	4b23      	ldr	r3, [pc, #140]	@ (800befc <SendTxData+0x640>)
 800be6e:	78db      	ldrb	r3, [r3, #3]
 800be70:	2200      	movs	r2, #0
 800be72:	4619      	mov	r1, r3
 800be74:	481f      	ldr	r0, [pc, #124]	@ (800bef4 <SendTxData+0x638>)
 800be76:	f002 faa7 	bl	800e3c8 <LmHandlerSend>
 800be7a:	4603      	mov	r3, r0
 800be7c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  if (LORAMAC_HANDLER_SUCCESS == status)
 800be80:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 800be84:	2b00      	cmp	r3, #0
 800be86:	d106      	bne.n	800be96 <SendTxData+0x5da>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800be88:	4b1d      	ldr	r3, [pc, #116]	@ (800bf00 <SendTxData+0x644>)
 800be8a:	2201      	movs	r2, #1
 800be8c:	2100      	movs	r1, #0
 800be8e:	2001      	movs	r0, #1
 800be90:	f011 f908 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
 800be94:	e016      	b.n	800bec4 <SendTxData+0x608>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800be96:	f997 305b 	ldrsb.w	r3, [r7, #91]	@ 0x5b
 800be9a:	f113 0f06 	cmn.w	r3, #6
 800be9e:	d111      	bne.n	800bec4 <SendTxData+0x608>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800bea0:	f002 f9ca 	bl	800e238 <LmHandlerGetDutyCycleWaitTime>
 800bea4:	6678      	str	r0, [r7, #100]	@ 0x64
    if (nextTxIn > 0)
 800bea6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00b      	beq.n	800bec4 <SendTxData+0x608>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800beac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800beae:	4a15      	ldr	r2, [pc, #84]	@ (800bf04 <SendTxData+0x648>)
 800beb0:	fba2 2303 	umull	r2, r3, r2, r3
 800beb4:	099b      	lsrs	r3, r3, #6
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	4b13      	ldr	r3, [pc, #76]	@ (800bf08 <SendTxData+0x64c>)
 800beba:	2201      	movs	r2, #1
 800bebc:	2100      	movs	r1, #0
 800bebe:	2001      	movs	r0, #1
 800bec0:	f011 f8f0 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800bec4:	4b11      	ldr	r3, [pc, #68]	@ (800bf0c <SendTxData+0x650>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10f      	bne.n	800beec <SendTxData+0x630>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800becc:	4810      	ldr	r0, [pc, #64]	@ (800bf10 <SendTxData+0x654>)
 800bece:	f010 fedf 	bl	801cc90 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800bed2:	4b10      	ldr	r3, [pc, #64]	@ (800bf14 <SendTxData+0x658>)
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bed8:	4293      	cmp	r3, r2
 800beda:	bf38      	it	cc
 800bedc:	4613      	movcc	r3, r2
 800bede:	4619      	mov	r1, r3
 800bee0:	480b      	ldr	r0, [pc, #44]	@ (800bf10 <SendTxData+0x654>)
 800bee2:	f010 ff45 	bl	801cd70 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800bee6:	480a      	ldr	r0, [pc, #40]	@ (800bf10 <SendTxData+0x654>)
 800bee8:	f010 fe64 	bl	801cbb4 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800beec:	bf00      	nop
 800beee:	376c      	adds	r7, #108	@ 0x6c
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd90      	pop	{r4, r7, pc}
 800bef4:	2000008c 	.word	0x2000008c
 800bef8:	20000798 	.word	0x20000798
 800befc:	20000070 	.word	0x20000070
 800bf00:	08020a60 	.word	0x08020a60
 800bf04:	10624dd3 	.word	0x10624dd3
 800bf08:	08020a70 	.word	0x08020a70
 800bf0c:	20000640 	.word	0x20000640
 800bf10:	20000644 	.word	0x20000644
 800bf14:	20000088 	.word	0x20000088

0800bf18 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800bf20:	2100      	movs	r1, #0
 800bf22:	2002      	movs	r0, #2
 800bf24:	f010 fd90 	bl	801ca48 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800bf28:	4803      	ldr	r0, [pc, #12]	@ (800bf38 <OnTxTimerEvent+0x20>)
 800bf2a:	f010 fe43 	bl	801cbb4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800bf2e:	bf00      	nop
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	20000644 	.word	0x20000644

0800bf3c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
#if defined(DBG)	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800bf44:	2200      	movs	r2, #0
 800bf46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bf4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bf4e:	f7f9 fec3 	bl	8005cd8 <HAL_GPIO_WritePin>
#endif
}
 800bf52:	bf00      	nop
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
#if defined(DBG)   // XXX: No LED available
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800bf62:	bf00      	nop
 800bf64:	370c      	adds	r7, #12
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bc80      	pop	{r7}
 800bf6a:	4770      	bx	lr

0800bf6c <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
#if defined(DBG)   // XXX: No LED available
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); /* LED_RED */
 800bf74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bf78:	4803      	ldr	r0, [pc, #12]	@ (800bf88 <OnJoinTimerLedEvent+0x1c>)
 800bf7a:	f7f9 fec4 	bl	8005d06 <HAL_GPIO_TogglePin>
#endif
}
 800bf7e:	bf00      	nop
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	48000400 	.word	0x48000400

0800bf8c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b086      	sub	sp, #24
 800bf90:	af04      	add	r7, sp, #16
 800bf92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d048      	beq.n	800c02c <OnTxData+0xa0>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d044      	beq.n	800c02c <OnTxData+0xa0>
    {
#if defined(DBG)	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bfa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bfac:	f7f9 fe94 	bl	8005cd8 <HAL_GPIO_WritePin>
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800bfb0:	4820      	ldr	r0, [pc, #128]	@ (800c034 <OnTxData+0xa8>)
 800bfb2:	f010 fdff 	bl	801cbb4 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800bfb6:	4b20      	ldr	r3, [pc, #128]	@ (800c038 <OnTxData+0xac>)
 800bfb8:	2200      	movs	r2, #0
 800bfba:	2100      	movs	r1, #0
 800bfbc:	2002      	movs	r0, #2
 800bfbe:	f011 f871 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	7c12      	ldrb	r2, [r2, #16]
 800bfca:	4611      	mov	r1, r2
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800bfda:	9203      	str	r2, [sp, #12]
 800bfdc:	9002      	str	r0, [sp, #8]
 800bfde:	9101      	str	r1, [sp, #4]
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	4b16      	ldr	r3, [pc, #88]	@ (800c03c <OnTxData+0xb0>)
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	2003      	movs	r0, #3
 800bfea:	f011 f85b 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800bfee:	4b14      	ldr	r3, [pc, #80]	@ (800c040 <OnTxData+0xb4>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	2100      	movs	r1, #0
 800bff4:	2003      	movs	r0, #3
 800bff6:	f011 f855 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	7a1b      	ldrb	r3, [r3, #8]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d10e      	bne.n	800c020 <OnTxData+0x94>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	7a5b      	ldrb	r3, [r3, #9]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d001      	beq.n	800c00e <OnTxData+0x82>
 800c00a:	4b0e      	ldr	r3, [pc, #56]	@ (800c044 <OnTxData+0xb8>)
 800c00c:	e000      	b.n	800c010 <OnTxData+0x84>
 800c00e:	4b0e      	ldr	r3, [pc, #56]	@ (800c048 <OnTxData+0xbc>)
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	4b0e      	ldr	r3, [pc, #56]	@ (800c04c <OnTxData+0xc0>)
 800c014:	2200      	movs	r2, #0
 800c016:	2100      	movs	r1, #0
 800c018:	2003      	movs	r0, #3
 800c01a:	f011 f843 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800c01e:	e005      	b.n	800c02c <OnTxData+0xa0>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800c020:	4b0b      	ldr	r3, [pc, #44]	@ (800c050 <OnTxData+0xc4>)
 800c022:	2200      	movs	r2, #0
 800c024:	2100      	movs	r1, #0
 800c026:	2003      	movs	r0, #3
 800c028:	f011 f83c 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	20000768 	.word	0x20000768
 800c038:	08020a90 	.word	0x08020a90
 800c03c:	08020ac4 	.word	0x08020ac4
 800c040:	08020af8 	.word	0x08020af8
 800c044:	08020b08 	.word	0x08020b08
 800c048:	08020b0c 	.word	0x08020b0c
 800c04c:	08020b14 	.word	0x08020b14
 800c050:	08020b28 	.word	0x08020b28

0800c054 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d039      	beq.n	800c0d6 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d11e      	bne.n	800c0aa <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800c06c:	2100      	movs	r1, #0
 800c06e:	2004      	movs	r0, #4
 800c070:	f010 fcea 	bl	801ca48 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800c074:	481a      	ldr	r0, [pc, #104]	@ (800c0e0 <OnJoinRequest+0x8c>)
 800c076:	f010 fe0b 	bl	801cc90 <UTIL_TIMER_Stop>
#if defined(DBG)   // XXX:
      //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800c07a:	4b1a      	ldr	r3, [pc, #104]	@ (800c0e4 <OnJoinRequest+0x90>)
 800c07c:	2200      	movs	r2, #0
 800c07e:	2100      	movs	r1, #0
 800c080:	2002      	movs	r0, #2
 800c082:	f011 f80f 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	79db      	ldrb	r3, [r3, #7]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d106      	bne.n	800c09c <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800c08e:	4b16      	ldr	r3, [pc, #88]	@ (800c0e8 <OnJoinRequest+0x94>)
 800c090:	2200      	movs	r2, #0
 800c092:	2100      	movs	r1, #0
 800c094:	2002      	movs	r0, #2
 800c096:	f011 f805 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800c09a:	e01c      	b.n	800c0d6 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800c09c:	4b13      	ldr	r3, [pc, #76]	@ (800c0ec <OnJoinRequest+0x98>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	2002      	movs	r0, #2
 800c0a4:	f010 fffe 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800c0a8:	e015      	b.n	800c0d6 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800c0aa:	4b11      	ldr	r3, [pc, #68]	@ (800c0f0 <OnJoinRequest+0x9c>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	2002      	movs	r0, #2
 800c0b2:	f010 fff7 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	79db      	ldrb	r3, [r3, #7]
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d10b      	bne.n	800c0d6 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800c0be:	4b0d      	ldr	r3, [pc, #52]	@ (800c0f4 <OnJoinRequest+0xa0>)
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	2002      	movs	r0, #2
 800c0c6:	f010 ffed 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800c0ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c0f8 <OnJoinRequest+0xa4>)
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	2101      	movs	r1, #1
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f002 f8bb 	bl	800e24c <LmHandlerJoin>
}
 800c0d6:	bf00      	nop
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	20000798 	.word	0x20000798
 800c0e4:	08020b38 	.word	0x08020b38
 800c0e8:	08020b50 	.word	0x08020b50
 800c0ec:	08020b70 	.word	0x08020b70
 800c0f0:	08020b90 	.word	0x08020b90
 800c0f4:	08020bac 	.word	0x08020bac
 800c0f8:	20000020 	.word	0x20000020

0800c0fc <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800c0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0fe:	b093      	sub	sp, #76	@ 0x4c
 800c100:	af0c      	add	r7, sp, #48	@ 0x30
 800c102:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d056      	beq.n	800c1b8 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	785b      	ldrb	r3, [r3, #1]
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d008      	beq.n	800c124 <OnBeaconStatusChange+0x28>
 800c112:	2b03      	cmp	r3, #3
 800c114:	d049      	beq.n	800c1aa <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800c116:	4b2a      	ldr	r3, [pc, #168]	@ (800c1c0 <OnBeaconStatusChange+0xc4>)
 800c118:	2200      	movs	r2, #0
 800c11a:	2100      	movs	r1, #0
 800c11c:	2002      	movs	r0, #2
 800c11e:	f010 ffc1 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800c122:	e049      	b.n	800c1b8 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	7c1b      	ldrb	r3, [r3, #16]
 800c128:	4618      	mov	r0, r3
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c130:	461c      	mov	r4, r3
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800c138:	461d      	mov	r5, r3
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	697a      	ldr	r2, [r7, #20]
 800c140:	6852      	ldr	r2, [r2, #4]
 800c142:	6979      	ldr	r1, [r7, #20]
 800c144:	7d89      	ldrb	r1, [r1, #22]
 800c146:	460e      	mov	r6, r1
 800c148:	6979      	ldr	r1, [r7, #20]
 800c14a:	7dc9      	ldrb	r1, [r1, #23]
 800c14c:	6139      	str	r1, [r7, #16]
 800c14e:	6979      	ldr	r1, [r7, #20]
 800c150:	7e09      	ldrb	r1, [r1, #24]
 800c152:	60f9      	str	r1, [r7, #12]
 800c154:	6979      	ldr	r1, [r7, #20]
 800c156:	7e49      	ldrb	r1, [r1, #25]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	6979      	ldr	r1, [r7, #20]
 800c15c:	7e89      	ldrb	r1, [r1, #26]
 800c15e:	6079      	str	r1, [r7, #4]
 800c160:	6979      	ldr	r1, [r7, #20]
 800c162:	7ec9      	ldrb	r1, [r1, #27]
 800c164:	6039      	str	r1, [r7, #0]
 800c166:	6979      	ldr	r1, [r7, #20]
 800c168:	7f09      	ldrb	r1, [r1, #28]
 800c16a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c16c:	f8d7 c000 	ldr.w	ip, [r7]
 800c170:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800c174:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800c178:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800c17c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800c180:	f8cd c020 	str.w	ip, [sp, #32]
 800c184:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800c188:	f8cd c01c 	str.w	ip, [sp, #28]
 800c18c:	6939      	ldr	r1, [r7, #16]
 800c18e:	9106      	str	r1, [sp, #24]
 800c190:	9605      	str	r6, [sp, #20]
 800c192:	9204      	str	r2, [sp, #16]
 800c194:	9303      	str	r3, [sp, #12]
 800c196:	9502      	str	r5, [sp, #8]
 800c198:	9401      	str	r4, [sp, #4]
 800c19a:	9000      	str	r0, [sp, #0]
 800c19c:	4b09      	ldr	r3, [pc, #36]	@ (800c1c4 <OnBeaconStatusChange+0xc8>)
 800c19e:	2200      	movs	r2, #0
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	2002      	movs	r0, #2
 800c1a4:	f010 ff7e 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800c1a8:	e006      	b.n	800c1b8 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800c1aa:	4b07      	ldr	r3, [pc, #28]	@ (800c1c8 <OnBeaconStatusChange+0xcc>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	2002      	movs	r0, #2
 800c1b2:	f010 ff77 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800c1b6:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800c1b8:	bf00      	nop
 800c1ba:	371c      	adds	r7, #28
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1c0:	08020bd0 	.word	0x08020bd0
 800c1c4:	08020be8 	.word	0x08020be8
 800c1c8:	08020c5c 	.word	0x08020c5c

0800c1cc <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800c1d0:	bf00      	nop
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bc80      	pop	{r7}
 800c1d6:	4770      	bx	lr

0800c1d8 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af02      	add	r7, sp, #8
 800c1de:	4603      	mov	r3, r0
 800c1e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800c1e2:	79fb      	ldrb	r3, [r7, #7]
 800c1e4:	4a06      	ldr	r2, [pc, #24]	@ (800c200 <OnClassChange+0x28>)
 800c1e6:	5cd3      	ldrb	r3, [r2, r3]
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	4b06      	ldr	r3, [pc, #24]	@ (800c204 <OnClassChange+0x2c>)
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	2002      	movs	r0, #2
 800c1f2:	f010 ff57 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800c1f6:	bf00      	nop
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	08020c98 	.word	0x08020c98
 800c204:	08020c7c 	.word	0x08020c7c

0800c208 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800c20c:	2100      	movs	r1, #0
 800c20e:	2001      	movs	r0, #1
 800c210:	f010 fc1a 	bl	801ca48 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800c214:	bf00      	nop
 800c216:	bd80      	pop	{r7, pc}

0800c218 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800c220:	4a0d      	ldr	r2, [pc, #52]	@ (800c258 <OnTxPeriodicityChanged+0x40>)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800c226:	4b0c      	ldr	r3, [pc, #48]	@ (800c258 <OnTxPeriodicityChanged+0x40>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d103      	bne.n	800c236 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800c22e:	4b0a      	ldr	r3, [pc, #40]	@ (800c258 <OnTxPeriodicityChanged+0x40>)
 800c230:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800c234:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800c236:	4809      	ldr	r0, [pc, #36]	@ (800c25c <OnTxPeriodicityChanged+0x44>)
 800c238:	f010 fd2a 	bl	801cc90 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800c23c:	4b06      	ldr	r3, [pc, #24]	@ (800c258 <OnTxPeriodicityChanged+0x40>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4619      	mov	r1, r3
 800c242:	4806      	ldr	r0, [pc, #24]	@ (800c25c <OnTxPeriodicityChanged+0x44>)
 800c244:	f010 fd94 	bl	801cd70 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800c248:	4804      	ldr	r0, [pc, #16]	@ (800c25c <OnTxPeriodicityChanged+0x44>)
 800c24a:	f010 fcb3 	bl	801cbb4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800c24e:	bf00      	nop
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20000088 	.word	0x20000088
 800c25c:	20000644 	.word	0x20000644

0800c260 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	4603      	mov	r3, r0
 800c268:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800c26a:	4a04      	ldr	r2, [pc, #16]	@ (800c27c <OnTxFrameCtrlChanged+0x1c>)
 800c26c:	79fb      	ldrb	r3, [r7, #7]
 800c26e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	bc80      	pop	{r7}
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	20000070 	.word	0x20000070

0800c280 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800c28a:	4a04      	ldr	r2, [pc, #16]	@ (800c29c <OnPingSlotPeriodicityChanged+0x1c>)
 800c28c:	79fb      	ldrb	r3, [r7, #7]
 800c28e:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	bc80      	pop	{r7}
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	20000070 	.word	0x20000070

0800c2a0 <OnSystemReset>:

static void OnSystemReset(void)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c2a4:	f002 fdcb 	bl	800ee3e <LmHandlerHalt>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d106      	bne.n	800c2bc <OnSystemReset+0x1c>
 800c2ae:	f002 f86f 	bl	800e390 <LmHandlerJoinStatus>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d101      	bne.n	800c2bc <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800c2b8:	f7ff f94a 	bl	800b550 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800c2bc:	bf00      	nop
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <StopJoin>:

static void StopJoin(void)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */
#if defined(DBG)   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c2ca:	481c      	ldr	r0, [pc, #112]	@ (800c33c <StopJoin+0x7c>)
 800c2cc:	f7f9 fd04 	bl	8005cd8 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c2d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c2da:	f7f9 fcfd 	bl	8005cd8 <HAL_GPIO_WritePin>
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800c2de:	4818      	ldr	r0, [pc, #96]	@ (800c340 <StopJoin+0x80>)
 800c2e0:	f010 fcd6 	bl	801cc90 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800c2e4:	f002 fd9e 	bl	800ee24 <LmHandlerStop>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d006      	beq.n	800c2fc <StopJoin+0x3c>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800c2ee:	4b15      	ldr	r3, [pc, #84]	@ (800c344 <StopJoin+0x84>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	2002      	movs	r0, #2
 800c2f6:	f010 fed5 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
 800c2fa:	e01a      	b.n	800c332 <StopJoin+0x72>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800c2fc:	4b12      	ldr	r3, [pc, #72]	@ (800c348 <StopJoin+0x88>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	2100      	movs	r1, #0
 800c302:	2002      	movs	r0, #2
 800c304:	f010 fece 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800c308:	4b10      	ldr	r3, [pc, #64]	@ (800c34c <StopJoin+0x8c>)
 800c30a:	2201      	movs	r2, #1
 800c30c:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800c30e:	4b10      	ldr	r3, [pc, #64]	@ (800c350 <StopJoin+0x90>)
 800c310:	2200      	movs	r2, #0
 800c312:	2100      	movs	r1, #0
 800c314:	2002      	movs	r0, #2
 800c316:	f010 fec5 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800c31a:	480e      	ldr	r0, [pc, #56]	@ (800c354 <StopJoin+0x94>)
 800c31c:	f001 fe32 	bl	800df84 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800c320:	4b0a      	ldr	r3, [pc, #40]	@ (800c34c <StopJoin+0x8c>)
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	2101      	movs	r1, #1
 800c326:	4618      	mov	r0, r3
 800c328:	f001 ff90 	bl	800e24c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800c32c:	4804      	ldr	r0, [pc, #16]	@ (800c340 <StopJoin+0x80>)
 800c32e:	f010 fc41 	bl	801cbb4 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800c332:	4809      	ldr	r0, [pc, #36]	@ (800c358 <StopJoin+0x98>)
 800c334:	f010 fc3e 	bl	801cbb4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800c338:	bf00      	nop
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	48000400 	.word	0x48000400
 800c340:	20000644 	.word	0x20000644
 800c344:	08020c9c 	.word	0x08020c9c
 800c348:	08020cbc 	.word	0x08020cbc
 800c34c:	20000020 	.word	0x20000020
 800c350:	08020cd0 	.word	0x08020cd0
 800c354:	20000070 	.word	0x20000070
 800c358:	2000065c 	.word	0x2000065c

0800c35c <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800c364:	4b0c      	ldr	r3, [pc, #48]	@ (800c398 <OnStopJoinTimerEvent+0x3c>)
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d103      	bne.n	800c374 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800c36c:	2100      	movs	r1, #0
 800c36e:	2008      	movs	r0, #8
 800c370:	f010 fb6a 	bl	801ca48 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */
#if defined(DBG)   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800c374:	2200      	movs	r2, #0
 800c376:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c37a:	4808      	ldr	r0, [pc, #32]	@ (800c39c <OnStopJoinTimerEvent+0x40>)
 800c37c:	f7f9 fcac 	bl	8005cd8 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800c380:	2200      	movs	r2, #0
 800c382:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c38a:	f7f9 fca5 	bl	8005cd8 <HAL_GPIO_WritePin>
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800c38e:	bf00      	nop
 800c390:	3708      	adds	r7, #8
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	20000020 	.word	0x20000020
 800c39c:	48000400 	.word	0x48000400

0800c3a0 <StoreContext>:

static void StoreContext(void)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c3a6:	23ff      	movs	r3, #255	@ 0xff
 800c3a8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800c3aa:	f002 fd7d 	bl	800eea8 <LmHandlerNvmDataStore>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800c3b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3b6:	f113 0f08 	cmn.w	r3, #8
 800c3ba:	d106      	bne.n	800c3ca <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800c3bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c3e8 <StoreContext+0x48>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	2002      	movs	r0, #2
 800c3c4:	f010 fe6e 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800c3c8:	e00a      	b.n	800c3e0 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800c3ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d2:	d105      	bne.n	800c3e0 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800c3d4:	4b05      	ldr	r3, [pc, #20]	@ (800c3ec <StoreContext+0x4c>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	2100      	movs	r1, #0
 800c3da:	2002      	movs	r0, #2
 800c3dc:	f010 fe62 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800c3e0:	bf00      	nop
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	08020cf0 	.word	0x08020cf0
 800c3ec:	08020d08 	.word	0x08020d08

0800c3f0 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800c3fa:	79fb      	ldrb	r3, [r7, #7]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d106      	bne.n	800c40e <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800c400:	4b08      	ldr	r3, [pc, #32]	@ (800c424 <OnNvmDataChange+0x34>)
 800c402:	2200      	movs	r2, #0
 800c404:	2100      	movs	r1, #0
 800c406:	2002      	movs	r0, #2
 800c408:	f010 fe4c 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800c40c:	e005      	b.n	800c41a <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800c40e:	4b06      	ldr	r3, [pc, #24]	@ (800c428 <OnNvmDataChange+0x38>)
 800c410:	2200      	movs	r2, #0
 800c412:	2100      	movs	r1, #0
 800c414:	2002      	movs	r0, #2
 800c416:	f010 fe45 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800c41a:	bf00      	nop
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	08020d20 	.word	0x08020d20
 800c428:	08020d34 	.word	0x08020d34

0800c42c <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800c436:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c43a:	4807      	ldr	r0, [pc, #28]	@ (800c458 <OnStoreContextRequest+0x2c>)
 800c43c:	f7f5 fab8 	bl	80019b0 <FLASH_IF_Erase>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d104      	bne.n	800c450 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	6879      	ldr	r1, [r7, #4]
 800c44a:	4803      	ldr	r0, [pc, #12]	@ (800c458 <OnStoreContextRequest+0x2c>)
 800c44c:	f7f5 fa60 	bl	8001910 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	0803f000 	.word	0x0803f000

0800c45c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	4903      	ldr	r1, [pc, #12]	@ (800c478 <OnRestoreContextRequest+0x1c>)
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f7f5 fa78 	bl	8001960 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800c470:	bf00      	nop
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	0803f000 	.word	0x0803f000

0800c47c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800c480:	4b15      	ldr	r3, [pc, #84]	@ (800c4d8 <LoraInfo_Init+0x5c>)
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800c486:	4b14      	ldr	r3, [pc, #80]	@ (800c4d8 <LoraInfo_Init+0x5c>)
 800c488:	2200      	movs	r2, #0
 800c48a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800c48c:	4b12      	ldr	r3, [pc, #72]	@ (800c4d8 <LoraInfo_Init+0x5c>)
 800c48e:	2200      	movs	r2, #0
 800c490:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800c492:	4b11      	ldr	r3, [pc, #68]	@ (800c4d8 <LoraInfo_Init+0x5c>)
 800c494:	2200      	movs	r2, #0
 800c496:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800c498:	4b0f      	ldr	r3, [pc, #60]	@ (800c4d8 <LoraInfo_Init+0x5c>)
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	f043 0320 	orr.w	r3, r3, #32
 800c4a0:	4a0d      	ldr	r2, [pc, #52]	@ (800c4d8 <LoraInfo_Init+0x5c>)
 800c4a2:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800c4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c4d8 <LoraInfo_Init+0x5c>)
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d10d      	bne.n	800c4c8 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800c4ac:	4b0b      	ldr	r3, [pc, #44]	@ (800c4dc <LoraInfo_Init+0x60>)
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	f010 fdf6 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800c4b8:	bf00      	nop
 800c4ba:	f010 fde1 	bl	801d080 <UTIL_ADV_TRACE_IsBufferEmpty>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d1fa      	bne.n	800c4ba <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800c4c4:	bf00      	nop
 800c4c6:	e7fd      	b.n	800c4c4 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800c4c8:	4b03      	ldr	r3, [pc, #12]	@ (800c4d8 <LoraInfo_Init+0x5c>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800c4ce:	4b02      	ldr	r3, [pc, #8]	@ (800c4d8 <LoraInfo_Init+0x5c>)
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800c4d4:	bf00      	nop
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	200007b0 	.word	0x200007b0
 800c4dc:	08020d48 	.word	0x08020d48

0800c4e0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800c4e4:	4b02      	ldr	r3, [pc, #8]	@ (800c4f0 <LoraInfo_GetPtr+0x10>)
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bc80      	pop	{r7}
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	200007b0 	.word	0x200007b0

0800c4f4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800c4f8:	f7f7 f901 	bl	80036fe <BSP_RADIO_Init>
 800c4fc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	bd80      	pop	{r7, pc}

0800c502 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	4603      	mov	r3, r0
 800c50a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c50c:	79fb      	ldrb	r3, [r7, #7]
 800c50e:	4618      	mov	r0, r3
 800c510:	f7f7 f926 	bl	8003760 <BSP_RADIO_ConfigRFSwitch>
 800c514:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c516:	4618      	mov	r0, r3
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800c522:	f7f7 f96b 	bl	80037fc <BSP_RADIO_GetTxConfig>
 800c526:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c528:	4618      	mov	r0, r3
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800c530:	f7f7 f96b 	bl	800380a <BSP_RADIO_IsTCXO>
 800c534:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c536:	4618      	mov	r0, r3
 800c538:	bd80      	pop	{r7, pc}

0800c53a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800c53e:	f7f7 f96b 	bl	8003818 <BSP_RADIO_IsDCDC>
 800c542:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c544:	4618      	mov	r0, r3
 800c546:	bd80      	pop	{r7, pc}

0800c548 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	4603      	mov	r3, r0
 800c550:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800c552:	79fb      	ldrb	r3, [r7, #7]
 800c554:	4618      	mov	r0, r3
 800c556:	f7f7 f966 	bl	8003826 <BSP_RADIO_GetRFOMaxPowerConfig>
 800c55a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	33f1      	adds	r3, #241	@ 0xf1
 800c570:	2210      	movs	r2, #16
 800c572:	2100      	movs	r1, #0
 800c574:	4618      	mov	r0, r3
 800c576:	f00c fcd9 	bl	8018f2c <memset1>
    ctx->M_n = 0;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	22f0      	movs	r2, #240	@ 0xf0
 800c586:	2100      	movs	r1, #0
 800c588:	4618      	mov	r0, r3
 800c58a:	f00c fccf 	bl	8018f2c <memset1>
}
 800c58e:	bf00      	nop
 800c590:	3708      	adds	r7, #8
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b082      	sub	sp, #8
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	2110      	movs	r1, #16
 800c5a6:	6838      	ldr	r0, [r7, #0]
 800c5a8:	f000 fe60 	bl	800d26c <lorawan_aes_set_key>
}
 800c5ac:	bf00      	nop
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b08c      	sub	sp, #48	@ 0x30
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	f000 80a1 	beq.w	800c70e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c5d2:	f1c3 0310 	rsb	r3, r3, #16
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	bf28      	it	cs
 800c5dc:	4613      	movcs	r3, r2
 800c5de:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c5ec:	4413      	add	r3, r2
 800c5ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5f0:	b292      	uxth	r2, r2
 800c5f2:	68b9      	ldr	r1, [r7, #8]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f00c fc5e 	bl	8018eb6 <memcpy1>
        ctx->M_n += mlen;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800c600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c602:	441a      	add	r2, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c610:	2b0f      	cmp	r3, #15
 800c612:	f240 808d 	bls.w	800c730 <AES_CMAC_Update+0x17c>
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61a:	429a      	cmp	r2, r3
 800c61c:	f000 8088 	beq.w	800c730 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800c620:	2300      	movs	r3, #0
 800c622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c624:	e015      	b.n	800c652 <AES_CMAC_Update+0x9e>
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c62a:	4413      	add	r3, r2
 800c62c:	33f1      	adds	r3, #241	@ 0xf1
 800c62e:	781a      	ldrb	r2, [r3, #0]
 800c630:	68f9      	ldr	r1, [r7, #12]
 800c632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c634:	440b      	add	r3, r1
 800c636:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	4053      	eors	r3, r2
 800c63e:	b2d9      	uxtb	r1, r3
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c644:	4413      	add	r3, r2
 800c646:	33f1      	adds	r3, #241	@ 0xf1
 800c648:	460a      	mov	r2, r1
 800c64a:	701a      	strb	r2, [r3, #0]
 800c64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c64e:	3301      	adds	r3, #1
 800c650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c654:	2b0f      	cmp	r3, #15
 800c656:	dde6      	ble.n	800c626 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c65e:	f107 0314 	add.w	r3, r7, #20
 800c662:	2210      	movs	r2, #16
 800c664:	4618      	mov	r0, r3
 800c666:	f00c fc26 	bl	8018eb6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	f107 0114 	add.w	r1, r7, #20
 800c670:	f107 0314 	add.w	r3, r7, #20
 800c674:	4618      	mov	r0, r3
 800c676:	f000 fed7 	bl	800d428 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	33f1      	adds	r3, #241	@ 0xf1
 800c67e:	f107 0114 	add.w	r1, r7, #20
 800c682:	2210      	movs	r2, #16
 800c684:	4618      	mov	r0, r3
 800c686:	f00c fc16 	bl	8018eb6 <memcpy1>

        data += mlen;
 800c68a:	68ba      	ldr	r2, [r7, #8]
 800c68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68e:	4413      	add	r3, r2
 800c690:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c69a:	e038      	b.n	800c70e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800c69c:	2300      	movs	r3, #0
 800c69e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6a0:	e013      	b.n	800c6ca <AES_CMAC_Update+0x116>
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a6:	4413      	add	r3, r2
 800c6a8:	33f1      	adds	r3, #241	@ 0xf1
 800c6aa:	781a      	ldrb	r2, [r3, #0]
 800c6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ae:	68b9      	ldr	r1, [r7, #8]
 800c6b0:	440b      	add	r3, r1
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	4053      	eors	r3, r2
 800c6b6:	b2d9      	uxtb	r1, r3
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6bc:	4413      	add	r3, r2
 800c6be:	33f1      	adds	r3, #241	@ 0xf1
 800c6c0:	460a      	mov	r2, r1
 800c6c2:	701a      	strb	r2, [r3, #0]
 800c6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6cc:	2b0f      	cmp	r3, #15
 800c6ce:	dde8      	ble.n	800c6a2 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c6d6:	f107 0314 	add.w	r3, r7, #20
 800c6da:	2210      	movs	r2, #16
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f00c fbea 	bl	8018eb6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	f107 0114 	add.w	r1, r7, #20
 800c6e8:	f107 0314 	add.w	r3, r7, #20
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f000 fe9b 	bl	800d428 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	33f1      	adds	r3, #241	@ 0xf1
 800c6f6:	f107 0114 	add.w	r1, r7, #20
 800c6fa:	2210      	movs	r2, #16
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f00c fbda 	bl	8018eb6 <memcpy1>

        data += 16;
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	3310      	adds	r3, #16
 800c706:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	3b10      	subs	r3, #16
 800c70c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b10      	cmp	r3, #16
 800c712:	d8c3      	bhi.n	800c69c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	b292      	uxth	r2, r2
 800c71e:	68b9      	ldr	r1, [r7, #8]
 800c720:	4618      	mov	r0, r3
 800c722:	f00c fbc8 	bl	8018eb6 <memcpy1>
    ctx->M_n = len;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800c72e:	e000      	b.n	800c732 <AES_CMAC_Update+0x17e>
            return;
 800c730:	bf00      	nop
}
 800c732:	3730      	adds	r7, #48	@ 0x30
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b092      	sub	sp, #72	@ 0x48
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c742:	f107 031c 	add.w	r3, r7, #28
 800c746:	2210      	movs	r2, #16
 800c748:	2100      	movs	r1, #0
 800c74a:	4618      	mov	r0, r3
 800c74c:	f00c fbee 	bl	8018f2c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c750:	683a      	ldr	r2, [r7, #0]
 800c752:	f107 011c 	add.w	r1, r7, #28
 800c756:	f107 031c 	add.w	r3, r7, #28
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 fe64 	bl	800d428 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c760:	7f3b      	ldrb	r3, [r7, #28]
 800c762:	b25b      	sxtb	r3, r3
 800c764:	2b00      	cmp	r3, #0
 800c766:	da31      	bge.n	800c7cc <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800c768:	2300      	movs	r3, #0
 800c76a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c76c:	e01c      	b.n	800c7a8 <AES_CMAC_Final+0x70>
 800c76e:	f107 021c 	add.w	r2, r7, #28
 800c772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c774:	4413      	add	r3, r2
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	b25b      	sxtb	r3, r3
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	b25a      	sxtb	r2, r3
 800c77e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c780:	3301      	adds	r3, #1
 800c782:	3348      	adds	r3, #72	@ 0x48
 800c784:	443b      	add	r3, r7
 800c786:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c78a:	09db      	lsrs	r3, r3, #7
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	b25b      	sxtb	r3, r3
 800c790:	4313      	orrs	r3, r2
 800c792:	b25b      	sxtb	r3, r3
 800c794:	b2d9      	uxtb	r1, r3
 800c796:	f107 021c 	add.w	r2, r7, #28
 800c79a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c79c:	4413      	add	r3, r2
 800c79e:	460a      	mov	r2, r1
 800c7a0:	701a      	strb	r2, [r3, #0]
 800c7a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7aa:	2b0e      	cmp	r3, #14
 800c7ac:	dddf      	ble.n	800c76e <AES_CMAC_Final+0x36>
 800c7ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c7b2:	005b      	lsls	r3, r3, #1
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800c7ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c7be:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800c7c2:	43db      	mvns	r3, r3
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7ca:	e028      	b.n	800c81e <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7d0:	e01c      	b.n	800c80c <AES_CMAC_Final+0xd4>
 800c7d2:	f107 021c 	add.w	r2, r7, #28
 800c7d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7d8:	4413      	add	r3, r2
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	b25b      	sxtb	r3, r3
 800c7de:	005b      	lsls	r3, r3, #1
 800c7e0:	b25a      	sxtb	r2, r3
 800c7e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	3348      	adds	r3, #72	@ 0x48
 800c7e8:	443b      	add	r3, r7
 800c7ea:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c7ee:	09db      	lsrs	r3, r3, #7
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	b25b      	sxtb	r3, r3
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	b25b      	sxtb	r3, r3
 800c7f8:	b2d9      	uxtb	r1, r3
 800c7fa:	f107 021c 	add.w	r2, r7, #28
 800c7fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c800:	4413      	add	r3, r2
 800c802:	460a      	mov	r2, r1
 800c804:	701a      	strb	r2, [r3, #0]
 800c806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c808:	3301      	adds	r3, #1
 800c80a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c80c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c80e:	2b0e      	cmp	r3, #14
 800c810:	dddf      	ble.n	800c7d2 <AES_CMAC_Final+0x9a>
 800c812:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c824:	2b10      	cmp	r3, #16
 800c826:	d11d      	bne.n	800c864 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c828:	2300      	movs	r3, #0
 800c82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c82c:	e016      	b.n	800c85c <AES_CMAC_Final+0x124>
 800c82e:	683a      	ldr	r2, [r7, #0]
 800c830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c832:	4413      	add	r3, r2
 800c834:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c838:	781a      	ldrb	r2, [r3, #0]
 800c83a:	f107 011c 	add.w	r1, r7, #28
 800c83e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c840:	440b      	add	r3, r1
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	4053      	eors	r3, r2
 800c846:	b2d9      	uxtb	r1, r3
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c84c:	4413      	add	r3, r2
 800c84e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c852:	460a      	mov	r2, r1
 800c854:	701a      	strb	r2, [r3, #0]
 800c856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c858:	3301      	adds	r3, #1
 800c85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c85c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c85e:	2b0f      	cmp	r3, #15
 800c860:	dde5      	ble.n	800c82e <AES_CMAC_Final+0xf6>
 800c862:	e098      	b.n	800c996 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c864:	7f3b      	ldrb	r3, [r7, #28]
 800c866:	b25b      	sxtb	r3, r3
 800c868:	2b00      	cmp	r3, #0
 800c86a:	da31      	bge.n	800c8d0 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800c86c:	2300      	movs	r3, #0
 800c86e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c870:	e01c      	b.n	800c8ac <AES_CMAC_Final+0x174>
 800c872:	f107 021c 	add.w	r2, r7, #28
 800c876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c878:	4413      	add	r3, r2
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	b25b      	sxtb	r3, r3
 800c87e:	005b      	lsls	r3, r3, #1
 800c880:	b25a      	sxtb	r2, r3
 800c882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c884:	3301      	adds	r3, #1
 800c886:	3348      	adds	r3, #72	@ 0x48
 800c888:	443b      	add	r3, r7
 800c88a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c88e:	09db      	lsrs	r3, r3, #7
 800c890:	b2db      	uxtb	r3, r3
 800c892:	b25b      	sxtb	r3, r3
 800c894:	4313      	orrs	r3, r2
 800c896:	b25b      	sxtb	r3, r3
 800c898:	b2d9      	uxtb	r1, r3
 800c89a:	f107 021c 	add.w	r2, r7, #28
 800c89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a0:	4413      	add	r3, r2
 800c8a2:	460a      	mov	r2, r1
 800c8a4:	701a      	strb	r2, [r3, #0]
 800c8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ae:	2b0e      	cmp	r3, #14
 800c8b0:	dddf      	ble.n	800c872 <AES_CMAC_Final+0x13a>
 800c8b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800c8be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c8c2:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800c8c6:	43db      	mvns	r3, r3
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c8ce:	e028      	b.n	800c922 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8d4:	e01c      	b.n	800c910 <AES_CMAC_Final+0x1d8>
 800c8d6:	f107 021c 	add.w	r2, r7, #28
 800c8da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8dc:	4413      	add	r3, r2
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	b25b      	sxtb	r3, r3
 800c8e2:	005b      	lsls	r3, r3, #1
 800c8e4:	b25a      	sxtb	r2, r3
 800c8e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	3348      	adds	r3, #72	@ 0x48
 800c8ec:	443b      	add	r3, r7
 800c8ee:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c8f2:	09db      	lsrs	r3, r3, #7
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	b25b      	sxtb	r3, r3
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	b25b      	sxtb	r3, r3
 800c8fc:	b2d9      	uxtb	r1, r3
 800c8fe:	f107 021c 	add.w	r2, r7, #28
 800c902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c904:	4413      	add	r3, r2
 800c906:	460a      	mov	r2, r1
 800c908:	701a      	strb	r2, [r3, #0]
 800c90a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c90c:	3301      	adds	r3, #1
 800c90e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c912:	2b0e      	cmp	r3, #14
 800c914:	dddf      	ble.n	800c8d6 <AES_CMAC_Final+0x19e>
 800c916:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c91a:	005b      	lsls	r3, r3, #1
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	4413      	add	r3, r2
 800c92c:	2280      	movs	r2, #128	@ 0x80
 800c92e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800c932:	e007      	b.n	800c944 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	4413      	add	r3, r2
 800c93e:	2200      	movs	r2, #0
 800c940:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c94a:	1c5a      	adds	r2, r3, #1
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c958:	2b0f      	cmp	r3, #15
 800c95a:	d9eb      	bls.n	800c934 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800c95c:	2300      	movs	r3, #0
 800c95e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c960:	e016      	b.n	800c990 <AES_CMAC_Final+0x258>
 800c962:	683a      	ldr	r2, [r7, #0]
 800c964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c966:	4413      	add	r3, r2
 800c968:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c96c:	781a      	ldrb	r2, [r3, #0]
 800c96e:	f107 011c 	add.w	r1, r7, #28
 800c972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c974:	440b      	add	r3, r1
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	4053      	eors	r3, r2
 800c97a:	b2d9      	uxtb	r1, r3
 800c97c:	683a      	ldr	r2, [r7, #0]
 800c97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c980:	4413      	add	r3, r2
 800c982:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c986:	460a      	mov	r2, r1
 800c988:	701a      	strb	r2, [r3, #0]
 800c98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98c:	3301      	adds	r3, #1
 800c98e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c992:	2b0f      	cmp	r3, #15
 800c994:	dde5      	ble.n	800c962 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800c996:	2300      	movs	r3, #0
 800c998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c99a:	e015      	b.n	800c9c8 <AES_CMAC_Final+0x290>
 800c99c:	683a      	ldr	r2, [r7, #0]
 800c99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a0:	4413      	add	r3, r2
 800c9a2:	33f1      	adds	r3, #241	@ 0xf1
 800c9a4:	781a      	ldrb	r2, [r3, #0]
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9aa:	440b      	add	r3, r1
 800c9ac:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	4053      	eors	r3, r2
 800c9b4:	b2d9      	uxtb	r1, r3
 800c9b6:	683a      	ldr	r2, [r7, #0]
 800c9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ba:	4413      	add	r3, r2
 800c9bc:	33f1      	adds	r3, #241	@ 0xf1
 800c9be:	460a      	mov	r2, r1
 800c9c0:	701a      	strb	r2, [r3, #0]
 800c9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ca:	2b0f      	cmp	r3, #15
 800c9cc:	dde6      	ble.n	800c99c <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c9d4:	f107 030c 	add.w	r3, r7, #12
 800c9d8:	2210      	movs	r2, #16
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f00c fa6b 	bl	8018eb6 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c9e0:	683a      	ldr	r2, [r7, #0]
 800c9e2:	f107 030c 	add.w	r3, r7, #12
 800c9e6:	6879      	ldr	r1, [r7, #4]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f000 fd1d 	bl	800d428 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c9ee:	f107 031c 	add.w	r3, r7, #28
 800c9f2:	2210      	movs	r2, #16
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f00c fa98 	bl	8018f2c <memset1>
}
 800c9fc:	bf00      	nop
 800c9fe:	3748      	adds	r7, #72	@ 0x48
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	781a      	ldrb	r2, [r3, #0]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	683a      	ldr	r2, [r7, #0]
 800ca1c:	7852      	ldrb	r2, [r2, #1]
 800ca1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	3302      	adds	r3, #2
 800ca24:	683a      	ldr	r2, [r7, #0]
 800ca26:	7892      	ldrb	r2, [r2, #2]
 800ca28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	3303      	adds	r3, #3
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	78d2      	ldrb	r2, [r2, #3]
 800ca32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	3304      	adds	r3, #4
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	7912      	ldrb	r2, [r2, #4]
 800ca3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3305      	adds	r3, #5
 800ca42:	683a      	ldr	r2, [r7, #0]
 800ca44:	7952      	ldrb	r2, [r2, #5]
 800ca46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	3306      	adds	r3, #6
 800ca4c:	683a      	ldr	r2, [r7, #0]
 800ca4e:	7992      	ldrb	r2, [r2, #6]
 800ca50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	3307      	adds	r3, #7
 800ca56:	683a      	ldr	r2, [r7, #0]
 800ca58:	79d2      	ldrb	r2, [r2, #7]
 800ca5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	3308      	adds	r3, #8
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	7a12      	ldrb	r2, [r2, #8]
 800ca64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	3309      	adds	r3, #9
 800ca6a:	683a      	ldr	r2, [r7, #0]
 800ca6c:	7a52      	ldrb	r2, [r2, #9]
 800ca6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	330a      	adds	r3, #10
 800ca74:	683a      	ldr	r2, [r7, #0]
 800ca76:	7a92      	ldrb	r2, [r2, #10]
 800ca78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	330b      	adds	r3, #11
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	7ad2      	ldrb	r2, [r2, #11]
 800ca82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	330c      	adds	r3, #12
 800ca88:	683a      	ldr	r2, [r7, #0]
 800ca8a:	7b12      	ldrb	r2, [r2, #12]
 800ca8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	330d      	adds	r3, #13
 800ca92:	683a      	ldr	r2, [r7, #0]
 800ca94:	7b52      	ldrb	r2, [r2, #13]
 800ca96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	330e      	adds	r3, #14
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	7b92      	ldrb	r2, [r2, #14]
 800caa0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	330f      	adds	r3, #15
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	7bd2      	ldrb	r2, [r2, #15]
 800caaa:	701a      	strb	r2, [r3, #0]
#endif
}
 800caac:	bf00      	nop
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bc80      	pop	{r7}
 800cab4:	4770      	bx	lr

0800cab6 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800cab6:	b480      	push	{r7}
 800cab8:	b085      	sub	sp, #20
 800caba:	af00      	add	r7, sp, #0
 800cabc:	60f8      	str	r0, [r7, #12]
 800cabe:	60b9      	str	r1, [r7, #8]
 800cac0:	4613      	mov	r3, r2
 800cac2:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800cac4:	e007      	b.n	800cad6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	1c53      	adds	r3, r2, #1
 800caca:	60bb      	str	r3, [r7, #8]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	1c59      	adds	r1, r3, #1
 800cad0:	60f9      	str	r1, [r7, #12]
 800cad2:	7812      	ldrb	r2, [r2, #0]
 800cad4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800cad6:	79fb      	ldrb	r3, [r7, #7]
 800cad8:	1e5a      	subs	r2, r3, #1
 800cada:	71fa      	strb	r2, [r7, #7]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d1f2      	bne.n	800cac6 <copy_block_nn+0x10>
}
 800cae0:	bf00      	nop
 800cae2:	bf00      	nop
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bc80      	pop	{r7}
 800caea:	4770      	bx	lr

0800caec <xor_block>:

static void xor_block( void *d, const void *s )
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	781a      	ldrb	r2, [r3, #0]
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	4053      	eors	r3, r2
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	7819      	ldrb	r1, [r3, #0]
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	781a      	ldrb	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	3301      	adds	r3, #1
 800cb16:	404a      	eors	r2, r1
 800cb18:	b2d2      	uxtb	r2, r2
 800cb1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	3302      	adds	r3, #2
 800cb20:	7819      	ldrb	r1, [r3, #0]
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	3302      	adds	r3, #2
 800cb26:	781a      	ldrb	r2, [r3, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3302      	adds	r3, #2
 800cb2c:	404a      	eors	r2, r1
 800cb2e:	b2d2      	uxtb	r2, r2
 800cb30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	3303      	adds	r3, #3
 800cb36:	7819      	ldrb	r1, [r3, #0]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	3303      	adds	r3, #3
 800cb3c:	781a      	ldrb	r2, [r3, #0]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	3303      	adds	r3, #3
 800cb42:	404a      	eors	r2, r1
 800cb44:	b2d2      	uxtb	r2, r2
 800cb46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	3304      	adds	r3, #4
 800cb4c:	7819      	ldrb	r1, [r3, #0]
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	3304      	adds	r3, #4
 800cb52:	781a      	ldrb	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	3304      	adds	r3, #4
 800cb58:	404a      	eors	r2, r1
 800cb5a:	b2d2      	uxtb	r2, r2
 800cb5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3305      	adds	r3, #5
 800cb62:	7819      	ldrb	r1, [r3, #0]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	3305      	adds	r3, #5
 800cb68:	781a      	ldrb	r2, [r3, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	3305      	adds	r3, #5
 800cb6e:	404a      	eors	r2, r1
 800cb70:	b2d2      	uxtb	r2, r2
 800cb72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	3306      	adds	r3, #6
 800cb78:	7819      	ldrb	r1, [r3, #0]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	3306      	adds	r3, #6
 800cb7e:	781a      	ldrb	r2, [r3, #0]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3306      	adds	r3, #6
 800cb84:	404a      	eors	r2, r1
 800cb86:	b2d2      	uxtb	r2, r2
 800cb88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	3307      	adds	r3, #7
 800cb8e:	7819      	ldrb	r1, [r3, #0]
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	3307      	adds	r3, #7
 800cb94:	781a      	ldrb	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	3307      	adds	r3, #7
 800cb9a:	404a      	eors	r2, r1
 800cb9c:	b2d2      	uxtb	r2, r2
 800cb9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3308      	adds	r3, #8
 800cba4:	7819      	ldrb	r1, [r3, #0]
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	3308      	adds	r3, #8
 800cbaa:	781a      	ldrb	r2, [r3, #0]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	3308      	adds	r3, #8
 800cbb0:	404a      	eors	r2, r1
 800cbb2:	b2d2      	uxtb	r2, r2
 800cbb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	3309      	adds	r3, #9
 800cbba:	7819      	ldrb	r1, [r3, #0]
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	3309      	adds	r3, #9
 800cbc0:	781a      	ldrb	r2, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	3309      	adds	r3, #9
 800cbc6:	404a      	eors	r2, r1
 800cbc8:	b2d2      	uxtb	r2, r2
 800cbca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	330a      	adds	r3, #10
 800cbd0:	7819      	ldrb	r1, [r3, #0]
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	330a      	adds	r3, #10
 800cbd6:	781a      	ldrb	r2, [r3, #0]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	330a      	adds	r3, #10
 800cbdc:	404a      	eors	r2, r1
 800cbde:	b2d2      	uxtb	r2, r2
 800cbe0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	330b      	adds	r3, #11
 800cbe6:	7819      	ldrb	r1, [r3, #0]
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	330b      	adds	r3, #11
 800cbec:	781a      	ldrb	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	330b      	adds	r3, #11
 800cbf2:	404a      	eors	r2, r1
 800cbf4:	b2d2      	uxtb	r2, r2
 800cbf6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	330c      	adds	r3, #12
 800cbfc:	7819      	ldrb	r1, [r3, #0]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	330c      	adds	r3, #12
 800cc02:	781a      	ldrb	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	330c      	adds	r3, #12
 800cc08:	404a      	eors	r2, r1
 800cc0a:	b2d2      	uxtb	r2, r2
 800cc0c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	330d      	adds	r3, #13
 800cc12:	7819      	ldrb	r1, [r3, #0]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	330d      	adds	r3, #13
 800cc18:	781a      	ldrb	r2, [r3, #0]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	330d      	adds	r3, #13
 800cc1e:	404a      	eors	r2, r1
 800cc20:	b2d2      	uxtb	r2, r2
 800cc22:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	330e      	adds	r3, #14
 800cc28:	7819      	ldrb	r1, [r3, #0]
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	330e      	adds	r3, #14
 800cc2e:	781a      	ldrb	r2, [r3, #0]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	330e      	adds	r3, #14
 800cc34:	404a      	eors	r2, r1
 800cc36:	b2d2      	uxtb	r2, r2
 800cc38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	330f      	adds	r3, #15
 800cc3e:	7819      	ldrb	r1, [r3, #0]
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	330f      	adds	r3, #15
 800cc44:	781a      	ldrb	r2, [r3, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	330f      	adds	r3, #15
 800cc4a:	404a      	eors	r2, r1
 800cc4c:	b2d2      	uxtb	r2, r2
 800cc4e:	701a      	strb	r2, [r3, #0]
#endif
}
 800cc50:	bf00      	nop
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bc80      	pop	{r7}
 800cc58:	4770      	bx	lr

0800cc5a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b085      	sub	sp, #20
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	60b9      	str	r1, [r7, #8]
 800cc64:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	781a      	ldrb	r2, [r3, #0]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	4053      	eors	r3, r2
 800cc70:	b2da      	uxtb	r2, r3
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	7819      	ldrb	r1, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	781a      	ldrb	r2, [r3, #0]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	3301      	adds	r3, #1
 800cc86:	404a      	eors	r2, r1
 800cc88:	b2d2      	uxtb	r2, r2
 800cc8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	3302      	adds	r3, #2
 800cc90:	7819      	ldrb	r1, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	3302      	adds	r3, #2
 800cc96:	781a      	ldrb	r2, [r3, #0]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	3302      	adds	r3, #2
 800cc9c:	404a      	eors	r2, r1
 800cc9e:	b2d2      	uxtb	r2, r2
 800cca0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	3303      	adds	r3, #3
 800cca6:	7819      	ldrb	r1, [r3, #0]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	3303      	adds	r3, #3
 800ccac:	781a      	ldrb	r2, [r3, #0]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	3303      	adds	r3, #3
 800ccb2:	404a      	eors	r2, r1
 800ccb4:	b2d2      	uxtb	r2, r2
 800ccb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	3304      	adds	r3, #4
 800ccbc:	7819      	ldrb	r1, [r3, #0]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	781a      	ldrb	r2, [r3, #0]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	404a      	eors	r2, r1
 800ccca:	b2d2      	uxtb	r2, r2
 800cccc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	3305      	adds	r3, #5
 800ccd2:	7819      	ldrb	r1, [r3, #0]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	3305      	adds	r3, #5
 800ccd8:	781a      	ldrb	r2, [r3, #0]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	3305      	adds	r3, #5
 800ccde:	404a      	eors	r2, r1
 800cce0:	b2d2      	uxtb	r2, r2
 800cce2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	3306      	adds	r3, #6
 800cce8:	7819      	ldrb	r1, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	3306      	adds	r3, #6
 800ccee:	781a      	ldrb	r2, [r3, #0]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	3306      	adds	r3, #6
 800ccf4:	404a      	eors	r2, r1
 800ccf6:	b2d2      	uxtb	r2, r2
 800ccf8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	3307      	adds	r3, #7
 800ccfe:	7819      	ldrb	r1, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3307      	adds	r3, #7
 800cd04:	781a      	ldrb	r2, [r3, #0]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	3307      	adds	r3, #7
 800cd0a:	404a      	eors	r2, r1
 800cd0c:	b2d2      	uxtb	r2, r2
 800cd0e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	3308      	adds	r3, #8
 800cd14:	7819      	ldrb	r1, [r3, #0]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	3308      	adds	r3, #8
 800cd1a:	781a      	ldrb	r2, [r3, #0]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	3308      	adds	r3, #8
 800cd20:	404a      	eors	r2, r1
 800cd22:	b2d2      	uxtb	r2, r2
 800cd24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	3309      	adds	r3, #9
 800cd2a:	7819      	ldrb	r1, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	3309      	adds	r3, #9
 800cd30:	781a      	ldrb	r2, [r3, #0]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	3309      	adds	r3, #9
 800cd36:	404a      	eors	r2, r1
 800cd38:	b2d2      	uxtb	r2, r2
 800cd3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	330a      	adds	r3, #10
 800cd40:	7819      	ldrb	r1, [r3, #0]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	330a      	adds	r3, #10
 800cd46:	781a      	ldrb	r2, [r3, #0]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	330a      	adds	r3, #10
 800cd4c:	404a      	eors	r2, r1
 800cd4e:	b2d2      	uxtb	r2, r2
 800cd50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	330b      	adds	r3, #11
 800cd56:	7819      	ldrb	r1, [r3, #0]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	330b      	adds	r3, #11
 800cd5c:	781a      	ldrb	r2, [r3, #0]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	330b      	adds	r3, #11
 800cd62:	404a      	eors	r2, r1
 800cd64:	b2d2      	uxtb	r2, r2
 800cd66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	330c      	adds	r3, #12
 800cd6c:	7819      	ldrb	r1, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	330c      	adds	r3, #12
 800cd72:	781a      	ldrb	r2, [r3, #0]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	330c      	adds	r3, #12
 800cd78:	404a      	eors	r2, r1
 800cd7a:	b2d2      	uxtb	r2, r2
 800cd7c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	330d      	adds	r3, #13
 800cd82:	7819      	ldrb	r1, [r3, #0]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	330d      	adds	r3, #13
 800cd88:	781a      	ldrb	r2, [r3, #0]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	330d      	adds	r3, #13
 800cd8e:	404a      	eors	r2, r1
 800cd90:	b2d2      	uxtb	r2, r2
 800cd92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	330e      	adds	r3, #14
 800cd98:	7819      	ldrb	r1, [r3, #0]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	330e      	adds	r3, #14
 800cd9e:	781a      	ldrb	r2, [r3, #0]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	330e      	adds	r3, #14
 800cda4:	404a      	eors	r2, r1
 800cda6:	b2d2      	uxtb	r2, r2
 800cda8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	330f      	adds	r3, #15
 800cdae:	7819      	ldrb	r1, [r3, #0]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	330f      	adds	r3, #15
 800cdb4:	781a      	ldrb	r2, [r3, #0]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	330f      	adds	r3, #15
 800cdba:	404a      	eors	r2, r1
 800cdbc:	b2d2      	uxtb	r2, r2
 800cdbe:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800cdc0:	bf00      	nop
 800cdc2:	3714      	adds	r7, #20
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bc80      	pop	{r7}
 800cdc8:	4770      	bx	lr

0800cdca <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b082      	sub	sp, #8
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
 800cdd2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800cdd4:	6839      	ldr	r1, [r7, #0]
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7ff fe88 	bl	800caec <xor_block>
}
 800cddc:	bf00      	nop
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800cde4:	b480      	push	{r7}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	4b48      	ldr	r3, [pc, #288]	@ (800cf14 <shift_sub_rows+0x130>)
 800cdf4:	5c9a      	ldrb	r2, [r3, r2]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	701a      	strb	r2, [r3, #0]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	3304      	adds	r3, #4
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	4619      	mov	r1, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3304      	adds	r3, #4
 800ce06:	4a43      	ldr	r2, [pc, #268]	@ (800cf14 <shift_sub_rows+0x130>)
 800ce08:	5c52      	ldrb	r2, [r2, r1]
 800ce0a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	3308      	adds	r3, #8
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	4619      	mov	r1, r3
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	3308      	adds	r3, #8
 800ce18:	4a3e      	ldr	r2, [pc, #248]	@ (800cf14 <shift_sub_rows+0x130>)
 800ce1a:	5c52      	ldrb	r2, [r2, r1]
 800ce1c:	701a      	strb	r2, [r3, #0]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	330c      	adds	r3, #12
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	4619      	mov	r1, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	330c      	adds	r3, #12
 800ce2a:	4a3a      	ldr	r2, [pc, #232]	@ (800cf14 <shift_sub_rows+0x130>)
 800ce2c:	5c52      	ldrb	r2, [r2, r1]
 800ce2e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	785b      	ldrb	r3, [r3, #1]
 800ce34:	73fb      	strb	r3, [r7, #15]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	3305      	adds	r3, #5
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3301      	adds	r3, #1
 800ce42:	4a34      	ldr	r2, [pc, #208]	@ (800cf14 <shift_sub_rows+0x130>)
 800ce44:	5c52      	ldrb	r2, [r2, r1]
 800ce46:	701a      	strb	r2, [r3, #0]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3309      	adds	r3, #9
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	4619      	mov	r1, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	3305      	adds	r3, #5
 800ce54:	4a2f      	ldr	r2, [pc, #188]	@ (800cf14 <shift_sub_rows+0x130>)
 800ce56:	5c52      	ldrb	r2, [r2, r1]
 800ce58:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	330d      	adds	r3, #13
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	4619      	mov	r1, r3
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	3309      	adds	r3, #9
 800ce66:	4a2b      	ldr	r2, [pc, #172]	@ (800cf14 <shift_sub_rows+0x130>)
 800ce68:	5c52      	ldrb	r2, [r2, r1]
 800ce6a:	701a      	strb	r2, [r3, #0]
 800ce6c:	7bfa      	ldrb	r2, [r7, #15]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	330d      	adds	r3, #13
 800ce72:	4928      	ldr	r1, [pc, #160]	@ (800cf14 <shift_sub_rows+0x130>)
 800ce74:	5c8a      	ldrb	r2, [r1, r2]
 800ce76:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	789b      	ldrb	r3, [r3, #2]
 800ce7c:	73fb      	strb	r3, [r7, #15]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	330a      	adds	r3, #10
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	4619      	mov	r1, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	3302      	adds	r3, #2
 800ce8a:	4a22      	ldr	r2, [pc, #136]	@ (800cf14 <shift_sub_rows+0x130>)
 800ce8c:	5c52      	ldrb	r2, [r2, r1]
 800ce8e:	701a      	strb	r2, [r3, #0]
 800ce90:	7bfa      	ldrb	r2, [r7, #15]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	330a      	adds	r3, #10
 800ce96:	491f      	ldr	r1, [pc, #124]	@ (800cf14 <shift_sub_rows+0x130>)
 800ce98:	5c8a      	ldrb	r2, [r1, r2]
 800ce9a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	799b      	ldrb	r3, [r3, #6]
 800cea0:	73fb      	strb	r3, [r7, #15]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	330e      	adds	r3, #14
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	3306      	adds	r3, #6
 800ceae:	4a19      	ldr	r2, [pc, #100]	@ (800cf14 <shift_sub_rows+0x130>)
 800ceb0:	5c52      	ldrb	r2, [r2, r1]
 800ceb2:	701a      	strb	r2, [r3, #0]
 800ceb4:	7bfa      	ldrb	r2, [r7, #15]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	330e      	adds	r3, #14
 800ceba:	4916      	ldr	r1, [pc, #88]	@ (800cf14 <shift_sub_rows+0x130>)
 800cebc:	5c8a      	ldrb	r2, [r1, r2]
 800cebe:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	7bdb      	ldrb	r3, [r3, #15]
 800cec4:	73fb      	strb	r3, [r7, #15]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	330b      	adds	r3, #11
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	4619      	mov	r1, r3
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	330f      	adds	r3, #15
 800ced2:	4a10      	ldr	r2, [pc, #64]	@ (800cf14 <shift_sub_rows+0x130>)
 800ced4:	5c52      	ldrb	r2, [r2, r1]
 800ced6:	701a      	strb	r2, [r3, #0]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	3307      	adds	r3, #7
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	4619      	mov	r1, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	330b      	adds	r3, #11
 800cee4:	4a0b      	ldr	r2, [pc, #44]	@ (800cf14 <shift_sub_rows+0x130>)
 800cee6:	5c52      	ldrb	r2, [r2, r1]
 800cee8:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	3303      	adds	r3, #3
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	4619      	mov	r1, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	3307      	adds	r3, #7
 800cef6:	4a07      	ldr	r2, [pc, #28]	@ (800cf14 <shift_sub_rows+0x130>)
 800cef8:	5c52      	ldrb	r2, [r2, r1]
 800cefa:	701a      	strb	r2, [r3, #0]
 800cefc:	7bfa      	ldrb	r2, [r7, #15]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	3303      	adds	r3, #3
 800cf02:	4904      	ldr	r1, [pc, #16]	@ (800cf14 <shift_sub_rows+0x130>)
 800cf04:	5c8a      	ldrb	r2, [r1, r2]
 800cf06:	701a      	strb	r2, [r3, #0]
}
 800cf08:	bf00      	nop
 800cf0a:	3714      	adds	r7, #20
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bc80      	pop	{r7}
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	08021254 	.word	0x08021254

0800cf18 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800cf20:	f107 0308 	add.w	r3, r7, #8
 800cf24:	6879      	ldr	r1, [r7, #4]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7ff fd6c 	bl	800ca04 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800cf2c:	7a3b      	ldrb	r3, [r7, #8]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	4b9a      	ldr	r3, [pc, #616]	@ (800d19c <mix_sub_columns+0x284>)
 800cf32:	5c9a      	ldrb	r2, [r3, r2]
 800cf34:	7b7b      	ldrb	r3, [r7, #13]
 800cf36:	4619      	mov	r1, r3
 800cf38:	4b99      	ldr	r3, [pc, #612]	@ (800d1a0 <mix_sub_columns+0x288>)
 800cf3a:	5c5b      	ldrb	r3, [r3, r1]
 800cf3c:	4053      	eors	r3, r2
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	7cbb      	ldrb	r3, [r7, #18]
 800cf42:	4619      	mov	r1, r3
 800cf44:	4b97      	ldr	r3, [pc, #604]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800cf46:	5c5b      	ldrb	r3, [r3, r1]
 800cf48:	4053      	eors	r3, r2
 800cf4a:	b2da      	uxtb	r2, r3
 800cf4c:	7dfb      	ldrb	r3, [r7, #23]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	4b94      	ldr	r3, [pc, #592]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800cf52:	5c5b      	ldrb	r3, [r3, r1]
 800cf54:	4053      	eors	r3, r2
 800cf56:	b2da      	uxtb	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800cf5c:	7a3b      	ldrb	r3, [r7, #8]
 800cf5e:	461a      	mov	r2, r3
 800cf60:	4b90      	ldr	r3, [pc, #576]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800cf62:	5c9a      	ldrb	r2, [r3, r2]
 800cf64:	7b7b      	ldrb	r3, [r7, #13]
 800cf66:	4619      	mov	r1, r3
 800cf68:	4b8c      	ldr	r3, [pc, #560]	@ (800d19c <mix_sub_columns+0x284>)
 800cf6a:	5c5b      	ldrb	r3, [r3, r1]
 800cf6c:	4053      	eors	r3, r2
 800cf6e:	b2da      	uxtb	r2, r3
 800cf70:	7cbb      	ldrb	r3, [r7, #18]
 800cf72:	4619      	mov	r1, r3
 800cf74:	4b8a      	ldr	r3, [pc, #552]	@ (800d1a0 <mix_sub_columns+0x288>)
 800cf76:	5c5b      	ldrb	r3, [r3, r1]
 800cf78:	4053      	eors	r3, r2
 800cf7a:	b2d9      	uxtb	r1, r3
 800cf7c:	7dfb      	ldrb	r3, [r7, #23]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	4b88      	ldr	r3, [pc, #544]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800cf82:	5c9a      	ldrb	r2, [r3, r2]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	3301      	adds	r3, #1
 800cf88:	404a      	eors	r2, r1
 800cf8a:	b2d2      	uxtb	r2, r2
 800cf8c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800cf8e:	7a3b      	ldrb	r3, [r7, #8]
 800cf90:	461a      	mov	r2, r3
 800cf92:	4b84      	ldr	r3, [pc, #528]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800cf94:	5c9a      	ldrb	r2, [r3, r2]
 800cf96:	7b7b      	ldrb	r3, [r7, #13]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	4b82      	ldr	r3, [pc, #520]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800cf9c:	5c5b      	ldrb	r3, [r3, r1]
 800cf9e:	4053      	eors	r3, r2
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	7cbb      	ldrb	r3, [r7, #18]
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	4b7d      	ldr	r3, [pc, #500]	@ (800d19c <mix_sub_columns+0x284>)
 800cfa8:	5c5b      	ldrb	r3, [r3, r1]
 800cfaa:	4053      	eors	r3, r2
 800cfac:	b2d9      	uxtb	r1, r3
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	4b7b      	ldr	r3, [pc, #492]	@ (800d1a0 <mix_sub_columns+0x288>)
 800cfb4:	5c9a      	ldrb	r2, [r3, r2]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	3302      	adds	r3, #2
 800cfba:	404a      	eors	r2, r1
 800cfbc:	b2d2      	uxtb	r2, r2
 800cfbe:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800cfc0:	7a3b      	ldrb	r3, [r7, #8]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	4b76      	ldr	r3, [pc, #472]	@ (800d1a0 <mix_sub_columns+0x288>)
 800cfc6:	5c9a      	ldrb	r2, [r3, r2]
 800cfc8:	7b7b      	ldrb	r3, [r7, #13]
 800cfca:	4619      	mov	r1, r3
 800cfcc:	4b75      	ldr	r3, [pc, #468]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800cfce:	5c5b      	ldrb	r3, [r3, r1]
 800cfd0:	4053      	eors	r3, r2
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	7cbb      	ldrb	r3, [r7, #18]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	4b72      	ldr	r3, [pc, #456]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800cfda:	5c5b      	ldrb	r3, [r3, r1]
 800cfdc:	4053      	eors	r3, r2
 800cfde:	b2d9      	uxtb	r1, r3
 800cfe0:	7dfb      	ldrb	r3, [r7, #23]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	4b6d      	ldr	r3, [pc, #436]	@ (800d19c <mix_sub_columns+0x284>)
 800cfe6:	5c9a      	ldrb	r2, [r3, r2]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	3303      	adds	r3, #3
 800cfec:	404a      	eors	r2, r1
 800cfee:	b2d2      	uxtb	r2, r2
 800cff0:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800cff2:	7b3b      	ldrb	r3, [r7, #12]
 800cff4:	461a      	mov	r2, r3
 800cff6:	4b69      	ldr	r3, [pc, #420]	@ (800d19c <mix_sub_columns+0x284>)
 800cff8:	5c9a      	ldrb	r2, [r3, r2]
 800cffa:	7c7b      	ldrb	r3, [r7, #17]
 800cffc:	4619      	mov	r1, r3
 800cffe:	4b68      	ldr	r3, [pc, #416]	@ (800d1a0 <mix_sub_columns+0x288>)
 800d000:	5c5b      	ldrb	r3, [r3, r1]
 800d002:	4053      	eors	r3, r2
 800d004:	b2da      	uxtb	r2, r3
 800d006:	7dbb      	ldrb	r3, [r7, #22]
 800d008:	4619      	mov	r1, r3
 800d00a:	4b66      	ldr	r3, [pc, #408]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d00c:	5c5b      	ldrb	r3, [r3, r1]
 800d00e:	4053      	eors	r3, r2
 800d010:	b2d9      	uxtb	r1, r3
 800d012:	7afb      	ldrb	r3, [r7, #11]
 800d014:	461a      	mov	r2, r3
 800d016:	4b63      	ldr	r3, [pc, #396]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d018:	5c9a      	ldrb	r2, [r3, r2]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	3304      	adds	r3, #4
 800d01e:	404a      	eors	r2, r1
 800d020:	b2d2      	uxtb	r2, r2
 800d022:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800d024:	7b3b      	ldrb	r3, [r7, #12]
 800d026:	461a      	mov	r2, r3
 800d028:	4b5e      	ldr	r3, [pc, #376]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d02a:	5c9a      	ldrb	r2, [r3, r2]
 800d02c:	7c7b      	ldrb	r3, [r7, #17]
 800d02e:	4619      	mov	r1, r3
 800d030:	4b5a      	ldr	r3, [pc, #360]	@ (800d19c <mix_sub_columns+0x284>)
 800d032:	5c5b      	ldrb	r3, [r3, r1]
 800d034:	4053      	eors	r3, r2
 800d036:	b2da      	uxtb	r2, r3
 800d038:	7dbb      	ldrb	r3, [r7, #22]
 800d03a:	4619      	mov	r1, r3
 800d03c:	4b58      	ldr	r3, [pc, #352]	@ (800d1a0 <mix_sub_columns+0x288>)
 800d03e:	5c5b      	ldrb	r3, [r3, r1]
 800d040:	4053      	eors	r3, r2
 800d042:	b2d9      	uxtb	r1, r3
 800d044:	7afb      	ldrb	r3, [r7, #11]
 800d046:	461a      	mov	r2, r3
 800d048:	4b56      	ldr	r3, [pc, #344]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d04a:	5c9a      	ldrb	r2, [r3, r2]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	3305      	adds	r3, #5
 800d050:	404a      	eors	r2, r1
 800d052:	b2d2      	uxtb	r2, r2
 800d054:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800d056:	7b3b      	ldrb	r3, [r7, #12]
 800d058:	461a      	mov	r2, r3
 800d05a:	4b52      	ldr	r3, [pc, #328]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d05c:	5c9a      	ldrb	r2, [r3, r2]
 800d05e:	7c7b      	ldrb	r3, [r7, #17]
 800d060:	4619      	mov	r1, r3
 800d062:	4b50      	ldr	r3, [pc, #320]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d064:	5c5b      	ldrb	r3, [r3, r1]
 800d066:	4053      	eors	r3, r2
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	7dbb      	ldrb	r3, [r7, #22]
 800d06c:	4619      	mov	r1, r3
 800d06e:	4b4b      	ldr	r3, [pc, #300]	@ (800d19c <mix_sub_columns+0x284>)
 800d070:	5c5b      	ldrb	r3, [r3, r1]
 800d072:	4053      	eors	r3, r2
 800d074:	b2d9      	uxtb	r1, r3
 800d076:	7afb      	ldrb	r3, [r7, #11]
 800d078:	461a      	mov	r2, r3
 800d07a:	4b49      	ldr	r3, [pc, #292]	@ (800d1a0 <mix_sub_columns+0x288>)
 800d07c:	5c9a      	ldrb	r2, [r3, r2]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	3306      	adds	r3, #6
 800d082:	404a      	eors	r2, r1
 800d084:	b2d2      	uxtb	r2, r2
 800d086:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800d088:	7b3b      	ldrb	r3, [r7, #12]
 800d08a:	461a      	mov	r2, r3
 800d08c:	4b44      	ldr	r3, [pc, #272]	@ (800d1a0 <mix_sub_columns+0x288>)
 800d08e:	5c9a      	ldrb	r2, [r3, r2]
 800d090:	7c7b      	ldrb	r3, [r7, #17]
 800d092:	4619      	mov	r1, r3
 800d094:	4b43      	ldr	r3, [pc, #268]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d096:	5c5b      	ldrb	r3, [r3, r1]
 800d098:	4053      	eors	r3, r2
 800d09a:	b2da      	uxtb	r2, r3
 800d09c:	7dbb      	ldrb	r3, [r7, #22]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	4b40      	ldr	r3, [pc, #256]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d0a2:	5c5b      	ldrb	r3, [r3, r1]
 800d0a4:	4053      	eors	r3, r2
 800d0a6:	b2d9      	uxtb	r1, r3
 800d0a8:	7afb      	ldrb	r3, [r7, #11]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	4b3b      	ldr	r3, [pc, #236]	@ (800d19c <mix_sub_columns+0x284>)
 800d0ae:	5c9a      	ldrb	r2, [r3, r2]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	3307      	adds	r3, #7
 800d0b4:	404a      	eors	r2, r1
 800d0b6:	b2d2      	uxtb	r2, r2
 800d0b8:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800d0ba:	7c3b      	ldrb	r3, [r7, #16]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	4b37      	ldr	r3, [pc, #220]	@ (800d19c <mix_sub_columns+0x284>)
 800d0c0:	5c9a      	ldrb	r2, [r3, r2]
 800d0c2:	7d7b      	ldrb	r3, [r7, #21]
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	4b36      	ldr	r3, [pc, #216]	@ (800d1a0 <mix_sub_columns+0x288>)
 800d0c8:	5c5b      	ldrb	r3, [r3, r1]
 800d0ca:	4053      	eors	r3, r2
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	7abb      	ldrb	r3, [r7, #10]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	4b34      	ldr	r3, [pc, #208]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d0d4:	5c5b      	ldrb	r3, [r3, r1]
 800d0d6:	4053      	eors	r3, r2
 800d0d8:	b2d9      	uxtb	r1, r3
 800d0da:	7bfb      	ldrb	r3, [r7, #15]
 800d0dc:	461a      	mov	r2, r3
 800d0de:	4b31      	ldr	r3, [pc, #196]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d0e0:	5c9a      	ldrb	r2, [r3, r2]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	3308      	adds	r3, #8
 800d0e6:	404a      	eors	r2, r1
 800d0e8:	b2d2      	uxtb	r2, r2
 800d0ea:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800d0ec:	7c3b      	ldrb	r3, [r7, #16]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	4b2c      	ldr	r3, [pc, #176]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d0f2:	5c9a      	ldrb	r2, [r3, r2]
 800d0f4:	7d7b      	ldrb	r3, [r7, #21]
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	4b28      	ldr	r3, [pc, #160]	@ (800d19c <mix_sub_columns+0x284>)
 800d0fa:	5c5b      	ldrb	r3, [r3, r1]
 800d0fc:	4053      	eors	r3, r2
 800d0fe:	b2da      	uxtb	r2, r3
 800d100:	7abb      	ldrb	r3, [r7, #10]
 800d102:	4619      	mov	r1, r3
 800d104:	4b26      	ldr	r3, [pc, #152]	@ (800d1a0 <mix_sub_columns+0x288>)
 800d106:	5c5b      	ldrb	r3, [r3, r1]
 800d108:	4053      	eors	r3, r2
 800d10a:	b2d9      	uxtb	r1, r3
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
 800d10e:	461a      	mov	r2, r3
 800d110:	4b24      	ldr	r3, [pc, #144]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d112:	5c9a      	ldrb	r2, [r3, r2]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	3309      	adds	r3, #9
 800d118:	404a      	eors	r2, r1
 800d11a:	b2d2      	uxtb	r2, r2
 800d11c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800d11e:	7c3b      	ldrb	r3, [r7, #16]
 800d120:	461a      	mov	r2, r3
 800d122:	4b20      	ldr	r3, [pc, #128]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d124:	5c9a      	ldrb	r2, [r3, r2]
 800d126:	7d7b      	ldrb	r3, [r7, #21]
 800d128:	4619      	mov	r1, r3
 800d12a:	4b1e      	ldr	r3, [pc, #120]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d12c:	5c5b      	ldrb	r3, [r3, r1]
 800d12e:	4053      	eors	r3, r2
 800d130:	b2da      	uxtb	r2, r3
 800d132:	7abb      	ldrb	r3, [r7, #10]
 800d134:	4619      	mov	r1, r3
 800d136:	4b19      	ldr	r3, [pc, #100]	@ (800d19c <mix_sub_columns+0x284>)
 800d138:	5c5b      	ldrb	r3, [r3, r1]
 800d13a:	4053      	eors	r3, r2
 800d13c:	b2d9      	uxtb	r1, r3
 800d13e:	7bfb      	ldrb	r3, [r7, #15]
 800d140:	461a      	mov	r2, r3
 800d142:	4b17      	ldr	r3, [pc, #92]	@ (800d1a0 <mix_sub_columns+0x288>)
 800d144:	5c9a      	ldrb	r2, [r3, r2]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	330a      	adds	r3, #10
 800d14a:	404a      	eors	r2, r1
 800d14c:	b2d2      	uxtb	r2, r2
 800d14e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800d150:	7c3b      	ldrb	r3, [r7, #16]
 800d152:	461a      	mov	r2, r3
 800d154:	4b12      	ldr	r3, [pc, #72]	@ (800d1a0 <mix_sub_columns+0x288>)
 800d156:	5c9a      	ldrb	r2, [r3, r2]
 800d158:	7d7b      	ldrb	r3, [r7, #21]
 800d15a:	4619      	mov	r1, r3
 800d15c:	4b11      	ldr	r3, [pc, #68]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d15e:	5c5b      	ldrb	r3, [r3, r1]
 800d160:	4053      	eors	r3, r2
 800d162:	b2da      	uxtb	r2, r3
 800d164:	7abb      	ldrb	r3, [r7, #10]
 800d166:	4619      	mov	r1, r3
 800d168:	4b0e      	ldr	r3, [pc, #56]	@ (800d1a4 <mix_sub_columns+0x28c>)
 800d16a:	5c5b      	ldrb	r3, [r3, r1]
 800d16c:	4053      	eors	r3, r2
 800d16e:	b2d9      	uxtb	r1, r3
 800d170:	7bfb      	ldrb	r3, [r7, #15]
 800d172:	461a      	mov	r2, r3
 800d174:	4b09      	ldr	r3, [pc, #36]	@ (800d19c <mix_sub_columns+0x284>)
 800d176:	5c9a      	ldrb	r2, [r3, r2]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	330b      	adds	r3, #11
 800d17c:	404a      	eors	r2, r1
 800d17e:	b2d2      	uxtb	r2, r2
 800d180:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800d182:	7d3b      	ldrb	r3, [r7, #20]
 800d184:	461a      	mov	r2, r3
 800d186:	4b05      	ldr	r3, [pc, #20]	@ (800d19c <mix_sub_columns+0x284>)
 800d188:	5c9a      	ldrb	r2, [r3, r2]
 800d18a:	7a7b      	ldrb	r3, [r7, #9]
 800d18c:	4619      	mov	r1, r3
 800d18e:	4b04      	ldr	r3, [pc, #16]	@ (800d1a0 <mix_sub_columns+0x288>)
 800d190:	5c5b      	ldrb	r3, [r3, r1]
 800d192:	4053      	eors	r3, r2
 800d194:	b2da      	uxtb	r2, r3
 800d196:	7bbb      	ldrb	r3, [r7, #14]
 800d198:	4619      	mov	r1, r3
 800d19a:	e005      	b.n	800d1a8 <mix_sub_columns+0x290>
 800d19c:	08021354 	.word	0x08021354
 800d1a0:	08021454 	.word	0x08021454
 800d1a4:	08021254 	.word	0x08021254
 800d1a8:	4b2d      	ldr	r3, [pc, #180]	@ (800d260 <mix_sub_columns+0x348>)
 800d1aa:	5c5b      	ldrb	r3, [r3, r1]
 800d1ac:	4053      	eors	r3, r2
 800d1ae:	b2d9      	uxtb	r1, r3
 800d1b0:	7cfb      	ldrb	r3, [r7, #19]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	4b2a      	ldr	r3, [pc, #168]	@ (800d260 <mix_sub_columns+0x348>)
 800d1b6:	5c9a      	ldrb	r2, [r3, r2]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	330c      	adds	r3, #12
 800d1bc:	404a      	eors	r2, r1
 800d1be:	b2d2      	uxtb	r2, r2
 800d1c0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800d1c2:	7d3b      	ldrb	r3, [r7, #20]
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	4b26      	ldr	r3, [pc, #152]	@ (800d260 <mix_sub_columns+0x348>)
 800d1c8:	5c9a      	ldrb	r2, [r3, r2]
 800d1ca:	7a7b      	ldrb	r3, [r7, #9]
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	4b25      	ldr	r3, [pc, #148]	@ (800d264 <mix_sub_columns+0x34c>)
 800d1d0:	5c5b      	ldrb	r3, [r3, r1]
 800d1d2:	4053      	eors	r3, r2
 800d1d4:	b2da      	uxtb	r2, r3
 800d1d6:	7bbb      	ldrb	r3, [r7, #14]
 800d1d8:	4619      	mov	r1, r3
 800d1da:	4b23      	ldr	r3, [pc, #140]	@ (800d268 <mix_sub_columns+0x350>)
 800d1dc:	5c5b      	ldrb	r3, [r3, r1]
 800d1de:	4053      	eors	r3, r2
 800d1e0:	b2d9      	uxtb	r1, r3
 800d1e2:	7cfb      	ldrb	r3, [r7, #19]
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	4b1e      	ldr	r3, [pc, #120]	@ (800d260 <mix_sub_columns+0x348>)
 800d1e8:	5c9a      	ldrb	r2, [r3, r2]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	330d      	adds	r3, #13
 800d1ee:	404a      	eors	r2, r1
 800d1f0:	b2d2      	uxtb	r2, r2
 800d1f2:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800d1f4:	7d3b      	ldrb	r3, [r7, #20]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	4b19      	ldr	r3, [pc, #100]	@ (800d260 <mix_sub_columns+0x348>)
 800d1fa:	5c9a      	ldrb	r2, [r3, r2]
 800d1fc:	7a7b      	ldrb	r3, [r7, #9]
 800d1fe:	4619      	mov	r1, r3
 800d200:	4b17      	ldr	r3, [pc, #92]	@ (800d260 <mix_sub_columns+0x348>)
 800d202:	5c5b      	ldrb	r3, [r3, r1]
 800d204:	4053      	eors	r3, r2
 800d206:	b2da      	uxtb	r2, r3
 800d208:	7bbb      	ldrb	r3, [r7, #14]
 800d20a:	4619      	mov	r1, r3
 800d20c:	4b15      	ldr	r3, [pc, #84]	@ (800d264 <mix_sub_columns+0x34c>)
 800d20e:	5c5b      	ldrb	r3, [r3, r1]
 800d210:	4053      	eors	r3, r2
 800d212:	b2d9      	uxtb	r1, r3
 800d214:	7cfb      	ldrb	r3, [r7, #19]
 800d216:	461a      	mov	r2, r3
 800d218:	4b13      	ldr	r3, [pc, #76]	@ (800d268 <mix_sub_columns+0x350>)
 800d21a:	5c9a      	ldrb	r2, [r3, r2]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	330e      	adds	r3, #14
 800d220:	404a      	eors	r2, r1
 800d222:	b2d2      	uxtb	r2, r2
 800d224:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d226:	7d3b      	ldrb	r3, [r7, #20]
 800d228:	461a      	mov	r2, r3
 800d22a:	4b0f      	ldr	r3, [pc, #60]	@ (800d268 <mix_sub_columns+0x350>)
 800d22c:	5c9a      	ldrb	r2, [r3, r2]
 800d22e:	7a7b      	ldrb	r3, [r7, #9]
 800d230:	4619      	mov	r1, r3
 800d232:	4b0b      	ldr	r3, [pc, #44]	@ (800d260 <mix_sub_columns+0x348>)
 800d234:	5c5b      	ldrb	r3, [r3, r1]
 800d236:	4053      	eors	r3, r2
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	7bbb      	ldrb	r3, [r7, #14]
 800d23c:	4619      	mov	r1, r3
 800d23e:	4b08      	ldr	r3, [pc, #32]	@ (800d260 <mix_sub_columns+0x348>)
 800d240:	5c5b      	ldrb	r3, [r3, r1]
 800d242:	4053      	eors	r3, r2
 800d244:	b2d9      	uxtb	r1, r3
 800d246:	7cfb      	ldrb	r3, [r7, #19]
 800d248:	461a      	mov	r2, r3
 800d24a:	4b06      	ldr	r3, [pc, #24]	@ (800d264 <mix_sub_columns+0x34c>)
 800d24c:	5c9a      	ldrb	r2, [r3, r2]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	330f      	adds	r3, #15
 800d252:	404a      	eors	r2, r1
 800d254:	b2d2      	uxtb	r2, r2
 800d256:	701a      	strb	r2, [r3, #0]
  }
 800d258:	bf00      	nop
 800d25a:	3718      	adds	r7, #24
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	08021254 	.word	0x08021254
 800d264:	08021354 	.word	0x08021354
 800d268:	08021454 	.word	0x08021454

0800d26c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b086      	sub	sp, #24
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	460b      	mov	r3, r1
 800d276:	607a      	str	r2, [r7, #4]
 800d278:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d27a:	7afb      	ldrb	r3, [r7, #11]
 800d27c:	3b10      	subs	r3, #16
 800d27e:	2b10      	cmp	r3, #16
 800d280:	bf8c      	ite	hi
 800d282:	2201      	movhi	r2, #1
 800d284:	2200      	movls	r2, #0
 800d286:	b2d2      	uxtb	r2, r2
 800d288:	2a00      	cmp	r2, #0
 800d28a:	d10b      	bne.n	800d2a4 <lorawan_aes_set_key+0x38>
 800d28c:	4a64      	ldr	r2, [pc, #400]	@ (800d420 <lorawan_aes_set_key+0x1b4>)
 800d28e:	fa22 f303 	lsr.w	r3, r2, r3
 800d292:	f003 0301 	and.w	r3, r3, #1
 800d296:	2b00      	cmp	r3, #0
 800d298:	bf14      	ite	ne
 800d29a:	2301      	movne	r3, #1
 800d29c:	2300      	moveq	r3, #0
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d105      	bne.n	800d2b0 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800d2ac:	23ff      	movs	r3, #255	@ 0xff
 800d2ae:	e0b3      	b.n	800d418 <lorawan_aes_set_key+0x1ac>
        break;
 800d2b0:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	7afa      	ldrb	r2, [r7, #11]
 800d2b6:	68f9      	ldr	r1, [r7, #12]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7ff fbfc 	bl	800cab6 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d2be:	7afb      	ldrb	r3, [r7, #11]
 800d2c0:	331c      	adds	r3, #28
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800d2c8:	7c7b      	ldrb	r3, [r7, #17]
 800d2ca:	091b      	lsrs	r3, r3, #4
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	b2da      	uxtb	r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d2d8:	7afb      	ldrb	r3, [r7, #11]
 800d2da:	75fb      	strb	r3, [r7, #23]
 800d2dc:	2301      	movs	r3, #1
 800d2de:	75bb      	strb	r3, [r7, #22]
 800d2e0:	e094      	b.n	800d40c <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d2e2:	7dfb      	ldrb	r3, [r7, #23]
 800d2e4:	3b04      	subs	r3, #4
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	5cd3      	ldrb	r3, [r2, r3]
 800d2ea:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800d2ec:	7dfb      	ldrb	r3, [r7, #23]
 800d2ee:	3b03      	subs	r3, #3
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	5cd3      	ldrb	r3, [r2, r3]
 800d2f4:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800d2f6:	7dfb      	ldrb	r3, [r7, #23]
 800d2f8:	3b02      	subs	r3, #2
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	5cd3      	ldrb	r3, [r2, r3]
 800d2fe:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800d300:	7dfb      	ldrb	r3, [r7, #23]
 800d302:	3b01      	subs	r3, #1
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	5cd3      	ldrb	r3, [r2, r3]
 800d308:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800d30a:	7dfb      	ldrb	r3, [r7, #23]
 800d30c:	7afa      	ldrb	r2, [r7, #11]
 800d30e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d312:	fb01 f202 	mul.w	r2, r1, r2
 800d316:	1a9b      	subs	r3, r3, r2
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d128      	bne.n	800d370 <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 800d31e:	7d7b      	ldrb	r3, [r7, #21]
 800d320:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800d322:	7d3b      	ldrb	r3, [r7, #20]
 800d324:	4a3f      	ldr	r2, [pc, #252]	@ (800d424 <lorawan_aes_set_key+0x1b8>)
 800d326:	5cd2      	ldrb	r2, [r2, r3]
 800d328:	7dbb      	ldrb	r3, [r7, #22]
 800d32a:	4053      	eors	r3, r2
 800d32c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800d32e:	7cfb      	ldrb	r3, [r7, #19]
 800d330:	4a3c      	ldr	r2, [pc, #240]	@ (800d424 <lorawan_aes_set_key+0x1b8>)
 800d332:	5cd3      	ldrb	r3, [r2, r3]
 800d334:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800d336:	7cbb      	ldrb	r3, [r7, #18]
 800d338:	4a3a      	ldr	r2, [pc, #232]	@ (800d424 <lorawan_aes_set_key+0x1b8>)
 800d33a:	5cd3      	ldrb	r3, [r2, r3]
 800d33c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800d33e:	7c3b      	ldrb	r3, [r7, #16]
 800d340:	4a38      	ldr	r2, [pc, #224]	@ (800d424 <lorawan_aes_set_key+0x1b8>)
 800d342:	5cd3      	ldrb	r3, [r2, r3]
 800d344:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800d346:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d34a:	005b      	lsls	r3, r3, #1
 800d34c:	b25a      	sxtb	r2, r3
 800d34e:	7dbb      	ldrb	r3, [r7, #22]
 800d350:	09db      	lsrs	r3, r3, #7
 800d352:	b2db      	uxtb	r3, r3
 800d354:	b25b      	sxtb	r3, r3
 800d356:	4619      	mov	r1, r3
 800d358:	0049      	lsls	r1, r1, #1
 800d35a:	440b      	add	r3, r1
 800d35c:	4619      	mov	r1, r3
 800d35e:	00c8      	lsls	r0, r1, #3
 800d360:	4619      	mov	r1, r3
 800d362:	4603      	mov	r3, r0
 800d364:	440b      	add	r3, r1
 800d366:	b25b      	sxtb	r3, r3
 800d368:	4053      	eors	r3, r2
 800d36a:	b25b      	sxtb	r3, r3
 800d36c:	75bb      	strb	r3, [r7, #22]
 800d36e:	e01c      	b.n	800d3aa <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d370:	7afb      	ldrb	r3, [r7, #11]
 800d372:	2b18      	cmp	r3, #24
 800d374:	d919      	bls.n	800d3aa <lorawan_aes_set_key+0x13e>
 800d376:	7dfb      	ldrb	r3, [r7, #23]
 800d378:	7afa      	ldrb	r2, [r7, #11]
 800d37a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d37e:	fb01 f202 	mul.w	r2, r1, r2
 800d382:	1a9b      	subs	r3, r3, r2
 800d384:	b2db      	uxtb	r3, r3
 800d386:	2b10      	cmp	r3, #16
 800d388:	d10f      	bne.n	800d3aa <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 800d38a:	7d7b      	ldrb	r3, [r7, #21]
 800d38c:	4a25      	ldr	r2, [pc, #148]	@ (800d424 <lorawan_aes_set_key+0x1b8>)
 800d38e:	5cd3      	ldrb	r3, [r2, r3]
 800d390:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800d392:	7d3b      	ldrb	r3, [r7, #20]
 800d394:	4a23      	ldr	r2, [pc, #140]	@ (800d424 <lorawan_aes_set_key+0x1b8>)
 800d396:	5cd3      	ldrb	r3, [r2, r3]
 800d398:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800d39a:	7cfb      	ldrb	r3, [r7, #19]
 800d39c:	4a21      	ldr	r2, [pc, #132]	@ (800d424 <lorawan_aes_set_key+0x1b8>)
 800d39e:	5cd3      	ldrb	r3, [r2, r3]
 800d3a0:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800d3a2:	7cbb      	ldrb	r3, [r7, #18]
 800d3a4:	4a1f      	ldr	r2, [pc, #124]	@ (800d424 <lorawan_aes_set_key+0x1b8>)
 800d3a6:	5cd3      	ldrb	r3, [r2, r3]
 800d3a8:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800d3aa:	7dfa      	ldrb	r2, [r7, #23]
 800d3ac:	7afb      	ldrb	r3, [r7, #11]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d3b2:	7c3b      	ldrb	r3, [r7, #16]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	5cd1      	ldrb	r1, [r2, r3]
 800d3b8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ba:	7d7a      	ldrb	r2, [r7, #21]
 800d3bc:	404a      	eors	r2, r1
 800d3be:	b2d1      	uxtb	r1, r2
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d3c4:	7c3b      	ldrb	r3, [r7, #16]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	5cd1      	ldrb	r1, [r2, r3]
 800d3cc:	7dfb      	ldrb	r3, [r7, #23]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	7d3a      	ldrb	r2, [r7, #20]
 800d3d2:	404a      	eors	r2, r1
 800d3d4:	b2d1      	uxtb	r1, r2
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d3da:	7c3b      	ldrb	r3, [r7, #16]
 800d3dc:	3302      	adds	r3, #2
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	5cd1      	ldrb	r1, [r2, r3]
 800d3e2:	7dfb      	ldrb	r3, [r7, #23]
 800d3e4:	3302      	adds	r3, #2
 800d3e6:	7cfa      	ldrb	r2, [r7, #19]
 800d3e8:	404a      	eors	r2, r1
 800d3ea:	b2d1      	uxtb	r1, r2
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d3f0:	7c3b      	ldrb	r3, [r7, #16]
 800d3f2:	3303      	adds	r3, #3
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	5cd1      	ldrb	r1, [r2, r3]
 800d3f8:	7dfb      	ldrb	r3, [r7, #23]
 800d3fa:	3303      	adds	r3, #3
 800d3fc:	7cba      	ldrb	r2, [r7, #18]
 800d3fe:	404a      	eors	r2, r1
 800d400:	b2d1      	uxtb	r1, r2
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d406:	7dfb      	ldrb	r3, [r7, #23]
 800d408:	3304      	adds	r3, #4
 800d40a:	75fb      	strb	r3, [r7, #23]
 800d40c:	7dfa      	ldrb	r2, [r7, #23]
 800d40e:	7c7b      	ldrb	r3, [r7, #17]
 800d410:	429a      	cmp	r2, r3
 800d412:	f4ff af66 	bcc.w	800d2e2 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800d416:	2300      	movs	r3, #0
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3718      	adds	r7, #24
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	00010101 	.word	0x00010101
 800d424:	08021254 	.word	0x08021254

0800d428 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b08a      	sub	sp, #40	@ 0x28
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d038      	beq.n	800d4b0 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	f107 0314 	add.w	r3, r7, #20
 800d444:	68f9      	ldr	r1, [r7, #12]
 800d446:	4618      	mov	r0, r3
 800d448:	f7ff fc07 	bl	800cc5a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d44c:	2301      	movs	r3, #1
 800d44e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d452:	e014      	b.n	800d47e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d454:	f107 0314 	add.w	r3, r7, #20
 800d458:	4618      	mov	r0, r3
 800d45a:	f7ff fd5d 	bl	800cf18 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d464:	0112      	lsls	r2, r2, #4
 800d466:	441a      	add	r2, r3
 800d468:	f107 0314 	add.w	r3, r7, #20
 800d46c:	4611      	mov	r1, r2
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff fcab 	bl	800cdca <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d478:	3301      	adds	r3, #1
 800d47a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d484:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d488:	429a      	cmp	r2, r3
 800d48a:	d3e3      	bcc.n	800d454 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d48c:	f107 0314 	add.w	r3, r7, #20
 800d490:	4618      	mov	r0, r3
 800d492:	f7ff fca7 	bl	800cde4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d49c:	0112      	lsls	r2, r2, #4
 800d49e:	441a      	add	r2, r3
 800d4a0:	f107 0314 	add.w	r3, r7, #20
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	68b8      	ldr	r0, [r7, #8]
 800d4a8:	f7ff fbd7 	bl	800cc5a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	e000      	b.n	800d4b2 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800d4b0:	23ff      	movs	r3, #255	@ 0xff
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3728      	adds	r7, #40	@ 0x28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
	...

0800d4bc <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800d4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4be:	b0a1      	sub	sp, #132	@ 0x84
 800d4c0:	af12      	add	r7, sp, #72	@ 0x48
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800d4c8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d4cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f000 fa12 	bl	800d8fc <SecureElementGetKeyByID>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d174      	bne.n	800d5c8 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d4e4:	e06c      	b.n	800d5c0 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800d4e6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d4ea:	4939      	ldr	r1, [pc, #228]	@ (800d5d0 <PrintKey+0x114>)
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	4413      	add	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	440b      	add	r3, r1
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d15a      	bne.n	800d5b6 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800d500:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d504:	4932      	ldr	r1, [pc, #200]	@ (800d5d0 <PrintKey+0x114>)
 800d506:	4613      	mov	r3, r2
 800d508:	005b      	lsls	r3, r3, #1
 800d50a:	4413      	add	r3, r2
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	440b      	add	r3, r1
 800d510:	3308      	adds	r3, #8
 800d512:	6819      	ldr	r1, [r3, #0]
 800d514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d516:	785b      	ldrb	r3, [r3, #1]
 800d518:	461d      	mov	r5, r3
 800d51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d51c:	789b      	ldrb	r3, [r3, #2]
 800d51e:	461e      	mov	r6, r3
 800d520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d522:	78db      	ldrb	r3, [r3, #3]
 800d524:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d528:	791b      	ldrb	r3, [r3, #4]
 800d52a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d52e:	795b      	ldrb	r3, [r3, #5]
 800d530:	623b      	str	r3, [r7, #32]
 800d532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d534:	799b      	ldrb	r3, [r3, #6]
 800d536:	61fb      	str	r3, [r7, #28]
 800d538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d53a:	79db      	ldrb	r3, [r3, #7]
 800d53c:	61bb      	str	r3, [r7, #24]
 800d53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d540:	7a1b      	ldrb	r3, [r3, #8]
 800d542:	617b      	str	r3, [r7, #20]
 800d544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d546:	7a5b      	ldrb	r3, [r3, #9]
 800d548:	613b      	str	r3, [r7, #16]
 800d54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d54c:	7a9b      	ldrb	r3, [r3, #10]
 800d54e:	60fb      	str	r3, [r7, #12]
 800d550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d552:	7adb      	ldrb	r3, [r3, #11]
 800d554:	60bb      	str	r3, [r7, #8]
 800d556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d558:	7b1b      	ldrb	r3, [r3, #12]
 800d55a:	607b      	str	r3, [r7, #4]
 800d55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d55e:	7b5b      	ldrb	r3, [r3, #13]
 800d560:	461c      	mov	r4, r3
 800d562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d564:	7b9b      	ldrb	r3, [r3, #14]
 800d566:	4618      	mov	r0, r3
 800d568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d56a:	7bdb      	ldrb	r3, [r3, #15]
 800d56c:	461a      	mov	r2, r3
 800d56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d570:	7c1b      	ldrb	r3, [r3, #16]
 800d572:	9310      	str	r3, [sp, #64]	@ 0x40
 800d574:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d576:	900e      	str	r0, [sp, #56]	@ 0x38
 800d578:	940d      	str	r4, [sp, #52]	@ 0x34
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	920c      	str	r2, [sp, #48]	@ 0x30
 800d57e:	68ba      	ldr	r2, [r7, #8]
 800d580:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	920a      	str	r2, [sp, #40]	@ 0x28
 800d586:	693a      	ldr	r2, [r7, #16]
 800d588:	9209      	str	r2, [sp, #36]	@ 0x24
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	9208      	str	r2, [sp, #32]
 800d58e:	69ba      	ldr	r2, [r7, #24]
 800d590:	9207      	str	r2, [sp, #28]
 800d592:	69fa      	ldr	r2, [r7, #28]
 800d594:	9206      	str	r2, [sp, #24]
 800d596:	6a3a      	ldr	r2, [r7, #32]
 800d598:	9205      	str	r2, [sp, #20]
 800d59a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d59c:	9204      	str	r2, [sp, #16]
 800d59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a0:	9303      	str	r3, [sp, #12]
 800d5a2:	9602      	str	r6, [sp, #8]
 800d5a4:	9501      	str	r5, [sp, #4]
 800d5a6:	9100      	str	r1, [sp, #0]
 800d5a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d5d4 <PrintKey+0x118>)
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	2002      	movs	r0, #2
 800d5b0:	f00f fd78 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
 800d5b4:	e008      	b.n	800d5c8 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d5b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d5c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d5c4:	2b0a      	cmp	r3, #10
 800d5c6:	d98e      	bls.n	800d4e6 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800d5c8:	373c      	adds	r7, #60	@ 0x3c
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	08021554 	.word	0x08021554
 800d5d4:	08020e2c 	.word	0x08020e2c

0800d5d8 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800d5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5da:	b091      	sub	sp, #68	@ 0x44
 800d5dc:	af08      	add	r7, sp, #32
 800d5de:	4603      	mov	r3, r0
 800d5e0:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800d5e6:	f107 0310 	add.w	r3, r7, #16
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f000 fbd8 	bl	800dda0 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800d5f0:	7c3b      	ldrb	r3, [r7, #16]
 800d5f2:	7c7a      	ldrb	r2, [r7, #17]
 800d5f4:	7cb9      	ldrb	r1, [r7, #18]
 800d5f6:	7cf8      	ldrb	r0, [r7, #19]
 800d5f8:	7d3c      	ldrb	r4, [r7, #20]
 800d5fa:	7d7d      	ldrb	r5, [r7, #21]
 800d5fc:	7dbe      	ldrb	r6, [r7, #22]
 800d5fe:	f897 c017 	ldrb.w	ip, [r7, #23]
 800d602:	f8cd c01c 	str.w	ip, [sp, #28]
 800d606:	9606      	str	r6, [sp, #24]
 800d608:	9505      	str	r5, [sp, #20]
 800d60a:	9404      	str	r4, [sp, #16]
 800d60c:	9003      	str	r0, [sp, #12]
 800d60e:	9102      	str	r1, [sp, #8]
 800d610:	9201      	str	r2, [sp, #4]
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	4b24      	ldr	r3, [pc, #144]	@ (800d6a8 <PrintIds+0xd0>)
 800d616:	2200      	movs	r2, #0
 800d618:	2100      	movs	r1, #0
 800d61a:	2002      	movs	r0, #2
 800d61c:	f00f fd42 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800d620:	f107 0318 	add.w	r3, r7, #24
 800d624:	4618      	mov	r0, r3
 800d626:	f000 fbeb 	bl	800de00 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800d62a:	7e3b      	ldrb	r3, [r7, #24]
 800d62c:	7e7a      	ldrb	r2, [r7, #25]
 800d62e:	7eb9      	ldrb	r1, [r7, #26]
 800d630:	7ef8      	ldrb	r0, [r7, #27]
 800d632:	7f3c      	ldrb	r4, [r7, #28]
 800d634:	7f7d      	ldrb	r5, [r7, #29]
 800d636:	7fbe      	ldrb	r6, [r7, #30]
 800d638:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800d63c:	f8cd c01c 	str.w	ip, [sp, #28]
 800d640:	9606      	str	r6, [sp, #24]
 800d642:	9505      	str	r5, [sp, #20]
 800d644:	9404      	str	r4, [sp, #16]
 800d646:	9003      	str	r0, [sp, #12]
 800d648:	9102      	str	r1, [sp, #8]
 800d64a:	9201      	str	r2, [sp, #4]
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	4b17      	ldr	r3, [pc, #92]	@ (800d6ac <PrintIds+0xd4>)
 800d650:	2200      	movs	r2, #0
 800d652:	2100      	movs	r1, #0
 800d654:	2002      	movs	r0, #2
 800d656:	f00f fd25 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800d65a:	f107 020c 	add.w	r2, r7, #12
 800d65e:	79fb      	ldrb	r3, [r7, #7]
 800d660:	4611      	mov	r1, r2
 800d662:	4618      	mov	r0, r3
 800d664:	f000 fbfe 	bl	800de64 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d668:	f107 030c 	add.w	r3, r7, #12
 800d66c:	3303      	adds	r3, #3
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	461a      	mov	r2, r3
 800d672:	f107 030c 	add.w	r3, r7, #12
 800d676:	3302      	adds	r3, #2
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	4619      	mov	r1, r3
 800d67c:	f107 030c 	add.w	r3, r7, #12
 800d680:	3301      	adds	r3, #1
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	4618      	mov	r0, r3
 800d686:	f107 030c 	add.w	r3, r7, #12
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	9303      	str	r3, [sp, #12]
 800d68e:	9002      	str	r0, [sp, #8]
 800d690:	9101      	str	r1, [sp, #4]
 800d692:	9200      	str	r2, [sp, #0]
 800d694:	4b06      	ldr	r3, [pc, #24]	@ (800d6b0 <PrintIds+0xd8>)
 800d696:	2200      	movs	r2, #0
 800d698:	2100      	movs	r1, #0
 800d69a:	2002      	movs	r0, #2
 800d69c:	f00f fd02 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800d6a0:	bf00      	nop
 800d6a2:	3724      	adds	r7, #36	@ 0x24
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6a8:	08020e88 	.word	0x08020e88
 800d6ac:	08020ec8 	.word	0x08020ec8
 800d6b0:	08020f08 	.word	0x08020f08

0800d6b4 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b085      	sub	sp, #20
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	6039      	str	r1, [r7, #0]
 800d6be:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	73fb      	strb	r3, [r7, #15]
 800d6c4:	e01a      	b.n	800d6fc <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d6c6:	4b12      	ldr	r3, [pc, #72]	@ (800d710 <GetKeyByID+0x5c>)
 800d6c8:	6819      	ldr	r1, [r3, #0]
 800d6ca:	7bfa      	ldrb	r2, [r7, #15]
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	011b      	lsls	r3, r3, #4
 800d6d0:	4413      	add	r3, r2
 800d6d2:	440b      	add	r3, r1
 800d6d4:	3318      	adds	r3, #24
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	79fa      	ldrb	r2, [r7, #7]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d10b      	bne.n	800d6f6 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d6de:	4b0c      	ldr	r3, [pc, #48]	@ (800d710 <GetKeyByID+0x5c>)
 800d6e0:	6819      	ldr	r1, [r3, #0]
 800d6e2:	7bfa      	ldrb	r2, [r7, #15]
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	011b      	lsls	r3, r3, #4
 800d6e8:	4413      	add	r3, r2
 800d6ea:	3318      	adds	r3, #24
 800d6ec:	18ca      	adds	r2, r1, r3
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	e006      	b.n	800d704 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d6f6:	7bfb      	ldrb	r3, [r7, #15]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	73fb      	strb	r3, [r7, #15]
 800d6fc:	7bfb      	ldrb	r3, [r7, #15]
 800d6fe:	2b0a      	cmp	r3, #10
 800d700:	d9e1      	bls.n	800d6c6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d702:	2303      	movs	r3, #3
}
 800d704:	4618      	mov	r0, r3
 800d706:	3714      	adds	r7, #20
 800d708:	46bd      	mov	sp, r7
 800d70a:	bc80      	pop	{r7}
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	200007c0 	.word	0x200007c0

0800d714 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800d714:	b590      	push	{r4, r7, lr}
 800d716:	b0d1      	sub	sp, #324	@ 0x144
 800d718:	af00      	add	r7, sp, #0
 800d71a:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800d71e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800d722:	6020      	str	r0, [r4, #0]
 800d724:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800d728:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d72c:	6001      	str	r1, [r0, #0]
 800d72e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d732:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800d736:	600a      	str	r2, [r1, #0]
 800d738:	461a      	mov	r2, r3
 800d73a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d73e:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800d742:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800d744:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d748:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d003      	beq.n	800d75a <ComputeCmac+0x46>
 800d752:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800d756:	2b00      	cmp	r3, #0
 800d758:	d101      	bne.n	800d75e <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d75a:	2302      	movs	r3, #2
 800d75c:	e05d      	b.n	800d81a <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800d75e:	f107 0314 	add.w	r3, r7, #20
 800d762:	4618      	mov	r0, r3
 800d764:	f7fe fefe 	bl	800c564 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800d768:	f107 0210 	add.w	r2, r7, #16
 800d76c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d770:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	4611      	mov	r1, r2
 800d778:	4618      	mov	r0, r3
 800d77a:	f7ff ff9b 	bl	800d6b4 <GetKeyByID>
 800d77e:	4603      	mov	r3, r0
 800d780:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d784:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d144      	bne.n	800d816 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800d78c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d790:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	1c5a      	adds	r2, r3, #1
 800d798:	f107 0314 	add.w	r3, r7, #20
 800d79c:	4611      	mov	r1, r2
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7fe fef9 	bl	800c596 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800d7a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d009      	beq.n	800d7c6 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800d7b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7b6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d7ba:	f107 0014 	add.w	r0, r7, #20
 800d7be:	2210      	movs	r2, #16
 800d7c0:	6819      	ldr	r1, [r3, #0]
 800d7c2:	f7fe fef7 	bl	800c5b4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800d7c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7ca:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800d7ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d7d6:	f107 0014 	add.w	r0, r7, #20
 800d7da:	6812      	ldr	r2, [r2, #0]
 800d7dc:	6819      	ldr	r1, [r3, #0]
 800d7de:	f7fe fee9 	bl	800c5b4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800d7e2:	f107 0214 	add.w	r2, r7, #20
 800d7e6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800d7ea:	4611      	mov	r1, r2
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7fe ffa3 	bl	800c738 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800d7f2:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800d7fc:	021b      	lsls	r3, r3, #8
 800d7fe:	431a      	orrs	r2, r3
 800d800:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800d804:	041b      	lsls	r3, r3, #16
 800d806:	431a      	orrs	r2, r3
 800d808:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d80c:	061b      	lsls	r3, r3, #24
 800d80e:	431a      	orrs	r2, r3
 800d810:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800d814:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800d816:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d820:	46bd      	mov	sp, r7
 800d822:	bd90      	pop	{r4, r7, pc}

0800d824 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d832:	2302      	movs	r3, #2
 800d834:	e00a      	b.n	800d84c <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800d836:	4a07      	ldr	r2, [pc, #28]	@ (800d854 <SecureElementInit+0x30>)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800d83c:	4b05      	ldr	r3, [pc, #20]	@ (800d854 <SecureElementInit+0x30>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	22d8      	movs	r2, #216	@ 0xd8
 800d842:	4905      	ldr	r1, [pc, #20]	@ (800d858 <SecureElementInit+0x34>)
 800d844:	4618      	mov	r0, r3
 800d846:	f00b fb36 	bl	8018eb6 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	200007c0 	.word	0x200007c0
 800d858:	08021ae4 	.word	0x08021ae4

0800d85c <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b086      	sub	sp, #24
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800d866:	2300      	movs	r3, #0
 800d868:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800d86a:	f107 030c 	add.w	r3, r7, #12
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 fa96 	bl	800dda0 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800d874:	f107 0308 	add.w	r3, r7, #8
 800d878:	4619      	mov	r1, r3
 800d87a:	2001      	movs	r0, #1
 800d87c:	f000 faf2 	bl	800de64 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d024      	beq.n	800d8d0 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800d886:	2300      	movs	r3, #0
 800d888:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800d88a:	2300      	movs	r3, #0
 800d88c:	75bb      	strb	r3, [r7, #22]
 800d88e:	e00c      	b.n	800d8aa <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800d890:	7dbb      	ldrb	r3, [r7, #22]
 800d892:	3318      	adds	r3, #24
 800d894:	443b      	add	r3, r7
 800d896:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d002      	beq.n	800d8a4 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	75fb      	strb	r3, [r7, #23]
                break;
 800d8a2:	e005      	b.n	800d8b0 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800d8a4:	7dbb      	ldrb	r3, [r7, #22]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	75bb      	strb	r3, [r7, #22]
 800d8aa:	7dbb      	ldrb	r3, [r7, #22]
 800d8ac:	2b07      	cmp	r3, #7
 800d8ae:	d9ef      	bls.n	800d890 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800d8b0:	7dfb      	ldrb	r3, [r7, #23]
 800d8b2:	f083 0301 	eor.w	r3, r3, #1
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d009      	beq.n	800d8d0 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800d8bc:	f107 020c 	add.w	r2, r7, #12
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	4610      	mov	r0, r2
 800d8c4:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800d8c6:	f107 030c 	add.w	r3, r7, #12
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 fa50 	bl	800dd70 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00c      	beq.n	800d8f0 <SecureElementInitMcuID+0x94>
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d109      	bne.n	800d8f0 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800d8dc:	f107 0208 	add.w	r2, r7, #8
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	4610      	mov	r0, r2
 800d8e4:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	2001      	movs	r0, #1
 800d8ec:	f000 faa0 	bl	800de30 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3718      	adds	r7, #24
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
	...

0800d8fc <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	4603      	mov	r3, r0
 800d904:	6039      	str	r1, [r7, #0]
 800d906:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d908:	2300      	movs	r3, #0
 800d90a:	73fb      	strb	r3, [r7, #15]
 800d90c:	e01a      	b.n	800d944 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d90e:	4b12      	ldr	r3, [pc, #72]	@ (800d958 <SecureElementGetKeyByID+0x5c>)
 800d910:	6819      	ldr	r1, [r3, #0]
 800d912:	7bfa      	ldrb	r2, [r7, #15]
 800d914:	4613      	mov	r3, r2
 800d916:	011b      	lsls	r3, r3, #4
 800d918:	4413      	add	r3, r2
 800d91a:	440b      	add	r3, r1
 800d91c:	3318      	adds	r3, #24
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	79fa      	ldrb	r2, [r7, #7]
 800d922:	429a      	cmp	r2, r3
 800d924:	d10b      	bne.n	800d93e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d926:	4b0c      	ldr	r3, [pc, #48]	@ (800d958 <SecureElementGetKeyByID+0x5c>)
 800d928:	6819      	ldr	r1, [r3, #0]
 800d92a:	7bfa      	ldrb	r2, [r7, #15]
 800d92c:	4613      	mov	r3, r2
 800d92e:	011b      	lsls	r3, r3, #4
 800d930:	4413      	add	r3, r2
 800d932:	3318      	adds	r3, #24
 800d934:	18ca      	adds	r2, r1, r3
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d93a:	2300      	movs	r3, #0
 800d93c:	e006      	b.n	800d94c <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d93e:	7bfb      	ldrb	r3, [r7, #15]
 800d940:	3301      	adds	r3, #1
 800d942:	73fb      	strb	r3, [r7, #15]
 800d944:	7bfb      	ldrb	r3, [r7, #15]
 800d946:	2b0a      	cmp	r3, #10
 800d948:	d9e1      	bls.n	800d90e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d94a:	2303      	movs	r3, #3
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	bc80      	pop	{r7}
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	200007c0 	.word	0x200007c0

0800d95c <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800d960:	2000      	movs	r0, #0
 800d962:	f7ff fdab 	bl	800d4bc <PrintKey>
    PrintKey( NWK_KEY );
 800d966:	2001      	movs	r0, #1
 800d968:	f7ff fda8 	bl	800d4bc <PrintKey>
    PrintKey( APP_S_KEY );
 800d96c:	2009      	movs	r0, #9
 800d96e:	f7ff fda5 	bl	800d4bc <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d972:	2008      	movs	r0, #8
 800d974:	f7ff fda2 	bl	800d4bc <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800d978:	2000      	movs	r0, #0
 800d97a:	f7ff fe2d 	bl	800d5d8 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d97e:	2300      	movs	r3, #0
}
 800d980:	4618      	mov	r0, r3
 800d982:	bd80      	pop	{r7, pc}

0800d984 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	4603      	mov	r3, r0
 800d98c:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800d98e:	200b      	movs	r0, #11
 800d990:	f7ff fd94 	bl	800d4bc <PrintKey>
    PrintKey( MC_KE_KEY );
 800d994:	200c      	movs	r0, #12
 800d996:	f7ff fd91 	bl	800d4bc <PrintKey>
    PrintKey( APP_S_KEY );
 800d99a:	2009      	movs	r0, #9
 800d99c:	f7ff fd8e 	bl	800d4bc <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d9a0:	2008      	movs	r0, #8
 800d9a2:	f7ff fd8b 	bl	800d4bc <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800d9a6:	200a      	movs	r0, #10
 800d9a8:	f7ff fd88 	bl	800d4bc <PrintKey>
    PrintIds( mode );
 800d9ac:	79fb      	ldrb	r3, [r7, #7]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7ff fe12 	bl	800d5d8 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d9b4:	2300      	movs	r3, #0
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3708      	adds	r7, #8
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
	...

0800d9c0 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b088      	sub	sp, #32
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	6039      	str	r1, [r7, #0]
 800d9ca:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	e04b      	b.n	800da6e <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	77fb      	strb	r3, [r7, #31]
 800d9da:	e044      	b.n	800da66 <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d9dc:	4b26      	ldr	r3, [pc, #152]	@ (800da78 <SecureElementSetKey+0xb8>)
 800d9de:	6819      	ldr	r1, [r3, #0]
 800d9e0:	7ffa      	ldrb	r2, [r7, #31]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	011b      	lsls	r3, r3, #4
 800d9e6:	4413      	add	r3, r2
 800d9e8:	440b      	add	r3, r1
 800d9ea:	3318      	adds	r3, #24
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	79fa      	ldrb	r2, [r7, #7]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d135      	bne.n	800da60 <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800d9f4:	79fb      	ldrb	r3, [r7, #7]
 800d9f6:	2b0d      	cmp	r3, #13
 800d9f8:	d122      	bne.n	800da40 <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d9fa:	2306      	movs	r3, #6
 800d9fc:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800d9fe:	f107 030c 	add.w	r3, r7, #12
 800da02:	2200      	movs	r2, #0
 800da04:	601a      	str	r2, [r3, #0]
 800da06:	605a      	str	r2, [r3, #4]
 800da08:	609a      	str	r2, [r3, #8]
 800da0a:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800da0c:	f107 030c 	add.w	r3, r7, #12
 800da10:	220c      	movs	r2, #12
 800da12:	2110      	movs	r1, #16
 800da14:	6838      	ldr	r0, [r7, #0]
 800da16:	f000 f877 	bl	800db08 <SecureElementAesEncrypt>
 800da1a:	4603      	mov	r3, r0
 800da1c:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800da1e:	4b16      	ldr	r3, [pc, #88]	@ (800da78 <SecureElementSetKey+0xb8>)
 800da20:	6819      	ldr	r1, [r3, #0]
 800da22:	7ffa      	ldrb	r2, [r7, #31]
 800da24:	4613      	mov	r3, r2
 800da26:	011b      	lsls	r3, r3, #4
 800da28:	4413      	add	r3, r2
 800da2a:	3318      	adds	r3, #24
 800da2c:	440b      	add	r3, r1
 800da2e:	3301      	adds	r3, #1
 800da30:	f107 010c 	add.w	r1, r7, #12
 800da34:	2210      	movs	r2, #16
 800da36:	4618      	mov	r0, r3
 800da38:	f00b fa3d 	bl	8018eb6 <memcpy1>
                return retval;
 800da3c:	7fbb      	ldrb	r3, [r7, #30]
 800da3e:	e016      	b.n	800da6e <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800da40:	4b0d      	ldr	r3, [pc, #52]	@ (800da78 <SecureElementSetKey+0xb8>)
 800da42:	6819      	ldr	r1, [r3, #0]
 800da44:	7ffa      	ldrb	r2, [r7, #31]
 800da46:	4613      	mov	r3, r2
 800da48:	011b      	lsls	r3, r3, #4
 800da4a:	4413      	add	r3, r2
 800da4c:	3318      	adds	r3, #24
 800da4e:	440b      	add	r3, r1
 800da50:	3301      	adds	r3, #1
 800da52:	2210      	movs	r2, #16
 800da54:	6839      	ldr	r1, [r7, #0]
 800da56:	4618      	mov	r0, r3
 800da58:	f00b fa2d 	bl	8018eb6 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800da5c:	2300      	movs	r3, #0
 800da5e:	e006      	b.n	800da6e <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800da60:	7ffb      	ldrb	r3, [r7, #31]
 800da62:	3301      	adds	r3, #1
 800da64:	77fb      	strb	r3, [r7, #31]
 800da66:	7ffb      	ldrb	r3, [r7, #31]
 800da68:	2b0a      	cmp	r3, #10
 800da6a:	d9b7      	bls.n	800d9dc <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800da6c:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3720      	adds	r7, #32
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	200007c0 	.word	0x200007c0

0800da7c <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b086      	sub	sp, #24
 800da80:	af02      	add	r7, sp, #8
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	607a      	str	r2, [r7, #4]
 800da88:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800da8a:	78fb      	ldrb	r3, [r7, #3]
 800da8c:	2b0b      	cmp	r3, #11
 800da8e:	d901      	bls.n	800da94 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800da90:	2303      	movs	r3, #3
 800da92:	e009      	b.n	800daa8 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800da94:	78fa      	ldrb	r2, [r7, #3]
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	4613      	mov	r3, r2
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	68b9      	ldr	r1, [r7, #8]
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f7ff fe37 	bl	800d714 <ComputeCmac>
 800daa6:	4603      	mov	r3, r0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3710      	adds	r7, #16
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b088      	sub	sp, #32
 800dab4:	af02      	add	r7, sp, #8
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	607a      	str	r2, [r7, #4]
 800dabc:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d101      	bne.n	800dac8 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dac4:	2302      	movs	r3, #2
 800dac6:	e01b      	b.n	800db00 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800dac8:	2306      	movs	r3, #6
 800daca:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800dacc:	2300      	movs	r3, #0
 800dace:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800dad0:	78fa      	ldrb	r2, [r7, #3]
 800dad2:	f107 0310 	add.w	r3, r7, #16
 800dad6:	9300      	str	r3, [sp, #0]
 800dad8:	4613      	mov	r3, r2
 800dada:	68ba      	ldr	r2, [r7, #8]
 800dadc:	68f9      	ldr	r1, [r7, #12]
 800dade:	2000      	movs	r0, #0
 800dae0:	f7ff fe18 	bl	800d714 <ComputeCmac>
 800dae4:	4603      	mov	r3, r0
 800dae6:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800dae8:	7dfb      	ldrb	r3, [r7, #23]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800daee:	7dfb      	ldrb	r3, [r7, #23]
 800daf0:	e006      	b.n	800db00 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d001      	beq.n	800dafe <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800dafa:	2301      	movs	r3, #1
 800dafc:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800dafe:	7dfb      	ldrb	r3, [r7, #23]
}
 800db00:	4618      	mov	r0, r3
 800db02:	3718      	adds	r7, #24
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b0c2      	sub	sp, #264	@ 0x108
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800db14:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800db18:	6001      	str	r1, [r0, #0]
 800db1a:	4611      	mov	r1, r2
 800db1c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800db20:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800db24:	6013      	str	r3, [r2, #0]
 800db26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db2a:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800db2e:	460a      	mov	r2, r1
 800db30:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d006      	beq.n	800db46 <SecureElementAesEncrypt+0x3e>
 800db38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d101      	bne.n	800db4a <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800db46:	2302      	movs	r3, #2
 800db48:	e059      	b.n	800dbfe <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800db4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db4e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f003 030f 	and.w	r3, r3, #15
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800db5c:	2305      	movs	r3, #5
 800db5e:	e04e      	b.n	800dbfe <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800db60:	f107 0314 	add.w	r3, r7, #20
 800db64:	22f0      	movs	r2, #240	@ 0xf0
 800db66:	2100      	movs	r1, #0
 800db68:	4618      	mov	r0, r3
 800db6a:	f00b f9df 	bl	8018f2c <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800db6e:	f107 0210 	add.w	r2, r7, #16
 800db72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db76:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	4611      	mov	r1, r2
 800db7e:	4618      	mov	r0, r3
 800db80:	f7ff fd98 	bl	800d6b4 <GetKeyByID>
 800db84:	4603      	mov	r3, r0
 800db86:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800db8a:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d133      	bne.n	800dbfa <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	3301      	adds	r3, #1
 800db96:	f107 0214 	add.w	r2, r7, #20
 800db9a:	2110      	movs	r1, #16
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7ff fb65 	bl	800d26c <lorawan_aes_set_key>

        uint8_t block = 0;
 800dba2:	2300      	movs	r3, #0
 800dba4:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800dba8:	e020      	b.n	800dbec <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800dbaa:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	18d0      	adds	r0, r2, r3
 800dbb2:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800dbb6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800dbba:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800dbbe:	6812      	ldr	r2, [r2, #0]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	f107 0214 	add.w	r2, r7, #20
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	f7ff fc2e 	bl	800d428 <lorawan_aes_encrypt>
            block = block + 16;
 800dbcc:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800dbd0:	3310      	adds	r3, #16
 800dbd2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800dbd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbda:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dbde:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800dbe2:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800dbe6:	6812      	ldr	r2, [r2, #0]
 800dbe8:	3a10      	subs	r2, #16
 800dbea:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800dbec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d1d7      	bne.n	800dbaa <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800dbfa:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b088      	sub	sp, #32
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	460b      	mov	r3, r1
 800dc12:	70fb      	strb	r3, [r7, #3]
 800dc14:	4613      	mov	r3, r2
 800dc16:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d101      	bne.n	800dc22 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dc1e:	2302      	movs	r3, #2
 800dc20:	e02d      	b.n	800dc7e <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800dc22:	2306      	movs	r3, #6
 800dc24:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800dc26:	78bb      	ldrb	r3, [r7, #2]
 800dc28:	2b0c      	cmp	r3, #12
 800dc2a:	d104      	bne.n	800dc36 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800dc2c:	78fb      	ldrb	r3, [r7, #3]
 800dc2e:	2b0b      	cmp	r3, #11
 800dc30:	d001      	beq.n	800dc36 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dc32:	2303      	movs	r3, #3
 800dc34:	e023      	b.n	800dc7e <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800dc36:	f107 030c 	add.w	r3, r7, #12
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	601a      	str	r2, [r3, #0]
 800dc3e:	605a      	str	r2, [r3, #4]
 800dc40:	609a      	str	r2, [r3, #8]
 800dc42:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800dc44:	f107 030c 	add.w	r3, r7, #12
 800dc48:	78fa      	ldrb	r2, [r7, #3]
 800dc4a:	2110      	movs	r1, #16
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7ff ff5b 	bl	800db08 <SecureElementAesEncrypt>
 800dc52:	4603      	mov	r3, r0
 800dc54:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800dc56:	7ffb      	ldrb	r3, [r7, #31]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d001      	beq.n	800dc60 <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 800dc5c:	7ffb      	ldrb	r3, [r7, #31]
 800dc5e:	e00e      	b.n	800dc7e <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800dc60:	f107 020c 	add.w	r2, r7, #12
 800dc64:	78bb      	ldrb	r3, [r7, #2]
 800dc66:	4611      	mov	r1, r2
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7ff fea9 	bl	800d9c0 <SecureElementSetKey>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800dc72:	7ffb      	ldrb	r3, [r7, #31]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 800dc78:	7ffb      	ldrb	r3, [r7, #31]
 800dc7a:	e000      	b.n	800dc7e <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 800dc7c:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3720      	adds	r7, #32
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b086      	sub	sp, #24
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607b      	str	r3, [r7, #4]
 800dc90:	4603      	mov	r3, r0
 800dc92:	73fb      	strb	r3, [r7, #15]
 800dc94:	4613      	mov	r3, r2
 800dc96:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d005      	beq.n	800dcaa <SecureElementProcessJoinAccept+0x24>
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d002      	beq.n	800dcaa <SecureElementProcessJoinAccept+0x24>
 800dca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d101      	bne.n	800dcae <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dcaa:	2302      	movs	r3, #2
 800dcac:	e05c      	b.n	800dd68 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800dcae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dcb2:	2b21      	cmp	r3, #33	@ 0x21
 800dcb4:	d901      	bls.n	800dcba <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800dcb6:	2305      	movs	r3, #5
 800dcb8:	e056      	b.n	800dd68 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800dcbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	6879      	ldr	r1, [r7, #4]
 800dcc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dcca:	f00b f8f4 	bl	8018eb6 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	1c58      	adds	r0, r3, #1
 800dcd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	4619      	mov	r1, r3
 800dcda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcdc:	3301      	adds	r3, #1
 800dcde:	7dfa      	ldrb	r2, [r7, #23]
 800dce0:	f7ff ff12 	bl	800db08 <SecureElementAesEncrypt>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d001      	beq.n	800dcee <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800dcea:	2307      	movs	r3, #7
 800dcec:	e03c      	b.n	800dd68 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800dcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf0:	330b      	adds	r3, #11
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	09db      	lsrs	r3, r3, #7
 800dcf6:	b2da      	uxtb	r2, r3
 800dcf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcfa:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800dcfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd00:	3b04      	subs	r3, #4
 800dd02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd04:	4413      	add	r3, r2
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd0e:	3b03      	subs	r3, #3
 800dd10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd12:	4413      	add	r3, r2
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	021b      	lsls	r3, r3, #8
 800dd18:	ea41 0203 	orr.w	r2, r1, r3
 800dd1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd20:	3b02      	subs	r3, #2
 800dd22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd24:	440b      	add	r3, r1
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	041b      	lsls	r3, r3, #16
 800dd2a:	431a      	orrs	r2, r3
 800dd2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd30:	3b01      	subs	r3, #1
 800dd32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd34:	440b      	add	r3, r1
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	061b      	lsls	r3, r3, #24
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800dd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d10d      	bne.n	800dd62 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800dd46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd4a:	3b04      	subs	r3, #4
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	2301      	movs	r3, #1
 800dd50:	693a      	ldr	r2, [r7, #16]
 800dd52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd54:	f7ff feac 	bl	800dab0 <SecureElementVerifyAesCmac>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d003      	beq.n	800dd66 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	e002      	b.n	800dd68 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800dd62:	2304      	movs	r3, #4
 800dd64:	e000      	b.n	800dd68 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800dd66:	2300      	movs	r3, #0
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3718      	adds	r7, #24
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d101      	bne.n	800dd82 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dd7e:	2302      	movs	r3, #2
 800dd80:	e007      	b.n	800dd92 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800dd82:	4b06      	ldr	r3, [pc, #24]	@ (800dd9c <SecureElementSetDevEui+0x2c>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2208      	movs	r2, #8
 800dd88:	6879      	ldr	r1, [r7, #4]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f00b f893 	bl	8018eb6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800dd90:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	200007c0 	.word	0x200007c0

0800dda0 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d101      	bne.n	800ddb2 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ddae:	2302      	movs	r3, #2
 800ddb0:	e007      	b.n	800ddc2 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800ddb2:	4b06      	ldr	r3, [pc, #24]	@ (800ddcc <SecureElementGetDevEui+0x2c>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2208      	movs	r2, #8
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f00b f87b 	bl	8018eb6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ddc0:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	200007c0 	.word	0x200007c0

0800ddd0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d101      	bne.n	800dde2 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ddde:	2302      	movs	r3, #2
 800dde0:	e008      	b.n	800ddf4 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800dde2:	4b06      	ldr	r3, [pc, #24]	@ (800ddfc <SecureElementSetJoinEui+0x2c>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3308      	adds	r3, #8
 800dde8:	2208      	movs	r2, #8
 800ddea:	6879      	ldr	r1, [r7, #4]
 800ddec:	4618      	mov	r0, r3
 800ddee:	f00b f862 	bl	8018eb6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ddf2:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3708      	adds	r7, #8
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	200007c0 	.word	0x200007c0

0800de00 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d101      	bne.n	800de12 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800de0e:	2302      	movs	r3, #2
 800de10:	e008      	b.n	800de24 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800de12:	4b06      	ldr	r3, [pc, #24]	@ (800de2c <SecureElementGetJoinEui+0x2c>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	3308      	adds	r3, #8
 800de18:	2208      	movs	r2, #8
 800de1a:	4619      	mov	r1, r3
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f00b f84a 	bl	8018eb6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800de22:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800de24:	4618      	mov	r0, r3
 800de26:	3708      	adds	r7, #8
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	200007c0 	.word	0x200007c0

0800de30 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
 800de36:	4603      	mov	r3, r0
 800de38:	6039      	str	r1, [r7, #0]
 800de3a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800de3c:	79fb      	ldrb	r3, [r7, #7]
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d104      	bne.n	800de4c <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800de42:	4b07      	ldr	r3, [pc, #28]	@ (800de60 <SecureElementSetDevAddr+0x30>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	683a      	ldr	r2, [r7, #0]
 800de48:	611a      	str	r2, [r3, #16]
 800de4a:	e003      	b.n	800de54 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800de4c:	4b04      	ldr	r3, [pc, #16]	@ (800de60 <SecureElementSetDevAddr+0x30>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800de54:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800de56:	4618      	mov	r0, r3
 800de58:	370c      	adds	r7, #12
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bc80      	pop	{r7}
 800de5e:	4770      	bx	lr
 800de60:	200007c0 	.word	0x200007c0

0800de64 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
 800de6a:	4603      	mov	r3, r0
 800de6c:	6039      	str	r1, [r7, #0]
 800de6e:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d101      	bne.n	800de7a <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800de76:	2302      	movs	r3, #2
 800de78:	e00e      	b.n	800de98 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800de7a:	79fb      	ldrb	r3, [r7, #7]
 800de7c:	2b02      	cmp	r3, #2
 800de7e:	d105      	bne.n	800de8c <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800de80:	4b08      	ldr	r3, [pc, #32]	@ (800dea4 <SecureElementGetDevAddr+0x40>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	691a      	ldr	r2, [r3, #16]
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	601a      	str	r2, [r3, #0]
 800de8a:	e004      	b.n	800de96 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800de8c:	4b05      	ldr	r3, [pc, #20]	@ (800dea4 <SecureElementGetDevAddr+0x40>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	695a      	ldr	r2, [r3, #20]
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800de96:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800de98:	4618      	mov	r0, r3
 800de9a:	370c      	adds	r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bc80      	pop	{r7}
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop
 800dea4:	200007c0 	.word	0x200007c0

0800dea8 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800deb2:	4a29      	ldr	r2, [pc, #164]	@ (800df58 <LmHandlerInit+0xb0>)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800deb8:	4b28      	ldr	r3, [pc, #160]	@ (800df5c <LmHandlerInit+0xb4>)
 800deba:	4a29      	ldr	r2, [pc, #164]	@ (800df60 <LmHandlerInit+0xb8>)
 800debc:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800debe:	4b27      	ldr	r3, [pc, #156]	@ (800df5c <LmHandlerInit+0xb4>)
 800dec0:	4a28      	ldr	r2, [pc, #160]	@ (800df64 <LmHandlerInit+0xbc>)
 800dec2:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800dec4:	4b25      	ldr	r3, [pc, #148]	@ (800df5c <LmHandlerInit+0xb4>)
 800dec6:	4a28      	ldr	r2, [pc, #160]	@ (800df68 <LmHandlerInit+0xc0>)
 800dec8:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800deca:	4b24      	ldr	r3, [pc, #144]	@ (800df5c <LmHandlerInit+0xb4>)
 800decc:	4a27      	ldr	r2, [pc, #156]	@ (800df6c <LmHandlerInit+0xc4>)
 800dece:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800ded0:	4b21      	ldr	r3, [pc, #132]	@ (800df58 <LmHandlerInit+0xb0>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4a26      	ldr	r2, [pc, #152]	@ (800df70 <LmHandlerInit+0xc8>)
 800ded8:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800deda:	4b1f      	ldr	r3, [pc, #124]	@ (800df58 <LmHandlerInit+0xb0>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	4a23      	ldr	r2, [pc, #140]	@ (800df70 <LmHandlerInit+0xc8>)
 800dee2:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800dee4:	4b1c      	ldr	r3, [pc, #112]	@ (800df58 <LmHandlerInit+0xb0>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	4a21      	ldr	r2, [pc, #132]	@ (800df70 <LmHandlerInit+0xc8>)
 800deec:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800deee:	4b1a      	ldr	r3, [pc, #104]	@ (800df58 <LmHandlerInit+0xb0>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	4a1e      	ldr	r2, [pc, #120]	@ (800df70 <LmHandlerInit+0xc8>)
 800def6:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800def8:	4b1d      	ldr	r3, [pc, #116]	@ (800df70 <LmHandlerInit+0xc8>)
 800defa:	4a1e      	ldr	r2, [pc, #120]	@ (800df74 <LmHandlerInit+0xcc>)
 800defc:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800defe:	4b16      	ldr	r3, [pc, #88]	@ (800df58 <LmHandlerInit+0xb0>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	699b      	ldr	r3, [r3, #24]
 800df04:	4a1a      	ldr	r2, [pc, #104]	@ (800df70 <LmHandlerInit+0xc8>)
 800df06:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	4a1b      	ldr	r2, [pc, #108]	@ (800df78 <LmHandlerInit+0xd0>)
 800df0c:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800df0e:	4b12      	ldr	r3, [pc, #72]	@ (800df58 <LmHandlerInit+0xb0>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df14:	4a18      	ldr	r2, [pc, #96]	@ (800df78 <LmHandlerInit+0xd0>)
 800df16:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800df18:	4b17      	ldr	r3, [pc, #92]	@ (800df78 <LmHandlerInit+0xd0>)
 800df1a:	4a18      	ldr	r2, [pc, #96]	@ (800df7c <LmHandlerInit+0xd4>)
 800df1c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800df1e:	4b16      	ldr	r3, [pc, #88]	@ (800df78 <LmHandlerInit+0xd0>)
 800df20:	4a17      	ldr	r2, [pc, #92]	@ (800df80 <LmHandlerInit+0xd8>)
 800df22:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800df24:	4914      	ldr	r1, [pc, #80]	@ (800df78 <LmHandlerInit+0xd0>)
 800df26:	2000      	movs	r0, #0
 800df28:	f000 fdc0 	bl	800eaac <LmHandlerPackageRegister>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d002      	beq.n	800df38 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800df32:	f04f 33ff 	mov.w	r3, #4294967295
 800df36:	e00a      	b.n	800df4e <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800df38:	463b      	mov	r3, r7
 800df3a:	4618      	mov	r0, r3
 800df3c:	f001 fd36 	bl	800f9ac <LmhpPackagesRegistrationInit>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800df46:	f04f 33ff 	mov.w	r3, #4294967295
 800df4a:	e000      	b.n	800df4e <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800df4c:	2300      	movs	r3, #0
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	20000818 	.word	0x20000818
 800df5c:	2000081c 	.word	0x2000081c
 800df60:	0800e785 	.word	0x0800e785
 800df64:	0800e7f9 	.word	0x0800e7f9
 800df68:	0800e8c9 	.word	0x0800e8c9
 800df6c:	0800ea19 	.word	0x0800ea19
 800df70:	2000082c 	.word	0x2000082c
 800df74:	0800ef59 	.word	0x0800ef59
 800df78:	200007dc 	.word	0x200007dc
 800df7c:	0800ed6d 	.word	0x0800ed6d
 800df80:	0800eda5 	.word	0x0800eda5

0800df84 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b092      	sub	sp, #72	@ 0x48
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800df8c:	2218      	movs	r2, #24
 800df8e:	6879      	ldr	r1, [r7, #4]
 800df90:	488a      	ldr	r0, [pc, #552]	@ (800e1bc <LmHandlerConfigure+0x238>)
 800df92:	f00a ff90 	bl	8018eb6 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800df96:	4b8a      	ldr	r3, [pc, #552]	@ (800e1c0 <LmHandlerConfigure+0x23c>)
 800df98:	2200      	movs	r2, #0
 800df9a:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800df9c:	f7fe faa0 	bl	800c4e0 <LoraInfo_GetPtr>
 800dfa0:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800dfa2:	4b86      	ldr	r3, [pc, #536]	@ (800e1bc <LmHandlerConfigure+0x238>)
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	4093      	lsls	r3, r2
 800dfac:	461a      	mov	r2, r3
 800dfae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	4013      	ands	r3, r2
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d107      	bne.n	800dfc8 <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800dfb8:	4b82      	ldr	r3, [pc, #520]	@ (800e1c4 <LmHandlerConfigure+0x240>)
 800dfba:	2201      	movs	r2, #1
 800dfbc:	2100      	movs	r1, #0
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	f00f f870 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800dfc4:	bf00      	nop
 800dfc6:	e7fd      	b.n	800dfc4 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800dfc8:	4b7c      	ldr	r3, [pc, #496]	@ (800e1bc <LmHandlerConfigure+0x238>)
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	461a      	mov	r2, r3
 800dfce:	497e      	ldr	r1, [pc, #504]	@ (800e1c8 <LmHandlerConfigure+0x244>)
 800dfd0:	487e      	ldr	r0, [pc, #504]	@ (800e1cc <LmHandlerConfigure+0x248>)
 800dfd2:	f005 f80d 	bl	8012ff0 <LoRaMacInitialization>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d002      	beq.n	800dfe2 <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dfdc:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe0:	e0e8      	b.n	800e1b4 <LmHandlerConfigure+0x230>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800dfe2:	2327      	movs	r3, #39	@ 0x27
 800dfe4:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800dfe6:	f107 0318 	add.w	r3, r7, #24
 800dfea:	4618      	mov	r0, r3
 800dfec:	f005 fd8c 	bl	8013b08 <LoRaMacMibSetRequestConfirm>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d103      	bne.n	800dffe <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800dff6:	4b76      	ldr	r3, [pc, #472]	@ (800e1d0 <LmHandlerConfigure+0x24c>)
 800dff8:	2201      	movs	r2, #1
 800dffa:	701a      	strb	r2, [r3, #0]
 800dffc:	e02a      	b.n	800e054 <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800dffe:	2328      	movs	r3, #40	@ 0x28
 800e000:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800e002:	4b74      	ldr	r3, [pc, #464]	@ (800e1d4 <LmHandlerConfigure+0x250>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	691b      	ldr	r3, [r3, #16]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d00c      	beq.n	800e026 <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e00c:	f107 0318 	add.w	r3, r7, #24
 800e010:	4618      	mov	r0, r3
 800e012:	f005 fba1 	bl	8013758 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800e016:	4b6f      	ldr	r3, [pc, #444]	@ (800e1d4 <LmHandlerConfigure+0x250>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	691b      	ldr	r3, [r3, #16]
 800e01c:	69fa      	ldr	r2, [r7, #28]
 800e01e:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800e022:	4610      	mov	r0, r2
 800e024:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800e026:	2327      	movs	r3, #39	@ 0x27
 800e028:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e02a:	f107 0318 	add.w	r3, r7, #24
 800e02e:	4618      	mov	r0, r3
 800e030:	f005 fd6a 	bl	8013b08 <LoRaMacMibSetRequestConfirm>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d10c      	bne.n	800e054 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e03a:	2301      	movs	r3, #1
 800e03c:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e03e:	f107 0318 	add.w	r3, r7, #24
 800e042:	4618      	mov	r0, r3
 800e044:	f005 fb88 	bl	8013758 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e048:	7f3b      	ldrb	r3, [r7, #28]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d002      	beq.n	800e054 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800e04e:	4b60      	ldr	r3, [pc, #384]	@ (800e1d0 <LmHandlerConfigure+0x24c>)
 800e050:	2201      	movs	r2, #1
 800e052:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800e054:	4b5e      	ldr	r3, [pc, #376]	@ (800e1d0 <LmHandlerConfigure+0x24c>)
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d02e      	beq.n	800e0ba <LmHandlerConfigure+0x136>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800e05c:	4b5d      	ldr	r3, [pc, #372]	@ (800e1d4 <LmHandlerConfigure+0x250>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	69db      	ldr	r3, [r3, #28]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d004      	beq.n	800e070 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800e066:	4b5b      	ldr	r3, [pc, #364]	@ (800e1d4 <LmHandlerConfigure+0x250>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	69db      	ldr	r3, [r3, #28]
 800e06c:	2000      	movs	r0, #0
 800e06e:	4798      	blx	r3
        }

        //BZ #156695
        if(( LmHandlerJoinStatus() == LORAMAC_HANDLER_SET) && LoRaMacIsStopped())
 800e070:	f000 f98e 	bl	800e390 <LmHandlerJoinStatus>
 800e074:	4603      	mov	r3, r0
 800e076:	2b01      	cmp	r3, #1
 800e078:	d106      	bne.n	800e088 <LmHandlerConfigure+0x104>
 800e07a:	f002 fc99 	bl	80109b0 <LoRaMacIsStopped>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <LmHandlerConfigure+0x104>
        { 
            LoRaMacStart();
 800e084:	f005 fa6a 	bl	801355c <LoRaMacStart>
        }

        mibReq.Type = MIB_NVM_CTXS;
 800e088:	2327      	movs	r3, #39	@ 0x27
 800e08a:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800e08c:	f107 0318 	add.w	r3, r7, #24
 800e090:	4618      	mov	r0, r3
 800e092:	f005 fb61 	bl	8013758 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800e09a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e09c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800e0a0:	4b46      	ldr	r3, [pc, #280]	@ (800e1bc <LmHandlerConfigure+0x238>)
 800e0a2:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800e0a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0a6:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800e0aa:	4b44      	ldr	r3, [pc, #272]	@ (800e1bc <LmHandlerConfigure+0x238>)
 800e0ac:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800e0ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0b0:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800e0b4:	4b41      	ldr	r3, [pc, #260]	@ (800e1bc <LmHandlerConfigure+0x238>)
 800e0b6:	709a      	strb	r2, [r3, #2]
 800e0b8:	e008      	b.n	800e0cc <LmHandlerConfigure+0x148>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800e0ba:	2305      	movs	r3, #5
 800e0bc:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e0c2:	f107 0318 	add.w	r3, r7, #24
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f005 fd1e 	bl	8013b08 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800e0cc:	4b3e      	ldr	r3, [pc, #248]	@ (800e1c8 <LmHandlerConfigure+0x244>)
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	4a3d      	ldr	r2, [pc, #244]	@ (800e1c8 <LmHandlerConfigure+0x244>)
 800e0d2:	68d2      	ldr	r2, [r2, #12]
 800e0d4:	4611      	mov	r1, r2
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7ff fbc0 	bl	800d85c <SecureElementInitMcuID>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d002      	beq.n	800e0e8 <LmHandlerConfigure+0x164>
    {
        return LORAMAC_HANDLER_ERROR;
 800e0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e6:	e065      	b.n	800e1b4 <LmHandlerConfigure+0x230>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800e0e8:	2306      	movs	r3, #6
 800e0ea:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e0ec:	f107 0318 	add.w	r3, r7, #24
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f005 fb31 	bl	8013758 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	4a37      	ldr	r2, [pc, #220]	@ (800e1d8 <LmHandlerConfigure+0x254>)
 800e0fa:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e0fc:	f107 0318 	add.w	r3, r7, #24
 800e100:	4618      	mov	r0, r3
 800e102:	f005 fd01 	bl	8013b08 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800e106:	2302      	movs	r3, #2
 800e108:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800e10a:	4b33      	ldr	r3, [pc, #204]	@ (800e1d8 <LmHandlerConfigure+0x254>)
 800e10c:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e10e:	f107 0318 	add.w	r3, r7, #24
 800e112:	4618      	mov	r0, r3
 800e114:	f005 fb20 	bl	8013758 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800e118:	2303      	movs	r3, #3
 800e11a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800e11c:	4b2f      	ldr	r3, [pc, #188]	@ (800e1dc <LmHandlerConfigure+0x258>)
 800e11e:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e120:	f107 0318 	add.w	r3, r7, #24
 800e124:	4618      	mov	r0, r3
 800e126:	f005 fb17 	bl	8013758 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800e12a:	f7ff fc17 	bl	800d95c <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800e12e:	230f      	movs	r3, #15
 800e130:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800e132:	2301      	movs	r3, #1
 800e134:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e136:	f107 0318 	add.w	r3, r7, #24
 800e13a:	4618      	mov	r0, r3
 800e13c:	f005 fce4 	bl	8013b08 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800e140:	2310      	movs	r3, #16
 800e142:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800e144:	2300      	movs	r3, #0
 800e146:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e148:	f107 0318 	add.w	r3, r7, #24
 800e14c:	4618      	mov	r0, r3
 800e14e:	f005 fcdb 	bl	8013b08 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800e152:	2304      	movs	r3, #4
 800e154:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800e156:	4b19      	ldr	r3, [pc, #100]	@ (800e1bc <LmHandlerConfigure+0x238>)
 800e158:	789b      	ldrb	r3, [r3, #2]
 800e15a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e15c:	f107 0318 	add.w	r3, r7, #24
 800e160:	4618      	mov	r0, r3
 800e162:	f005 fcd1 	bl	8013b08 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800e166:	233a      	movs	r3, #58	@ 0x3a
 800e168:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800e16a:	4b14      	ldr	r3, [pc, #80]	@ (800e1bc <LmHandlerConfigure+0x238>)
 800e16c:	695b      	ldr	r3, [r3, #20]
 800e16e:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e170:	f107 0318 	add.w	r3, r7, #24
 800e174:	4618      	mov	r0, r3
 800e176:	f005 fcc7 	bl	8013b08 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e17a:	230f      	movs	r3, #15
 800e17c:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800e17e:	4b0f      	ldr	r3, [pc, #60]	@ (800e1bc <LmHandlerConfigure+0x238>)
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	f107 0210 	add.w	r2, r7, #16
 800e186:	4611      	mov	r1, r2
 800e188:	4618      	mov	r0, r3
 800e18a:	f008 fc69 	bl	8016a60 <RegionGetPhyParam>
 800e18e:	4603      	mov	r3, r0
 800e190:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2b00      	cmp	r3, #0
 800e196:	bf14      	ite	ne
 800e198:	2301      	movne	r3, #1
 800e19a:	2300      	moveq	r3, #0
 800e19c:	b2da      	uxtb	r2, r3
 800e19e:	4b07      	ldr	r3, [pc, #28]	@ (800e1bc <LmHandlerConfigure+0x238>)
 800e1a0:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800e1a2:	2014      	movs	r0, #20
 800e1a4:	f000 fad6 	bl	800e754 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800e1a8:	4b04      	ldr	r3, [pc, #16]	@ (800e1bc <LmHandlerConfigure+0x238>)
 800e1aa:	79db      	ldrb	r3, [r3, #7]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f006 fb89 	bl	80148c4 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800e1b2:	2300      	movs	r3, #0
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3748      	adds	r7, #72	@ 0x48
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	20000800 	.word	0x20000800
 800e1c0:	20000848 	.word	0x20000848
 800e1c4:	08020f34 	.word	0x08020f34
 800e1c8:	2000082c 	.word	0x2000082c
 800e1cc:	2000081c 	.word	0x2000081c
 800e1d0:	2000093e 	.word	0x2000093e
 800e1d4:	20000818 	.word	0x20000818
 800e1d8:	200007c4 	.word	0x200007c4
 800e1dc:	200007cc 	.word	0x200007cc

0800e1e0 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800e1e6:	f002 fe61 	bl	8010eac <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800e1ea:	f000 fd8b 	bl	800ed04 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800e1ee:	f000 fd5f 	bl	800ecb0 <LmHandlerPackageIsTxPending>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d117      	bne.n	800e228 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800e1f8:	4b0d      	ldr	r3, [pc, #52]	@ (800e230 <LmHandlerProcess+0x50>)
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d014      	beq.n	800e22a <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800e200:	2300      	movs	r3, #0
 800e202:	703b      	strb	r3, [r7, #0]
 800e204:	2300      	movs	r3, #0
 800e206:	707b      	strb	r3, [r7, #1]
 800e208:	2300      	movs	r3, #0
 800e20a:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800e20c:	4b09      	ldr	r3, [pc, #36]	@ (800e234 <LmHandlerProcess+0x54>)
 800e20e:	78d9      	ldrb	r1, [r3, #3]
 800e210:	463b      	mov	r3, r7
 800e212:	2200      	movs	r2, #0
 800e214:	4618      	mov	r0, r3
 800e216:	f000 f8d7 	bl	800e3c8 <LmHandlerSend>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d104      	bne.n	800e22a <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800e220:	4b03      	ldr	r3, [pc, #12]	@ (800e230 <LmHandlerProcess+0x50>)
 800e222:	2200      	movs	r2, #0
 800e224:	701a      	strb	r2, [r3, #0]
 800e226:	e000      	b.n	800e22a <LmHandlerProcess+0x4a>
        return;
 800e228:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	20000848 	.word	0x20000848
 800e234:	20000800 	.word	0x20000800

0800e238 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800e238:	b480      	push	{r7}
 800e23a:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800e23c:	4b02      	ldr	r3, [pc, #8]	@ (800e248 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800e23e:	681b      	ldr	r3, [r3, #0]
}
 800e240:	4618      	mov	r0, r3
 800e242:	46bd      	mov	sp, r7
 800e244:	bc80      	pop	{r7}
 800e246:	4770      	bx	lr
 800e248:	20000844 	.word	0x20000844

0800e24c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b092      	sub	sp, #72	@ 0x48
 800e250:	af00      	add	r7, sp, #0
 800e252:	4603      	mov	r3, r0
 800e254:	460a      	mov	r2, r1
 800e256:	71fb      	strb	r3, [r7, #7]
 800e258:	4613      	mov	r3, r2
 800e25a:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800e25c:	2301      	movs	r3, #1
 800e25e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800e262:	4b46      	ldr	r3, [pc, #280]	@ (800e37c <LmHandlerJoin+0x130>)
 800e264:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800e26e:	4b43      	ldr	r3, [pc, #268]	@ (800e37c <LmHandlerJoin+0x130>)
 800e270:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e274:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800e278:	79fb      	ldrb	r3, [r7, #7]
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d10b      	bne.n	800e296 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e27e:	2302      	movs	r3, #2
 800e280:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800e284:	4b3e      	ldr	r3, [pc, #248]	@ (800e380 <LmHandlerJoin+0x134>)
 800e286:	2202      	movs	r2, #2
 800e288:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800e28a:	4a3d      	ldr	r2, [pc, #244]	@ (800e380 <LmHandlerJoin+0x134>)
 800e28c:	79bb      	ldrb	r3, [r7, #6]
 800e28e:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800e290:	f005 f964 	bl	801355c <LoRaMacStart>
 800e294:	e05c      	b.n	800e350 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e296:	2301      	movs	r3, #1
 800e298:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800e29c:	4b38      	ldr	r3, [pc, #224]	@ (800e380 <LmHandlerJoin+0x134>)
 800e29e:	2201      	movs	r2, #1
 800e2a0:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800e2a2:	4b36      	ldr	r3, [pc, #216]	@ (800e37c <LmHandlerJoin+0x130>)
 800e2a4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e2a8:	4b35      	ldr	r3, [pc, #212]	@ (800e380 <LmHandlerJoin+0x134>)
 800e2aa:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800e2ac:	4b33      	ldr	r3, [pc, #204]	@ (800e37c <LmHandlerJoin+0x130>)
 800e2ae:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800e2b2:	4b33      	ldr	r3, [pc, #204]	@ (800e380 <LmHandlerJoin+0x134>)
 800e2b4:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e2b6:	4b32      	ldr	r3, [pc, #200]	@ (800e380 <LmHandlerJoin+0x134>)
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800e2bc:	4a30      	ldr	r2, [pc, #192]	@ (800e380 <LmHandlerJoin+0x134>)
 800e2be:	79bb      	ldrb	r3, [r7, #6]
 800e2c0:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800e2c2:	4b30      	ldr	r3, [pc, #192]	@ (800e384 <LmHandlerJoin+0x138>)
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	f083 0301 	eor.w	r3, r3, #1
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d034      	beq.n	800e33a <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800e2d0:	231f      	movs	r3, #31
 800e2d2:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800e2d4:	4b29      	ldr	r3, [pc, #164]	@ (800e37c <LmHandlerJoin+0x130>)
 800e2d6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e2da:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e2dc:	f107 030c 	add.w	r3, r7, #12
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f005 fc11 	bl	8013b08 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800e2e6:	2320      	movs	r3, #32
 800e2e8:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800e2ea:	4b24      	ldr	r3, [pc, #144]	@ (800e37c <LmHandlerJoin+0x130>)
 800e2ec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e2f0:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e2f2:	f107 030c 	add.w	r3, r7, #12
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f005 fc06 	bl	8013b08 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800e2fc:	2322      	movs	r3, #34	@ 0x22
 800e2fe:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800e300:	4b1e      	ldr	r3, [pc, #120]	@ (800e37c <LmHandlerJoin+0x130>)
 800e302:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e306:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e308:	f107 030c 	add.w	r3, r7, #12
 800e30c:	4618      	mov	r0, r3
 800e30e:	f005 fbfb 	bl	8013b08 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800e312:	2321      	movs	r3, #33	@ 0x21
 800e314:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800e316:	4b19      	ldr	r3, [pc, #100]	@ (800e37c <LmHandlerJoin+0x130>)
 800e318:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e31c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e31e:	f107 030c 	add.w	r3, r7, #12
 800e322:	4618      	mov	r0, r3
 800e324:	f005 fbf0 	bl	8013b08 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e328:	2329      	movs	r3, #41	@ 0x29
 800e32a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e32c:	4b16      	ldr	r3, [pc, #88]	@ (800e388 <LmHandlerJoin+0x13c>)
 800e32e:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e330:	f107 030c 	add.w	r3, r7, #12
 800e334:	4618      	mov	r0, r3
 800e336:	f005 fbe7 	bl	8013b08 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800e33a:	f005 f90f 	bl	801355c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e33e:	2301      	movs	r3, #1
 800e340:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e342:	2301      	movs	r3, #1
 800e344:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e346:	f107 030c 	add.w	r3, r7, #12
 800e34a:	4618      	mov	r0, r3
 800e34c:	f005 fbdc 	bl	8013b08 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800e350:	4b0c      	ldr	r3, [pc, #48]	@ (800e384 <LmHandlerJoin+0x138>)
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	f083 0301 	eor.w	r3, r3, #1
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d102      	bne.n	800e364 <LmHandlerJoin+0x118>
 800e35e:	79bb      	ldrb	r3, [r7, #6]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d004      	beq.n	800e36e <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800e364:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e368:	4618      	mov	r0, r3
 800e36a:	f005 ffcf 	bl	801430c <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e36e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e370:	4a06      	ldr	r2, [pc, #24]	@ (800e38c <LmHandlerJoin+0x140>)
 800e372:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800e374:	bf00      	nop
 800e376:	3748      	adds	r7, #72	@ 0x48
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	20000800 	.word	0x20000800
 800e380:	20000094 	.word	0x20000094
 800e384:	2000093e 	.word	0x2000093e
 800e388:	01000400 	.word	0x01000400
 800e38c:	20000844 	.word	0x20000844

0800e390 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b08c      	sub	sp, #48	@ 0x30
 800e394:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e396:	2301      	movs	r3, #1
 800e398:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800e39a:	1d3b      	adds	r3, r7, #4
 800e39c:	4618      	mov	r0, r3
 800e39e:	f005 f9db 	bl	8013758 <LoRaMacMibGetRequestConfirm>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800e3a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d106      	bne.n	800e3be <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e3b0:	7a3b      	ldrb	r3, [r7, #8]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d101      	bne.n	800e3ba <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	e002      	b.n	800e3c0 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e000      	b.n	800e3c0 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800e3be:	2300      	movs	r3, #0
    }
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3730      	adds	r7, #48	@ 0x30
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b08a      	sub	sp, #40	@ 0x28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	70fb      	strb	r3, [r7, #3]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e3d8:	23ff      	movs	r3, #255	@ 0xff
 800e3da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800e3de:	f002 fabf 	bl	8010960 <LoRaMacIsBusy>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d002      	beq.n	800e3ee <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e3e8:	f06f 0301 	mvn.w	r3, #1
 800e3ec:	e0ab      	b.n	800e546 <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800e3ee:	f002 fadf 	bl	80109b0 <LoRaMacIsStopped>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d002      	beq.n	800e3fe <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e3f8:	f06f 0302 	mvn.w	r3, #2
 800e3fc:	e0a3      	b.n	800e546 <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800e3fe:	f7ff ffc7 	bl	800e390 <LmHandlerJoinStatus>
 800e402:	4603      	mov	r3, r0
 800e404:	2b01      	cmp	r3, #1
 800e406:	d00a      	beq.n	800e41e <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800e408:	4b51      	ldr	r3, [pc, #324]	@ (800e550 <LmHandlerSend+0x188>)
 800e40a:	79db      	ldrb	r3, [r3, #7]
 800e40c:	4a50      	ldr	r2, [pc, #320]	@ (800e550 <LmHandlerSend+0x188>)
 800e40e:	7a12      	ldrb	r2, [r2, #8]
 800e410:	4611      	mov	r1, r2
 800e412:	4618      	mov	r0, r3
 800e414:	f7ff ff1a 	bl	800e24c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e418:	f06f 0302 	mvn.w	r3, #2
 800e41c:	e093      	b.n	800e546 <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800e41e:	4a4d      	ldr	r2, [pc, #308]	@ (800e554 <LmHandlerSend+0x18c>)
 800e420:	78fb      	ldrb	r3, [r7, #3]
 800e422:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800e424:	78fb      	ldrb	r3, [r7, #3]
 800e426:	2b00      	cmp	r3, #0
 800e428:	bf14      	ite	ne
 800e42a:	2301      	movne	r3, #1
 800e42c:	2300      	moveq	r3, #0
 800e42e:	b2db      	uxtb	r3, r3
 800e430:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e432:	4b49      	ldr	r3, [pc, #292]	@ (800e558 <LmHandlerSend+0x190>)
 800e434:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e438:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	785b      	ldrb	r3, [r3, #1]
 800e43e:	f107 020c 	add.w	r2, r7, #12
 800e442:	4611      	mov	r1, r2
 800e444:	4618      	mov	r0, r3
 800e446:	f005 f8f7 	bl	8013638 <LoRaMacQueryTxPossible>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d009      	beq.n	800e464 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800e450:	2300      	movs	r3, #0
 800e452:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e454:	2300      	movs	r3, #0
 800e456:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e458:	2300      	movs	r3, #0
 800e45a:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800e45c:	23f9      	movs	r3, #249	@ 0xf9
 800e45e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e462:	e008      	b.n	800e476 <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	785b      	ldrb	r3, [r3, #1]
 800e46e:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800e476:	4b37      	ldr	r3, [pc, #220]	@ (800e554 <LmHandlerSend+0x18c>)
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	3310      	adds	r3, #16
 800e47c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e480:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e484:	4b34      	ldr	r3, [pc, #208]	@ (800e558 <LmHandlerSend+0x190>)
 800e486:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e48a:	4b32      	ldr	r3, [pc, #200]	@ (800e554 <LmHandlerSend+0x18c>)
 800e48c:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800e48e:	78ba      	ldrb	r2, [r7, #2]
 800e490:	f107 0310 	add.w	r3, r7, #16
 800e494:	4611      	mov	r1, r2
 800e496:	4618      	mov	r0, r3
 800e498:	f006 f8dc 	bl	8014654 <LoRaMacMcpsRequest>
 800e49c:	4603      	mov	r3, r0
 800e49e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e4a2:	6a3b      	ldr	r3, [r7, #32]
 800e4a4:	4a2d      	ldr	r2, [pc, #180]	@ (800e55c <LmHandlerSend+0x194>)
 800e4a6:	6013      	str	r3, [r2, #0]

    switch( status )
 800e4a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e4ac:	2b11      	cmp	r3, #17
 800e4ae:	d843      	bhi.n	800e538 <LmHandlerSend+0x170>
 800e4b0:	a201      	add	r2, pc, #4	@ (adr r2, 800e4b8 <LmHandlerSend+0xf0>)
 800e4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b6:	bf00      	nop
 800e4b8:	0800e501 	.word	0x0800e501
 800e4bc:	0800e519 	.word	0x0800e519
 800e4c0:	0800e539 	.word	0x0800e539
 800e4c4:	0800e539 	.word	0x0800e539
 800e4c8:	0800e539 	.word	0x0800e539
 800e4cc:	0800e539 	.word	0x0800e539
 800e4d0:	0800e539 	.word	0x0800e539
 800e4d4:	0800e521 	.word	0x0800e521
 800e4d8:	0800e539 	.word	0x0800e539
 800e4dc:	0800e539 	.word	0x0800e539
 800e4e0:	0800e539 	.word	0x0800e539
 800e4e4:	0800e531 	.word	0x0800e531
 800e4e8:	0800e539 	.word	0x0800e539
 800e4ec:	0800e539 	.word	0x0800e539
 800e4f0:	0800e519 	.word	0x0800e519
 800e4f4:	0800e519 	.word	0x0800e519
 800e4f8:	0800e519 	.word	0x0800e519
 800e4fc:	0800e529 	.word	0x0800e529
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800e500:	4b17      	ldr	r3, [pc, #92]	@ (800e560 <LmHandlerSend+0x198>)
 800e502:	2200      	movs	r2, #0
 800e504:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800e506:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e50a:	f113 0f07 	cmn.w	r3, #7
 800e50e:	d017      	beq.n	800e540 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e510:	2300      	movs	r3, #0
 800e512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800e516:	e013      	b.n	800e540 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e518:	23fe      	movs	r3, #254	@ 0xfe
 800e51a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e51e:	e010      	b.n	800e542 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e520:	23fd      	movs	r3, #253	@ 0xfd
 800e522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e526:	e00c      	b.n	800e542 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e528:	23fb      	movs	r3, #251	@ 0xfb
 800e52a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e52e:	e008      	b.n	800e542 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e530:	23fa      	movs	r3, #250	@ 0xfa
 800e532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e536:	e004      	b.n	800e542 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e538:	23ff      	movs	r3, #255	@ 0xff
 800e53a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e53e:	e000      	b.n	800e542 <LmHandlerSend+0x17a>
            break;
 800e540:	bf00      	nop
    }

    return lmhStatus;
 800e542:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e546:	4618      	mov	r0, r3
 800e548:	3728      	adds	r7, #40	@ 0x28
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	20000094 	.word	0x20000094
 800e554:	200000a0 	.word	0x200000a0
 800e558:	20000800 	.word	0x20000800
 800e55c:	20000844 	.word	0x20000844
 800e560:	20000848 	.word	0x20000848

0800e564 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800e56a:	2309      	movs	r3, #9
 800e56c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e56e:	463b      	mov	r3, r7
 800e570:	4618      	mov	r0, r3
 800e572:	f005 fecb 	bl	801430c <LoRaMacMlmeRequest>
 800e576:	4603      	mov	r3, r0
 800e578:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	4a06      	ldr	r2, [pc, #24]	@ (800e598 <LmHandlerDeviceTimeReq+0x34>)
 800e57e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e580:	7dfb      	ldrb	r3, [r7, #23]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d101      	bne.n	800e58a <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e586:	2300      	movs	r3, #0
 800e588:	e001      	b.n	800e58e <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e58a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3718      	adds	r7, #24
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	20000844 	.word	0x20000844

0800e59c <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800e5a6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	370c      	adds	r7, #12
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bc80      	pop	{r7}
 800e5b2:	4770      	bx	lr

0800e5b4 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b08e      	sub	sp, #56	@ 0x38
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800e5c4:	f002 f9cc 	bl	8010960 <LoRaMacIsBusy>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d002      	beq.n	800e5d4 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e5ce:	f06f 0301 	mvn.w	r3, #1
 800e5d2:	e071      	b.n	800e6b8 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800e5d4:	f7ff fedc 	bl	800e390 <LmHandlerJoinStatus>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d002      	beq.n	800e5e4 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e5de:	f06f 0302 	mvn.w	r3, #2
 800e5e2:	e069      	b.n	800e6b8 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e5e8:	f107 030c 	add.w	r3, r7, #12
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f005 f8b3 	bl	8013758 <LoRaMacMibGetRequestConfirm>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e5f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5fc:	e05c      	b.n	800e6b8 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800e5fe:	7c3b      	ldrb	r3, [r7, #16]
 800e600:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800e604:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e608:	79fb      	ldrb	r3, [r7, #7]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d052      	beq.n	800e6b4 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800e60e:	79fb      	ldrb	r3, [r7, #7]
 800e610:	2b02      	cmp	r3, #2
 800e612:	d028      	beq.n	800e666 <LmHandlerRequestClass+0xb2>
 800e614:	2b02      	cmp	r3, #2
 800e616:	dc48      	bgt.n	800e6aa <LmHandlerRequestClass+0xf6>
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d002      	beq.n	800e622 <LmHandlerRequestClass+0x6e>
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d01e      	beq.n	800e65e <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800e620:	e043      	b.n	800e6aa <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800e622:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e626:	2b00      	cmp	r3, #0
 800e628:	d041      	beq.n	800e6ae <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800e62a:	79fb      	ldrb	r3, [r7, #7]
 800e62c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e62e:	f107 030c 	add.w	r3, r7, #12
 800e632:	4618      	mov	r0, r3
 800e634:	f005 fa68 	bl	8013b08 <LoRaMacMibSetRequestConfirm>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d10b      	bne.n	800e656 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e63e:	4b20      	ldr	r3, [pc, #128]	@ (800e6c0 <LmHandlerRequestClass+0x10c>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e644:	2b00      	cmp	r3, #0
 800e646:	d032      	beq.n	800e6ae <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e648:	4b1d      	ldr	r3, [pc, #116]	@ (800e6c0 <LmHandlerRequestClass+0x10c>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e64e:	79fa      	ldrb	r2, [r7, #7]
 800e650:	4610      	mov	r0, r2
 800e652:	4798      	blx	r3
                break;
 800e654:	e02b      	b.n	800e6ae <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e656:	23ff      	movs	r3, #255	@ 0xff
 800e658:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e65c:	e027      	b.n	800e6ae <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e65e:	23ff      	movs	r3, #255	@ 0xff
 800e660:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e664:	e026      	b.n	800e6b4 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800e666:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d003      	beq.n	800e676 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e66e:	23ff      	movs	r3, #255	@ 0xff
 800e670:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e674:	e01d      	b.n	800e6b2 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800e676:	79fb      	ldrb	r3, [r7, #7]
 800e678:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e67a:	f107 030c 	add.w	r3, r7, #12
 800e67e:	4618      	mov	r0, r3
 800e680:	f005 fa42 	bl	8013b08 <LoRaMacMibSetRequestConfirm>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d10b      	bne.n	800e6a2 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e68a:	4b0d      	ldr	r3, [pc, #52]	@ (800e6c0 <LmHandlerRequestClass+0x10c>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00e      	beq.n	800e6b2 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e694:	4b0a      	ldr	r3, [pc, #40]	@ (800e6c0 <LmHandlerRequestClass+0x10c>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e69a:	79fa      	ldrb	r2, [r7, #7]
 800e69c:	4610      	mov	r0, r2
 800e69e:	4798      	blx	r3
                break;
 800e6a0:	e007      	b.n	800e6b2 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e6a2:	23ff      	movs	r3, #255	@ 0xff
 800e6a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e6a8:	e003      	b.n	800e6b2 <LmHandlerRequestClass+0xfe>
                break;
 800e6aa:	bf00      	nop
 800e6ac:	e002      	b.n	800e6b4 <LmHandlerRequestClass+0x100>
                break;
 800e6ae:	bf00      	nop
 800e6b0:	e000      	b.n	800e6b4 <LmHandlerRequestClass+0x100>
                break;
 800e6b2:	bf00      	nop
        }
    }
    return errorStatus;
 800e6b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3738      	adds	r7, #56	@ 0x38
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	20000818 	.word	0x20000818

0800e6c4 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b08c      	sub	sp, #48	@ 0x30
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d102      	bne.n	800e6d8 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d6:	e010      	b.n	800e6fa <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e6dc:	f107 0308 	add.w	r3, r7, #8
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f005 f839 	bl	8013758 <LoRaMacMibGetRequestConfirm>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d002      	beq.n	800e6f2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e6f0:	e003      	b.n	800e6fa <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800e6f2:	7b3a      	ldrb	r2, [r7, #12]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800e6f8:	2300      	movs	r3, #0
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3730      	adds	r7, #48	@ 0x30
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
	...

0800e704 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b08c      	sub	sp, #48	@ 0x30
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d102      	bne.n	800e718 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e712:	f04f 33ff 	mov.w	r3, #4294967295
 800e716:	e016      	b.n	800e746 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800e718:	2320      	movs	r3, #32
 800e71a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800e71c:	f107 0308 	add.w	r3, r7, #8
 800e720:	4618      	mov	r0, r3
 800e722:	f005 f819 	bl	8013758 <LoRaMacMibGetRequestConfirm>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d002      	beq.n	800e732 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e72c:	f04f 33ff 	mov.w	r3, #4294967295
 800e730:	e009      	b.n	800e746 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800e732:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f993 2000 	ldrsb.w	r2, [r3]
 800e740:	4b03      	ldr	r3, [pc, #12]	@ (800e750 <LmHandlerGetTxDatarate+0x4c>)
 800e742:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800e744:	2300      	movs	r3, #0
}
 800e746:	4618      	mov	r0, r3
 800e748:	3730      	adds	r7, #48	@ 0x30
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	20000800 	.word	0x20000800

0800e754 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b08c      	sub	sp, #48	@ 0x30
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e75c:	2323      	movs	r3, #35	@ 0x23
 800e75e:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e764:	f107 0308 	add.w	r3, r7, #8
 800e768:	4618      	mov	r0, r3
 800e76a:	f005 f9cd 	bl	8013b08 <LoRaMacMibSetRequestConfirm>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	d002      	beq.n	800e77a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800e774:	f04f 33ff 	mov.w	r3, #4294967295
 800e778:	e000      	b.n	800e77c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3730      	adds	r7, #48	@ 0x30
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800e78c:	4b18      	ldr	r3, [pc, #96]	@ (800e7f0 <McpsConfirm+0x6c>)
 800e78e:	2201      	movs	r2, #1
 800e790:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	785a      	ldrb	r2, [r3, #1]
 800e796:	4b16      	ldr	r3, [pc, #88]	@ (800e7f0 <McpsConfirm+0x6c>)
 800e798:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	789b      	ldrb	r3, [r3, #2]
 800e79e:	b25a      	sxtb	r2, r3
 800e7a0:	4b13      	ldr	r3, [pc, #76]	@ (800e7f0 <McpsConfirm+0x6c>)
 800e7a2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	4a11      	ldr	r2, [pc, #68]	@ (800e7f0 <McpsConfirm+0x6c>)
 800e7aa:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800e7b2:	4b0f      	ldr	r3, [pc, #60]	@ (800e7f0 <McpsConfirm+0x6c>)
 800e7b4:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	691b      	ldr	r3, [r3, #16]
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	4b0c      	ldr	r3, [pc, #48]	@ (800e7f0 <McpsConfirm+0x6c>)
 800e7be:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	791b      	ldrb	r3, [r3, #4]
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f0 <McpsConfirm+0x6c>)
 800e7c8:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800e7ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f4 <McpsConfirm+0x70>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d004      	beq.n	800e7de <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800e7d4:	4b07      	ldr	r3, [pc, #28]	@ (800e7f4 <McpsConfirm+0x70>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7da:	4805      	ldr	r0, [pc, #20]	@ (800e7f0 <McpsConfirm+0x6c>)
 800e7dc:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800e7de:	6879      	ldr	r1, [r7, #4]
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	f000 f9e9 	bl	800ebb8 <LmHandlerPackagesNotify>
}
 800e7e6:	bf00      	nop
 800e7e8:	3708      	adds	r7, #8
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	200000a0 	.word	0x200000a0
 800e7f4:	20000818 	.word	0x20000818

0800e7f8 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b086      	sub	sp, #24
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800e802:	2300      	movs	r3, #0
 800e804:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800e806:	4b2d      	ldr	r3, [pc, #180]	@ (800e8bc <McpsIndication+0xc4>)
 800e808:	2201      	movs	r2, #1
 800e80a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	785a      	ldrb	r2, [r3, #1]
 800e810:	4b2a      	ldr	r3, [pc, #168]	@ (800e8bc <McpsIndication+0xc4>)
 800e812:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800e814:	4b29      	ldr	r3, [pc, #164]	@ (800e8bc <McpsIndication+0xc4>)
 800e816:	785b      	ldrb	r3, [r3, #1]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d14b      	bne.n	800e8b4 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	791b      	ldrb	r3, [r3, #4]
 800e820:	b25a      	sxtb	r2, r3
 800e822:	4b26      	ldr	r3, [pc, #152]	@ (800e8bc <McpsIndication+0xc4>)
 800e824:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e82c:	b25a      	sxtb	r2, r3
 800e82e:	4b23      	ldr	r3, [pc, #140]	@ (800e8bc <McpsIndication+0xc4>)
 800e830:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e838:	4b20      	ldr	r3, [pc, #128]	@ (800e8bc <McpsIndication+0xc4>)
 800e83a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	78da      	ldrb	r2, [r3, #3]
 800e840:	4b1e      	ldr	r3, [pc, #120]	@ (800e8bc <McpsIndication+0xc4>)
 800e842:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	691b      	ldr	r3, [r3, #16]
 800e848:	4a1c      	ldr	r2, [pc, #112]	@ (800e8bc <McpsIndication+0xc4>)
 800e84a:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	78db      	ldrb	r3, [r3, #3]
 800e850:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	7b1b      	ldrb	r3, [r3, #12]
 800e856:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	689b      	ldr	r3, [r3, #8]
 800e85c:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800e85e:	4b18      	ldr	r3, [pc, #96]	@ (800e8c0 <McpsIndication+0xc8>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e864:	2b00      	cmp	r3, #0
 800e866:	d007      	beq.n	800e878 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800e868:	4b15      	ldr	r3, [pc, #84]	@ (800e8c0 <McpsIndication+0xc8>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e86e:	f107 0210 	add.w	r2, r7, #16
 800e872:	4912      	ldr	r1, [pc, #72]	@ (800e8bc <McpsIndication+0xc4>)
 800e874:	4610      	mov	r0, r2
 800e876:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800e878:	4b11      	ldr	r3, [pc, #68]	@ (800e8c0 <McpsIndication+0xc8>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d007      	beq.n	800e892 <McpsIndication+0x9a>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	7e1b      	ldrb	r3, [r3, #24]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d003      	beq.n	800e892 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800e88a:	4b0d      	ldr	r3, [pc, #52]	@ (800e8c0 <McpsIndication+0xc8>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e890:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800e892:	6879      	ldr	r1, [r7, #4]
 800e894:	2001      	movs	r0, #1
 800e896:	f000 f98f 	bl	800ebb8 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800e89a:	f107 030f 	add.w	r3, r7, #15
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7ff ff10 	bl	800e6c4 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	795b      	ldrb	r3, [r3, #5]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d004      	beq.n	800e8b6 <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800e8ac:	4b05      	ldr	r3, [pc, #20]	@ (800e8c4 <McpsIndication+0xcc>)
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	701a      	strb	r2, [r3, #0]
 800e8b2:	e000      	b.n	800e8b6 <McpsIndication+0xbe>
        return;
 800e8b4:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800e8b6:	3718      	adds	r7, #24
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	200000bc 	.word	0x200000bc
 800e8c0:	20000818 	.word	0x20000818
 800e8c4:	20000848 	.word	0x20000848

0800e8c8 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b08c      	sub	sp, #48	@ 0x30
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800e8d0:	4b49      	ldr	r3, [pc, #292]	@ (800e9f8 <MlmeConfirm+0x130>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	785a      	ldrb	r2, [r3, #1]
 800e8da:	4b47      	ldr	r3, [pc, #284]	@ (800e9f8 <MlmeConfirm+0x130>)
 800e8dc:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800e8de:	4b47      	ldr	r3, [pc, #284]	@ (800e9fc <MlmeConfirm+0x134>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d004      	beq.n	800e8f2 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800e8e8:	4b44      	ldr	r3, [pc, #272]	@ (800e9fc <MlmeConfirm+0x134>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8ee:	4842      	ldr	r0, [pc, #264]	@ (800e9f8 <MlmeConfirm+0x130>)
 800e8f0:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800e8f2:	6879      	ldr	r1, [r7, #4]
 800e8f4:	2002      	movs	r0, #2
 800e8f6:	f000 f95f 	bl	800ebb8 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	3b01      	subs	r3, #1
 800e900:	2b0b      	cmp	r3, #11
 800e902:	d872      	bhi.n	800e9ea <MlmeConfirm+0x122>
 800e904:	a201      	add	r2, pc, #4	@ (adr r2, 800e90c <MlmeConfirm+0x44>)
 800e906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e90a:	bf00      	nop
 800e90c:	0800e93d 	.word	0x0800e93d
 800e910:	0800e9eb 	.word	0x0800e9eb
 800e914:	0800e9eb 	.word	0x0800e9eb
 800e918:	0800e9eb 	.word	0x0800e9eb
 800e91c:	0800e9b9 	.word	0x0800e9b9
 800e920:	0800e9eb 	.word	0x0800e9eb
 800e924:	0800e9eb 	.word	0x0800e9eb
 800e928:	0800e9eb 	.word	0x0800e9eb
 800e92c:	0800e9eb 	.word	0x0800e9eb
 800e930:	0800e9eb 	.word	0x0800e9eb
 800e934:	0800e9d1 	.word	0x0800e9d1
 800e938:	0800e9eb 	.word	0x0800e9eb
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800e93c:	2306      	movs	r3, #6
 800e93e:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800e940:	f107 0308 	add.w	r3, r7, #8
 800e944:	4618      	mov	r0, r3
 800e946:	f004 ff07 	bl	8013758 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800e94a:	4b2d      	ldr	r3, [pc, #180]	@ (800ea00 <MlmeConfirm+0x138>)
 800e94c:	79db      	ldrb	r3, [r3, #7]
 800e94e:	68fa      	ldr	r2, [r7, #12]
 800e950:	4611      	mov	r1, r2
 800e952:	4618      	mov	r0, r3
 800e954:	f7ff fa6c 	bl	800de30 <SecureElementSetDevAddr>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d102      	bne.n	800e964 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	4a28      	ldr	r2, [pc, #160]	@ (800ea04 <MlmeConfirm+0x13c>)
 800e962:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800e964:	4828      	ldr	r0, [pc, #160]	@ (800ea08 <MlmeConfirm+0x140>)
 800e966:	f7ff fecd 	bl	800e704 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800e96a:	4828      	ldr	r0, [pc, #160]	@ (800ea0c <MlmeConfirm+0x144>)
 800e96c:	f000 fa74 	bl	800ee58 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e970:	4b21      	ldr	r3, [pc, #132]	@ (800e9f8 <MlmeConfirm+0x130>)
 800e972:	785b      	ldrb	r3, [r3, #1]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d108      	bne.n	800e98a <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e978:	4b21      	ldr	r3, [pc, #132]	@ (800ea00 <MlmeConfirm+0x138>)
 800e97a:	2200      	movs	r2, #0
 800e97c:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800e97e:	4b24      	ldr	r3, [pc, #144]	@ (800ea10 <MlmeConfirm+0x148>)
 800e980:	785b      	ldrb	r3, [r3, #1]
 800e982:	4618      	mov	r0, r3
 800e984:	f7ff fe16 	bl	800e5b4 <LmHandlerRequestClass>
 800e988:	e002      	b.n	800e990 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e98a:	4b1d      	ldr	r3, [pc, #116]	@ (800ea00 <MlmeConfirm+0x138>)
 800e98c:	22ff      	movs	r2, #255	@ 0xff
 800e98e:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800e990:	4b1a      	ldr	r3, [pc, #104]	@ (800e9fc <MlmeConfirm+0x134>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e996:	2b00      	cmp	r3, #0
 800e998:	d004      	beq.n	800e9a4 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e99a:	4b18      	ldr	r3, [pc, #96]	@ (800e9fc <MlmeConfirm+0x134>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9a0:	4817      	ldr	r0, [pc, #92]	@ (800ea00 <MlmeConfirm+0x138>)
 800e9a2:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e9a4:	4b14      	ldr	r3, [pc, #80]	@ (800e9f8 <MlmeConfirm+0x130>)
 800e9a6:	785b      	ldrb	r3, [r3, #1]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d120      	bne.n	800e9ee <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800e9ac:	4b14      	ldr	r3, [pc, #80]	@ (800ea00 <MlmeConfirm+0x138>)
 800e9ae:	79db      	ldrb	r3, [r3, #7]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7fe ffe7 	bl	800d984 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800e9b6:	e01a      	b.n	800e9ee <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800e9b8:	4b16      	ldr	r3, [pc, #88]	@ (800ea14 <MlmeConfirm+0x14c>)
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	7a1a      	ldrb	r2, [r3, #8]
 800e9c2:	4b14      	ldr	r3, [pc, #80]	@ (800ea14 <MlmeConfirm+0x14c>)
 800e9c4:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	7a5a      	ldrb	r2, [r3, #9]
 800e9ca:	4b12      	ldr	r3, [pc, #72]	@ (800ea14 <MlmeConfirm+0x14c>)
 800e9cc:	74da      	strb	r2, [r3, #19]
            }
            break;
 800e9ce:	e00f      	b.n	800e9f0 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	785b      	ldrb	r3, [r3, #1]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d105      	bne.n	800e9e4 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800e9d8:	4b0d      	ldr	r3, [pc, #52]	@ (800ea10 <MlmeConfirm+0x148>)
 800e9da:	7c1b      	ldrb	r3, [r3, #16]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7ff fddd 	bl	800e59c <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800e9e2:	e005      	b.n	800e9f0 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800e9e4:	f7ff fdbe 	bl	800e564 <LmHandlerDeviceTimeReq>
            break;
 800e9e8:	e002      	b.n	800e9f0 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e9ea:	bf00      	nop
 800e9ec:	e000      	b.n	800e9f0 <MlmeConfirm+0x128>
            break;
 800e9ee:	bf00      	nop
    }
}
 800e9f0:	bf00      	nop
 800e9f2:	3730      	adds	r7, #48	@ 0x30
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	200000a0 	.word	0x200000a0
 800e9fc:	20000818 	.word	0x20000818
 800ea00:	20000094 	.word	0x20000094
 800ea04:	200007c4 	.word	0x200007c4
 800ea08:	20000098 	.word	0x20000098
 800ea0c:	20000099 	.word	0x20000099
 800ea10:	20000800 	.word	0x20000800
 800ea14:	200000bc 	.word	0x200000bc

0800ea18 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ea22:	4b20      	ldr	r3, [pc, #128]	@ (800eaa4 <MlmeIndication+0x8c>)
 800ea24:	2200      	movs	r2, #0
 800ea26:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	785a      	ldrb	r2, [r3, #1]
 800ea2c:	4b1d      	ldr	r3, [pc, #116]	@ (800eaa4 <MlmeIndication+0x8c>)
 800ea2e:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	789b      	ldrb	r3, [r3, #2]
 800ea34:	b25a      	sxtb	r2, r3
 800ea36:	4b1b      	ldr	r3, [pc, #108]	@ (800eaa4 <MlmeIndication+0x8c>)
 800ea38:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea40:	b25a      	sxtb	r2, r3
 800ea42:	4b18      	ldr	r3, [pc, #96]	@ (800eaa4 <MlmeIndication+0x8c>)
 800ea44:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ea4c:	4b15      	ldr	r3, [pc, #84]	@ (800eaa4 <MlmeIndication+0x8c>)
 800ea4e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	78da      	ldrb	r2, [r3, #3]
 800ea54:	4b13      	ldr	r3, [pc, #76]	@ (800eaa4 <MlmeIndication+0x8c>)
 800ea56:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	4a11      	ldr	r2, [pc, #68]	@ (800eaa4 <MlmeIndication+0x8c>)
 800ea5e:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800ea60:	4b11      	ldr	r3, [pc, #68]	@ (800eaa8 <MlmeIndication+0x90>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00d      	beq.n	800ea86 <MlmeIndication+0x6e>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	2b0a      	cmp	r3, #10
 800ea70:	d009      	beq.n	800ea86 <MlmeIndication+0x6e>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	2b0e      	cmp	r3, #14
 800ea78:	d005      	beq.n	800ea86 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800ea7a:	4b0b      	ldr	r3, [pc, #44]	@ (800eaa8 <MlmeIndication+0x90>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea80:	4908      	ldr	r1, [pc, #32]	@ (800eaa4 <MlmeIndication+0x8c>)
 800ea82:	2000      	movs	r0, #0
 800ea84:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800ea86:	6879      	ldr	r1, [r7, #4]
 800ea88:	2003      	movs	r0, #3
 800ea8a:	f000 f895 	bl	800ebb8 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	2b0a      	cmp	r3, #10
 800ea94:	d001      	beq.n	800ea9a <MlmeIndication+0x82>
 800ea96:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800ea98:	e000      	b.n	800ea9c <MlmeIndication+0x84>
            break;
 800ea9a:	bf00      	nop
    }
}
 800ea9c:	bf00      	nop
 800ea9e:	3708      	adds	r7, #8
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	200000bc 	.word	0x200000bc
 800eaa8:	20000818 	.word	0x20000818

0800eaac <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	4603      	mov	r3, r0
 800eab4:	6039      	str	r1, [r7, #0]
 800eab6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800eab8:	2300      	movs	r3, #0
 800eaba:	60fb      	str	r3, [r7, #12]
    switch( id )
 800eabc:	79fb      	ldrb	r3, [r7, #7]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d104      	bne.n	800eacc <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800eac2:	f000 fa8b 	bl	800efdc <LmhpCompliancePackageFactory>
 800eac6:	4603      	mov	r3, r0
 800eac8:	60fb      	str	r3, [r7, #12]
                break;
 800eaca:	e00d      	b.n	800eae8 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800eacc:	f107 020c 	add.w	r2, r7, #12
 800ead0:	79fb      	ldrb	r3, [r7, #7]
 800ead2:	4611      	mov	r1, r2
 800ead4:	4618      	mov	r0, r3
 800ead6:	f000 ff73 	bl	800f9c0 <LmhpPackagesRegister>
 800eada:	4603      	mov	r3, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d002      	beq.n	800eae6 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800eae0:	f04f 33ff 	mov.w	r3, #4294967295
 800eae4:	e03b      	b.n	800eb5e <LmHandlerPackageRegister+0xb2>
                }
                break;
 800eae6:	bf00      	nop
            }
    }
    if( package != NULL )
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d035      	beq.n	800eb5a <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800eaee:	79fb      	ldrb	r3, [r7, #7]
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	491d      	ldr	r1, [pc, #116]	@ (800eb68 <LmHandlerPackageRegister+0xbc>)
 800eaf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800eaf8:	79fb      	ldrb	r3, [r7, #7]
 800eafa:	4a1b      	ldr	r2, [pc, #108]	@ (800eb68 <LmHandlerPackageRegister+0xbc>)
 800eafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb00:	4a1a      	ldr	r2, [pc, #104]	@ (800eb6c <LmHandlerPackageRegister+0xc0>)
 800eb02:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800eb04:	4b1a      	ldr	r3, [pc, #104]	@ (800eb70 <LmHandlerPackageRegister+0xc4>)
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	79fb      	ldrb	r3, [r7, #7]
 800eb0a:	4917      	ldr	r1, [pc, #92]	@ (800eb68 <LmHandlerPackageRegister+0xbc>)
 800eb0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eb10:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800eb12:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800eb14:	4b16      	ldr	r3, [pc, #88]	@ (800eb70 <LmHandlerPackageRegister+0xc4>)
 800eb16:	681a      	ldr	r2, [r3, #0]
 800eb18:	79fb      	ldrb	r3, [r7, #7]
 800eb1a:	4913      	ldr	r1, [pc, #76]	@ (800eb68 <LmHandlerPackageRegister+0xbc>)
 800eb1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eb20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800eb22:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800eb24:	79fb      	ldrb	r3, [r7, #7]
 800eb26:	4a10      	ldr	r2, [pc, #64]	@ (800eb68 <LmHandlerPackageRegister+0xbc>)
 800eb28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb2c:	4a11      	ldr	r2, [pc, #68]	@ (800eb74 <LmHandlerPackageRegister+0xc8>)
 800eb2e:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800eb30:	4b0f      	ldr	r3, [pc, #60]	@ (800eb70 <LmHandlerPackageRegister+0xc4>)
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	79fb      	ldrb	r3, [r7, #7]
 800eb36:	490c      	ldr	r1, [pc, #48]	@ (800eb68 <LmHandlerPackageRegister+0xbc>)
 800eb38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eb3c:	6992      	ldr	r2, [r2, #24]
 800eb3e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800eb40:	79fb      	ldrb	r3, [r7, #7]
 800eb42:	4a09      	ldr	r2, [pc, #36]	@ (800eb68 <LmHandlerPackageRegister+0xbc>)
 800eb44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	4a0b      	ldr	r2, [pc, #44]	@ (800eb78 <LmHandlerPackageRegister+0xcc>)
 800eb4c:	6851      	ldr	r1, [r2, #4]
 800eb4e:	4a0a      	ldr	r2, [pc, #40]	@ (800eb78 <LmHandlerPackageRegister+0xcc>)
 800eb50:	7852      	ldrb	r2, [r2, #1]
 800eb52:	6838      	ldr	r0, [r7, #0]
 800eb54:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800eb56:	2300      	movs	r3, #0
 800eb58:	e001      	b.n	800eb5e <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800eb5a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3710      	adds	r7, #16
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	200007ec 	.word	0x200007ec
 800eb6c:	0800e24d 	.word	0x0800e24d
 800eb70:	20000818 	.word	0x20000818
 800eb74:	0800e565 	.word	0x0800e565
 800eb78:	200000d0 	.word	0x200000d0

0800eb7c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	4603      	mov	r3, r0
 800eb84:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800eb86:	79fb      	ldrb	r3, [r7, #7]
 800eb88:	2b04      	cmp	r3, #4
 800eb8a:	d80e      	bhi.n	800ebaa <LmHandlerPackageIsInitialized+0x2e>
 800eb8c:	79fb      	ldrb	r3, [r7, #7]
 800eb8e:	4a09      	ldr	r2, [pc, #36]	@ (800ebb4 <LmHandlerPackageIsInitialized+0x38>)
 800eb90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb94:	689b      	ldr	r3, [r3, #8]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d007      	beq.n	800ebaa <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800eb9a:	79fb      	ldrb	r3, [r7, #7]
 800eb9c:	4a05      	ldr	r2, [pc, #20]	@ (800ebb4 <LmHandlerPackageIsInitialized+0x38>)
 800eb9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	4798      	blx	r3
 800eba6:	4603      	mov	r3, r0
 800eba8:	e000      	b.n	800ebac <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800ebaa:	2300      	movs	r3, #0
    }
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	200007ec 	.word	0x200007ec

0800ebb8 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	6039      	str	r1, [r7, #0]
 800ebc2:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	73fb      	strb	r3, [r7, #15]
 800ebc8:	e067      	b.n	800ec9a <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800ebca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebce:	4a37      	ldr	r2, [pc, #220]	@ (800ecac <LmHandlerPackagesNotify+0xf4>)
 800ebd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d05a      	beq.n	800ec8e <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800ebd8:	79fb      	ldrb	r3, [r7, #7]
 800ebda:	2b03      	cmp	r3, #3
 800ebdc:	d84e      	bhi.n	800ec7c <LmHandlerPackagesNotify+0xc4>
 800ebde:	a201      	add	r2, pc, #4	@ (adr r2, 800ebe4 <LmHandlerPackagesNotify+0x2c>)
 800ebe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe4:	0800ebf5 	.word	0x0800ebf5
 800ebe8:	0800ec17 	.word	0x0800ec17
 800ebec:	0800ec39 	.word	0x0800ec39
 800ebf0:	0800ec5b 	.word	0x0800ec5b
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800ebf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebf8:	4a2c      	ldr	r2, [pc, #176]	@ (800ecac <LmHandlerPackagesNotify+0xf4>)
 800ebfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebfe:	699b      	ldr	r3, [r3, #24]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d03d      	beq.n	800ec80 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800ec04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec08:	4a28      	ldr	r2, [pc, #160]	@ (800ecac <LmHandlerPackagesNotify+0xf4>)
 800ec0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec0e:	699b      	ldr	r3, [r3, #24]
 800ec10:	6838      	ldr	r0, [r7, #0]
 800ec12:	4798      	blx	r3
                        }
                        break;
 800ec14:	e034      	b.n	800ec80 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800ec16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec1a:	4a24      	ldr	r2, [pc, #144]	@ (800ecac <LmHandlerPackagesNotify+0xf4>)
 800ec1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec20:	69db      	ldr	r3, [r3, #28]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d02e      	beq.n	800ec84 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800ec26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec2a:	4a20      	ldr	r2, [pc, #128]	@ (800ecac <LmHandlerPackagesNotify+0xf4>)
 800ec2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec30:	69db      	ldr	r3, [r3, #28]
 800ec32:	6838      	ldr	r0, [r7, #0]
 800ec34:	4798      	blx	r3
                        }
                        break;
 800ec36:	e025      	b.n	800ec84 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800ec38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec3c:	4a1b      	ldr	r2, [pc, #108]	@ (800ecac <LmHandlerPackagesNotify+0xf4>)
 800ec3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec42:	6a1b      	ldr	r3, [r3, #32]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d01f      	beq.n	800ec88 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800ec48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec4c:	4a17      	ldr	r2, [pc, #92]	@ (800ecac <LmHandlerPackagesNotify+0xf4>)
 800ec4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec52:	6a1b      	ldr	r3, [r3, #32]
 800ec54:	6838      	ldr	r0, [r7, #0]
 800ec56:	4798      	blx	r3
                        }
                        break;
 800ec58:	e016      	b.n	800ec88 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800ec5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec5e:	4a13      	ldr	r2, [pc, #76]	@ (800ecac <LmHandlerPackagesNotify+0xf4>)
 800ec60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d010      	beq.n	800ec8c <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800ec6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec6e:	4a0f      	ldr	r2, [pc, #60]	@ (800ecac <LmHandlerPackagesNotify+0xf4>)
 800ec70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec76:	6838      	ldr	r0, [r7, #0]
 800ec78:	4798      	blx	r3
                        }
                        break;
 800ec7a:	e007      	b.n	800ec8c <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800ec7c:	bf00      	nop
 800ec7e:	e006      	b.n	800ec8e <LmHandlerPackagesNotify+0xd6>
                        break;
 800ec80:	bf00      	nop
 800ec82:	e004      	b.n	800ec8e <LmHandlerPackagesNotify+0xd6>
                        break;
 800ec84:	bf00      	nop
 800ec86:	e002      	b.n	800ec8e <LmHandlerPackagesNotify+0xd6>
                        break;
 800ec88:	bf00      	nop
 800ec8a:	e000      	b.n	800ec8e <LmHandlerPackagesNotify+0xd6>
                        break;
 800ec8c:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ec8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	3301      	adds	r3, #1
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	73fb      	strb	r3, [r7, #15]
 800ec9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec9e:	2b04      	cmp	r3, #4
 800eca0:	dd93      	ble.n	800ebca <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800eca2:	bf00      	nop
 800eca4:	bf00      	nop
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	200007ec 	.word	0x200007ec

0800ecb0 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	71fb      	strb	r3, [r7, #7]
 800ecba:	e018      	b.n	800ecee <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800ecbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecc0:	4a0f      	ldr	r2, [pc, #60]	@ (800ed00 <LmHandlerPackageIsTxPending+0x50>)
 800ecc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00b      	beq.n	800ece2 <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800ecca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecce:	4a0c      	ldr	r2, [pc, #48]	@ (800ed00 <LmHandlerPackageIsTxPending+0x50>)
 800ecd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecd4:	68db      	ldr	r3, [r3, #12]
 800ecd6:	4798      	blx	r3
 800ecd8:	4603      	mov	r3, r0
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d001      	beq.n	800ece2 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800ecde:	2301      	movs	r3, #1
 800ece0:	e00a      	b.n	800ecf8 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ece2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	3301      	adds	r3, #1
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	71fb      	strb	r3, [r7, #7]
 800ecee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecf2:	2b04      	cmp	r3, #4
 800ecf4:	dde2      	ble.n	800ecbc <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800ecf6:	2300      	movs	r3, #0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3708      	adds	r7, #8
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	200007ec 	.word	0x200007ec

0800ed04 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	71fb      	strb	r3, [r7, #7]
 800ed0e:	e022      	b.n	800ed56 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ed10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed14:	4a14      	ldr	r2, [pc, #80]	@ (800ed68 <LmHandlerPackagesProcess+0x64>)
 800ed16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d015      	beq.n	800ed4a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ed1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed22:	4a11      	ldr	r2, [pc, #68]	@ (800ed68 <LmHandlerPackagesProcess+0x64>)
 800ed24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed28:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00d      	beq.n	800ed4a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ed2e:	79fb      	ldrb	r3, [r7, #7]
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7ff ff23 	bl	800eb7c <LmHandlerPackageIsInitialized>
 800ed36:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d006      	beq.n	800ed4a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ed3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed40:	4a09      	ldr	r2, [pc, #36]	@ (800ed68 <LmHandlerPackagesProcess+0x64>)
 800ed42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ed4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	3301      	adds	r3, #1
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	71fb      	strb	r3, [r7, #7]
 800ed56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed5a:	2b04      	cmp	r3, #4
 800ed5c:	ddd8      	ble.n	800ed10 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ed5e:	bf00      	nop
 800ed60:	bf00      	nop
 800ed62:	3708      	adds	r7, #8
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}
 800ed68:	200007ec 	.word	0x200007ec

0800ed6c <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	4603      	mov	r3, r0
 800ed74:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800ed76:	4a09      	ldr	r2, [pc, #36]	@ (800ed9c <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800ed78:	79fb      	ldrb	r3, [r7, #7]
 800ed7a:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800ed7c:	4b08      	ldr	r3, [pc, #32]	@ (800eda0 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d005      	beq.n	800ed92 <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800ed86:	4b06      	ldr	r3, [pc, #24]	@ (800eda0 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed8c:	79fa      	ldrb	r2, [r7, #7]
 800ed8e:	4610      	mov	r0, r2
 800ed90:	4798      	blx	r3
    }
}
 800ed92:	bf00      	nop
 800ed94:	3708      	adds	r7, #8
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	20000800 	.word	0x20000800
 800eda0:	20000818 	.word	0x20000818

0800eda4 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	4603      	mov	r3, r0
 800edac:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800edae:	4a09      	ldr	r2, [pc, #36]	@ (800edd4 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800edb0:	79fb      	ldrb	r3, [r7, #7]
 800edb2:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800edb4:	4b08      	ldr	r3, [pc, #32]	@ (800edd8 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d005      	beq.n	800edca <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800edbe:	4b06      	ldr	r3, [pc, #24]	@ (800edd8 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edc4:	79fa      	ldrb	r2, [r7, #7]
 800edc6:	4610      	mov	r0, r2
 800edc8:	4798      	blx	r3
    }
}
 800edca:	bf00      	nop
 800edcc:	3708      	adds	r7, #8
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	20000800 	.word	0x20000800
 800edd8:	20000818 	.word	0x20000818

0800eddc <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	4603      	mov	r3, r0
 800ede4:	6039      	str	r1, [r7, #0]
 800ede6:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d102      	bne.n	800edf4 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800edee:	f04f 33ff 	mov.w	r3, #4294967295
 800edf2:	e00e      	b.n	800ee12 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800edf4:	79fb      	ldrb	r3, [r7, #7]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d002      	beq.n	800ee00 <LmHandlerGetVersion+0x24>
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d004      	beq.n	800ee08 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800edfe:	e007      	b.n	800ee10 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	4a06      	ldr	r2, [pc, #24]	@ (800ee1c <LmHandlerGetVersion+0x40>)
 800ee04:	601a      	str	r2, [r3, #0]
            break;
 800ee06:	e003      	b.n	800ee10 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	4a05      	ldr	r2, [pc, #20]	@ (800ee20 <LmHandlerGetVersion+0x44>)
 800ee0c:	601a      	str	r2, [r3, #0]
            break;
 800ee0e:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800ee10:	2300      	movs	r3, #0
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	370c      	adds	r7, #12
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bc80      	pop	{r7}
 800ee1a:	4770      	bx	lr
 800ee1c:	01000400 	.word	0x01000400
 800ee20:	02010003 	.word	0x02010003

0800ee24 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800ee28:	f005 fd72 	bl	8014910 <LoRaMacDeInitialization>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d101      	bne.n	800ee36 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ee32:	2300      	movs	r3, #0
 800ee34:	e001      	b.n	800ee3a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ee36:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800ee42:	f004 fbc1 	bl	80135c8 <LoRaMacHalt>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d101      	bne.n	800ee50 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	e001      	b.n	800ee54 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ee50:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b08c      	sub	sp, #48	@ 0x30
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d102      	bne.n	800ee6c <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ee66:	f04f 33ff 	mov.w	r3, #4294967295
 800ee6a:	e016      	b.n	800ee9a <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800ee6c:	2321      	movs	r3, #33	@ 0x21
 800ee6e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ee70:	f107 0308 	add.w	r3, r7, #8
 800ee74:	4618      	mov	r0, r3
 800ee76:	f004 fc6f 	bl	8013758 <LoRaMacMibGetRequestConfirm>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d002      	beq.n	800ee86 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ee80:	f04f 33ff 	mov.w	r3, #4294967295
 800ee84:	e009      	b.n	800ee9a <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800ee86:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f993 2000 	ldrsb.w	r2, [r3]
 800ee94:	4b03      	ldr	r3, [pc, #12]	@ (800eea4 <LmHandlerGetTxPower+0x4c>)
 800ee96:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800ee98:	2300      	movs	r3, #0
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3730      	adds	r7, #48	@ 0x30
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	20000800 	.word	0x20000800

0800eea8 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b08e      	sub	sp, #56	@ 0x38
 800eeac:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800eeb8:	f7ff ffc1 	bl	800ee3e <LmHandlerHalt>
 800eebc:	4603      	mov	r3, r0
 800eebe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800eec2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d12f      	bne.n	800ef2a <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800eeca:	f000 f859 	bl	800ef80 <NvmDataMgmtStoreBegin>
 800eece:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800eed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed2:	f113 0f02 	cmn.w	r3, #2
 800eed6:	d103      	bne.n	800eee0 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800eed8:	23f8      	movs	r3, #248	@ 0xf8
 800eeda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eede:	e01c      	b.n	800ef1a <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800eee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d104      	bne.n	800eef0 <LmHandlerNvmDataStore+0x48>
 800eee6:	4b1b      	ldr	r3, [pc, #108]	@ (800ef54 <LmHandlerNvmDataStore+0xac>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	695b      	ldr	r3, [r3, #20]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d103      	bne.n	800eef8 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800eef0:	23ff      	movs	r3, #255	@ 0xff
 800eef2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eef6:	e010      	b.n	800ef1a <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800eef8:	2327      	movs	r3, #39	@ 0x27
 800eefa:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800eefc:	463b      	mov	r3, r7
 800eefe:	4618      	mov	r0, r3
 800ef00:	f004 fc2a 	bl	8013758 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800ef08:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800ef0c:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800ef0e:	4b11      	ldr	r3, [pc, #68]	@ (800ef54 <LmHandlerNvmDataStore+0xac>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	695b      	ldr	r3, [r3, #20]
 800ef14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef18:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800ef1a:	f000 f847 	bl	800efac <NvmDataMgmtStoreEnd>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d002      	beq.n	800ef2a <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ef24:	23ff      	movs	r3, #255	@ 0xff
 800ef26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800ef2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d109      	bne.n	800ef46 <LmHandlerNvmDataStore+0x9e>
 800ef32:	4b08      	ldr	r3, [pc, #32]	@ (800ef54 <LmHandlerNvmDataStore+0xac>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	69db      	ldr	r3, [r3, #28]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d004      	beq.n	800ef46 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800ef3c:	4b05      	ldr	r3, [pc, #20]	@ (800ef54 <LmHandlerNvmDataStore+0xac>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	69db      	ldr	r3, [r3, #28]
 800ef42:	2001      	movs	r0, #1
 800ef44:	4798      	blx	r3
    }

    return lmhStatus;
 800ef46:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3738      	adds	r7, #56	@ 0x38
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	20000818 	.word	0x20000818

0800ef58 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b083      	sub	sp, #12
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	4603      	mov	r3, r0
 800ef60:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800ef62:	4b06      	ldr	r3, [pc, #24]	@ (800ef7c <NvmDataMgmtEvent+0x24>)
 800ef64:	881a      	ldrh	r2, [r3, #0]
 800ef66:	88fb      	ldrh	r3, [r7, #6]
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	4b03      	ldr	r3, [pc, #12]	@ (800ef7c <NvmDataMgmtEvent+0x24>)
 800ef6e:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800ef70:	bf00      	nop
 800ef72:	370c      	adds	r7, #12
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bc80      	pop	{r7}
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop
 800ef7c:	20000940 	.word	0x20000940

0800ef80 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800ef84:	4b08      	ldr	r3, [pc, #32]	@ (800efa8 <NvmDataMgmtStoreBegin+0x28>)
 800ef86:	881b      	ldrh	r3, [r3, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d102      	bne.n	800ef92 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800ef8c:	f06f 0301 	mvn.w	r3, #1
 800ef90:	e008      	b.n	800efa4 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800ef92:	f004 faf1 	bl	8013578 <LoRaMacStop>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d002      	beq.n	800efa2 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800ef9c:	f06f 0302 	mvn.w	r3, #2
 800efa0:	e000      	b.n	800efa4 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800efa2:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	20000940 	.word	0x20000940

0800efac <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800efac:	b580      	push	{r7, lr}
 800efae:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800efb0:	4b03      	ldr	r3, [pc, #12]	@ (800efc0 <NvmDataMgmtStoreEnd+0x14>)
 800efb2:	2200      	movs	r2, #0
 800efb4:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800efb6:	f004 fad1 	bl	801355c <LoRaMacStart>
    return NVM_DATA_OK;
 800efba:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	20000940 	.word	0x20000940

0800efc4 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800efc8:	2220      	movs	r2, #32
 800efca:	2100      	movs	r1, #0
 800efcc:	4802      	ldr	r0, [pc, #8]	@ (800efd8 <ClassBStatusReset+0x14>)
 800efce:	f009 ffad 	bl	8018f2c <memset1>
}
 800efd2:	bf00      	nop
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	20000958 	.word	0x20000958

0800efdc <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800efdc:	b480      	push	{r7}
 800efde:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800efe0:	4b02      	ldr	r3, [pc, #8]	@ (800efec <LmhpCompliancePackageFactory+0x10>)
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bc80      	pop	{r7}
 800efe8:	4770      	bx	lr
 800efea:	bf00      	nop
 800efec:	200000d8 	.word	0x200000d8

0800eff0 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b086      	sub	sp, #24
 800eff4:	af02      	add	r7, sp, #8
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	4613      	mov	r3, r2
 800effc:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d018      	beq.n	800f036 <LmhpComplianceInit+0x46>
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d015      	beq.n	800f036 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800f00a:	4a19      	ldr	r2, [pc, #100]	@ (800f070 <LmhpComplianceInit+0x80>)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800f010:	4a18      	ldr	r2, [pc, #96]	@ (800f074 <LmhpComplianceInit+0x84>)
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800f016:	4a17      	ldr	r2, [pc, #92]	@ (800f074 <LmhpComplianceInit+0x84>)
 800f018:	79fb      	ldrb	r3, [r7, #7]
 800f01a:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800f01c:	4b15      	ldr	r3, [pc, #84]	@ (800f074 <LmhpComplianceInit+0x84>)
 800f01e:	2201      	movs	r2, #1
 800f020:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800f022:	2300      	movs	r3, #0
 800f024:	9300      	str	r3, [sp, #0]
 800f026:	4b14      	ldr	r3, [pc, #80]	@ (800f078 <LmhpComplianceInit+0x88>)
 800f028:	2200      	movs	r2, #0
 800f02a:	f04f 31ff 	mov.w	r1, #4294967295
 800f02e:	4813      	ldr	r0, [pc, #76]	@ (800f07c <LmhpComplianceInit+0x8c>)
 800f030:	f00d fd8a 	bl	801cb48 <UTIL_TIMER_Create>
 800f034:	e005      	b.n	800f042 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800f036:	4b0e      	ldr	r3, [pc, #56]	@ (800f070 <LmhpComplianceInit+0x80>)
 800f038:	2200      	movs	r2, #0
 800f03a:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800f03c:	4b0d      	ldr	r3, [pc, #52]	@ (800f074 <LmhpComplianceInit+0x84>)
 800f03e:	2200      	movs	r2, #0
 800f040:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800f042:	4b0c      	ldr	r3, [pc, #48]	@ (800f074 <LmhpComplianceInit+0x84>)
 800f044:	2200      	movs	r2, #0
 800f046:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800f048:	f7ff ffbc 	bl	800efc4 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800f04c:	4b09      	ldr	r3, [pc, #36]	@ (800f074 <LmhpComplianceInit+0x84>)
 800f04e:	2200      	movs	r2, #0
 800f050:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800f052:	4b08      	ldr	r3, [pc, #32]	@ (800f074 <LmhpComplianceInit+0x84>)
 800f054:	2200      	movs	r2, #0
 800f056:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800f058:	4b06      	ldr	r3, [pc, #24]	@ (800f074 <LmhpComplianceInit+0x84>)
 800f05a:	2200      	movs	r2, #0
 800f05c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800f060:	4b04      	ldr	r3, [pc, #16]	@ (800f074 <LmhpComplianceInit+0x84>)
 800f062:	2200      	movs	r2, #0
 800f064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800f068:	bf00      	nop
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	2000097c 	.word	0x2000097c
 800f074:	20000944 	.word	0x20000944
 800f078:	0800f979 	.word	0x0800f979
 800f07c:	20000980 	.word	0x20000980

0800f080 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800f080:	b480      	push	{r7}
 800f082:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800f084:	4b02      	ldr	r3, [pc, #8]	@ (800f090 <LmhpComplianceIsInitialized+0x10>)
 800f086:	781b      	ldrb	r3, [r3, #0]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bc80      	pop	{r7}
 800f08e:	4770      	bx	lr
 800f090:	20000944 	.word	0x20000944

0800f094 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800f094:	b480      	push	{r7}
 800f096:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800f098:	4b02      	ldr	r3, [pc, #8]	@ (800f0a4 <LmhpComplianceIsTxPending+0x10>)
 800f09a:	785b      	ldrb	r3, [r3, #1]
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bc80      	pop	{r7}
 800f0a2:	4770      	bx	lr
 800f0a4:	20000944 	.word	0x20000944

0800f0a8 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800f0a8:	b590      	push	{r4, r7, lr}
 800f0aa:	b085      	sub	sp, #20
 800f0ac:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800f0ae:	4b33      	ldr	r3, [pc, #204]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f0b0:	785b      	ldrb	r3, [r3, #1]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d03e      	beq.n	800f134 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800f0b6:	f00d ff05 	bl	801cec4 <UTIL_TIMER_GetCurrentTime>
 800f0ba:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800f0bc:	4b2f      	ldr	r3, [pc, #188]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f0be:	685c      	ldr	r4, [r3, #4]
 800f0c0:	f7ff f8ba 	bl	800e238 <LmHandlerGetDutyCycleWaitTime>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	4423      	add	r3, r4
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d941      	bls.n	800f152 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800f0ce:	4b2b      	ldr	r3, [pc, #172]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f0d0:	7a9b      	ldrb	r3, [r3, #10]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d03d      	beq.n	800f152 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800f0d6:	23e0      	movs	r3, #224	@ 0xe0
 800f0d8:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800f0da:	4b28      	ldr	r3, [pc, #160]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f0dc:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800f0de:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800f0e0:	4b26      	ldr	r3, [pc, #152]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f0e2:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800f0e4:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f0e6:	23ff      	movs	r3, #255	@ 0xff
 800f0e8:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800f0ea:	4b24      	ldr	r3, [pc, #144]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f0ec:	7a19      	ldrb	r1, [r3, #8]
 800f0ee:	463b      	mov	r3, r7
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7ff f968 	bl	800e3c8 <LmHandlerSend>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800f0fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d004      	beq.n	800f10e <LmhpComplianceProcess+0x66>
 800f104:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f108:	f113 0f07 	cmn.w	r3, #7
 800f10c:	d106      	bne.n	800f11c <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800f10e:	4b1b      	ldr	r3, [pc, #108]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f110:	2200      	movs	r2, #0
 800f112:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800f114:	4b19      	ldr	r3, [pc, #100]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f116:	2200      	movs	r2, #0
 800f118:	729a      	strb	r2, [r3, #10]
 800f11a:	e007      	b.n	800f12c <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800f11c:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800f120:	4817      	ldr	r0, [pc, #92]	@ (800f180 <LmhpComplianceProcess+0xd8>)
 800f122:	f00d fe25 	bl	801cd70 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800f126:	4816      	ldr	r0, [pc, #88]	@ (800f180 <LmhpComplianceProcess+0xd8>)
 800f128:	f00d fd44 	bl	801cbb4 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800f12c:	4a13      	ldr	r2, [pc, #76]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	6053      	str	r3, [r2, #4]
 800f132:	e00e      	b.n	800f152 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800f134:	4b11      	ldr	r3, [pc, #68]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f136:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d009      	beq.n	800f152 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800f13e:	4b0f      	ldr	r3, [pc, #60]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f140:	2200      	movs	r2, #0
 800f142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800f146:	4b0d      	ldr	r3, [pc, #52]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f148:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7ff fa31 	bl	800e5b4 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800f152:	4b0a      	ldr	r3, [pc, #40]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f154:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d00a      	beq.n	800f172 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800f15c:	4b07      	ldr	r3, [pc, #28]	@ (800f17c <LmhpComplianceProcess+0xd4>)
 800f15e:	2200      	movs	r2, #0
 800f160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800f164:	4b07      	ldr	r3, [pc, #28]	@ (800f184 <LmhpComplianceProcess+0xdc>)
 800f166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d002      	beq.n	800f172 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800f16c:	4b05      	ldr	r3, [pc, #20]	@ (800f184 <LmhpComplianceProcess+0xdc>)
 800f16e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f170:	4798      	blx	r3
        }
    }
}
 800f172:	bf00      	nop
 800f174:	3714      	adds	r7, #20
 800f176:	46bd      	mov	sp, r7
 800f178:	bd90      	pop	{r4, r7, pc}
 800f17a:	bf00      	nop
 800f17c:	20000944 	.word	0x20000944
 800f180:	20000980 	.word	0x20000980
 800f184:	200000d8 	.word	0x200000d8

0800f188 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800f188:	b5b0      	push	{r4, r5, r7, lr}
 800f18a:	b0a4      	sub	sp, #144	@ 0x90
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800f190:	2300      	movs	r3, #0
 800f192:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800f196:	4bd0      	ldr	r3, [pc, #832]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	f083 0301 	eor.w	r3, r3, #1
 800f19e:	b2db      	uxtb	r3, r3
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f040 83bf 	bne.w	800f924 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	78db      	ldrb	r3, [r3, #3]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d103      	bne.n	800f1b6 <LmhpComplianceOnMcpsIndication+0x2e>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	7b9b      	ldrb	r3, [r3, #14]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d005      	beq.n	800f1c2 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800f1b6:	4bc8      	ldr	r3, [pc, #800]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f1b8:	8a1b      	ldrh	r3, [r3, #16]
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	b29a      	uxth	r2, r3
 800f1be:	4bc6      	ldr	r3, [pc, #792]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f1c0:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	7b5b      	ldrb	r3, [r3, #13]
 800f1c6:	f083 0301 	eor.w	r3, r3, #1
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	f040 83ab 	bne.w	800f928 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	78db      	ldrb	r3, [r3, #3]
 800f1d6:	2be0      	cmp	r3, #224	@ 0xe0
 800f1d8:	f040 83a8 	bne.w	800f92c <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800f1dc:	4bbe      	ldr	r3, [pc, #760]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f1de:	2200      	movs	r2, #0
 800f1e0:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	689a      	ldr	r2, [r3, #8]
 800f1e6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f1ea:	1c59      	adds	r1, r3, #1
 800f1ec:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f1f0:	4413      	add	r3, r2
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	2b7f      	cmp	r3, #127	@ 0x7f
 800f1f6:	f200 8372 	bhi.w	800f8de <LmhpComplianceOnMcpsIndication+0x756>
 800f1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f200 <LmhpComplianceOnMcpsIndication+0x78>)
 800f1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f200:	0800f401 	.word	0x0800f401
 800f204:	0800f445 	.word	0x0800f445
 800f208:	0800f44f 	.word	0x0800f44f
 800f20c:	0800f465 	.word	0x0800f465
 800f210:	0800f487 	.word	0x0800f487
 800f214:	0800f4b5 	.word	0x0800f4b5
 800f218:	0800f4e1 	.word	0x0800f4e1
 800f21c:	0800f53f 	.word	0x0800f53f
 800f220:	0800f597 	.word	0x0800f597
 800f224:	0800f603 	.word	0x0800f603
 800f228:	0800f653 	.word	0x0800f653
 800f22c:	0800f8df 	.word	0x0800f8df
 800f230:	0800f8df 	.word	0x0800f8df
 800f234:	0800f8df 	.word	0x0800f8df
 800f238:	0800f8df 	.word	0x0800f8df
 800f23c:	0800f8df 	.word	0x0800f8df
 800f240:	0800f8df 	.word	0x0800f8df
 800f244:	0800f8df 	.word	0x0800f8df
 800f248:	0800f8df 	.word	0x0800f8df
 800f24c:	0800f8df 	.word	0x0800f8df
 800f250:	0800f8df 	.word	0x0800f8df
 800f254:	0800f8df 	.word	0x0800f8df
 800f258:	0800f8df 	.word	0x0800f8df
 800f25c:	0800f8df 	.word	0x0800f8df
 800f260:	0800f8df 	.word	0x0800f8df
 800f264:	0800f8df 	.word	0x0800f8df
 800f268:	0800f8df 	.word	0x0800f8df
 800f26c:	0800f8df 	.word	0x0800f8df
 800f270:	0800f8df 	.word	0x0800f8df
 800f274:	0800f8df 	.word	0x0800f8df
 800f278:	0800f8df 	.word	0x0800f8df
 800f27c:	0800f8df 	.word	0x0800f8df
 800f280:	0800f65b 	.word	0x0800f65b
 800f284:	0800f66d 	.word	0x0800f66d
 800f288:	0800f675 	.word	0x0800f675
 800f28c:	0800f8df 	.word	0x0800f8df
 800f290:	0800f8df 	.word	0x0800f8df
 800f294:	0800f8df 	.word	0x0800f8df
 800f298:	0800f8df 	.word	0x0800f8df
 800f29c:	0800f8df 	.word	0x0800f8df
 800f2a0:	0800f8df 	.word	0x0800f8df
 800f2a4:	0800f8df 	.word	0x0800f8df
 800f2a8:	0800f8df 	.word	0x0800f8df
 800f2ac:	0800f8df 	.word	0x0800f8df
 800f2b0:	0800f8df 	.word	0x0800f8df
 800f2b4:	0800f8df 	.word	0x0800f8df
 800f2b8:	0800f8df 	.word	0x0800f8df
 800f2bc:	0800f8df 	.word	0x0800f8df
 800f2c0:	0800f8df 	.word	0x0800f8df
 800f2c4:	0800f8df 	.word	0x0800f8df
 800f2c8:	0800f8df 	.word	0x0800f8df
 800f2cc:	0800f8df 	.word	0x0800f8df
 800f2d0:	0800f8df 	.word	0x0800f8df
 800f2d4:	0800f8df 	.word	0x0800f8df
 800f2d8:	0800f8df 	.word	0x0800f8df
 800f2dc:	0800f8df 	.word	0x0800f8df
 800f2e0:	0800f8df 	.word	0x0800f8df
 800f2e4:	0800f8df 	.word	0x0800f8df
 800f2e8:	0800f8df 	.word	0x0800f8df
 800f2ec:	0800f8df 	.word	0x0800f8df
 800f2f0:	0800f8df 	.word	0x0800f8df
 800f2f4:	0800f8df 	.word	0x0800f8df
 800f2f8:	0800f8df 	.word	0x0800f8df
 800f2fc:	0800f8df 	.word	0x0800f8df
 800f300:	0800f8df 	.word	0x0800f8df
 800f304:	0800f8df 	.word	0x0800f8df
 800f308:	0800f8df 	.word	0x0800f8df
 800f30c:	0800f8df 	.word	0x0800f8df
 800f310:	0800f8df 	.word	0x0800f8df
 800f314:	0800f8df 	.word	0x0800f8df
 800f318:	0800f8df 	.word	0x0800f8df
 800f31c:	0800f8df 	.word	0x0800f8df
 800f320:	0800f8df 	.word	0x0800f8df
 800f324:	0800f8df 	.word	0x0800f8df
 800f328:	0800f8df 	.word	0x0800f8df
 800f32c:	0800f8df 	.word	0x0800f8df
 800f330:	0800f8df 	.word	0x0800f8df
 800f334:	0800f8df 	.word	0x0800f8df
 800f338:	0800f8df 	.word	0x0800f8df
 800f33c:	0800f8df 	.word	0x0800f8df
 800f340:	0800f8df 	.word	0x0800f8df
 800f344:	0800f8df 	.word	0x0800f8df
 800f348:	0800f8df 	.word	0x0800f8df
 800f34c:	0800f8df 	.word	0x0800f8df
 800f350:	0800f8df 	.word	0x0800f8df
 800f354:	0800f8df 	.word	0x0800f8df
 800f358:	0800f8df 	.word	0x0800f8df
 800f35c:	0800f8df 	.word	0x0800f8df
 800f360:	0800f8df 	.word	0x0800f8df
 800f364:	0800f8df 	.word	0x0800f8df
 800f368:	0800f8df 	.word	0x0800f8df
 800f36c:	0800f8df 	.word	0x0800f8df
 800f370:	0800f8df 	.word	0x0800f8df
 800f374:	0800f8df 	.word	0x0800f8df
 800f378:	0800f8df 	.word	0x0800f8df
 800f37c:	0800f8df 	.word	0x0800f8df
 800f380:	0800f8df 	.word	0x0800f8df
 800f384:	0800f8df 	.word	0x0800f8df
 800f388:	0800f8df 	.word	0x0800f8df
 800f38c:	0800f8df 	.word	0x0800f8df
 800f390:	0800f8df 	.word	0x0800f8df
 800f394:	0800f8df 	.word	0x0800f8df
 800f398:	0800f8df 	.word	0x0800f8df
 800f39c:	0800f8df 	.word	0x0800f8df
 800f3a0:	0800f8df 	.word	0x0800f8df
 800f3a4:	0800f8df 	.word	0x0800f8df
 800f3a8:	0800f8df 	.word	0x0800f8df
 800f3ac:	0800f8df 	.word	0x0800f8df
 800f3b0:	0800f8df 	.word	0x0800f8df
 800f3b4:	0800f8df 	.word	0x0800f8df
 800f3b8:	0800f8df 	.word	0x0800f8df
 800f3bc:	0800f8df 	.word	0x0800f8df
 800f3c0:	0800f8df 	.word	0x0800f8df
 800f3c4:	0800f8df 	.word	0x0800f8df
 800f3c8:	0800f8df 	.word	0x0800f8df
 800f3cc:	0800f8df 	.word	0x0800f8df
 800f3d0:	0800f8df 	.word	0x0800f8df
 800f3d4:	0800f8df 	.word	0x0800f8df
 800f3d8:	0800f8df 	.word	0x0800f8df
 800f3dc:	0800f8df 	.word	0x0800f8df
 800f3e0:	0800f8df 	.word	0x0800f8df
 800f3e4:	0800f8df 	.word	0x0800f8df
 800f3e8:	0800f8df 	.word	0x0800f8df
 800f3ec:	0800f8df 	.word	0x0800f8df
 800f3f0:	0800f8df 	.word	0x0800f8df
 800f3f4:	0800f6a7 	.word	0x0800f6a7
 800f3f8:	0800f759 	.word	0x0800f759
 800f3fc:	0800f789 	.word	0x0800f789
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800f400:	4b35      	ldr	r3, [pc, #212]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f402:	68da      	ldr	r2, [r3, #12]
 800f404:	4b34      	ldr	r3, [pc, #208]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f406:	7a9b      	ldrb	r3, [r3, #10]
 800f408:	1c59      	adds	r1, r3, #1
 800f40a:	b2c8      	uxtb	r0, r1
 800f40c:	4932      	ldr	r1, [pc, #200]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f40e:	7288      	strb	r0, [r1, #10]
 800f410:	4413      	add	r3, r2
 800f412:	2200      	movs	r2, #0
 800f414:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800f416:	4b30      	ldr	r3, [pc, #192]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f418:	68da      	ldr	r2, [r3, #12]
 800f41a:	4b2f      	ldr	r3, [pc, #188]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f41c:	7a9b      	ldrb	r3, [r3, #10]
 800f41e:	1c59      	adds	r1, r3, #1
 800f420:	b2c8      	uxtb	r0, r1
 800f422:	492d      	ldr	r1, [pc, #180]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f424:	7288      	strb	r0, [r1, #10]
 800f426:	4413      	add	r3, r2
 800f428:	2206      	movs	r2, #6
 800f42a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800f42c:	4b2a      	ldr	r3, [pc, #168]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f42e:	68da      	ldr	r2, [r3, #12]
 800f430:	4b29      	ldr	r3, [pc, #164]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f432:	7a9b      	ldrb	r3, [r3, #10]
 800f434:	1c59      	adds	r1, r3, #1
 800f436:	b2c8      	uxtb	r0, r1
 800f438:	4927      	ldr	r1, [pc, #156]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f43a:	7288      	strb	r0, [r1, #10]
 800f43c:	4413      	add	r3, r2
 800f43e:	2201      	movs	r2, #1
 800f440:	701a      	strb	r2, [r3, #0]
                break;
 800f442:	e257      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800f444:	4b24      	ldr	r3, [pc, #144]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f446:	2201      	movs	r2, #1
 800f448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800f44c:	e252      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800f44e:	4b23      	ldr	r3, [pc, #140]	@ (800f4dc <LmhpComplianceOnMcpsIndication+0x354>)
 800f450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f452:	2b00      	cmp	r3, #0
 800f454:	f000 8245 	beq.w	800f8e2 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800f458:	4b20      	ldr	r3, [pc, #128]	@ (800f4dc <LmhpComplianceOnMcpsIndication+0x354>)
 800f45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f45c:	2101      	movs	r1, #1
 800f45e:	2002      	movs	r0, #2
 800f460:	4798      	blx	r3
                }
                break;
 800f462:	e23e      	b.n	800f8e2 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	689a      	ldr	r2, [r3, #8]
 800f468:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f46c:	1c59      	adds	r1, r3, #1
 800f46e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f472:	4413      	add	r3, r2
 800f474:	781a      	ldrb	r2, [r3, #0]
 800f476:	4b18      	ldr	r3, [pc, #96]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f478:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800f47c:	4b16      	ldr	r3, [pc, #88]	@ (800f4d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800f47e:	2201      	movs	r2, #1
 800f480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 800f484:	e236      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800f486:	2304      	movs	r3, #4
 800f488:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	689a      	ldr	r2, [r3, #8]
 800f48e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f492:	1c59      	adds	r1, r3, #1
 800f494:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f498:	4413      	add	r3, r2
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	bf14      	ite	ne
 800f4a0:	2301      	movne	r3, #1
 800f4a2:	2300      	moveq	r3, #0
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800f4a8:	f107 0308 	add.w	r3, r7, #8
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f004 fb2b 	bl	8013b08 <LoRaMacMibSetRequestConfirm>
                break;
 800f4b2:	e21f      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	689a      	ldr	r2, [r3, #8]
 800f4b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f4bc:	1c59      	adds	r1, r3, #1
 800f4be:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f4c2:	4413      	add	r3, r2
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	bf14      	ite	ne
 800f4ca:	2301      	movne	r3, #1
 800f4cc:	2300      	moveq	r3, #0
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f005 f9f7 	bl	80148c4 <LoRaMacTestSetDutyCycleOn>
                break;
 800f4d6:	e20d      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
 800f4d8:	20000944 	.word	0x20000944
 800f4dc:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800f4e0:	4ba5      	ldr	r3, [pc, #660]	@ (800f778 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f4e2:	f107 0408 	add.w	r4, r7, #8
 800f4e6:	461d      	mov	r5, r3
 800f4e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f4ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f4ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f4ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f4f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f4f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	689a      	ldr	r2, [r3, #8]
 800f4fc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f500:	1c59      	adds	r1, r3, #1
 800f502:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f506:	4413      	add	r3, r2
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800f50e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800f512:	2b0a      	cmp	r3, #10
 800f514:	f200 81e7 	bhi.w	800f8e6 <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800f518:	4b98      	ldr	r3, [pc, #608]	@ (800f77c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f000 81e1 	beq.w	800f8e6 <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800f524:	4b95      	ldr	r3, [pc, #596]	@ (800f77c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	685a      	ldr	r2, [r3, #4]
 800f52a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	3390      	adds	r3, #144	@ 0x90
 800f532:	443b      	add	r3, r7
 800f534:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800f538:	4618      	mov	r0, r3
 800f53a:	4790      	blx	r2
                    }
                }
                break;
 800f53c:	e1d3      	b.n	800f8e6 <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	689a      	ldr	r2, [r3, #8]
 800f542:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f546:	1c59      	adds	r1, r3, #1
 800f548:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f54c:	4413      	add	r3, r2
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800f554:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d004      	beq.n	800f566 <LmhpComplianceOnMcpsIndication+0x3de>
 800f55c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f560:	2b02      	cmp	r3, #2
 800f562:	f040 81c2 	bne.w	800f8ea <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800f566:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	bf14      	ite	ne
 800f56e:	2301      	movne	r3, #1
 800f570:	2300      	moveq	r3, #0
 800f572:	b2db      	uxtb	r3, r3
 800f574:	461a      	mov	r2, r3
 800f576:	4b82      	ldr	r3, [pc, #520]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f578:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800f57a:	4b80      	ldr	r3, [pc, #512]	@ (800f77c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	2b00      	cmp	r3, #0
 800f582:	f000 81b2 	beq.w	800f8ea <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800f586:	4b7d      	ldr	r3, [pc, #500]	@ (800f77c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	4a7c      	ldr	r2, [pc, #496]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f58e:	7a12      	ldrb	r2, [r2, #8]
 800f590:	4610      	mov	r0, r2
 800f592:	4798      	blx	r3
                    }
                }
                break;
 800f594:	e1a9      	b.n	800f8ea <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800f596:	4b7a      	ldr	r3, [pc, #488]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f598:	68da      	ldr	r2, [r3, #12]
 800f59a:	4b79      	ldr	r3, [pc, #484]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f59c:	7a9b      	ldrb	r3, [r3, #10]
 800f59e:	1c59      	adds	r1, r3, #1
 800f5a0:	b2c8      	uxtb	r0, r1
 800f5a2:	4977      	ldr	r1, [pc, #476]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f5a4:	7288      	strb	r0, [r1, #10]
 800f5a6:	4413      	add	r3, r2
 800f5a8:	2208      	movs	r2, #8
 800f5aa:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800f5b2:	e019      	b.n	800f5e8 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	689a      	ldr	r2, [r3, #8]
 800f5b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f5bc:	1c59      	adds	r1, r3, #1
 800f5be:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f5c2:	4413      	add	r3, r2
 800f5c4:	781a      	ldrb	r2, [r3, #0]
 800f5c6:	4b6e      	ldr	r3, [pc, #440]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f5c8:	68d9      	ldr	r1, [r3, #12]
 800f5ca:	4b6d      	ldr	r3, [pc, #436]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f5cc:	7a9b      	ldrb	r3, [r3, #10]
 800f5ce:	1c58      	adds	r0, r3, #1
 800f5d0:	b2c4      	uxtb	r4, r0
 800f5d2:	486b      	ldr	r0, [pc, #428]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f5d4:	7284      	strb	r4, [r0, #10]
 800f5d6:	440b      	add	r3, r1
 800f5d8:	3201      	adds	r2, #1
 800f5da:	b2d2      	uxtb	r2, r2
 800f5dc:	701a      	strb	r2, [r3, #0]
                     i++ )
 800f5de:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f5e8:	4b65      	ldr	r3, [pc, #404]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f5ea:	7a5a      	ldrb	r2, [r3, #9]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	7b1b      	ldrb	r3, [r3, #12]
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	bf28      	it	cs
 800f5f4:	4613      	movcs	r3, r2
 800f5f6:	b2db      	uxtb	r3, r3
 800f5f8:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d3d9      	bcc.n	800f5b4 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800f600:	e178      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800f602:	4b5f      	ldr	r3, [pc, #380]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f604:	68da      	ldr	r2, [r3, #12]
 800f606:	4b5e      	ldr	r3, [pc, #376]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f608:	7a9b      	ldrb	r3, [r3, #10]
 800f60a:	1c59      	adds	r1, r3, #1
 800f60c:	b2c8      	uxtb	r0, r1
 800f60e:	495c      	ldr	r1, [pc, #368]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f610:	7288      	strb	r0, [r1, #10]
 800f612:	4413      	add	r3, r2
 800f614:	2209      	movs	r2, #9
 800f616:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800f618:	4b59      	ldr	r3, [pc, #356]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f61a:	8a18      	ldrh	r0, [r3, #16]
 800f61c:	4b58      	ldr	r3, [pc, #352]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f61e:	68da      	ldr	r2, [r3, #12]
 800f620:	4b57      	ldr	r3, [pc, #348]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f622:	7a9b      	ldrb	r3, [r3, #10]
 800f624:	1c59      	adds	r1, r3, #1
 800f626:	b2cc      	uxtb	r4, r1
 800f628:	4955      	ldr	r1, [pc, #340]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f62a:	728c      	strb	r4, [r1, #10]
 800f62c:	4413      	add	r3, r2
 800f62e:	b2c2      	uxtb	r2, r0
 800f630:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800f632:	4b53      	ldr	r3, [pc, #332]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f634:	8a1b      	ldrh	r3, [r3, #16]
 800f636:	0a1b      	lsrs	r3, r3, #8
 800f638:	b298      	uxth	r0, r3
 800f63a:	4b51      	ldr	r3, [pc, #324]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f63c:	68da      	ldr	r2, [r3, #12]
 800f63e:	4b50      	ldr	r3, [pc, #320]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f640:	7a9b      	ldrb	r3, [r3, #10]
 800f642:	1c59      	adds	r1, r3, #1
 800f644:	b2cc      	uxtb	r4, r1
 800f646:	494e      	ldr	r1, [pc, #312]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f648:	728c      	strb	r4, [r1, #10]
 800f64a:	4413      	add	r3, r2
 800f64c:	b2c2      	uxtb	r2, r0
 800f64e:	701a      	strb	r2, [r3, #0]
                break;
 800f650:	e150      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800f652:	4b4b      	ldr	r3, [pc, #300]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f654:	2200      	movs	r2, #0
 800f656:	821a      	strh	r2, [r3, #16]
                break;
 800f658:	e14c      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800f65a:	2305      	movs	r3, #5
 800f65c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800f660:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f664:	4618      	mov	r0, r3
 800f666:	f004 fe51 	bl	801430c <LoRaMacMlmeRequest>
                break;
 800f66a:	e143      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800f66c:	4b45      	ldr	r3, [pc, #276]	@ (800f784 <LmhpComplianceOnMcpsIndication+0x5fc>)
 800f66e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f670:	4798      	blx	r3
                break;
 800f672:	e13f      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	689a      	ldr	r2, [r3, #8]
 800f678:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f67c:	1c59      	adds	r1, r3, #1
 800f67e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f682:	4413      	add	r3, r2
 800f684:	781a      	ldrb	r2, [r3, #0]
 800f686:	4b3e      	ldr	r3, [pc, #248]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f688:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800f68a:	4b3c      	ldr	r3, [pc, #240]	@ (800f77c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	2b00      	cmp	r3, #0
 800f692:	f000 812c 	beq.w	800f8ee <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800f696:	4b39      	ldr	r3, [pc, #228]	@ (800f77c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	68db      	ldr	r3, [r3, #12]
 800f69c:	4a38      	ldr	r2, [pc, #224]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f69e:	7d52      	ldrb	r2, [r2, #21]
 800f6a0:	4610      	mov	r0, r2
 800f6a2:	4798      	blx	r3
                }
                break;
 800f6a4:	e123      	b.n	800f8ee <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	7b1b      	ldrb	r3, [r3, #12]
 800f6aa:	2b07      	cmp	r3, #7
 800f6ac:	f040 8121 	bne.w	800f8f2 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800f6b0:	2306      	movs	r3, #6
 800f6b2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	689a      	ldr	r2, [r3, #8]
 800f6ba:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f6be:	4413      	add	r3, r2
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	b21a      	sxth	r2, r3
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6899      	ldr	r1, [r3, #8]
 800f6c8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	440b      	add	r3, r1
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	b21b      	sxth	r3, r3
 800f6d4:	021b      	lsls	r3, r3, #8
 800f6d6:	b21b      	sxth	r3, r3
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	b21b      	sxth	r3, r3
 800f6dc:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800f6de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                    cmdIndex += 2;
 800f6e2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f6e6:	3302      	adds	r3, #2
 800f6e8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	689a      	ldr	r2, [r3, #8]
 800f6f0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f6f4:	4413      	add	r3, r2
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	689a      	ldr	r2, [r3, #8]
 800f6fe:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f702:	3301      	adds	r3, #1
 800f704:	4413      	add	r3, r2
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	021b      	lsls	r3, r3, #8
 800f70a:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6899      	ldr	r1, [r3, #8]
 800f712:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f716:	3302      	adds	r3, #2
 800f718:	440b      	add	r3, r1
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800f71e:	4313      	orrs	r3, r2
 800f720:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800f722:	2364      	movs	r3, #100	@ 0x64
 800f724:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800f728:	647b      	str	r3, [r7, #68]	@ 0x44
                        100;
                    cmdIndex += 3;
 800f72a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f72e:	3303      	adds	r3, #3
 800f730:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	689a      	ldr	r2, [r3, #8]
 800f738:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f73c:	1c59      	adds	r1, r3, #1
 800f73e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f742:	4413      	add	r3, r2
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	b25b      	sxtb	r3, r3
 800f748:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800f74c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f750:	4618      	mov	r0, r3
 800f752:	f004 fddb 	bl	801430c <LoRaMacMlmeRequest>
                }
                break;
 800f756:	e0cc      	b.n	800f8f2 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800f758:	233b      	movs	r3, #59	@ 0x3b
 800f75a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                mibReq.Param.IsCertPortOn = false;
 800f75e:	2300      	movs	r3, #0
 800f760:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800f764:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f768:	4618      	mov	r0, r3
 800f76a:	f004 f9cd 	bl	8013b08 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800f76e:	4b04      	ldr	r3, [pc, #16]	@ (800f780 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f770:	2201      	movs	r2, #1
 800f772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800f776:	e0bd      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
 800f778:	08020f80 	.word	0x08020f80
 800f77c:	2000097c 	.word	0x2000097c
 800f780:	20000944 	.word	0x20000944
 800f784:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800f788:	232a      	movs	r3, #42	@ 0x2a
 800f78a:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800f78c:	f107 0308 	add.w	r3, r7, #8
 800f790:	4618      	mov	r0, r3
 800f792:	f003 ffe1 	bl	8013758 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	63bb      	str	r3, [r7, #56]	@ 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	637b      	str	r3, [r7, #52]	@ 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800f79e:	4b65      	ldr	r3, [pc, #404]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f7a0:	68da      	ldr	r2, [r3, #12]
 800f7a2:	4b64      	ldr	r3, [pc, #400]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f7a4:	7a9b      	ldrb	r3, [r3, #10]
 800f7a6:	1c59      	adds	r1, r3, #1
 800f7a8:	b2c8      	uxtb	r0, r1
 800f7aa:	4962      	ldr	r1, [pc, #392]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f7ac:	7288      	strb	r0, [r1, #10]
 800f7ae:	4413      	add	r3, r2
 800f7b0:	227f      	movs	r2, #127	@ 0x7f
 800f7b2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800f7b4:	4b60      	ldr	r3, [pc, #384]	@ (800f938 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	4b5e      	ldr	r3, [pc, #376]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f7ba:	68d9      	ldr	r1, [r3, #12]
 800f7bc:	4b5d      	ldr	r3, [pc, #372]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f7be:	7a9b      	ldrb	r3, [r3, #10]
 800f7c0:	1c58      	adds	r0, r3, #1
 800f7c2:	b2c4      	uxtb	r4, r0
 800f7c4:	485b      	ldr	r0, [pc, #364]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f7c6:	7284      	strb	r4, [r0, #10]
 800f7c8:	440b      	add	r3, r1
 800f7ca:	78d2      	ldrb	r2, [r2, #3]
 800f7cc:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800f7ce:	4b5a      	ldr	r3, [pc, #360]	@ (800f938 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	4b58      	ldr	r3, [pc, #352]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f7d4:	68d9      	ldr	r1, [r3, #12]
 800f7d6:	4b57      	ldr	r3, [pc, #348]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f7d8:	7a9b      	ldrb	r3, [r3, #10]
 800f7da:	1c58      	adds	r0, r3, #1
 800f7dc:	b2c4      	uxtb	r4, r0
 800f7de:	4855      	ldr	r0, [pc, #340]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f7e0:	7284      	strb	r4, [r0, #10]
 800f7e2:	440b      	add	r3, r1
 800f7e4:	7892      	ldrb	r2, [r2, #2]
 800f7e6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800f7e8:	4b53      	ldr	r3, [pc, #332]	@ (800f938 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	4b51      	ldr	r3, [pc, #324]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f7ee:	68d9      	ldr	r1, [r3, #12]
 800f7f0:	4b50      	ldr	r3, [pc, #320]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f7f2:	7a9b      	ldrb	r3, [r3, #10]
 800f7f4:	1c58      	adds	r0, r3, #1
 800f7f6:	b2c4      	uxtb	r4, r0
 800f7f8:	484e      	ldr	r0, [pc, #312]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f7fa:	7284      	strb	r4, [r0, #10]
 800f7fc:	440b      	add	r3, r1
 800f7fe:	7852      	ldrb	r2, [r2, #1]
 800f800:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800f802:	4b4d      	ldr	r3, [pc, #308]	@ (800f938 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	4b4b      	ldr	r3, [pc, #300]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f808:	68d9      	ldr	r1, [r3, #12]
 800f80a:	4b4a      	ldr	r3, [pc, #296]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f80c:	7a9b      	ldrb	r3, [r3, #10]
 800f80e:	1c58      	adds	r0, r3, #1
 800f810:	b2c4      	uxtb	r4, r0
 800f812:	4848      	ldr	r0, [pc, #288]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f814:	7284      	strb	r4, [r0, #10]
 800f816:	440b      	add	r3, r1
 800f818:	7812      	ldrb	r2, [r2, #0]
 800f81a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800f81c:	4b45      	ldr	r3, [pc, #276]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f81e:	68da      	ldr	r2, [r3, #12]
 800f820:	4b44      	ldr	r3, [pc, #272]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f822:	7a9b      	ldrb	r3, [r3, #10]
 800f824:	1c59      	adds	r1, r3, #1
 800f826:	b2c8      	uxtb	r0, r1
 800f828:	4942      	ldr	r1, [pc, #264]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f82a:	7288      	strb	r0, [r1, #10]
 800f82c:	4413      	add	r3, r2
 800f82e:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800f832:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800f834:	4b3f      	ldr	r3, [pc, #252]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f836:	68da      	ldr	r2, [r3, #12]
 800f838:	4b3e      	ldr	r3, [pc, #248]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f83a:	7a9b      	ldrb	r3, [r3, #10]
 800f83c:	1c59      	adds	r1, r3, #1
 800f83e:	b2c8      	uxtb	r0, r1
 800f840:	493c      	ldr	r1, [pc, #240]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f842:	7288      	strb	r0, [r1, #10]
 800f844:	4413      	add	r3, r2
 800f846:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800f84a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800f84c:	4b39      	ldr	r3, [pc, #228]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f84e:	68da      	ldr	r2, [r3, #12]
 800f850:	4b38      	ldr	r3, [pc, #224]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f852:	7a9b      	ldrb	r3, [r3, #10]
 800f854:	1c59      	adds	r1, r3, #1
 800f856:	b2c8      	uxtb	r0, r1
 800f858:	4936      	ldr	r1, [pc, #216]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f85a:	7288      	strb	r0, [r1, #10]
 800f85c:	4413      	add	r3, r2
 800f85e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800f862:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800f864:	4b33      	ldr	r3, [pc, #204]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f866:	68da      	ldr	r2, [r3, #12]
 800f868:	4b32      	ldr	r3, [pc, #200]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f86a:	7a9b      	ldrb	r3, [r3, #10]
 800f86c:	1c59      	adds	r1, r3, #1
 800f86e:	b2c8      	uxtb	r0, r1
 800f870:	4930      	ldr	r1, [pc, #192]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f872:	7288      	strb	r0, [r1, #10]
 800f874:	4413      	add	r3, r2
 800f876:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f87a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800f87c:	4b2d      	ldr	r3, [pc, #180]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f87e:	68da      	ldr	r2, [r3, #12]
 800f880:	4b2c      	ldr	r3, [pc, #176]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f882:	7a9b      	ldrb	r3, [r3, #10]
 800f884:	1c59      	adds	r1, r3, #1
 800f886:	b2c8      	uxtb	r0, r1
 800f888:	492a      	ldr	r1, [pc, #168]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f88a:	7288      	strb	r0, [r1, #10]
 800f88c:	4413      	add	r3, r2
 800f88e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800f892:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800f894:	4b27      	ldr	r3, [pc, #156]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f896:	68da      	ldr	r2, [r3, #12]
 800f898:	4b26      	ldr	r3, [pc, #152]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f89a:	7a9b      	ldrb	r3, [r3, #10]
 800f89c:	1c59      	adds	r1, r3, #1
 800f89e:	b2c8      	uxtb	r0, r1
 800f8a0:	4924      	ldr	r1, [pc, #144]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f8a2:	7288      	strb	r0, [r1, #10]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800f8aa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800f8ac:	4b21      	ldr	r3, [pc, #132]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f8ae:	68da      	ldr	r2, [r3, #12]
 800f8b0:	4b20      	ldr	r3, [pc, #128]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f8b2:	7a9b      	ldrb	r3, [r3, #10]
 800f8b4:	1c59      	adds	r1, r3, #1
 800f8b6:	b2c8      	uxtb	r0, r1
 800f8b8:	491e      	ldr	r1, [pc, #120]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f8ba:	7288      	strb	r0, [r1, #10]
 800f8bc:	4413      	add	r3, r2
 800f8be:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800f8c2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800f8c4:	4b1b      	ldr	r3, [pc, #108]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f8c6:	68da      	ldr	r2, [r3, #12]
 800f8c8:	4b1a      	ldr	r3, [pc, #104]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f8ca:	7a9b      	ldrb	r3, [r3, #10]
 800f8cc:	1c59      	adds	r1, r3, #1
 800f8ce:	b2c8      	uxtb	r0, r1
 800f8d0:	4918      	ldr	r1, [pc, #96]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f8d2:	7288      	strb	r0, [r1, #10]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800f8da:	701a      	strb	r2, [r3, #0]
                break;
 800f8dc:	e00a      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800f8de:	bf00      	nop
 800f8e0:	e008      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f8e2:	bf00      	nop
 800f8e4:	e006      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f8e6:	bf00      	nop
 800f8e8:	e004      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f8ea:	bf00      	nop
 800f8ec:	e002      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f8ee:	bf00      	nop
 800f8f0:	e000      	b.n	800f8f4 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f8f2:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800f8f4:	4b0f      	ldr	r3, [pc, #60]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f8f6:	7a9b      	ldrb	r3, [r3, #10]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d00c      	beq.n	800f916 <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800f8fc:	4b0f      	ldr	r3, [pc, #60]	@ (800f93c <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f8fe:	7a5b      	ldrb	r3, [r3, #9]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d114      	bne.n	800f92e <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800f904:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f908:	480c      	ldr	r0, [pc, #48]	@ (800f93c <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f90a:	f00d fa31 	bl	801cd70 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800f90e:	480b      	ldr	r0, [pc, #44]	@ (800f93c <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f910:	f00d f950 	bl	801cbb4 <UTIL_TIMER_Start>
 800f914:	e00b      	b.n	800f92e <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800f916:	4809      	ldr	r0, [pc, #36]	@ (800f93c <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f918:	f00d f9ba 	bl	801cc90 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800f91c:	4b05      	ldr	r3, [pc, #20]	@ (800f934 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f91e:	2200      	movs	r2, #0
 800f920:	705a      	strb	r2, [r3, #1]
 800f922:	e004      	b.n	800f92e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f924:	bf00      	nop
 800f926:	e002      	b.n	800f92e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f928:	bf00      	nop
 800f92a:	e000      	b.n	800f92e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f92c:	bf00      	nop
    }
}
 800f92e:	3790      	adds	r7, #144	@ 0x90
 800f930:	46bd      	mov	sp, r7
 800f932:	bdb0      	pop	{r4, r5, r7, pc}
 800f934:	20000944 	.word	0x20000944
 800f938:	2000097c 	.word	0x2000097c
 800f93c:	20000980 	.word	0x20000980

0800f940 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800f948:	bf00      	nop
    }
}
 800f94a:	bf00      	nop
 800f94c:	370c      	adds	r7, #12
 800f94e:	46bd      	mov	sp, r7
 800f950:	bc80      	pop	{r7}
 800f952:	4770      	bx	lr

0800f954 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f95c:	4b05      	ldr	r3, [pc, #20]	@ (800f974 <LmhpComplianceOnMlmeIndication+0x20>)
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	f083 0301 	eor.w	r3, r3, #1
 800f964:	b2db      	uxtb	r3, r3
 800f966:	2b00      	cmp	r3, #0
    {
        return;
 800f968:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bc80      	pop	{r7}
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop
 800f974:	20000944 	.word	0x20000944

0800f978 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800f980:	4b08      	ldr	r3, [pc, #32]	@ (800f9a4 <OnProcessTimer+0x2c>)
 800f982:	7a9b      	ldrb	r3, [r3, #10]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d002      	beq.n	800f98e <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800f988:	4b06      	ldr	r3, [pc, #24]	@ (800f9a4 <OnProcessTimer+0x2c>)
 800f98a:	2201      	movs	r2, #1
 800f98c:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800f98e:	4b06      	ldr	r3, [pc, #24]	@ (800f9a8 <OnProcessTimer+0x30>)
 800f990:	695b      	ldr	r3, [r3, #20]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d002      	beq.n	800f99c <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800f996:	4b04      	ldr	r3, [pc, #16]	@ (800f9a8 <OnProcessTimer+0x30>)
 800f998:	695b      	ldr	r3, [r3, #20]
 800f99a:	4798      	blx	r3
    }
}
 800f99c:	bf00      	nop
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}
 800f9a4:	20000944 	.word	0x20000944
 800f9a8:	200000d8 	.word	0x200000d8

0800f9ac <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	370c      	adds	r7, #12
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bc80      	pop	{r7}
 800f9be:	4770      	bx	lr

0800f9c0 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	6039      	str	r1, [r7, #0]
 800f9ca:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800f9cc:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bc80      	pop	{r7}
 800f9d8:	4770      	bx	lr
	...

0800f9dc <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800f9dc:	b590      	push	{r4, r7, lr}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f9e2:	f00d fa6f 	bl	801cec4 <UTIL_TIMER_GetCurrentTime>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	4a0f      	ldr	r2, [pc, #60]	@ (800fa28 <OnRadioTxDone+0x4c>)
 800f9ea:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f9ec:	4c0f      	ldr	r4, [pc, #60]	@ (800fa2c <OnRadioTxDone+0x50>)
 800f9ee:	463b      	mov	r3, r7
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f00c feb3 	bl	801c75c <SysTimeGet>
 800f9f6:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800f9fa:	463a      	mov	r2, r7
 800f9fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa00:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800fa04:	4a0a      	ldr	r2, [pc, #40]	@ (800fa30 <OnRadioTxDone+0x54>)
 800fa06:	7813      	ldrb	r3, [r2, #0]
 800fa08:	f043 0320 	orr.w	r3, r3, #32
 800fa0c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fa0e:	f003 fa9f 	bl	8012f50 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800fa12:	4b08      	ldr	r3, [pc, #32]	@ (800fa34 <OnRadioTxDone+0x58>)
 800fa14:	2201      	movs	r2, #1
 800fa16:	2100      	movs	r1, #0
 800fa18:	2002      	movs	r0, #2
 800fa1a:	f00d fb43 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800fa1e:	bf00      	nop
 800fa20:	370c      	adds	r7, #12
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd90      	pop	{r4, r7, pc}
 800fa26:	bf00      	nop
 800fa28:	20001ad8 	.word	0x20001ad8
 800fa2c:	20000998 	.word	0x20000998
 800fa30:	20001ad4 	.word	0x20001ad4
 800fa34:	08020fac 	.word	0x08020fac

0800fa38 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	4608      	mov	r0, r1
 800fa42:	4611      	mov	r1, r2
 800fa44:	461a      	mov	r2, r3
 800fa46:	4603      	mov	r3, r0
 800fa48:	817b      	strh	r3, [r7, #10]
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	813b      	strh	r3, [r7, #8]
 800fa4e:	4613      	mov	r3, r2
 800fa50:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800fa52:	f00d fa37 	bl	801cec4 <UTIL_TIMER_GetCurrentTime>
 800fa56:	4603      	mov	r3, r0
 800fa58:	4a11      	ldr	r2, [pc, #68]	@ (800faa0 <OnRadioRxDone+0x68>)
 800fa5a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800fa5c:	4a10      	ldr	r2, [pc, #64]	@ (800faa0 <OnRadioRxDone+0x68>)
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800fa62:	4a0f      	ldr	r2, [pc, #60]	@ (800faa0 <OnRadioRxDone+0x68>)
 800fa64:	897b      	ldrh	r3, [r7, #10]
 800fa66:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800fa68:	4a0d      	ldr	r2, [pc, #52]	@ (800faa0 <OnRadioRxDone+0x68>)
 800fa6a:	893b      	ldrh	r3, [r7, #8]
 800fa6c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800fa6e:	4a0c      	ldr	r2, [pc, #48]	@ (800faa0 <OnRadioRxDone+0x68>)
 800fa70:	79fb      	ldrb	r3, [r7, #7]
 800fa72:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800fa74:	4a0b      	ldr	r2, [pc, #44]	@ (800faa4 <OnRadioRxDone+0x6c>)
 800fa76:	7813      	ldrb	r3, [r2, #0]
 800fa78:	f043 0310 	orr.w	r3, r3, #16
 800fa7c:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800fa7e:	4a09      	ldr	r2, [pc, #36]	@ (800faa4 <OnRadioRxDone+0x6c>)
 800fa80:	7813      	ldrb	r3, [r2, #0]
 800fa82:	f043 0301 	orr.w	r3, r3, #1
 800fa86:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800fa88:	f003 fa62 	bl	8012f50 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800fa8c:	4b06      	ldr	r3, [pc, #24]	@ (800faa8 <OnRadioRxDone+0x70>)
 800fa8e:	2201      	movs	r2, #1
 800fa90:	2100      	movs	r1, #0
 800fa92:	2002      	movs	r0, #2
 800fa94:	f00d fb06 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800fa98:	bf00      	nop
 800fa9a:	3710      	adds	r7, #16
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	20001adc 	.word	0x20001adc
 800faa4:	20001ad4 	.word	0x20001ad4
 800faa8:	08020fbc 	.word	0x08020fbc

0800faac <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800fab0:	4a07      	ldr	r2, [pc, #28]	@ (800fad0 <OnRadioTxTimeout+0x24>)
 800fab2:	7813      	ldrb	r3, [r2, #0]
 800fab4:	f043 0308 	orr.w	r3, r3, #8
 800fab8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800faba:	f003 fa49 	bl	8012f50 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800fabe:	4b05      	ldr	r3, [pc, #20]	@ (800fad4 <OnRadioTxTimeout+0x28>)
 800fac0:	2201      	movs	r2, #1
 800fac2:	2100      	movs	r1, #0
 800fac4:	2002      	movs	r0, #2
 800fac6:	f00d faed 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800faca:	bf00      	nop
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	20001ad4 	.word	0x20001ad4
 800fad4:	08020fcc 	.word	0x08020fcc

0800fad8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800fadc:	4a04      	ldr	r2, [pc, #16]	@ (800faf0 <OnRadioRxError+0x18>)
 800fade:	7813      	ldrb	r3, [r2, #0]
 800fae0:	f043 0304 	orr.w	r3, r3, #4
 800fae4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fae6:	f003 fa33 	bl	8012f50 <OnMacProcessNotify>
}
 800faea:	bf00      	nop
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop
 800faf0:	20001ad4 	.word	0x20001ad4

0800faf4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800faf8:	4a07      	ldr	r2, [pc, #28]	@ (800fb18 <OnRadioRxTimeout+0x24>)
 800fafa:	7813      	ldrb	r3, [r2, #0]
 800fafc:	f043 0302 	orr.w	r3, r3, #2
 800fb00:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fb02:	f003 fa25 	bl	8012f50 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800fb06:	4b05      	ldr	r3, [pc, #20]	@ (800fb1c <OnRadioRxTimeout+0x28>)
 800fb08:	2201      	movs	r2, #1
 800fb0a:	2100      	movs	r1, #0
 800fb0c:	2002      	movs	r0, #2
 800fb0e:	f00d fac9 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800fb12:	bf00      	nop
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	20001ad4 	.word	0x20001ad4
 800fb1c:	08020fdc 	.word	0x08020fdc

0800fb20 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800fb20:	b480      	push	{r7}
 800fb22:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fb24:	4b08      	ldr	r3, [pc, #32]	@ (800fb48 <UpdateRxSlotIdleState+0x28>)
 800fb26:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	d004      	beq.n	800fb38 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800fb2e:	4b07      	ldr	r3, [pc, #28]	@ (800fb4c <UpdateRxSlotIdleState+0x2c>)
 800fb30:	2206      	movs	r2, #6
 800fb32:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800fb36:	e003      	b.n	800fb40 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fb38:	4b04      	ldr	r3, [pc, #16]	@ (800fb4c <UpdateRxSlotIdleState+0x2c>)
 800fb3a:	2202      	movs	r2, #2
 800fb3c:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800fb40:	bf00      	nop
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bc80      	pop	{r7}
 800fb46:	4770      	bx	lr
 800fb48:	20000ecc 	.word	0x20000ecc
 800fb4c:	20000998 	.word	0x20000998

0800fb50 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b092      	sub	sp, #72	@ 0x48
 800fb54:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fb56:	4b4a      	ldr	r3, [pc, #296]	@ (800fc80 <ProcessRadioTxDone+0x130>)
 800fb58:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fb5c:	2b02      	cmp	r3, #2
 800fb5e:	d002      	beq.n	800fb66 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800fb60:	4b48      	ldr	r3, [pc, #288]	@ (800fc84 <ProcessRadioTxDone+0x134>)
 800fb62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb64:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb66:	f3ef 8310 	mrs	r3, PRIMASK
 800fb6a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800fb6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800fb6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800fb70:	b672      	cpsid	i
}
 800fb72:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800fb74:	f00d f9a6 	bl	801cec4 <UTIL_TIMER_GetCurrentTime>
 800fb78:	4602      	mov	r2, r0
 800fb7a:	4b43      	ldr	r3, [pc, #268]	@ (800fc88 <ProcessRadioTxDone+0x138>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	1ad3      	subs	r3, r2, r3
 800fb80:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800fb82:	4b42      	ldr	r3, [pc, #264]	@ (800fc8c <ProcessRadioTxDone+0x13c>)
 800fb84:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800fb88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb8a:	1ad3      	subs	r3, r2, r3
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	4840      	ldr	r0, [pc, #256]	@ (800fc90 <ProcessRadioTxDone+0x140>)
 800fb90:	f00d f8ee 	bl	801cd70 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800fb94:	483e      	ldr	r0, [pc, #248]	@ (800fc90 <ProcessRadioTxDone+0x140>)
 800fb96:	f00d f80d 	bl	801cbb4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800fb9a:	4b3c      	ldr	r3, [pc, #240]	@ (800fc8c <ProcessRadioTxDone+0x13c>)
 800fb9c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800fba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba2:	1ad3      	subs	r3, r2, r3
 800fba4:	4619      	mov	r1, r3
 800fba6:	483b      	ldr	r0, [pc, #236]	@ (800fc94 <ProcessRadioTxDone+0x144>)
 800fba8:	f00d f8e2 	bl	801cd70 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800fbac:	4839      	ldr	r0, [pc, #228]	@ (800fc94 <ProcessRadioTxDone+0x144>)
 800fbae:	f00d f801 	bl	801cbb4 <UTIL_TIMER_Start>
 800fbb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbb4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fbb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbb8:	f383 8810 	msr	PRIMASK, r3
}
 800fbbc:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800fbbe:	4b33      	ldr	r3, [pc, #204]	@ (800fc8c <ProcessRadioTxDone+0x13c>)
 800fbc0:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d01a      	beq.n	800fbfe <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800fbc8:	2315      	movs	r3, #21
 800fbca:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fbce:	4b2c      	ldr	r3, [pc, #176]	@ (800fc80 <ProcessRadioTxDone+0x130>)
 800fbd0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fbd4:	f107 0220 	add.w	r2, r7, #32
 800fbd8:	4611      	mov	r1, r2
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f006 ff40 	bl	8016a60 <RegionGetPhyParam>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800fbe4:	4b29      	ldr	r3, [pc, #164]	@ (800fc8c <ProcessRadioTxDone+0x13c>)
 800fbe6:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800fbea:	69fb      	ldr	r3, [r7, #28]
 800fbec:	4413      	add	r3, r2
 800fbee:	4619      	mov	r1, r3
 800fbf0:	4829      	ldr	r0, [pc, #164]	@ (800fc98 <ProcessRadioTxDone+0x148>)
 800fbf2:	f00d f8bd 	bl	801cd70 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800fbf6:	4828      	ldr	r0, [pc, #160]	@ (800fc98 <ProcessRadioTxDone+0x148>)
 800fbf8:	f00c ffdc 	bl	801cbb4 <UTIL_TIMER_Start>
 800fbfc:	e003      	b.n	800fc06 <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fbfe:	4b23      	ldr	r3, [pc, #140]	@ (800fc8c <ProcessRadioTxDone+0x13c>)
 800fc00:	2200      	movs	r2, #0
 800fc02:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800fc06:	4b20      	ldr	r3, [pc, #128]	@ (800fc88 <ProcessRadioTxDone+0x138>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4a1d      	ldr	r2, [pc, #116]	@ (800fc80 <ProcessRadioTxDone+0x130>)
 800fc0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800fc0e:	4b1f      	ldr	r3, [pc, #124]	@ (800fc8c <ProcessRadioTxDone+0x13c>)
 800fc10:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800fc14:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800fc16:	4b1c      	ldr	r3, [pc, #112]	@ (800fc88 <ProcessRadioTxDone+0x138>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fc1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc20:	4618      	mov	r0, r3
 800fc22:	f00c fdd3 	bl	801c7cc <SysTimeGetMcuTime>
 800fc26:	4638      	mov	r0, r7
 800fc28:	4b15      	ldr	r3, [pc, #84]	@ (800fc80 <ProcessRadioTxDone+0x130>)
 800fc2a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800fc2e:	9200      	str	r2, [sp, #0]
 800fc30:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800fc34:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800fc38:	ca06      	ldmia	r2, {r1, r2}
 800fc3a:	f00c fd28 	bl	801c68e <SysTimeSub>
 800fc3e:	f107 0314 	add.w	r3, r7, #20
 800fc42:	463a      	mov	r2, r7
 800fc44:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc48:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800fc4c:	4b0f      	ldr	r3, [pc, #60]	@ (800fc8c <ProcessRadioTxDone+0x13c>)
 800fc4e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800fc52:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800fc54:	2301      	movs	r3, #1
 800fc56:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fc58:	4b09      	ldr	r3, [pc, #36]	@ (800fc80 <ProcessRadioTxDone+0x130>)
 800fc5a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d101      	bne.n	800fc66 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800fc62:	2300      	movs	r3, #0
 800fc64:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800fc66:	4b06      	ldr	r3, [pc, #24]	@ (800fc80 <ProcessRadioTxDone+0x130>)
 800fc68:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fc6c:	f107 0208 	add.w	r2, r7, #8
 800fc70:	4611      	mov	r1, r2
 800fc72:	4618      	mov	r0, r3
 800fc74:	f006 ff0c 	bl	8016a90 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800fc78:	bf00      	nop
 800fc7a:	3740      	adds	r7, #64	@ 0x40
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	20000ecc 	.word	0x20000ecc
 800fc84:	08021620 	.word	0x08021620
 800fc88:	20001ad8 	.word	0x20001ad8
 800fc8c:	20000998 	.word	0x20000998
 800fc90:	20000d18 	.word	0x20000d18
 800fc94:	20000d30 	.word	0x20000d30
 800fc98:	20000d98 	.word	0x20000d98

0800fc9c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800fca0:	4b10      	ldr	r3, [pc, #64]	@ (800fce4 <PrepareRxDoneAbort+0x48>)
 800fca2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcaa:	4a0e      	ldr	r2, [pc, #56]	@ (800fce4 <PrepareRxDoneAbort+0x48>)
 800fcac:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800fcb0:	4b0c      	ldr	r3, [pc, #48]	@ (800fce4 <PrepareRxDoneAbort+0x48>)
 800fcb2:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d002      	beq.n	800fcc0 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800fcba:	2000      	movs	r0, #0
 800fcbc:	f001 fa12 	bl	80110e4 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800fcc0:	4a08      	ldr	r2, [pc, #32]	@ (800fce4 <PrepareRxDoneAbort+0x48>)
 800fcc2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fcc6:	f043 0302 	orr.w	r3, r3, #2
 800fcca:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fcce:	4a05      	ldr	r2, [pc, #20]	@ (800fce4 <PrepareRxDoneAbort+0x48>)
 800fcd0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800fcd4:	f043 0310 	orr.w	r3, r3, #16
 800fcd8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800fcdc:	f7ff ff20 	bl	800fb20 <UpdateRxSlotIdleState>
}
 800fce0:	bf00      	nop
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	20000998 	.word	0x20000998

0800fce8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800fce8:	b590      	push	{r4, r7, lr}
 800fcea:	b0a9      	sub	sp, #164	@ 0xa4
 800fcec:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fcee:	2312      	movs	r3, #18
 800fcf0:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800fcf4:	4ba1      	ldr	r3, [pc, #644]	@ (800ff7c <ProcessRadioRxDone+0x294>)
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800fcfc:	4b9f      	ldr	r3, [pc, #636]	@ (800ff7c <ProcessRadioRxDone+0x294>)
 800fcfe:	891b      	ldrh	r3, [r3, #8]
 800fd00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800fd04:	4b9d      	ldr	r3, [pc, #628]	@ (800ff7c <ProcessRadioRxDone+0x294>)
 800fd06:	895b      	ldrh	r3, [r3, #10]
 800fd08:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800fd0c:	4b9b      	ldr	r3, [pc, #620]	@ (800ff7c <ProcessRadioRxDone+0x294>)
 800fd0e:	7b1b      	ldrb	r3, [r3, #12]
 800fd10:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800fd14:	2300      	movs	r3, #0
 800fd16:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800fd1e:	4b98      	ldr	r3, [pc, #608]	@ (800ff80 <ProcessRadioRxDone+0x298>)
 800fd20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fd24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800fd34:	2301      	movs	r3, #1
 800fd36:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800fd3a:	4a92      	ldr	r2, [pc, #584]	@ (800ff84 <ProcessRadioRxDone+0x29c>)
 800fd3c:	7813      	ldrb	r3, [r2, #0]
 800fd3e:	f023 0301 	bic.w	r3, r3, #1
 800fd42:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800fd44:	4b90      	ldr	r3, [pc, #576]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fd46:	2200      	movs	r2, #0
 800fd48:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800fd4c:	4a8e      	ldr	r2, [pc, #568]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fd4e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800fd52:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800fd56:	4a8c      	ldr	r2, [pc, #560]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fd58:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800fd5c:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800fd60:	4b89      	ldr	r3, [pc, #548]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fd62:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800fd66:	4b88      	ldr	r3, [pc, #544]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fd68:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800fd6c:	4b86      	ldr	r3, [pc, #536]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800fd74:	4b84      	ldr	r3, [pc, #528]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fd76:	2200      	movs	r2, #0
 800fd78:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800fd7c:	4b82      	ldr	r3, [pc, #520]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fd7e:	2200      	movs	r2, #0
 800fd80:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800fd84:	4b80      	ldr	r3, [pc, #512]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fd86:	2200      	movs	r2, #0
 800fd88:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800fd8c:	4b7e      	ldr	r3, [pc, #504]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fd8e:	2200      	movs	r2, #0
 800fd90:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800fd94:	4b7c      	ldr	r3, [pc, #496]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fd96:	2200      	movs	r2, #0
 800fd98:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800fd9c:	4b7a      	ldr	r3, [pc, #488]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800fda4:	4b78      	ldr	r3, [pc, #480]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fda6:	2200      	movs	r2, #0
 800fda8:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fdac:	4b76      	ldr	r3, [pc, #472]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800fdb4:	4b74      	ldr	r3, [pc, #464]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800fdbc:	4b72      	ldr	r3, [pc, #456]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800fdc4:	4b70      	ldr	r3, [pc, #448]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800fdcc:	4b6f      	ldr	r3, [pc, #444]	@ (800ff8c <ProcessRadioRxDone+0x2a4>)
 800fdce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdd0:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800fdd2:	4b6d      	ldr	r3, [pc, #436]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fdd4:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d102      	bne.n	800fde2 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800fddc:	486c      	ldr	r0, [pc, #432]	@ (800ff90 <ProcessRadioRxDone+0x2a8>)
 800fdde:	f00c ff57 	bl	801cc90 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800fde2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fde6:	4619      	mov	r1, r3
 800fde8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800fdec:	f004 feba 	bl	8014b64 <LoRaMacClassBRxBeacon>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d00b      	beq.n	800fe0e <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800fdf6:	4a64      	ldr	r2, [pc, #400]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fdf8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800fdfc:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800fe00:	4a61      	ldr	r2, [pc, #388]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fe02:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800fe06:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800fe0a:	f000 bc8d 	b.w	8010728 <ProcessRadioRxDone+0xa40>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fe0e:	4b5c      	ldr	r3, [pc, #368]	@ (800ff80 <ProcessRadioRxDone+0x298>)
 800fe10:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d11e      	bne.n	800fe56 <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fe18:	f004 feb7 	bl	8014b8a <LoRaMacClassBIsPingExpected>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d00a      	beq.n	800fe38 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fe22:	2000      	movs	r0, #0
 800fe24:	f004 fe68 	bl	8014af8 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fe28:	2000      	movs	r0, #0
 800fe2a:	f004 fe89 	bl	8014b40 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fe2e:	4b56      	ldr	r3, [pc, #344]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fe30:	2204      	movs	r2, #4
 800fe32:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800fe36:	e00e      	b.n	800fe56 <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fe38:	f004 feae 	bl	8014b98 <LoRaMacClassBIsMulticastExpected>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d009      	beq.n	800fe56 <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fe42:	2000      	movs	r0, #0
 800fe44:	f004 fe62 	bl	8014b0c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fe48:	2000      	movs	r0, #0
 800fe4a:	f004 fe82 	bl	8014b52 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fe4e:	4b4e      	ldr	r3, [pc, #312]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fe50:	2205      	movs	r2, #5
 800fe52:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800fe56:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d107      	bne.n	800fe6e <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe5e:	4b4a      	ldr	r3, [pc, #296]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fe60:	2201      	movs	r2, #1
 800fe62:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800fe66:	f7ff ff19 	bl	800fc9c <PrepareRxDoneAbort>
        return;
 800fe6a:	f000 bc5d 	b.w	8010728 <ProcessRadioRxDone+0xa40>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800fe6e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fe72:	1c5a      	adds	r2, r3, #1
 800fe74:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800fe78:	461a      	mov	r2, r3
 800fe7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fe7e:	4413      	add	r3, r2
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800fe86:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fe8a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	3b01      	subs	r3, #1
 800fe92:	2b06      	cmp	r3, #6
 800fe94:	f200 8419 	bhi.w	80106ca <ProcessRadioRxDone+0x9e2>
 800fe98:	a201      	add	r2, pc, #4	@ (adr r2, 800fea0 <ProcessRadioRxDone+0x1b8>)
 800fe9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe9e:	bf00      	nop
 800fea0:	0800febd 	.word	0x0800febd
 800fea4:	080106cb 	.word	0x080106cb
 800fea8:	080100db 	.word	0x080100db
 800feac:	080106cb 	.word	0x080106cb
 800feb0:	080100d3 	.word	0x080100d3
 800feb4:	080106cb 	.word	0x080106cb
 800feb8:	0801066f 	.word	0x0801066f
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800febc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fec0:	2b10      	cmp	r3, #16
 800fec2:	d807      	bhi.n	800fed4 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fec4:	4b30      	ldr	r3, [pc, #192]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800fec6:	2201      	movs	r2, #1
 800fec8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fecc:	f7ff fee6 	bl	800fc9c <PrepareRxDoneAbort>
                return;
 800fed0:	f000 bc2a 	b.w	8010728 <ProcessRadioRxDone+0xa40>
            }
            macMsgJoinAccept.Buffer = payload;
 800fed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fed8:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800feda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fede:	b2db      	uxtb	r3, r3
 800fee0:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fee2:	4b27      	ldr	r3, [pc, #156]	@ (800ff80 <ProcessRadioRxDone+0x298>)
 800fee4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d007      	beq.n	800fefc <ProcessRadioRxDone+0x214>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800feec:	4b26      	ldr	r3, [pc, #152]	@ (800ff88 <ProcessRadioRxDone+0x2a0>)
 800feee:	2201      	movs	r2, #1
 800fef0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fef4:	f7ff fed2 	bl	800fc9c <PrepareRxDoneAbort>
                return;
 800fef8:	f000 bc16 	b.w	8010728 <ProcessRadioRxDone+0xa40>
            }

            SecureElementGetJoinEui( joinEui );
 800fefc:	1d3b      	adds	r3, r7, #4
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fd ff7e 	bl	800de00 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800ff04:	f107 0214 	add.w	r2, r7, #20
 800ff08:	1d3b      	adds	r3, r7, #4
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	20ff      	movs	r0, #255	@ 0xff
 800ff0e:	f006 f831 	bl	8015f74 <LoRaMacCryptoHandleJoinAccept>
 800ff12:	4603      	mov	r3, r0
 800ff14:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                macCryptoStatus = LoRaMacCryptoHandleJoinAccept( REJOIN_REQ_2, joinEui, &macMsgJoinAccept );
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ff18:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f040 80cc 	bne.w	80100ba <ProcessRadioRxDone+0x3d2>
            {
                VerifyParams_t verifyRxDr;

                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800ff22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ff26:	f003 030f 	and.w	r3, r3, #15
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	2b0f      	cmp	r3, #15
 800ff2e:	d031      	beq.n	800ff94 <ProcessRadioRxDone+0x2ac>
                {
                    verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ff30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ff34:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	b25b      	sxtb	r3, r3
 800ff3c:	703b      	strb	r3, [r7, #0]
                    verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ff3e:	4b10      	ldr	r3, [pc, #64]	@ (800ff80 <ProcessRadioRxDone+0x298>)
 800ff40:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ff44:	707b      	strb	r3, [r7, #1]
                    if( RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR ) == false )
 800ff46:	4b0e      	ldr	r3, [pc, #56]	@ (800ff80 <ProcessRadioRxDone+0x298>)
 800ff48:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ff4c:	4639      	mov	r1, r7
 800ff4e:	2207      	movs	r2, #7
 800ff50:	4618      	mov	r0, r3
 800ff52:	f006 fdc0 	bl	8016ad6 <RegionVerify>
 800ff56:	4603      	mov	r3, r0
 800ff58:	f083 0301 	eor.w	r3, r3, #1
 800ff5c:	b2db      	uxtb	r3, r3
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d018      	beq.n	800ff94 <ProcessRadioRxDone+0x2ac>
                    {
                        // MLME handling
                        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ff62:	2001      	movs	r0, #1
 800ff64:	f005 fb14 	bl	8015590 <LoRaMacConfirmQueueIsCmdActive>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	f000 83b4 	beq.w	80106d8 <ProcessRadioRxDone+0x9f0>
                        {
                            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ff70:	2101      	movs	r1, #1
 800ff72:	2007      	movs	r0, #7
 800ff74:	f005 fa80 	bl	8015478 <LoRaMacConfirmQueueSetStatus>
 800ff78:	e3b1      	b.n	80106de <ProcessRadioRxDone+0x9f6>
 800ff7a:	bf00      	nop
 800ff7c:	20001adc 	.word	0x20001adc
 800ff80:	20000ecc 	.word	0x20000ecc
 800ff84:	20001ad4 	.word	0x20001ad4
 800ff88:	20000998 	.word	0x20000998
 800ff8c:	08021620 	.word	0x08021620
 800ff90:	20000d30 	.word	0x20000d30
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
            {
#endif

                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ff94:	7f7b      	ldrb	r3, [r7, #29]
 800ff96:	461a      	mov	r2, r3
 800ff98:	4ba5      	ldr	r3, [pc, #660]	@ (8010230 <ProcessRadioRxDone+0x548>)
 800ff9a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ff9e:	4ba4      	ldr	r3, [pc, #656]	@ (8010230 <ProcessRadioRxDone+0x548>)
 800ffa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ffa4:	7fbb      	ldrb	r3, [r7, #30]
 800ffa6:	021b      	lsls	r3, r3, #8
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	4aa1      	ldr	r2, [pc, #644]	@ (8010230 <ProcessRadioRxDone+0x548>)
 800ffac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ffb0:	4b9f      	ldr	r3, [pc, #636]	@ (8010230 <ProcessRadioRxDone+0x548>)
 800ffb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ffb6:	7ffb      	ldrb	r3, [r7, #31]
 800ffb8:	041b      	lsls	r3, r3, #16
 800ffba:	4313      	orrs	r3, r2
 800ffbc:	4a9c      	ldr	r2, [pc, #624]	@ (8010230 <ProcessRadioRxDone+0x548>)
 800ffbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800ffc2:	6a3b      	ldr	r3, [r7, #32]
 800ffc4:	4a9a      	ldr	r2, [pc, #616]	@ (8010230 <ProcessRadioRxDone+0x548>)
 800ffc6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800ffca:	4b99      	ldr	r3, [pc, #612]	@ (8010230 <ProcessRadioRxDone+0x548>)
 800ffcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	2002      	movs	r0, #2
 800ffd4:	f7fd ff2c 	bl	800de30 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ffd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ffdc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	4b92      	ldr	r3, [pc, #584]	@ (8010230 <ProcessRadioRxDone+0x548>)
 800ffe6:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Verify if we shall assign the new datarate
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800ffea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ffee:	f003 030f 	and.w	r3, r3, #15
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	2b0f      	cmp	r3, #15
 800fff6:	d011      	beq.n	801001c <ProcessRadioRxDone+0x334>
                {
#endif

                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fff8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fffc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010000:	b2db      	uxtb	r3, r3
 8010002:	461a      	mov	r2, r3
 8010004:	4b8a      	ldr	r3, [pc, #552]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010006:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801000a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801000e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010012:	b2db      	uxtb	r3, r3
 8010014:	461a      	mov	r2, r3
 8010016:	4b86      	ldr	r3, [pc, #536]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010018:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
				}
#endif

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 801001c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010020:	461a      	mov	r2, r3
 8010022:	4b83      	ldr	r3, [pc, #524]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010024:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8010026:	4b82      	ldr	r3, [pc, #520]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801002a:	2b00      	cmp	r3, #0
 801002c:	d102      	bne.n	8010034 <ProcessRadioRxDone+0x34c>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 801002e:	4b80      	ldr	r3, [pc, #512]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010030:	2201      	movs	r2, #1
 8010032:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8010034:	4b7e      	ldr	r3, [pc, #504]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010038:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801003c:	fb02 f303 	mul.w	r3, r2, r3
 8010040:	4a7b      	ldr	r2, [pc, #492]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010042:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010044:	4b7a      	ldr	r3, [pc, #488]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010048:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801004c:	4a78      	ldr	r2, [pc, #480]	@ (8010230 <ProcessRadioRxDone+0x548>)
 801004e:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8010050:	4b77      	ldr	r3, [pc, #476]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010052:	2201      	movs	r2, #1
 8010054:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8010058:	4b75      	ldr	r3, [pc, #468]	@ (8010230 <ProcessRadioRxDone+0x548>)
 801005a:	2200      	movs	r2, #0
 801005c:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010060:	f107 0314 	add.w	r3, r7, #20
 8010064:	3312      	adds	r3, #18
 8010066:	67fb      	str	r3, [r7, #124]	@ 0x7c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8010068:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801006c:	b2db      	uxtb	r3, r3
 801006e:	3b11      	subs	r3, #17
 8010070:	b2db      	uxtb	r3, r3
 8010072:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 8010076:	4b6f      	ldr	r3, [pc, #444]	@ (8010234 <ProcessRadioRxDone+0x54c>)
 8010078:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 801007c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8010080:	4b6b      	ldr	r3, [pc, #428]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010082:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010086:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801008a:	4611      	mov	r1, r2
 801008c:	4618      	mov	r0, r3
 801008e:	f006 fd39 	bl	8016b04 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8010092:	4b67      	ldr	r3, [pc, #412]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010094:	2202      	movs	r2, #2
 8010096:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 801009a:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 801009e:	4618      	mov	r0, r3
 80100a0:	f005 fa76 	bl	8015590 <LoRaMacConfirmQueueIsCmdActive>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	f000 8318 	beq.w	80106dc <ProcessRadioRxDone+0x9f4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80100ac:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80100b0:	4619      	mov	r1, r3
 80100b2:	2000      	movs	r0, #0
 80100b4:	f005 f9e0 	bl	8015478 <LoRaMacConfirmQueueSetStatus>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }

            break;
 80100b8:	e310      	b.n	80106dc <ProcessRadioRxDone+0x9f4>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80100ba:	2001      	movs	r0, #1
 80100bc:	f005 fa68 	bl	8015590 <LoRaMacConfirmQueueIsCmdActive>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	f000 830a 	beq.w	80106dc <ProcessRadioRxDone+0x9f4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80100c8:	2101      	movs	r1, #1
 80100ca:	2007      	movs	r0, #7
 80100cc:	f005 f9d4 	bl	8015478 <LoRaMacConfirmQueueSetStatus>
            break;
 80100d0:	e304      	b.n	80106dc <ProcessRadioRxDone+0x9f4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80100d2:	4b58      	ldr	r3, [pc, #352]	@ (8010234 <ProcessRadioRxDone+0x54c>)
 80100d4:	2201      	movs	r2, #1
 80100d6:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80100da:	4b55      	ldr	r3, [pc, #340]	@ (8010230 <ProcessRadioRxDone+0x548>)
 80100dc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80100e0:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80100e4:	4b53      	ldr	r3, [pc, #332]	@ (8010234 <ProcessRadioRxDone+0x54c>)
 80100e6:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 80100ea:	b25b      	sxtb	r3, r3
 80100ec:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80100f0:	230d      	movs	r3, #13
 80100f2:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80100f6:	4b4e      	ldr	r3, [pc, #312]	@ (8010230 <ProcessRadioRxDone+0x548>)
 80100f8:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <ProcessRadioRxDone+0x41e>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010100:	230e      	movs	r3, #14
 8010102:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010106:	4b4a      	ldr	r3, [pc, #296]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010108:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801010c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8010110:	4611      	mov	r1, r2
 8010112:	4618      	mov	r0, r3
 8010114:	f006 fca4 	bl	8016a60 <RegionGetPhyParam>
 8010118:	4603      	mov	r3, r0
 801011a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 801011c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010120:	3b0d      	subs	r3, #13
 8010122:	b29b      	uxth	r3, r3
 8010124:	b21b      	sxth	r3, r3
 8010126:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801012a:	b21a      	sxth	r2, r3
 801012c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801012e:	b21b      	sxth	r3, r3
 8010130:	429a      	cmp	r2, r3
 8010132:	dc03      	bgt.n	801013c <ProcessRadioRxDone+0x454>
 8010134:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010138:	2b0b      	cmp	r3, #11
 801013a:	d806      	bhi.n	801014a <ProcessRadioRxDone+0x462>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801013c:	4b3d      	ldr	r3, [pc, #244]	@ (8010234 <ProcessRadioRxDone+0x54c>)
 801013e:	2201      	movs	r2, #1
 8010140:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8010144:	f7ff fdaa 	bl	800fc9c <PrepareRxDoneAbort>
                return;
 8010148:	e2ee      	b.n	8010728 <ProcessRadioRxDone+0xa40>
            }
            macMsgData.Buffer = payload;
 801014a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801014e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 8010150:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010154:	b2db      	uxtb	r3, r3
 8010156:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 801015a:	4b37      	ldr	r3, [pc, #220]	@ (8010238 <ProcessRadioRxDone+0x550>)
 801015c:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 801015e:	23ff      	movs	r3, #255	@ 0xff
 8010160:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8010164:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010168:	4618      	mov	r0, r3
 801016a:	f006 fa00 	bl	801656e <LoRaMacParserData>
 801016e:	4603      	mov	r3, r0
 8010170:	2b00      	cmp	r3, #0
 8010172:	d006      	beq.n	8010182 <ProcessRadioRxDone+0x49a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010174:	4b2f      	ldr	r3, [pc, #188]	@ (8010234 <ProcessRadioRxDone+0x54c>)
 8010176:	2201      	movs	r2, #1
 8010178:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 801017c:	f7ff fd8e 	bl	800fc9c <PrepareRxDoneAbort>
                return;
 8010180:	e2d2      	b.n	8010728 <ProcessRadioRxDone+0xa40>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010182:	4b2b      	ldr	r3, [pc, #172]	@ (8010230 <ProcessRadioRxDone+0x548>)
 8010184:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010188:	2b01      	cmp	r3, #1
 801018a:	d132      	bne.n	80101f2 <ProcessRadioRxDone+0x50a>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 801018c:	f004 fcfd 	bl	8014b8a <LoRaMacClassBIsPingExpected>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d014      	beq.n	80101c0 <ProcessRadioRxDone+0x4d8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010196:	2000      	movs	r0, #0
 8010198:	f004 fcae 	bl	8014af8 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 801019c:	2000      	movs	r0, #0
 801019e:	f004 fccf 	bl	8014b40 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80101a2:	4b24      	ldr	r3, [pc, #144]	@ (8010234 <ProcessRadioRxDone+0x54c>)
 80101a4:	2204      	movs	r2, #4
 80101a6:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80101aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80101ac:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80101b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80101b4:	b2db      	uxtb	r3, r3
 80101b6:	4619      	mov	r1, r3
 80101b8:	4610      	mov	r0, r2
 80101ba:	f004 fd6f 	bl	8014c9c <LoRaMacClassBSetFPendingBit>
 80101be:	e018      	b.n	80101f2 <ProcessRadioRxDone+0x50a>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80101c0:	f004 fcea 	bl	8014b98 <LoRaMacClassBIsMulticastExpected>
 80101c4:	4603      	mov	r3, r0
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d013      	beq.n	80101f2 <ProcessRadioRxDone+0x50a>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80101ca:	2000      	movs	r0, #0
 80101cc:	f004 fc9e 	bl	8014b0c <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80101d0:	2000      	movs	r0, #0
 80101d2:	f004 fcbe 	bl	8014b52 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80101d6:	4b17      	ldr	r3, [pc, #92]	@ (8010234 <ProcessRadioRxDone+0x54c>)
 80101d8:	2205      	movs	r2, #5
 80101da:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80101de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80101e0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80101e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80101e8:	b2db      	uxtb	r3, r3
 80101ea:	4619      	mov	r1, r3
 80101ec:	4610      	mov	r0, r2
 80101ee:	f004 fd55 	bl	8014c9c <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 80101f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101f4:	4a0f      	ldr	r2, [pc, #60]	@ (8010234 <ProcessRadioRxDone+0x54c>)
 80101f6:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 80101fa:	f107 020e 	add.w	r2, r7, #14
 80101fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010202:	4611      	mov	r1, r2
 8010204:	4618      	mov	r0, r3
 8010206:	f002 fd9f 	bl	8012d48 <DetermineFrameType>
 801020a:	4603      	mov	r3, r0
 801020c:	2b00      	cmp	r3, #0
 801020e:	d006      	beq.n	801021e <ProcessRadioRxDone+0x536>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010210:	4b08      	ldr	r3, [pc, #32]	@ (8010234 <ProcessRadioRxDone+0x54c>)
 8010212:	2201      	movs	r2, #1
 8010214:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8010218:	f7ff fd40 	bl	800fc9c <PrepareRxDoneAbort>
                return;
 801021c:	e284      	b.n	8010728 <ProcessRadioRxDone+0xa40>
            }

            //Check if it is a multicast message
            multicast = 0;
 801021e:	2300      	movs	r3, #0
 8010220:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 8010224:	2300      	movs	r3, #0
 8010226:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010228:	2300      	movs	r3, #0
 801022a:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 801022e:	e055      	b.n	80102dc <ProcessRadioRxDone+0x5f4>
 8010230:	20000ecc 	.word	0x20000ecc
 8010234:	20000998 	.word	0x20000998
 8010238:	20000bd0 	.word	0x20000bd0
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 801023c:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 8010240:	499f      	ldr	r1, [pc, #636]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 8010242:	4613      	mov	r3, r2
 8010244:	005b      	lsls	r3, r3, #1
 8010246:	4413      	add	r3, r2
 8010248:	011b      	lsls	r3, r3, #4
 801024a:	440b      	add	r3, r1
 801024c:	33ec      	adds	r3, #236	@ 0xec
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010252:	429a      	cmp	r2, r3
 8010254:	d13d      	bne.n	80102d2 <ProcessRadioRxDone+0x5ea>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8010256:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 801025a:	4999      	ldr	r1, [pc, #612]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 801025c:	4613      	mov	r3, r2
 801025e:	005b      	lsls	r3, r3, #1
 8010260:	4413      	add	r3, r2
 8010262:	011b      	lsls	r3, r3, #4
 8010264:	440b      	add	r3, r1
 8010266:	33e9      	adds	r3, #233	@ 0xe9
 8010268:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 801026a:	2b00      	cmp	r3, #0
 801026c:	d031      	beq.n	80102d2 <ProcessRadioRxDone+0x5ea>
                {
                    multicast = 1;
 801026e:	2301      	movs	r3, #1
 8010270:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8010274:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 8010278:	4991      	ldr	r1, [pc, #580]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 801027a:	4613      	mov	r3, r2
 801027c:	005b      	lsls	r3, r3, #1
 801027e:	4413      	add	r3, r2
 8010280:	011b      	lsls	r3, r3, #4
 8010282:	440b      	add	r3, r1
 8010284:	33ea      	adds	r3, #234	@ 0xea
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 801028c:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 8010290:	498b      	ldr	r1, [pc, #556]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 8010292:	4613      	mov	r3, r2
 8010294:	005b      	lsls	r3, r3, #1
 8010296:	4413      	add	r3, r2
 8010298:	011b      	lsls	r3, r3, #4
 801029a:	440b      	add	r3, r1
 801029c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80102a6:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 80102aa:	4985      	ldr	r1, [pc, #532]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 80102ac:	4613      	mov	r3, r2
 80102ae:	005b      	lsls	r3, r3, #1
 80102b0:	4413      	add	r3, r2
 80102b2:	011b      	lsls	r3, r3, #4
 80102b4:	440b      	add	r3, r1
 80102b6:	33ec      	adds	r3, #236	@ 0xec
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80102be:	4b80      	ldr	r3, [pc, #512]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 80102c0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80102c4:	2b02      	cmp	r3, #2
 80102c6:	d10e      	bne.n	80102e6 <ProcessRadioRxDone+0x5fe>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80102c8:	4b7e      	ldr	r3, [pc, #504]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 80102ca:	2203      	movs	r2, #3
 80102cc:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 80102d0:	e009      	b.n	80102e6 <ProcessRadioRxDone+0x5fe>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80102d2:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80102d6:	3301      	adds	r3, #1
 80102d8:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 80102dc:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d0ab      	beq.n	801023c <ProcessRadioRxDone+0x554>
 80102e4:	e000      	b.n	80102e8 <ProcessRadioRxDone+0x600>
                    break;
 80102e6:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80102e8:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80102ec:	2b01      	cmp	r3, #1
 80102ee:	d117      	bne.n	8010320 <ProcessRadioRxDone+0x638>
 80102f0:	7bbb      	ldrb	r3, [r7, #14]
 80102f2:	2b03      	cmp	r3, #3
 80102f4:	d10d      	bne.n	8010312 <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80102f6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80102fa:	f003 0320 	and.w	r3, r3, #32
 80102fe:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010300:	2b00      	cmp	r3, #0
 8010302:	d106      	bne.n	8010312 <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8010304:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801030c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 801030e:	2b00      	cmp	r3, #0
 8010310:	d006      	beq.n	8010320 <ProcessRadioRxDone+0x638>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010312:	4b6c      	ldr	r3, [pc, #432]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 8010314:	2201      	movs	r2, #1
 8010316:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 801031a:	f7ff fcbf 	bl	800fc9c <PrepareRxDoneAbort>
                return;
 801031e:	e203      	b.n	8010728 <ProcessRadioRxDone+0xa40>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8010320:	7bb9      	ldrb	r1, [r7, #14]
 8010322:	4c67      	ldr	r4, [pc, #412]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 8010324:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8010328:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 801032c:	f107 0310 	add.w	r3, r7, #16
 8010330:	9301      	str	r3, [sp, #4]
 8010332:	f107 030f 	add.w	r3, r7, #15
 8010336:	9300      	str	r3, [sp, #0]
 8010338:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 801033c:	f000 feec 	bl	8011118 <GetFCntDown>
 8010340:	4603      	mov	r3, r0
 8010342:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8010346:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 801034a:	2b00      	cmp	r3, #0
 801034c:	d017      	beq.n	801037e <ProcessRadioRxDone+0x696>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 801034e:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8010352:	2b07      	cmp	r3, #7
 8010354:	d104      	bne.n	8010360 <ProcessRadioRxDone+0x678>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8010356:	4b5b      	ldr	r3, [pc, #364]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 8010358:	2208      	movs	r2, #8
 801035a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 801035e:	e003      	b.n	8010368 <ProcessRadioRxDone+0x680>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010360:	4b58      	ldr	r3, [pc, #352]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 8010362:	2201      	movs	r2, #1
 8010364:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	4a56      	ldr	r2, [pc, #344]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 801036c:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	4a54      	ldr	r2, [pc, #336]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 8010374:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 8010378:	f7ff fc90 	bl	800fc9c <PrepareRxDoneAbort>
                return;
 801037c:	e1d4      	b.n	8010728 <ProcessRadioRxDone+0xa40>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 801037e:	7bfa      	ldrb	r2, [r7, #15]
 8010380:	6939      	ldr	r1, [r7, #16]
 8010382:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 8010386:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801038a:	9300      	str	r3, [sp, #0]
 801038c:	460b      	mov	r3, r1
 801038e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8010392:	f005 ff4f 	bl	8016234 <LoRaMacCryptoUnsecureMessage>
 8010396:	4603      	mov	r3, r0
 8010398:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801039c:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00f      	beq.n	80103c4 <ProcessRadioRxDone+0x6dc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80103a4:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80103a8:	2b02      	cmp	r3, #2
 80103aa:	d104      	bne.n	80103b6 <ProcessRadioRxDone+0x6ce>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80103ac:	4b45      	ldr	r3, [pc, #276]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 80103ae:	220a      	movs	r2, #10
 80103b0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 80103b4:	e003      	b.n	80103be <ProcessRadioRxDone+0x6d6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80103b6:	4b43      	ldr	r3, [pc, #268]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 80103b8:	220b      	movs	r2, #11
 80103ba:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 80103be:	f7ff fc6d 	bl	800fc9c <PrepareRxDoneAbort>
                return;
 80103c2:	e1b1      	b.n	8010728 <ProcessRadioRxDone+0xa40>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80103c4:	4b3f      	ldr	r3, [pc, #252]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 80103cc:	4a3d      	ldr	r2, [pc, #244]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 80103ce:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80103d2:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 80103d6:	4b3b      	ldr	r3, [pc, #236]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 80103d8:	2200      	movs	r2, #0
 80103da:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 80103de:	4b39      	ldr	r3, [pc, #228]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 80103e0:	2200      	movs	r2, #0
 80103e2:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	4a36      	ldr	r2, [pc, #216]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 80103ea:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80103ee:	693b      	ldr	r3, [r7, #16]
 80103f0:	4a34      	ldr	r2, [pc, #208]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 80103f2:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80103f6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80103fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	2b00      	cmp	r3, #0
 8010402:	bf14      	ite	ne
 8010404:	2301      	movne	r3, #1
 8010406:	2300      	moveq	r3, #0
 8010408:	b2da      	uxtb	r2, r3
 801040a:	4b2e      	ldr	r3, [pc, #184]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 801040c:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010410:	4b2c      	ldr	r3, [pc, #176]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 8010412:	2200      	movs	r2, #0
 8010414:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8010418:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801041c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010420:	b2db      	uxtb	r3, r3
 8010422:	2b00      	cmp	r3, #0
 8010424:	bf14      	ite	ne
 8010426:	2301      	movne	r3, #1
 8010428:	2300      	moveq	r3, #0
 801042a:	b2da      	uxtb	r2, r3
 801042c:	4b25      	ldr	r3, [pc, #148]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 801042e:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010432:	4b24      	ldr	r3, [pc, #144]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 8010434:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8010438:	2b00      	cmp	r3, #0
 801043a:	d004      	beq.n	8010446 <ProcessRadioRxDone+0x75e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801043c:	4b21      	ldr	r3, [pc, #132]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 801043e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010442:	2b01      	cmp	r3, #1
 8010444:	d106      	bne.n	8010454 <ProcessRadioRxDone+0x76c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8010446:	4b1e      	ldr	r3, [pc, #120]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 8010448:	2200      	movs	r2, #0
 801044a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 801044c:	4b1c      	ldr	r3, [pc, #112]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 801044e:	2201      	movs	r2, #1
 8010450:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8010454:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8010458:	2b01      	cmp	r3, #1
 801045a:	d104      	bne.n	8010466 <ProcessRadioRxDone+0x77e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801045c:	4b19      	ldr	r3, [pc, #100]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 801045e:	2202      	movs	r2, #2
 8010460:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 8010464:	e03a      	b.n	80104dc <ProcessRadioRxDone+0x7f4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8010466:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 801046a:	f023 031f 	bic.w	r3, r3, #31
 801046e:	b2db      	uxtb	r3, r3
 8010470:	2ba0      	cmp	r3, #160	@ 0xa0
 8010472:	d12b      	bne.n	80104cc <ProcessRadioRxDone+0x7e4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8010474:	4b12      	ldr	r3, [pc, #72]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 8010476:	2201      	movs	r2, #1
 8010478:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 801047c:	4b10      	ldr	r3, [pc, #64]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 801047e:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 8010482:	2b00      	cmp	r3, #0
 8010484:	d102      	bne.n	801048c <ProcessRadioRxDone+0x7a4>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8010486:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010488:	4a0d      	ldr	r2, [pc, #52]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 801048a:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801048c:	4b0d      	ldr	r3, [pc, #52]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 801048e:	2201      	movs	r2, #1
 8010490:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010494:	4b0b      	ldr	r3, [pc, #44]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 8010496:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801049a:	2b00      	cmp	r3, #0
 801049c:	d01e      	beq.n	80104dc <ProcessRadioRxDone+0x7f4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 801049e:	4b09      	ldr	r3, [pc, #36]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 80104a0:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d019      	beq.n	80104dc <ProcessRadioRxDone+0x7f4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80104a8:	4b05      	ldr	r3, [pc, #20]	@ (80104c0 <ProcessRadioRxDone+0x7d8>)
 80104aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104ae:	4a05      	ldr	r2, [pc, #20]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 80104b0:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 80104b4:	4b04      	ldr	r3, [pc, #16]	@ (80104c8 <ProcessRadioRxDone+0x7e0>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	4a02      	ldr	r2, [pc, #8]	@ (80104c4 <ProcessRadioRxDone+0x7dc>)
 80104ba:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 80104be:	e00d      	b.n	80104dc <ProcessRadioRxDone+0x7f4>
 80104c0:	20000ecc 	.word	0x20000ecc
 80104c4:	20000998 	.word	0x20000998
 80104c8:	20001adc 	.word	0x20001adc
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 80104cc:	4b98      	ldr	r3, [pc, #608]	@ (8010730 <ProcessRadioRxDone+0xa48>)
 80104ce:	2200      	movs	r2, #0
 80104d0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80104d4:	4b97      	ldr	r3, [pc, #604]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80104d6:	2200      	movs	r2, #0
 80104d8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                }
            }

            // Set the pending status
			// Fix for Class C Certification test. Re-enabled part of if condition previously removed.
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 80104dc:	4b94      	ldr	r3, [pc, #592]	@ (8010730 <ProcessRadioRxDone+0xa48>)
 80104de:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d106      	bne.n	80104f4 <ProcessRadioRxDone+0x80c>
 80104e6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80104ea:	f003 0310 	and.w	r3, r3, #16
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d004      	beq.n	80104fe <ProcessRadioRxDone+0x816>
 80104f4:	4b8e      	ldr	r3, [pc, #568]	@ (8010730 <ProcessRadioRxDone+0xa48>)
 80104f6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d004      	beq.n	8010508 <ProcessRadioRxDone+0x820>
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) 
 80104fe:	4b8d      	ldr	r3, [pc, #564]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010500:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 8010504:	2b00      	cmp	r3, #0
 8010506:	d003      	beq.n	8010510 <ProcessRadioRxDone+0x828>
            //if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8010508:	4b8a      	ldr	r3, [pc, #552]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 801050a:	2201      	movs	r2, #1
 801050c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8010510:	4b88      	ldr	r3, [pc, #544]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010512:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8010516:	4a87      	ldr	r2, [pc, #540]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010518:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 801051c:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8010520:	4618      	mov	r0, r3
 8010522:	f001 ffa5 	bl	8012470 <RemoveMacCommands>

            switch( fType )
 8010526:	7bbb      	ldrb	r3, [r7, #14]
 8010528:	2b03      	cmp	r3, #3
 801052a:	d874      	bhi.n	8010616 <ProcessRadioRxDone+0x92e>
 801052c:	a201      	add	r2, pc, #4	@ (adr r2, 8010534 <ProcessRadioRxDone+0x84c>)
 801052e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010532:	bf00      	nop
 8010534:	08010545 	.word	0x08010545
 8010538:	08010595 	.word	0x08010595
 801053c:	080105cb 	.word	0x080105cb
 8010540:	080105f1 	.word	0x080105f1
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8010544:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010548:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801054c:	b2db      	uxtb	r3, r3
 801054e:	461c      	mov	r4, r3
 8010550:	4b78      	ldr	r3, [pc, #480]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010552:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8010556:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 801055a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801055e:	f102 0010 	add.w	r0, r2, #16
 8010562:	9300      	str	r3, [sp, #0]
 8010564:	460b      	mov	r3, r1
 8010566:	4622      	mov	r2, r4
 8010568:	2100      	movs	r1, #0
 801056a:	f000 ff51 	bl	8011410 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801056e:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8010572:	4b70      	ldr	r3, [pc, #448]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010574:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010578:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801057a:	4a6e      	ldr	r2, [pc, #440]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 801057c:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010580:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8010584:	4b6b      	ldr	r3, [pc, #428]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010586:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 801058a:	4b6a      	ldr	r3, [pc, #424]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 801058c:	2201      	movs	r2, #1
 801058e:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 8010592:	e047      	b.n	8010624 <ProcessRadioRxDone+0x93c>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8010594:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8010598:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801059c:	b2db      	uxtb	r3, r3
 801059e:	461c      	mov	r4, r3
 80105a0:	4b64      	ldr	r3, [pc, #400]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80105a2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80105a6:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 80105aa:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80105ae:	f102 0010 	add.w	r0, r2, #16
 80105b2:	9300      	str	r3, [sp, #0]
 80105b4:	460b      	mov	r3, r1
 80105b6:	4622      	mov	r2, r4
 80105b8:	2100      	movs	r1, #0
 80105ba:	f000 ff29 	bl	8011410 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80105be:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80105c2:	4b5c      	ldr	r3, [pc, #368]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80105c4:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 80105c8:	e02c      	b.n	8010624 <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80105ca:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80105cc:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80105d0:	4b58      	ldr	r3, [pc, #352]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80105d2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80105d6:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 80105da:	9300      	str	r3, [sp, #0]
 80105dc:	460b      	mov	r3, r1
 80105de:	2100      	movs	r1, #0
 80105e0:	f000 ff16 	bl	8011410 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80105e4:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80105e8:	4b52      	ldr	r3, [pc, #328]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80105ea:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 80105ee:	e019      	b.n	8010624 <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80105f0:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80105f4:	4b4f      	ldr	r3, [pc, #316]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80105f6:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80105fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80105fc:	4a4d      	ldr	r2, [pc, #308]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80105fe:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010602:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8010606:	4b4b      	ldr	r3, [pc, #300]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010608:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 801060c:	4b49      	ldr	r3, [pc, #292]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 801060e:	2201      	movs	r2, #1
 8010610:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 8010614:	e006      	b.n	8010624 <ProcessRadioRxDone+0x93c>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010616:	4b47      	ldr	r3, [pc, #284]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010618:	2201      	movs	r2, #1
 801061a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 801061e:	f7ff fb3d 	bl	800fc9c <PrepareRxDoneAbort>
                    break;
 8010622:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8010624:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8010628:	2be0      	cmp	r3, #224	@ 0xe0
 801062a:	d118      	bne.n	801065e <ProcessRadioRxDone+0x976>
 801062c:	4b40      	ldr	r3, [pc, #256]	@ (8010730 <ProcessRadioRxDone+0xa48>)
 801062e:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 8010632:	f083 0301 	eor.w	r3, r3, #1
 8010636:	b2db      	uxtb	r3, r3
 8010638:	2b00      	cmp	r3, #0
 801063a:	d010      	beq.n	801065e <ProcessRadioRxDone+0x976>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 801063c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8010640:	4b3c      	ldr	r3, [pc, #240]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010642:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8010646:	4b3b      	ldr	r3, [pc, #236]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010648:	2200      	movs	r2, #0
 801064a:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 801064e:	4b39      	ldr	r3, [pc, #228]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010650:	2200      	movs	r2, #0
 8010652:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 8010656:	4b37      	ldr	r3, [pc, #220]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010658:	2200      	movs	r2, #0
 801065a:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801065e:	4a35      	ldr	r2, [pc, #212]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010660:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010664:	f043 0302 	orr.w	r3, r3, #2
 8010668:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 801066c:	e037      	b.n	80106de <ProcessRadioRxDone+0x9f6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801066e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8010672:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010676:	18d1      	adds	r1, r2, r3
 8010678:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 801067c:	b29b      	uxth	r3, r3
 801067e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8010682:	1ad3      	subs	r3, r2, r3
 8010684:	b29b      	uxth	r3, r3
 8010686:	461a      	mov	r2, r3
 8010688:	482b      	ldr	r0, [pc, #172]	@ (8010738 <ProcessRadioRxDone+0xa50>)
 801068a:	f008 fc14 	bl	8018eb6 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801068e:	4b29      	ldr	r3, [pc, #164]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010690:	2203      	movs	r2, #3
 8010692:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010696:	4b27      	ldr	r3, [pc, #156]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010698:	2200      	movs	r2, #0
 801069a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801069e:	4b25      	ldr	r3, [pc, #148]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80106a0:	4a25      	ldr	r2, [pc, #148]	@ (8010738 <ProcessRadioRxDone+0xa50>)
 80106a2:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80106a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80106aa:	b2da      	uxtb	r2, r3
 80106ac:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	b2da      	uxtb	r2, r3
 80106b4:	4b1f      	ldr	r3, [pc, #124]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80106b6:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80106ba:	4a1e      	ldr	r2, [pc, #120]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80106bc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80106c0:	f043 0302 	orr.w	r3, r3, #2
 80106c4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 80106c8:	e009      	b.n	80106de <ProcessRadioRxDone+0x9f6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80106ca:	4b1a      	ldr	r3, [pc, #104]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80106cc:	2201      	movs	r2, #1
 80106ce:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 80106d2:	f7ff fae3 	bl	800fc9c <PrepareRxDoneAbort>
            break;
 80106d6:	e002      	b.n	80106de <ProcessRadioRxDone+0x9f6>
                        break;
 80106d8:	bf00      	nop
 80106da:	e000      	b.n	80106de <ProcessRadioRxDone+0x9f6>
            break;
 80106dc:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80106de:	4b15      	ldr	r3, [pc, #84]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80106e0:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d004      	beq.n	80106f2 <ProcessRadioRxDone+0xa0a>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80106e8:	4b12      	ldr	r3, [pc, #72]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80106ea:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	d10c      	bne.n	801070c <ProcessRadioRxDone+0xa24>
    {
        if( MacCtx.NodeAckRequested == true )
 80106f2:	4b10      	ldr	r3, [pc, #64]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80106f4:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d007      	beq.n	801070c <ProcessRadioRxDone+0xa24>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 80106fc:	4b0d      	ldr	r3, [pc, #52]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 80106fe:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8010702:	2b00      	cmp	r3, #0
 8010704:	d002      	beq.n	801070c <ProcessRadioRxDone+0xa24>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 8010706:	2000      	movs	r0, #0
 8010708:	f000 fcec 	bl	80110e4 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 801070c:	4b09      	ldr	r3, [pc, #36]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 801070e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8010712:	2b02      	cmp	r3, #2
 8010714:	d006      	beq.n	8010724 <ProcessRadioRxDone+0xa3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010716:	4a07      	ldr	r2, [pc, #28]	@ (8010734 <ProcessRadioRxDone+0xa4c>)
 8010718:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801071c:	f043 0310 	orr.w	r3, r3, #16
 8010720:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8010724:	f7ff f9fc 	bl	800fb20 <UpdateRxSlotIdleState>
}
 8010728:	379c      	adds	r7, #156	@ 0x9c
 801072a:	46bd      	mov	sp, r7
 801072c:	bd90      	pop	{r4, r7, pc}
 801072e:	bf00      	nop
 8010730:	20000ecc 	.word	0x20000ecc
 8010734:	20000998 	.word	0x20000998
 8010738:	20000bd0 	.word	0x20000bd0

0801073c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 801073c:	b580      	push	{r7, lr}
 801073e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010740:	4b11      	ldr	r3, [pc, #68]	@ (8010788 <ProcessRadioTxTimeout+0x4c>)
 8010742:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010746:	2b02      	cmp	r3, #2
 8010748:	d002      	beq.n	8010750 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 801074a:	4b10      	ldr	r3, [pc, #64]	@ (801078c <ProcessRadioTxTimeout+0x50>)
 801074c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801074e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8010750:	f7ff f9e6 	bl	800fb20 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8010754:	4b0e      	ldr	r3, [pc, #56]	@ (8010790 <ProcessRadioTxTimeout+0x54>)
 8010756:	2202      	movs	r2, #2
 8010758:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 801075c:	2002      	movs	r0, #2
 801075e:	f004 fee3 	bl	8015528 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8010762:	4b0b      	ldr	r3, [pc, #44]	@ (8010790 <ProcessRadioTxTimeout+0x54>)
 8010764:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010768:	2b00      	cmp	r3, #0
 801076a:	d003      	beq.n	8010774 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 801076c:	4b08      	ldr	r3, [pc, #32]	@ (8010790 <ProcessRadioTxTimeout+0x54>)
 801076e:	2201      	movs	r2, #1
 8010770:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010774:	4a06      	ldr	r2, [pc, #24]	@ (8010790 <ProcessRadioTxTimeout+0x54>)
 8010776:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801077a:	f043 0310 	orr.w	r3, r3, #16
 801077e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 8010782:	bf00      	nop
 8010784:	bd80      	pop	{r7, pc}
 8010786:	bf00      	nop
 8010788:	20000ecc 	.word	0x20000ecc
 801078c:	08021620 	.word	0x08021620
 8010790:	20000998 	.word	0x20000998

08010794 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	4603      	mov	r3, r0
 801079c:	460a      	mov	r2, r1
 801079e:	71fb      	strb	r3, [r7, #7]
 80107a0:	4613      	mov	r3, r2
 80107a2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80107a4:	2300      	movs	r3, #0
 80107a6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80107a8:	4b3d      	ldr	r3, [pc, #244]	@ (80108a0 <HandleRadioRxErrorTimeout+0x10c>)
 80107aa:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80107ae:	2b02      	cmp	r3, #2
 80107b0:	d002      	beq.n	80107b8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80107b2:	4b3c      	ldr	r3, [pc, #240]	@ (80108a4 <HandleRadioRxErrorTimeout+0x110>)
 80107b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107b6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80107b8:	f004 f9e0 	bl	8014b7c <LoRaMacClassBIsBeaconExpected>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d007      	beq.n	80107d2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80107c2:	2002      	movs	r0, #2
 80107c4:	f004 f98e 	bl	8014ae4 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80107c8:	2000      	movs	r0, #0
 80107ca:	f004 f9b0 	bl	8014b2e <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80107ce:	2301      	movs	r3, #1
 80107d0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80107d2:	4b33      	ldr	r3, [pc, #204]	@ (80108a0 <HandleRadioRxErrorTimeout+0x10c>)
 80107d4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d119      	bne.n	8010810 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80107dc:	f004 f9d5 	bl	8014b8a <LoRaMacClassBIsPingExpected>
 80107e0:	4603      	mov	r3, r0
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d007      	beq.n	80107f6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80107e6:	2000      	movs	r0, #0
 80107e8:	f004 f986 	bl	8014af8 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80107ec:	2000      	movs	r0, #0
 80107ee:	f004 f9a7 	bl	8014b40 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80107f2:	2301      	movs	r3, #1
 80107f4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80107f6:	f004 f9cf 	bl	8014b98 <LoRaMacClassBIsMulticastExpected>
 80107fa:	4603      	mov	r3, r0
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d007      	beq.n	8010810 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010800:	2000      	movs	r0, #0
 8010802:	f004 f983 	bl	8014b0c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010806:	2000      	movs	r0, #0
 8010808:	f004 f9a3 	bl	8014b52 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 801080c:	2301      	movs	r3, #1
 801080e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8010810:	7bfb      	ldrb	r3, [r7, #15]
 8010812:	f083 0301 	eor.w	r3, r3, #1
 8010816:	b2db      	uxtb	r3, r3
 8010818:	2b00      	cmp	r3, #0
 801081a:	d03b      	beq.n	8010894 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801081c:	4b22      	ldr	r3, [pc, #136]	@ (80108a8 <HandleRadioRxErrorTimeout+0x114>)
 801081e:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010822:	2b00      	cmp	r3, #0
 8010824:	d122      	bne.n	801086c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8010826:	4b20      	ldr	r3, [pc, #128]	@ (80108a8 <HandleRadioRxErrorTimeout+0x114>)
 8010828:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 801082c:	2b00      	cmp	r3, #0
 801082e:	d003      	beq.n	8010838 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010830:	4a1d      	ldr	r2, [pc, #116]	@ (80108a8 <HandleRadioRxErrorTimeout+0x114>)
 8010832:	79fb      	ldrb	r3, [r7, #7]
 8010834:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010838:	79fb      	ldrb	r3, [r7, #7]
 801083a:	4618      	mov	r0, r3
 801083c:	f004 fe74 	bl	8015528 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8010840:	4b17      	ldr	r3, [pc, #92]	@ (80108a0 <HandleRadioRxErrorTimeout+0x10c>)
 8010842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010844:	4618      	mov	r0, r3
 8010846:	f00c fb4f 	bl	801cee8 <UTIL_TIMER_GetElapsedTime>
 801084a:	4602      	mov	r2, r0
 801084c:	4b16      	ldr	r3, [pc, #88]	@ (80108a8 <HandleRadioRxErrorTimeout+0x114>)
 801084e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8010852:	429a      	cmp	r2, r3
 8010854:	d31e      	bcc.n	8010894 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8010856:	4815      	ldr	r0, [pc, #84]	@ (80108ac <HandleRadioRxErrorTimeout+0x118>)
 8010858:	f00c fa1a 	bl	801cc90 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 801085c:	4a12      	ldr	r2, [pc, #72]	@ (80108a8 <HandleRadioRxErrorTimeout+0x114>)
 801085e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010862:	f043 0310 	orr.w	r3, r3, #16
 8010866:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 801086a:	e013      	b.n	8010894 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 801086c:	4b0e      	ldr	r3, [pc, #56]	@ (80108a8 <HandleRadioRxErrorTimeout+0x114>)
 801086e:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010872:	2b00      	cmp	r3, #0
 8010874:	d003      	beq.n	801087e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8010876:	4a0c      	ldr	r2, [pc, #48]	@ (80108a8 <HandleRadioRxErrorTimeout+0x114>)
 8010878:	79bb      	ldrb	r3, [r7, #6]
 801087a:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 801087e:	79bb      	ldrb	r3, [r7, #6]
 8010880:	4618      	mov	r0, r3
 8010882:	f004 fe51 	bl	8015528 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 8010886:	4a08      	ldr	r2, [pc, #32]	@ (80108a8 <HandleRadioRxErrorTimeout+0x114>)
 8010888:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801088c:	f043 0310 	orr.w	r3, r3, #16
 8010890:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8010894:	f7ff f944 	bl	800fb20 <UpdateRxSlotIdleState>
}
 8010898:	bf00      	nop
 801089a:	3710      	adds	r7, #16
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	20000ecc 	.word	0x20000ecc
 80108a4:	08021620 	.word	0x08021620
 80108a8:	20000998 	.word	0x20000998
 80108ac:	20000d30 	.word	0x20000d30

080108b0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80108b4:	2106      	movs	r1, #6
 80108b6:	2005      	movs	r0, #5
 80108b8:	f7ff ff6c 	bl	8010794 <HandleRadioRxErrorTimeout>
}
 80108bc:	bf00      	nop
 80108be:	bd80      	pop	{r7, pc}

080108c0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80108c4:	2104      	movs	r1, #4
 80108c6:	2003      	movs	r0, #3
 80108c8:	f7ff ff64 	bl	8010794 <HandleRadioRxErrorTimeout>
}
 80108cc:	bf00      	nop
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b084      	sub	sp, #16
 80108d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108d6:	f3ef 8310 	mrs	r3, PRIMASK
 80108da:	607b      	str	r3, [r7, #4]
  return(result);
 80108dc:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 80108de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80108e0:	b672      	cpsid	i
}
 80108e2:	bf00      	nop
    events = LoRaMacRadioEvents;
 80108e4:	4b1d      	ldr	r3, [pc, #116]	@ (801095c <LoRaMacHandleIrqEvents+0x8c>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 80108ea:	4b1c      	ldr	r3, [pc, #112]	@ (801095c <LoRaMacHandleIrqEvents+0x8c>)
 80108ec:	2200      	movs	r2, #0
 80108ee:	601a      	str	r2, [r3, #0]
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	f383 8810 	msr	PRIMASK, r3
}
 80108fa:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d027      	beq.n	8010952 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8010902:	783b      	ldrb	r3, [r7, #0]
 8010904:	f003 0320 	and.w	r3, r3, #32
 8010908:	b2db      	uxtb	r3, r3
 801090a:	2b00      	cmp	r3, #0
 801090c:	d001      	beq.n	8010912 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 801090e:	f7ff f91f 	bl	800fb50 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8010912:	783b      	ldrb	r3, [r7, #0]
 8010914:	f003 0310 	and.w	r3, r3, #16
 8010918:	b2db      	uxtb	r3, r3
 801091a:	2b00      	cmp	r3, #0
 801091c:	d001      	beq.n	8010922 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 801091e:	f7ff f9e3 	bl	800fce8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8010922:	783b      	ldrb	r3, [r7, #0]
 8010924:	f003 0308 	and.w	r3, r3, #8
 8010928:	b2db      	uxtb	r3, r3
 801092a:	2b00      	cmp	r3, #0
 801092c:	d001      	beq.n	8010932 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 801092e:	f7ff ff05 	bl	801073c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8010932:	783b      	ldrb	r3, [r7, #0]
 8010934:	f003 0304 	and.w	r3, r3, #4
 8010938:	b2db      	uxtb	r3, r3
 801093a:	2b00      	cmp	r3, #0
 801093c:	d001      	beq.n	8010942 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 801093e:	f7ff ffb7 	bl	80108b0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8010942:	783b      	ldrb	r3, [r7, #0]
 8010944:	f003 0302 	and.w	r3, r3, #2
 8010948:	b2db      	uxtb	r3, r3
 801094a:	2b00      	cmp	r3, #0
 801094c:	d001      	beq.n	8010952 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 801094e:	f7ff ffb7 	bl	80108c0 <ProcessRadioRxTimeout>
        }
    }
}
 8010952:	bf00      	nop
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	20001ad4 	.word	0x20001ad4

08010960 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8010960:	b480      	push	{r7}
 8010962:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8010964:	4b10      	ldr	r3, [pc, #64]	@ (80109a8 <LoRaMacIsBusy+0x48>)
 8010966:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801096a:	2b01      	cmp	r3, #1
 801096c:	d101      	bne.n	8010972 <LoRaMacIsBusy+0x12>
    {
        return false;
 801096e:	2300      	movs	r3, #0
 8010970:	e015      	b.n	801099e <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8010972:	4b0e      	ldr	r3, [pc, #56]	@ (80109ac <LoRaMacIsBusy+0x4c>)
 8010974:	781b      	ldrb	r3, [r3, #0]
 8010976:	f003 0301 	and.w	r3, r3, #1
 801097a:	b2db      	uxtb	r3, r3
 801097c:	2b00      	cmp	r3, #0
 801097e:	d001      	beq.n	8010984 <LoRaMacIsBusy+0x24>
    {
        return true;
 8010980:	2301      	movs	r3, #1
 8010982:	e00c      	b.n	801099e <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8010984:	4b08      	ldr	r3, [pc, #32]	@ (80109a8 <LoRaMacIsBusy+0x48>)
 8010986:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801098a:	2b00      	cmp	r3, #0
 801098c:	d106      	bne.n	801099c <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 801098e:	4b06      	ldr	r3, [pc, #24]	@ (80109a8 <LoRaMacIsBusy+0x48>)
 8010990:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8010994:	2b01      	cmp	r3, #1
 8010996:	d101      	bne.n	801099c <LoRaMacIsBusy+0x3c>
    {
        return false;
 8010998:	2300      	movs	r3, #0
 801099a:	e000      	b.n	801099e <LoRaMacIsBusy+0x3e>
    }
    return true;
 801099c:	2301      	movs	r3, #1
}
 801099e:	4618      	mov	r0, r3
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bc80      	pop	{r7}
 80109a4:	4770      	bx	lr
 80109a6:	bf00      	nop
 80109a8:	20000998 	.word	0x20000998
 80109ac:	20001ad4 	.word	0x20001ad4

080109b0 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 80109b0:	b480      	push	{r7}
 80109b2:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80109b4:	4b05      	ldr	r3, [pc, #20]	@ (80109cc <LoRaMacIsStopped+0x1c>)
 80109b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d101      	bne.n	80109c2 <LoRaMacIsStopped+0x12>
    {
        return true;
 80109be:	2301      	movs	r3, #1
 80109c0:	e000      	b.n	80109c4 <LoRaMacIsStopped+0x14>
    }
    return false;
 80109c2:	2300      	movs	r3, #0
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bc80      	pop	{r7}
 80109ca:	4770      	bx	lr
 80109cc:	20000998 	.word	0x20000998

080109d0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	4603      	mov	r3, r0
 80109d8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 80109da:	4a04      	ldr	r2, [pc, #16]	@ (80109ec <LoRaMacEnableRequests+0x1c>)
 80109dc:	79fb      	ldrb	r3, [r7, #7]
 80109de:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 80109e2:	bf00      	nop
 80109e4:	370c      	adds	r7, #12
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bc80      	pop	{r7}
 80109ea:	4770      	bx	lr
 80109ec:	20000998 	.word	0x20000998

080109f0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80109f6:	4b2c      	ldr	r3, [pc, #176]	@ (8010aa8 <LoRaMacHandleRequestEvents+0xb8>)
 80109f8:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80109fc:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 80109fe:	4b2a      	ldr	r3, [pc, #168]	@ (8010aa8 <LoRaMacHandleRequestEvents+0xb8>)
 8010a00:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d14a      	bne.n	8010a9e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010a08:	4b27      	ldr	r3, [pc, #156]	@ (8010aa8 <LoRaMacHandleRequestEvents+0xb8>)
 8010a0a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010a0e:	f003 0301 	and.w	r3, r3, #1
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d006      	beq.n	8010a26 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010a18:	4a23      	ldr	r2, [pc, #140]	@ (8010aa8 <LoRaMacHandleRequestEvents+0xb8>)
 8010a1a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010a1e:	f023 0301 	bic.w	r3, r3, #1
 8010a22:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010a26:	4b20      	ldr	r3, [pc, #128]	@ (8010aa8 <LoRaMacHandleRequestEvents+0xb8>)
 8010a28:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010a2c:	f003 0304 	and.w	r3, r3, #4
 8010a30:	b2db      	uxtb	r3, r3
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d006      	beq.n	8010a44 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010a36:	4a1c      	ldr	r2, [pc, #112]	@ (8010aa8 <LoRaMacHandleRequestEvents+0xb8>)
 8010a38:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010a3c:	f023 0304 	bic.w	r3, r3, #4
 8010a40:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010a44:	2001      	movs	r0, #1
 8010a46:	f7ff ffc3 	bl	80109d0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8010a4a:	793b      	ldrb	r3, [r7, #4]
 8010a4c:	f003 0301 	and.w	r3, r3, #1
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d005      	beq.n	8010a62 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8010a56:	4b14      	ldr	r3, [pc, #80]	@ (8010aa8 <LoRaMacHandleRequestEvents+0xb8>)
 8010a58:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4813      	ldr	r0, [pc, #76]	@ (8010aac <LoRaMacHandleRequestEvents+0xbc>)
 8010a60:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8010a62:	793b      	ldrb	r3, [r7, #4]
 8010a64:	f003 0304 	and.w	r3, r3, #4
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d00e      	beq.n	8010a8c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8010a6e:	4810      	ldr	r0, [pc, #64]	@ (8010ab0 <LoRaMacHandleRequestEvents+0xc0>)
 8010a70:	f004 fda8 	bl	80155c4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8010a74:	f004 fdf8 	bl	8015668 <LoRaMacConfirmQueueGetCnt>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d006      	beq.n	8010a8c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8010aa8 <LoRaMacHandleRequestEvents+0xb8>)
 8010a80:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010a84:	f043 0304 	orr.w	r3, r3, #4
 8010a88:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8010a8c:	f004 f8a2 	bl	8014bd4 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8010a90:	4a05      	ldr	r2, [pc, #20]	@ (8010aa8 <LoRaMacHandleRequestEvents+0xb8>)
 8010a92:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010a96:	f023 0310 	bic.w	r3, r3, #16
 8010a9a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8010a9e:	bf00      	nop
 8010aa0:	3708      	adds	r7, #8
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	20000998 	.word	0x20000998
 8010aac:	20000dd8 	.word	0x20000dd8
 8010ab0:	20000dec 	.word	0x20000dec

08010ab4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010ab8:	4b16      	ldr	r3, [pc, #88]	@ (8010b14 <LoRaMacHandleIndicationEvents+0x60>)
 8010aba:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010abe:	f003 0308 	and.w	r3, r3, #8
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d00d      	beq.n	8010ae4 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010ac8:	4a12      	ldr	r2, [pc, #72]	@ (8010b14 <LoRaMacHandleIndicationEvents+0x60>)
 8010aca:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010ace:	f023 0308 	bic.w	r3, r3, #8
 8010ad2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8010ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8010b14 <LoRaMacHandleIndicationEvents+0x60>)
 8010ad8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010adc:	68db      	ldr	r3, [r3, #12]
 8010ade:	490e      	ldr	r1, [pc, #56]	@ (8010b18 <LoRaMacHandleIndicationEvents+0x64>)
 8010ae0:	480e      	ldr	r0, [pc, #56]	@ (8010b1c <LoRaMacHandleIndicationEvents+0x68>)
 8010ae2:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8010b14 <LoRaMacHandleIndicationEvents+0x60>)
 8010ae6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010aea:	f003 0302 	and.w	r3, r3, #2
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d00d      	beq.n	8010b10 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010af4:	4a07      	ldr	r2, [pc, #28]	@ (8010b14 <LoRaMacHandleIndicationEvents+0x60>)
 8010af6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010afa:	f023 0302 	bic.w	r3, r3, #2
 8010afe:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8010b02:	4b04      	ldr	r3, [pc, #16]	@ (8010b14 <LoRaMacHandleIndicationEvents+0x60>)
 8010b04:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	4903      	ldr	r1, [pc, #12]	@ (8010b18 <LoRaMacHandleIndicationEvents+0x64>)
 8010b0c:	4804      	ldr	r0, [pc, #16]	@ (8010b20 <LoRaMacHandleIndicationEvents+0x6c>)
 8010b0e:	4798      	blx	r3
    }
}
 8010b10:	bf00      	nop
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	20000998 	.word	0x20000998
 8010b18:	20000e24 	.word	0x20000e24
 8010b1c:	20000e00 	.word	0x20000e00
 8010b20:	20000db8 	.word	0x20000db8

08010b24 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8010bd4 <LoRaMacHandleMcpsRequest+0xb0>)
 8010b2c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010b30:	f003 0301 	and.w	r3, r3, #1
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d048      	beq.n	8010bcc <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010b42:	4b24      	ldr	r3, [pc, #144]	@ (8010bd4 <LoRaMacHandleMcpsRequest+0xb0>)
 8010b44:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d004      	beq.n	8010b56 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010b4c:	4b21      	ldr	r3, [pc, #132]	@ (8010bd4 <LoRaMacHandleMcpsRequest+0xb0>)
 8010b4e:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010b52:	2b03      	cmp	r3, #3
 8010b54:	d104      	bne.n	8010b60 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8010b56:	f002 f959 	bl	8012e0c <CheckRetransUnconfirmedUplink>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	71fb      	strb	r3, [r7, #7]
 8010b5e:	e010      	b.n	8010b82 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010b60:	4b1c      	ldr	r3, [pc, #112]	@ (8010bd4 <LoRaMacHandleMcpsRequest+0xb0>)
 8010b62:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d10b      	bne.n	8010b82 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8010b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8010bd4 <LoRaMacHandleMcpsRequest+0xb0>)
 8010b6c:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d004      	beq.n	8010b7e <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8010b74:	f002 f976 	bl	8012e64 <CheckRetransConfirmedUplink>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	71fb      	strb	r3, [r7, #7]
 8010b7c:	e001      	b.n	8010b82 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8010b82:	79fb      	ldrb	r3, [r7, #7]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d00d      	beq.n	8010ba4 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010b88:	4813      	ldr	r0, [pc, #76]	@ (8010bd8 <LoRaMacHandleMcpsRequest+0xb4>)
 8010b8a:	f00c f881 	bl	801cc90 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010b8e:	4b11      	ldr	r3, [pc, #68]	@ (8010bd4 <LoRaMacHandleMcpsRequest+0xb0>)
 8010b90:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010b94:	f023 0320 	bic.w	r3, r3, #32
 8010b98:	4a0e      	ldr	r2, [pc, #56]	@ (8010bd4 <LoRaMacHandleMcpsRequest+0xb0>)
 8010b9a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 8010b9e:	f002 f99b 	bl	8012ed8 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8010ba2:	e013      	b.n	8010bcc <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 8010ba4:	79bb      	ldrb	r3, [r7, #6]
 8010ba6:	f083 0301 	eor.w	r3, r3, #1
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d00d      	beq.n	8010bcc <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010bb0:	4a08      	ldr	r2, [pc, #32]	@ (8010bd4 <LoRaMacHandleMcpsRequest+0xb0>)
 8010bb2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010bb6:	f023 0310 	bic.w	r3, r3, #16
 8010bba:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8010bbe:	4b05      	ldr	r3, [pc, #20]	@ (8010bd4 <LoRaMacHandleMcpsRequest+0xb0>)
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	f000 f9c8 	bl	8010f5c <OnTxDelayedTimerEvent>
}
 8010bcc:	bf00      	nop
 8010bce:	3708      	adds	r7, #8
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}
 8010bd4:	20000998 	.word	0x20000998
 8010bd8:	20000d00 	.word	0x20000d00

08010bdc <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010be0:	4b18      	ldr	r3, [pc, #96]	@ (8010c44 <LoRaMacHandleMlmeRequest+0x68>)
 8010be2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010be6:	f003 0304 	and.w	r3, r3, #4
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d026      	beq.n	8010c3e <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010bf0:	2001      	movs	r0, #1
 8010bf2:	f004 fccd 	bl	8015590 <LoRaMacConfirmQueueIsCmdActive>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d012      	beq.n	8010c22 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010bfc:	2001      	movs	r0, #1
 8010bfe:	f004 fc69 	bl	80154d4 <LoRaMacConfirmQueueGetStatus>
 8010c02:	4603      	mov	r3, r0
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d103      	bne.n	8010c10 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010c08:	4b0e      	ldr	r3, [pc, #56]	@ (8010c44 <LoRaMacHandleMlmeRequest+0x68>)
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010c10:	4b0c      	ldr	r3, [pc, #48]	@ (8010c44 <LoRaMacHandleMlmeRequest+0x68>)
 8010c12:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010c16:	f023 0302 	bic.w	r3, r3, #2
 8010c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8010c44 <LoRaMacHandleMlmeRequest+0x68>)
 8010c1c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010c20:	e00d      	b.n	8010c3e <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8010c22:	2006      	movs	r0, #6
 8010c24:	f004 fcb4 	bl	8015590 <LoRaMacConfirmQueueIsCmdActive>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d007      	beq.n	8010c3e <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010c2e:	4b05      	ldr	r3, [pc, #20]	@ (8010c44 <LoRaMacHandleMlmeRequest+0x68>)
 8010c30:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010c34:	f023 0302 	bic.w	r3, r3, #2
 8010c38:	4a02      	ldr	r2, [pc, #8]	@ (8010c44 <LoRaMacHandleMlmeRequest+0x68>)
 8010c3a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 8010c3e:	bf00      	nop
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	bf00      	nop
 8010c44:	20000998 	.word	0x20000998

08010c48 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010c4c:	200b      	movs	r0, #11
 8010c4e:	f004 fc9f 	bl	8015590 <LoRaMacConfirmQueueIsCmdActive>
 8010c52:	4603      	mov	r3, r0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d019      	beq.n	8010c8c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010c58:	4b0e      	ldr	r3, [pc, #56]	@ (8010c94 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010c5a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010c5e:	f003 0301 	and.w	r3, r3, #1
 8010c62:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d111      	bne.n	8010c8c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010c68:	4b0a      	ldr	r3, [pc, #40]	@ (8010c94 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010c6a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010c6e:	f003 0304 	and.w	r3, r3, #4
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d009      	beq.n	8010c8c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010c78:	4b06      	ldr	r3, [pc, #24]	@ (8010c94 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010c7a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010c7e:	f023 0302 	bic.w	r3, r3, #2
 8010c82:	4a04      	ldr	r2, [pc, #16]	@ (8010c94 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010c84:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 8010c88:	2301      	movs	r3, #1
 8010c8a:	e000      	b.n	8010c8e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8010c8c:	2300      	movs	r3, #0
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	20000998 	.word	0x20000998

08010c98 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	71fb      	strb	r3, [r7, #7]
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	71bb      	strb	r3, [r7, #6]
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 8010caa:	79fb      	ldrb	r3, [r7, #7]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d00a      	beq.n	8010cc6 <CheckForMinimumAbpDatarate+0x2e>
 8010cb0:	79bb      	ldrb	r3, [r7, #6]
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d107      	bne.n	8010cc6 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 8010cb6:	797b      	ldrb	r3, [r7, #5]
 8010cb8:	f083 0301 	eor.w	r3, r3, #1
 8010cbc:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d001      	beq.n	8010cc6 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e000      	b.n	8010cc8 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 8010cc6:	2300      	movs	r3, #0
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	370c      	adds	r7, #12
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bc80      	pop	{r7}
 8010cd0:	4770      	bx	lr
	...

08010cd4 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8010cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8010d10 <LoRaMacCheckForRxAbort+0x3c>)
 8010cda:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d00f      	beq.n	8010d06 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8010ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8010d10 <LoRaMacCheckForRxAbort+0x3c>)
 8010ce8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010cec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010cf0:	4a07      	ldr	r2, [pc, #28]	@ (8010d10 <LoRaMacCheckForRxAbort+0x3c>)
 8010cf2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010cf6:	4b06      	ldr	r3, [pc, #24]	@ (8010d10 <LoRaMacCheckForRxAbort+0x3c>)
 8010cf8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010cfc:	f023 0302 	bic.w	r3, r3, #2
 8010d00:	4a03      	ldr	r2, [pc, #12]	@ (8010d10 <LoRaMacCheckForRxAbort+0x3c>)
 8010d02:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 8010d06:	bf00      	nop
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bc80      	pop	{r7}
 8010d0c:	4770      	bx	lr
 8010d0e:	bf00      	nop
 8010d10:	20000998 	.word	0x20000998

08010d14 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b084      	sub	sp, #16
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010d20:	2300      	movs	r3, #0
 8010d22:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8010d24:	4b51      	ldr	r3, [pc, #324]	@ (8010e6c <LoRaMacHandleNvm+0x158>)
 8010d26:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	f040 8099 	bne.w	8010e62 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2124      	movs	r1, #36	@ 0x24
 8010d34:	4618      	mov	r0, r3
 8010d36:	f008 f913 	bl	8018f60 <Crc32>
 8010d3a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d40:	68ba      	ldr	r2, [r7, #8]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d006      	beq.n	8010d54 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	68ba      	ldr	r2, [r7, #8]
 8010d4a:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8010d4c:	89fb      	ldrh	r3, [r7, #14]
 8010d4e:	f043 0301 	orr.w	r3, r3, #1
 8010d52:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	3328      	adds	r3, #40	@ 0x28
 8010d58:	211c      	movs	r1, #28
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f008 f900 	bl	8018f60 <Crc32>
 8010d60:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d66:	68ba      	ldr	r2, [r7, #8]
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d006      	beq.n	8010d7a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	68ba      	ldr	r2, [r7, #8]
 8010d70:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8010d72:	89fb      	ldrh	r3, [r7, #14]
 8010d74:	f043 0302 	orr.w	r3, r3, #2
 8010d78:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	3348      	adds	r3, #72	@ 0x48
 8010d7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010d82:	4618      	mov	r0, r3
 8010d84:	f008 f8ec 	bl	8018f60 <Crc32>
 8010d88:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8010d90:	68ba      	ldr	r2, [r7, #8]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d007      	beq.n	8010da6 <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	68ba      	ldr	r2, [r7, #8]
 8010d9a:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8010d9e:	89fb      	ldrh	r3, [r7, #14]
 8010da0:	f043 0304 	orr.w	r3, r3, #4
 8010da4:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8010dac:	21d4      	movs	r1, #212	@ 0xd4
 8010dae:	4618      	mov	r0, r3
 8010db0:	f008 f8d6 	bl	8018f60 <Crc32>
 8010db4:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8010dbc:	68ba      	ldr	r2, [r7, #8]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d007      	beq.n	8010dd2 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	68ba      	ldr	r2, [r7, #8]
 8010dc6:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8010dca:	89fb      	ldrh	r3, [r7, #14]
 8010dcc:	f043 0308 	orr.w	r3, r3, #8
 8010dd0:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8010dd8:	2100      	movs	r1, #0
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f008 f8c0 	bl	8018f60 <Crc32>
 8010de0:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8010de8:	68ba      	ldr	r2, [r7, #8]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d007      	beq.n	8010dfe <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	68ba      	ldr	r2, [r7, #8]
 8010df2:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8010df6:	89fb      	ldrh	r3, [r7, #14]
 8010df8:	f043 0310 	orr.w	r3, r3, #16
 8010dfc:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8010e04:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f008 f8a9 	bl	8018f60 <Crc32>
 8010e0e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 8010e16:	68ba      	ldr	r2, [r7, #8]
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d007      	beq.n	8010e2c <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	68ba      	ldr	r2, [r7, #8]
 8010e20:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8010e24:	89fb      	ldrh	r3, [r7, #14]
 8010e26:	f043 0320 	orr.w	r3, r3, #32
 8010e2a:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f203 53a4 	addw	r3, r3, #1444	@ 0x5a4
 8010e32:	2114      	movs	r1, #20
 8010e34:	4618      	mov	r0, r3
 8010e36:	f008 f893 	bl	8018f60 <Crc32>
 8010e3a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 8010e42:	68ba      	ldr	r2, [r7, #8]
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d007      	beq.n	8010e58 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	68ba      	ldr	r2, [r7, #8]
 8010e4c:	f8c3 25b8 	str.w	r2, [r3, #1464]	@ 0x5b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8010e50:	89fb      	ldrh	r3, [r7, #14]
 8010e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e56:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8010e58:	89fb      	ldrh	r3, [r7, #14]
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f002 f88e 	bl	8012f7c <CallNvmDataChangeCallback>
 8010e60:	e000      	b.n	8010e64 <LoRaMacHandleNvm+0x150>
        return;
 8010e62:	bf00      	nop
}
 8010e64:	3710      	adds	r7, #16
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	20000998 	.word	0x20000998

08010e70 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b084      	sub	sp, #16
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d00d      	beq.n	8010e9c <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8010e80:	6838      	ldr	r0, [r7, #0]
 8010e82:	f00c f831 	bl	801cee8 <UTIL_TIMER_GetElapsedTime>
 8010e86:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 8010e88:	68fa      	ldr	r2, [r7, #12]
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d905      	bls.n	8010e9c <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 8010e90:	4b05      	ldr	r3, [pc, #20]	@ (8010ea8 <LoRaMacHandleResponseTimeout+0x38>)
 8010e92:	2200      	movs	r2, #0
 8010e94:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 8010e98:	2301      	movs	r3, #1
 8010e9a:	e000      	b.n	8010e9e <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8010e9c:	2300      	movs	r3, #0
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3710      	adds	r7, #16
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	20000ecc 	.word	0x20000ecc

08010eac <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b082      	sub	sp, #8
 8010eb0:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8010eb6:	f7ff fd0b 	bl	80108d0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8010eba:	f003 fefa 	bl	8014cb2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8010ebe:	4b25      	ldr	r3, [pc, #148]	@ (8010f54 <LoRaMacProcess+0xa8>)
 8010ec0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010ec4:	f003 0310 	and.w	r3, r3, #16
 8010ec8:	b2db      	uxtb	r3, r3
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d023      	beq.n	8010f16 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8010ece:	2000      	movs	r0, #0
 8010ed0:	f7ff fd7e 	bl	80109d0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8010ed4:	f7ff fefe 	bl	8010cd4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8010ed8:	f002 f86e 	bl	8012fb8 <IsRequestPending>
 8010edc:	4603      	mov	r3, r0
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d006      	beq.n	8010ef0 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8010ee2:	f7ff feb1 	bl	8010c48 <LoRaMacCheckForBeaconAcquisition>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	461a      	mov	r2, r3
 8010eea:	79fb      	ldrb	r3, [r7, #7]
 8010eec:	4313      	orrs	r3, r2
 8010eee:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8010ef0:	79fb      	ldrb	r3, [r7, #7]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d103      	bne.n	8010efe <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8010ef6:	f7ff fe71 	bl	8010bdc <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010efa:	f7ff fe13 	bl	8010b24 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8010efe:	f7ff fd77 	bl	80109f0 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010f02:	2001      	movs	r0, #1
 8010f04:	f7ff fd64 	bl	80109d0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010f08:	4a12      	ldr	r2, [pc, #72]	@ (8010f54 <LoRaMacProcess+0xa8>)
 8010f0a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010f0e:	f043 0320 	orr.w	r3, r3, #32
 8010f12:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 8010f16:	f7ff fdcd 	bl	8010ab4 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8010f54 <LoRaMacProcess+0xa8>)
 8010f1c:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010f20:	2b02      	cmp	r3, #2
 8010f22:	d101      	bne.n	8010f28 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8010f24:	f001 fc32 	bl	801278c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010f28:	4b0a      	ldr	r3, [pc, #40]	@ (8010f54 <LoRaMacProcess+0xa8>)
 8010f2a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010f2e:	f003 0320 	and.w	r3, r3, #32
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d009      	beq.n	8010f4c <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010f38:	4a06      	ldr	r2, [pc, #24]	@ (8010f54 <LoRaMacProcess+0xa8>)
 8010f3a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010f3e:	f023 0320 	bic.w	r3, r3, #32
 8010f42:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 8010f46:	4804      	ldr	r0, [pc, #16]	@ (8010f58 <LoRaMacProcess+0xac>)
 8010f48:	f7ff fee4 	bl	8010d14 <LoRaMacHandleNvm>
    }
}
 8010f4c:	bf00      	nop
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}
 8010f54:	20000998 	.word	0x20000998
 8010f58:	20000ecc 	.word	0x20000ecc

08010f5c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010f64:	481e      	ldr	r0, [pc, #120]	@ (8010fe0 <OnTxDelayedTimerEvent+0x84>)
 8010f66:	f00b fe93 	bl	801cc90 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8010fe4 <OnTxDelayedTimerEvent+0x88>)
 8010f6c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f70:	f023 0320 	bic.w	r3, r3, #32
 8010f74:	4a1b      	ldr	r2, [pc, #108]	@ (8010fe4 <OnTxDelayedTimerEvent+0x88>)
 8010f76:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8010f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8010fe8 <OnTxDelayedTimerEvent+0x8c>)
 8010f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f80:	4a18      	ldr	r2, [pc, #96]	@ (8010fe4 <OnTxDelayedTimerEvent+0x88>)
 8010f82:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8010f86:	4611      	mov	r1, r2
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7ff ff71 	bl	8010e70 <LoRaMacHandleResponseTimeout>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d11e      	bne.n	8010fd2 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010f94:	2001      	movs	r0, #1
 8010f96:	f001 f943 	bl	8012220 <ScheduleTx>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d01a      	beq.n	8010fd6 <OnTxDelayedTimerEvent+0x7a>
 8010fa0:	2b0b      	cmp	r3, #11
 8010fa2:	d018      	beq.n	8010fd6 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010fa4:	4b10      	ldr	r3, [pc, #64]	@ (8010fe8 <OnTxDelayedTimerEvent+0x8c>)
 8010fa6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010faa:	b2da      	uxtb	r2, r3
 8010fac:	4b0d      	ldr	r3, [pc, #52]	@ (8010fe4 <OnTxDelayedTimerEvent+0x88>)
 8010fae:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8010fe4 <OnTxDelayedTimerEvent+0x88>)
 8010fb4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8010fe4 <OnTxDelayedTimerEvent+0x88>)
 8010fba:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010fbe:	4b09      	ldr	r3, [pc, #36]	@ (8010fe4 <OnTxDelayedTimerEvent+0x88>)
 8010fc0:	2209      	movs	r2, #9
 8010fc2:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010fc6:	2009      	movs	r0, #9
 8010fc8:	f004 faae 	bl	8015528 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010fcc:	f001 ff84 	bl	8012ed8 <StopRetransmission>
            break;
 8010fd0:	e002      	b.n	8010fd8 <OnTxDelayedTimerEvent+0x7c>
        return;
 8010fd2:	bf00      	nop
 8010fd4:	e000      	b.n	8010fd8 <OnTxDelayedTimerEvent+0x7c>
            break;
 8010fd6:	bf00      	nop
        }
    }
}
 8010fd8:	3708      	adds	r7, #8
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}
 8010fde:	bf00      	nop
 8010fe0:	20000d00 	.word	0x20000d00
 8010fe4:	20000998 	.word	0x20000998
 8010fe8:	20000ecc 	.word	0x20000ecc

08010fec <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010ff4:	4b17      	ldr	r3, [pc, #92]	@ (8011054 <OnRxWindow1TimerEvent+0x68>)
 8010ff6:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010ffa:	4b16      	ldr	r3, [pc, #88]	@ (8011054 <OnRxWindow1TimerEvent+0x68>)
 8010ffc:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8011000:	4b15      	ldr	r3, [pc, #84]	@ (8011058 <OnRxWindow1TimerEvent+0x6c>)
 8011002:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011006:	b25a      	sxtb	r2, r3
 8011008:	4b12      	ldr	r3, [pc, #72]	@ (8011054 <OnRxWindow1TimerEvent+0x68>)
 801100a:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801100e:	4b12      	ldr	r3, [pc, #72]	@ (8011058 <OnRxWindow1TimerEvent+0x6c>)
 8011010:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8011014:	4b0f      	ldr	r3, [pc, #60]	@ (8011054 <OnRxWindow1TimerEvent+0x68>)
 8011016:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801101a:	4b0f      	ldr	r3, [pc, #60]	@ (8011058 <OnRxWindow1TimerEvent+0x6c>)
 801101c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011020:	4b0c      	ldr	r3, [pc, #48]	@ (8011054 <OnRxWindow1TimerEvent+0x68>)
 8011022:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8011026:	4b0b      	ldr	r3, [pc, #44]	@ (8011054 <OnRxWindow1TimerEvent+0x68>)
 8011028:	2200      	movs	r2, #0
 801102a:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 801102e:	4b09      	ldr	r3, [pc, #36]	@ (8011054 <OnRxWindow1TimerEvent+0x68>)
 8011030:	2200      	movs	r2, #0
 8011032:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011036:	4b08      	ldr	r3, [pc, #32]	@ (8011058 <OnRxWindow1TimerEvent+0x6c>)
 8011038:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 801103c:	4b05      	ldr	r3, [pc, #20]	@ (8011054 <OnRxWindow1TimerEvent+0x68>)
 801103e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8011042:	4906      	ldr	r1, [pc, #24]	@ (801105c <OnRxWindow1TimerEvent+0x70>)
 8011044:	4806      	ldr	r0, [pc, #24]	@ (8011060 <OnRxWindow1TimerEvent+0x74>)
 8011046:	f001 fb6d 	bl	8012724 <RxWindowSetup>
}
 801104a:	bf00      	nop
 801104c:	3708      	adds	r7, #8
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	20000998 	.word	0x20000998
 8011058:	20000ecc 	.word	0x20000ecc
 801105c:	20000d50 	.word	0x20000d50
 8011060:	20000d18 	.word	0x20000d18

08011064 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801106c:	4b19      	ldr	r3, [pc, #100]	@ (80110d4 <OnRxWindow2TimerEvent+0x70>)
 801106e:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011072:	2b00      	cmp	r3, #0
 8011074:	d029      	beq.n	80110ca <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011076:	4b17      	ldr	r3, [pc, #92]	@ (80110d4 <OnRxWindow2TimerEvent+0x70>)
 8011078:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 801107c:	4b15      	ldr	r3, [pc, #84]	@ (80110d4 <OnRxWindow2TimerEvent+0x70>)
 801107e:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011082:	4b15      	ldr	r3, [pc, #84]	@ (80110d8 <OnRxWindow2TimerEvent+0x74>)
 8011084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011086:	4a13      	ldr	r2, [pc, #76]	@ (80110d4 <OnRxWindow2TimerEvent+0x70>)
 8011088:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801108c:	4b12      	ldr	r3, [pc, #72]	@ (80110d8 <OnRxWindow2TimerEvent+0x74>)
 801108e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8011092:	4b10      	ldr	r3, [pc, #64]	@ (80110d4 <OnRxWindow2TimerEvent+0x70>)
 8011094:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011098:	4b0f      	ldr	r3, [pc, #60]	@ (80110d8 <OnRxWindow2TimerEvent+0x74>)
 801109a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 801109e:	4b0d      	ldr	r3, [pc, #52]	@ (80110d4 <OnRxWindow2TimerEvent+0x70>)
 80110a0:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80110a4:	4b0b      	ldr	r3, [pc, #44]	@ (80110d4 <OnRxWindow2TimerEvent+0x70>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80110ac:	4b09      	ldr	r3, [pc, #36]	@ (80110d4 <OnRxWindow2TimerEvent+0x70>)
 80110ae:	2201      	movs	r2, #1
 80110b0:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80110b4:	4b08      	ldr	r3, [pc, #32]	@ (80110d8 <OnRxWindow2TimerEvent+0x74>)
 80110b6:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80110ba:	4b06      	ldr	r3, [pc, #24]	@ (80110d4 <OnRxWindow2TimerEvent+0x70>)
 80110bc:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80110c0:	4906      	ldr	r1, [pc, #24]	@ (80110dc <OnRxWindow2TimerEvent+0x78>)
 80110c2:	4807      	ldr	r0, [pc, #28]	@ (80110e0 <OnRxWindow2TimerEvent+0x7c>)
 80110c4:	f001 fb2e 	bl	8012724 <RxWindowSetup>
 80110c8:	e000      	b.n	80110cc <OnRxWindow2TimerEvent+0x68>
        return;
 80110ca:	bf00      	nop
}
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	20000998 	.word	0x20000998
 80110d8:	20000ecc 	.word	0x20000ecc
 80110dc:	20000d68 	.word	0x20000d68
 80110e0:	20000d30 	.word	0x20000d30

080110e4 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80110ec:	4808      	ldr	r0, [pc, #32]	@ (8011110 <OnRetransmitTimeoutTimerEvent+0x2c>)
 80110ee:	f00b fdcf 	bl	801cc90 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80110f2:	4b08      	ldr	r3, [pc, #32]	@ (8011114 <OnRetransmitTimeoutTimerEvent+0x30>)
 80110f4:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d003      	beq.n	8011104 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 80110fc:	4b05      	ldr	r3, [pc, #20]	@ (8011114 <OnRetransmitTimeoutTimerEvent+0x30>)
 80110fe:	2201      	movs	r2, #1
 8011100:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 8011104:	f001 ff24 	bl	8012f50 <OnMacProcessNotify>
}
 8011108:	bf00      	nop
 801110a:	3708      	adds	r7, #8
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}
 8011110:	20000d98 	.word	0x20000d98
 8011114:	20000998 	.word	0x20000998

08011118 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b084      	sub	sp, #16
 801111c:	af00      	add	r7, sp, #0
 801111e:	60ba      	str	r2, [r7, #8]
 8011120:	607b      	str	r3, [r7, #4]
 8011122:	4603      	mov	r3, r0
 8011124:	73fb      	strb	r3, [r7, #15]
 8011126:	460b      	mov	r3, r1
 8011128:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d005      	beq.n	801113c <GetFCntDown+0x24>
 8011130:	69bb      	ldr	r3, [r7, #24]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d002      	beq.n	801113c <GetFCntDown+0x24>
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d101      	bne.n	8011140 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801113c:	2309      	movs	r3, #9
 801113e:	e028      	b.n	8011192 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8011140:	7bfb      	ldrb	r3, [r7, #15]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d016      	beq.n	8011174 <GetFCntDown+0x5c>
 8011146:	2b01      	cmp	r3, #1
 8011148:	d118      	bne.n	801117c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801114a:	79bb      	ldrb	r3, [r7, #6]
 801114c:	2b01      	cmp	r3, #1
 801114e:	d10d      	bne.n	801116c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8011150:	7bbb      	ldrb	r3, [r7, #14]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d002      	beq.n	801115c <GetFCntDown+0x44>
 8011156:	7bbb      	ldrb	r3, [r7, #14]
 8011158:	2b03      	cmp	r3, #3
 801115a:	d103      	bne.n	8011164 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 801115c:	69bb      	ldr	r3, [r7, #24]
 801115e:	2202      	movs	r2, #2
 8011160:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8011162:	e00d      	b.n	8011180 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	2201      	movs	r2, #1
 8011168:	701a      	strb	r2, [r3, #0]
            break;
 801116a:	e009      	b.n	8011180 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 801116c:	69bb      	ldr	r3, [r7, #24]
 801116e:	2203      	movs	r2, #3
 8011170:	701a      	strb	r2, [r3, #0]
            break;
 8011172:	e005      	b.n	8011180 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8011174:	69bb      	ldr	r3, [r7, #24]
 8011176:	2204      	movs	r2, #4
 8011178:	701a      	strb	r2, [r3, #0]
            break;
 801117a:	e001      	b.n	8011180 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801117c:	2305      	movs	r3, #5
 801117e:	e008      	b.n	8011192 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8011180:	69bb      	ldr	r3, [r7, #24]
 8011182:	7818      	ldrb	r0, [r3, #0]
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	89db      	ldrh	r3, [r3, #14]
 8011188:	69fa      	ldr	r2, [r7, #28]
 801118a:	4619      	mov	r1, r3
 801118c:	f004 fe06 	bl	8015d9c <LoRaMacCryptoGetFCntDown>
 8011190:	4603      	mov	r3, r0
}
 8011192:	4618      	mov	r0, r3
 8011194:	3710      	adds	r7, #16
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
	...

0801119c <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 801119c:	b5b0      	push	{r4, r5, r7, lr}
 801119e:	b084      	sub	sp, #16
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	4603      	mov	r3, r0
 80111a4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80111a6:	2303      	movs	r3, #3
 80111a8:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80111aa:	4b6e      	ldr	r3, [pc, #440]	@ (8011364 <SwitchClass+0x1c8>)
 80111ac:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80111b0:	2b02      	cmp	r3, #2
 80111b2:	f000 80bb 	beq.w	801132c <SwitchClass+0x190>
 80111b6:	2b02      	cmp	r3, #2
 80111b8:	f300 80ce 	bgt.w	8011358 <SwitchClass+0x1bc>
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d003      	beq.n	80111c8 <SwitchClass+0x2c>
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	f000 80a5 	beq.w	8011310 <SwitchClass+0x174>
 80111c6:	e0c7      	b.n	8011358 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80111c8:	79fb      	ldrb	r3, [r7, #7]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d109      	bne.n	80111e2 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80111ce:	4b65      	ldr	r3, [pc, #404]	@ (8011364 <SwitchClass+0x1c8>)
 80111d0:	4a64      	ldr	r2, [pc, #400]	@ (8011364 <SwitchClass+0x1c8>)
 80111d2:	3374      	adds	r3, #116	@ 0x74
 80111d4:	326c      	adds	r2, #108	@ 0x6c
 80111d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80111da:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80111de:	2300      	movs	r3, #0
 80111e0:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 80111e2:	79fb      	ldrb	r3, [r7, #7]
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	d10c      	bne.n	8011202 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80111e8:	79fb      	ldrb	r3, [r7, #7]
 80111ea:	4618      	mov	r0, r3
 80111ec:	f003 fcf8 	bl	8014be0 <LoRaMacClassBSwitchClass>
 80111f0:	4603      	mov	r3, r0
 80111f2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80111f4:	7bfb      	ldrb	r3, [r7, #15]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d103      	bne.n	8011202 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80111fa:	4a5a      	ldr	r2, [pc, #360]	@ (8011364 <SwitchClass+0x1c8>)
 80111fc:	79fb      	ldrb	r3, [r7, #7]
 80111fe:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8011202:	79fb      	ldrb	r3, [r7, #7]
 8011204:	2b02      	cmp	r3, #2
 8011206:	f040 80a2 	bne.w	801134e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801120a:	4a56      	ldr	r2, [pc, #344]	@ (8011364 <SwitchClass+0x1c8>)
 801120c:	79fb      	ldrb	r3, [r7, #7]
 801120e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011212:	4a55      	ldr	r2, [pc, #340]	@ (8011368 <SwitchClass+0x1cc>)
 8011214:	4b54      	ldr	r3, [pc, #336]	@ (8011368 <SwitchClass+0x1cc>)
 8011216:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 801121a:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 801121e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011222:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011226:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801122a:	4b4f      	ldr	r3, [pc, #316]	@ (8011368 <SwitchClass+0x1cc>)
 801122c:	2202      	movs	r2, #2
 801122e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011232:	2300      	movs	r3, #0
 8011234:	73bb      	strb	r3, [r7, #14]
 8011236:	e05b      	b.n	80112f0 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8011238:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801123c:	4949      	ldr	r1, [pc, #292]	@ (8011364 <SwitchClass+0x1c8>)
 801123e:	4613      	mov	r3, r2
 8011240:	005b      	lsls	r3, r3, #1
 8011242:	4413      	add	r3, r2
 8011244:	011b      	lsls	r3, r3, #4
 8011246:	440b      	add	r3, r1
 8011248:	33e9      	adds	r3, #233	@ 0xe9
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d049      	beq.n	80112e4 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8011250:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011254:	4943      	ldr	r1, [pc, #268]	@ (8011364 <SwitchClass+0x1c8>)
 8011256:	4613      	mov	r3, r2
 8011258:	005b      	lsls	r3, r3, #1
 801125a:	4413      	add	r3, r2
 801125c:	011b      	lsls	r3, r3, #4
 801125e:	440b      	add	r3, r1
 8011260:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8011264:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8011266:	2b02      	cmp	r3, #2
 8011268:	d13c      	bne.n	80112e4 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 801126a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801126e:	493d      	ldr	r1, [pc, #244]	@ (8011364 <SwitchClass+0x1c8>)
 8011270:	4613      	mov	r3, r2
 8011272:	005b      	lsls	r3, r3, #1
 8011274:	4413      	add	r3, r2
 8011276:	011b      	lsls	r3, r3, #4
 8011278:	440b      	add	r3, r1
 801127a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	4a38      	ldr	r2, [pc, #224]	@ (8011364 <SwitchClass+0x1c8>)
 8011282:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8011284:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011288:	4936      	ldr	r1, [pc, #216]	@ (8011364 <SwitchClass+0x1c8>)
 801128a:	4613      	mov	r3, r2
 801128c:	005b      	lsls	r3, r3, #1
 801128e:	4413      	add	r3, r2
 8011290:	011b      	lsls	r3, r3, #4
 8011292:	440b      	add	r3, r1
 8011294:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8011298:	f993 3000 	ldrsb.w	r3, [r3]
 801129c:	b2da      	uxtb	r2, r3
 801129e:	4b31      	ldr	r3, [pc, #196]	@ (8011364 <SwitchClass+0x1c8>)
 80112a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80112a4:	4b30      	ldr	r3, [pc, #192]	@ (8011368 <SwitchClass+0x1cc>)
 80112a6:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 80112aa:	4b2f      	ldr	r3, [pc, #188]	@ (8011368 <SwitchClass+0x1cc>)
 80112ac:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80112b0:	4b2c      	ldr	r3, [pc, #176]	@ (8011364 <SwitchClass+0x1c8>)
 80112b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112b4:	4a2c      	ldr	r2, [pc, #176]	@ (8011368 <SwitchClass+0x1cc>)
 80112b6:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80112ba:	4b2a      	ldr	r3, [pc, #168]	@ (8011364 <SwitchClass+0x1c8>)
 80112bc:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80112c0:	4b29      	ldr	r3, [pc, #164]	@ (8011368 <SwitchClass+0x1cc>)
 80112c2:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80112c6:	4b27      	ldr	r3, [pc, #156]	@ (8011364 <SwitchClass+0x1c8>)
 80112c8:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80112cc:	4b26      	ldr	r3, [pc, #152]	@ (8011368 <SwitchClass+0x1cc>)
 80112ce:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80112d2:	4b25      	ldr	r3, [pc, #148]	@ (8011368 <SwitchClass+0x1cc>)
 80112d4:	2203      	movs	r2, #3
 80112d6:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80112da:	4b23      	ldr	r3, [pc, #140]	@ (8011368 <SwitchClass+0x1cc>)
 80112dc:	2201      	movs	r2, #1
 80112de:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 80112e2:	e009      	b.n	80112f8 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80112e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	3301      	adds	r3, #1
 80112ec:	b2db      	uxtb	r3, r3
 80112ee:	73bb      	strb	r3, [r7, #14]
 80112f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	dd9f      	ble.n	8011238 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80112f8:	4b1b      	ldr	r3, [pc, #108]	@ (8011368 <SwitchClass+0x1cc>)
 80112fa:	2200      	movs	r2, #0
 80112fc:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8011300:	4b1a      	ldr	r3, [pc, #104]	@ (801136c <SwitchClass+0x1d0>)
 8011302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011304:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8011306:	f001 fa41 	bl	801278c <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 801130a:	2300      	movs	r3, #0
 801130c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 801130e:	e01e      	b.n	801134e <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8011310:	79fb      	ldrb	r3, [r7, #7]
 8011312:	4618      	mov	r0, r3
 8011314:	f003 fc64 	bl	8014be0 <LoRaMacClassBSwitchClass>
 8011318:	4603      	mov	r3, r0
 801131a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 801131c:	7bfb      	ldrb	r3, [r7, #15]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d117      	bne.n	8011352 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011322:	4a10      	ldr	r2, [pc, #64]	@ (8011364 <SwitchClass+0x1c8>)
 8011324:	79fb      	ldrb	r3, [r7, #7]
 8011326:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 801132a:	e012      	b.n	8011352 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 801132c:	79fb      	ldrb	r3, [r7, #7]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d111      	bne.n	8011356 <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8011332:	4b0d      	ldr	r3, [pc, #52]	@ (8011368 <SwitchClass+0x1cc>)
 8011334:	2206      	movs	r2, #6
 8011336:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 801133a:	4a0a      	ldr	r2, [pc, #40]	@ (8011364 <SwitchClass+0x1c8>)
 801133c:	79fb      	ldrb	r3, [r7, #7]
 801133e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8011342:	4b0a      	ldr	r3, [pc, #40]	@ (801136c <SwitchClass+0x1d0>)
 8011344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011346:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8011348:	2300      	movs	r3, #0
 801134a:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 801134c:	e003      	b.n	8011356 <SwitchClass+0x1ba>
            break;
 801134e:	bf00      	nop
 8011350:	e002      	b.n	8011358 <SwitchClass+0x1bc>
            break;
 8011352:	bf00      	nop
 8011354:	e000      	b.n	8011358 <SwitchClass+0x1bc>
            break;
 8011356:	bf00      	nop
        }
    }

    return status;
 8011358:	7bfb      	ldrb	r3, [r7, #15]
}
 801135a:	4618      	mov	r0, r3
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bdb0      	pop	{r4, r5, r7, pc}
 8011362:	bf00      	nop
 8011364:	20000ecc 	.word	0x20000ecc
 8011368:	20000998 	.word	0x20000998
 801136c:	08021620 	.word	0x08021620

08011370 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b086      	sub	sp, #24
 8011374:	af00      	add	r7, sp, #0
 8011376:	4603      	mov	r3, r0
 8011378:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801137a:	4b10      	ldr	r3, [pc, #64]	@ (80113bc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801137c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011380:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8011382:	79fb      	ldrb	r3, [r7, #7]
 8011384:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011386:	230d      	movs	r3, #13
 8011388:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801138a:	4b0c      	ldr	r3, [pc, #48]	@ (80113bc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801138c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8011390:	2b00      	cmp	r3, #0
 8011392:	d001      	beq.n	8011398 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011394:	230e      	movs	r3, #14
 8011396:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011398:	4b08      	ldr	r3, [pc, #32]	@ (80113bc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801139a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801139e:	f107 0210 	add.w	r2, r7, #16
 80113a2:	4611      	mov	r1, r2
 80113a4:	4618      	mov	r0, r3
 80113a6:	f005 fb5b 	bl	8016a60 <RegionGetPhyParam>
 80113aa:	4603      	mov	r3, r0
 80113ac:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	b2db      	uxtb	r3, r3
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3718      	adds	r7, #24
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	20000ecc 	.word	0x20000ecc

080113c0 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	71fb      	strb	r3, [r7, #7]
 80113ca:	460b      	mov	r3, r1
 80113cc:	71bb      	strb	r3, [r7, #6]
 80113ce:	4613      	mov	r3, r2
 80113d0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80113d2:	2300      	movs	r3, #0
 80113d4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80113d6:	2300      	movs	r3, #0
 80113d8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80113da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80113de:	4618      	mov	r0, r3
 80113e0:	f7ff ffc6 	bl	8011370 <GetMaxAppPayloadWithoutFOptsLength>
 80113e4:	4603      	mov	r3, r0
 80113e6:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80113e8:	79fb      	ldrb	r3, [r7, #7]
 80113ea:	b29a      	uxth	r2, r3
 80113ec:	797b      	ldrb	r3, [r7, #5]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	4413      	add	r3, r2
 80113f2:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80113f4:	89ba      	ldrh	r2, [r7, #12]
 80113f6:	89fb      	ldrh	r3, [r7, #14]
 80113f8:	429a      	cmp	r2, r3
 80113fa:	d804      	bhi.n	8011406 <ValidatePayloadLength+0x46>
 80113fc:	89bb      	ldrh	r3, [r7, #12]
 80113fe:	2bff      	cmp	r3, #255	@ 0xff
 8011400:	d801      	bhi.n	8011406 <ValidatePayloadLength+0x46>
    {
        return true;
 8011402:	2301      	movs	r3, #1
 8011404:	e000      	b.n	8011408 <ValidatePayloadLength+0x48>
    }
    return false;
 8011406:	2300      	movs	r3, #0
}
 8011408:	4618      	mov	r0, r3
 801140a:	3710      	adds	r7, #16
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8011410:	b590      	push	{r4, r7, lr}
 8011412:	b0a5      	sub	sp, #148	@ 0x94
 8011414:	af02      	add	r7, sp, #8
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	4608      	mov	r0, r1
 801141a:	4611      	mov	r1, r2
 801141c:	461a      	mov	r2, r3
 801141e:	4603      	mov	r3, r0
 8011420:	70fb      	strb	r3, [r7, #3]
 8011422:	460b      	mov	r3, r1
 8011424:	70bb      	strb	r3, [r7, #2]
 8011426:	4613      	mov	r3, r2
 8011428:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801142a:	2300      	movs	r3, #0
 801142c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 8011430:	2300      	movs	r3, #0
 8011432:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011436:	2300      	movs	r3, #0
 8011438:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 801143c:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8011440:	2b00      	cmp	r3, #0
 8011442:	f000 84c3 	beq.w	8011dcc <ProcessMacCommands+0x9bc>
 8011446:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 801144a:	2b01      	cmp	r3, #1
 801144c:	f040 84c4 	bne.w	8011dd8 <ProcessMacCommands+0x9c8>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8011450:	f000 bcbc 	b.w	8011dcc <ProcessMacCommands+0x9bc>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8011454:	78fb      	ldrb	r3, [r7, #3]
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	4413      	add	r3, r2
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	4618      	mov	r0, r3
 801145e:	f003 febf 	bl	80151e0 <LoRaMacCommandsGetCmdSize>
 8011462:	4603      	mov	r3, r0
 8011464:	461a      	mov	r2, r3
 8011466:	78fb      	ldrb	r3, [r7, #3]
 8011468:	441a      	add	r2, r3
 801146a:	78bb      	ldrb	r3, [r7, #2]
 801146c:	429a      	cmp	r2, r3
 801146e:	f300 84b5 	bgt.w	8011ddc <ProcessMacCommands+0x9cc>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8011472:	78fb      	ldrb	r3, [r7, #3]
 8011474:	1c5a      	adds	r2, r3, #1
 8011476:	70fa      	strb	r2, [r7, #3]
 8011478:	461a      	mov	r2, r3
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	4413      	add	r3, r2
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	3b02      	subs	r3, #2
 8011482:	2b11      	cmp	r3, #17
 8011484:	f200 84ac 	bhi.w	8011de0 <ProcessMacCommands+0x9d0>
 8011488:	a201      	add	r2, pc, #4	@ (adr r2, 8011490 <ProcessMacCommands+0x80>)
 801148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801148e:	bf00      	nop
 8011490:	080114d9 	.word	0x080114d9
 8011494:	0801151b 	.word	0x0801151b
 8011498:	08011697 	.word	0x08011697
 801149c:	080116d5 	.word	0x080116d5
 80114a0:	080117e1 	.word	0x080117e1
 80114a4:	08011831 	.word	0x08011831
 80114a8:	080118ed 	.word	0x080118ed
 80114ac:	08011943 	.word	0x08011943
 80114b0:	08011a29 	.word	0x08011a29
 80114b4:	08011de1 	.word	0x08011de1
 80114b8:	08011de1 	.word	0x08011de1
 80114bc:	08011ad1 	.word	0x08011ad1
 80114c0:	08011de1 	.word	0x08011de1
 80114c4:	08011de1 	.word	0x08011de1
 80114c8:	08011bf1 	.word	0x08011bf1
 80114cc:	08011c25 	.word	0x08011c25
 80114d0:	08011cb5 	.word	0x08011cb5
 80114d4:	08011d2d 	.word	0x08011d2d
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80114d8:	2005      	movs	r0, #5
 80114da:	f004 f859 	bl	8015590 <LoRaMacConfirmQueueIsCmdActive>
 80114de:	4603      	mov	r3, r0
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	f000 8466 	beq.w	8011db2 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80114e6:	2105      	movs	r1, #5
 80114e8:	2000      	movs	r0, #0
 80114ea:	f003 ffc5 	bl	8015478 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80114ee:	78fb      	ldrb	r3, [r7, #3]
 80114f0:	1c5a      	adds	r2, r3, #1
 80114f2:	70fa      	strb	r2, [r7, #3]
 80114f4:	461a      	mov	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	4413      	add	r3, r2
 80114fa:	781a      	ldrb	r2, [r3, #0]
 80114fc:	4bb5      	ldr	r3, [pc, #724]	@ (80117d4 <ProcessMacCommands+0x3c4>)
 80114fe:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8011502:	78fb      	ldrb	r3, [r7, #3]
 8011504:	1c5a      	adds	r2, r3, #1
 8011506:	70fa      	strb	r2, [r7, #3]
 8011508:	461a      	mov	r2, r3
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4413      	add	r3, r2
 801150e:	781a      	ldrb	r2, [r3, #0]
 8011510:	4bb0      	ldr	r3, [pc, #704]	@ (80117d4 <ProcessMacCommands+0x3c4>)
 8011512:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 8011516:	f000 bc4c 	b.w	8011db2 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 801151a:	2300      	movs	r3, #0
 801151c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8011520:	2300      	movs	r3, #0
 8011522:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 8011526:	2300      	movs	r3, #0
 8011528:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 801152c:	2300      	movs	r3, #0
 801152e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 8011532:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8011536:	f083 0301 	eor.w	r3, r3, #1
 801153a:	b2db      	uxtb	r3, r3
 801153c:	2b00      	cmp	r3, #0
 801153e:	f000 80a6 	beq.w	801168e <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 8011542:	2301      	movs	r3, #1
 8011544:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8011548:	78fb      	ldrb	r3, [r7, #3]
 801154a:	3b01      	subs	r3, #1
 801154c:	687a      	ldr	r2, [r7, #4]
 801154e:	4413      	add	r3, r2
 8011550:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011552:	4ba1      	ldr	r3, [pc, #644]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 8011554:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8011558:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801155c:	4b9e      	ldr	r3, [pc, #632]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 801155e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011562:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011566:	4b9c      	ldr	r3, [pc, #624]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 8011568:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801156c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011570:	4b99      	ldr	r3, [pc, #612]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 8011572:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011576:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801157a:	4b97      	ldr	r3, [pc, #604]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 801157c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011580:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8011584:	4b94      	ldr	r3, [pc, #592]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 8011586:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801158a:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801158c:	4b92      	ldr	r3, [pc, #584]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 801158e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8011592:	2b00      	cmp	r3, #0
 8011594:	d008      	beq.n	80115a8 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8011596:	78ba      	ldrb	r2, [r7, #2]
 8011598:	78fb      	ldrb	r3, [r7, #3]
 801159a:	1ad3      	subs	r3, r2, r3
 801159c:	b2db      	uxtb	r3, r3
 801159e:	3301      	adds	r3, #1
 80115a0:	b2db      	uxtb	r3, r3
 80115a2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 80115a6:	e002      	b.n	80115ae <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 80115a8:	2305      	movs	r3, #5
 80115aa:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80115ae:	4b8a      	ldr	r3, [pc, #552]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 80115b0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80115b4:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 80115b8:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 80115bc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80115c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80115c4:	9301      	str	r3, [sp, #4]
 80115c6:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80115ca:	9300      	str	r3, [sp, #0]
 80115cc:	4623      	mov	r3, r4
 80115ce:	f005 fb04 	bl	8016bda <RegionLinkAdrReq>
 80115d2:	4603      	mov	r3, r0
 80115d4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 80115d8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80115dc:	f003 0307 	and.w	r3, r3, #7
 80115e0:	2b07      	cmp	r3, #7
 80115e2:	d119      	bne.n	8011618 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 80115e4:	4b7c      	ldr	r3, [pc, #496]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 80115e6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 80115ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80115ee:	429a      	cmp	r2, r3
 80115f0:	da03      	bge.n	80115fa <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 80115f2:	4b79      	ldr	r3, [pc, #484]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 80115f4:	2201      	movs	r2, #1
 80115f6:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80115fa:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 80115fe:	4b76      	ldr	r3, [pc, #472]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 8011600:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8011604:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 8011608:	4b73      	ldr	r3, [pc, #460]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 801160a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 801160e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8011612:	4b71      	ldr	r3, [pc, #452]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 8011614:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011618:	2300      	movs	r3, #0
 801161a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 801161e:	e00b      	b.n	8011638 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8011620:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8011624:	2201      	movs	r2, #1
 8011626:	4619      	mov	r1, r3
 8011628:	2003      	movs	r0, #3
 801162a:	f003 fc79 	bl	8014f20 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801162e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8011632:	3301      	adds	r3, #1
 8011634:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8011638:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801163c:	4a67      	ldr	r2, [pc, #412]	@ (80117dc <ProcessMacCommands+0x3cc>)
 801163e:	fba2 2303 	umull	r2, r3, r2, r3
 8011642:	089b      	lsrs	r3, r3, #2
 8011644:	b2db      	uxtb	r3, r3
 8011646:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 801164a:	429a      	cmp	r2, r3
 801164c:	d3e8      	bcc.n	8011620 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 801164e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8011652:	78fb      	ldrb	r3, [r7, #3]
 8011654:	4413      	add	r3, r2
 8011656:	b2db      	uxtb	r3, r3
 8011658:	3b01      	subs	r3, #1
 801165a:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 801165c:	78fa      	ldrb	r2, [r7, #3]
 801165e:	78bb      	ldrb	r3, [r7, #2]
 8011660:	429a      	cmp	r2, r3
 8011662:	d20a      	bcs.n	801167a <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8011664:	78fb      	ldrb	r3, [r7, #3]
 8011666:	1c5a      	adds	r2, r3, #1
 8011668:	70fa      	strb	r2, [r7, #3]
 801166a:	461a      	mov	r2, r3
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	4413      	add	r3, r2
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	2b03      	cmp	r3, #3
 8011674:	f43f af68 	beq.w	8011548 <ProcessMacCommands+0x138>
 8011678:	e000      	b.n	801167c <ProcessMacCommands+0x26c>
                            break;
 801167a:	bf00      	nop

                    if( macIndex < commandsSize )
 801167c:	78fa      	ldrb	r2, [r7, #3]
 801167e:	78bb      	ldrb	r3, [r7, #2]
 8011680:	429a      	cmp	r2, r3
 8011682:	f080 8398 	bcs.w	8011db6 <ProcessMacCommands+0x9a6>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8011686:	78fb      	ldrb	r3, [r7, #3]
 8011688:	3b01      	subs	r3, #1
 801168a:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 801168c:	e393      	b.n	8011db6 <ProcessMacCommands+0x9a6>
                    macIndex += 4;
 801168e:	78fb      	ldrb	r3, [r7, #3]
 8011690:	3304      	adds	r3, #4
 8011692:	70fb      	strb	r3, [r7, #3]
                break;
 8011694:	e38f      	b.n	8011db6 <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8011696:	78fb      	ldrb	r3, [r7, #3]
 8011698:	1c5a      	adds	r2, r3, #1
 801169a:	70fa      	strb	r2, [r7, #3]
 801169c:	461a      	mov	r2, r3
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4413      	add	r3, r2
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	f003 030f 	and.w	r3, r3, #15
 80116a8:	b2da      	uxtb	r2, r3
 80116aa:	4b4b      	ldr	r3, [pc, #300]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 80116ac:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80116b0:	4b49      	ldr	r3, [pc, #292]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 80116b2:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 80116b6:	461a      	mov	r2, r3
 80116b8:	2301      	movs	r3, #1
 80116ba:	4093      	lsls	r3, r2
 80116bc:	b29a      	uxth	r2, r3
 80116be:	4b46      	ldr	r3, [pc, #280]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 80116c0:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80116c4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80116c8:	2200      	movs	r2, #0
 80116ca:	4619      	mov	r1, r3
 80116cc:	2004      	movs	r0, #4
 80116ce:	f003 fc27 	bl	8014f20 <LoRaMacCommandsAddCmd>
                break;
 80116d2:	e37b      	b.n	8011dcc <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80116d4:	2307      	movs	r3, #7
 80116d6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80116da:	78fb      	ldrb	r3, [r7, #3]
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	4413      	add	r3, r2
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	091b      	lsrs	r3, r3, #4
 80116e4:	b2db      	uxtb	r3, r3
 80116e6:	b25b      	sxtb	r3, r3
 80116e8:	f003 0307 	and.w	r3, r3, #7
 80116ec:	b25b      	sxtb	r3, r3
 80116ee:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80116f2:	78fb      	ldrb	r3, [r7, #3]
 80116f4:	687a      	ldr	r2, [r7, #4]
 80116f6:	4413      	add	r3, r2
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	b25b      	sxtb	r3, r3
 80116fc:	f003 030f 	and.w	r3, r3, #15
 8011700:	b25b      	sxtb	r3, r3
 8011702:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 8011706:	78fb      	ldrb	r3, [r7, #3]
 8011708:	3301      	adds	r3, #1
 801170a:	70fb      	strb	r3, [r7, #3]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( rxParamSetupReq.Datarate == 0x0F )
 801170c:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8011710:	2b0f      	cmp	r3, #15
 8011712:	d105      	bne.n	8011720 <ProcessMacCommands+0x310>
                {
                    // Keep the current datarate
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
 8011714:	4b30      	ldr	r3, [pc, #192]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 8011716:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801171a:	b25b      	sxtb	r3, r3
 801171c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                }
#endif

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8011720:	78fb      	ldrb	r3, [r7, #3]
 8011722:	1c5a      	adds	r2, r3, #1
 8011724:	70fa      	strb	r2, [r7, #3]
 8011726:	461a      	mov	r2, r3
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	4413      	add	r3, r2
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011730:	78fb      	ldrb	r3, [r7, #3]
 8011732:	1c5a      	adds	r2, r3, #1
 8011734:	70fa      	strb	r2, [r7, #3]
 8011736:	461a      	mov	r2, r3
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	4413      	add	r3, r2
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	021a      	lsls	r2, r3, #8
 8011740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011742:	4313      	orrs	r3, r2
 8011744:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011746:	78fb      	ldrb	r3, [r7, #3]
 8011748:	1c5a      	adds	r2, r3, #1
 801174a:	70fa      	strb	r2, [r7, #3]
 801174c:	461a      	mov	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	4413      	add	r3, r2
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	041a      	lsls	r2, r3, #16
 8011756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011758:	4313      	orrs	r3, r2
 801175a:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 801175c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801175e:	2264      	movs	r2, #100	@ 0x64
 8011760:	fb02 f303 	mul.w	r3, r2, r3
 8011764:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8011766:	4b1c      	ldr	r3, [pc, #112]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 8011768:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801176c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8011770:	4611      	mov	r1, r2
 8011772:	4618      	mov	r0, r3
 8011774:	f005 fa4b 	bl	8016c0e <RegionRxParamSetupReq>
 8011778:	4603      	mov	r3, r0
 801177a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 801177e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011782:	f003 0307 	and.w	r3, r3, #7
 8011786:	2b07      	cmp	r3, #7
 8011788:	d117      	bne.n	80117ba <ProcessMacCommands+0x3aa>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801178a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 801178e:	b2da      	uxtb	r2, r3
 8011790:	4b11      	ldr	r3, [pc, #68]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 8011792:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8011796:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 801179a:	b2da      	uxtb	r2, r3
 801179c:	4b0e      	ldr	r3, [pc, #56]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 801179e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80117a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117a4:	4a0c      	ldr	r2, [pc, #48]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 80117a6:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80117a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117aa:	4a0b      	ldr	r2, [pc, #44]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 80117ac:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80117ae:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80117b2:	b2da      	uxtb	r2, r3
 80117b4:	4b08      	ldr	r3, [pc, #32]	@ (80117d8 <ProcessMacCommands+0x3c8>)
 80117b6:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 80117ba:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80117be:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80117c2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80117c6:	2201      	movs	r2, #1
 80117c8:	4619      	mov	r1, r3
 80117ca:	2005      	movs	r0, #5
 80117cc:	f003 fba8 	bl	8014f20 <LoRaMacCommandsAddCmd>
                break;
 80117d0:	e2fc      	b.n	8011dcc <ProcessMacCommands+0x9bc>
 80117d2:	bf00      	nop
 80117d4:	20000998 	.word	0x20000998
 80117d8:	20000ecc 	.word	0x20000ecc
 80117dc:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80117e0:	23ff      	movs	r3, #255	@ 0xff
 80117e2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80117e6:	4bb7      	ldr	r3, [pc, #732]	@ (8011ac4 <ProcessMacCommands+0x6b4>)
 80117e8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d00d      	beq.n	801180c <ProcessMacCommands+0x3fc>
 80117f0:	4bb4      	ldr	r3, [pc, #720]	@ (8011ac4 <ProcessMacCommands+0x6b4>)
 80117f2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d007      	beq.n	801180c <ProcessMacCommands+0x3fc>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80117fc:	4bb1      	ldr	r3, [pc, #708]	@ (8011ac4 <ProcessMacCommands+0x6b4>)
 80117fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	4798      	blx	r3
 8011806:	4603      	mov	r3, r0
 8011808:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 801180c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8011810:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8011814:	787b      	ldrb	r3, [r7, #1]
 8011816:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801181a:	b2db      	uxtb	r3, r3
 801181c:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011820:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011824:	2202      	movs	r2, #2
 8011826:	4619      	mov	r1, r3
 8011828:	2006      	movs	r0, #6
 801182a:	f003 fb79 	bl	8014f20 <LoRaMacCommandsAddCmd>
                break;
 801182e:	e2cd      	b.n	8011dcc <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011830:	2303      	movs	r3, #3
 8011832:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8011836:	78fb      	ldrb	r3, [r7, #3]
 8011838:	1c5a      	adds	r2, r3, #1
 801183a:	70fa      	strb	r2, [r7, #3]
 801183c:	461a      	mov	r2, r3
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4413      	add	r3, r2
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	b25b      	sxtb	r3, r3
 8011846:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 801184a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801184e:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8011850:	78fb      	ldrb	r3, [r7, #3]
 8011852:	1c5a      	adds	r2, r3, #1
 8011854:	70fa      	strb	r2, [r7, #3]
 8011856:	461a      	mov	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	4413      	add	r3, r2
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011860:	78fb      	ldrb	r3, [r7, #3]
 8011862:	1c5a      	adds	r2, r3, #1
 8011864:	70fa      	strb	r2, [r7, #3]
 8011866:	461a      	mov	r2, r3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	4413      	add	r3, r2
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	021a      	lsls	r2, r3, #8
 8011870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011872:	4313      	orrs	r3, r2
 8011874:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011876:	78fb      	ldrb	r3, [r7, #3]
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	70fa      	strb	r2, [r7, #3]
 801187c:	461a      	mov	r2, r3
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	4413      	add	r3, r2
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	041a      	lsls	r2, r3, #16
 8011886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011888:	4313      	orrs	r3, r2
 801188a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 801188c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801188e:	2264      	movs	r2, #100	@ 0x64
 8011890:	fb02 f303 	mul.w	r3, r2, r3
 8011894:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 8011896:	2300      	movs	r3, #0
 8011898:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 801189a:	78fb      	ldrb	r3, [r7, #3]
 801189c:	1c5a      	adds	r2, r3, #1
 801189e:	70fa      	strb	r2, [r7, #3]
 80118a0:	461a      	mov	r2, r3
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	4413      	add	r3, r2
 80118a6:	781b      	ldrb	r3, [r3, #0]
 80118a8:	b25b      	sxtb	r3, r3
 80118aa:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80118ae:	4b86      	ldr	r3, [pc, #536]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 80118b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80118b4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80118b8:	4611      	mov	r1, r2
 80118ba:	4618      	mov	r0, r3
 80118bc:	f005 f9ba 	bl	8016c34 <RegionNewChannelReq>
 80118c0:	4603      	mov	r3, r0
 80118c2:	b2db      	uxtb	r3, r3
 80118c4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 80118c8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80118cc:	b25b      	sxtb	r3, r3
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	f2c0 8273 	blt.w	8011dba <ProcessMacCommands+0x9aa>
                {
                    macCmdPayload[0] = status;
 80118d4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80118d8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80118dc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80118e0:	2201      	movs	r2, #1
 80118e2:	4619      	mov	r1, r3
 80118e4:	2007      	movs	r0, #7
 80118e6:	f003 fb1b 	bl	8014f20 <LoRaMacCommandsAddCmd>
                }
                break;
 80118ea:	e266      	b.n	8011dba <ProcessMacCommands+0x9aa>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80118ec:	78fb      	ldrb	r3, [r7, #3]
 80118ee:	1c5a      	adds	r2, r3, #1
 80118f0:	70fa      	strb	r2, [r7, #3]
 80118f2:	461a      	mov	r2, r3
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	4413      	add	r3, r2
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	f003 030f 	and.w	r3, r3, #15
 80118fe:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 8011902:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8011906:	2b00      	cmp	r3, #0
 8011908:	d104      	bne.n	8011914 <ProcessMacCommands+0x504>
                {
                    delay++;
 801190a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 801190e:	3301      	adds	r3, #1
 8011910:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8011914:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8011918:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801191c:	fb02 f303 	mul.w	r3, r2, r3
 8011920:	461a      	mov	r2, r3
 8011922:	4b69      	ldr	r3, [pc, #420]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 8011924:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011926:	4b68      	ldr	r3, [pc, #416]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 8011928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801192a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801192e:	4a66      	ldr	r2, [pc, #408]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 8011930:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8011932:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011936:	2200      	movs	r2, #0
 8011938:	4619      	mov	r1, r3
 801193a:	2008      	movs	r0, #8
 801193c:	f003 faf0 	bl	8014f20 <LoRaMacCommandsAddCmd>
                break;
 8011940:	e244      	b.n	8011dcc <ProcessMacCommands+0x9bc>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8011942:	78fb      	ldrb	r3, [r7, #3]
 8011944:	1c5a      	adds	r2, r3, #1
 8011946:	70fa      	strb	r2, [r7, #3]
 8011948:	461a      	mov	r2, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	4413      	add	r3, r2
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8011954:	2300      	movs	r3, #0
 8011956:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801195a:	2300      	movs	r3, #0
 801195c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8011960:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8011964:	f003 0320 	and.w	r3, r3, #32
 8011968:	2b00      	cmp	r3, #0
 801196a:	d002      	beq.n	8011972 <ProcessMacCommands+0x562>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 801196c:	2301      	movs	r3, #1
 801196e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8011972:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8011976:	f003 0310 	and.w	r3, r3, #16
 801197a:	2b00      	cmp	r3, #0
 801197c:	d002      	beq.n	8011984 <ProcessMacCommands+0x574>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801197e:	2301      	movs	r3, #1
 8011980:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8011984:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8011988:	f003 030f 	and.w	r3, r3, #15
 801198c:	b2db      	uxtb	r3, r3
 801198e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8011992:	4b4d      	ldr	r3, [pc, #308]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 8011994:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011998:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801199c:	4611      	mov	r1, r2
 801199e:	4618      	mov	r0, r3
 80119a0:	f005 f95b 	bl	8016c5a <RegionTxParamSetupReq>
 80119a4:	4603      	mov	r3, r0
 80119a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119aa:	f000 8208 	beq.w	8011dbe <ProcessMacCommands+0x9ae>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80119ae:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80119b2:	4b45      	ldr	r3, [pc, #276]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 80119b4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80119b8:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80119bc:	4b42      	ldr	r3, [pc, #264]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 80119be:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80119c2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80119c6:	461a      	mov	r2, r3
 80119c8:	4b40      	ldr	r3, [pc, #256]	@ (8011acc <ProcessMacCommands+0x6bc>)
 80119ca:	5c9b      	ldrb	r3, [r3, r2]
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7ef f9c9 	bl	8000d64 <__aeabi_ui2f>
 80119d2:	4603      	mov	r3, r0
 80119d4:	4a3c      	ldr	r2, [pc, #240]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 80119d6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80119da:	2302      	movs	r3, #2
 80119dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80119e0:	4b39      	ldr	r3, [pc, #228]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 80119e2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80119e6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80119ea:	4b37      	ldr	r3, [pc, #220]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 80119ec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80119f0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80119f4:	4611      	mov	r1, r2
 80119f6:	4618      	mov	r0, r3
 80119f8:	f005 f832 	bl	8016a60 <RegionGetPhyParam>
 80119fc:	4603      	mov	r3, r0
 80119fe:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8011a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a02:	b25a      	sxtb	r2, r3
 8011a04:	4b30      	ldr	r3, [pc, #192]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 8011a06:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011a0a:	4293      	cmp	r3, r2
 8011a0c:	bfb8      	it	lt
 8011a0e:	4613      	movlt	r3, r2
 8011a10:	b25a      	sxtb	r2, r3
 8011a12:	4b2d      	ldr	r3, [pc, #180]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 8011a14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8011a18:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	4619      	mov	r1, r3
 8011a20:	2009      	movs	r0, #9
 8011a22:	f003 fa7d 	bl	8014f20 <LoRaMacCommandsAddCmd>
                }
                break;
 8011a26:	e1ca      	b.n	8011dbe <ProcessMacCommands+0x9ae>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8011a28:	2303      	movs	r3, #3
 8011a2a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8011a2e:	78fb      	ldrb	r3, [r7, #3]
 8011a30:	1c5a      	adds	r2, r3, #1
 8011a32:	70fa      	strb	r2, [r7, #3]
 8011a34:	461a      	mov	r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	4413      	add	r3, r2
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8011a40:	78fb      	ldrb	r3, [r7, #3]
 8011a42:	1c5a      	adds	r2, r3, #1
 8011a44:	70fa      	strb	r2, [r7, #3]
 8011a46:	461a      	mov	r2, r3
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	4413      	add	r3, r2
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011a50:	78fb      	ldrb	r3, [r7, #3]
 8011a52:	1c5a      	adds	r2, r3, #1
 8011a54:	70fa      	strb	r2, [r7, #3]
 8011a56:	461a      	mov	r2, r3
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	4413      	add	r3, r2
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	021a      	lsls	r2, r3, #8
 8011a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a62:	4313      	orrs	r3, r2
 8011a64:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011a66:	78fb      	ldrb	r3, [r7, #3]
 8011a68:	1c5a      	adds	r2, r3, #1
 8011a6a:	70fa      	strb	r2, [r7, #3]
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	4413      	add	r3, r2
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	041a      	lsls	r2, r3, #16
 8011a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a78:	4313      	orrs	r3, r2
 8011a7a:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a7e:	2264      	movs	r2, #100	@ 0x64
 8011a80:	fb02 f303 	mul.w	r3, r2, r3
 8011a84:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8011a86:	4b10      	ldr	r3, [pc, #64]	@ (8011ac8 <ProcessMacCommands+0x6b8>)
 8011a88:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011a8c:	f107 0220 	add.w	r2, r7, #32
 8011a90:	4611      	mov	r1, r2
 8011a92:	4618      	mov	r0, r3
 8011a94:	f005 f8f4 	bl	8016c80 <RegionDlChannelReq>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	b2db      	uxtb	r3, r3
 8011a9c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8011aa0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011aa4:	b25b      	sxtb	r3, r3
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	f2c0 818b 	blt.w	8011dc2 <ProcessMacCommands+0x9b2>
                {
                    macCmdPayload[0] = status;
 8011aac:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011ab0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8011ab4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011ab8:	2201      	movs	r2, #1
 8011aba:	4619      	mov	r1, r3
 8011abc:	200a      	movs	r0, #10
 8011abe:	f003 fa2f 	bl	8014f20 <LoRaMacCommandsAddCmd>
                }
                break;
 8011ac2:	e17e      	b.n	8011dc2 <ProcessMacCommands+0x9b2>
 8011ac4:	20000998 	.word	0x20000998
 8011ac8:	20000ecc 	.word	0x20000ecc
 8011acc:	080215d8 	.word	0x080215d8
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8011ad0:	2009      	movs	r0, #9
 8011ad2:	f003 fd5d 	bl	8015590 <LoRaMacConfirmQueueIsCmdActive>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	f000 8084 	beq.w	8011be6 <ProcessMacCommands+0x7d6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8011ade:	2109      	movs	r1, #9
 8011ae0:	2000      	movs	r0, #0
 8011ae2:	f003 fcc9 	bl	8015478 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8011ae6:	f107 0318 	add.w	r3, r7, #24
 8011aea:	2200      	movs	r2, #0
 8011aec:	601a      	str	r2, [r3, #0]
 8011aee:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8011af0:	f107 0310 	add.w	r3, r7, #16
 8011af4:	2200      	movs	r2, #0
 8011af6:	601a      	str	r2, [r3, #0]
 8011af8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8011afa:	f107 0308 	add.w	r3, r7, #8
 8011afe:	2200      	movs	r2, #0
 8011b00:	601a      	str	r2, [r3, #0]
 8011b02:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011b04:	78fb      	ldrb	r3, [r7, #3]
 8011b06:	1c5a      	adds	r2, r3, #1
 8011b08:	70fa      	strb	r2, [r7, #3]
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	4413      	add	r3, r2
 8011b10:	781b      	ldrb	r3, [r3, #0]
 8011b12:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011b14:	78fb      	ldrb	r3, [r7, #3]
 8011b16:	1c5a      	adds	r2, r3, #1
 8011b18:	70fa      	strb	r2, [r7, #3]
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	4413      	add	r3, r2
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	021a      	lsls	r2, r3, #8
 8011b24:	69bb      	ldr	r3, [r7, #24]
 8011b26:	4313      	orrs	r3, r2
 8011b28:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011b2a:	78fb      	ldrb	r3, [r7, #3]
 8011b2c:	1c5a      	adds	r2, r3, #1
 8011b2e:	70fa      	strb	r2, [r7, #3]
 8011b30:	461a      	mov	r2, r3
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	4413      	add	r3, r2
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	041a      	lsls	r2, r3, #16
 8011b3a:	69bb      	ldr	r3, [r7, #24]
 8011b3c:	4313      	orrs	r3, r2
 8011b3e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011b40:	78fb      	ldrb	r3, [r7, #3]
 8011b42:	1c5a      	adds	r2, r3, #1
 8011b44:	70fa      	strb	r2, [r7, #3]
 8011b46:	461a      	mov	r2, r3
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	061a      	lsls	r2, r3, #24
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	4313      	orrs	r3, r2
 8011b54:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8011b56:	78fb      	ldrb	r3, [r7, #3]
 8011b58:	1c5a      	adds	r2, r3, #1
 8011b5a:	70fa      	strb	r2, [r7, #3]
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	4413      	add	r3, r2
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	b21b      	sxth	r3, r3
 8011b66:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011b68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011b72:	fb02 f303 	mul.w	r3, r2, r3
 8011b76:	121b      	asrs	r3, r3, #8
 8011b78:	b21b      	sxth	r3, r3
 8011b7a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8011b7c:	f107 0310 	add.w	r3, r7, #16
 8011b80:	f107 0218 	add.w	r2, r7, #24
 8011b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b88:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8011b8c:	693a      	ldr	r2, [r7, #16]
 8011b8e:	4b96      	ldr	r3, [pc, #600]	@ (8011de8 <ProcessMacCommands+0x9d8>)
 8011b90:	4413      	add	r3, r2
 8011b92:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8011b94:	f107 0308 	add.w	r3, r7, #8
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f00a fddf 	bl	801c75c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8011b9e:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8011ba2:	4b92      	ldr	r3, [pc, #584]	@ (8011dec <ProcessMacCommands+0x9dc>)
 8011ba4:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8011ba8:	9200      	str	r2, [sp, #0]
 8011baa:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 8011bae:	f107 0210 	add.w	r2, r7, #16
 8011bb2:	ca06      	ldmia	r2, {r1, r2}
 8011bb4:	f00a fd6b 	bl	801c68e <SysTimeSub>
 8011bb8:	f107 0010 	add.w	r0, r7, #16
 8011bbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011bbe:	9300      	str	r3, [sp, #0]
 8011bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011bc2:	f107 0208 	add.w	r2, r7, #8
 8011bc6:	ca06      	ldmia	r2, {r1, r2}
 8011bc8:	f00a fd28 	bl	801c61c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011bcc:	f107 0310 	add.w	r3, r7, #16
 8011bd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011bd4:	f00a fd94 	bl	801c700 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011bd8:	f003 f840 	bl	8014c5c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011bdc:	4b83      	ldr	r3, [pc, #524]	@ (8011dec <ProcessMacCommands+0x9dc>)
 8011bde:	2201      	movs	r2, #1
 8011be0:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8011be4:	e0f2      	b.n	8011dcc <ProcessMacCommands+0x9bc>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8011be6:	4b81      	ldr	r3, [pc, #516]	@ (8011dec <ProcessMacCommands+0x9dc>)
 8011be8:	2200      	movs	r2, #0
 8011bea:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 8011bee:	e0ed      	b.n	8011dcc <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011bf0:	200c      	movs	r0, #12
 8011bf2:	f003 fccd 	bl	8015590 <LoRaMacConfirmQueueIsCmdActive>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	f000 80e4 	beq.w	8011dc6 <ProcessMacCommands+0x9b6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011bfe:	210c      	movs	r1, #12
 8011c00:	2000      	movs	r0, #0
 8011c02:	f003 fc39 	bl	8015478 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011c06:	4b79      	ldr	r3, [pc, #484]	@ (8011dec <ProcessMacCommands+0x9dc>)
 8011c08:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011c0c:	2b04      	cmp	r3, #4
 8011c0e:	f000 80da 	beq.w	8011dc6 <ProcessMacCommands+0x9b6>
 8011c12:	4b76      	ldr	r3, [pc, #472]	@ (8011dec <ProcessMacCommands+0x9dc>)
 8011c14:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011c18:	2b05      	cmp	r3, #5
 8011c1a:	f000 80d4 	beq.w	8011dc6 <ProcessMacCommands+0x9b6>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011c1e:	f002 fffe 	bl	8014c1e <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8011c22:	e0d0      	b.n	8011dc6 <ProcessMacCommands+0x9b6>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011c24:	2303      	movs	r3, #3
 8011c26:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011c2e:	78fb      	ldrb	r3, [r7, #3]
 8011c30:	1c5a      	adds	r2, r3, #1
 8011c32:	70fa      	strb	r2, [r7, #3]
 8011c34:	461a      	mov	r2, r3
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	4413      	add	r3, r2
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011c3e:	78fb      	ldrb	r3, [r7, #3]
 8011c40:	1c5a      	adds	r2, r3, #1
 8011c42:	70fa      	strb	r2, [r7, #3]
 8011c44:	461a      	mov	r2, r3
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	4413      	add	r3, r2
 8011c4a:	781b      	ldrb	r3, [r3, #0]
 8011c4c:	021b      	lsls	r3, r3, #8
 8011c4e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011c50:	4313      	orrs	r3, r2
 8011c52:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011c54:	78fb      	ldrb	r3, [r7, #3]
 8011c56:	1c5a      	adds	r2, r3, #1
 8011c58:	70fa      	strb	r2, [r7, #3]
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	4413      	add	r3, r2
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	041b      	lsls	r3, r3, #16
 8011c64:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011c66:	4313      	orrs	r3, r2
 8011c68:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 8011c6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011c6c:	2264      	movs	r2, #100	@ 0x64
 8011c6e:	fb02 f303 	mul.w	r3, r2, r3
 8011c72:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 8011c74:	78fb      	ldrb	r3, [r7, #3]
 8011c76:	1c5a      	adds	r2, r3, #1
 8011c78:	70fa      	strb	r2, [r7, #3]
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	4413      	add	r3, r2
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	f003 030f 	and.w	r3, r3, #15
 8011c86:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8011c8a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011c8e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8011c90:	4618      	mov	r0, r3
 8011c92:	f002 ffca 	bl	8014c2a <LoRaMacClassBPingSlotChannelReq>
 8011c96:	4603      	mov	r3, r0
 8011c98:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 8011c9c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8011ca0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8011ca4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011ca8:	2201      	movs	r2, #1
 8011caa:	4619      	mov	r1, r3
 8011cac:	2011      	movs	r0, #17
 8011cae:	f003 f937 	bl	8014f20 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 8011cb2:	e08b      	b.n	8011dcc <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8011cb4:	200d      	movs	r0, #13
 8011cb6:	f003 fc6b 	bl	8015590 <LoRaMacConfirmQueueIsCmdActive>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	f000 8084 	beq.w	8011dca <ProcessMacCommands+0x9ba>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8011cc2:	210d      	movs	r1, #13
 8011cc4:	2000      	movs	r0, #0
 8011cc6:	f003 fbd7 	bl	8015478 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011cd6:	78fb      	ldrb	r3, [r7, #3]
 8011cd8:	1c5a      	adds	r2, r3, #1
 8011cda:	70fa      	strb	r2, [r7, #3]
 8011cdc:	461a      	mov	r2, r3
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	4413      	add	r3, r2
 8011ce2:	781b      	ldrb	r3, [r3, #0]
 8011ce4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011ce8:	78fb      	ldrb	r3, [r7, #3]
 8011cea:	1c5a      	adds	r2, r3, #1
 8011cec:	70fa      	strb	r2, [r7, #3]
 8011cee:	461a      	mov	r2, r3
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	4413      	add	r3, r2
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	021b      	lsls	r3, r3, #8
 8011cf8:	b21a      	sxth	r2, r3
 8011cfa:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8011cfe:	4313      	orrs	r3, r2
 8011d00:	b21b      	sxth	r3, r3
 8011d02:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8011d06:	78fb      	ldrb	r3, [r7, #3]
 8011d08:	1c5a      	adds	r2, r3, #1
 8011d0a:	70fa      	strb	r2, [r7, #3]
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4413      	add	r3, r2
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011d18:	4b35      	ldr	r3, [pc, #212]	@ (8011df0 <ProcessMacCommands+0x9e0>)
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8011d20:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8011d24:	4618      	mov	r0, r3
 8011d26:	f002 ff8c 	bl	8014c42 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011d2a:	e04e      	b.n	8011dca <ProcessMacCommands+0x9ba>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8011d32:	78fb      	ldrb	r3, [r7, #3]
 8011d34:	1c5a      	adds	r2, r3, #1
 8011d36:	70fa      	strb	r2, [r7, #3]
 8011d38:	461a      	mov	r2, r3
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011d44:	78fb      	ldrb	r3, [r7, #3]
 8011d46:	1c5a      	adds	r2, r3, #1
 8011d48:	70fa      	strb	r2, [r7, #3]
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	4413      	add	r3, r2
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	021b      	lsls	r3, r3, #8
 8011d54:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011d58:	4313      	orrs	r3, r2
 8011d5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011d5e:	78fb      	ldrb	r3, [r7, #3]
 8011d60:	1c5a      	adds	r2, r3, #1
 8011d62:	70fa      	strb	r2, [r7, #3]
 8011d64:	461a      	mov	r2, r3
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	4413      	add	r3, r2
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	041b      	lsls	r3, r3, #16
 8011d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011d72:	4313      	orrs	r3, r2
 8011d74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 8011d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011d7c:	2264      	movs	r2, #100	@ 0x64
 8011d7e:	fb02 f303 	mul.w	r3, r2, r3
 8011d82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8011d86:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8011d8a:	f002 ff6d 	bl	8014c68 <LoRaMacClassBBeaconFreqReq>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d003      	beq.n	8011d9c <ProcessMacCommands+0x98c>
                    {
                        macCmdPayload[0] = 1;
 8011d94:	2301      	movs	r3, #1
 8011d96:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8011d9a:	e002      	b.n	8011da2 <ProcessMacCommands+0x992>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8011da2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011da6:	2201      	movs	r2, #1
 8011da8:	4619      	mov	r1, r3
 8011daa:	2013      	movs	r0, #19
 8011dac:	f003 f8b8 	bl	8014f20 <LoRaMacCommandsAddCmd>
                }
                break;
 8011db0:	e00c      	b.n	8011dcc <ProcessMacCommands+0x9bc>
                break;
 8011db2:	bf00      	nop
 8011db4:	e00a      	b.n	8011dcc <ProcessMacCommands+0x9bc>
                break;
 8011db6:	bf00      	nop
 8011db8:	e008      	b.n	8011dcc <ProcessMacCommands+0x9bc>
                break;
 8011dba:	bf00      	nop
 8011dbc:	e006      	b.n	8011dcc <ProcessMacCommands+0x9bc>
                break;
 8011dbe:	bf00      	nop
 8011dc0:	e004      	b.n	8011dcc <ProcessMacCommands+0x9bc>
                break;
 8011dc2:	bf00      	nop
 8011dc4:	e002      	b.n	8011dcc <ProcessMacCommands+0x9bc>
                break;
 8011dc6:	bf00      	nop
 8011dc8:	e000      	b.n	8011dcc <ProcessMacCommands+0x9bc>
                break;
 8011dca:	bf00      	nop
    while( macIndex < commandsSize )
 8011dcc:	78fa      	ldrb	r2, [r7, #3]
 8011dce:	78bb      	ldrb	r3, [r7, #2]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	f4ff ab3f 	bcc.w	8011454 <ProcessMacCommands+0x44>
 8011dd6:	e004      	b.n	8011de2 <ProcessMacCommands+0x9d2>
        return;
 8011dd8:	bf00      	nop
 8011dda:	e002      	b.n	8011de2 <ProcessMacCommands+0x9d2>
            return;
 8011ddc:	bf00      	nop
 8011dde:	e000      	b.n	8011de2 <ProcessMacCommands+0x9d2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011de0:	bf00      	nop
        }
    }
}
 8011de2:	378c      	adds	r7, #140	@ 0x8c
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd90      	pop	{r4, r7, pc}
 8011de8:	12d53d80 	.word	0x12d53d80
 8011dec:	20000998 	.word	0x20000998
 8011df0:	20001adc 	.word	0x20001adc

08011df4 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b08e      	sub	sp, #56	@ 0x38
 8011df8:	af02      	add	r7, sp, #8
 8011dfa:	60f8      	str	r0, [r7, #12]
 8011dfc:	607a      	str	r2, [r7, #4]
 8011dfe:	461a      	mov	r2, r3
 8011e00:	460b      	mov	r3, r1
 8011e02:	72fb      	strb	r3, [r7, #11]
 8011e04:	4613      	mov	r3, r2
 8011e06:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e08:	2303      	movs	r3, #3
 8011e0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011e0e:	4b66      	ldr	r3, [pc, #408]	@ (8011fa8 <Send+0x1b4>)
 8011e10:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8011e14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8011e18:	4b63      	ldr	r3, [pc, #396]	@ (8011fa8 <Send+0x1b4>)
 8011e1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011e1e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011e22:	4b61      	ldr	r3, [pc, #388]	@ (8011fa8 <Send+0x1b4>)
 8011e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011e28:	4b5f      	ldr	r3, [pc, #380]	@ (8011fa8 <Send+0x1b4>)
 8011e2a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d101      	bne.n	8011e36 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011e32:	2307      	movs	r3, #7
 8011e34:	e0b4      	b.n	8011fa0 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8011e36:	4b5c      	ldr	r3, [pc, #368]	@ (8011fa8 <Send+0x1b4>)
 8011e38:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d102      	bne.n	8011e46 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011e40:	4b59      	ldr	r3, [pc, #356]	@ (8011fa8 <Send+0x1b4>)
 8011e42:	2200      	movs	r2, #0
 8011e44:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 8011e46:	2300      	movs	r3, #0
 8011e48:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8011e4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011e50:	f023 030f 	bic.w	r3, r3, #15
 8011e54:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8011e58:	4b53      	ldr	r3, [pc, #332]	@ (8011fa8 <Send+0x1b4>)
 8011e5a:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8011e5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011e62:	f362 13c7 	bfi	r3, r2, #7, #1
 8011e66:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8011fa8 <Send+0x1b4>)
 8011e6c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	d106      	bne.n	8011e82 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011e74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011e78:	f043 0310 	orr.w	r3, r3, #16
 8011e7c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8011e80:	e005      	b.n	8011e8e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011e82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011e86:	f023 0310 	bic.w	r3, r3, #16
 8011e8a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8011e8e:	4b46      	ldr	r3, [pc, #280]	@ (8011fa8 <Send+0x1b4>)
 8011e90:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d005      	beq.n	8011ea4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8011e98:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011e9c:	f043 0320 	orr.w	r3, r3, #32
 8011ea0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011ea8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011eac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	bf14      	ite	ne
 8011eb6:	2301      	movne	r3, #1
 8011eb8:	2300      	moveq	r3, #0
 8011eba:	b2db      	uxtb	r3, r3
 8011ebc:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011ebe:	4b3a      	ldr	r3, [pc, #232]	@ (8011fa8 <Send+0x1b4>)
 8011ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ec2:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011ec4:	4b38      	ldr	r3, [pc, #224]	@ (8011fa8 <Send+0x1b4>)
 8011ec6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8011eca:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011ecc:	4b36      	ldr	r3, [pc, #216]	@ (8011fa8 <Send+0x1b4>)
 8011ece:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8011ed2:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011ed4:	4b34      	ldr	r3, [pc, #208]	@ (8011fa8 <Send+0x1b4>)
 8011ed6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011eda:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011ede:	4b32      	ldr	r3, [pc, #200]	@ (8011fa8 <Send+0x1b4>)
 8011ee0:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011ee4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8011fa8 <Send+0x1b4>)
 8011eea:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8011fa8 <Send+0x1b4>)
 8011ef4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011ef8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011efc:	4b2a      	ldr	r3, [pc, #168]	@ (8011fa8 <Send+0x1b4>)
 8011efe:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011f02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8011f06:	f107 0014 	add.w	r0, r7, #20
 8011f0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011f0e:	9300      	str	r3, [sp, #0]
 8011f10:	4b26      	ldr	r3, [pc, #152]	@ (8011fac <Send+0x1b8>)
 8011f12:	4a27      	ldr	r2, [pc, #156]	@ (8011fb0 <Send+0x1bc>)
 8011f14:	4927      	ldr	r1, [pc, #156]	@ (8011fb4 <Send+0x1c0>)
 8011f16:	f002 fd21 	bl	801495c <LoRaMacAdrCalcNext>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011f22:	f362 1386 	bfi	r3, r2, #6, #1
 8011f26:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011f2a:	7afa      	ldrb	r2, [r7, #11]
 8011f2c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8011f30:	893b      	ldrh	r3, [r7, #8]
 8011f32:	9300      	str	r3, [sp, #0]
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	f000 fc72 	bl	8012820 <PrepareFrame>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011f42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d003      	beq.n	8011f52 <Send+0x15e>
 8011f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011f4e:	2b0a      	cmp	r3, #10
 8011f50:	d107      	bne.n	8011f62 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8011f52:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011f56:	4618      	mov	r0, r3
 8011f58:	f000 f962 	bl	8012220 <ScheduleTx>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011f62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d00a      	beq.n	8011f80 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8011f6a:	4a0f      	ldr	r2, [pc, #60]	@ (8011fa8 <Send+0x1b4>)
 8011f6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011f70:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8011f74:	4a0c      	ldr	r2, [pc, #48]	@ (8011fa8 <Send+0x1b4>)
 8011f76:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8011f7a:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8011f7e:	e00d      	b.n	8011f9c <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8011f80:	4b09      	ldr	r3, [pc, #36]	@ (8011fa8 <Send+0x1b4>)
 8011f82:	2200      	movs	r2, #0
 8011f84:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8011f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f8a:	4a07      	ldr	r2, [pc, #28]	@ (8011fa8 <Send+0x1b4>)
 8011f8c:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011f8e:	f003 f86d 	bl	801506c <LoRaMacCommandsRemoveNoneStickyCmds>
 8011f92:	4603      	mov	r3, r0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d001      	beq.n	8011f9c <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011f98:	2313      	movs	r3, #19
 8011f9a:	e001      	b.n	8011fa0 <Send+0x1ac>
        }
    }
    return status;
 8011f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3730      	adds	r7, #48	@ 0x30
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	20000ecc 	.word	0x20000ecc
 8011fac:	20000f34 	.word	0x20000f34
 8011fb0:	20000f04 	.word	0x20000f04
 8011fb4:	20000f05 	.word	0x20000f05

08011fb8 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b084      	sub	sp, #16
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8011fca:	2301      	movs	r3, #1
 8011fcc:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011fce:	79fb      	ldrb	r3, [r7, #7]
 8011fd0:	2bff      	cmp	r3, #255	@ 0xff
 8011fd2:	d11f      	bne.n	8012014 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011fd4:	2000      	movs	r0, #0
 8011fd6:	f7ff f8e1 	bl	801119c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011fda:	4b15      	ldr	r3, [pc, #84]	@ (8012030 <SendReJoinReq+0x78>)
 8011fdc:	2200      	movs	r2, #0
 8011fde:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011fe2:	4b13      	ldr	r3, [pc, #76]	@ (8012030 <SendReJoinReq+0x78>)
 8011fe4:	4a13      	ldr	r2, [pc, #76]	@ (8012034 <SendReJoinReq+0x7c>)
 8011fe6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011fea:	4b11      	ldr	r3, [pc, #68]	@ (8012030 <SendReJoinReq+0x78>)
 8011fec:	22ff      	movs	r2, #255	@ 0xff
 8011fee:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011ff2:	7b3b      	ldrb	r3, [r7, #12]
 8011ff4:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8011ff8:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011ffa:	7b3a      	ldrb	r2, [r7, #12]
 8011ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8012030 <SendReJoinReq+0x78>)
 8011ffe:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8012002:	480d      	ldr	r0, [pc, #52]	@ (8012038 <SendReJoinReq+0x80>)
 8012004:	f7fb fefc 	bl	800de00 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8012008:	480c      	ldr	r0, [pc, #48]	@ (801203c <SendReJoinReq+0x84>)
 801200a:	f7fb fec9 	bl	800dda0 <SecureElementGetDevEui>

            allowDelayedTx = false;
 801200e:	2300      	movs	r3, #0
 8012010:	73fb      	strb	r3, [r7, #15]

            break;
 8012012:	e002      	b.n	801201a <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012014:	2302      	movs	r3, #2
 8012016:	73bb      	strb	r3, [r7, #14]
            break;
 8012018:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 801201a:	7bfb      	ldrb	r3, [r7, #15]
 801201c:	4618      	mov	r0, r3
 801201e:	f000 f8ff 	bl	8012220 <ScheduleTx>
 8012022:	4603      	mov	r3, r0
 8012024:	73bb      	strb	r3, [r7, #14]
    return status;
 8012026:	7bbb      	ldrb	r3, [r7, #14]
}
 8012028:	4618      	mov	r0, r3
 801202a:	3710      	adds	r7, #16
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}
 8012030:	20000998 	.word	0x20000998
 8012034:	2000099a 	.word	0x2000099a
 8012038:	20000aa6 	.word	0x20000aa6
 801203c:	20000aae 	.word	0x20000aae

08012040 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8012040:	b580      	push	{r7, lr}
 8012042:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012044:	f002 fd9a 	bl	8014b7c <LoRaMacClassBIsBeaconExpected>
 8012048:	4603      	mov	r3, r0
 801204a:	2b00      	cmp	r3, #0
 801204c:	d001      	beq.n	8012052 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801204e:	230e      	movs	r3, #14
 8012050:	e013      	b.n	801207a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012052:	4b0b      	ldr	r3, [pc, #44]	@ (8012080 <CheckForClassBCollision+0x40>)
 8012054:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8012058:	2b01      	cmp	r3, #1
 801205a:	d10d      	bne.n	8012078 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801205c:	f002 fd95 	bl	8014b8a <LoRaMacClassBIsPingExpected>
 8012060:	4603      	mov	r3, r0
 8012062:	2b00      	cmp	r3, #0
 8012064:	d001      	beq.n	801206a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012066:	230f      	movs	r3, #15
 8012068:	e007      	b.n	801207a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801206a:	f002 fd95 	bl	8014b98 <LoRaMacClassBIsMulticastExpected>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d001      	beq.n	8012078 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012074:	230f      	movs	r3, #15
 8012076:	e000      	b.n	801207a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8012078:	2300      	movs	r3, #0
}
 801207a:	4618      	mov	r0, r3
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	20000ecc 	.word	0x20000ecc

08012084 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8012084:	b590      	push	{r4, r7, lr}
 8012086:	b083      	sub	sp, #12
 8012088:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801208a:	4b2d      	ldr	r3, [pc, #180]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 801208c:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012090:	4b2b      	ldr	r3, [pc, #172]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 8012092:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8012096:	4b2a      	ldr	r3, [pc, #168]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 8012098:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 801209c:	4b28      	ldr	r3, [pc, #160]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 801209e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80120a2:	4b27      	ldr	r3, [pc, #156]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 80120a4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80120a8:	b25b      	sxtb	r3, r3
 80120aa:	f004 fe2e 	bl	8016d0a <RegionApplyDrOffset>
 80120ae:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80120b0:	b259      	sxtb	r1, r3
 80120b2:	4b23      	ldr	r3, [pc, #140]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 80120b4:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80120b8:	4b21      	ldr	r3, [pc, #132]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 80120ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80120bc:	4821      	ldr	r0, [pc, #132]	@ (8012144 <ComputeRxWindowParameters+0xc0>)
 80120be:	9000      	str	r0, [sp, #0]
 80120c0:	4620      	mov	r0, r4
 80120c2:	f004 fd44 	bl	8016b4e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80120c6:	4b1e      	ldr	r3, [pc, #120]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 80120c8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80120cc:	4b1c      	ldr	r3, [pc, #112]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 80120ce:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80120d2:	b259      	sxtb	r1, r3
 80120d4:	4b1a      	ldr	r3, [pc, #104]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 80120d6:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80120da:	4b19      	ldr	r3, [pc, #100]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 80120dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80120de:	4c1a      	ldr	r4, [pc, #104]	@ (8012148 <ComputeRxWindowParameters+0xc4>)
 80120e0:	9400      	str	r4, [sp, #0]
 80120e2:	f004 fd34 	bl	8016b4e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80120e6:	4b16      	ldr	r3, [pc, #88]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 80120e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120ea:	4a18      	ldr	r2, [pc, #96]	@ (801214c <ComputeRxWindowParameters+0xc8>)
 80120ec:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80120f0:	4413      	add	r3, r2
 80120f2:	4a16      	ldr	r2, [pc, #88]	@ (801214c <ComputeRxWindowParameters+0xc8>)
 80120f4:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80120f8:	4b11      	ldr	r3, [pc, #68]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 80120fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80120fc:	4a13      	ldr	r2, [pc, #76]	@ (801214c <ComputeRxWindowParameters+0xc8>)
 80120fe:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8012102:	4413      	add	r3, r2
 8012104:	4a11      	ldr	r2, [pc, #68]	@ (801214c <ComputeRxWindowParameters+0xc8>)
 8012106:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 801210a:	4b10      	ldr	r3, [pc, #64]	@ (801214c <ComputeRxWindowParameters+0xc8>)
 801210c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8012110:	2b04      	cmp	r3, #4
 8012112:	d011      	beq.n	8012138 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012114:	4b0a      	ldr	r3, [pc, #40]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 8012116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012118:	4a0c      	ldr	r2, [pc, #48]	@ (801214c <ComputeRxWindowParameters+0xc8>)
 801211a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 801211e:	4413      	add	r3, r2
 8012120:	4a0a      	ldr	r2, [pc, #40]	@ (801214c <ComputeRxWindowParameters+0xc8>)
 8012122:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012126:	4b06      	ldr	r3, [pc, #24]	@ (8012140 <ComputeRxWindowParameters+0xbc>)
 8012128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801212a:	4a08      	ldr	r2, [pc, #32]	@ (801214c <ComputeRxWindowParameters+0xc8>)
 801212c:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8012130:	4413      	add	r3, r2
 8012132:	4a06      	ldr	r2, [pc, #24]	@ (801214c <ComputeRxWindowParameters+0xc8>)
 8012134:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8012138:	bf00      	nop
 801213a:	3704      	adds	r7, #4
 801213c:	46bd      	mov	sp, r7
 801213e:	bd90      	pop	{r4, r7, pc}
 8012140:	20000ecc 	.word	0x20000ecc
 8012144:	20000d50 	.word	0x20000d50
 8012148:	20000d68 	.word	0x20000d68
 801214c:	20000998 	.word	0x20000998

08012150 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8012156:	2300      	movs	r3, #0
 8012158:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801215a:	4b13      	ldr	r3, [pc, #76]	@ (80121a8 <VerifyTxFrame+0x58>)
 801215c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8012160:	2b00      	cmp	r3, #0
 8012162:	d01b      	beq.n	801219c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012164:	1d3b      	adds	r3, r7, #4
 8012166:	4618      	mov	r0, r3
 8012168:	f002 ffd0 	bl	801510c <LoRaMacCommandsGetSizeSerializedCmds>
 801216c:	4603      	mov	r3, r0
 801216e:	2b00      	cmp	r3, #0
 8012170:	d001      	beq.n	8012176 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012172:	2313      	movs	r3, #19
 8012174:	e013      	b.n	801219e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8012176:	4b0d      	ldr	r3, [pc, #52]	@ (80121ac <VerifyTxFrame+0x5c>)
 8012178:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801217c:	4a0a      	ldr	r2, [pc, #40]	@ (80121a8 <VerifyTxFrame+0x58>)
 801217e:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	b2d2      	uxtb	r2, r2
 8012186:	4618      	mov	r0, r3
 8012188:	f7ff f91a 	bl	80113c0 <ValidatePayloadLength>
 801218c:	4603      	mov	r3, r0
 801218e:	f083 0301 	eor.w	r3, r3, #1
 8012192:	b2db      	uxtb	r3, r3
 8012194:	2b00      	cmp	r3, #0
 8012196:	d001      	beq.n	801219c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8012198:	2308      	movs	r3, #8
 801219a:	e000      	b.n	801219e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 801219c:	2300      	movs	r3, #0
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3708      	adds	r7, #8
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	20000ecc 	.word	0x20000ecc
 80121ac:	20000998 	.word	0x20000998

080121b0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80121b6:	4b18      	ldr	r3, [pc, #96]	@ (8012218 <SerializeTxFrame+0x68>)
 80121b8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d002      	beq.n	80121c6 <SerializeTxFrame+0x16>
 80121c0:	2b04      	cmp	r3, #4
 80121c2:	d011      	beq.n	80121e8 <SerializeTxFrame+0x38>
 80121c4:	e021      	b.n	801220a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80121c6:	4815      	ldr	r0, [pc, #84]	@ (801221c <SerializeTxFrame+0x6c>)
 80121c8:	f004 fac3 	bl	8016752 <LoRaMacSerializerJoinRequest>
 80121cc:	4603      	mov	r3, r0
 80121ce:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80121d0:	79fb      	ldrb	r3, [r7, #7]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d001      	beq.n	80121da <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80121d6:	2311      	movs	r3, #17
 80121d8:	e01a      	b.n	8012210 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80121da:	4b0f      	ldr	r3, [pc, #60]	@ (8012218 <SerializeTxFrame+0x68>)
 80121dc:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80121e0:	461a      	mov	r2, r3
 80121e2:	4b0d      	ldr	r3, [pc, #52]	@ (8012218 <SerializeTxFrame+0x68>)
 80121e4:	801a      	strh	r2, [r3, #0]
            break;
 80121e6:	e012      	b.n	801220e <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80121e8:	480c      	ldr	r0, [pc, #48]	@ (801221c <SerializeTxFrame+0x6c>)
 80121ea:	f004 fb34 	bl	8016856 <LoRaMacSerializerData>
 80121ee:	4603      	mov	r3, r0
 80121f0:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80121f2:	79fb      	ldrb	r3, [r7, #7]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d001      	beq.n	80121fc <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80121f8:	2311      	movs	r3, #17
 80121fa:	e009      	b.n	8012210 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80121fc:	4b06      	ldr	r3, [pc, #24]	@ (8012218 <SerializeTxFrame+0x68>)
 80121fe:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8012202:	461a      	mov	r2, r3
 8012204:	4b04      	ldr	r3, [pc, #16]	@ (8012218 <SerializeTxFrame+0x68>)
 8012206:	801a      	strh	r2, [r3, #0]
            break;
 8012208:	e001      	b.n	801220e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801220a:	2303      	movs	r3, #3
 801220c:	e000      	b.n	8012210 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 801220e:	2300      	movs	r3, #0
}
 8012210:	4618      	mov	r0, r3
 8012212:	3708      	adds	r7, #8
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}
 8012218:	20000998 	.word	0x20000998
 801221c:	20000aa0 	.word	0x20000aa0

08012220 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b090      	sub	sp, #64	@ 0x40
 8012224:	af02      	add	r7, sp, #8
 8012226:	4603      	mov	r3, r0
 8012228:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801222a:	2303      	movs	r3, #3
 801222c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8012230:	f7ff ff06 	bl	8012040 <CheckForClassBCollision>
 8012234:	4603      	mov	r3, r0
 8012236:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801223a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801223e:	2b00      	cmp	r3, #0
 8012240:	d002      	beq.n	8012248 <ScheduleTx+0x28>
    {
        return status;
 8012242:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012246:	e092      	b.n	801236e <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8012248:	f000 f8f8 	bl	801243c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 801224c:	f7ff ffb0 	bl	80121b0 <SerializeTxFrame>
 8012250:	4603      	mov	r3, r0
 8012252:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8012256:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801225a:	2b00      	cmp	r3, #0
 801225c:	d002      	beq.n	8012264 <ScheduleTx+0x44>
    {
        return status;
 801225e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012262:	e084      	b.n	801236e <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8012264:	4b44      	ldr	r3, [pc, #272]	@ (8012378 <ScheduleTx+0x158>)
 8012266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012268:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801226a:	4b43      	ldr	r3, [pc, #268]	@ (8012378 <ScheduleTx+0x158>)
 801226c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012270:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8012272:	4b41      	ldr	r3, [pc, #260]	@ (8012378 <ScheduleTx+0x158>)
 8012274:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8012278:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801227a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801227e:	4618      	mov	r0, r3
 8012280:	f00a faa4 	bl	801c7cc <SysTimeGetMcuTime>
 8012284:	4638      	mov	r0, r7
 8012286:	4b3c      	ldr	r3, [pc, #240]	@ (8012378 <ScheduleTx+0x158>)
 8012288:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 801228c:	9200      	str	r2, [sp, #0]
 801228e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8012292:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012296:	ca06      	ldmia	r2, {r1, r2}
 8012298:	f00a f9f9 	bl	801c68e <SysTimeSub>
 801229c:	f107 0320 	add.w	r3, r7, #32
 80122a0:	463a      	mov	r2, r7
 80122a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122a6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80122aa:	4b33      	ldr	r3, [pc, #204]	@ (8012378 <ScheduleTx+0x158>)
 80122ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122ae:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80122b0:	2300      	movs	r3, #0
 80122b2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 80122b6:	2301      	movs	r3, #1
 80122b8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80122ba:	4b30      	ldr	r3, [pc, #192]	@ (801237c <ScheduleTx+0x15c>)
 80122bc:	881b      	ldrh	r3, [r3, #0]
 80122be:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80122c0:	4b2d      	ldr	r3, [pc, #180]	@ (8012378 <ScheduleTx+0x158>)
 80122c2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d104      	bne.n	80122d4 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80122ca:	2301      	movs	r3, #1
 80122cc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 80122d0:	2300      	movs	r3, #0
 80122d2:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80122d4:	4b28      	ldr	r3, [pc, #160]	@ (8012378 <ScheduleTx+0x158>)
 80122d6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80122da:	f107 0114 	add.w	r1, r7, #20
 80122de:	4b28      	ldr	r3, [pc, #160]	@ (8012380 <ScheduleTx+0x160>)
 80122e0:	9300      	str	r3, [sp, #0]
 80122e2:	4b28      	ldr	r3, [pc, #160]	@ (8012384 <ScheduleTx+0x164>)
 80122e4:	4a28      	ldr	r2, [pc, #160]	@ (8012388 <ScheduleTx+0x168>)
 80122e6:	f004 fcf8 	bl	8016cda <RegionNextChannel>
 80122ea:	4603      	mov	r3, r0
 80122ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 80122f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d025      	beq.n	8012344 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80122f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80122fc:	2b0b      	cmp	r3, #11
 80122fe:	d11e      	bne.n	801233e <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8012300:	4b1e      	ldr	r3, [pc, #120]	@ (801237c <ScheduleTx+0x15c>)
 8012302:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8012306:	2b00      	cmp	r3, #0
 8012308:	d01c      	beq.n	8012344 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 801230a:	7bfb      	ldrb	r3, [r7, #15]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d013      	beq.n	8012338 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8012310:	4b1a      	ldr	r3, [pc, #104]	@ (801237c <ScheduleTx+0x15c>)
 8012312:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012316:	f043 0320 	orr.w	r3, r3, #32
 801231a:	4a18      	ldr	r2, [pc, #96]	@ (801237c <ScheduleTx+0x15c>)
 801231c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8012320:	4b16      	ldr	r3, [pc, #88]	@ (801237c <ScheduleTx+0x15c>)
 8012322:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8012326:	4619      	mov	r1, r3
 8012328:	4818      	ldr	r0, [pc, #96]	@ (801238c <ScheduleTx+0x16c>)
 801232a:	f00a fd21 	bl	801cd70 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 801232e:	4817      	ldr	r0, [pc, #92]	@ (801238c <ScheduleTx+0x16c>)
 8012330:	f00a fc40 	bl	801cbb4 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8012334:	2300      	movs	r3, #0
 8012336:	e01a      	b.n	801236e <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8012338:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801233c:	e017      	b.n	801236e <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 801233e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012342:	e014      	b.n	801236e <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8012344:	f7ff fe9e 	bl	8012084 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8012348:	f7ff ff02 	bl	8012150 <VerifyTxFrame>
 801234c:	4603      	mov	r3, r0
 801234e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8012352:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012356:	2b00      	cmp	r3, #0
 8012358:	d002      	beq.n	8012360 <ScheduleTx+0x140>
    {
        return status;
 801235a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801235e:	e006      	b.n	801236e <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8012360:	4b06      	ldr	r3, [pc, #24]	@ (801237c <ScheduleTx+0x15c>)
 8012362:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 8012366:	4618      	mov	r0, r3
 8012368:	f000 fb74 	bl	8012a54 <SendFrameOnChannel>
 801236c:	4603      	mov	r3, r0
}
 801236e:	4618      	mov	r0, r3
 8012370:	3738      	adds	r7, #56	@ 0x38
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	20000ecc 	.word	0x20000ecc
 801237c:	20000998 	.word	0x20000998
 8012380:	20000efc 	.word	0x20000efc
 8012384:	20000e2c 	.word	0x20000e2c
 8012388:	20000db3 	.word	0x20000db3
 801238c:	20000d00 	.word	0x20000d00

08012390 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
 8012396:	4603      	mov	r3, r0
 8012398:	460a      	mov	r2, r1
 801239a:	71fb      	strb	r3, [r7, #7]
 801239c:	4613      	mov	r3, r2
 801239e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80123a0:	2312      	movs	r3, #18
 80123a2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80123a4:	2300      	movs	r3, #0
 80123a6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80123a8:	4b22      	ldr	r3, [pc, #136]	@ (8012434 <SecureFrame+0xa4>)
 80123aa:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d002      	beq.n	80123b8 <SecureFrame+0x28>
 80123b2:	2b04      	cmp	r3, #4
 80123b4:	d011      	beq.n	80123da <SecureFrame+0x4a>
 80123b6:	e036      	b.n	8012426 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80123b8:	481f      	ldr	r0, [pc, #124]	@ (8012438 <SecureFrame+0xa8>)
 80123ba:	f003 fd9d 	bl	8015ef8 <LoRaMacCryptoPrepareJoinRequest>
 80123be:	4603      	mov	r3, r0
 80123c0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80123c2:	7bfb      	ldrb	r3, [r7, #15]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d001      	beq.n	80123cc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80123c8:	2311      	movs	r3, #17
 80123ca:	e02f      	b.n	801242c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80123cc:	4b19      	ldr	r3, [pc, #100]	@ (8012434 <SecureFrame+0xa4>)
 80123ce:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80123d2:	461a      	mov	r2, r3
 80123d4:	4b17      	ldr	r3, [pc, #92]	@ (8012434 <SecureFrame+0xa4>)
 80123d6:	801a      	strh	r2, [r3, #0]
            break;
 80123d8:	e027      	b.n	801242a <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80123da:	f107 0308 	add.w	r3, r7, #8
 80123de:	4618      	mov	r0, r3
 80123e0:	f003 fcc4 	bl	8015d6c <LoRaMacCryptoGetFCntUp>
 80123e4:	4603      	mov	r3, r0
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d001      	beq.n	80123ee <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80123ea:	2312      	movs	r3, #18
 80123ec:	e01e      	b.n	801242c <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80123ee:	4b11      	ldr	r3, [pc, #68]	@ (8012434 <SecureFrame+0xa4>)
 80123f0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d002      	beq.n	80123fe <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	3b01      	subs	r3, #1
 80123fc:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80123fe:	68b8      	ldr	r0, [r7, #8]
 8012400:	79ba      	ldrb	r2, [r7, #6]
 8012402:	79f9      	ldrb	r1, [r7, #7]
 8012404:	4b0c      	ldr	r3, [pc, #48]	@ (8012438 <SecureFrame+0xa8>)
 8012406:	f003 fe9d 	bl	8016144 <LoRaMacCryptoSecureMessage>
 801240a:	4603      	mov	r3, r0
 801240c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801240e:	7bfb      	ldrb	r3, [r7, #15]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d001      	beq.n	8012418 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012414:	2311      	movs	r3, #17
 8012416:	e009      	b.n	801242c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012418:	4b06      	ldr	r3, [pc, #24]	@ (8012434 <SecureFrame+0xa4>)
 801241a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801241e:	461a      	mov	r2, r3
 8012420:	4b04      	ldr	r3, [pc, #16]	@ (8012434 <SecureFrame+0xa4>)
 8012422:	801a      	strh	r2, [r3, #0]
            break;
 8012424:	e001      	b.n	801242a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012426:	2303      	movs	r3, #3
 8012428:	e000      	b.n	801242c <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 801242a:	2300      	movs	r3, #0
}
 801242c:	4618      	mov	r0, r3
 801242e:	3710      	adds	r7, #16
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}
 8012434:	20000998 	.word	0x20000998
 8012438:	20000aa0 	.word	0x20000aa0

0801243c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 801243c:	b480      	push	{r7}
 801243e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8012440:	4b09      	ldr	r3, [pc, #36]	@ (8012468 <CalculateBackOff+0x2c>)
 8012442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012444:	2b00      	cmp	r3, #0
 8012446:	d10a      	bne.n	801245e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8012448:	4b07      	ldr	r3, [pc, #28]	@ (8012468 <CalculateBackOff+0x2c>)
 801244a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 801244e:	3b01      	subs	r3, #1
 8012450:	4a06      	ldr	r2, [pc, #24]	@ (801246c <CalculateBackOff+0x30>)
 8012452:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 8012456:	fb02 f303 	mul.w	r3, r2, r3
 801245a:	4a03      	ldr	r2, [pc, #12]	@ (8012468 <CalculateBackOff+0x2c>)
 801245c:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 801245e:	bf00      	nop
 8012460:	46bd      	mov	sp, r7
 8012462:	bc80      	pop	{r7}
 8012464:	4770      	bx	lr
 8012466:	bf00      	nop
 8012468:	20000ecc 	.word	0x20000ecc
 801246c:	20000998 	.word	0x20000998

08012470 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b082      	sub	sp, #8
 8012474:	af00      	add	r7, sp, #0
 8012476:	4603      	mov	r3, r0
 8012478:	7139      	strb	r1, [r7, #4]
 801247a:	71fb      	strb	r3, [r7, #7]
 801247c:	4613      	mov	r3, r2
 801247e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8012480:	79fb      	ldrb	r3, [r7, #7]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d002      	beq.n	801248c <RemoveMacCommands+0x1c>
 8012486:	79fb      	ldrb	r3, [r7, #7]
 8012488:	2b01      	cmp	r3, #1
 801248a:	d10d      	bne.n	80124a8 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 801248c:	79bb      	ldrb	r3, [r7, #6]
 801248e:	2b01      	cmp	r3, #1
 8012490:	d108      	bne.n	80124a4 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8012492:	793b      	ldrb	r3, [r7, #4]
 8012494:	f003 0320 	and.w	r3, r3, #32
 8012498:	b2db      	uxtb	r3, r3
 801249a:	2b00      	cmp	r3, #0
 801249c:	d004      	beq.n	80124a8 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801249e:	f002 fe09 	bl	80150b4 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80124a2:	e001      	b.n	80124a8 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80124a4:	f002 fe06 	bl	80150b4 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80124a8:	bf00      	nop
 80124aa:	3708      	adds	r7, #8
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}

080124b0 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80124b0:	b5b0      	push	{r4, r5, r7, lr}
 80124b2:	b092      	sub	sp, #72	@ 0x48
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	4603      	mov	r3, r0
 80124b8:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80124ba:	79fb      	ldrb	r3, [r7, #7]
 80124bc:	f083 0301 	eor.w	r3, r3, #1
 80124c0:	b2db      	uxtb	r3, r3
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d003      	beq.n	80124ce <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80124c6:	4b88      	ldr	r3, [pc, #544]	@ (80126e8 <ResetMacParameters+0x238>)
 80124c8:	2200      	movs	r2, #0
 80124ca:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80124ce:	4b86      	ldr	r3, [pc, #536]	@ (80126e8 <ResetMacParameters+0x238>)
 80124d0:	2200      	movs	r2, #0
 80124d2:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80124d4:	4b85      	ldr	r3, [pc, #532]	@ (80126ec <ResetMacParameters+0x23c>)
 80124d6:	2200      	movs	r2, #0
 80124d8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 80124dc:	4b83      	ldr	r3, [pc, #524]	@ (80126ec <ResetMacParameters+0x23c>)
 80124de:	2200      	movs	r2, #0
 80124e0:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 80124e4:	4b81      	ldr	r3, [pc, #516]	@ (80126ec <ResetMacParameters+0x23c>)
 80124e6:	2200      	movs	r2, #0
 80124e8:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80124ec:	4b7e      	ldr	r3, [pc, #504]	@ (80126e8 <ResetMacParameters+0x238>)
 80124ee:	2200      	movs	r2, #0
 80124f0:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80124f4:	4b7c      	ldr	r3, [pc, #496]	@ (80126e8 <ResetMacParameters+0x238>)
 80124f6:	2201      	movs	r2, #1
 80124f8:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80124fc:	4b7a      	ldr	r3, [pc, #488]	@ (80126e8 <ResetMacParameters+0x238>)
 80124fe:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8012502:	4b79      	ldr	r3, [pc, #484]	@ (80126e8 <ResetMacParameters+0x238>)
 8012504:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012508:	4b77      	ldr	r3, [pc, #476]	@ (80126e8 <ResetMacParameters+0x238>)
 801250a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 801250e:	4b76      	ldr	r3, [pc, #472]	@ (80126e8 <ResetMacParameters+0x238>)
 8012510:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8012514:	4b74      	ldr	r3, [pc, #464]	@ (80126e8 <ResetMacParameters+0x238>)
 8012516:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 801251a:	4b73      	ldr	r3, [pc, #460]	@ (80126e8 <ResetMacParameters+0x238>)
 801251c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012520:	4b71      	ldr	r3, [pc, #452]	@ (80126e8 <ResetMacParameters+0x238>)
 8012522:	4a71      	ldr	r2, [pc, #452]	@ (80126e8 <ResetMacParameters+0x238>)
 8012524:	336c      	adds	r3, #108	@ 0x6c
 8012526:	32b4      	adds	r2, #180	@ 0xb4
 8012528:	e892 0003 	ldmia.w	r2, {r0, r1}
 801252c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012530:	4b6d      	ldr	r3, [pc, #436]	@ (80126e8 <ResetMacParameters+0x238>)
 8012532:	4a6d      	ldr	r2, [pc, #436]	@ (80126e8 <ResetMacParameters+0x238>)
 8012534:	3374      	adds	r3, #116	@ 0x74
 8012536:	32bc      	adds	r2, #188	@ 0xbc
 8012538:	e892 0003 	ldmia.w	r2, {r0, r1}
 801253c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8012540:	4b69      	ldr	r3, [pc, #420]	@ (80126e8 <ResetMacParameters+0x238>)
 8012542:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 8012546:	4b68      	ldr	r3, [pc, #416]	@ (80126e8 <ResetMacParameters+0x238>)
 8012548:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 801254c:	4b66      	ldr	r3, [pc, #408]	@ (80126e8 <ResetMacParameters+0x238>)
 801254e:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 8012552:	4b65      	ldr	r3, [pc, #404]	@ (80126e8 <ResetMacParameters+0x238>)
 8012554:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8012558:	4b63      	ldr	r3, [pc, #396]	@ (80126e8 <ResetMacParameters+0x238>)
 801255a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801255e:	4a62      	ldr	r2, [pc, #392]	@ (80126e8 <ResetMacParameters+0x238>)
 8012560:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012564:	4b60      	ldr	r3, [pc, #384]	@ (80126e8 <ResetMacParameters+0x238>)
 8012566:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801256a:	4a5f      	ldr	r2, [pc, #380]	@ (80126e8 <ResetMacParameters+0x238>)
 801256c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8012570:	4b5d      	ldr	r3, [pc, #372]	@ (80126e8 <ResetMacParameters+0x238>)
 8012572:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8012576:	4b5c      	ldr	r3, [pc, #368]	@ (80126e8 <ResetMacParameters+0x238>)
 8012578:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801257c:	4b5a      	ldr	r3, [pc, #360]	@ (80126e8 <ResetMacParameters+0x238>)
 801257e:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8012582:	4b59      	ldr	r3, [pc, #356]	@ (80126e8 <ResetMacParameters+0x238>)
 8012584:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 8012588:	4b58      	ldr	r3, [pc, #352]	@ (80126ec <ResetMacParameters+0x23c>)
 801258a:	2200      	movs	r2, #0
 801258c:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8012590:	4b55      	ldr	r3, [pc, #340]	@ (80126e8 <ResetMacParameters+0x238>)
 8012592:	2200      	movs	r2, #0
 8012594:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012598:	4b53      	ldr	r3, [pc, #332]	@ (80126e8 <ResetMacParameters+0x238>)
 801259a:	2200      	movs	r2, #0
 801259c:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 80125a0:	4b51      	ldr	r3, [pc, #324]	@ (80126e8 <ResetMacParameters+0x238>)
 80125a2:	2200      	movs	r2, #0
 80125a4:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80125a8:	4b4f      	ldr	r3, [pc, #316]	@ (80126e8 <ResetMacParameters+0x238>)
 80125aa:	2200      	movs	r2, #0
 80125ac:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80125b0:	4b4d      	ldr	r3, [pc, #308]	@ (80126e8 <ResetMacParameters+0x238>)
 80125b2:	2200      	movs	r2, #0
 80125b4:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 80125b8:	4b4b      	ldr	r3, [pc, #300]	@ (80126e8 <ResetMacParameters+0x238>)
 80125ba:	2200      	movs	r2, #0
 80125bc:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80125c0:	4b49      	ldr	r3, [pc, #292]	@ (80126e8 <ResetMacParameters+0x238>)
 80125c2:	2200      	movs	r2, #0
 80125c4:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80125c8:	4b47      	ldr	r3, [pc, #284]	@ (80126e8 <ResetMacParameters+0x238>)
 80125ca:	2200      	movs	r2, #0
 80125cc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80125d0:	4b45      	ldr	r3, [pc, #276]	@ (80126e8 <ResetMacParameters+0x238>)
 80125d2:	2200      	movs	r2, #0
 80125d4:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80125d8:	4b43      	ldr	r3, [pc, #268]	@ (80126e8 <ResetMacParameters+0x238>)
 80125da:	2200      	movs	r2, #0
 80125dc:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80125e0:	4b41      	ldr	r3, [pc, #260]	@ (80126e8 <ResetMacParameters+0x238>)
 80125e2:	2200      	movs	r2, #0
 80125e4:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80125e8:	2301      	movs	r3, #1
 80125ea:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80125ec:	4b40      	ldr	r3, [pc, #256]	@ (80126f0 <ResetMacParameters+0x240>)
 80125ee:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80125f0:	4b40      	ldr	r3, [pc, #256]	@ (80126f4 <ResetMacParameters+0x244>)
 80125f2:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 80125f4:	4b40      	ldr	r3, [pc, #256]	@ (80126f8 <ResetMacParameters+0x248>)
 80125f6:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80125f8:	4b3b      	ldr	r3, [pc, #236]	@ (80126e8 <ResetMacParameters+0x238>)
 80125fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80125fe:	f107 020c 	add.w	r2, r7, #12
 8012602:	4611      	mov	r1, r2
 8012604:	4618      	mov	r0, r3
 8012606:	f004 fa54 	bl	8016ab2 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 801260a:	4b38      	ldr	r3, [pc, #224]	@ (80126ec <ResetMacParameters+0x23c>)
 801260c:	2200      	movs	r2, #0
 801260e:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012612:	4b36      	ldr	r3, [pc, #216]	@ (80126ec <ResetMacParameters+0x23c>)
 8012614:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8012618:	4b34      	ldr	r3, [pc, #208]	@ (80126ec <ResetMacParameters+0x23c>)
 801261a:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801261e:	4b32      	ldr	r3, [pc, #200]	@ (80126e8 <ResetMacParameters+0x238>)
 8012620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012622:	4a32      	ldr	r2, [pc, #200]	@ (80126ec <ResetMacParameters+0x23c>)
 8012624:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012628:	4b2f      	ldr	r3, [pc, #188]	@ (80126e8 <ResetMacParameters+0x238>)
 801262a:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 801262e:	4b2f      	ldr	r3, [pc, #188]	@ (80126ec <ResetMacParameters+0x23c>)
 8012630:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012634:	4b2c      	ldr	r3, [pc, #176]	@ (80126e8 <ResetMacParameters+0x238>)
 8012636:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 801263a:	4b2c      	ldr	r3, [pc, #176]	@ (80126ec <ResetMacParameters+0x23c>)
 801263c:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012640:	4b2a      	ldr	r3, [pc, #168]	@ (80126ec <ResetMacParameters+0x23c>)
 8012642:	2200      	movs	r2, #0
 8012644:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012648:	4b28      	ldr	r3, [pc, #160]	@ (80126ec <ResetMacParameters+0x23c>)
 801264a:	2201      	movs	r2, #1
 801264c:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012650:	4b25      	ldr	r3, [pc, #148]	@ (80126e8 <ResetMacParameters+0x238>)
 8012652:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8012656:	4b25      	ldr	r3, [pc, #148]	@ (80126ec <ResetMacParameters+0x23c>)
 8012658:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801265c:	4a23      	ldr	r2, [pc, #140]	@ (80126ec <ResetMacParameters+0x23c>)
 801265e:	4b23      	ldr	r3, [pc, #140]	@ (80126ec <ResetMacParameters+0x23c>)
 8012660:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8012664:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8012668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801266a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801266c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012670:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012674:	4b1d      	ldr	r3, [pc, #116]	@ (80126ec <ResetMacParameters+0x23c>)
 8012676:	2201      	movs	r2, #1
 8012678:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801267c:	4b1b      	ldr	r3, [pc, #108]	@ (80126ec <ResetMacParameters+0x23c>)
 801267e:	2202      	movs	r2, #2
 8012680:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8012684:	2300      	movs	r3, #0
 8012686:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8012688:	2300      	movs	r3, #0
 801268a:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 801268c:	4b17      	ldr	r3, [pc, #92]	@ (80126ec <ResetMacParameters+0x23c>)
 801268e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012692:	2b00      	cmp	r3, #0
 8012694:	d009      	beq.n	80126aa <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8012696:	4b15      	ldr	r3, [pc, #84]	@ (80126ec <ResetMacParameters+0x23c>)
 8012698:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801269c:	685b      	ldr	r3, [r3, #4]
 801269e:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80126a0:	4b12      	ldr	r3, [pc, #72]	@ (80126ec <ResetMacParameters+0x23c>)
 80126a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80126a6:	695b      	ldr	r3, [r3, #20]
 80126a8:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80126aa:	4b14      	ldr	r3, [pc, #80]	@ (80126fc <ResetMacParameters+0x24c>)
 80126ac:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80126ae:	4b14      	ldr	r3, [pc, #80]	@ (8012700 <ResetMacParameters+0x250>)
 80126b0:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80126b2:	4b14      	ldr	r3, [pc, #80]	@ (8012704 <ResetMacParameters+0x254>)
 80126b4:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80126b6:	4b14      	ldr	r3, [pc, #80]	@ (8012708 <ResetMacParameters+0x258>)
 80126b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80126ba:	4b14      	ldr	r3, [pc, #80]	@ (801270c <ResetMacParameters+0x25c>)
 80126bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80126be:	4b14      	ldr	r3, [pc, #80]	@ (8012710 <ResetMacParameters+0x260>)
 80126c0:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80126c2:	4b14      	ldr	r3, [pc, #80]	@ (8012714 <ResetMacParameters+0x264>)
 80126c4:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80126c6:	4b14      	ldr	r3, [pc, #80]	@ (8012718 <ResetMacParameters+0x268>)
 80126c8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 80126ca:	4b14      	ldr	r3, [pc, #80]	@ (801271c <ResetMacParameters+0x26c>)
 80126cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80126ce:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80126d2:	f107 031c 	add.w	r3, r7, #28
 80126d6:	4a12      	ldr	r2, [pc, #72]	@ (8012720 <ResetMacParameters+0x270>)
 80126d8:	4618      	mov	r0, r3
 80126da:	f002 f9f8 	bl	8014ace <LoRaMacClassBInit>
}
 80126de:	bf00      	nop
 80126e0:	3748      	adds	r7, #72	@ 0x48
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bdb0      	pop	{r4, r5, r7, pc}
 80126e6:	bf00      	nop
 80126e8:	20000ecc 	.word	0x20000ecc
 80126ec:	20000998 	.word	0x20000998
 80126f0:	200010f0 	.word	0x200010f0
 80126f4:	200010f4 	.word	0x200010f4
 80126f8:	20001a44 	.word	0x20001a44
 80126fc:	20000e00 	.word	0x20000e00
 8012700:	20000db8 	.word	0x20000db8
 8012704:	20000dec 	.word	0x20000dec
 8012708:	20000e29 	.word	0x20000e29
 801270c:	20000fb0 	.word	0x20000fb0
 8012710:	20000f14 	.word	0x20000f14
 8012714:	20000f18 	.word	0x20000f18
 8012718:	20000fb4 	.word	0x20000fb4
 801271c:	20000ffc 	.word	0x20000ffc
 8012720:	20001470 	.word	0x20001470

08012724 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f00a faae 	bl	801cc90 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012734:	4b11      	ldr	r3, [pc, #68]	@ (801277c <RxWindowSetup+0x58>)
 8012736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012738:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801273a:	4b11      	ldr	r3, [pc, #68]	@ (8012780 <RxWindowSetup+0x5c>)
 801273c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012740:	4a10      	ldr	r2, [pc, #64]	@ (8012784 <RxWindowSetup+0x60>)
 8012742:	6839      	ldr	r1, [r7, #0]
 8012744:	4618      	mov	r0, r3
 8012746:	f004 fa1c 	bl	8016b82 <RegionRxConfig>
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	d010      	beq.n	8012772 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012750:	4b0d      	ldr	r3, [pc, #52]	@ (8012788 <RxWindowSetup+0x64>)
 8012752:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8012756:	4b0c      	ldr	r3, [pc, #48]	@ (8012788 <RxWindowSetup+0x64>)
 8012758:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 801275c:	4b07      	ldr	r3, [pc, #28]	@ (801277c <RxWindowSetup+0x58>)
 801275e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012760:	4a07      	ldr	r2, [pc, #28]	@ (8012780 <RxWindowSetup+0x5c>)
 8012762:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8012764:	4610      	mov	r0, r2
 8012766:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	7cda      	ldrb	r2, [r3, #19]
 801276c:	4b06      	ldr	r3, [pc, #24]	@ (8012788 <RxWindowSetup+0x64>)
 801276e:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8012772:	bf00      	nop
 8012774:	3708      	adds	r7, #8
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}
 801277a:	bf00      	nop
 801277c:	08021620 	.word	0x08021620
 8012780:	20000ecc 	.word	0x20000ecc
 8012784:	20000dbc 	.word	0x20000dbc
 8012788:	20000998 	.word	0x20000998

0801278c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 801278c:	b590      	push	{r4, r7, lr}
 801278e:	b083      	sub	sp, #12
 8012790:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012792:	4b1e      	ldr	r3, [pc, #120]	@ (801280c <OpenContinuousRxCWindow+0x80>)
 8012794:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8012798:	4b1c      	ldr	r3, [pc, #112]	@ (801280c <OpenContinuousRxCWindow+0x80>)
 801279a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801279e:	b259      	sxtb	r1, r3
 80127a0:	4b1a      	ldr	r3, [pc, #104]	@ (801280c <OpenContinuousRxCWindow+0x80>)
 80127a2:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80127a6:	4b19      	ldr	r3, [pc, #100]	@ (801280c <OpenContinuousRxCWindow+0x80>)
 80127a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80127aa:	4c19      	ldr	r4, [pc, #100]	@ (8012810 <OpenContinuousRxCWindow+0x84>)
 80127ac:	9400      	str	r4, [sp, #0]
 80127ae:	f004 f9ce 	bl	8016b4e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80127b2:	4b18      	ldr	r3, [pc, #96]	@ (8012814 <OpenContinuousRxCWindow+0x88>)
 80127b4:	2202      	movs	r2, #2
 80127b6:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80127ba:	4b14      	ldr	r3, [pc, #80]	@ (801280c <OpenContinuousRxCWindow+0x80>)
 80127bc:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80127c0:	4b14      	ldr	r3, [pc, #80]	@ (8012814 <OpenContinuousRxCWindow+0x88>)
 80127c2:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80127c6:	4b13      	ldr	r3, [pc, #76]	@ (8012814 <OpenContinuousRxCWindow+0x88>)
 80127c8:	2201      	movs	r2, #1
 80127ca:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80127ce:	4b0f      	ldr	r3, [pc, #60]	@ (801280c <OpenContinuousRxCWindow+0x80>)
 80127d0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80127d4:	4a10      	ldr	r2, [pc, #64]	@ (8012818 <OpenContinuousRxCWindow+0x8c>)
 80127d6:	490e      	ldr	r1, [pc, #56]	@ (8012810 <OpenContinuousRxCWindow+0x84>)
 80127d8:	4618      	mov	r0, r3
 80127da:	f004 f9d2 	bl	8016b82 <RegionRxConfig>
 80127de:	4603      	mov	r3, r0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d00f      	beq.n	8012804 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80127e4:	4b0b      	ldr	r3, [pc, #44]	@ (8012814 <OpenContinuousRxCWindow+0x88>)
 80127e6:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 80127ea:	4b0a      	ldr	r3, [pc, #40]	@ (8012814 <OpenContinuousRxCWindow+0x88>)
 80127ec:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 80127f0:	4b0a      	ldr	r3, [pc, #40]	@ (801281c <OpenContinuousRxCWindow+0x90>)
 80127f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80127f4:	2000      	movs	r0, #0
 80127f6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80127f8:	4b06      	ldr	r3, [pc, #24]	@ (8012814 <OpenContinuousRxCWindow+0x88>)
 80127fa:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 80127fe:	4b05      	ldr	r3, [pc, #20]	@ (8012814 <OpenContinuousRxCWindow+0x88>)
 8012800:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8012804:	bf00      	nop
 8012806:	3704      	adds	r7, #4
 8012808:	46bd      	mov	sp, r7
 801280a:	bd90      	pop	{r4, r7, pc}
 801280c:	20000ecc 	.word	0x20000ecc
 8012810:	20000d80 	.word	0x20000d80
 8012814:	20000998 	.word	0x20000998
 8012818:	20000dbc 	.word	0x20000dbc
 801281c:	08021620 	.word	0x08021620

08012820 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b088      	sub	sp, #32
 8012824:	af00      	add	r7, sp, #0
 8012826:	60f8      	str	r0, [r7, #12]
 8012828:	60b9      	str	r1, [r7, #8]
 801282a:	603b      	str	r3, [r7, #0]
 801282c:	4613      	mov	r3, r2
 801282e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8012830:	4b81      	ldr	r3, [pc, #516]	@ (8012a38 <PrepareFrame+0x218>)
 8012832:	2200      	movs	r2, #0
 8012834:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012836:	4b80      	ldr	r3, [pc, #512]	@ (8012a38 <PrepareFrame+0x218>)
 8012838:	2200      	movs	r2, #0
 801283a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 801283e:	2300      	movs	r3, #0
 8012840:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012842:	2300      	movs	r3, #0
 8012844:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012846:	2300      	movs	r3, #0
 8012848:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d101      	bne.n	8012854 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8012850:	2300      	movs	r3, #0
 8012852:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012854:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012856:	461a      	mov	r2, r3
 8012858:	6839      	ldr	r1, [r7, #0]
 801285a:	4878      	ldr	r0, [pc, #480]	@ (8012a3c <PrepareFrame+0x21c>)
 801285c:	f006 fb2b 	bl	8018eb6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012860:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012862:	b2da      	uxtb	r2, r3
 8012864:	4b74      	ldr	r3, [pc, #464]	@ (8012a38 <PrepareFrame+0x218>)
 8012866:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	781a      	ldrb	r2, [r3, #0]
 801286e:	4b72      	ldr	r3, [pc, #456]	@ (8012a38 <PrepareFrame+0x218>)
 8012870:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	781b      	ldrb	r3, [r3, #0]
 8012876:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801287a:	b2db      	uxtb	r3, r3
 801287c:	2b07      	cmp	r3, #7
 801287e:	f000 80b9 	beq.w	80129f4 <PrepareFrame+0x1d4>
 8012882:	2b07      	cmp	r3, #7
 8012884:	f300 80ce 	bgt.w	8012a24 <PrepareFrame+0x204>
 8012888:	2b02      	cmp	r3, #2
 801288a:	d006      	beq.n	801289a <PrepareFrame+0x7a>
 801288c:	2b04      	cmp	r3, #4
 801288e:	f040 80c9 	bne.w	8012a24 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8012892:	4b69      	ldr	r3, [pc, #420]	@ (8012a38 <PrepareFrame+0x218>)
 8012894:	2201      	movs	r2, #1
 8012896:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801289a:	4b67      	ldr	r3, [pc, #412]	@ (8012a38 <PrepareFrame+0x218>)
 801289c:	2204      	movs	r2, #4
 801289e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80128a2:	4b65      	ldr	r3, [pc, #404]	@ (8012a38 <PrepareFrame+0x218>)
 80128a4:	4a66      	ldr	r2, [pc, #408]	@ (8012a40 <PrepareFrame+0x220>)
 80128a6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80128aa:	4b63      	ldr	r3, [pc, #396]	@ (8012a38 <PrepareFrame+0x218>)
 80128ac:	22ff      	movs	r2, #255	@ 0xff
 80128ae:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	781a      	ldrb	r2, [r3, #0]
 80128b6:	4b60      	ldr	r3, [pc, #384]	@ (8012a38 <PrepareFrame+0x218>)
 80128b8:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80128bc:	4a5e      	ldr	r2, [pc, #376]	@ (8012a38 <PrepareFrame+0x218>)
 80128be:	79fb      	ldrb	r3, [r7, #7]
 80128c0:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80128c4:	4b5f      	ldr	r3, [pc, #380]	@ (8012a44 <PrepareFrame+0x224>)
 80128c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80128ca:	4a5b      	ldr	r2, [pc, #364]	@ (8012a38 <PrepareFrame+0x218>)
 80128cc:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	781a      	ldrb	r2, [r3, #0]
 80128d4:	4b58      	ldr	r3, [pc, #352]	@ (8012a38 <PrepareFrame+0x218>)
 80128d6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80128da:	4b57      	ldr	r3, [pc, #348]	@ (8012a38 <PrepareFrame+0x218>)
 80128dc:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 80128e0:	4b55      	ldr	r3, [pc, #340]	@ (8012a38 <PrepareFrame+0x218>)
 80128e2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80128e6:	4b54      	ldr	r3, [pc, #336]	@ (8012a38 <PrepareFrame+0x218>)
 80128e8:	4a54      	ldr	r2, [pc, #336]	@ (8012a3c <PrepareFrame+0x21c>)
 80128ea:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80128ee:	f107 0318 	add.w	r3, r7, #24
 80128f2:	4618      	mov	r0, r3
 80128f4:	f003 fa3a 	bl	8015d6c <LoRaMacCryptoGetFCntUp>
 80128f8:	4603      	mov	r3, r0
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d001      	beq.n	8012902 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80128fe:	2312      	movs	r3, #18
 8012900:	e096      	b.n	8012a30 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012902:	69bb      	ldr	r3, [r7, #24]
 8012904:	b29a      	uxth	r2, r3
 8012906:	4b4c      	ldr	r3, [pc, #304]	@ (8012a38 <PrepareFrame+0x218>)
 8012908:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 801290c:	4b4a      	ldr	r3, [pc, #296]	@ (8012a38 <PrepareFrame+0x218>)
 801290e:	2200      	movs	r2, #0
 8012910:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8012914:	4b48      	ldr	r3, [pc, #288]	@ (8012a38 <PrepareFrame+0x218>)
 8012916:	2200      	movs	r2, #0
 8012918:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801291c:	69bb      	ldr	r3, [r7, #24]
 801291e:	4a46      	ldr	r2, [pc, #280]	@ (8012a38 <PrepareFrame+0x218>)
 8012920:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012924:	f107 0314 	add.w	r3, r7, #20
 8012928:	4618      	mov	r0, r3
 801292a:	f002 fbef 	bl	801510c <LoRaMacCommandsGetSizeSerializedCmds>
 801292e:	4603      	mov	r3, r0
 8012930:	2b00      	cmp	r3, #0
 8012932:	d001      	beq.n	8012938 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012934:	2313      	movs	r3, #19
 8012936:	e07b      	b.n	8012a30 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d074      	beq.n	8012a28 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801293e:	4b41      	ldr	r3, [pc, #260]	@ (8012a44 <PrepareFrame+0x224>)
 8012940:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012944:	4618      	mov	r0, r3
 8012946:	f7fe fd13 	bl	8011370 <GetMaxAppPayloadWithoutFOptsLength>
 801294a:	4603      	mov	r3, r0
 801294c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801294e:	4b3a      	ldr	r3, [pc, #232]	@ (8012a38 <PrepareFrame+0x218>)
 8012950:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012954:	2b00      	cmp	r3, #0
 8012956:	d01d      	beq.n	8012994 <PrepareFrame+0x174>
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	2b0f      	cmp	r3, #15
 801295c:	d81a      	bhi.n	8012994 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801295e:	f107 0314 	add.w	r3, r7, #20
 8012962:	4a39      	ldr	r2, [pc, #228]	@ (8012a48 <PrepareFrame+0x228>)
 8012964:	4619      	mov	r1, r3
 8012966:	200f      	movs	r0, #15
 8012968:	f002 fbe6 	bl	8015138 <LoRaMacCommandsSerializeCmds>
 801296c:	4603      	mov	r3, r0
 801296e:	2b00      	cmp	r3, #0
 8012970:	d001      	beq.n	8012976 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012972:	2313      	movs	r3, #19
 8012974:	e05c      	b.n	8012a30 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	f003 030f 	and.w	r3, r3, #15
 801297c:	b2d9      	uxtb	r1, r3
 801297e:	68ba      	ldr	r2, [r7, #8]
 8012980:	7813      	ldrb	r3, [r2, #0]
 8012982:	f361 0303 	bfi	r3, r1, #0, #4
 8012986:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	781a      	ldrb	r2, [r3, #0]
 801298c:	4b2a      	ldr	r3, [pc, #168]	@ (8012a38 <PrepareFrame+0x218>)
 801298e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8012992:	e049      	b.n	8012a28 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012994:	4b28      	ldr	r3, [pc, #160]	@ (8012a38 <PrepareFrame+0x218>)
 8012996:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801299a:	2b00      	cmp	r3, #0
 801299c:	d010      	beq.n	80129c0 <PrepareFrame+0x1a0>
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	2b0f      	cmp	r3, #15
 80129a2:	d90d      	bls.n	80129c0 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80129a4:	7ffb      	ldrb	r3, [r7, #31]
 80129a6:	f107 0114 	add.w	r1, r7, #20
 80129aa:	4a28      	ldr	r2, [pc, #160]	@ (8012a4c <PrepareFrame+0x22c>)
 80129ac:	4618      	mov	r0, r3
 80129ae:	f002 fbc3 	bl	8015138 <LoRaMacCommandsSerializeCmds>
 80129b2:	4603      	mov	r3, r0
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d001      	beq.n	80129bc <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80129b8:	2313      	movs	r3, #19
 80129ba:	e039      	b.n	8012a30 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80129bc:	230a      	movs	r3, #10
 80129be:	e037      	b.n	8012a30 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80129c0:	7ffb      	ldrb	r3, [r7, #31]
 80129c2:	f107 0114 	add.w	r1, r7, #20
 80129c6:	4a21      	ldr	r2, [pc, #132]	@ (8012a4c <PrepareFrame+0x22c>)
 80129c8:	4618      	mov	r0, r3
 80129ca:	f002 fbb5 	bl	8015138 <LoRaMacCommandsSerializeCmds>
 80129ce:	4603      	mov	r3, r0
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d001      	beq.n	80129d8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80129d4:	2313      	movs	r3, #19
 80129d6:	e02b      	b.n	8012a30 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80129d8:	4b17      	ldr	r3, [pc, #92]	@ (8012a38 <PrepareFrame+0x218>)
 80129da:	2200      	movs	r2, #0
 80129dc:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80129e0:	4b15      	ldr	r3, [pc, #84]	@ (8012a38 <PrepareFrame+0x218>)
 80129e2:	4a1a      	ldr	r2, [pc, #104]	@ (8012a4c <PrepareFrame+0x22c>)
 80129e4:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	b2da      	uxtb	r2, r3
 80129ec:	4b12      	ldr	r3, [pc, #72]	@ (8012a38 <PrepareFrame+0x218>)
 80129ee:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 80129f2:	e019      	b.n	8012a28 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d018      	beq.n	8012a2c <PrepareFrame+0x20c>
 80129fa:	4b0f      	ldr	r3, [pc, #60]	@ (8012a38 <PrepareFrame+0x218>)
 80129fc:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d013      	beq.n	8012a2c <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8012a04:	4812      	ldr	r0, [pc, #72]	@ (8012a50 <PrepareFrame+0x230>)
 8012a06:	4b0c      	ldr	r3, [pc, #48]	@ (8012a38 <PrepareFrame+0x218>)
 8012a08:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012a0c:	461a      	mov	r2, r3
 8012a0e:	6839      	ldr	r1, [r7, #0]
 8012a10:	f006 fa51 	bl	8018eb6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012a14:	4b08      	ldr	r3, [pc, #32]	@ (8012a38 <PrepareFrame+0x218>)
 8012a16:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	b29a      	uxth	r2, r3
 8012a1e:	4b06      	ldr	r3, [pc, #24]	@ (8012a38 <PrepareFrame+0x218>)
 8012a20:	801a      	strh	r2, [r3, #0]
            }
            break;
 8012a22:	e003      	b.n	8012a2c <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012a24:	2302      	movs	r3, #2
 8012a26:	e003      	b.n	8012a30 <PrepareFrame+0x210>
            break;
 8012a28:	bf00      	nop
 8012a2a:	e000      	b.n	8012a2e <PrepareFrame+0x20e>
            break;
 8012a2c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8012a2e:	2300      	movs	r3, #0
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	3720      	adds	r7, #32
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}
 8012a38:	20000998 	.word	0x20000998
 8012a3c:	20000ad0 	.word	0x20000ad0
 8012a40:	2000099a 	.word	0x2000099a
 8012a44:	20000ecc 	.word	0x20000ecc
 8012a48:	20000ab0 	.word	0x20000ab0
 8012a4c:	20000e4c 	.word	0x20000e4c
 8012a50:	2000099b 	.word	0x2000099b

08012a54 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b08a      	sub	sp, #40	@ 0x28
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a5e:	2303      	movs	r3, #3
 8012a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8012a64:	2300      	movs	r3, #0
 8012a66:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8012a68:	79fb      	ldrb	r3, [r7, #7]
 8012a6a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8012b9c <SendFrameOnChannel+0x148>)
 8012a6e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012a72:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012a74:	4b49      	ldr	r3, [pc, #292]	@ (8012b9c <SendFrameOnChannel+0x148>)
 8012a76:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8012a7a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8012a7c:	4b47      	ldr	r3, [pc, #284]	@ (8012b9c <SendFrameOnChannel+0x148>)
 8012a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012a82:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012a84:	4b45      	ldr	r3, [pc, #276]	@ (8012b9c <SendFrameOnChannel+0x148>)
 8012a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012a8a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8012a8c:	4b44      	ldr	r3, [pc, #272]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012a8e:	881b      	ldrh	r3, [r3, #0]
 8012a90:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012a92:	4b42      	ldr	r3, [pc, #264]	@ (8012b9c <SendFrameOnChannel+0x148>)
 8012a94:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8012a98:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8012a9a:	4b40      	ldr	r3, [pc, #256]	@ (8012b9c <SendFrameOnChannel+0x148>)
 8012a9c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8012aa0:	f107 020f 	add.w	r2, r7, #15
 8012aa4:	f107 0110 	add.w	r1, r7, #16
 8012aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8012ba4 <SendFrameOnChannel+0x150>)
 8012aaa:	f004 f87f 	bl	8016bac <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012aae:	4b3c      	ldr	r3, [pc, #240]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012ab0:	2201      	movs	r2, #1
 8012ab2:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012ab6:	4b39      	ldr	r3, [pc, #228]	@ (8012b9c <SendFrameOnChannel+0x148>)
 8012ab8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012abc:	b2da      	uxtb	r2, r3
 8012abe:	4b38      	ldr	r3, [pc, #224]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012ac0:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8012ac4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012ac8:	4b35      	ldr	r3, [pc, #212]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012aca:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8012ace:	79fb      	ldrb	r3, [r7, #7]
 8012ad0:	4a33      	ldr	r2, [pc, #204]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012ad2:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012ad6:	4b32      	ldr	r3, [pc, #200]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012ad8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012adc:	4a30      	ldr	r2, [pc, #192]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012ade:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012ae4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012aea:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012aee:	f002 f85a 	bl	8014ba6 <LoRaMacClassBIsBeaconModeActive>
 8012af2:	4603      	mov	r3, r0
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d00b      	beq.n	8012b10 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8012af8:	4b29      	ldr	r3, [pc, #164]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012afa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012afe:	4618      	mov	r0, r3
 8012b00:	f002 f8bc 	bl	8014c7c <LoRaMacClassBIsUplinkCollision>
 8012b04:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8012b06:	6a3b      	ldr	r3, [r7, #32]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d001      	beq.n	8012b10 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012b0c:	2310      	movs	r3, #16
 8012b0e:	e040      	b.n	8012b92 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012b10:	4b22      	ldr	r3, [pc, #136]	@ (8012b9c <SendFrameOnChannel+0x148>)
 8012b12:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8012b16:	2b01      	cmp	r3, #1
 8012b18:	d101      	bne.n	8012b1e <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8012b1a:	f002 f8b9 	bl	8014c90 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8012b1e:	f002 f853 	bl	8014bc8 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8012b22:	4b1e      	ldr	r3, [pc, #120]	@ (8012b9c <SendFrameOnChannel+0x148>)
 8012b24:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012b2c:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 8012b30:	4611      	mov	r1, r2
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7ff fc2c 	bl	8012390 <SecureFrame>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8012b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d002      	beq.n	8012b4c <SendFrameOnChannel+0xf8>
    {
        return status;
 8012b46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b4a:	e022      	b.n	8012b92 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012b4c:	4b14      	ldr	r3, [pc, #80]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012b4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012b52:	f043 0302 	orr.w	r3, r3, #2
 8012b56:	4a12      	ldr	r2, [pc, #72]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012b58:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8012b5c:	4b10      	ldr	r3, [pc, #64]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012b5e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012b62:	3301      	adds	r3, #1
 8012b64:	b2da      	uxtb	r2, r3
 8012b66:	4b0e      	ldr	r3, [pc, #56]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012b68:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8012b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012b6e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8012b72:	4b0b      	ldr	r3, [pc, #44]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012b74:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8012b78:	4b09      	ldr	r3, [pc, #36]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012b80:	4b09      	ldr	r3, [pc, #36]	@ (8012ba8 <SendFrameOnChannel+0x154>)
 8012b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b84:	4a06      	ldr	r2, [pc, #24]	@ (8012ba0 <SendFrameOnChannel+0x14c>)
 8012b86:	8812      	ldrh	r2, [r2, #0]
 8012b88:	b2d2      	uxtb	r2, r2
 8012b8a:	4611      	mov	r1, r2
 8012b8c:	4807      	ldr	r0, [pc, #28]	@ (8012bac <SendFrameOnChannel+0x158>)
 8012b8e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012b90:	2300      	movs	r3, #0
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3728      	adds	r7, #40	@ 0x28
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	20000ecc 	.word	0x20000ecc
 8012ba0:	20000998 	.word	0x20000998
 8012ba4:	20000db4 	.word	0x20000db4
 8012ba8:	08021620 	.word	0x08021620
 8012bac:	2000099a 	.word	0x2000099a

08012bb0 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	6039      	str	r1, [r7, #0]
 8012bba:	80fb      	strh	r3, [r7, #6]
 8012bbc:	4613      	mov	r3, r2
 8012bbe:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012bc0:	4b09      	ldr	r3, [pc, #36]	@ (8012be8 <SetTxContinuousWave+0x38>)
 8012bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bc4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012bc8:	88fa      	ldrh	r2, [r7, #6]
 8012bca:	6838      	ldr	r0, [r7, #0]
 8012bcc:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012bce:	4b07      	ldr	r3, [pc, #28]	@ (8012bec <SetTxContinuousWave+0x3c>)
 8012bd0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012bd4:	f043 0302 	orr.w	r3, r3, #2
 8012bd8:	4a04      	ldr	r2, [pc, #16]	@ (8012bec <SetTxContinuousWave+0x3c>)
 8012bda:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8012bde:	2300      	movs	r3, #0
}
 8012be0:	4618      	mov	r0, r3
 8012be2:	3708      	adds	r7, #8
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}
 8012be8:	08021620 	.word	0x08021620
 8012bec:	20000998 	.word	0x20000998

08012bf0 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b082      	sub	sp, #8
 8012bf4:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8012bfa:	4b49      	ldr	r3, [pc, #292]	@ (8012d20 <RestoreNvmData+0x130>)
 8012bfc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012c00:	2b01      	cmp	r3, #1
 8012c02:	d001      	beq.n	8012c08 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8012c04:	2301      	movs	r3, #1
 8012c06:	e087      	b.n	8012d18 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8012c08:	2124      	movs	r1, #36	@ 0x24
 8012c0a:	4846      	ldr	r0, [pc, #280]	@ (8012d24 <RestoreNvmData+0x134>)
 8012c0c:	f006 f9a8 	bl	8018f60 <Crc32>
 8012c10:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8012c12:	4b44      	ldr	r3, [pc, #272]	@ (8012d24 <RestoreNvmData+0x134>)
 8012c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d001      	beq.n	8012c20 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012c1c:	2317      	movs	r3, #23
 8012c1e:	e07b      	b.n	8012d18 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8012c20:	211c      	movs	r1, #28
 8012c22:	4841      	ldr	r0, [pc, #260]	@ (8012d28 <RestoreNvmData+0x138>)
 8012c24:	f006 f99c 	bl	8018f60 <Crc32>
 8012c28:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8012c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8012d24 <RestoreNvmData+0x134>)
 8012c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c2e:	687a      	ldr	r2, [r7, #4]
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d001      	beq.n	8012c38 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012c34:	2317      	movs	r3, #23
 8012c36:	e06f      	b.n	8012d18 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8012c38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012c3c:	483b      	ldr	r0, [pc, #236]	@ (8012d2c <RestoreNvmData+0x13c>)
 8012c3e:	f006 f98f 	bl	8018f60 <Crc32>
 8012c42:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8012c44:	4b37      	ldr	r3, [pc, #220]	@ (8012d24 <RestoreNvmData+0x134>)
 8012c46:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8012c4a:	687a      	ldr	r2, [r7, #4]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d001      	beq.n	8012c54 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012c50:	2317      	movs	r3, #23
 8012c52:	e061      	b.n	8012d18 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8012c54:	21d4      	movs	r1, #212	@ 0xd4
 8012c56:	4836      	ldr	r0, [pc, #216]	@ (8012d30 <RestoreNvmData+0x140>)
 8012c58:	f006 f982 	bl	8018f60 <Crc32>
 8012c5c:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8012c5e:	4b31      	ldr	r3, [pc, #196]	@ (8012d24 <RestoreNvmData+0x134>)
 8012c60:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d001      	beq.n	8012c6e <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012c6a:	2317      	movs	r3, #23
 8012c6c:	e054      	b.n	8012d18 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8012c6e:	2100      	movs	r1, #0
 8012c70:	4830      	ldr	r0, [pc, #192]	@ (8012d34 <RestoreNvmData+0x144>)
 8012c72:	f006 f975 	bl	8018f60 <Crc32>
 8012c76:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8012c78:	4b2a      	ldr	r3, [pc, #168]	@ (8012d24 <RestoreNvmData+0x134>)
 8012c7a:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d001      	beq.n	8012c88 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012c84:	2317      	movs	r3, #23
 8012c86:	e047      	b.n	8012d18 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8012c88:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8012c8c:	482a      	ldr	r0, [pc, #168]	@ (8012d38 <RestoreNvmData+0x148>)
 8012c8e:	f006 f967 	bl	8018f60 <Crc32>
 8012c92:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8012c94:	4b23      	ldr	r3, [pc, #140]	@ (8012d24 <RestoreNvmData+0x134>)
 8012c96:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 8012c9a:	687a      	ldr	r2, [r7, #4]
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d001      	beq.n	8012ca4 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012ca0:	2317      	movs	r3, #23
 8012ca2:	e039      	b.n	8012d18 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8012ca4:	2114      	movs	r1, #20
 8012ca6:	4825      	ldr	r0, [pc, #148]	@ (8012d3c <RestoreNvmData+0x14c>)
 8012ca8:	f006 f95a 	bl	8018f60 <Crc32>
 8012cac:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8012cae:	4b1d      	ldr	r3, [pc, #116]	@ (8012d24 <RestoreNvmData+0x134>)
 8012cb0:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 8012cb4:	687a      	ldr	r2, [r7, #4]
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d001      	beq.n	8012cbe <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012cba:	2317      	movs	r3, #23
 8012cbc:	e02c      	b.n	8012d18 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8012cbe:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012cc2:	4918      	ldr	r1, [pc, #96]	@ (8012d24 <RestoreNvmData+0x134>)
 8012cc4:	481e      	ldr	r0, [pc, #120]	@ (8012d40 <RestoreNvmData+0x150>)
 8012cc6:	f006 f8f6 	bl	8018eb6 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8012cca:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012cce:	2100      	movs	r1, #0
 8012cd0:	4814      	ldr	r0, [pc, #80]	@ (8012d24 <RestoreNvmData+0x134>)
 8012cd2:	f006 f92b 	bl	8018f2c <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012cd6:	4b12      	ldr	r3, [pc, #72]	@ (8012d20 <RestoreNvmData+0x130>)
 8012cd8:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8012cdc:	4b10      	ldr	r3, [pc, #64]	@ (8012d20 <RestoreNvmData+0x130>)
 8012cde:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012ce2:	4b17      	ldr	r3, [pc, #92]	@ (8012d40 <RestoreNvmData+0x150>)
 8012ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8012d20 <RestoreNvmData+0x130>)
 8012ce8:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012cec:	4b14      	ldr	r3, [pc, #80]	@ (8012d40 <RestoreNvmData+0x150>)
 8012cee:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8012cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8012d20 <RestoreNvmData+0x130>)
 8012cf4:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012cf8:	4b09      	ldr	r3, [pc, #36]	@ (8012d20 <RestoreNvmData+0x130>)
 8012cfa:	2201      	movs	r2, #1
 8012cfc:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012d00:	4b07      	ldr	r3, [pc, #28]	@ (8012d20 <RestoreNvmData+0x130>)
 8012d02:	2202      	movs	r2, #2
 8012d04:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012d08:	4b0e      	ldr	r3, [pc, #56]	@ (8012d44 <RestoreNvmData+0x154>)
 8012d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8012d40 <RestoreNvmData+0x150>)
 8012d0e:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8012d12:	4610      	mov	r0, r2
 8012d14:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8012d16:	2300      	movs	r3, #0
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3708      	adds	r7, #8
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}
 8012d20:	20000998 	.word	0x20000998
 8012d24:	20001488 	.word	0x20001488
 8012d28:	200014b0 	.word	0x200014b0
 8012d2c:	200014d0 	.word	0x200014d0
 8012d30:	200015d4 	.word	0x200015d4
 8012d34:	200016ac 	.word	0x200016ac
 8012d38:	200016b0 	.word	0x200016b0
 8012d3c:	20001a2c 	.word	0x20001a2c
 8012d40:	20000ecc 	.word	0x20000ecc
 8012d44:	08021620 	.word	0x08021620

08012d48 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d002      	beq.n	8012d5e <DetermineFrameType+0x16>
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d101      	bne.n	8012d62 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012d5e:	2303      	movs	r3, #3
 8012d60:	e03b      	b.n	8012dda <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	7b1b      	ldrb	r3, [r3, #12]
 8012d66:	f003 030f 	and.w	r3, r3, #15
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d008      	beq.n	8012d82 <DetermineFrameType+0x3a>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d003      	beq.n	8012d82 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	701a      	strb	r2, [r3, #0]
 8012d80:	e02a      	b.n	8012dd8 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d103      	bne.n	8012d94 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	2201      	movs	r2, #1
 8012d90:	701a      	strb	r2, [r3, #0]
 8012d92:	e021      	b.n	8012dd8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	7b1b      	ldrb	r3, [r3, #12]
 8012d98:	f003 030f 	and.w	r3, r3, #15
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d108      	bne.n	8012db4 <DetermineFrameType+0x6c>
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d103      	bne.n	8012db4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	2202      	movs	r2, #2
 8012db0:	701a      	strb	r2, [r3, #0]
 8012db2:	e011      	b.n	8012dd8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	7b1b      	ldrb	r3, [r3, #12]
 8012db8:	f003 030f 	and.w	r3, r3, #15
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d108      	bne.n	8012dd4 <DetermineFrameType+0x8c>
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d003      	beq.n	8012dd4 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	2203      	movs	r2, #3
 8012dd0:	701a      	strb	r2, [r3, #0]
 8012dd2:	e001      	b.n	8012dd8 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012dd4:	2318      	movs	r3, #24
 8012dd6:	e000      	b.n	8012dda <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012dd8:	2300      	movs	r3, #0
}
 8012dda:	4618      	mov	r0, r3
 8012ddc:	370c      	adds	r7, #12
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bc80      	pop	{r7}
 8012de2:	4770      	bx	lr

08012de4 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8012de4:	b480      	push	{r7}
 8012de6:	b083      	sub	sp, #12
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	4603      	mov	r3, r0
 8012dec:	460a      	mov	r2, r1
 8012dee:	71fb      	strb	r3, [r7, #7]
 8012df0:	4613      	mov	r3, r2
 8012df2:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8012df4:	79fa      	ldrb	r2, [r7, #7]
 8012df6:	79bb      	ldrb	r3, [r7, #6]
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d301      	bcc.n	8012e00 <CheckRetrans+0x1c>
    {
        return true;
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	e000      	b.n	8012e02 <CheckRetrans+0x1e>
    }
    return false;
 8012e00:	2300      	movs	r3, #0
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	370c      	adds	r7, #12
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bc80      	pop	{r7}
 8012e0a:	4770      	bx	lr

08012e0c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012e10:	4b12      	ldr	r3, [pc, #72]	@ (8012e5c <CheckRetransUnconfirmedUplink+0x50>)
 8012e12:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012e16:	4a12      	ldr	r2, [pc, #72]	@ (8012e60 <CheckRetransUnconfirmedUplink+0x54>)
 8012e18:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8012e1c:	4611      	mov	r1, r2
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7ff ffe0 	bl	8012de4 <CheckRetrans>
 8012e24:	4603      	mov	r3, r0
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d001      	beq.n	8012e2e <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	e014      	b.n	8012e58 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8012e5c <CheckRetransUnconfirmedUplink+0x50>)
 8012e30:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012e34:	f003 0302 	and.w	r3, r3, #2
 8012e38:	b2db      	uxtb	r3, r3
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d00b      	beq.n	8012e56 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012e3e:	4b07      	ldr	r3, [pc, #28]	@ (8012e5c <CheckRetransUnconfirmedUplink+0x50>)
 8012e40:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d004      	beq.n	8012e52 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8012e48:	4b04      	ldr	r3, [pc, #16]	@ (8012e5c <CheckRetransUnconfirmedUplink+0x50>)
 8012e4a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012e4e:	2b01      	cmp	r3, #1
 8012e50:	d101      	bne.n	8012e56 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8012e52:	2301      	movs	r3, #1
 8012e54:	e000      	b.n	8012e58 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8012e56:	2300      	movs	r3, #0
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	bd80      	pop	{r7, pc}
 8012e5c:	20000998 	.word	0x20000998
 8012e60:	20000ecc 	.word	0x20000ecc

08012e64 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012e68:	4b10      	ldr	r3, [pc, #64]	@ (8012eac <CheckRetransConfirmedUplink+0x48>)
 8012e6a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012e6e:	4a10      	ldr	r2, [pc, #64]	@ (8012eb0 <CheckRetransConfirmedUplink+0x4c>)
 8012e70:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8012e74:	4611      	mov	r1, r2
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7ff ffb4 	bl	8012de4 <CheckRetrans>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d001      	beq.n	8012e86 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8012e82:	2301      	movs	r3, #1
 8012e84:	e00f      	b.n	8012ea6 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012e86:	4b09      	ldr	r3, [pc, #36]	@ (8012eac <CheckRetransConfirmedUplink+0x48>)
 8012e88:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012e8c:	f003 0302 	and.w	r3, r3, #2
 8012e90:	b2db      	uxtb	r3, r3
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d006      	beq.n	8012ea4 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012e96:	4b05      	ldr	r3, [pc, #20]	@ (8012eac <CheckRetransConfirmedUplink+0x48>)
 8012e98:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d001      	beq.n	8012ea4 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	e000      	b.n	8012ea6 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8012ea4:	2300      	movs	r3, #0
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	20000998 	.word	0x20000998
 8012eb0:	20000ecc 	.word	0x20000ecc

08012eb4 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8012eb4:	b480      	push	{r7}
 8012eb6:	b083      	sub	sp, #12
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ec2:	d002      	beq.n	8012eca <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	3301      	adds	r3, #1
 8012ec8:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8012eca:	687b      	ldr	r3, [r7, #4]
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	370c      	adds	r7, #12
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bc80      	pop	{r7}
 8012ed4:	4770      	bx	lr
	...

08012ed8 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012edc:	4b1a      	ldr	r3, [pc, #104]	@ (8012f48 <StopRetransmission+0x70>)
 8012ede:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012ee2:	f003 0302 	and.w	r3, r3, #2
 8012ee6:	b2db      	uxtb	r3, r3
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d009      	beq.n	8012f00 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012eec:	4b16      	ldr	r3, [pc, #88]	@ (8012f48 <StopRetransmission+0x70>)
 8012eee:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d011      	beq.n	8012f1a <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012ef6:	4b14      	ldr	r3, [pc, #80]	@ (8012f48 <StopRetransmission+0x70>)
 8012ef8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012efc:	2b01      	cmp	r3, #1
 8012efe:	d00c      	beq.n	8012f1a <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012f00:	4b12      	ldr	r3, [pc, #72]	@ (8012f4c <StopRetransmission+0x74>)
 8012f02:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d007      	beq.n	8012f1a <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8012f0a:	4b10      	ldr	r3, [pc, #64]	@ (8012f4c <StopRetransmission+0x74>)
 8012f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7ff ffd0 	bl	8012eb4 <IncreaseAdrAckCounter>
 8012f14:	4603      	mov	r3, r0
 8012f16:	4a0d      	ldr	r2, [pc, #52]	@ (8012f4c <StopRetransmission+0x74>)
 8012f18:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8012f48 <StopRetransmission+0x70>)
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 8012f22:	4b09      	ldr	r3, [pc, #36]	@ (8012f48 <StopRetransmission+0x70>)
 8012f24:	2200      	movs	r2, #0
 8012f26:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8012f2a:	4b07      	ldr	r3, [pc, #28]	@ (8012f48 <StopRetransmission+0x70>)
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012f32:	4b05      	ldr	r3, [pc, #20]	@ (8012f48 <StopRetransmission+0x70>)
 8012f34:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012f38:	f023 0302 	bic.w	r3, r3, #2
 8012f3c:	4a02      	ldr	r2, [pc, #8]	@ (8012f48 <StopRetransmission+0x70>)
 8012f3e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8012f42:	2301      	movs	r3, #1
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	bd80      	pop	{r7, pc}
 8012f48:	20000998 	.word	0x20000998
 8012f4c:	20000ecc 	.word	0x20000ecc

08012f50 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8012f54:	4b08      	ldr	r3, [pc, #32]	@ (8012f78 <OnMacProcessNotify+0x28>)
 8012f56:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d00a      	beq.n	8012f74 <OnMacProcessNotify+0x24>
 8012f5e:	4b06      	ldr	r3, [pc, #24]	@ (8012f78 <OnMacProcessNotify+0x28>)
 8012f60:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012f64:	695b      	ldr	r3, [r3, #20]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d004      	beq.n	8012f74 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8012f6a:	4b03      	ldr	r3, [pc, #12]	@ (8012f78 <OnMacProcessNotify+0x28>)
 8012f6c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012f70:	695b      	ldr	r3, [r3, #20]
 8012f72:	4798      	blx	r3
    }
}
 8012f74:	bf00      	nop
 8012f76:	bd80      	pop	{r7, pc}
 8012f78:	20000998 	.word	0x20000998

08012f7c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	4603      	mov	r3, r0
 8012f84:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8012f86:	4b0b      	ldr	r3, [pc, #44]	@ (8012fb4 <CallNvmDataChangeCallback+0x38>)
 8012f88:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d00c      	beq.n	8012faa <CallNvmDataChangeCallback+0x2e>
 8012f90:	4b08      	ldr	r3, [pc, #32]	@ (8012fb4 <CallNvmDataChangeCallback+0x38>)
 8012f92:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012f96:	691b      	ldr	r3, [r3, #16]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d006      	beq.n	8012faa <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8012f9c:	4b05      	ldr	r3, [pc, #20]	@ (8012fb4 <CallNvmDataChangeCallback+0x38>)
 8012f9e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012fa2:	691b      	ldr	r3, [r3, #16]
 8012fa4:	88fa      	ldrh	r2, [r7, #6]
 8012fa6:	4610      	mov	r0, r2
 8012fa8:	4798      	blx	r3
    }
}
 8012faa:	bf00      	nop
 8012fac:	3708      	adds	r7, #8
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	20000998 	.word	0x20000998

08012fb8 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8012fb8:	b480      	push	{r7}
 8012fba:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8012fec <IsRequestPending+0x34>)
 8012fbe:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012fc2:	f003 0304 	and.w	r3, r3, #4
 8012fc6:	b2db      	uxtb	r3, r3
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d107      	bne.n	8012fdc <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012fcc:	4b07      	ldr	r3, [pc, #28]	@ (8012fec <IsRequestPending+0x34>)
 8012fce:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012fd2:	f003 0301 	and.w	r3, r3, #1
 8012fd6:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d001      	beq.n	8012fe0 <IsRequestPending+0x28>
    {
        return 1;
 8012fdc:	2301      	movs	r3, #1
 8012fde:	e000      	b.n	8012fe2 <IsRequestPending+0x2a>
    }
    return 0;
 8012fe0:	2300      	movs	r3, #0
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bc80      	pop	{r7}
 8012fe8:	4770      	bx	lr
 8012fea:	bf00      	nop
 8012fec:	20000998 	.word	0x20000998

08012ff0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012ff0:	b590      	push	{r4, r7, lr}
 8012ff2:	b091      	sub	sp, #68	@ 0x44
 8012ff4:	af02      	add	r7, sp, #8
 8012ff6:	6178      	str	r0, [r7, #20]
 8012ff8:	6139      	str	r1, [r7, #16]
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d002      	beq.n	801300a <LoRaMacInitialization+0x1a>
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d101      	bne.n	801300e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801300a:	2303      	movs	r3, #3
 801300c:	e27a      	b.n	8013504 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d00b      	beq.n	801302e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801301a:	2b00      	cmp	r3, #0
 801301c:	d007      	beq.n	801302e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013022:	2b00      	cmp	r3, #0
 8013024:	d003      	beq.n	801302e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801302a:	2b00      	cmp	r3, #0
 801302c:	d101      	bne.n	8013032 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801302e:	2303      	movs	r3, #3
 8013030:	e268      	b.n	8013504 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013032:	7bfb      	ldrb	r3, [r7, #15]
 8013034:	4618      	mov	r0, r3
 8013036:	f003 fd03 	bl	8016a40 <RegionIsActive>
 801303a:	4603      	mov	r3, r0
 801303c:	f083 0301 	eor.w	r3, r3, #1
 8013040:	b2db      	uxtb	r3, r3
 8013042:	2b00      	cmp	r3, #0
 8013044:	d001      	beq.n	801304a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013046:	2309      	movs	r3, #9
 8013048:	e25c      	b.n	8013504 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801304a:	6978      	ldr	r0, [r7, #20]
 801304c:	f002 f996 	bl	801537c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013050:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8013054:	2100      	movs	r1, #0
 8013056:	48c7      	ldr	r0, [pc, #796]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013058:	f005 ff68 	bl	8018f2c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 801305c:	f240 5234 	movw	r2, #1332	@ 0x534
 8013060:	2100      	movs	r1, #0
 8013062:	48c5      	ldr	r0, [pc, #788]	@ (8013378 <LoRaMacInitialization+0x388>)
 8013064:	f005 ff62 	bl	8018f2c <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8013068:	4ac2      	ldr	r2, [pc, #776]	@ (8013374 <LoRaMacInitialization+0x384>)
 801306a:	7bfb      	ldrb	r3, [r7, #15]
 801306c:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8013070:	4bc0      	ldr	r3, [pc, #768]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013072:	2200      	movs	r2, #0
 8013074:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8013078:	4bbe      	ldr	r3, [pc, #760]	@ (8013374 <LoRaMacInitialization+0x384>)
 801307a:	2200      	movs	r2, #0
 801307c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8013080:	4bbc      	ldr	r3, [pc, #752]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013082:	4abe      	ldr	r2, [pc, #760]	@ (801337c <LoRaMacInitialization+0x38c>)
 8013084:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8013088:	2300      	movs	r3, #0
 801308a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801308e:	4bbc      	ldr	r3, [pc, #752]	@ (8013380 <LoRaMacInitialization+0x390>)
 8013090:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013092:	4bbc      	ldr	r3, [pc, #752]	@ (8013384 <LoRaMacInitialization+0x394>)
 8013094:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8013096:	4bbc      	ldr	r3, [pc, #752]	@ (8013388 <LoRaMacInitialization+0x398>)
 8013098:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801309a:	4bb6      	ldr	r3, [pc, #728]	@ (8013374 <LoRaMacInitialization+0x384>)
 801309c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80130a0:	f107 021c 	add.w	r2, r7, #28
 80130a4:	4611      	mov	r1, r2
 80130a6:	4618      	mov	r0, r3
 80130a8:	f003 fd03 	bl	8016ab2 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80130ac:	230f      	movs	r3, #15
 80130ae:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80130b2:	4bb0      	ldr	r3, [pc, #704]	@ (8013374 <LoRaMacInitialization+0x384>)
 80130b4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80130b8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80130bc:	4611      	mov	r1, r2
 80130be:	4618      	mov	r0, r3
 80130c0:	f003 fcce 	bl	8016a60 <RegionGetPhyParam>
 80130c4:	4603      	mov	r3, r0
 80130c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80130c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	bf14      	ite	ne
 80130ce:	2301      	movne	r3, #1
 80130d0:	2300      	moveq	r3, #0
 80130d2:	b2da      	uxtb	r2, r3
 80130d4:	4ba7      	ldr	r3, [pc, #668]	@ (8013374 <LoRaMacInitialization+0x384>)
 80130d6:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80130da:	230a      	movs	r3, #10
 80130dc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80130e0:	4ba4      	ldr	r3, [pc, #656]	@ (8013374 <LoRaMacInitialization+0x384>)
 80130e2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80130e6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80130ea:	4611      	mov	r1, r2
 80130ec:	4618      	mov	r0, r3
 80130ee:	f003 fcb7 	bl	8016a60 <RegionGetPhyParam>
 80130f2:	4603      	mov	r3, r0
 80130f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80130f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130f8:	b25a      	sxtb	r2, r3
 80130fa:	4b9e      	ldr	r3, [pc, #632]	@ (8013374 <LoRaMacInitialization+0x384>)
 80130fc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8013100:	2306      	movs	r3, #6
 8013102:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013106:	4b9b      	ldr	r3, [pc, #620]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013108:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801310c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013110:	4611      	mov	r1, r2
 8013112:	4618      	mov	r0, r3
 8013114:	f003 fca4 	bl	8016a60 <RegionGetPhyParam>
 8013118:	4603      	mov	r3, r0
 801311a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 801311c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801311e:	b25a      	sxtb	r2, r3
 8013120:	4b94      	ldr	r3, [pc, #592]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013122:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8013126:	2310      	movs	r3, #16
 8013128:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801312c:	4b91      	ldr	r3, [pc, #580]	@ (8013374 <LoRaMacInitialization+0x384>)
 801312e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013132:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013136:	4611      	mov	r1, r2
 8013138:	4618      	mov	r0, r3
 801313a:	f003 fc91 	bl	8016a60 <RegionGetPhyParam>
 801313e:	4603      	mov	r3, r0
 8013140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8013142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013144:	4a8b      	ldr	r2, [pc, #556]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013146:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801314a:	2311      	movs	r3, #17
 801314c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013150:	4b88      	ldr	r3, [pc, #544]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013152:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013156:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801315a:	4611      	mov	r1, r2
 801315c:	4618      	mov	r0, r3
 801315e:	f003 fc7f 	bl	8016a60 <RegionGetPhyParam>
 8013162:	4603      	mov	r3, r0
 8013164:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8013166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013168:	4a82      	ldr	r2, [pc, #520]	@ (8013374 <LoRaMacInitialization+0x384>)
 801316a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801316e:	2312      	movs	r3, #18
 8013170:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013174:	4b7f      	ldr	r3, [pc, #508]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013176:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801317a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801317e:	4611      	mov	r1, r2
 8013180:	4618      	mov	r0, r3
 8013182:	f003 fc6d 	bl	8016a60 <RegionGetPhyParam>
 8013186:	4603      	mov	r3, r0
 8013188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801318a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801318c:	4a79      	ldr	r2, [pc, #484]	@ (8013374 <LoRaMacInitialization+0x384>)
 801318e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8013192:	2313      	movs	r3, #19
 8013194:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013198:	4b76      	ldr	r3, [pc, #472]	@ (8013374 <LoRaMacInitialization+0x384>)
 801319a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801319e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80131a2:	4611      	mov	r1, r2
 80131a4:	4618      	mov	r0, r3
 80131a6:	f003 fc5b 	bl	8016a60 <RegionGetPhyParam>
 80131aa:	4603      	mov	r3, r0
 80131ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80131ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131b0:	4a70      	ldr	r2, [pc, #448]	@ (8013374 <LoRaMacInitialization+0x384>)
 80131b2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80131b6:	2314      	movs	r3, #20
 80131b8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80131bc:	4b6d      	ldr	r3, [pc, #436]	@ (8013374 <LoRaMacInitialization+0x384>)
 80131be:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80131c2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80131c6:	4611      	mov	r1, r2
 80131c8:	4618      	mov	r0, r3
 80131ca:	f003 fc49 	bl	8016a60 <RegionGetPhyParam>
 80131ce:	4603      	mov	r3, r0
 80131d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80131d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131d4:	4a67      	ldr	r2, [pc, #412]	@ (8013374 <LoRaMacInitialization+0x384>)
 80131d6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80131da:	2316      	movs	r3, #22
 80131dc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80131e0:	4b64      	ldr	r3, [pc, #400]	@ (8013374 <LoRaMacInitialization+0x384>)
 80131e2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80131e6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80131ea:	4611      	mov	r1, r2
 80131ec:	4618      	mov	r0, r3
 80131ee:	f003 fc37 	bl	8016a60 <RegionGetPhyParam>
 80131f2:	4603      	mov	r3, r0
 80131f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80131f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131f8:	b2da      	uxtb	r2, r3
 80131fa:	4b5e      	ldr	r3, [pc, #376]	@ (8013374 <LoRaMacInitialization+0x384>)
 80131fc:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8013200:	2317      	movs	r3, #23
 8013202:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013206:	4b5b      	ldr	r3, [pc, #364]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013208:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801320c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013210:	4611      	mov	r1, r2
 8013212:	4618      	mov	r0, r3
 8013214:	f003 fc24 	bl	8016a60 <RegionGetPhyParam>
 8013218:	4603      	mov	r3, r0
 801321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 801321c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801321e:	4a55      	ldr	r2, [pc, #340]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013220:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8013224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013226:	4a53      	ldr	r2, [pc, #332]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013228:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801322c:	2318      	movs	r3, #24
 801322e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013232:	4b50      	ldr	r3, [pc, #320]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013234:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013238:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801323c:	4611      	mov	r1, r2
 801323e:	4618      	mov	r0, r3
 8013240:	f003 fc0e 	bl	8016a60 <RegionGetPhyParam>
 8013244:	4603      	mov	r3, r0
 8013246:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8013248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801324a:	b2da      	uxtb	r2, r3
 801324c:	4b49      	ldr	r3, [pc, #292]	@ (8013374 <LoRaMacInitialization+0x384>)
 801324e:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8013252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013254:	b2da      	uxtb	r2, r3
 8013256:	4b47      	ldr	r3, [pc, #284]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013258:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 801325c:	231d      	movs	r3, #29
 801325e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013262:	4b44      	ldr	r3, [pc, #272]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013264:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013268:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801326c:	4611      	mov	r1, r2
 801326e:	4618      	mov	r0, r3
 8013270:	f003 fbf6 	bl	8016a60 <RegionGetPhyParam>
 8013274:	4603      	mov	r3, r0
 8013276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8013278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801327a:	b2da      	uxtb	r2, r3
 801327c:	4b3d      	ldr	r3, [pc, #244]	@ (8013374 <LoRaMacInitialization+0x384>)
 801327e:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8013282:	231e      	movs	r3, #30
 8013284:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013288:	4b3a      	ldr	r3, [pc, #232]	@ (8013374 <LoRaMacInitialization+0x384>)
 801328a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801328e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013292:	4611      	mov	r1, r2
 8013294:	4618      	mov	r0, r3
 8013296:	f003 fbe3 	bl	8016a60 <RegionGetPhyParam>
 801329a:	4603      	mov	r3, r0
 801329c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801329e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132a0:	b2da      	uxtb	r2, r3
 80132a2:	4b34      	ldr	r3, [pc, #208]	@ (8013374 <LoRaMacInitialization+0x384>)
 80132a4:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80132a8:	231f      	movs	r3, #31
 80132aa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80132ae:	4b31      	ldr	r3, [pc, #196]	@ (8013374 <LoRaMacInitialization+0x384>)
 80132b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80132b4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80132b8:	4611      	mov	r1, r2
 80132ba:	4618      	mov	r0, r3
 80132bc:	f003 fbd0 	bl	8016a60 <RegionGetPhyParam>
 80132c0:	4603      	mov	r3, r0
 80132c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80132c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132c6:	4a2b      	ldr	r2, [pc, #172]	@ (8013374 <LoRaMacInitialization+0x384>)
 80132c8:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80132cc:	2320      	movs	r3, #32
 80132ce:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80132d2:	4b28      	ldr	r3, [pc, #160]	@ (8013374 <LoRaMacInitialization+0x384>)
 80132d4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80132d8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80132dc:	4611      	mov	r1, r2
 80132de:	4618      	mov	r0, r3
 80132e0:	f003 fbbe 	bl	8016a60 <RegionGetPhyParam>
 80132e4:	4603      	mov	r3, r0
 80132e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80132e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ea:	4a22      	ldr	r2, [pc, #136]	@ (8013374 <LoRaMacInitialization+0x384>)
 80132ec:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80132f0:	230b      	movs	r3, #11
 80132f2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80132f6:	4b1f      	ldr	r3, [pc, #124]	@ (8013374 <LoRaMacInitialization+0x384>)
 80132f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80132fc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013300:	4611      	mov	r1, r2
 8013302:	4618      	mov	r0, r3
 8013304:	f003 fbac 	bl	8016a60 <RegionGetPhyParam>
 8013308:	4603      	mov	r3, r0
 801330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 801330c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801330e:	b29a      	uxth	r2, r3
 8013310:	4b18      	ldr	r3, [pc, #96]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013312:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8013316:	230c      	movs	r3, #12
 8013318:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801331c:	4b15      	ldr	r3, [pc, #84]	@ (8013374 <LoRaMacInitialization+0x384>)
 801331e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013322:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013326:	4611      	mov	r1, r2
 8013328:	4618      	mov	r0, r3
 801332a:	f003 fb99 	bl	8016a60 <RegionGetPhyParam>
 801332e:	4603      	mov	r3, r0
 8013330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8013332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013334:	b29a      	uxth	r2, r3
 8013336:	4b0f      	ldr	r3, [pc, #60]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013338:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 801333c:	4b0d      	ldr	r3, [pc, #52]	@ (8013374 <LoRaMacInitialization+0x384>)
 801333e:	2201      	movs	r2, #1
 8013340:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8013344:	4b0b      	ldr	r3, [pc, #44]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013346:	220a      	movs	r2, #10
 8013348:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 801334c:	4b09      	ldr	r3, [pc, #36]	@ (8013374 <LoRaMacInitialization+0x384>)
 801334e:	2206      	movs	r2, #6
 8013350:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8013354:	4b07      	ldr	r3, [pc, #28]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801335a:	4a06      	ldr	r2, [pc, #24]	@ (8013374 <LoRaMacInitialization+0x384>)
 801335c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801335e:	4b05      	ldr	r3, [pc, #20]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013360:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8013364:	4b03      	ldr	r3, [pc, #12]	@ (8013374 <LoRaMacInitialization+0x384>)
 8013366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 801336a:	4b02      	ldr	r3, [pc, #8]	@ (8013374 <LoRaMacInitialization+0x384>)
 801336c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013370:	e00c      	b.n	801338c <LoRaMacInitialization+0x39c>
 8013372:	bf00      	nop
 8013374:	20000ecc 	.word	0x20000ecc
 8013378:	20000998 	.word	0x20000998
 801337c:	01000400 	.word	0x01000400
 8013380:	200010f0 	.word	0x200010f0
 8013384:	200010f4 	.word	0x200010f4
 8013388:	20001a44 	.word	0x20001a44
 801338c:	4a5f      	ldr	r2, [pc, #380]	@ (801350c <LoRaMacInitialization+0x51c>)
 801338e:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8013390:	4b5e      	ldr	r3, [pc, #376]	@ (801350c <LoRaMacInitialization+0x51c>)
 8013392:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013396:	4a5d      	ldr	r2, [pc, #372]	@ (801350c <LoRaMacInitialization+0x51c>)
 8013398:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801339a:	4b5c      	ldr	r3, [pc, #368]	@ (801350c <LoRaMacInitialization+0x51c>)
 801339c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80133a0:	4a5a      	ldr	r2, [pc, #360]	@ (801350c <LoRaMacInitialization+0x51c>)
 80133a2:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80133a4:	4b59      	ldr	r3, [pc, #356]	@ (801350c <LoRaMacInitialization+0x51c>)
 80133a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80133aa:	4a58      	ldr	r2, [pc, #352]	@ (801350c <LoRaMacInitialization+0x51c>)
 80133ac:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80133ae:	4b57      	ldr	r3, [pc, #348]	@ (801350c <LoRaMacInitialization+0x51c>)
 80133b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80133b4:	4a55      	ldr	r2, [pc, #340]	@ (801350c <LoRaMacInitialization+0x51c>)
 80133b6:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80133b8:	4b54      	ldr	r3, [pc, #336]	@ (801350c <LoRaMacInitialization+0x51c>)
 80133ba:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 80133be:	4b53      	ldr	r3, [pc, #332]	@ (801350c <LoRaMacInitialization+0x51c>)
 80133c0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80133c4:	4b51      	ldr	r3, [pc, #324]	@ (801350c <LoRaMacInitialization+0x51c>)
 80133c6:	2201      	movs	r2, #1
 80133c8:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80133cc:	4a50      	ldr	r2, [pc, #320]	@ (8013510 <LoRaMacInitialization+0x520>)
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 80133d4:	2000      	movs	r0, #0
 80133d6:	f7ff f86b 	bl	80124b0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80133da:	4b4c      	ldr	r3, [pc, #304]	@ (801350c <LoRaMacInitialization+0x51c>)
 80133dc:	2201      	movs	r2, #1
 80133de:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 80133e2:	4a4b      	ldr	r2, [pc, #300]	@ (8013510 <LoRaMacInitialization+0x520>)
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 80133ea:	4b49      	ldr	r3, [pc, #292]	@ (8013510 <LoRaMacInitialization+0x520>)
 80133ec:	2200      	movs	r2, #0
 80133ee:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 80133f2:	4b47      	ldr	r3, [pc, #284]	@ (8013510 <LoRaMacInitialization+0x520>)
 80133f4:	2201      	movs	r2, #1
 80133f6:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80133fa:	4b44      	ldr	r3, [pc, #272]	@ (801350c <LoRaMacInitialization+0x51c>)
 80133fc:	2200      	movs	r2, #0
 80133fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013400:	4b42      	ldr	r3, [pc, #264]	@ (801350c <LoRaMacInitialization+0x51c>)
 8013402:	2200      	movs	r2, #0
 8013404:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8013406:	2300      	movs	r3, #0
 8013408:	9300      	str	r3, [sp, #0]
 801340a:	4b42      	ldr	r3, [pc, #264]	@ (8013514 <LoRaMacInitialization+0x524>)
 801340c:	2200      	movs	r2, #0
 801340e:	f04f 31ff 	mov.w	r1, #4294967295
 8013412:	4841      	ldr	r0, [pc, #260]	@ (8013518 <LoRaMacInitialization+0x528>)
 8013414:	f009 fb98 	bl	801cb48 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013418:	2300      	movs	r3, #0
 801341a:	9300      	str	r3, [sp, #0]
 801341c:	4b3f      	ldr	r3, [pc, #252]	@ (801351c <LoRaMacInitialization+0x52c>)
 801341e:	2200      	movs	r2, #0
 8013420:	f04f 31ff 	mov.w	r1, #4294967295
 8013424:	483e      	ldr	r0, [pc, #248]	@ (8013520 <LoRaMacInitialization+0x530>)
 8013426:	f009 fb8f 	bl	801cb48 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801342a:	2300      	movs	r3, #0
 801342c:	9300      	str	r3, [sp, #0]
 801342e:	4b3d      	ldr	r3, [pc, #244]	@ (8013524 <LoRaMacInitialization+0x534>)
 8013430:	2200      	movs	r2, #0
 8013432:	f04f 31ff 	mov.w	r1, #4294967295
 8013436:	483c      	ldr	r0, [pc, #240]	@ (8013528 <LoRaMacInitialization+0x538>)
 8013438:	f009 fb86 	bl	801cb48 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 801343c:	2300      	movs	r3, #0
 801343e:	9300      	str	r3, [sp, #0]
 8013440:	4b3a      	ldr	r3, [pc, #232]	@ (801352c <LoRaMacInitialization+0x53c>)
 8013442:	2200      	movs	r2, #0
 8013444:	f04f 31ff 	mov.w	r1, #4294967295
 8013448:	4839      	ldr	r0, [pc, #228]	@ (8013530 <LoRaMacInitialization+0x540>)
 801344a:	f009 fb7d 	bl	801cb48 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 801344e:	4c2f      	ldr	r4, [pc, #188]	@ (801350c <LoRaMacInitialization+0x51c>)
 8013450:	463b      	mov	r3, r7
 8013452:	4618      	mov	r0, r3
 8013454:	f009 f9ba 	bl	801c7cc <SysTimeGetMcuTime>
 8013458:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 801345c:	463a      	mov	r2, r7
 801345e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013462:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8013466:	4b33      	ldr	r3, [pc, #204]	@ (8013534 <LoRaMacInitialization+0x544>)
 8013468:	2200      	movs	r2, #0
 801346a:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801346c:	4b28      	ldr	r3, [pc, #160]	@ (8013510 <LoRaMacInitialization+0x520>)
 801346e:	4a32      	ldr	r2, [pc, #200]	@ (8013538 <LoRaMacInitialization+0x548>)
 8013470:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8013474:	4b26      	ldr	r3, [pc, #152]	@ (8013510 <LoRaMacInitialization+0x520>)
 8013476:	4a31      	ldr	r2, [pc, #196]	@ (801353c <LoRaMacInitialization+0x54c>)
 8013478:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801347c:	4b24      	ldr	r3, [pc, #144]	@ (8013510 <LoRaMacInitialization+0x520>)
 801347e:	4a30      	ldr	r2, [pc, #192]	@ (8013540 <LoRaMacInitialization+0x550>)
 8013480:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8013484:	4b22      	ldr	r3, [pc, #136]	@ (8013510 <LoRaMacInitialization+0x520>)
 8013486:	4a2f      	ldr	r2, [pc, #188]	@ (8013544 <LoRaMacInitialization+0x554>)
 8013488:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801348c:	4b20      	ldr	r3, [pc, #128]	@ (8013510 <LoRaMacInitialization+0x520>)
 801348e:	4a2e      	ldr	r2, [pc, #184]	@ (8013548 <LoRaMacInitialization+0x558>)
 8013490:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8013494:	4b2d      	ldr	r3, [pc, #180]	@ (801354c <LoRaMacInitialization+0x55c>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	482d      	ldr	r0, [pc, #180]	@ (8013550 <LoRaMacInitialization+0x560>)
 801349a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 801349c:	482d      	ldr	r0, [pc, #180]	@ (8013554 <LoRaMacInitialization+0x564>)
 801349e:	f7fa f9c1 	bl	800d824 <SecureElementInit>
 80134a2:	4603      	mov	r3, r0
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d001      	beq.n	80134ac <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80134a8:	2311      	movs	r3, #17
 80134aa:	e02b      	b.n	8013504 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80134ac:	4817      	ldr	r0, [pc, #92]	@ (801350c <LoRaMacInitialization+0x51c>)
 80134ae:	f002 fc21 	bl	8015cf4 <LoRaMacCryptoInit>
 80134b2:	4603      	mov	r3, r0
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d001      	beq.n	80134bc <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80134b8:	2311      	movs	r3, #17
 80134ba:	e023      	b.n	8013504 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80134bc:	f001 fd20 	bl	8014f00 <LoRaMacCommandsInit>
 80134c0:	4603      	mov	r3, r0
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d001      	beq.n	80134ca <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80134c6:	2313      	movs	r3, #19
 80134c8:	e01c      	b.n	8013504 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80134ca:	4823      	ldr	r0, [pc, #140]	@ (8013558 <LoRaMacInitialization+0x568>)
 80134cc:	f002 fcb2 	bl	8015e34 <LoRaMacCryptoSetMulticastReference>
 80134d0:	4603      	mov	r3, r0
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d001      	beq.n	80134da <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80134d6:	2311      	movs	r3, #17
 80134d8:	e014      	b.n	8013504 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80134da:	4b1c      	ldr	r3, [pc, #112]	@ (801354c <LoRaMacInitialization+0x55c>)
 80134dc:	695b      	ldr	r3, [r3, #20]
 80134de:	4798      	blx	r3
 80134e0:	4603      	mov	r3, r0
 80134e2:	4618      	mov	r0, r3
 80134e4:	f005 fcc2 	bl	8018e6c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80134e8:	4b18      	ldr	r3, [pc, #96]	@ (801354c <LoRaMacInitialization+0x55c>)
 80134ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80134ec:	4a07      	ldr	r2, [pc, #28]	@ (801350c <LoRaMacInitialization+0x51c>)
 80134ee:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 80134f2:	4610      	mov	r0, r2
 80134f4:	4798      	blx	r3
    Radio.Sleep( );
 80134f6:	4b15      	ldr	r3, [pc, #84]	@ (801354c <LoRaMacInitialization+0x55c>)
 80134f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134fa:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80134fc:	2001      	movs	r0, #1
 80134fe:	f7fd fa67 	bl	80109d0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8013502:	2300      	movs	r3, #0
}
 8013504:	4618      	mov	r0, r3
 8013506:	373c      	adds	r7, #60	@ 0x3c
 8013508:	46bd      	mov	sp, r7
 801350a:	bd90      	pop	{r4, r7, pc}
 801350c:	20000ecc 	.word	0x20000ecc
 8013510:	20000998 	.word	0x20000998
 8013514:	08010f5d 	.word	0x08010f5d
 8013518:	20000d00 	.word	0x20000d00
 801351c:	08010fed 	.word	0x08010fed
 8013520:	20000d18 	.word	0x20000d18
 8013524:	08011065 	.word	0x08011065
 8013528:	20000d30 	.word	0x20000d30
 801352c:	080110e5 	.word	0x080110e5
 8013530:	20000d98 	.word	0x20000d98
 8013534:	20001ad4 	.word	0x20001ad4
 8013538:	0800f9dd 	.word	0x0800f9dd
 801353c:	0800fa39 	.word	0x0800fa39
 8013540:	0800fad9 	.word	0x0800fad9
 8013544:	0800faad 	.word	0x0800faad
 8013548:	0800faf5 	.word	0x0800faf5
 801354c:	08021620 	.word	0x08021620
 8013550:	20000ce4 	.word	0x20000ce4
 8013554:	20001018 	.word	0x20001018
 8013558:	20000fb4 	.word	0x20000fb4

0801355c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801355c:	b580      	push	{r7, lr}
 801355e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013560:	4b04      	ldr	r3, [pc, #16]	@ (8013574 <LoRaMacStart+0x18>)
 8013562:	2200      	movs	r2, #0
 8013564:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 8013568:	f7fc fada 	bl	800fb20 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 801356c:	2300      	movs	r3, #0
}
 801356e:	4618      	mov	r0, r3
 8013570:	bd80      	pop	{r7, pc}
 8013572:	bf00      	nop
 8013574:	20000998 	.word	0x20000998

08013578 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8013578:	b580      	push	{r7, lr}
 801357a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 801357c:	f7fd f9f0 	bl	8010960 <LoRaMacIsBusy>
 8013580:	4603      	mov	r3, r0
 8013582:	f083 0301 	eor.w	r3, r3, #1
 8013586:	b2db      	uxtb	r3, r3
 8013588:	2b00      	cmp	r3, #0
 801358a:	d00d      	beq.n	80135a8 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801358c:	4b0b      	ldr	r3, [pc, #44]	@ (80135bc <LoRaMacStop+0x44>)
 801358e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8013592:	2b02      	cmp	r3, #2
 8013594:	d102      	bne.n	801359c <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8013596:	4b0a      	ldr	r3, [pc, #40]	@ (80135c0 <LoRaMacStop+0x48>)
 8013598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801359a:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 801359c:	4b09      	ldr	r3, [pc, #36]	@ (80135c4 <LoRaMacStop+0x4c>)
 801359e:	2201      	movs	r2, #1
 80135a0:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80135a4:	2300      	movs	r3, #0
 80135a6:	e007      	b.n	80135b8 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80135a8:	4b06      	ldr	r3, [pc, #24]	@ (80135c4 <LoRaMacStop+0x4c>)
 80135aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80135ae:	2b01      	cmp	r3, #1
 80135b0:	d101      	bne.n	80135b6 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80135b2:	2300      	movs	r3, #0
 80135b4:	e000      	b.n	80135b8 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80135b6:	2301      	movs	r3, #1
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	20000ecc 	.word	0x20000ecc
 80135c0:	08021620 	.word	0x08021620
 80135c4:	20000998 	.word	0x20000998

080135c8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80135cc:	4812      	ldr	r0, [pc, #72]	@ (8013618 <LoRaMacHalt+0x50>)
 80135ce:	f009 fb5f 	bl	801cc90 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80135d2:	4812      	ldr	r0, [pc, #72]	@ (801361c <LoRaMacHalt+0x54>)
 80135d4:	f009 fb5c 	bl	801cc90 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80135d8:	4811      	ldr	r0, [pc, #68]	@ (8013620 <LoRaMacHalt+0x58>)
 80135da:	f009 fb59 	bl	801cc90 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80135de:	4811      	ldr	r0, [pc, #68]	@ (8013624 <LoRaMacHalt+0x5c>)
 80135e0:	f009 fb56 	bl	801cc90 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80135e4:	f001 faf0 	bl	8014bc8 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80135e8:	4b0f      	ldr	r3, [pc, #60]	@ (8013628 <LoRaMacHalt+0x60>)
 80135ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135ec:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80135ee:	4b0f      	ldr	r3, [pc, #60]	@ (801362c <LoRaMacHalt+0x64>)
 80135f0:	2200      	movs	r2, #0
 80135f2:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 80135f6:	480e      	ldr	r0, [pc, #56]	@ (8013630 <LoRaMacHalt+0x68>)
 80135f8:	f7fd fb8c 	bl	8010d14 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80135fc:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8013600:	490b      	ldr	r1, [pc, #44]	@ (8013630 <LoRaMacHalt+0x68>)
 8013602:	480c      	ldr	r0, [pc, #48]	@ (8013634 <LoRaMacHalt+0x6c>)
 8013604:	f005 fc57 	bl	8018eb6 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8013608:	4b08      	ldr	r3, [pc, #32]	@ (801362c <LoRaMacHalt+0x64>)
 801360a:	2201      	movs	r2, #1
 801360c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8013610:	2300      	movs	r3, #0
}
 8013612:	4618      	mov	r0, r3
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	20000d00 	.word	0x20000d00
 801361c:	20000d18 	.word	0x20000d18
 8013620:	20000d30 	.word	0x20000d30
 8013624:	20000d98 	.word	0x20000d98
 8013628:	08021620 	.word	0x08021620
 801362c:	20000998 	.word	0x20000998
 8013630:	20000ecc 	.word	0x20000ecc
 8013634:	20001488 	.word	0x20001488

08013638 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013638:	b590      	push	{r4, r7, lr}
 801363a:	b08d      	sub	sp, #52	@ 0x34
 801363c:	af02      	add	r7, sp, #8
 801363e:	4603      	mov	r3, r0
 8013640:	6039      	str	r1, [r7, #0]
 8013642:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013644:	4b42      	ldr	r3, [pc, #264]	@ (8013750 <LoRaMacQueryTxPossible+0x118>)
 8013646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013648:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801364a:	4b41      	ldr	r3, [pc, #260]	@ (8013750 <LoRaMacQueryTxPossible+0x118>)
 801364c:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8013650:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013652:	4b3f      	ldr	r3, [pc, #252]	@ (8013750 <LoRaMacQueryTxPossible+0x118>)
 8013654:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 8013658:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 801365a:	4b3e      	ldr	r3, [pc, #248]	@ (8013754 <LoRaMacQueryTxPossible+0x11c>)
 801365c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8013660:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8013662:	2300      	movs	r3, #0
 8013664:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d101      	bne.n	8013670 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801366c:	2303      	movs	r3, #3
 801366e:	e06b      	b.n	8013748 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8013670:	2300      	movs	r3, #0
 8013672:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8013674:	4b36      	ldr	r3, [pc, #216]	@ (8013750 <LoRaMacQueryTxPossible+0x118>)
 8013676:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801367a:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801367c:	4b34      	ldr	r3, [pc, #208]	@ (8013750 <LoRaMacQueryTxPossible+0x118>)
 801367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013680:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8013682:	4b33      	ldr	r3, [pc, #204]	@ (8013750 <LoRaMacQueryTxPossible+0x118>)
 8013684:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8013688:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801368a:	4b31      	ldr	r3, [pc, #196]	@ (8013750 <LoRaMacQueryTxPossible+0x118>)
 801368c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8013690:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013692:	4b2f      	ldr	r3, [pc, #188]	@ (8013750 <LoRaMacQueryTxPossible+0x118>)
 8013694:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8013698:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801369c:	4b2c      	ldr	r3, [pc, #176]	@ (8013750 <LoRaMacQueryTxPossible+0x118>)
 801369e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80136a2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80136a6:	4b2b      	ldr	r3, [pc, #172]	@ (8013754 <LoRaMacQueryTxPossible+0x11c>)
 80136a8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80136ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80136b0:	4b27      	ldr	r3, [pc, #156]	@ (8013750 <LoRaMacQueryTxPossible+0x118>)
 80136b2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80136b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80136ba:	4b25      	ldr	r3, [pc, #148]	@ (8013750 <LoRaMacQueryTxPossible+0x118>)
 80136bc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80136c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80136c4:	f107 040d 	add.w	r4, r7, #13
 80136c8:	f107 020e 	add.w	r2, r7, #14
 80136cc:	f107 010f 	add.w	r1, r7, #15
 80136d0:	f107 0014 	add.w	r0, r7, #20
 80136d4:	f107 0310 	add.w	r3, r7, #16
 80136d8:	9300      	str	r3, [sp, #0]
 80136da:	4623      	mov	r3, r4
 80136dc:	f001 f93e 	bl	801495c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80136e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7fd fe43 	bl	8011370 <GetMaxAppPayloadWithoutFOptsLength>
 80136ea:	4603      	mov	r3, r0
 80136ec:	461a      	mov	r2, r3
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80136f2:	f107 0308 	add.w	r3, r7, #8
 80136f6:	4618      	mov	r0, r3
 80136f8:	f001 fd08 	bl	801510c <LoRaMacCommandsGetSizeSerializedCmds>
 80136fc:	4603      	mov	r3, r0
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d001      	beq.n	8013706 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013702:	2313      	movs	r3, #19
 8013704:	e020      	b.n	8013748 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	2b0f      	cmp	r3, #15
 801370a:	d819      	bhi.n	8013740 <LoRaMacQueryTxPossible+0x108>
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	785b      	ldrb	r3, [r3, #1]
 8013710:	461a      	mov	r2, r3
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	429a      	cmp	r2, r3
 8013716:	d313      	bcc.n	8013740 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	785a      	ldrb	r2, [r3, #1]
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	b2db      	uxtb	r3, r3
 8013720:	1ad3      	subs	r3, r2, r3
 8013722:	b2da      	uxtb	r2, r3
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	785b      	ldrb	r3, [r3, #1]
 801372c:	4619      	mov	r1, r3
 801372e:	79fa      	ldrb	r2, [r7, #7]
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	4413      	add	r3, r2
 8013734:	4299      	cmp	r1, r3
 8013736:	d301      	bcc.n	801373c <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8013738:	2300      	movs	r3, #0
 801373a:	e005      	b.n	8013748 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801373c:	2308      	movs	r3, #8
 801373e:	e003      	b.n	8013748 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	2200      	movs	r2, #0
 8013744:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8013746:	2308      	movs	r3, #8
    }
}
 8013748:	4618      	mov	r0, r3
 801374a:	372c      	adds	r7, #44	@ 0x2c
 801374c:	46bd      	mov	sp, r7
 801374e:	bd90      	pop	{r4, r7, pc}
 8013750:	20000ecc 	.word	0x20000ecc
 8013754:	20000998 	.word	0x20000998

08013758 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013758:	b590      	push	{r4, r7, lr}
 801375a:	b087      	sub	sp, #28
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013760:	2300      	movs	r3, #0
 8013762:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d101      	bne.n	801376e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801376a:	2303      	movs	r3, #3
 801376c:	e1c4      	b.n	8013af8 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	781b      	ldrb	r3, [r3, #0]
 8013772:	2b41      	cmp	r3, #65	@ 0x41
 8013774:	f200 81b9 	bhi.w	8013aea <LoRaMacMibGetRequestConfirm+0x392>
 8013778:	a201      	add	r2, pc, #4	@ (adr r2, 8013780 <LoRaMacMibGetRequestConfirm+0x28>)
 801377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801377e:	bf00      	nop
 8013780:	08013889 	.word	0x08013889
 8013784:	08013895 	.word	0x08013895
 8013788:	080138a1 	.word	0x080138a1
 801378c:	080138ad 	.word	0x080138ad
 8013790:	080138b9 	.word	0x080138b9
 8013794:	080138c5 	.word	0x080138c5
 8013798:	080138d1 	.word	0x080138d1
 801379c:	08013aeb 	.word	0x08013aeb
 80137a0:	08013aeb 	.word	0x08013aeb
 80137a4:	08013aeb 	.word	0x08013aeb
 80137a8:	08013aeb 	.word	0x08013aeb
 80137ac:	08013aeb 	.word	0x08013aeb
 80137b0:	08013aeb 	.word	0x08013aeb
 80137b4:	08013aeb 	.word	0x08013aeb
 80137b8:	08013aeb 	.word	0x08013aeb
 80137bc:	080138e5 	.word	0x080138e5
 80137c0:	080138f1 	.word	0x080138f1
 80137c4:	080138fd 	.word	0x080138fd
 80137c8:	0801391f 	.word	0x0801391f
 80137cc:	08013931 	.word	0x08013931
 80137d0:	08013943 	.word	0x08013943
 80137d4:	08013955 	.word	0x08013955
 80137d8:	08013989 	.word	0x08013989
 80137dc:	08013967 	.word	0x08013967
 80137e0:	080139ab 	.word	0x080139ab
 80137e4:	080139b7 	.word	0x080139b7
 80137e8:	080139c1 	.word	0x080139c1
 80137ec:	080139cb 	.word	0x080139cb
 80137f0:	080139d5 	.word	0x080139d5
 80137f4:	080139df 	.word	0x080139df
 80137f8:	080139e9 	.word	0x080139e9
 80137fc:	08013a15 	.word	0x08013a15
 8013800:	08013a21 	.word	0x08013a21
 8013804:	08013a39 	.word	0x08013a39
 8013808:	08013a2d 	.word	0x08013a2d
 801380c:	08013a45 	.word	0x08013a45
 8013810:	08013a4f 	.word	0x08013a4f
 8013814:	08013a5b 	.word	0x08013a5b
 8013818:	08013a77 	.word	0x08013a77
 801381c:	08013a67 	.word	0x08013a67
 8013820:	08013a6f 	.word	0x08013a6f
 8013824:	08013aeb 	.word	0x08013aeb
 8013828:	08013a83 	.word	0x08013a83
 801382c:	08013aeb 	.word	0x08013aeb
 8013830:	08013aeb 	.word	0x08013aeb
 8013834:	08013aeb 	.word	0x08013aeb
 8013838:	08013aeb 	.word	0x08013aeb
 801383c:	08013aeb 	.word	0x08013aeb
 8013840:	08013aeb 	.word	0x08013aeb
 8013844:	08013aeb 	.word	0x08013aeb
 8013848:	08013aeb 	.word	0x08013aeb
 801384c:	08013aeb 	.word	0x08013aeb
 8013850:	08013aeb 	.word	0x08013aeb
 8013854:	08013aeb 	.word	0x08013aeb
 8013858:	08013aeb 	.word	0x08013aeb
 801385c:	08013aeb 	.word	0x08013aeb
 8013860:	08013aeb 	.word	0x08013aeb
 8013864:	08013aeb 	.word	0x08013aeb
 8013868:	08013a97 	.word	0x08013a97
 801386c:	08013aa3 	.word	0x08013aa3
 8013870:	08013aaf 	.word	0x08013aaf
 8013874:	08013abb 	.word	0x08013abb
 8013878:	08013ac7 	.word	0x08013ac7
 801387c:	08013ad3 	.word	0x08013ad3
 8013880:	08013adf 	.word	0x08013adf
 8013884:	08013ae5 	.word	0x08013ae5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8013888:	4b9d      	ldr	r3, [pc, #628]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801388a:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	711a      	strb	r2, [r3, #4]
            break;
 8013892:	e130      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013894:	4b9a      	ldr	r3, [pc, #616]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013896:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	711a      	strb	r2, [r3, #4]
            break;
 801389e:	e12a      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	685b      	ldr	r3, [r3, #4]
 80138a4:	4618      	mov	r0, r3
 80138a6:	f7fa fa7b 	bl	800dda0 <SecureElementGetDevEui>
            break;
 80138aa:	e124      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	685b      	ldr	r3, [r3, #4]
 80138b0:	4618      	mov	r0, r3
 80138b2:	f7fa faa5 	bl	800de00 <SecureElementGetJoinEui>
            break;
 80138b6:	e11e      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80138b8:	4b91      	ldr	r3, [pc, #580]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80138ba:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	711a      	strb	r2, [r3, #4]
            break;
 80138c2:	e118      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80138c4:	4b8e      	ldr	r3, [pc, #568]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80138c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	605a      	str	r2, [r3, #4]
            break;
 80138ce:	e112      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 80138d0:	4b8b      	ldr	r3, [pc, #556]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80138d2:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	3304      	adds	r3, #4
 80138da:	4619      	mov	r1, r3
 80138dc:	4610      	mov	r0, r2
 80138de:	f7fa fac1 	bl	800de64 <SecureElementGetDevAddr>
            break;
 80138e2:	e108      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80138e4:	4b86      	ldr	r3, [pc, #536]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80138e6:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	711a      	strb	r2, [r3, #4]
            break;
 80138ee:	e102      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80138f0:	4b83      	ldr	r3, [pc, #524]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80138f2:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	711a      	strb	r2, [r3, #4]
            break;
 80138fa:	e0fc      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80138fc:	231c      	movs	r3, #28
 80138fe:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013900:	4b7f      	ldr	r3, [pc, #508]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013902:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013906:	f107 0210 	add.w	r2, r7, #16
 801390a:	4611      	mov	r1, r2
 801390c:	4618      	mov	r0, r3
 801390e:	f003 f8a7 	bl	8016a60 <RegionGetPhyParam>
 8013912:	4603      	mov	r3, r0
 8013914:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8013916:	68fa      	ldr	r2, [r7, #12]
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	605a      	str	r2, [r3, #4]
            break;
 801391c:	e0eb      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	4a77      	ldr	r2, [pc, #476]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013922:	3304      	adds	r3, #4
 8013924:	326c      	adds	r2, #108	@ 0x6c
 8013926:	e892 0003 	ldmia.w	r2, {r0, r1}
 801392a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801392e:	e0e2      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	4a73      	ldr	r2, [pc, #460]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013934:	3304      	adds	r3, #4
 8013936:	32b4      	adds	r2, #180	@ 0xb4
 8013938:	e892 0003 	ldmia.w	r2, {r0, r1}
 801393c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013940:	e0d9      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	4a6e      	ldr	r2, [pc, #440]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013946:	3304      	adds	r3, #4
 8013948:	3274      	adds	r2, #116	@ 0x74
 801394a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801394e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013952:	e0d0      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	4a6a      	ldr	r2, [pc, #424]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013958:	3304      	adds	r3, #4
 801395a:	32bc      	adds	r2, #188	@ 0xbc
 801395c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013960:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013964:	e0c7      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8013966:	231a      	movs	r3, #26
 8013968:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801396a:	4b65      	ldr	r3, [pc, #404]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801396c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013970:	f107 0210 	add.w	r2, r7, #16
 8013974:	4611      	mov	r1, r2
 8013976:	4618      	mov	r0, r3
 8013978:	f003 f872 	bl	8016a60 <RegionGetPhyParam>
 801397c:	4603      	mov	r3, r0
 801397e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8013980:	68fa      	ldr	r2, [r7, #12]
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	605a      	str	r2, [r3, #4]
            break;
 8013986:	e0b6      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013988:	2319      	movs	r3, #25
 801398a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801398c:	4b5c      	ldr	r3, [pc, #368]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801398e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013992:	f107 0210 	add.w	r2, r7, #16
 8013996:	4611      	mov	r1, r2
 8013998:	4618      	mov	r0, r3
 801399a:	f003 f861 	bl	8016a60 <RegionGetPhyParam>
 801399e:	4603      	mov	r3, r0
 80139a0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80139a2:	68fa      	ldr	r2, [r7, #12]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	605a      	str	r2, [r3, #4]
            break;
 80139a8:	e0a5      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80139aa:	4b55      	ldr	r3, [pc, #340]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80139ac:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	711a      	strb	r2, [r3, #4]
            break;
 80139b4:	e09f      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80139b6:	4b52      	ldr	r3, [pc, #328]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80139b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	605a      	str	r2, [r3, #4]
            break;
 80139be:	e09a      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80139c0:	4b4f      	ldr	r3, [pc, #316]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80139c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	605a      	str	r2, [r3, #4]
            break;
 80139c8:	e095      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80139ca:	4b4d      	ldr	r3, [pc, #308]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80139cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	605a      	str	r2, [r3, #4]
            break;
 80139d2:	e090      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80139d4:	4b4a      	ldr	r3, [pc, #296]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80139d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	605a      	str	r2, [r3, #4]
            break;
 80139dc:	e08b      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80139de:	4b48      	ldr	r3, [pc, #288]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80139e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	605a      	str	r2, [r3, #4]
            break;
 80139e6:	e086      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80139e8:	2302      	movs	r3, #2
 80139ea:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80139ec:	4b44      	ldr	r3, [pc, #272]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80139ee:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80139f2:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80139f4:	4b42      	ldr	r3, [pc, #264]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80139f6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80139fa:	f107 0210 	add.w	r2, r7, #16
 80139fe:	4611      	mov	r1, r2
 8013a00:	4618      	mov	r0, r3
 8013a02:	f003 f82d 	bl	8016a60 <RegionGetPhyParam>
 8013a06:	4603      	mov	r3, r0
 8013a08:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	b25a      	sxtb	r2, r3
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	711a      	strb	r2, [r3, #4]
            break;
 8013a12:	e070      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013a14:	4b3a      	ldr	r3, [pc, #232]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013a16:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	711a      	strb	r2, [r3, #4]
            break;
 8013a1e:	e06a      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a20:	4b37      	ldr	r3, [pc, #220]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013a22:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	711a      	strb	r2, [r3, #4]
            break;
 8013a2a:	e064      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013a2c:	4b34      	ldr	r3, [pc, #208]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013a2e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	711a      	strb	r2, [r3, #4]
            break;
 8013a36:	e05e      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013a38:	4b31      	ldr	r3, [pc, #196]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013a3a:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	711a      	strb	r2, [r3, #4]
            break;
 8013a42:	e058      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8013a44:	4b2e      	ldr	r3, [pc, #184]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013a46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	605a      	str	r2, [r3, #4]
            break;
 8013a4c:	e053      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8013a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013a50:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	711a      	strb	r2, [r3, #4]
            break;
 8013a58:	e04d      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013a5a:	4b29      	ldr	r3, [pc, #164]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013a5c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	605a      	str	r2, [r3, #4]
            break;
 8013a64:	e047      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	4a25      	ldr	r2, [pc, #148]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013a6a:	605a      	str	r2, [r3, #4]
            break;
 8013a6c:	e043      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	4a24      	ldr	r2, [pc, #144]	@ (8013b04 <LoRaMacMibGetRequestConfirm+0x3ac>)
 8013a72:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8013a74:	e03f      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013a76:	4b22      	ldr	r3, [pc, #136]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013a78:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	605a      	str	r2, [r3, #4]
            break;
 8013a80:	e039      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	4a1e      	ldr	r2, [pc, #120]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013a86:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8013a8a:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8013a8c:	687c      	ldr	r4, [r7, #4]
 8013a8e:	f003 f95d 	bl	8016d4c <RegionGetVersion>
 8013a92:	60a0      	str	r0, [r4, #8]
            break;
 8013a94:	e02f      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8013a96:	4b1a      	ldr	r3, [pc, #104]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013a98:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	605a      	str	r2, [r3, #4]
            break;
 8013aa0:	e029      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8013aa2:	4b17      	ldr	r3, [pc, #92]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013aa4:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	711a      	strb	r2, [r3, #4]
            break;
 8013aac:	e023      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8013aae:	4b14      	ldr	r3, [pc, #80]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013ab0:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	809a      	strh	r2, [r3, #4]
            break;
 8013ab8:	e01d      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8013aba:	4b11      	ldr	r3, [pc, #68]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013abc:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	809a      	strh	r2, [r3, #4]
            break;
 8013ac4:	e017      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8013ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013ac8:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	809a      	strh	r2, [r3, #4]
            break;
 8013ad0:	e011      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8013b00 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013ad4:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	809a      	strh	r2, [r3, #4]
            break;
 8013adc:	e00b      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013ade:	2318      	movs	r3, #24
 8013ae0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013ae2:	e008      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013ae4:	2318      	movs	r3, #24
 8013ae6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013ae8:	e005      	b.n	8013af6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f001 f883 	bl	8014bf6 <LoRaMacClassBMibGetRequestConfirm>
 8013af0:	4603      	mov	r3, r0
 8013af2:	75fb      	strb	r3, [r7, #23]
            break;
 8013af4:	bf00      	nop
        }
    }
    return status;
 8013af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	371c      	adds	r7, #28
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd90      	pop	{r4, r7, pc}
 8013b00:	20000ecc 	.word	0x20000ecc
 8013b04:	20001488 	.word	0x20001488

08013b08 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b086      	sub	sp, #24
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013b10:	2300      	movs	r3, #0
 8013b12:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d101      	bne.n	8013b1e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013b1a:	2303      	movs	r3, #3
 8013b1c:	e39e      	b.n	801425c <LoRaMacMibSetRequestConfirm+0x754>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013b1e:	4bbd      	ldr	r3, [pc, #756]	@ (8013e14 <LoRaMacMibSetRequestConfirm+0x30c>)
 8013b20:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013b24:	f003 0302 	and.w	r3, r3, #2
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d001      	beq.n	8013b30 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	e395      	b.n	801425c <LoRaMacMibSetRequestConfirm+0x754>
    }

    switch( mibSet->Type )
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	781b      	ldrb	r3, [r3, #0]
 8013b34:	2b41      	cmp	r3, #65	@ 0x41
 8013b36:	f200 8365 	bhi.w	8014204 <LoRaMacMibSetRequestConfirm+0x6fc>
 8013b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8013b40 <LoRaMacMibSetRequestConfirm+0x38>)
 8013b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b40:	08013c49 	.word	0x08013c49
 8013b44:	08013c59 	.word	0x08013c59
 8013b48:	08013c73 	.word	0x08013c73
 8013b4c:	08013c8b 	.word	0x08013c8b
 8013b50:	08013ca3 	.word	0x08013ca3
 8013b54:	08013caf 	.word	0x08013caf
 8013b58:	08013cbb 	.word	0x08013cbb
 8013b5c:	08013ce5 	.word	0x08013ce5
 8013b60:	08013d0b 	.word	0x08013d0b
 8013b64:	08013d31 	.word	0x08013d31
 8013b68:	08013d57 	.word	0x08013d57
 8013b6c:	08013d7d 	.word	0x08013d7d
 8013b70:	08013da3 	.word	0x08013da3
 8013b74:	08013dc9 	.word	0x08013dc9
 8013b78:	08013def 	.word	0x08013def
 8013b7c:	08013e1d 	.word	0x08013e1d
 8013b80:	08013e3d 	.word	0x08013e3d
 8013b84:	08014205 	.word	0x08014205
 8013b88:	08013e49 	.word	0x08013e49
 8013b8c:	08013eb9 	.word	0x08013eb9
 8013b90:	08013ef9 	.word	0x08013ef9
 8013b94:	08013f5b 	.word	0x08013f5b
 8013b98:	08013fcb 	.word	0x08013fcb
 8013b9c:	08013f9b 	.word	0x08013f9b
 8013ba0:	08013ffb 	.word	0x08013ffb
 8013ba4:	0801401d 	.word	0x0801401d
 8013ba8:	08014027 	.word	0x08014027
 8013bac:	08014031 	.word	0x08014031
 8013bb0:	0801403b 	.word	0x0801403b
 8013bb4:	08014045 	.word	0x08014045
 8013bb8:	08014205 	.word	0x08014205
 8013bbc:	0801404f 	.word	0x0801404f
 8013bc0:	08014081 	.word	0x08014081
 8013bc4:	080140f5 	.word	0x080140f5
 8013bc8:	080140bb 	.word	0x080140bb
 8013bcc:	08014127 	.word	0x08014127
 8013bd0:	0801414d 	.word	0x0801414d
 8013bd4:	08014165 	.word	0x08014165
 8013bd8:	08014171 	.word	0x08014171
 8013bdc:	0801417d 	.word	0x0801417d
 8013be0:	08014205 	.word	0x08014205
 8013be4:	08014187 	.word	0x08014187
 8013be8:	08014205 	.word	0x08014205
 8013bec:	08014205 	.word	0x08014205
 8013bf0:	08014205 	.word	0x08014205
 8013bf4:	08014205 	.word	0x08014205
 8013bf8:	08014205 	.word	0x08014205
 8013bfc:	08014205 	.word	0x08014205
 8013c00:	08014205 	.word	0x08014205
 8013c04:	08014205 	.word	0x08014205
 8013c08:	08014205 	.word	0x08014205
 8013c0c:	08014205 	.word	0x08014205
 8013c10:	08014205 	.word	0x08014205
 8013c14:	08014205 	.word	0x08014205
 8013c18:	08014205 	.word	0x08014205
 8013c1c:	08014205 	.word	0x08014205
 8013c20:	08014205 	.word	0x08014205
 8013c24:	08014205 	.word	0x08014205
 8013c28:	080141b1 	.word	0x080141b1
 8013c2c:	080141bd 	.word	0x080141bd
 8013c30:	080141c9 	.word	0x080141c9
 8013c34:	080141d5 	.word	0x080141d5
 8013c38:	080141e1 	.word	0x080141e1
 8013c3c:	080141ed 	.word	0x080141ed
 8013c40:	080141f9 	.word	0x080141f9
 8013c44:	080141ff 	.word	0x080141ff
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	791b      	ldrb	r3, [r3, #4]
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7fd faa5 	bl	801119c <SwitchClass>
 8013c52:	4603      	mov	r3, r0
 8013c54:	75fb      	strb	r3, [r7, #23]
            break;
 8013c56:	e2f6      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	791b      	ldrb	r3, [r3, #4]
 8013c5c:	2b02      	cmp	r3, #2
 8013c5e:	d005      	beq.n	8013c6c <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	791a      	ldrb	r2, [r3, #4]
 8013c64:	4b6c      	ldr	r3, [pc, #432]	@ (8013e18 <LoRaMacMibSetRequestConfirm+0x310>)
 8013c66:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013c6a:	e2ec      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c6c:	2303      	movs	r3, #3
 8013c6e:	75fb      	strb	r3, [r7, #23]
            break;
 8013c70:	e2e9      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	685b      	ldr	r3, [r3, #4]
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7fa f87a 	bl	800dd70 <SecureElementSetDevEui>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	f000 82c6 	beq.w	8014210 <LoRaMacMibSetRequestConfirm+0x708>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c84:	2303      	movs	r3, #3
 8013c86:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013c88:	e2c2      	b.n	8014210 <LoRaMacMibSetRequestConfirm+0x708>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7fa f89e 	bl	800ddd0 <SecureElementSetJoinEui>
 8013c94:	4603      	mov	r3, r0
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	f000 82bc 	beq.w	8014214 <LoRaMacMibSetRequestConfirm+0x70c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c9c:	2303      	movs	r3, #3
 8013c9e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013ca0:	e2b8      	b.n	8014214 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	791a      	ldrb	r2, [r3, #4]
 8013ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8013e18 <LoRaMacMibSetRequestConfirm+0x310>)
 8013ca8:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8013cac:	e2cb      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	4a59      	ldr	r2, [pc, #356]	@ (8013e18 <LoRaMacMibSetRequestConfirm+0x310>)
 8013cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8013cb8:	e2c5      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8013cba:	4b57      	ldr	r3, [pc, #348]	@ (8013e18 <LoRaMacMibSetRequestConfirm+0x310>)
 8013cbc:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	4610      	mov	r0, r2
 8013cc8:	f7fa f8b2 	bl	800de30 <SecureElementSetDevAddr>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d002      	beq.n	8013cd8 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013cd2:	2303      	movs	r3, #3
 8013cd4:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8013cd6:	e2b6      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	4a4e      	ldr	r2, [pc, #312]	@ (8013e18 <LoRaMacMibSetRequestConfirm+0x310>)
 8013cde:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 8013ce2:	e2b0      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d00b      	beq.n	8013d04 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	685b      	ldr	r3, [r3, #4]
 8013cf0:	4619      	mov	r1, r3
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	f002 f8c8 	bl	8015e88 <LoRaMacCryptoSetKey>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	f000 828c 	beq.w	8014218 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013d00:	2311      	movs	r3, #17
 8013d02:	e2ab      	b.n	801425c <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d04:	2303      	movs	r3, #3
 8013d06:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013d08:	e286      	b.n	8014218 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	685b      	ldr	r3, [r3, #4]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d00b      	beq.n	8013d2a <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	4619      	mov	r1, r3
 8013d18:	2001      	movs	r0, #1
 8013d1a:	f002 f8b5 	bl	8015e88 <LoRaMacCryptoSetKey>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	f000 827b 	beq.w	801421c <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013d26:	2311      	movs	r3, #17
 8013d28:	e298      	b.n	801425c <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d2a:	2303      	movs	r3, #3
 8013d2c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013d2e:	e275      	b.n	801421c <LoRaMacMibSetRequestConfirm+0x714>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	685b      	ldr	r3, [r3, #4]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d00b      	beq.n	8013d50 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	685b      	ldr	r3, [r3, #4]
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	2008      	movs	r0, #8
 8013d40:	f002 f8a2 	bl	8015e88 <LoRaMacCryptoSetKey>
 8013d44:	4603      	mov	r3, r0
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	f000 826a 	beq.w	8014220 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013d4c:	2311      	movs	r3, #17
 8013d4e:	e285      	b.n	801425c <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d50:	2303      	movs	r3, #3
 8013d52:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013d54:	e264      	b.n	8014220 <LoRaMacMibSetRequestConfirm+0x718>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	685b      	ldr	r3, [r3, #4]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d00b      	beq.n	8013d76 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	4619      	mov	r1, r3
 8013d64:	2009      	movs	r0, #9
 8013d66:	f002 f88f 	bl	8015e88 <LoRaMacCryptoSetKey>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	f000 8259 	beq.w	8014224 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013d72:	2311      	movs	r3, #17
 8013d74:	e272      	b.n	801425c <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d76:	2303      	movs	r3, #3
 8013d78:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013d7a:	e253      	b.n	8014224 <LoRaMacMibSetRequestConfirm+0x71c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d00b      	beq.n	8013d9c <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	685b      	ldr	r3, [r3, #4]
 8013d88:	4619      	mov	r1, r3
 8013d8a:	200c      	movs	r0, #12
 8013d8c:	f002 f87c 	bl	8015e88 <LoRaMacCryptoSetKey>
 8013d90:	4603      	mov	r3, r0
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	f000 8248 	beq.w	8014228 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013d98:	2311      	movs	r3, #17
 8013d9a:	e25f      	b.n	801425c <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d9c:	2303      	movs	r3, #3
 8013d9e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013da0:	e242      	b.n	8014228 <LoRaMacMibSetRequestConfirm+0x720>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	685b      	ldr	r3, [r3, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d00b      	beq.n	8013dc2 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	685b      	ldr	r3, [r3, #4]
 8013dae:	4619      	mov	r1, r3
 8013db0:	200d      	movs	r0, #13
 8013db2:	f002 f869 	bl	8015e88 <LoRaMacCryptoSetKey>
 8013db6:	4603      	mov	r3, r0
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	f000 8237 	beq.w	801422c <LoRaMacMibSetRequestConfirm+0x724>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013dbe:	2311      	movs	r3, #17
 8013dc0:	e24c      	b.n	801425c <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013dc2:	2303      	movs	r3, #3
 8013dc4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013dc6:	e231      	b.n	801422c <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	685b      	ldr	r3, [r3, #4]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d00b      	beq.n	8013de8 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	685b      	ldr	r3, [r3, #4]
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	200e      	movs	r0, #14
 8013dd8:	f002 f856 	bl	8015e88 <LoRaMacCryptoSetKey>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	f000 8226 	beq.w	8014230 <LoRaMacMibSetRequestConfirm+0x728>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013de4:	2311      	movs	r3, #17
 8013de6:	e239      	b.n	801425c <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013de8:	2303      	movs	r3, #3
 8013dea:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013dec:	e220      	b.n	8014230 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	685b      	ldr	r3, [r3, #4]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d00b      	beq.n	8013e0e <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	200f      	movs	r0, #15
 8013dfe:	f002 f843 	bl	8015e88 <LoRaMacCryptoSetKey>
 8013e02:	4603      	mov	r3, r0
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	f000 8215 	beq.w	8014234 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013e0a:	2311      	movs	r3, #17
 8013e0c:	e226      	b.n	801425c <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e0e:	2303      	movs	r3, #3
 8013e10:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013e12:	e20f      	b.n	8014234 <LoRaMacMibSetRequestConfirm+0x72c>
 8013e14:	20000998 	.word	0x20000998
 8013e18:	20000ecc 	.word	0x20000ecc
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	791a      	ldrb	r2, [r3, #4]
 8013e20:	4bb2      	ldr	r3, [pc, #712]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013e22:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013e26:	4bb2      	ldr	r3, [pc, #712]	@ (80140f0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013e2a:	4ab0      	ldr	r2, [pc, #704]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013e2c:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8013e30:	4610      	mov	r0, r2
 8013e32:	4798      	blx	r3
            Radio.Sleep( );
 8013e34:	4bae      	ldr	r3, [pc, #696]	@ (80140f0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e38:	4798      	blx	r3
            break;
 8013e3a:	e204      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	791a      	ldrb	r2, [r3, #4]
 8013e40:	4baa      	ldr	r3, [pc, #680]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013e42:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 8013e46:	e1fe      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	7a1b      	ldrb	r3, [r3, #8]
 8013e4c:	b25b      	sxtb	r3, r3
 8013e4e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013e50:	4ba6      	ldr	r3, [pc, #664]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013e52:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013e56:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8013e58:	4ba4      	ldr	r3, [pc, #656]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013e5a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013e5e:	f107 0108 	add.w	r1, r7, #8
 8013e62:	2207      	movs	r2, #7
 8013e64:	4618      	mov	r0, r3
 8013e66:	f002 fe36 	bl	8016ad6 <RegionVerify>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	f083 0301 	eor.w	r3, r3, #1
 8013e70:	b2db      	uxtb	r3, r3
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d002      	beq.n	8013e7c <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e76:	2303      	movs	r3, #3
 8013e78:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8013e7a:	e1e4      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	685b      	ldr	r3, [r3, #4]
 8013e80:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8013e82:	4b9a      	ldr	r3, [pc, #616]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013e84:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013e88:	f107 0108 	add.w	r1, r7, #8
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f002 fe21 	bl	8016ad6 <RegionVerify>
 8013e94:	4603      	mov	r3, r0
 8013e96:	f083 0301 	eor.w	r3, r3, #1
 8013e9a:	b2db      	uxtb	r3, r3
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d002      	beq.n	8013ea6 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ea0:	2303      	movs	r3, #3
 8013ea2:	75fb      	strb	r3, [r7, #23]
            break;
 8013ea4:	e1cf      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013ea6:	4b91      	ldr	r3, [pc, #580]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013ea8:	687a      	ldr	r2, [r7, #4]
 8013eaa:	336c      	adds	r3, #108	@ 0x6c
 8013eac:	3204      	adds	r2, #4
 8013eae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013eb2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013eb6:	e1c6      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	7a1b      	ldrb	r3, [r3, #8]
 8013ebc:	b25b      	sxtb	r3, r3
 8013ebe:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013ec0:	4b8a      	ldr	r3, [pc, #552]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013ec2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013ec6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013ec8:	4b88      	ldr	r3, [pc, #544]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013eca:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013ece:	f107 0108 	add.w	r1, r7, #8
 8013ed2:	2207      	movs	r2, #7
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f002 fdfe 	bl	8016ad6 <RegionVerify>
 8013eda:	4603      	mov	r3, r0
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d008      	beq.n	8013ef2 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013ee0:	4b82      	ldr	r3, [pc, #520]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013ee2:	687a      	ldr	r2, [r7, #4]
 8013ee4:	33b4      	adds	r3, #180	@ 0xb4
 8013ee6:	3204      	adds	r2, #4
 8013ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013eec:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013ef0:	e1a9      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ef2:	2303      	movs	r3, #3
 8013ef4:	75fb      	strb	r3, [r7, #23]
            break;
 8013ef6:	e1a6      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	7a1b      	ldrb	r3, [r3, #8]
 8013efc:	b25b      	sxtb	r3, r3
 8013efe:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013f00:	4b7a      	ldr	r3, [pc, #488]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013f02:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013f06:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013f08:	4b78      	ldr	r3, [pc, #480]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013f0a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013f0e:	f107 0108 	add.w	r1, r7, #8
 8013f12:	2207      	movs	r2, #7
 8013f14:	4618      	mov	r0, r3
 8013f16:	f002 fdde 	bl	8016ad6 <RegionVerify>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d019      	beq.n	8013f54 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013f20:	4b72      	ldr	r3, [pc, #456]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	3374      	adds	r3, #116	@ 0x74
 8013f26:	3204      	adds	r2, #4
 8013f28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f2c:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013f30:	4b6e      	ldr	r3, [pc, #440]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013f32:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8013f36:	2b02      	cmp	r3, #2
 8013f38:	f040 817e 	bne.w	8014238 <LoRaMacMibSetRequestConfirm+0x730>
 8013f3c:	4b6b      	ldr	r3, [pc, #428]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013f3e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	f000 8178 	beq.w	8014238 <LoRaMacMibSetRequestConfirm+0x730>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013f48:	4b69      	ldr	r3, [pc, #420]	@ (80140f0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f4c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013f4e:	f7fe fc1d 	bl	801278c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013f52:	e171      	b.n	8014238 <LoRaMacMibSetRequestConfirm+0x730>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f54:	2303      	movs	r3, #3
 8013f56:	75fb      	strb	r3, [r7, #23]
            break;
 8013f58:	e16e      	b.n	8014238 <LoRaMacMibSetRequestConfirm+0x730>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	7a1b      	ldrb	r3, [r3, #8]
 8013f5e:	b25b      	sxtb	r3, r3
 8013f60:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013f62:	4b62      	ldr	r3, [pc, #392]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013f64:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013f68:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013f6a:	4b60      	ldr	r3, [pc, #384]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013f6c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013f70:	f107 0108 	add.w	r1, r7, #8
 8013f74:	2207      	movs	r2, #7
 8013f76:	4618      	mov	r0, r3
 8013f78:	f002 fdad 	bl	8016ad6 <RegionVerify>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d008      	beq.n	8013f94 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013f82:	4b5a      	ldr	r3, [pc, #360]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	33bc      	adds	r3, #188	@ 0xbc
 8013f88:	3204      	adds	r2, #4
 8013f8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f8e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013f92:	e158      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f94:	2303      	movs	r3, #3
 8013f96:	75fb      	strb	r3, [r7, #23]
            break;
 8013f98:	e155      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	685b      	ldr	r3, [r3, #4]
 8013f9e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013fa4:	4b51      	ldr	r3, [pc, #324]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013fa6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013faa:	f107 020c 	add.w	r2, r7, #12
 8013fae:	4611      	mov	r1, r2
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f002 fdb9 	bl	8016b28 <RegionChanMaskSet>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	f083 0301 	eor.w	r3, r3, #1
 8013fbc:	b2db      	uxtb	r3, r3
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	f000 813c 	beq.w	801423c <LoRaMacMibSetRequestConfirm+0x734>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013fc4:	2303      	movs	r3, #3
 8013fc6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013fc8:	e138      	b.n	801423c <LoRaMacMibSetRequestConfirm+0x734>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	685b      	ldr	r3, [r3, #4]
 8013fce:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013fd4:	4b45      	ldr	r3, [pc, #276]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013fd6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013fda:	f107 020c 	add.w	r2, r7, #12
 8013fde:	4611      	mov	r1, r2
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f002 fda1 	bl	8016b28 <RegionChanMaskSet>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	f083 0301 	eor.w	r3, r3, #1
 8013fec:	b2db      	uxtb	r3, r3
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	f000 8126 	beq.w	8014240 <LoRaMacMibSetRequestConfirm+0x738>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ff4:	2303      	movs	r3, #3
 8013ff6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013ff8:	e122      	b.n	8014240 <LoRaMacMibSetRequestConfirm+0x738>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	791b      	ldrb	r3, [r3, #4]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d009      	beq.n	8014016 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014006:	2b0f      	cmp	r3, #15
 8014008:	d805      	bhi.n	8014016 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	791a      	ldrb	r2, [r3, #4]
 801400e:	4b37      	ldr	r3, [pc, #220]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014010:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014014:	e117      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014016:	2303      	movs	r3, #3
 8014018:	75fb      	strb	r3, [r7, #23]
            break;
 801401a:	e114      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	685b      	ldr	r3, [r3, #4]
 8014020:	4a32      	ldr	r2, [pc, #200]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014022:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8014024:	e10f      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	685b      	ldr	r3, [r3, #4]
 801402a:	4a30      	ldr	r2, [pc, #192]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 801402c:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 801402e:	e10a      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	685b      	ldr	r3, [r3, #4]
 8014034:	4a2d      	ldr	r2, [pc, #180]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014036:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8014038:	e105      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	685b      	ldr	r3, [r3, #4]
 801403e:	4a2b      	ldr	r2, [pc, #172]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014040:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 8014042:	e100      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	685b      	ldr	r3, [r3, #4]
 8014048:	4a28      	ldr	r2, [pc, #160]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 801404a:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 801404c:	e0fb      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014054:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8014056:	4b25      	ldr	r3, [pc, #148]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014058:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801405c:	f107 0108 	add.w	r1, r7, #8
 8014060:	2206      	movs	r2, #6
 8014062:	4618      	mov	r0, r3
 8014064:	f002 fd37 	bl	8016ad6 <RegionVerify>
 8014068:	4603      	mov	r3, r0
 801406a:	2b00      	cmp	r3, #0
 801406c:	d005      	beq.n	801407a <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801406e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014072:	4b1e      	ldr	r3, [pc, #120]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014074:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014078:	e0e5      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801407a:	2303      	movs	r3, #3
 801407c:	75fb      	strb	r3, [r7, #23]
            break;
 801407e:	e0e2      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014086:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014088:	4b18      	ldr	r3, [pc, #96]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 801408a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801408e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014090:	4b16      	ldr	r3, [pc, #88]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014092:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014096:	f107 0108 	add.w	r1, r7, #8
 801409a:	2205      	movs	r2, #5
 801409c:	4618      	mov	r0, r3
 801409e:	f002 fd1a 	bl	8016ad6 <RegionVerify>
 80140a2:	4603      	mov	r3, r0
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d005      	beq.n	80140b4 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80140a8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80140ac:	4b0f      	ldr	r3, [pc, #60]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 80140ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80140b2:	e0c8      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140b4:	2303      	movs	r3, #3
 80140b6:	75fb      	strb	r3, [r7, #23]
            break;
 80140b8:	e0c5      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80140c0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80140c2:	4b0a      	ldr	r3, [pc, #40]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 80140c4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80140c8:	f107 0108 	add.w	r1, r7, #8
 80140cc:	220a      	movs	r2, #10
 80140ce:	4618      	mov	r0, r3
 80140d0:	f002 fd01 	bl	8016ad6 <RegionVerify>
 80140d4:	4603      	mov	r3, r0
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d005      	beq.n	80140e6 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80140da:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80140de:	4b03      	ldr	r3, [pc, #12]	@ (80140ec <LoRaMacMibSetRequestConfirm+0x5e4>)
 80140e0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80140e4:	e0af      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140e6:	2303      	movs	r3, #3
 80140e8:	75fb      	strb	r3, [r7, #23]
            break;
 80140ea:	e0ac      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
 80140ec:	20000ecc 	.word	0x20000ecc
 80140f0:	08021620 	.word	0x08021620
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80140fa:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80140fc:	4b59      	ldr	r3, [pc, #356]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 80140fe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014102:	f107 0108 	add.w	r1, r7, #8
 8014106:	2209      	movs	r2, #9
 8014108:	4618      	mov	r0, r3
 801410a:	f002 fce4 	bl	8016ad6 <RegionVerify>
 801410e:	4603      	mov	r3, r0
 8014110:	2b00      	cmp	r3, #0
 8014112:	d005      	beq.n	8014120 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8014114:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014118:	4b52      	ldr	r3, [pc, #328]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 801411a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801411e:	e092      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014120:	2303      	movs	r3, #3
 8014122:	75fb      	strb	r3, [r7, #23]
            break;
 8014124:	e08f      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mibSet->Param.SystemMaxRxError <= 500 )
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	685b      	ldr	r3, [r3, #4]
 801412a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801412e:	d80a      	bhi.n	8014146 <LoRaMacMibSetRequestConfirm+0x63e>
            { // Only apply the new value if in range 0..500 ms else keep current value.
                Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	4a4b      	ldr	r2, [pc, #300]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 8014136:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 801413a:	4b4a      	ldr	r3, [pc, #296]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 801413c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014140:	4a48      	ldr	r2, [pc, #288]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 8014142:	64d3      	str	r3, [r2, #76]	@ 0x4c
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
#else
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
#endif
            break;
 8014144:	e07f      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014146:	2303      	movs	r3, #3
 8014148:	75fb      	strb	r3, [r7, #23]
            break;
 801414a:	e07c      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	791a      	ldrb	r2, [r3, #4]
 8014150:	4b44      	ldr	r3, [pc, #272]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 8014152:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 8014156:	4b43      	ldr	r3, [pc, #268]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 8014158:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 801415c:	4b41      	ldr	r3, [pc, #260]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 801415e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 8014162:	e070      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	685b      	ldr	r3, [r3, #4]
 8014168:	4a3e      	ldr	r2, [pc, #248]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 801416a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 801416e:	e06a      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	4a3b      	ldr	r2, [pc, #236]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 8014176:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 801417a:	e064      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 801417c:	f7fe fd38 	bl	8012bf0 <RestoreNvmData>
 8014180:	4603      	mov	r3, r0
 8014182:	75fb      	strb	r3, [r7, #23]
            break;
 8014184:	e05f      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	799b      	ldrb	r3, [r3, #6]
 801418a:	2b01      	cmp	r3, #1
 801418c:	d80d      	bhi.n	80141aa <LoRaMacMibSetRequestConfirm+0x6a2>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801418e:	4a35      	ldr	r2, [pc, #212]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	685b      	ldr	r3, [r3, #4]
 8014194:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6858      	ldr	r0, [r3, #4]
 801419c:	f001 fdd6 	bl	8015d4c <LoRaMacCryptoSetLrWanVersion>
 80141a0:	4603      	mov	r3, r0
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d04e      	beq.n	8014244 <LoRaMacMibSetRequestConfirm+0x73c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80141a6:	2311      	movs	r3, #17
 80141a8:	e058      	b.n	801425c <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80141aa:	2303      	movs	r3, #3
 80141ac:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80141ae:	e049      	b.n	8014244 <LoRaMacMibSetRequestConfirm+0x73c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	685b      	ldr	r3, [r3, #4]
 80141b4:	4a2b      	ldr	r2, [pc, #172]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 80141b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 80141ba:	e044      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	791a      	ldrb	r2, [r3, #4]
 80141c0:	4b28      	ldr	r3, [pc, #160]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 80141c2:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 80141c6:	e03e      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	889a      	ldrh	r2, [r3, #4]
 80141cc:	4b25      	ldr	r3, [pc, #148]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 80141ce:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 80141d2:	e038      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	889a      	ldrh	r2, [r3, #4]
 80141d8:	4b22      	ldr	r3, [pc, #136]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 80141da:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 80141de:	e032      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	889a      	ldrh	r2, [r3, #4]
 80141e4:	4b1f      	ldr	r3, [pc, #124]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 80141e6:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 80141ea:	e02c      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	889a      	ldrh	r2, [r3, #4]
 80141f0:	4b1c      	ldr	r3, [pc, #112]	@ (8014264 <LoRaMacMibSetRequestConfirm+0x75c>)
 80141f2:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 80141f6:	e026      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80141f8:	2318      	movs	r3, #24
 80141fa:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80141fc:	e023      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80141fe:	2318      	movs	r3, #24
 8014200:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014202:	e020      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f000 fd00 	bl	8014c0a <LoRaMacMibClassBSetRequestConfirm>
 801420a:	4603      	mov	r3, r0
 801420c:	75fb      	strb	r3, [r7, #23]
            break;
 801420e:	e01a      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014210:	bf00      	nop
 8014212:	e018      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014214:	bf00      	nop
 8014216:	e016      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014218:	bf00      	nop
 801421a:	e014      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801421c:	bf00      	nop
 801421e:	e012      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014220:	bf00      	nop
 8014222:	e010      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014224:	bf00      	nop
 8014226:	e00e      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014228:	bf00      	nop
 801422a:	e00c      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801422c:	bf00      	nop
 801422e:	e00a      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014230:	bf00      	nop
 8014232:	e008      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014234:	bf00      	nop
 8014236:	e006      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014238:	bf00      	nop
 801423a:	e004      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 801423c:	bf00      	nop
 801423e:	e002      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014240:	bf00      	nop
 8014242:	e000      	b.n	8014246 <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8014244:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8014246:	7dfb      	ldrb	r3, [r7, #23]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d106      	bne.n	801425a <LoRaMacMibSetRequestConfirm+0x752>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801424c:	4a06      	ldr	r2, [pc, #24]	@ (8014268 <LoRaMacMibSetRequestConfirm+0x760>)
 801424e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8014252:	f043 0320 	orr.w	r3, r3, #32
 8014256:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 801425a:	7dfb      	ldrb	r3, [r7, #23]
}
 801425c:	4618      	mov	r0, r3
 801425e:	3718      	adds	r7, #24
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}
 8014264:	20000ecc 	.word	0x20000ecc
 8014268:	20000998 	.word	0x20000998

0801426c <OnAbpJoinPendingTimerEvent>:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
/*!
 * \brief Function executed on AbpJoinPendingTimer timer event
 */
static void OnAbpJoinPendingTimerEvent( void *context )
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
    MacCtx.MacState &= ~LORAMAC_ABP_JOIN_PENDING;
 8014274:	4b0a      	ldr	r3, [pc, #40]	@ (80142a0 <OnAbpJoinPendingTimerEvent+0x34>)
 8014276:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801427a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801427e:	4a08      	ldr	r2, [pc, #32]	@ (80142a0 <OnAbpJoinPendingTimerEvent+0x34>)
 8014280:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    MacCtx.MacFlags.Bits.MacDone = 1;
 8014284:	4a06      	ldr	r2, [pc, #24]	@ (80142a0 <OnAbpJoinPendingTimerEvent+0x34>)
 8014286:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801428a:	f043 0310 	orr.w	r3, r3, #16
 801428e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    OnMacProcessNotify( );
 8014292:	f7fe fe5d 	bl	8012f50 <OnMacProcessNotify>
}
 8014296:	bf00      	nop
 8014298:	3708      	adds	r7, #8
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}
 801429e:	bf00      	nop
 80142a0:	20000998 	.word	0x20000998

080142a4 <AbpJoinPendingStart>:

/*!
 * \brief Start ABP join simulation
 */
static void AbpJoinPendingStart( void )
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b082      	sub	sp, #8
 80142a8:	af02      	add	r7, sp, #8
    static bool initialized = false;

    if( initialized == false )
 80142aa:	4b14      	ldr	r3, [pc, #80]	@ (80142fc <AbpJoinPendingStart+0x58>)
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	f083 0301 	eor.w	r3, r3, #1
 80142b2:	b2db      	uxtb	r3, r3
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d00b      	beq.n	80142d0 <AbpJoinPendingStart+0x2c>
    {
        initialized = true;
 80142b8:	4b10      	ldr	r3, [pc, #64]	@ (80142fc <AbpJoinPendingStart+0x58>)
 80142ba:	2201      	movs	r2, #1
 80142bc:	701a      	strb	r2, [r3, #0]
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
 80142be:	2300      	movs	r3, #0
 80142c0:	9300      	str	r3, [sp, #0]
 80142c2:	4b0f      	ldr	r3, [pc, #60]	@ (8014300 <AbpJoinPendingStart+0x5c>)
 80142c4:	2200      	movs	r2, #0
 80142c6:	f04f 31ff 	mov.w	r1, #4294967295
 80142ca:	480e      	ldr	r0, [pc, #56]	@ (8014304 <AbpJoinPendingStart+0x60>)
 80142cc:	f008 fc3c 	bl	801cb48 <UTIL_TIMER_Create>
    }

    MacCtx.MacState |= LORAMAC_ABP_JOIN_PENDING;
 80142d0:	4b0d      	ldr	r3, [pc, #52]	@ (8014308 <AbpJoinPendingStart+0x64>)
 80142d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80142d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80142da:	4a0b      	ldr	r2, [pc, #44]	@ (8014308 <AbpJoinPendingStart+0x64>)
 80142dc:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    TimerStop( &MacCtx.AbpJoinPendingTimer );
 80142e0:	4808      	ldr	r0, [pc, #32]	@ (8014304 <AbpJoinPendingStart+0x60>)
 80142e2:	f008 fcd5 	bl	801cc90 <UTIL_TIMER_Stop>
    TimerSetValue( &MacCtx.AbpJoinPendingTimer, ABP_JOIN_PENDING_DELAY_MS );
 80142e6:	210a      	movs	r1, #10
 80142e8:	4806      	ldr	r0, [pc, #24]	@ (8014304 <AbpJoinPendingStart+0x60>)
 80142ea:	f008 fd41 	bl	801cd70 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.AbpJoinPendingTimer );
 80142ee:	4805      	ldr	r0, [pc, #20]	@ (8014304 <AbpJoinPendingStart+0x60>)
 80142f0:	f008 fc60 	bl	801cbb4 <UTIL_TIMER_Start>
}
 80142f4:	bf00      	nop
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	20001aec 	.word	0x20001aec
 8014300:	0801426d 	.word	0x0801426d
 8014304:	20000e34 	.word	0x20000e34
 8014308:	20000998 	.word	0x20000998

0801430c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b08a      	sub	sp, #40	@ 0x28
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014314:	2302      	movs	r3, #2
 8014316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
 801431a:	2300      	movs	r3, #0
 801431c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8014320:	2300      	movs	r3, #0
 8014322:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d101      	bne.n	801432e <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801432a:	2303      	movs	r3, #3
 801432c:	e188      	b.n	8014640 <LoRaMacMlmeRequest+0x334>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	2200      	movs	r2, #0
 8014332:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8014334:	f7fc fb14 	bl	8010960 <LoRaMacIsBusy>
 8014338:	4603      	mov	r3, r0
 801433a:	2b00      	cmp	r3, #0
 801433c:	d001      	beq.n	8014342 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 801433e:	2301      	movs	r3, #1
 8014340:	e17e      	b.n	8014640 <LoRaMacMlmeRequest+0x334>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8014342:	f001 f99d 	bl	8015680 <LoRaMacConfirmQueueIsFull>
 8014346:	4603      	mov	r3, r0
 8014348:	2b00      	cmp	r3, #0
 801434a:	d001      	beq.n	8014350 <LoRaMacMlmeRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 801434c:	2301      	movs	r3, #1
 801434e:	e177      	b.n	8014640 <LoRaMacMlmeRequest+0x334>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014350:	f001 f98a 	bl	8015668 <LoRaMacConfirmQueueGetCnt>
 8014354:	4603      	mov	r3, r0
 8014356:	2b00      	cmp	r3, #0
 8014358:	d104      	bne.n	8014364 <LoRaMacMlmeRequest+0x58>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801435a:	2214      	movs	r2, #20
 801435c:	2100      	movs	r1, #0
 801435e:	48ba      	ldr	r0, [pc, #744]	@ (8014648 <LoRaMacMlmeRequest+0x33c>)
 8014360:	f004 fde4 	bl	8018f2c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014364:	4bb9      	ldr	r3, [pc, #740]	@ (801464c <LoRaMacMlmeRequest+0x340>)
 8014366:	2201      	movs	r2, #1
 8014368:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801436c:	4ab7      	ldr	r2, [pc, #732]	@ (801464c <LoRaMacMlmeRequest+0x340>)
 801436e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8014372:	f043 0304 	orr.w	r3, r3, #4
 8014376:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	781b      	ldrb	r3, [r3, #0]
 801437e:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014382:	2301      	movs	r3, #1
 8014384:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8014388:	2300      	movs	r3, #0
 801438a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 801438e:	2300      	movs	r3, #0
 8014390:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	3b01      	subs	r3, #1
 801439a:	2b0c      	cmp	r3, #12
 801439c:	f200 811e 	bhi.w	80145dc <LoRaMacMlmeRequest+0x2d0>
 80143a0:	a201      	add	r2, pc, #4	@ (adr r2, 80143a8 <LoRaMacMlmeRequest+0x9c>)
 80143a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143a6:	bf00      	nop
 80143a8:	080143dd 	.word	0x080143dd
 80143ac:	080145dd 	.word	0x080145dd
 80143b0:	080145dd 	.word	0x080145dd
 80143b4:	080145dd 	.word	0x080145dd
 80143b8:	080144c1 	.word	0x080144c1
 80143bc:	080144e5 	.word	0x080144e5
 80143c0:	080145dd 	.word	0x080145dd
 80143c4:	080145dd 	.word	0x080145dd
 80143c8:	08014503 	.word	0x08014503
 80143cc:	080145dd 	.word	0x080145dd
 80143d0:	080145ab 	.word	0x080145ab
 80143d4:	0801453f 	.word	0x0801453f
 80143d8:	08014589 	.word	0x08014589
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80143dc:	4b9b      	ldr	r3, [pc, #620]	@ (801464c <LoRaMacMlmeRequest+0x340>)
 80143de:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80143e2:	f003 0320 	and.w	r3, r3, #32
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d001      	beq.n	80143ee <LoRaMacMlmeRequest+0xe2>
            {
                return LORAMAC_STATUS_BUSY;
 80143ea:	2301      	movs	r3, #1
 80143ec:	e128      	b.n	8014640 <LoRaMacMlmeRequest+0x334>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	791b      	ldrb	r3, [r3, #4]
 80143f2:	2b02      	cmp	r3, #2
 80143f4:	d135      	bne.n	8014462 <LoRaMacMlmeRequest+0x156>
            {
                ResetMacParameters( false );
 80143f6:	2000      	movs	r0, #0
 80143f8:	f7fe f85a 	bl	80124b0 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80143fc:	4b94      	ldr	r3, [pc, #592]	@ (8014650 <LoRaMacMlmeRequest+0x344>)
 80143fe:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	795b      	ldrb	r3, [r3, #5]
 8014406:	b25b      	sxtb	r3, r3
 8014408:	2200      	movs	r2, #0
 801440a:	4619      	mov	r1, r3
 801440c:	f002 fc4b 	bl	8016ca6 <RegionAlternateDr>
 8014410:	4603      	mov	r3, r0
 8014412:	461a      	mov	r2, r3
 8014414:	4b8e      	ldr	r3, [pc, #568]	@ (8014650 <LoRaMacMlmeRequest+0x344>)
 8014416:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8014420:	4b8b      	ldr	r3, [pc, #556]	@ (8014650 <LoRaMacMlmeRequest+0x344>)
 8014422:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8014426:	2307      	movs	r3, #7
 8014428:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 801442c:	20ff      	movs	r0, #255	@ 0xff
 801442e:	f7fd fdc3 	bl	8011fb8 <SendReJoinReq>
 8014432:	4603      	mov	r3, r0
 8014434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8014438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801443c:	2b00      	cmp	r3, #0
 801443e:	f000 80cf 	beq.w	80145e0 <LoRaMacMlmeRequest+0x2d4>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014442:	4b83      	ldr	r3, [pc, #524]	@ (8014650 <LoRaMacMlmeRequest+0x344>)
 8014444:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	795b      	ldrb	r3, [r3, #5]
 801444c:	b25b      	sxtb	r3, r3
 801444e:	2201      	movs	r2, #1
 8014450:	4619      	mov	r1, r3
 8014452:	f002 fc28 	bl	8016ca6 <RegionAlternateDr>
 8014456:	4603      	mov	r3, r0
 8014458:	461a      	mov	r2, r3
 801445a:	4b7d      	ldr	r3, [pc, #500]	@ (8014650 <LoRaMacMlmeRequest+0x344>)
 801445c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                isAbpJoinPending = true;
#endif
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8014460:	e0be      	b.n	80145e0 <LoRaMacMlmeRequest+0x2d4>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	791b      	ldrb	r3, [r3, #4]
 8014466:	2b01      	cmp	r3, #1
 8014468:	f040 80ba 	bne.w	80145e0 <LoRaMacMlmeRequest+0x2d4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801446c:	4b78      	ldr	r3, [pc, #480]	@ (8014650 <LoRaMacMlmeRequest+0x344>)
 801446e:	2200      	movs	r2, #0
 8014470:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8014474:	2302      	movs	r3, #2
 8014476:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014478:	4b75      	ldr	r3, [pc, #468]	@ (8014650 <LoRaMacMlmeRequest+0x344>)
 801447a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801447e:	f107 020c 	add.w	r2, r7, #12
 8014482:	4611      	mov	r1, r2
 8014484:	4618      	mov	r0, r3
 8014486:	f002 fb14 	bl	8016ab2 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	791a      	ldrb	r2, [r3, #4]
 801448e:	4b70      	ldr	r3, [pc, #448]	@ (8014650 <LoRaMacMlmeRequest+0x344>)
 8014490:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8014494:	2300      	movs	r3, #0
 8014496:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 801449a:	2301      	movs	r3, #1
 801449c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 80144a0:	f7fe fd56 	bl	8012f50 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80144a4:	4a69      	ldr	r2, [pc, #420]	@ (801464c <LoRaMacMlmeRequest+0x340>)
 80144a6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80144aa:	f043 0310 	orr.w	r3, r3, #16
 80144ae:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                isAbpJoinPending = true;
 80144b2:	2301      	movs	r3, #1
 80144b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                status = LORAMAC_STATUS_OK;
 80144b8:	2300      	movs	r3, #0
 80144ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80144be:	e08f      	b.n	80145e0 <LoRaMacMlmeRequest+0x2d4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80144c0:	2300      	movs	r3, #0
 80144c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80144c6:	f107 031c 	add.w	r3, r7, #28
 80144ca:	2200      	movs	r2, #0
 80144cc:	4619      	mov	r1, r3
 80144ce:	2002      	movs	r0, #2
 80144d0:	f000 fd26 	bl	8014f20 <LoRaMacCommandsAddCmd>
 80144d4:	4603      	mov	r3, r0
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	f000 8084 	beq.w	80145e4 <LoRaMacMlmeRequest+0x2d8>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80144dc:	2313      	movs	r3, #19
 80144de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80144e2:	e07f      	b.n	80145e4 <LoRaMacMlmeRequest+0x2d8>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	8898      	ldrh	r0, [r3, #4]
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6899      	ldr	r1, [r3, #8]
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80144f2:	b2db      	uxtb	r3, r3
 80144f4:	461a      	mov	r2, r3
 80144f6:	f7fe fb5b 	bl	8012bb0 <SetTxContinuousWave>
 80144fa:	4603      	mov	r3, r0
 80144fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8014500:	e077      	b.n	80145f2 <LoRaMacMlmeRequest+0x2e6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014502:	2300      	movs	r3, #0
 8014504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8014508:	f107 0308 	add.w	r3, r7, #8
 801450c:	4619      	mov	r1, r3
 801450e:	200d      	movs	r0, #13
 8014510:	f000 fd86 	bl	8015020 <LoRaMacCommandsGetCmd>
 8014514:	4603      	mov	r3, r0
 8014516:	2b00      	cmp	r3, #0
 8014518:	d103      	bne.n	8014522 <LoRaMacMlmeRequest+0x216>
            {
                status = LORAMAC_STATUS_OK;
 801451a:	2300      	movs	r3, #0
 801451c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8014520:	e062      	b.n	80145e8 <LoRaMacMlmeRequest+0x2dc>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014522:	f107 031c 	add.w	r3, r7, #28
 8014526:	2200      	movs	r2, #0
 8014528:	4619      	mov	r1, r3
 801452a:	200d      	movs	r0, #13
 801452c:	f000 fcf8 	bl	8014f20 <LoRaMacCommandsAddCmd>
 8014530:	4603      	mov	r3, r0
 8014532:	2b00      	cmp	r3, #0
 8014534:	d058      	beq.n	80145e8 <LoRaMacMlmeRequest+0x2dc>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014536:	2313      	movs	r3, #19
 8014538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801453c:	e054      	b.n	80145e8 <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801453e:	4b44      	ldr	r3, [pc, #272]	@ (8014650 <LoRaMacMlmeRequest+0x344>)
 8014540:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8014544:	2b00      	cmp	r3, #0
 8014546:	d151      	bne.n	80145ec <LoRaMacMlmeRequest+0x2e0>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	791b      	ldrb	r3, [r3, #4]
 801454c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	791b      	ldrb	r3, [r3, #4]
 8014554:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8014558:	b2db      	uxtb	r3, r3
 801455a:	4618      	mov	r0, r3
 801455c:	f000 fb2a 	bl	8014bb4 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8014560:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8014564:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8014566:	2300      	movs	r3, #0
 8014568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801456c:	f107 031c 	add.w	r3, r7, #28
 8014570:	2201      	movs	r2, #1
 8014572:	4619      	mov	r1, r3
 8014574:	2010      	movs	r0, #16
 8014576:	f000 fcd3 	bl	8014f20 <LoRaMacCommandsAddCmd>
 801457a:	4603      	mov	r3, r0
 801457c:	2b00      	cmp	r3, #0
 801457e:	d035      	beq.n	80145ec <LoRaMacMlmeRequest+0x2e0>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014580:	2313      	movs	r3, #19
 8014582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 8014586:	e031      	b.n	80145ec <LoRaMacMlmeRequest+0x2e0>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014588:	2300      	movs	r3, #0
 801458a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801458e:	f107 031c 	add.w	r3, r7, #28
 8014592:	2200      	movs	r2, #0
 8014594:	4619      	mov	r1, r3
 8014596:	2012      	movs	r0, #18
 8014598:	f000 fcc2 	bl	8014f20 <LoRaMacCommandsAddCmd>
 801459c:	4603      	mov	r3, r0
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d026      	beq.n	80145f0 <LoRaMacMlmeRequest+0x2e4>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80145a2:	2313      	movs	r3, #19
 80145a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80145a8:	e022      	b.n	80145f0 <LoRaMacMlmeRequest+0x2e4>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80145aa:	2301      	movs	r3, #1
 80145ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80145b0:	f000 fab6 	bl	8014b20 <LoRaMacClassBIsAcquisitionInProgress>
 80145b4:	4603      	mov	r3, r0
 80145b6:	f083 0301 	eor.w	r3, r3, #1
 80145ba:	b2db      	uxtb	r3, r3
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d009      	beq.n	80145d4 <LoRaMacMlmeRequest+0x2c8>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80145c0:	2000      	movs	r0, #0
 80145c2:	f000 fa8f 	bl	8014ae4 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80145c6:	2000      	movs	r0, #0
 80145c8:	f000 fab1 	bl	8014b2e <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80145cc:	2300      	movs	r3, #0
 80145ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80145d2:	e00e      	b.n	80145f2 <LoRaMacMlmeRequest+0x2e6>
                status = LORAMAC_STATUS_BUSY;
 80145d4:	2301      	movs	r3, #1
 80145d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80145da:	e00a      	b.n	80145f2 <LoRaMacMlmeRequest+0x2e6>
        }
        default:
            break;
 80145dc:	bf00      	nop
 80145de:	e008      	b.n	80145f2 <LoRaMacMlmeRequest+0x2e6>
            break;
 80145e0:	bf00      	nop
 80145e2:	e006      	b.n	80145f2 <LoRaMacMlmeRequest+0x2e6>
            break;
 80145e4:	bf00      	nop
 80145e6:	e004      	b.n	80145f2 <LoRaMacMlmeRequest+0x2e6>
            break;
 80145e8:	bf00      	nop
 80145ea:	e002      	b.n	80145f2 <LoRaMacMlmeRequest+0x2e6>
            break;
 80145ec:	bf00      	nop
 80145ee:	e000      	b.n	80145f2 <LoRaMacMlmeRequest+0x2e6>
            break;
 80145f0:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80145f2:	4b16      	ldr	r3, [pc, #88]	@ (801464c <LoRaMacMlmeRequest+0x340>)
 80145f4:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80145fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014600:	2b00      	cmp	r3, #0
 8014602:	d010      	beq.n	8014626 <LoRaMacMlmeRequest+0x31a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014604:	f001 f830 	bl	8015668 <LoRaMacConfirmQueueGetCnt>
 8014608:	4603      	mov	r3, r0
 801460a:	2b00      	cmp	r3, #0
 801460c:	d116      	bne.n	801463c <LoRaMacMlmeRequest+0x330>
        {
            MacCtx.NodeAckRequested = false;
 801460e:	4b0f      	ldr	r3, [pc, #60]	@ (801464c <LoRaMacMlmeRequest+0x340>)
 8014610:	2200      	movs	r2, #0
 8014612:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014616:	4a0d      	ldr	r2, [pc, #52]	@ (801464c <LoRaMacMlmeRequest+0x340>)
 8014618:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801461c:	f023 0304 	bic.w	r3, r3, #4
 8014620:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8014624:	e00a      	b.n	801463c <LoRaMacMlmeRequest+0x330>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014626:	f107 0320 	add.w	r3, r7, #32
 801462a:	4618      	mov	r0, r3
 801462c:	f000 fec8 	bl	80153c0 <LoRaMacConfirmQueueAdd>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        if( isAbpJoinPending == true )
 8014630:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014634:	2b00      	cmp	r3, #0
 8014636:	d001      	beq.n	801463c <LoRaMacMlmeRequest+0x330>
        {
            AbpJoinPendingStart( );
 8014638:	f7ff fe34 	bl	80142a4 <AbpJoinPendingStart>
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
 801463c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8014640:	4618      	mov	r0, r3
 8014642:	3728      	adds	r7, #40	@ 0x28
 8014644:	46bd      	mov	sp, r7
 8014646:	bd80      	pop	{r7, pc}
 8014648:	20000dec 	.word	0x20000dec
 801464c:	20000998 	.word	0x20000998
 8014650:	20000ecc 	.word	0x20000ecc

08014654 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014654:	b5b0      	push	{r4, r5, r7, lr}
 8014656:	b092      	sub	sp, #72	@ 0x48
 8014658:	af02      	add	r7, sp, #8
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	460b      	mov	r3, r1
 801465e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014660:	2302      	movs	r3, #2
 8014662:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8014666:	2300      	movs	r3, #0
 8014668:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 801466c:	2300      	movs	r3, #0
 801466e:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014670:	2300      	movs	r3, #0
 8014672:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 8014676:	2300      	movs	r3, #0
 8014678:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d101      	bne.n	8014686 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014682:	2303      	movs	r3, #3
 8014684:	e113      	b.n	80148ae <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2200      	movs	r2, #0
 801468a:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 801468c:	f7fc f968 	bl	8010960 <LoRaMacIsBusy>
 8014690:	4603      	mov	r3, r0
 8014692:	2b00      	cmp	r3, #0
 8014694:	d001      	beq.n	801469a <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8014696:	2301      	movs	r3, #1
 8014698:	e109      	b.n	80148ae <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f107 040c 	add.w	r4, r7, #12
 80146a0:	461d      	mov	r5, r3
 80146a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80146a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80146a6:	682b      	ldr	r3, [r5, #0]
 80146a8:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80146aa:	2300      	movs	r3, #0
 80146ac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80146b0:	2214      	movs	r2, #20
 80146b2:	2100      	movs	r1, #0
 80146b4:	4880      	ldr	r0, [pc, #512]	@ (80148b8 <LoRaMacMcpsRequest+0x264>)
 80146b6:	f004 fc39 	bl	8018f2c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80146ba:	4b80      	ldr	r3, [pc, #512]	@ (80148bc <LoRaMacMcpsRequest+0x268>)
 80146bc:	2201      	movs	r2, #1
 80146be:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80146c2:	4b7f      	ldr	r3, [pc, #508]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 80146c4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80146c8:	2b02      	cmp	r3, #2
 80146ca:	d111      	bne.n	80146f0 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80146cc:	4b7c      	ldr	r3, [pc, #496]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 80146ce:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80146d2:	2b02      	cmp	r3, #2
 80146d4:	d10c      	bne.n	80146f0 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80146d6:	4b7a      	ldr	r3, [pc, #488]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 80146d8:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 80146dc:	f083 0301 	eor.w	r3, r3, #1
 80146e0:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d004      	beq.n	80146f0 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 80146e6:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d101      	bne.n	80146f0 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 80146ec:	2301      	movs	r3, #1
 80146ee:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 80146f0:	7b3b      	ldrb	r3, [r7, #12]
 80146f2:	2b03      	cmp	r3, #3
 80146f4:	d030      	beq.n	8014758 <LoRaMacMcpsRequest+0x104>
 80146f6:	2b03      	cmp	r3, #3
 80146f8:	dc3f      	bgt.n	801477a <LoRaMacMcpsRequest+0x126>
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d002      	beq.n	8014704 <LoRaMacMcpsRequest+0xb0>
 80146fe:	2b01      	cmp	r3, #1
 8014700:	d015      	beq.n	801472e <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014702:	e03a      	b.n	801477a <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8014704:	2301      	movs	r3, #1
 8014706:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801470a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801470e:	2202      	movs	r2, #2
 8014710:	f362 1347 	bfi	r3, r2, #5, #3
 8014714:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8014718:	7c3b      	ldrb	r3, [r7, #16]
 801471a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 801471e:	697b      	ldr	r3, [r7, #20]
 8014720:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8014722:	8b3b      	ldrh	r3, [r7, #24]
 8014724:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8014726:	7ebb      	ldrb	r3, [r7, #26]
 8014728:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801472c:	e026      	b.n	801477c <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801472e:	2301      	movs	r3, #1
 8014730:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014734:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014738:	2204      	movs	r2, #4
 801473a:	f362 1347 	bfi	r3, r2, #5, #3
 801473e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8014742:	7c3b      	ldrb	r3, [r7, #16]
 8014744:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 801474c:	8b3b      	ldrh	r3, [r7, #24]
 801474e:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8014750:	7ebb      	ldrb	r3, [r7, #26]
 8014752:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8014756:	e011      	b.n	801477c <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8014758:	2301      	movs	r3, #1
 801475a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801475e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014762:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8014766:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 801476e:	8abb      	ldrh	r3, [r7, #20]
 8014770:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 8014772:	7dbb      	ldrb	r3, [r7, #22]
 8014774:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8014778:	e000      	b.n	801477c <LoRaMacMcpsRequest+0x128>
            break;
 801477a:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 801477c:	2302      	movs	r3, #2
 801477e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014782:	4b4f      	ldr	r3, [pc, #316]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 8014784:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8014788:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801478c:	4b4c      	ldr	r3, [pc, #304]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 801478e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014792:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8014796:	4611      	mov	r1, r2
 8014798:	4618      	mov	r0, r3
 801479a:	f002 f961 	bl	8016a60 <RegionGetPhyParam>
 801479e:	4603      	mov	r3, r0
 80147a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80147a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147a4:	b25b      	sxtb	r3, r3
 80147a6:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80147aa:	4293      	cmp	r3, r2
 80147ac:	bfb8      	it	lt
 80147ae:	4613      	movlt	r3, r2
 80147b0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80147b4:	4b42      	ldr	r3, [pc, #264]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 80147b6:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80147ba:	4a41      	ldr	r2, [pc, #260]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 80147bc:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 80147c0:	4a3f      	ldr	r2, [pc, #252]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 80147c2:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 80147c6:	4618      	mov	r0, r3
 80147c8:	f7fc fa66 	bl	8010c98 <CheckForMinimumAbpDatarate>
 80147cc:	4603      	mov	r3, r0
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d002      	beq.n	80147d8 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 80147d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147d4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 80147d8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d05f      	beq.n	80148a0 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80147e0:	4b37      	ldr	r3, [pc, #220]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 80147e2:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80147e6:	f083 0301 	eor.w	r3, r3, #1
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d10e      	bne.n	801480e <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80147f0:	4b33      	ldr	r3, [pc, #204]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 80147f2:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80147f6:	4a32      	ldr	r2, [pc, #200]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 80147f8:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 80147fc:	4a30      	ldr	r2, [pc, #192]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 80147fe:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8014802:	4618      	mov	r0, r3
 8014804:	f7fc fa48 	bl	8010c98 <CheckForMinimumAbpDatarate>
 8014808:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801480a:	2b00      	cmp	r3, #0
 801480c:	d01c      	beq.n	8014848 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 801480e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8014812:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014816:	4b2a      	ldr	r3, [pc, #168]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 8014818:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801481c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014820:	4b27      	ldr	r3, [pc, #156]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 8014822:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014826:	f107 0120 	add.w	r1, r7, #32
 801482a:	2205      	movs	r2, #5
 801482c:	4618      	mov	r0, r3
 801482e:	f002 f952 	bl	8016ad6 <RegionVerify>
 8014832:	4603      	mov	r3, r0
 8014834:	2b00      	cmp	r3, #0
 8014836:	d005      	beq.n	8014844 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014838:	f997 2020 	ldrsb.w	r2, [r7, #32]
 801483c:	4b20      	ldr	r3, [pc, #128]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 801483e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8014842:	e001      	b.n	8014848 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014844:	2303      	movs	r3, #3
 8014846:	e032      	b.n	80148ae <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8014848:	4b1d      	ldr	r3, [pc, #116]	@ (80148c0 <LoRaMacMcpsRequest+0x26c>)
 801484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801484e:	4a1b      	ldr	r2, [pc, #108]	@ (80148bc <LoRaMacMcpsRequest+0x268>)
 8014850:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8014854:	4611      	mov	r1, r2
 8014856:	4618      	mov	r0, r3
 8014858:	f7fc fb0a 	bl	8010e70 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 801485c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801485e:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8014862:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8014866:	78fb      	ldrb	r3, [r7, #3]
 8014868:	9300      	str	r3, [sp, #0]
 801486a:	4613      	mov	r3, r2
 801486c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801486e:	f7fd fac1 	bl	8011df4 <Send>
 8014872:	4603      	mov	r3, r0
 8014874:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 8014878:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801487c:	2b00      	cmp	r3, #0
 801487e:	d10b      	bne.n	8014898 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8014880:	7b3a      	ldrb	r2, [r7, #12]
 8014882:	4b0e      	ldr	r3, [pc, #56]	@ (80148bc <LoRaMacMcpsRequest+0x268>)
 8014884:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8014888:	4a0c      	ldr	r2, [pc, #48]	@ (80148bc <LoRaMacMcpsRequest+0x268>)
 801488a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801488e:	f043 0301 	orr.w	r3, r3, #1
 8014892:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8014896:	e003      	b.n	80148a0 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8014898:	4b08      	ldr	r3, [pc, #32]	@ (80148bc <LoRaMacMcpsRequest+0x268>)
 801489a:	2200      	movs	r2, #0
 801489c:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80148a0:	4b06      	ldr	r3, [pc, #24]	@ (80148bc <LoRaMacMcpsRequest+0x268>)
 80148a2:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	611a      	str	r2, [r3, #16]

    return status;
 80148aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	3740      	adds	r7, #64	@ 0x40
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bdb0      	pop	{r4, r5, r7, pc}
 80148b6:	bf00      	nop
 80148b8:	20000dd8 	.word	0x20000dd8
 80148bc:	20000998 	.word	0x20000998
 80148c0:	20000ecc 	.word	0x20000ecc

080148c4 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b084      	sub	sp, #16
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	4603      	mov	r3, r0
 80148cc:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80148ce:	79fb      	ldrb	r3, [r7, #7]
 80148d0:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80148d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014908 <LoRaMacTestSetDutyCycleOn+0x44>)
 80148d4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80148d8:	f107 010c 	add.w	r1, r7, #12
 80148dc:	220f      	movs	r2, #15
 80148de:	4618      	mov	r0, r3
 80148e0:	f002 f8f9 	bl	8016ad6 <RegionVerify>
 80148e4:	4603      	mov	r3, r0
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d00a      	beq.n	8014900 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80148ea:	4a07      	ldr	r2, [pc, #28]	@ (8014908 <LoRaMacTestSetDutyCycleOn+0x44>)
 80148ec:	79fb      	ldrb	r3, [r7, #7]
 80148ee:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80148f2:	4a06      	ldr	r2, [pc, #24]	@ (801490c <LoRaMacTestSetDutyCycleOn+0x48>)
 80148f4:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80148f8:	f043 0320 	orr.w	r3, r3, #32
 80148fc:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8014900:	bf00      	nop
 8014902:	3710      	adds	r7, #16
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	20000ecc 	.word	0x20000ecc
 801490c:	20000998 	.word	0x20000998

08014910 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8014910:	b580      	push	{r7, lr}
 8014912:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8014914:	f7fe fe30 	bl	8013578 <LoRaMacStop>
 8014918:	4603      	mov	r3, r0
 801491a:	2b00      	cmp	r3, #0
 801491c:	d112      	bne.n	8014944 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801491e:	480b      	ldr	r0, [pc, #44]	@ (801494c <LoRaMacDeInitialization+0x3c>)
 8014920:	f008 f9b6 	bl	801cc90 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8014924:	480a      	ldr	r0, [pc, #40]	@ (8014950 <LoRaMacDeInitialization+0x40>)
 8014926:	f008 f9b3 	bl	801cc90 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801492a:	480a      	ldr	r0, [pc, #40]	@ (8014954 <LoRaMacDeInitialization+0x44>)
 801492c:	f008 f9b0 	bl	801cc90 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8014930:	f000 f94a 	bl	8014bc8 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8014934:	2000      	movs	r0, #0
 8014936:	f7fd fdbb 	bl	80124b0 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801493a:	4b07      	ldr	r3, [pc, #28]	@ (8014958 <LoRaMacDeInitialization+0x48>)
 801493c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801493e:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8014940:	2300      	movs	r3, #0
 8014942:	e000      	b.n	8014946 <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8014944:	2301      	movs	r3, #1
    }
}
 8014946:	4618      	mov	r0, r3
 8014948:	bd80      	pop	{r7, pc}
 801494a:	bf00      	nop
 801494c:	20000d00 	.word	0x20000d00
 8014950:	20000d18 	.word	0x20000d18
 8014954:	20000d30 	.word	0x20000d30
 8014958:	08021620 	.word	0x08021620

0801495c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b08c      	sub	sp, #48	@ 0x30
 8014960:	af00      	add	r7, sp, #0
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	607a      	str	r2, [r7, #4]
 8014968:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801496a:	2300      	movs	r3, #0
 801496c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	7b1b      	ldrb	r3, [r3, #12]
 8014974:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	7b5b      	ldrb	r3, [r3, #13]
 801497c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	7b9b      	ldrb	r3, [r3, #14]
 8014984:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	685a      	ldr	r2, [r3, #4]
 801498c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801498e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	785b      	ldrb	r3, [r3, #1]
 8014994:	2b00      	cmp	r3, #0
 8014996:	f000 8088 	beq.w	8014aaa <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801499a:	2302      	movs	r3, #2
 801499c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	7bdb      	ldrb	r3, [r3, #15]
 80149a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	7c1b      	ldrb	r3, [r3, #16]
 80149ac:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80149b0:	4611      	mov	r1, r2
 80149b2:	4618      	mov	r0, r3
 80149b4:	f002 f854 	bl	8016a60 <RegionGetPhyParam>
 80149b8:	4603      	mov	r3, r0
 80149ba:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80149bc:	6a3b      	ldr	r3, [r7, #32]
 80149be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80149c2:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 80149c6:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80149ca:	4293      	cmp	r3, r2
 80149cc:	bfb8      	it	lt
 80149ce:	4613      	movlt	r3, r2
 80149d0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	685b      	ldr	r3, [r3, #4]
 80149d8:	68fa      	ldr	r2, [r7, #12]
 80149da:	8912      	ldrh	r2, [r2, #8]
 80149dc:	4293      	cmp	r3, r2
 80149de:	d302      	bcc.n	80149e6 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 80149e0:	2301      	movs	r3, #1
 80149e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	685b      	ldr	r3, [r3, #4]
 80149ea:	68fa      	ldr	r2, [r7, #12]
 80149ec:	8912      	ldrh	r2, [r2, #8]
 80149ee:	4611      	mov	r1, r2
 80149f0:	68fa      	ldr	r2, [r7, #12]
 80149f2:	8952      	ldrh	r2, [r2, #10]
 80149f4:	440a      	add	r2, r1
 80149f6:	4293      	cmp	r3, r2
 80149f8:	d30f      	bcc.n	8014a1a <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 80149fa:	230a      	movs	r3, #10
 80149fc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	7c1b      	ldrb	r3, [r3, #16]
 8014a04:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014a08:	4611      	mov	r1, r2
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f002 f828 	bl	8016a60 <RegionGetPhyParam>
 8014a10:	4603      	mov	r3, r0
 8014a12:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8014a14:	6a3b      	ldr	r3, [r7, #32]
 8014a16:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	685b      	ldr	r3, [r3, #4]
 8014a1e:	68fa      	ldr	r2, [r7, #12]
 8014a20:	8912      	ldrh	r2, [r2, #8]
 8014a22:	4611      	mov	r1, r2
 8014a24:	68fa      	ldr	r2, [r7, #12]
 8014a26:	8952      	ldrh	r2, [r2, #10]
 8014a28:	0052      	lsls	r2, r2, #1
 8014a2a:	440a      	add	r2, r1
 8014a2c:	4293      	cmp	r3, r2
 8014a2e:	d33c      	bcc.n	8014aaa <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	685b      	ldr	r3, [r3, #4]
 8014a34:	68fa      	ldr	r2, [r7, #12]
 8014a36:	8912      	ldrh	r2, [r2, #8]
 8014a38:	1a9b      	subs	r3, r3, r2
 8014a3a:	68fa      	ldr	r2, [r7, #12]
 8014a3c:	8952      	ldrh	r2, [r2, #10]
 8014a3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014a42:	fb01 f202 	mul.w	r2, r1, r2
 8014a46:	1a9b      	subs	r3, r3, r2
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d12e      	bne.n	8014aaa <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8014a4c:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8014a50:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d110      	bne.n	8014a7a <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d009      	beq.n	8014a74 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8014a60:	2302      	movs	r3, #2
 8014a62:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	7c1b      	ldrb	r3, [r3, #16]
 8014a68:	f107 0210 	add.w	r2, r7, #16
 8014a6c:	4611      	mov	r1, r2
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f002 f81f 	bl	8016ab2 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8014a74:	2301      	movs	r3, #1
 8014a76:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014a7a:	2321      	movs	r3, #33	@ 0x21
 8014a7c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8014a80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014a84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	7bdb      	ldrb	r3, [r3, #15]
 8014a8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	7c1b      	ldrb	r3, [r3, #16]
 8014a94:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014a98:	4611      	mov	r1, r2
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f001 ffe0 	bl	8016a60 <RegionGetPhyParam>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8014aa4:	6a3b      	ldr	r3, [r7, #32]
 8014aa6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8014ab0:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8014ab8:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014ac0:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8014ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3730      	adds	r7, #48	@ 0x30
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}

08014ace <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8014ace:	b480      	push	{r7}
 8014ad0:	b085      	sub	sp, #20
 8014ad2:	af00      	add	r7, sp, #0
 8014ad4:	60f8      	str	r0, [r7, #12]
 8014ad6:	60b9      	str	r1, [r7, #8]
 8014ad8:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014ada:	bf00      	nop
 8014adc:	3714      	adds	r7, #20
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bc80      	pop	{r7}
 8014ae2:	4770      	bx	lr

08014ae4 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014ae4:	b480      	push	{r7}
 8014ae6:	b083      	sub	sp, #12
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	4603      	mov	r3, r0
 8014aec:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014aee:	bf00      	nop
 8014af0:	370c      	adds	r7, #12
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bc80      	pop	{r7}
 8014af6:	4770      	bx	lr

08014af8 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014af8:	b480      	push	{r7}
 8014afa:	b083      	sub	sp, #12
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	4603      	mov	r3, r0
 8014b00:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014b02:	bf00      	nop
 8014b04:	370c      	adds	r7, #12
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bc80      	pop	{r7}
 8014b0a:	4770      	bx	lr

08014b0c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014b0c:	b480      	push	{r7}
 8014b0e:	b083      	sub	sp, #12
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	4603      	mov	r3, r0
 8014b14:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014b16:	bf00      	nop
 8014b18:	370c      	adds	r7, #12
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	bc80      	pop	{r7}
 8014b1e:	4770      	bx	lr

08014b20 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014b20:	b480      	push	{r7}
 8014b22:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014b24:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014b26:	4618      	mov	r0, r3
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bc80      	pop	{r7}
 8014b2c:	4770      	bx	lr

08014b2e <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014b2e:	b480      	push	{r7}
 8014b30:	b083      	sub	sp, #12
 8014b32:	af00      	add	r7, sp, #0
 8014b34:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014b36:	bf00      	nop
 8014b38:	370c      	adds	r7, #12
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bc80      	pop	{r7}
 8014b3e:	4770      	bx	lr

08014b40 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014b40:	b480      	push	{r7}
 8014b42:	b083      	sub	sp, #12
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014b48:	bf00      	nop
 8014b4a:	370c      	adds	r7, #12
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	bc80      	pop	{r7}
 8014b50:	4770      	bx	lr

08014b52 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8014b52:	b480      	push	{r7}
 8014b54:	b083      	sub	sp, #12
 8014b56:	af00      	add	r7, sp, #0
 8014b58:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014b5a:	bf00      	nop
 8014b5c:	370c      	adds	r7, #12
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bc80      	pop	{r7}
 8014b62:	4770      	bx	lr

08014b64 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8014b64:	b480      	push	{r7}
 8014b66:	b083      	sub	sp, #12
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
 8014b6c:	460b      	mov	r3, r1
 8014b6e:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8014b70:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	370c      	adds	r7, #12
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bc80      	pop	{r7}
 8014b7a:	4770      	bx	lr

08014b7c <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8014b7c:	b480      	push	{r7}
 8014b7e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014b80:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bc80      	pop	{r7}
 8014b88:	4770      	bx	lr

08014b8a <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8014b8a:	b480      	push	{r7}
 8014b8c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014b8e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014b90:	4618      	mov	r0, r3
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bc80      	pop	{r7}
 8014b96:	4770      	bx	lr

08014b98 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8014b98:	b480      	push	{r7}
 8014b9a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014b9c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bc80      	pop	{r7}
 8014ba4:	4770      	bx	lr

08014ba6 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8014ba6:	b480      	push	{r7}
 8014ba8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014baa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bc80      	pop	{r7}
 8014bb2:	4770      	bx	lr

08014bb4 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b083      	sub	sp, #12
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	4603      	mov	r3, r0
 8014bbc:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014bbe:	bf00      	nop
 8014bc0:	370c      	adds	r7, #12
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bc80      	pop	{r7}
 8014bc6:	4770      	bx	lr

08014bc8 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8014bc8:	b480      	push	{r7}
 8014bca:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014bcc:	bf00      	nop
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bc80      	pop	{r7}
 8014bd2:	4770      	bx	lr

08014bd4 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8014bd4:	b480      	push	{r7}
 8014bd6:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014bd8:	bf00      	nop
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bc80      	pop	{r7}
 8014bde:	4770      	bx	lr

08014be0 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014be0:	b480      	push	{r7}
 8014be2:	b083      	sub	sp, #12
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	4603      	mov	r3, r0
 8014be8:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014bea:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014bec:	4618      	mov	r0, r3
 8014bee:	370c      	adds	r7, #12
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bc80      	pop	{r7}
 8014bf4:	4770      	bx	lr

08014bf6 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8014bf6:	b480      	push	{r7}
 8014bf8:	b083      	sub	sp, #12
 8014bfa:	af00      	add	r7, sp, #0
 8014bfc:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014bfe:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014c00:	4618      	mov	r0, r3
 8014c02:	370c      	adds	r7, #12
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bc80      	pop	{r7}
 8014c08:	4770      	bx	lr

08014c0a <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014c0a:	b480      	push	{r7}
 8014c0c:	b083      	sub	sp, #12
 8014c0e:	af00      	add	r7, sp, #0
 8014c10:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014c12:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014c14:	4618      	mov	r0, r3
 8014c16:	370c      	adds	r7, #12
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bc80      	pop	{r7}
 8014c1c:	4770      	bx	lr

08014c1e <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014c1e:	b480      	push	{r7}
 8014c20:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014c22:	bf00      	nop
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bc80      	pop	{r7}
 8014c28:	4770      	bx	lr

08014c2a <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014c2a:	b480      	push	{r7}
 8014c2c:	b083      	sub	sp, #12
 8014c2e:	af00      	add	r7, sp, #0
 8014c30:	4603      	mov	r3, r0
 8014c32:	6039      	str	r1, [r7, #0]
 8014c34:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8014c36:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	370c      	adds	r7, #12
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	bc80      	pop	{r7}
 8014c40:	4770      	bx	lr

08014c42 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014c42:	b480      	push	{r7}
 8014c44:	b083      	sub	sp, #12
 8014c46:	af00      	add	r7, sp, #0
 8014c48:	4603      	mov	r3, r0
 8014c4a:	603a      	str	r2, [r7, #0]
 8014c4c:	80fb      	strh	r3, [r7, #6]
 8014c4e:	460b      	mov	r3, r1
 8014c50:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014c52:	bf00      	nop
 8014c54:	370c      	adds	r7, #12
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bc80      	pop	{r7}
 8014c5a:	4770      	bx	lr

08014c5c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014c5c:	b480      	push	{r7}
 8014c5e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014c60:	bf00      	nop
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bc80      	pop	{r7}
 8014c66:	4770      	bx	lr

08014c68 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8014c68:	b480      	push	{r7}
 8014c6a:	b083      	sub	sp, #12
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8014c70:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	370c      	adds	r7, #12
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bc80      	pop	{r7}
 8014c7a:	4770      	bx	lr

08014c7c <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b083      	sub	sp, #12
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8014c84:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	370c      	adds	r7, #12
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bc80      	pop	{r7}
 8014c8e:	4770      	bx	lr

08014c90 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8014c90:	b480      	push	{r7}
 8014c92:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014c94:	bf00      	nop
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bc80      	pop	{r7}
 8014c9a:	4770      	bx	lr

08014c9c <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8014c9c:	b480      	push	{r7}
 8014c9e:	b083      	sub	sp, #12
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
 8014ca4:	460b      	mov	r3, r1
 8014ca6:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014ca8:	bf00      	nop
 8014caa:	370c      	adds	r7, #12
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bc80      	pop	{r7}
 8014cb0:	4770      	bx	lr

08014cb2 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8014cb2:	b480      	push	{r7}
 8014cb4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014cb6:	bf00      	nop
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bc80      	pop	{r7}
 8014cbc:	4770      	bx	lr

08014cbe <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8014cbe:	b480      	push	{r7}
 8014cc0:	b085      	sub	sp, #20
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014cca:	2300      	movs	r3, #0
 8014ccc:	81fb      	strh	r3, [r7, #14]
 8014cce:	e00a      	b.n	8014ce6 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8014cd0:	89fb      	ldrh	r3, [r7, #14]
 8014cd2:	68ba      	ldr	r2, [r7, #8]
 8014cd4:	4413      	add	r3, r2
 8014cd6:	781b      	ldrb	r3, [r3, #0]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d001      	beq.n	8014ce0 <IsSlotFree+0x22>
        {
            return false;
 8014cdc:	2300      	movs	r3, #0
 8014cde:	e006      	b.n	8014cee <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014ce0:	89fb      	ldrh	r3, [r7, #14]
 8014ce2:	3301      	adds	r3, #1
 8014ce4:	81fb      	strh	r3, [r7, #14]
 8014ce6:	89fb      	ldrh	r3, [r7, #14]
 8014ce8:	2b0f      	cmp	r3, #15
 8014cea:	d9f1      	bls.n	8014cd0 <IsSlotFree+0x12>
        }
    }
    return true;
 8014cec:	2301      	movs	r3, #1
}
 8014cee:	4618      	mov	r0, r3
 8014cf0:	3714      	adds	r7, #20
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bc80      	pop	{r7}
 8014cf6:	4770      	bx	lr

08014cf8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8014d02:	e007      	b.n	8014d14 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8014d04:	79fb      	ldrb	r3, [r7, #7]
 8014d06:	3301      	adds	r3, #1
 8014d08:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8014d0a:	79fb      	ldrb	r3, [r7, #7]
 8014d0c:	2b20      	cmp	r3, #32
 8014d0e:	d101      	bne.n	8014d14 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8014d10:	2300      	movs	r3, #0
 8014d12:	e012      	b.n	8014d3a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8014d14:	79fb      	ldrb	r3, [r7, #7]
 8014d16:	011b      	lsls	r3, r3, #4
 8014d18:	3308      	adds	r3, #8
 8014d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8014d44 <MallocNewMacCommandSlot+0x4c>)
 8014d1c:	4413      	add	r3, r2
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f7ff ffcd 	bl	8014cbe <IsSlotFree>
 8014d24:	4603      	mov	r3, r0
 8014d26:	f083 0301 	eor.w	r3, r3, #1
 8014d2a:	b2db      	uxtb	r3, r3
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d1e9      	bne.n	8014d04 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8014d30:	79fb      	ldrb	r3, [r7, #7]
 8014d32:	011b      	lsls	r3, r3, #4
 8014d34:	3308      	adds	r3, #8
 8014d36:	4a03      	ldr	r2, [pc, #12]	@ (8014d44 <MallocNewMacCommandSlot+0x4c>)
 8014d38:	4413      	add	r3, r2
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3708      	adds	r7, #8
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
 8014d42:	bf00      	nop
 8014d44:	20001af0 	.word	0x20001af0

08014d48 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b082      	sub	sp, #8
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d101      	bne.n	8014d5a <FreeMacCommandSlot+0x12>
    {
        return false;
 8014d56:	2300      	movs	r3, #0
 8014d58:	e005      	b.n	8014d66 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8014d5a:	2210      	movs	r2, #16
 8014d5c:	2100      	movs	r1, #0
 8014d5e:	6878      	ldr	r0, [r7, #4]
 8014d60:	f004 f8e4 	bl	8018f2c <memset1>

    return true;
 8014d64:	2301      	movs	r3, #1
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	3708      	adds	r7, #8
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}

08014d6e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8014d6e:	b480      	push	{r7}
 8014d70:	b083      	sub	sp, #12
 8014d72:	af00      	add	r7, sp, #0
 8014d74:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d101      	bne.n	8014d80 <LinkedListInit+0x12>
    {
        return false;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	e006      	b.n	8014d8e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2200      	movs	r2, #0
 8014d84:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2200      	movs	r2, #0
 8014d8a:	605a      	str	r2, [r3, #4]

    return true;
 8014d8c:	2301      	movs	r3, #1
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	370c      	adds	r7, #12
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bc80      	pop	{r7}
 8014d96:	4770      	bx	lr

08014d98 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b083      	sub	sp, #12
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d002      	beq.n	8014dae <LinkedListAdd+0x16>
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d101      	bne.n	8014db2 <LinkedListAdd+0x1a>
    {
        return false;
 8014dae:	2300      	movs	r3, #0
 8014db0:	e015      	b.n	8014dde <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d102      	bne.n	8014dc0 <LinkedListAdd+0x28>
    {
        list->First = element;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	683a      	ldr	r2, [r7, #0]
 8014dbe:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d003      	beq.n	8014dd0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	685b      	ldr	r3, [r3, #4]
 8014dcc:	683a      	ldr	r2, [r7, #0]
 8014dce:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	683a      	ldr	r2, [r7, #0]
 8014dda:	605a      	str	r2, [r3, #4]

    return true;
 8014ddc:	2301      	movs	r3, #1
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	370c      	adds	r7, #12
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bc80      	pop	{r7}
 8014de6:	4770      	bx	lr

08014de8 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014de8:	b480      	push	{r7}
 8014dea:	b085      	sub	sp, #20
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
 8014df0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d002      	beq.n	8014dfe <LinkedListGetPrevious+0x16>
 8014df8:	683b      	ldr	r3, [r7, #0]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d101      	bne.n	8014e02 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	e016      	b.n	8014e30 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014e08:	683a      	ldr	r2, [r7, #0]
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	d00c      	beq.n	8014e2a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014e10:	e002      	b.n	8014e18 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d007      	beq.n	8014e2e <LinkedListGetPrevious+0x46>
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	683a      	ldr	r2, [r7, #0]
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d1f4      	bne.n	8014e12 <LinkedListGetPrevious+0x2a>
 8014e28:	e001      	b.n	8014e2e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	3714      	adds	r7, #20
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bc80      	pop	{r7}
 8014e38:	4770      	bx	lr

08014e3a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8014e3a:	b580      	push	{r7, lr}
 8014e3c:	b084      	sub	sp, #16
 8014e3e:	af00      	add	r7, sp, #0
 8014e40:	6078      	str	r0, [r7, #4]
 8014e42:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d002      	beq.n	8014e50 <LinkedListRemove+0x16>
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d101      	bne.n	8014e54 <LinkedListRemove+0x1a>
    {
        return false;
 8014e50:	2300      	movs	r3, #0
 8014e52:	e020      	b.n	8014e96 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014e54:	6839      	ldr	r1, [r7, #0]
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f7ff ffc6 	bl	8014de8 <LinkedListGetPrevious>
 8014e5c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	683a      	ldr	r2, [r7, #0]
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d103      	bne.n	8014e70 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	681a      	ldr	r2, [r3, #0]
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	685b      	ldr	r3, [r3, #4]
 8014e74:	683a      	ldr	r2, [r7, #0]
 8014e76:	429a      	cmp	r2, r3
 8014e78:	d102      	bne.n	8014e80 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	68fa      	ldr	r2, [r7, #12]
 8014e7e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d003      	beq.n	8014e8e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8014e86:	683b      	ldr	r3, [r7, #0]
 8014e88:	681a      	ldr	r2, [r3, #0]
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	2200      	movs	r2, #0
 8014e92:	601a      	str	r2, [r3, #0]

    return true;
 8014e94:	2301      	movs	r3, #1
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3710      	adds	r7, #16
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
	...

08014ea0 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014ea0:	b480      	push	{r7}
 8014ea2:	b083      	sub	sp, #12
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8014eaa:	79fb      	ldrb	r3, [r7, #7]
 8014eac:	2b11      	cmp	r3, #17
 8014eae:	bf8c      	ite	hi
 8014eb0:	2201      	movhi	r2, #1
 8014eb2:	2200      	movls	r2, #0
 8014eb4:	b2d2      	uxtb	r2, r2
 8014eb6:	2a00      	cmp	r2, #0
 8014eb8:	d10d      	bne.n	8014ed6 <IsSticky+0x36>
 8014eba:	4a0a      	ldr	r2, [pc, #40]	@ (8014ee4 <IsSticky+0x44>)
 8014ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8014ec0:	f003 0301 	and.w	r3, r3, #1
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	bf14      	ite	ne
 8014ec8:	2301      	movne	r3, #1
 8014eca:	2300      	moveq	r3, #0
 8014ecc:	b2db      	uxtb	r3, r3
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d001      	beq.n	8014ed6 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8014ed2:	2301      	movs	r3, #1
 8014ed4:	e000      	b.n	8014ed8 <IsSticky+0x38>
        default:
            return false;
 8014ed6:	2300      	movs	r3, #0
    }
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	370c      	adds	r7, #12
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bc80      	pop	{r7}
 8014ee0:	4770      	bx	lr
 8014ee2:	bf00      	nop
 8014ee4:	00020720 	.word	0x00020720

08014ee8 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8014ee8:	b480      	push	{r7}
 8014eea:	b083      	sub	sp, #12
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	4603      	mov	r3, r0
 8014ef0:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8014ef2:	2300      	movs	r3, #0
    }
}
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	370c      	adds	r7, #12
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bc80      	pop	{r7}
 8014efc:	4770      	bx	lr
	...

08014f00 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8014f04:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8014f08:	2100      	movs	r1, #0
 8014f0a:	4804      	ldr	r0, [pc, #16]	@ (8014f1c <LoRaMacCommandsInit+0x1c>)
 8014f0c:	f004 f80e 	bl	8018f2c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8014f10:	4802      	ldr	r0, [pc, #8]	@ (8014f1c <LoRaMacCommandsInit+0x1c>)
 8014f12:	f7ff ff2c 	bl	8014d6e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8014f16:	2300      	movs	r3, #0
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	bd80      	pop	{r7, pc}
 8014f1c:	20001af0 	.word	0x20001af0

08014f20 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b086      	sub	sp, #24
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	4603      	mov	r3, r0
 8014f28:	60b9      	str	r1, [r7, #8]
 8014f2a:	607a      	str	r2, [r7, #4]
 8014f2c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d101      	bne.n	8014f38 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014f34:	2301      	movs	r3, #1
 8014f36:	e03b      	b.n	8014fb0 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014f38:	f7ff fede 	bl	8014cf8 <MallocNewMacCommandSlot>
 8014f3c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d101      	bne.n	8014f48 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014f44:	2302      	movs	r3, #2
 8014f46:	e033      	b.n	8014fb0 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8014f48:	6979      	ldr	r1, [r7, #20]
 8014f4a:	481b      	ldr	r0, [pc, #108]	@ (8014fb8 <LoRaMacCommandsAddCmd+0x98>)
 8014f4c:	f7ff ff24 	bl	8014d98 <LinkedListAdd>
 8014f50:	4603      	mov	r3, r0
 8014f52:	f083 0301 	eor.w	r3, r3, #1
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d001      	beq.n	8014f60 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014f5c:	2305      	movs	r3, #5
 8014f5e:	e027      	b.n	8014fb0 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	7bfa      	ldrb	r2, [r7, #15]
 8014f64:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	687a      	ldr	r2, [r7, #4]
 8014f6a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	3305      	adds	r3, #5
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	b292      	uxth	r2, r2
 8014f74:	68b9      	ldr	r1, [r7, #8]
 8014f76:	4618      	mov	r0, r3
 8014f78:	f003 ff9d 	bl	8018eb6 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014f7c:	7bfb      	ldrb	r3, [r7, #15]
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7ff ff8e 	bl	8014ea0 <IsSticky>
 8014f84:	4603      	mov	r3, r0
 8014f86:	461a      	mov	r2, r3
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8014f8c:	7bfb      	ldrb	r3, [r7, #15]
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7ff ffaa 	bl	8014ee8 <IsConfirmationRequired>
 8014f94:	4603      	mov	r3, r0
 8014f96:	461a      	mov	r2, r3
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014f9c:	4b06      	ldr	r3, [pc, #24]	@ (8014fb8 <LoRaMacCommandsAddCmd+0x98>)
 8014f9e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	4413      	add	r3, r2
 8014fa6:	3301      	adds	r3, #1
 8014fa8:	4a03      	ldr	r2, [pc, #12]	@ (8014fb8 <LoRaMacCommandsAddCmd+0x98>)
 8014faa:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8014fae:	2300      	movs	r3, #0
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	3718      	adds	r7, #24
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bd80      	pop	{r7, pc}
 8014fb8:	20001af0 	.word	0x20001af0

08014fbc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b082      	sub	sp, #8
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d101      	bne.n	8014fce <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014fca:	2301      	movs	r3, #1
 8014fcc:	e021      	b.n	8015012 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8014fce:	6879      	ldr	r1, [r7, #4]
 8014fd0:	4812      	ldr	r0, [pc, #72]	@ (801501c <LoRaMacCommandsRemoveCmd+0x60>)
 8014fd2:	f7ff ff32 	bl	8014e3a <LinkedListRemove>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	f083 0301 	eor.w	r3, r3, #1
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d001      	beq.n	8014fe6 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014fe2:	2303      	movs	r3, #3
 8014fe4:	e015      	b.n	8015012 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014fe6:	4b0d      	ldr	r3, [pc, #52]	@ (801501c <LoRaMacCommandsRemoveCmd+0x60>)
 8014fe8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	689b      	ldr	r3, [r3, #8]
 8014ff0:	1ad3      	subs	r3, r2, r3
 8014ff2:	3b01      	subs	r3, #1
 8014ff4:	4a09      	ldr	r2, [pc, #36]	@ (801501c <LoRaMacCommandsRemoveCmd+0x60>)
 8014ff6:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f7ff fea4 	bl	8014d48 <FreeMacCommandSlot>
 8015000:	4603      	mov	r3, r0
 8015002:	f083 0301 	eor.w	r3, r3, #1
 8015006:	b2db      	uxtb	r3, r3
 8015008:	2b00      	cmp	r3, #0
 801500a:	d001      	beq.n	8015010 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 801500c:	2305      	movs	r3, #5
 801500e:	e000      	b.n	8015012 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015010:	2300      	movs	r3, #0
}
 8015012:	4618      	mov	r0, r3
 8015014:	3708      	adds	r7, #8
 8015016:	46bd      	mov	sp, r7
 8015018:	bd80      	pop	{r7, pc}
 801501a:	bf00      	nop
 801501c:	20001af0 	.word	0x20001af0

08015020 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8015020:	b480      	push	{r7}
 8015022:	b085      	sub	sp, #20
 8015024:	af00      	add	r7, sp, #0
 8015026:	4603      	mov	r3, r0
 8015028:	6039      	str	r1, [r7, #0]
 801502a:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801502c:	4b0e      	ldr	r3, [pc, #56]	@ (8015068 <LoRaMacCommandsGetCmd+0x48>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015032:	e002      	b.n	801503a <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d004      	beq.n	801504a <LoRaMacCommandsGetCmd+0x2a>
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	791b      	ldrb	r3, [r3, #4]
 8015044:	79fa      	ldrb	r2, [r7, #7]
 8015046:	429a      	cmp	r2, r3
 8015048:	d1f4      	bne.n	8015034 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	68fa      	ldr	r2, [r7, #12]
 801504e:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d101      	bne.n	801505a <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015056:	2303      	movs	r3, #3
 8015058:	e000      	b.n	801505c <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 801505a:	2300      	movs	r3, #0
}
 801505c:	4618      	mov	r0, r3
 801505e:	3714      	adds	r7, #20
 8015060:	46bd      	mov	sp, r7
 8015062:	bc80      	pop	{r7}
 8015064:	4770      	bx	lr
 8015066:	bf00      	nop
 8015068:	20001af0 	.word	0x20001af0

0801506c <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015072:	4b0f      	ldr	r3, [pc, #60]	@ (80150b0 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015078:	e012      	b.n	80150a0 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	7b1b      	ldrb	r3, [r3, #12]
 801507e:	f083 0301 	eor.w	r3, r3, #1
 8015082:	b2db      	uxtb	r3, r3
 8015084:	2b00      	cmp	r3, #0
 8015086:	d008      	beq.n	801509a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f7ff ff94 	bl	8014fbc <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	607b      	str	r3, [r7, #4]
 8015098:	e002      	b.n	80150a0 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d1e9      	bne.n	801507a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80150a6:	2300      	movs	r3, #0
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	3708      	adds	r7, #8
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}
 80150b0:	20001af0 	.word	0x20001af0

080150b4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b082      	sub	sp, #8
 80150b8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80150ba:	4b13      	ldr	r3, [pc, #76]	@ (8015108 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80150c0:	e01a      	b.n	80150f8 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	791b      	ldrb	r3, [r3, #4]
 80150cc:	4618      	mov	r0, r3
 80150ce:	f7ff fee7 	bl	8014ea0 <IsSticky>
 80150d2:	4603      	mov	r3, r0
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d00d      	beq.n	80150f4 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	791b      	ldrb	r3, [r3, #4]
 80150dc:	4618      	mov	r0, r3
 80150de:	f7ff ff03 	bl	8014ee8 <IsConfirmationRequired>
 80150e2:	4603      	mov	r3, r0
 80150e4:	f083 0301 	eor.w	r3, r3, #1
 80150e8:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d002      	beq.n	80150f4 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f7ff ff64 	bl	8014fbc <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d1e1      	bne.n	80150c2 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80150fe:	2300      	movs	r3, #0
}
 8015100:	4618      	mov	r0, r3
 8015102:	3708      	adds	r7, #8
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}
 8015108:	20001af0 	.word	0x20001af0

0801510c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 801510c:	b480      	push	{r7}
 801510e:	b083      	sub	sp, #12
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d101      	bne.n	801511e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801511a:	2301      	movs	r3, #1
 801511c:	e005      	b.n	801512a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801511e:	4b05      	ldr	r3, [pc, #20]	@ (8015134 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015120:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015128:	2300      	movs	r3, #0
}
 801512a:	4618      	mov	r0, r3
 801512c:	370c      	adds	r7, #12
 801512e:	46bd      	mov	sp, r7
 8015130:	bc80      	pop	{r7}
 8015132:	4770      	bx	lr
 8015134:	20001af0 	.word	0x20001af0

08015138 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b088      	sub	sp, #32
 801513c:	af00      	add	r7, sp, #0
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8015144:	4b25      	ldr	r3, [pc, #148]	@ (80151dc <LoRaMacCommandsSerializeCmds+0xa4>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801514a:	2300      	movs	r3, #0
 801514c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d002      	beq.n	801515a <LoRaMacCommandsSerializeCmds+0x22>
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d126      	bne.n	80151a8 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801515a:	2301      	movs	r3, #1
 801515c:	e039      	b.n	80151d2 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801515e:	7efb      	ldrb	r3, [r7, #27]
 8015160:	68fa      	ldr	r2, [r7, #12]
 8015162:	1ad2      	subs	r2, r2, r3
 8015164:	69fb      	ldr	r3, [r7, #28]
 8015166:	689b      	ldr	r3, [r3, #8]
 8015168:	3301      	adds	r3, #1
 801516a:	429a      	cmp	r2, r3
 801516c:	d320      	bcc.n	80151b0 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801516e:	7efb      	ldrb	r3, [r7, #27]
 8015170:	1c5a      	adds	r2, r3, #1
 8015172:	76fa      	strb	r2, [r7, #27]
 8015174:	461a      	mov	r2, r3
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	4413      	add	r3, r2
 801517a:	69fa      	ldr	r2, [r7, #28]
 801517c:	7912      	ldrb	r2, [r2, #4]
 801517e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015180:	7efb      	ldrb	r3, [r7, #27]
 8015182:	687a      	ldr	r2, [r7, #4]
 8015184:	18d0      	adds	r0, r2, r3
 8015186:	69fb      	ldr	r3, [r7, #28]
 8015188:	1d59      	adds	r1, r3, #5
 801518a:	69fb      	ldr	r3, [r7, #28]
 801518c:	689b      	ldr	r3, [r3, #8]
 801518e:	b29b      	uxth	r3, r3
 8015190:	461a      	mov	r2, r3
 8015192:	f003 fe90 	bl	8018eb6 <memcpy1>
            itr += curElement->PayloadSize;
 8015196:	69fb      	ldr	r3, [r7, #28]
 8015198:	689b      	ldr	r3, [r3, #8]
 801519a:	b2da      	uxtb	r2, r3
 801519c:	7efb      	ldrb	r3, [r7, #27]
 801519e:	4413      	add	r3, r2
 80151a0:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80151a2:	69fb      	ldr	r3, [r7, #28]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80151a8:	69fb      	ldr	r3, [r7, #28]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d1d7      	bne.n	801515e <LoRaMacCommandsSerializeCmds+0x26>
 80151ae:	e009      	b.n	80151c4 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80151b0:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80151b2:	e007      	b.n	80151c4 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80151b4:	69fb      	ldr	r3, [r7, #28]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80151ba:	69f8      	ldr	r0, [r7, #28]
 80151bc:	f7ff fefe 	bl	8014fbc <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80151c0:	697b      	ldr	r3, [r7, #20]
 80151c2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80151c4:	69fb      	ldr	r3, [r7, #28]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d1f4      	bne.n	80151b4 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80151ca:	68b8      	ldr	r0, [r7, #8]
 80151cc:	f7ff ff9e 	bl	801510c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80151d0:	2300      	movs	r3, #0
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	3720      	adds	r7, #32
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bd80      	pop	{r7, pc}
 80151da:	bf00      	nop
 80151dc:	20001af0 	.word	0x20001af0

080151e0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80151e0:	b480      	push	{r7}
 80151e2:	b085      	sub	sp, #20
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	4603      	mov	r3, r0
 80151e8:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80151ea:	2300      	movs	r3, #0
 80151ec:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80151ee:	79fb      	ldrb	r3, [r7, #7]
 80151f0:	3b02      	subs	r3, #2
 80151f2:	2b11      	cmp	r3, #17
 80151f4:	d850      	bhi.n	8015298 <LoRaMacCommandsGetCmdSize+0xb8>
 80151f6:	a201      	add	r2, pc, #4	@ (adr r2, 80151fc <LoRaMacCommandsGetCmdSize+0x1c>)
 80151f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151fc:	08015245 	.word	0x08015245
 8015200:	0801524b 	.word	0x0801524b
 8015204:	08015251 	.word	0x08015251
 8015208:	08015257 	.word	0x08015257
 801520c:	0801525d 	.word	0x0801525d
 8015210:	08015263 	.word	0x08015263
 8015214:	08015269 	.word	0x08015269
 8015218:	0801526f 	.word	0x0801526f
 801521c:	08015275 	.word	0x08015275
 8015220:	08015299 	.word	0x08015299
 8015224:	08015299 	.word	0x08015299
 8015228:	0801527b 	.word	0x0801527b
 801522c:	08015299 	.word	0x08015299
 8015230:	08015299 	.word	0x08015299
 8015234:	08015281 	.word	0x08015281
 8015238:	08015287 	.word	0x08015287
 801523c:	0801528d 	.word	0x0801528d
 8015240:	08015293 	.word	0x08015293
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8015244:	2303      	movs	r3, #3
 8015246:	73fb      	strb	r3, [r7, #15]
            break;
 8015248:	e027      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801524a:	2305      	movs	r3, #5
 801524c:	73fb      	strb	r3, [r7, #15]
            break;
 801524e:	e024      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8015250:	2302      	movs	r3, #2
 8015252:	73fb      	strb	r3, [r7, #15]
            break;
 8015254:	e021      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8015256:	2305      	movs	r3, #5
 8015258:	73fb      	strb	r3, [r7, #15]
            break;
 801525a:	e01e      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 801525c:	2301      	movs	r3, #1
 801525e:	73fb      	strb	r3, [r7, #15]
            break;
 8015260:	e01b      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8015262:	2306      	movs	r3, #6
 8015264:	73fb      	strb	r3, [r7, #15]
            break;
 8015266:	e018      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015268:	2302      	movs	r3, #2
 801526a:	73fb      	strb	r3, [r7, #15]
            break;
 801526c:	e015      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801526e:	2302      	movs	r3, #2
 8015270:	73fb      	strb	r3, [r7, #15]
            break;
 8015272:	e012      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015274:	2305      	movs	r3, #5
 8015276:	73fb      	strb	r3, [r7, #15]
            break;
 8015278:	e00f      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801527a:	2306      	movs	r3, #6
 801527c:	73fb      	strb	r3, [r7, #15]
            break;
 801527e:	e00c      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015280:	2301      	movs	r3, #1
 8015282:	73fb      	strb	r3, [r7, #15]
            break;
 8015284:	e009      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015286:	2305      	movs	r3, #5
 8015288:	73fb      	strb	r3, [r7, #15]
            break;
 801528a:	e006      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801528c:	2304      	movs	r3, #4
 801528e:	73fb      	strb	r3, [r7, #15]
            break;
 8015290:	e003      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015292:	2304      	movs	r3, #4
 8015294:	73fb      	strb	r3, [r7, #15]
            break;
 8015296:	e000      	b.n	801529a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015298:	bf00      	nop
        }
    }
    return cidSize;
 801529a:	7bfb      	ldrb	r3, [r7, #15]
}
 801529c:	4618      	mov	r0, r3
 801529e:	3714      	adds	r7, #20
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bc80      	pop	{r7}
 80152a4:	4770      	bx	lr
 80152a6:	bf00      	nop

080152a8 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80152a8:	b480      	push	{r7}
 80152aa:	b083      	sub	sp, #12
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	4a07      	ldr	r2, [pc, #28]	@ (80152d0 <IncreaseBufferPointer+0x28>)
 80152b4:	4293      	cmp	r3, r2
 80152b6:	d102      	bne.n	80152be <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80152b8:	4b06      	ldr	r3, [pc, #24]	@ (80152d4 <IncreaseBufferPointer+0x2c>)
 80152ba:	607b      	str	r3, [r7, #4]
 80152bc:	e002      	b.n	80152c4 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	3304      	adds	r3, #4
 80152c2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80152c4:	687b      	ldr	r3, [r7, #4]
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	370c      	adds	r7, #12
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bc80      	pop	{r7}
 80152ce:	4770      	bx	lr
 80152d0:	20001d18 	.word	0x20001d18
 80152d4:	20001d08 	.word	0x20001d08

080152d8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80152d8:	b480      	push	{r7}
 80152da:	b083      	sub	sp, #12
 80152dc:	af00      	add	r7, sp, #0
 80152de:	4603      	mov	r3, r0
 80152e0:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80152e2:	79fb      	ldrb	r3, [r7, #7]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d101      	bne.n	80152ec <IsListEmpty+0x14>
    {
        return true;
 80152e8:	2301      	movs	r3, #1
 80152ea:	e000      	b.n	80152ee <IsListEmpty+0x16>
    }
    return false;
 80152ec:	2300      	movs	r3, #0
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	370c      	adds	r7, #12
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bc80      	pop	{r7}
 80152f6:	4770      	bx	lr

080152f8 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80152f8:	b480      	push	{r7}
 80152fa:	b083      	sub	sp, #12
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	4603      	mov	r3, r0
 8015300:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8015302:	79fb      	ldrb	r3, [r7, #7]
 8015304:	2b04      	cmp	r3, #4
 8015306:	d901      	bls.n	801530c <IsListFull+0x14>
    {
        return true;
 8015308:	2301      	movs	r3, #1
 801530a:	e000      	b.n	801530e <IsListFull+0x16>
    }
    return false;
 801530c:	2300      	movs	r3, #0
}
 801530e:	4618      	mov	r0, r3
 8015310:	370c      	adds	r7, #12
 8015312:	46bd      	mov	sp, r7
 8015314:	bc80      	pop	{r7}
 8015316:	4770      	bx	lr

08015318 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b086      	sub	sp, #24
 801531c:	af00      	add	r7, sp, #0
 801531e:	4603      	mov	r3, r0
 8015320:	60b9      	str	r1, [r7, #8]
 8015322:	607a      	str	r2, [r7, #4]
 8015324:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801532a:	4b13      	ldr	r3, [pc, #76]	@ (8015378 <GetElement+0x60>)
 801532c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015330:	4618      	mov	r0, r3
 8015332:	f7ff ffd1 	bl	80152d8 <IsListEmpty>
 8015336:	4603      	mov	r3, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d001      	beq.n	8015340 <GetElement+0x28>
    {
        return NULL;
 801533c:	2300      	movs	r3, #0
 801533e:	e017      	b.n	8015370 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015340:	2300      	movs	r3, #0
 8015342:	74fb      	strb	r3, [r7, #19]
 8015344:	e00d      	b.n	8015362 <GetElement+0x4a>
    {
        if( element->Request == request )
 8015346:	697b      	ldr	r3, [r7, #20]
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	7bfa      	ldrb	r2, [r7, #15]
 801534c:	429a      	cmp	r2, r3
 801534e:	d101      	bne.n	8015354 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	e00d      	b.n	8015370 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8015354:	6978      	ldr	r0, [r7, #20]
 8015356:	f7ff ffa7 	bl	80152a8 <IncreaseBufferPointer>
 801535a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801535c:	7cfb      	ldrb	r3, [r7, #19]
 801535e:	3301      	adds	r3, #1
 8015360:	74fb      	strb	r3, [r7, #19]
 8015362:	4b05      	ldr	r3, [pc, #20]	@ (8015378 <GetElement+0x60>)
 8015364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015368:	7cfa      	ldrb	r2, [r7, #19]
 801536a:	429a      	cmp	r2, r3
 801536c:	d3eb      	bcc.n	8015346 <GetElement+0x2e>
    }

    return NULL;
 801536e:	2300      	movs	r3, #0
}
 8015370:	4618      	mov	r0, r3
 8015372:	3718      	adds	r7, #24
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}
 8015378:	20001cfc 	.word	0x20001cfc

0801537c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8015384:	4a0c      	ldr	r2, [pc, #48]	@ (80153b8 <LoRaMacConfirmQueueInit+0x3c>)
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801538a:	4b0b      	ldr	r3, [pc, #44]	@ (80153b8 <LoRaMacConfirmQueueInit+0x3c>)
 801538c:	2200      	movs	r2, #0
 801538e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015392:	4b09      	ldr	r3, [pc, #36]	@ (80153b8 <LoRaMacConfirmQueueInit+0x3c>)
 8015394:	4a09      	ldr	r2, [pc, #36]	@ (80153bc <LoRaMacConfirmQueueInit+0x40>)
 8015396:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015398:	4b07      	ldr	r3, [pc, #28]	@ (80153b8 <LoRaMacConfirmQueueInit+0x3c>)
 801539a:	4a08      	ldr	r2, [pc, #32]	@ (80153bc <LoRaMacConfirmQueueInit+0x40>)
 801539c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801539e:	2214      	movs	r2, #20
 80153a0:	21ff      	movs	r1, #255	@ 0xff
 80153a2:	4806      	ldr	r0, [pc, #24]	@ (80153bc <LoRaMacConfirmQueueInit+0x40>)
 80153a4:	f003 fdc2 	bl	8018f2c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80153a8:	4b03      	ldr	r3, [pc, #12]	@ (80153b8 <LoRaMacConfirmQueueInit+0x3c>)
 80153aa:	2201      	movs	r2, #1
 80153ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80153b0:	bf00      	nop
 80153b2:	3708      	adds	r7, #8
 80153b4:	46bd      	mov	sp, r7
 80153b6:	bd80      	pop	{r7, pc}
 80153b8:	20001cfc 	.word	0x20001cfc
 80153bc:	20001d08 	.word	0x20001d08

080153c0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80153c8:	4b19      	ldr	r3, [pc, #100]	@ (8015430 <LoRaMacConfirmQueueAdd+0x70>)
 80153ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7ff ff92 	bl	80152f8 <IsListFull>
 80153d4:	4603      	mov	r3, r0
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d001      	beq.n	80153de <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80153da:	2300      	movs	r3, #0
 80153dc:	e024      	b.n	8015428 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80153de:	4b14      	ldr	r3, [pc, #80]	@ (8015430 <LoRaMacConfirmQueueAdd+0x70>)
 80153e0:	689b      	ldr	r3, [r3, #8]
 80153e2:	687a      	ldr	r2, [r7, #4]
 80153e4:	7812      	ldrb	r2, [r2, #0]
 80153e6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80153e8:	4b11      	ldr	r3, [pc, #68]	@ (8015430 <LoRaMacConfirmQueueAdd+0x70>)
 80153ea:	689b      	ldr	r3, [r3, #8]
 80153ec:	687a      	ldr	r2, [r7, #4]
 80153ee:	7852      	ldrb	r2, [r2, #1]
 80153f0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80153f2:	4b0f      	ldr	r3, [pc, #60]	@ (8015430 <LoRaMacConfirmQueueAdd+0x70>)
 80153f4:	689b      	ldr	r3, [r3, #8]
 80153f6:	687a      	ldr	r2, [r7, #4]
 80153f8:	78d2      	ldrb	r2, [r2, #3]
 80153fa:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80153fc:	4b0c      	ldr	r3, [pc, #48]	@ (8015430 <LoRaMacConfirmQueueAdd+0x70>)
 80153fe:	689b      	ldr	r3, [r3, #8]
 8015400:	687a      	ldr	r2, [r7, #4]
 8015402:	7892      	ldrb	r2, [r2, #2]
 8015404:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8015406:	4b0a      	ldr	r3, [pc, #40]	@ (8015430 <LoRaMacConfirmQueueAdd+0x70>)
 8015408:	f893 3020 	ldrb.w	r3, [r3, #32]
 801540c:	3301      	adds	r3, #1
 801540e:	b2da      	uxtb	r2, r3
 8015410:	4b07      	ldr	r3, [pc, #28]	@ (8015430 <LoRaMacConfirmQueueAdd+0x70>)
 8015412:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8015416:	4b06      	ldr	r3, [pc, #24]	@ (8015430 <LoRaMacConfirmQueueAdd+0x70>)
 8015418:	689b      	ldr	r3, [r3, #8]
 801541a:	4618      	mov	r0, r3
 801541c:	f7ff ff44 	bl	80152a8 <IncreaseBufferPointer>
 8015420:	4603      	mov	r3, r0
 8015422:	4a03      	ldr	r2, [pc, #12]	@ (8015430 <LoRaMacConfirmQueueAdd+0x70>)
 8015424:	6093      	str	r3, [r2, #8]

    return true;
 8015426:	2301      	movs	r3, #1
}
 8015428:	4618      	mov	r0, r3
 801542a:	3708      	adds	r7, #8
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}
 8015430:	20001cfc 	.word	0x20001cfc

08015434 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015434:	b580      	push	{r7, lr}
 8015436:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015438:	4b0e      	ldr	r3, [pc, #56]	@ (8015474 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801543a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801543e:	4618      	mov	r0, r3
 8015440:	f7ff ff4a 	bl	80152d8 <IsListEmpty>
 8015444:	4603      	mov	r3, r0
 8015446:	2b00      	cmp	r3, #0
 8015448:	d001      	beq.n	801544e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801544a:	2300      	movs	r3, #0
 801544c:	e010      	b.n	8015470 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801544e:	4b09      	ldr	r3, [pc, #36]	@ (8015474 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015454:	3b01      	subs	r3, #1
 8015456:	b2da      	uxtb	r2, r3
 8015458:	4b06      	ldr	r3, [pc, #24]	@ (8015474 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801545a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801545e:	4b05      	ldr	r3, [pc, #20]	@ (8015474 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015460:	685b      	ldr	r3, [r3, #4]
 8015462:	4618      	mov	r0, r3
 8015464:	f7ff ff20 	bl	80152a8 <IncreaseBufferPointer>
 8015468:	4603      	mov	r3, r0
 801546a:	4a02      	ldr	r2, [pc, #8]	@ (8015474 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801546c:	6053      	str	r3, [r2, #4]

    return true;
 801546e:	2301      	movs	r3, #1
}
 8015470:	4618      	mov	r0, r3
 8015472:	bd80      	pop	{r7, pc}
 8015474:	20001cfc 	.word	0x20001cfc

08015478 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b084      	sub	sp, #16
 801547c:	af00      	add	r7, sp, #0
 801547e:	4603      	mov	r3, r0
 8015480:	460a      	mov	r2, r1
 8015482:	71fb      	strb	r3, [r7, #7]
 8015484:	4613      	mov	r3, r2
 8015486:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8015488:	2300      	movs	r3, #0
 801548a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801548c:	4b10      	ldr	r3, [pc, #64]	@ (80154d0 <LoRaMacConfirmQueueSetStatus+0x58>)
 801548e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015492:	4618      	mov	r0, r3
 8015494:	f7ff ff20 	bl	80152d8 <IsListEmpty>
 8015498:	4603      	mov	r3, r0
 801549a:	f083 0301 	eor.w	r3, r3, #1
 801549e:	b2db      	uxtb	r3, r3
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d011      	beq.n	80154c8 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80154a4:	4b0a      	ldr	r3, [pc, #40]	@ (80154d0 <LoRaMacConfirmQueueSetStatus+0x58>)
 80154a6:	6859      	ldr	r1, [r3, #4]
 80154a8:	4b09      	ldr	r3, [pc, #36]	@ (80154d0 <LoRaMacConfirmQueueSetStatus+0x58>)
 80154aa:	689a      	ldr	r2, [r3, #8]
 80154ac:	79bb      	ldrb	r3, [r7, #6]
 80154ae:	4618      	mov	r0, r3
 80154b0:	f7ff ff32 	bl	8015318 <GetElement>
 80154b4:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d005      	beq.n	80154c8 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	79fa      	ldrb	r2, [r7, #7]
 80154c0:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	2201      	movs	r2, #1
 80154c6:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80154c8:	bf00      	nop
 80154ca:	3710      	adds	r7, #16
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}
 80154d0:	20001cfc 	.word	0x20001cfc

080154d4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b084      	sub	sp, #16
 80154d8:	af00      	add	r7, sp, #0
 80154da:	4603      	mov	r3, r0
 80154dc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80154de:	2300      	movs	r3, #0
 80154e0:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80154e2:	4b10      	ldr	r3, [pc, #64]	@ (8015524 <LoRaMacConfirmQueueGetStatus+0x50>)
 80154e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7ff fef5 	bl	80152d8 <IsListEmpty>
 80154ee:	4603      	mov	r3, r0
 80154f0:	f083 0301 	eor.w	r3, r3, #1
 80154f4:	b2db      	uxtb	r3, r3
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d00e      	beq.n	8015518 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80154fa:	4b0a      	ldr	r3, [pc, #40]	@ (8015524 <LoRaMacConfirmQueueGetStatus+0x50>)
 80154fc:	6859      	ldr	r1, [r3, #4]
 80154fe:	4b09      	ldr	r3, [pc, #36]	@ (8015524 <LoRaMacConfirmQueueGetStatus+0x50>)
 8015500:	689a      	ldr	r2, [r3, #8]
 8015502:	79fb      	ldrb	r3, [r7, #7]
 8015504:	4618      	mov	r0, r3
 8015506:	f7ff ff07 	bl	8015318 <GetElement>
 801550a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d002      	beq.n	8015518 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	785b      	ldrb	r3, [r3, #1]
 8015516:	e000      	b.n	801551a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015518:	2301      	movs	r3, #1
}
 801551a:	4618      	mov	r0, r3
 801551c:	3710      	adds	r7, #16
 801551e:	46bd      	mov	sp, r7
 8015520:	bd80      	pop	{r7, pc}
 8015522:	bf00      	nop
 8015524:	20001cfc 	.word	0x20001cfc

08015528 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b084      	sub	sp, #16
 801552c:	af00      	add	r7, sp, #0
 801552e:	4603      	mov	r3, r0
 8015530:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015532:	4b16      	ldr	r3, [pc, #88]	@ (801558c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015534:	685b      	ldr	r3, [r3, #4]
 8015536:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8015538:	4a14      	ldr	r2, [pc, #80]	@ (801558c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801553a:	79fb      	ldrb	r3, [r7, #7]
 801553c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015540:	4b12      	ldr	r3, [pc, #72]	@ (801558c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015546:	4618      	mov	r0, r3
 8015548:	f7ff fec6 	bl	80152d8 <IsListEmpty>
 801554c:	4603      	mov	r3, r0
 801554e:	f083 0301 	eor.w	r3, r3, #1
 8015552:	b2db      	uxtb	r3, r3
 8015554:	2b00      	cmp	r3, #0
 8015556:	d015      	beq.n	8015584 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	79fa      	ldrb	r2, [r7, #7]
 801555c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	78db      	ldrb	r3, [r3, #3]
 8015562:	f083 0301 	eor.w	r3, r3, #1
 8015566:	b2db      	uxtb	r3, r3
 8015568:	2b00      	cmp	r3, #0
 801556a:	d002      	beq.n	8015572 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	2201      	movs	r2, #1
 8015570:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8015572:	68f8      	ldr	r0, [r7, #12]
 8015574:	f7ff fe98 	bl	80152a8 <IncreaseBufferPointer>
 8015578:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801557a:	4b04      	ldr	r3, [pc, #16]	@ (801558c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801557c:	689b      	ldr	r3, [r3, #8]
 801557e:	68fa      	ldr	r2, [r7, #12]
 8015580:	429a      	cmp	r2, r3
 8015582:	d1e9      	bne.n	8015558 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8015584:	bf00      	nop
 8015586:	3710      	adds	r7, #16
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	20001cfc 	.word	0x20001cfc

08015590 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b082      	sub	sp, #8
 8015594:	af00      	add	r7, sp, #0
 8015596:	4603      	mov	r3, r0
 8015598:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801559a:	4b09      	ldr	r3, [pc, #36]	@ (80155c0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801559c:	6859      	ldr	r1, [r3, #4]
 801559e:	4b08      	ldr	r3, [pc, #32]	@ (80155c0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80155a0:	689a      	ldr	r2, [r3, #8]
 80155a2:	79fb      	ldrb	r3, [r7, #7]
 80155a4:	4618      	mov	r0, r3
 80155a6:	f7ff feb7 	bl	8015318 <GetElement>
 80155aa:	4603      	mov	r3, r0
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d001      	beq.n	80155b4 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80155b0:	2301      	movs	r3, #1
 80155b2:	e000      	b.n	80155b6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80155b4:	2300      	movs	r3, #0
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	3708      	adds	r7, #8
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}
 80155be:	bf00      	nop
 80155c0:	20001cfc 	.word	0x20001cfc

080155c4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b084      	sub	sp, #16
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80155cc:	4b25      	ldr	r3, [pc, #148]	@ (8015664 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80155ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80155d2:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80155d4:	2300      	movs	r3, #0
 80155d6:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 80155d8:	f107 0308 	add.w	r3, r7, #8
 80155dc:	2204      	movs	r2, #4
 80155de:	2100      	movs	r1, #0
 80155e0:	4618      	mov	r0, r3
 80155e2:	f003 fca3 	bl	8018f2c <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80155e6:	2300      	movs	r3, #0
 80155e8:	73fb      	strb	r3, [r7, #15]
 80155ea:	e032      	b.n	8015652 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80155ec:	4b1d      	ldr	r3, [pc, #116]	@ (8015664 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80155ee:	685b      	ldr	r3, [r3, #4]
 80155f0:	781a      	ldrb	r2, [r3, #0]
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80155f6:	4b1b      	ldr	r3, [pc, #108]	@ (8015664 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80155f8:	685b      	ldr	r3, [r3, #4]
 80155fa:	785a      	ldrb	r2, [r3, #1]
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015600:	4b18      	ldr	r3, [pc, #96]	@ (8015664 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015602:	685b      	ldr	r3, [r3, #4]
 8015604:	789b      	ldrb	r3, [r3, #2]
 8015606:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8015608:	7b7b      	ldrb	r3, [r7, #13]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d005      	beq.n	801561a <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 801560e:	4b15      	ldr	r3, [pc, #84]	@ (8015664 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	689b      	ldr	r3, [r3, #8]
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	4798      	blx	r3
 8015618:	e00b      	b.n	8015632 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801561a:	4b12      	ldr	r3, [pc, #72]	@ (8015664 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801561c:	685b      	ldr	r3, [r3, #4]
 801561e:	781b      	ldrb	r3, [r3, #0]
 8015620:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015622:	4b10      	ldr	r3, [pc, #64]	@ (8015664 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	785b      	ldrb	r3, [r3, #1]
 8015628:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801562a:	4b0e      	ldr	r3, [pc, #56]	@ (8015664 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801562c:	685b      	ldr	r3, [r3, #4]
 801562e:	78db      	ldrb	r3, [r3, #3]
 8015630:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015632:	f7ff feff 	bl	8015434 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8015636:	7b7b      	ldrb	r3, [r7, #13]
 8015638:	f083 0301 	eor.w	r3, r3, #1
 801563c:	b2db      	uxtb	r3, r3
 801563e:	2b00      	cmp	r3, #0
 8015640:	d004      	beq.n	801564c <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8015642:	f107 0308 	add.w	r3, r7, #8
 8015646:	4618      	mov	r0, r3
 8015648:	f7ff feba 	bl	80153c0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801564c:	7bfb      	ldrb	r3, [r7, #15]
 801564e:	3301      	adds	r3, #1
 8015650:	73fb      	strb	r3, [r7, #15]
 8015652:	7bfa      	ldrb	r2, [r7, #15]
 8015654:	7bbb      	ldrb	r3, [r7, #14]
 8015656:	429a      	cmp	r2, r3
 8015658:	d3c8      	bcc.n	80155ec <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801565a:	bf00      	nop
 801565c:	bf00      	nop
 801565e:	3710      	adds	r7, #16
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}
 8015664:	20001cfc 	.word	0x20001cfc

08015668 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8015668:	b480      	push	{r7}
 801566a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 801566c:	4b03      	ldr	r3, [pc, #12]	@ (801567c <LoRaMacConfirmQueueGetCnt+0x14>)
 801566e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8015672:	4618      	mov	r0, r3
 8015674:	46bd      	mov	sp, r7
 8015676:	bc80      	pop	{r7}
 8015678:	4770      	bx	lr
 801567a:	bf00      	nop
 801567c:	20001cfc 	.word	0x20001cfc

08015680 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015680:	b580      	push	{r7, lr}
 8015682:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015684:	4b06      	ldr	r3, [pc, #24]	@ (80156a0 <LoRaMacConfirmQueueIsFull+0x20>)
 8015686:	f893 3020 	ldrb.w	r3, [r3, #32]
 801568a:	4618      	mov	r0, r3
 801568c:	f7ff fe34 	bl	80152f8 <IsListFull>
 8015690:	4603      	mov	r3, r0
 8015692:	2b00      	cmp	r3, #0
 8015694:	d001      	beq.n	801569a <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8015696:	2301      	movs	r3, #1
 8015698:	e000      	b.n	801569c <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801569a:	2300      	movs	r3, #0
    }
}
 801569c:	4618      	mov	r0, r3
 801569e:	bd80      	pop	{r7, pc}
 80156a0:	20001cfc 	.word	0x20001cfc

080156a4 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b08e      	sub	sp, #56	@ 0x38
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	60f8      	str	r0, [r7, #12]
 80156ac:	607b      	str	r3, [r7, #4]
 80156ae:	460b      	mov	r3, r1
 80156b0:	817b      	strh	r3, [r7, #10]
 80156b2:	4613      	mov	r3, r2
 80156b4:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d101      	bne.n	80156c0 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80156bc:	2309      	movs	r3, #9
 80156be:	e084      	b.n	80157ca <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 80156c0:	2300      	movs	r3, #0
 80156c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 80156c6:	2301      	movs	r3, #1
 80156c8:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 80156ca:	f107 0320 	add.w	r3, r7, #32
 80156ce:	2200      	movs	r2, #0
 80156d0:	601a      	str	r2, [r3, #0]
 80156d2:	605a      	str	r2, [r3, #4]
 80156d4:	609a      	str	r2, [r3, #8]
 80156d6:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 80156d8:	f107 0310 	add.w	r3, r7, #16
 80156dc:	2200      	movs	r2, #0
 80156de:	601a      	str	r2, [r3, #0]
 80156e0:	605a      	str	r2, [r3, #4]
 80156e2:	609a      	str	r2, [r3, #8]
 80156e4:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 80156e6:	2301      	movs	r3, #1
 80156e8:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80156ea:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80156ee:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	b2db      	uxtb	r3, r3
 80156f4:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	0a1b      	lsrs	r3, r3, #8
 80156fa:	b2db      	uxtb	r3, r3
 80156fc:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	0c1b      	lsrs	r3, r3, #16
 8015702:	b2db      	uxtb	r3, r3
 8015704:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	0e1b      	lsrs	r3, r3, #24
 801570a:	b2db      	uxtb	r3, r3
 801570c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801570e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015710:	b2db      	uxtb	r3, r3
 8015712:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015716:	0a1b      	lsrs	r3, r3, #8
 8015718:	b2db      	uxtb	r3, r3
 801571a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801571c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801571e:	0c1b      	lsrs	r3, r3, #16
 8015720:	b2db      	uxtb	r3, r3
 8015722:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015726:	0e1b      	lsrs	r3, r3, #24
 8015728:	b2db      	uxtb	r3, r3
 801572a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801572c:	e048      	b.n	80157c0 <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 801572e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015730:	b2db      	uxtb	r3, r3
 8015732:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015734:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015736:	3301      	adds	r3, #1
 8015738:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801573a:	f107 0320 	add.w	r3, r7, #32
 801573e:	7a7a      	ldrb	r2, [r7, #9]
 8015740:	f107 0010 	add.w	r0, r7, #16
 8015744:	2110      	movs	r1, #16
 8015746:	f7f8 f9df 	bl	800db08 <SecureElementAesEncrypt>
 801574a:	4603      	mov	r3, r0
 801574c:	2b00      	cmp	r3, #0
 801574e:	d001      	beq.n	8015754 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015750:	230e      	movs	r3, #14
 8015752:	e03a      	b.n	80157ca <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015754:	2300      	movs	r3, #0
 8015756:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801575a:	e01e      	b.n	801579a <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801575c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8015760:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015764:	4413      	add	r3, r2
 8015766:	461a      	mov	r2, r3
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	4413      	add	r3, r2
 801576c:	7819      	ldrb	r1, [r3, #0]
 801576e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015772:	3338      	adds	r3, #56	@ 0x38
 8015774:	443b      	add	r3, r7
 8015776:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801577a:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 801577e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015782:	4403      	add	r3, r0
 8015784:	4618      	mov	r0, r3
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	4403      	add	r3, r0
 801578a:	404a      	eors	r2, r1
 801578c:	b2d2      	uxtb	r2, r2
 801578e:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015790:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015794:	3301      	adds	r3, #1
 8015796:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801579a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801579e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80157a2:	2a10      	cmp	r2, #16
 80157a4:	bfa8      	it	ge
 80157a6:	2210      	movge	r2, #16
 80157a8:	b212      	sxth	r2, r2
 80157aa:	4293      	cmp	r3, r2
 80157ac:	dbd6      	blt.n	801575c <PayloadEncrypt+0xb8>
        }
        size -= 16;
 80157ae:	897b      	ldrh	r3, [r7, #10]
 80157b0:	3b10      	subs	r3, #16
 80157b2:	b29b      	uxth	r3, r3
 80157b4:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80157b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80157ba:	3310      	adds	r3, #16
 80157bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 80157c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	dcb2      	bgt.n	801572e <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80157c8:	2300      	movs	r3, #0
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	3738      	adds	r7, #56	@ 0x38
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}

080157d2 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80157d2:	b490      	push	{r4, r7}
 80157d4:	b082      	sub	sp, #8
 80157d6:	af00      	add	r7, sp, #0
 80157d8:	4604      	mov	r4, r0
 80157da:	4608      	mov	r0, r1
 80157dc:	4611      	mov	r1, r2
 80157de:	461a      	mov	r2, r3
 80157e0:	4623      	mov	r3, r4
 80157e2:	80fb      	strh	r3, [r7, #6]
 80157e4:	4603      	mov	r3, r0
 80157e6:	717b      	strb	r3, [r7, #5]
 80157e8:	460b      	mov	r3, r1
 80157ea:	713b      	strb	r3, [r7, #4]
 80157ec:	4613      	mov	r3, r2
 80157ee:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80157f0:	69bb      	ldr	r3, [r7, #24]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d101      	bne.n	80157fa <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80157f6:	2309      	movs	r3, #9
 80157f8:	e04e      	b.n	8015898 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80157fa:	69bb      	ldr	r3, [r7, #24]
 80157fc:	2249      	movs	r2, #73	@ 0x49
 80157fe:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8015800:	69bb      	ldr	r3, [r7, #24]
 8015802:	3301      	adds	r3, #1
 8015804:	2200      	movs	r2, #0
 8015806:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015808:	69bb      	ldr	r3, [r7, #24]
 801580a:	3302      	adds	r3, #2
 801580c:	2200      	movs	r2, #0
 801580e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015810:	69bb      	ldr	r3, [r7, #24]
 8015812:	3303      	adds	r3, #3
 8015814:	2200      	movs	r2, #0
 8015816:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015818:	69bb      	ldr	r3, [r7, #24]
 801581a:	3304      	adds	r3, #4
 801581c:	2200      	movs	r2, #0
 801581e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015820:	69bb      	ldr	r3, [r7, #24]
 8015822:	3305      	adds	r3, #5
 8015824:	78fa      	ldrb	r2, [r7, #3]
 8015826:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015828:	69bb      	ldr	r3, [r7, #24]
 801582a:	3306      	adds	r3, #6
 801582c:	693a      	ldr	r2, [r7, #16]
 801582e:	b2d2      	uxtb	r2, r2
 8015830:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015832:	693b      	ldr	r3, [r7, #16]
 8015834:	0a1a      	lsrs	r2, r3, #8
 8015836:	69bb      	ldr	r3, [r7, #24]
 8015838:	3307      	adds	r3, #7
 801583a:	b2d2      	uxtb	r2, r2
 801583c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801583e:	693b      	ldr	r3, [r7, #16]
 8015840:	0c1a      	lsrs	r2, r3, #16
 8015842:	69bb      	ldr	r3, [r7, #24]
 8015844:	3308      	adds	r3, #8
 8015846:	b2d2      	uxtb	r2, r2
 8015848:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801584a:	693b      	ldr	r3, [r7, #16]
 801584c:	0e1a      	lsrs	r2, r3, #24
 801584e:	69bb      	ldr	r3, [r7, #24]
 8015850:	3309      	adds	r3, #9
 8015852:	b2d2      	uxtb	r2, r2
 8015854:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015856:	69bb      	ldr	r3, [r7, #24]
 8015858:	330a      	adds	r3, #10
 801585a:	697a      	ldr	r2, [r7, #20]
 801585c:	b2d2      	uxtb	r2, r2
 801585e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	0a1a      	lsrs	r2, r3, #8
 8015864:	69bb      	ldr	r3, [r7, #24]
 8015866:	330b      	adds	r3, #11
 8015868:	b2d2      	uxtb	r2, r2
 801586a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	0c1a      	lsrs	r2, r3, #16
 8015870:	69bb      	ldr	r3, [r7, #24]
 8015872:	330c      	adds	r3, #12
 8015874:	b2d2      	uxtb	r2, r2
 8015876:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	0e1a      	lsrs	r2, r3, #24
 801587c:	69bb      	ldr	r3, [r7, #24]
 801587e:	330d      	adds	r3, #13
 8015880:	b2d2      	uxtb	r2, r2
 8015882:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8015884:	69bb      	ldr	r3, [r7, #24]
 8015886:	330e      	adds	r3, #14
 8015888:	2200      	movs	r2, #0
 801588a:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 801588c:	69bb      	ldr	r3, [r7, #24]
 801588e:	330f      	adds	r3, #15
 8015890:	88fa      	ldrh	r2, [r7, #6]
 8015892:	b2d2      	uxtb	r2, r2
 8015894:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015896:	2300      	movs	r3, #0
}
 8015898:	4618      	mov	r0, r3
 801589a:	3708      	adds	r7, #8
 801589c:	46bd      	mov	sp, r7
 801589e:	bc90      	pop	{r4, r7}
 80158a0:	4770      	bx	lr

080158a2 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80158a2:	b590      	push	{r4, r7, lr}
 80158a4:	b08b      	sub	sp, #44	@ 0x2c
 80158a6:	af04      	add	r7, sp, #16
 80158a8:	6078      	str	r0, [r7, #4]
 80158aa:	4608      	mov	r0, r1
 80158ac:	4611      	mov	r1, r2
 80158ae:	461a      	mov	r2, r3
 80158b0:	4603      	mov	r3, r0
 80158b2:	807b      	strh	r3, [r7, #2]
 80158b4:	460b      	mov	r3, r1
 80158b6:	707b      	strb	r3, [r7, #1]
 80158b8:	4613      	mov	r3, r2
 80158ba:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d002      	beq.n	80158c8 <ComputeCmacB0+0x26>
 80158c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d101      	bne.n	80158cc <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80158c8:	2309      	movs	r3, #9
 80158ca:	e024      	b.n	8015916 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80158cc:	887b      	ldrh	r3, [r7, #2]
 80158ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80158d2:	d901      	bls.n	80158d8 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80158d4:	230d      	movs	r3, #13
 80158d6:	e01e      	b.n	8015916 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80158d8:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 80158dc:	783a      	ldrb	r2, [r7, #0]
 80158de:	7879      	ldrb	r1, [r7, #1]
 80158e0:	8878      	ldrh	r0, [r7, #2]
 80158e2:	f107 0308 	add.w	r3, r7, #8
 80158e6:	9302      	str	r3, [sp, #8]
 80158e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158ea:	9301      	str	r3, [sp, #4]
 80158ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158ee:	9300      	str	r3, [sp, #0]
 80158f0:	4623      	mov	r3, r4
 80158f2:	f7ff ff6e 	bl	80157d2 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80158f6:	887a      	ldrh	r2, [r7, #2]
 80158f8:	7879      	ldrb	r1, [r7, #1]
 80158fa:	f107 0008 	add.w	r0, r7, #8
 80158fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015900:	9300      	str	r3, [sp, #0]
 8015902:	460b      	mov	r3, r1
 8015904:	6879      	ldr	r1, [r7, #4]
 8015906:	f7f8 f8b9 	bl	800da7c <SecureElementComputeAesCmac>
 801590a:	4603      	mov	r3, r0
 801590c:	2b00      	cmp	r3, #0
 801590e:	d001      	beq.n	8015914 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015910:	230e      	movs	r3, #14
 8015912:	e000      	b.n	8015916 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015914:	2300      	movs	r3, #0
}
 8015916:	4618      	mov	r0, r3
 8015918:	371c      	adds	r7, #28
 801591a:	46bd      	mov	sp, r7
 801591c:	bd90      	pop	{r4, r7, pc}

0801591e <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801591e:	b590      	push	{r4, r7, lr}
 8015920:	b0cd      	sub	sp, #308	@ 0x134
 8015922:	af04      	add	r7, sp, #16
 8015924:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8015928:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 801592c:	6020      	str	r0, [r4, #0]
 801592e:	460c      	mov	r4, r1
 8015930:	4610      	mov	r0, r2
 8015932:	4619      	mov	r1, r3
 8015934:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015938:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801593c:	4622      	mov	r2, r4
 801593e:	801a      	strh	r2, [r3, #0]
 8015940:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015944:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8015948:	4602      	mov	r2, r0
 801594a:	701a      	strb	r2, [r3, #0]
 801594c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015950:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015954:	460a      	mov	r2, r1
 8015956:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015958:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801595c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d101      	bne.n	801596a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015966:	2309      	movs	r3, #9
 8015968:	e063      	b.n	8015a32 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801596a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801596e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8015972:	881b      	ldrh	r3, [r3, #0]
 8015974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015978:	d901      	bls.n	801597e <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801597a:	230d      	movs	r3, #13
 801597c:	e059      	b.n	8015a32 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801597e:	f107 030c 	add.w	r3, r7, #12
 8015982:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8015986:	2100      	movs	r1, #0
 8015988:	4618      	mov	r0, r3
 801598a:	f003 facf 	bl	8018f2c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801598e:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8015992:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015996:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801599a:	781a      	ldrb	r2, [r3, #0]
 801599c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80159a0:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80159a4:	7819      	ldrb	r1, [r3, #0]
 80159a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80159aa:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80159ae:	8818      	ldrh	r0, [r3, #0]
 80159b0:	f107 030c 	add.w	r3, r7, #12
 80159b4:	9302      	str	r3, [sp, #8]
 80159b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80159ba:	9301      	str	r3, [sp, #4]
 80159bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80159c0:	9300      	str	r3, [sp, #0]
 80159c2:	4623      	mov	r3, r4
 80159c4:	f7ff ff05 	bl	80157d2 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80159c8:	f107 030c 	add.w	r3, r7, #12
 80159cc:	3310      	adds	r3, #16
 80159ce:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80159d2:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 80159d6:	8812      	ldrh	r2, [r2, #0]
 80159d8:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80159dc:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80159e0:	6809      	ldr	r1, [r1, #0]
 80159e2:	4618      	mov	r0, r3
 80159e4:	f003 fa67 	bl	8018eb6 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80159e8:	2306      	movs	r3, #6
 80159ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80159ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80159f2:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80159f6:	881b      	ldrh	r3, [r3, #0]
 80159f8:	3310      	adds	r3, #16
 80159fa:	4619      	mov	r1, r3
 80159fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015a00:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8015a04:	781b      	ldrb	r3, [r3, #0]
 8015a06:	f107 000c 	add.w	r0, r7, #12
 8015a0a:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8015a0e:	f7f8 f84f 	bl	800dab0 <SecureElementVerifyAesCmac>
 8015a12:	4603      	mov	r3, r0
 8015a14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015a18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d101      	bne.n	8015a24 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8015a20:	2300      	movs	r3, #0
 8015a22:	e006      	b.n	8015a32 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015a24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8015a28:	2b01      	cmp	r3, #1
 8015a2a:	d101      	bne.n	8015a30 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	e000      	b.n	8015a32 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015a30:	230e      	movs	r3, #14
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd90      	pop	{r4, r7, pc}

08015a3c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b085      	sub	sp, #20
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	4603      	mov	r3, r0
 8015a44:	6039      	str	r1, [r7, #0]
 8015a46:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015a48:	2300      	movs	r3, #0
 8015a4a:	73fb      	strb	r3, [r7, #15]
 8015a4c:	e011      	b.n	8015a72 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015a4e:	7bfb      	ldrb	r3, [r7, #15]
 8015a50:	4a0c      	ldr	r2, [pc, #48]	@ (8015a84 <GetKeyAddrItem+0x48>)
 8015a52:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015a56:	79fa      	ldrb	r2, [r7, #7]
 8015a58:	429a      	cmp	r2, r3
 8015a5a:	d107      	bne.n	8015a6c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8015a5c:	7bfb      	ldrb	r3, [r7, #15]
 8015a5e:	009b      	lsls	r3, r3, #2
 8015a60:	4a08      	ldr	r2, [pc, #32]	@ (8015a84 <GetKeyAddrItem+0x48>)
 8015a62:	441a      	add	r2, r3
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	e006      	b.n	8015a7a <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015a6c:	7bfb      	ldrb	r3, [r7, #15]
 8015a6e:	3301      	adds	r3, #1
 8015a70:	73fb      	strb	r3, [r7, #15]
 8015a72:	7bfb      	ldrb	r3, [r7, #15]
 8015a74:	2b01      	cmp	r3, #1
 8015a76:	d9ea      	bls.n	8015a4e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8015a78:	230b      	movs	r3, #11
}
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	3714      	adds	r7, #20
 8015a7e:	46bd      	mov	sp, r7
 8015a80:	bc80      	pop	{r7}
 8015a82:	4770      	bx	lr
 8015a84:	20000110 	.word	0x20000110

08015a88 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b088      	sub	sp, #32
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	60b9      	str	r1, [r7, #8]
 8015a90:	607a      	str	r2, [r7, #4]
 8015a92:	461a      	mov	r2, r3
 8015a94:	4603      	mov	r3, r0
 8015a96:	73fb      	strb	r3, [r7, #15]
 8015a98:	4613      	mov	r3, r2
 8015a9a:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8015a9c:	f107 0310 	add.w	r3, r7, #16
 8015aa0:	2200      	movs	r2, #0
 8015aa2:	601a      	str	r2, [r3, #0]
 8015aa4:	605a      	str	r2, [r3, #4]
 8015aa6:	609a      	str	r2, [r3, #8]
 8015aa8:	60da      	str	r2, [r3, #12]

    switch( keyID )
 8015aaa:	7bfb      	ldrb	r3, [r7, #15]
 8015aac:	2b08      	cmp	r3, #8
 8015aae:	d002      	beq.n	8015ab6 <DeriveSessionKey10x+0x2e>
 8015ab0:	2b09      	cmp	r3, #9
 8015ab2:	d003      	beq.n	8015abc <DeriveSessionKey10x+0x34>
 8015ab4:	e005      	b.n	8015ac2 <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	743b      	strb	r3, [r7, #16]
            break;
 8015aba:	e004      	b.n	8015ac6 <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8015abc:	2302      	movs	r3, #2
 8015abe:	743b      	strb	r3, [r7, #16]
            break;
 8015ac0:	e001      	b.n	8015ac6 <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015ac2:	230a      	movs	r3, #10
 8015ac4:	e02a      	b.n	8015b1c <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8015ac6:	68bb      	ldr	r3, [r7, #8]
 8015ac8:	b2db      	uxtb	r3, r3
 8015aca:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	0a1b      	lsrs	r3, r3, #8
 8015ad0:	b2db      	uxtb	r3, r3
 8015ad2:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8015ad4:	68bb      	ldr	r3, [r7, #8]
 8015ad6:	0c1b      	lsrs	r3, r3, #16
 8015ad8:	b2db      	uxtb	r3, r3
 8015ada:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	b2db      	uxtb	r3, r3
 8015ae0:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	0a1b      	lsrs	r3, r3, #8
 8015ae6:	b2db      	uxtb	r3, r3
 8015ae8:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	0c1b      	lsrs	r3, r3, #16
 8015aee:	b2db      	uxtb	r3, r3
 8015af0:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8015af2:	89bb      	ldrh	r3, [r7, #12]
 8015af4:	b2db      	uxtb	r3, r3
 8015af6:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8015af8:	89bb      	ldrh	r3, [r7, #12]
 8015afa:	0a1b      	lsrs	r3, r3, #8
 8015afc:	b29b      	uxth	r3, r3
 8015afe:	b2db      	uxtb	r3, r3
 8015b00:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015b02:	7bfa      	ldrb	r2, [r7, #15]
 8015b04:	f107 0310 	add.w	r3, r7, #16
 8015b08:	2101      	movs	r1, #1
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f7f8 f87c 	bl	800dc08 <SecureElementDeriveAndStoreKey>
 8015b10:	4603      	mov	r3, r0
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d001      	beq.n	8015b1a <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b16:	230e      	movs	r3, #14
 8015b18:	e000      	b.n	8015b1c <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015b1a:	2300      	movs	r3, #0
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3720      	adds	r7, #32
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd80      	pop	{r7, pc}

08015b24 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015b24:	b480      	push	{r7}
 8015b26:	b083      	sub	sp, #12
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	6039      	str	r1, [r7, #0]
 8015b2e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8015b30:	683b      	ldr	r3, [r7, #0]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d101      	bne.n	8015b3a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015b36:	2309      	movs	r3, #9
 8015b38:	e029      	b.n	8015b8e <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8015b3a:	79fb      	ldrb	r3, [r7, #7]
 8015b3c:	3b01      	subs	r3, #1
 8015b3e:	2b03      	cmp	r3, #3
 8015b40:	d822      	bhi.n	8015b88 <GetLastFcntDown+0x64>
 8015b42:	a201      	add	r2, pc, #4	@ (adr r2, 8015b48 <GetLastFcntDown+0x24>)
 8015b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b48:	08015b59 	.word	0x08015b59
 8015b4c:	08015b65 	.word	0x08015b65
 8015b50:	08015b71 	.word	0x08015b71
 8015b54:	08015b7d 	.word	0x08015b7d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8015b58:	4b0f      	ldr	r3, [pc, #60]	@ (8015b98 <GetLastFcntDown+0x74>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	691a      	ldr	r2, [r3, #16]
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	601a      	str	r2, [r3, #0]
            break;
 8015b62:	e013      	b.n	8015b8c <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8015b64:	4b0c      	ldr	r3, [pc, #48]	@ (8015b98 <GetLastFcntDown+0x74>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	695a      	ldr	r2, [r3, #20]
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	601a      	str	r2, [r3, #0]
            break;
 8015b6e:	e00d      	b.n	8015b8c <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8015b70:	4b09      	ldr	r3, [pc, #36]	@ (8015b98 <GetLastFcntDown+0x74>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	699a      	ldr	r2, [r3, #24]
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	601a      	str	r2, [r3, #0]
            break;
 8015b7a:	e007      	b.n	8015b8c <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8015b7c:	4b06      	ldr	r3, [pc, #24]	@ (8015b98 <GetLastFcntDown+0x74>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	69da      	ldr	r2, [r3, #28]
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	601a      	str	r2, [r3, #0]
            break;
 8015b86:	e001      	b.n	8015b8c <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8015b88:	2305      	movs	r3, #5
 8015b8a:	e000      	b.n	8015b8e <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015b8c:	2300      	movs	r3, #0
}
 8015b8e:	4618      	mov	r0, r3
 8015b90:	370c      	adds	r7, #12
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bc80      	pop	{r7}
 8015b96:	4770      	bx	lr
 8015b98:	20001d20 	.word	0x20001d20

08015b9c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b084      	sub	sp, #16
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	6039      	str	r1, [r7, #0]
 8015ba6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8015ba8:	2300      	movs	r3, #0
 8015baa:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8015bac:	f107 020c 	add.w	r2, r7, #12
 8015bb0:	79fb      	ldrb	r3, [r7, #7]
 8015bb2:	4611      	mov	r1, r2
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f7ff ffb5 	bl	8015b24 <GetLastFcntDown>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d001      	beq.n	8015bc4 <CheckFCntDown+0x28>
    {
        return false;
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	e00a      	b.n	8015bda <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	683a      	ldr	r2, [r7, #0]
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	d803      	bhi.n	8015bd4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8015bcc:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bd2:	d101      	bne.n	8015bd8 <CheckFCntDown+0x3c>
    {
        return true;
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	e000      	b.n	8015bda <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015bd8:	2300      	movs	r3, #0
    }
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3710      	adds	r7, #16
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}
	...

08015be4 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015be4:	b480      	push	{r7}
 8015be6:	b083      	sub	sp, #12
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	4603      	mov	r3, r0
 8015bec:	6039      	str	r1, [r7, #0]
 8015bee:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8015bf0:	79fb      	ldrb	r3, [r7, #7]
 8015bf2:	3b01      	subs	r3, #1
 8015bf4:	2b03      	cmp	r3, #3
 8015bf6:	d82b      	bhi.n	8015c50 <UpdateFCntDown+0x6c>
 8015bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8015c00 <UpdateFCntDown+0x1c>)
 8015bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bfe:	bf00      	nop
 8015c00:	08015c11 	.word	0x08015c11
 8015c04:	08015c23 	.word	0x08015c23
 8015c08:	08015c35 	.word	0x08015c35
 8015c0c:	08015c47 	.word	0x08015c47
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8015c10:	4b12      	ldr	r3, [pc, #72]	@ (8015c5c <UpdateFCntDown+0x78>)
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	683a      	ldr	r2, [r7, #0]
 8015c16:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8015c18:	4b10      	ldr	r3, [pc, #64]	@ (8015c5c <UpdateFCntDown+0x78>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	683a      	ldr	r2, [r7, #0]
 8015c1e:	621a      	str	r2, [r3, #32]
            break;
 8015c20:	e017      	b.n	8015c52 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8015c22:	4b0e      	ldr	r3, [pc, #56]	@ (8015c5c <UpdateFCntDown+0x78>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	683a      	ldr	r2, [r7, #0]
 8015c28:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8015c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8015c5c <UpdateFCntDown+0x78>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	683a      	ldr	r2, [r7, #0]
 8015c30:	621a      	str	r2, [r3, #32]
            break;
 8015c32:	e00e      	b.n	8015c52 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8015c34:	4b09      	ldr	r3, [pc, #36]	@ (8015c5c <UpdateFCntDown+0x78>)
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	683a      	ldr	r2, [r7, #0]
 8015c3a:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8015c3c:	4b07      	ldr	r3, [pc, #28]	@ (8015c5c <UpdateFCntDown+0x78>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	683a      	ldr	r2, [r7, #0]
 8015c42:	621a      	str	r2, [r3, #32]
            break;
 8015c44:	e005      	b.n	8015c52 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8015c46:	4b05      	ldr	r3, [pc, #20]	@ (8015c5c <UpdateFCntDown+0x78>)
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	683a      	ldr	r2, [r7, #0]
 8015c4c:	61da      	str	r2, [r3, #28]
            break;
 8015c4e:	e000      	b.n	8015c52 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8015c50:	bf00      	nop
    }
}
 8015c52:	bf00      	nop
 8015c54:	370c      	adds	r7, #12
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bc80      	pop	{r7}
 8015c5a:	4770      	bx	lr
 8015c5c:	20001d20 	.word	0x20001d20

08015c60 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015c60:	b480      	push	{r7}
 8015c62:	b083      	sub	sp, #12
 8015c64:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8015c66:	4b18      	ldr	r3, [pc, #96]	@ (8015cc8 <ResetFCnts+0x68>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015c6e:	4b16      	ldr	r3, [pc, #88]	@ (8015cc8 <ResetFCnts+0x68>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	f04f 32ff 	mov.w	r2, #4294967295
 8015c76:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015c78:	4b13      	ldr	r3, [pc, #76]	@ (8015cc8 <ResetFCnts+0x68>)
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8015c80:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015c82:	4b11      	ldr	r3, [pc, #68]	@ (8015cc8 <ResetFCnts+0x68>)
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	f04f 32ff 	mov.w	r2, #4294967295
 8015c8a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8015c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8015cc8 <ResetFCnts+0x68>)
 8015c8e:	681a      	ldr	r2, [r3, #0]
 8015c90:	4b0d      	ldr	r3, [pc, #52]	@ (8015cc8 <ResetFCnts+0x68>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	6992      	ldr	r2, [r2, #24]
 8015c96:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015c98:	2300      	movs	r3, #0
 8015c9a:	607b      	str	r3, [r7, #4]
 8015c9c:	e00b      	b.n	8015cb6 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8015c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8015cc8 <ResetFCnts+0x68>)
 8015ca0:	681a      	ldr	r2, [r3, #0]
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	3306      	adds	r3, #6
 8015ca6:	009b      	lsls	r3, r3, #2
 8015ca8:	4413      	add	r3, r2
 8015caa:	f04f 32ff 	mov.w	r2, #4294967295
 8015cae:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	3301      	adds	r3, #1
 8015cb4:	607b      	str	r3, [r7, #4]
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	ddf0      	ble.n	8015c9e <ResetFCnts+0x3e>
    }
}
 8015cbc:	bf00      	nop
 8015cbe:	bf00      	nop
 8015cc0:	370c      	adds	r7, #12
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bc80      	pop	{r7}
 8015cc6:	4770      	bx	lr
 8015cc8:	20001d20 	.word	0x20001d20

08015ccc <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8015ccc:	b480      	push	{r7}
 8015cce:	b083      	sub	sp, #12
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8015cd4:	4b06      	ldr	r3, [pc, #24]	@ (8015cf0 <IsJoinNonce10xOk+0x24>)
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	689b      	ldr	r3, [r3, #8]
 8015cda:	687a      	ldr	r2, [r7, #4]
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	bf8c      	ite	hi
 8015ce0:	2301      	movhi	r3, #1
 8015ce2:	2300      	movls	r3, #0
 8015ce4:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	370c      	adds	r7, #12
 8015cea:	46bd      	mov	sp, r7
 8015cec:	bc80      	pop	{r7}
 8015cee:	4770      	bx	lr
 8015cf0:	20001d20 	.word	0x20001d20

08015cf4 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b082      	sub	sp, #8
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d101      	bne.n	8015d06 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8015d02:	2308      	movs	r3, #8
 8015d04:	e01c      	b.n	8015d40 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8015d06:	4a10      	ldr	r2, [pc, #64]	@ (8015d48 <LoRaMacCryptoInit+0x54>)
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8015d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8015d48 <LoRaMacCryptoInit+0x54>)
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	2228      	movs	r2, #40	@ 0x28
 8015d12:	2100      	movs	r1, #0
 8015d14:	4618      	mov	r0, r3
 8015d16:	f003 f909 	bl	8018f2c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8015d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8015d48 <LoRaMacCryptoInit+0x54>)
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	2201      	movs	r2, #1
 8015d20:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8015d22:	4b09      	ldr	r3, [pc, #36]	@ (8015d48 <LoRaMacCryptoInit+0x54>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	2201      	movs	r2, #1
 8015d28:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8015d2a:	4b07      	ldr	r3, [pc, #28]	@ (8015d48 <LoRaMacCryptoInit+0x54>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	2201      	movs	r2, #1
 8015d30:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8015d32:	4b05      	ldr	r3, [pc, #20]	@ (8015d48 <LoRaMacCryptoInit+0x54>)
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	2200      	movs	r2, #0
 8015d38:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8015d3a:	f7ff ff91 	bl	8015c60 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015d3e:	2300      	movs	r3, #0
}
 8015d40:	4618      	mov	r0, r3
 8015d42:	3708      	adds	r7, #8
 8015d44:	46bd      	mov	sp, r7
 8015d46:	bd80      	pop	{r7, pc}
 8015d48:	20001d20 	.word	0x20001d20

08015d4c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015d4c:	b480      	push	{r7}
 8015d4e:	b083      	sub	sp, #12
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8015d54:	4b04      	ldr	r3, [pc, #16]	@ (8015d68 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	687a      	ldr	r2, [r7, #4]
 8015d5a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8015d5c:	2300      	movs	r3, #0
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	370c      	adds	r7, #12
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bc80      	pop	{r7}
 8015d66:	4770      	bx	lr
 8015d68:	20001d20 	.word	0x20001d20

08015d6c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8015d6c:	b480      	push	{r7}
 8015d6e:	b083      	sub	sp, #12
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d101      	bne.n	8015d7e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015d7a:	2309      	movs	r3, #9
 8015d7c:	e006      	b.n	8015d8c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8015d7e:	4b06      	ldr	r3, [pc, #24]	@ (8015d98 <LoRaMacCryptoGetFCntUp+0x2c>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	68db      	ldr	r3, [r3, #12]
 8015d84:	1c5a      	adds	r2, r3, #1
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015d8a:	2300      	movs	r3, #0
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	370c      	adds	r7, #12
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bc80      	pop	{r7}
 8015d94:	4770      	bx	lr
 8015d96:	bf00      	nop
 8015d98:	20001d20 	.word	0x20001d20

08015d9c <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b088      	sub	sp, #32
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	4603      	mov	r3, r0
 8015da4:	60b9      	str	r1, [r7, #8]
 8015da6:	607a      	str	r2, [r7, #4]
 8015da8:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8015daa:	2300      	movs	r3, #0
 8015dac:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8015dae:	2300      	movs	r3, #0
 8015db0:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8015db2:	2312      	movs	r3, #18
 8015db4:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d101      	bne.n	8015dc0 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015dbc:	2309      	movs	r3, #9
 8015dbe:	e035      	b.n	8015e2c <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015dc0:	f107 0214 	add.w	r2, r7, #20
 8015dc4:	7bfb      	ldrb	r3, [r7, #15]
 8015dc6:	4611      	mov	r1, r2
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f7ff feab 	bl	8015b24 <GetLastFcntDown>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015dd2:	7efb      	ldrb	r3, [r7, #27]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d001      	beq.n	8015ddc <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8015dd8:	7efb      	ldrb	r3, [r7, #27]
 8015dda:	e027      	b.n	8015e2c <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8015ddc:	697b      	ldr	r3, [r7, #20]
 8015dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015de2:	d103      	bne.n	8015dec <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	68ba      	ldr	r2, [r7, #8]
 8015de8:	601a      	str	r2, [r3, #0]
 8015dea:	e01e      	b.n	8015e2a <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015dec:	697b      	ldr	r3, [r7, #20]
 8015dee:	b29b      	uxth	r3, r3
 8015df0:	68ba      	ldr	r2, [r7, #8]
 8015df2:	1ad3      	subs	r3, r2, r3
 8015df4:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8015df6:	69fb      	ldr	r3, [r7, #28]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	dd05      	ble.n	8015e08 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015dfc:	697a      	ldr	r2, [r7, #20]
 8015dfe:	69fb      	ldr	r3, [r7, #28]
 8015e00:	441a      	add	r2, r3
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	601a      	str	r2, [r3, #0]
 8015e06:	e010      	b.n	8015e2a <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8015e08:	69fb      	ldr	r3, [r7, #28]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d104      	bne.n	8015e18 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015e0e:	697a      	ldr	r2, [r7, #20]
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015e14:	2307      	movs	r3, #7
 8015e16:	e009      	b.n	8015e2c <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015e18:	697b      	ldr	r3, [r7, #20]
 8015e1a:	0c1b      	lsrs	r3, r3, #16
 8015e1c:	041b      	lsls	r3, r3, #16
 8015e1e:	68ba      	ldr	r2, [r7, #8]
 8015e20:	4413      	add	r3, r2
 8015e22:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015e2a:	2300      	movs	r3, #0
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3720      	adds	r7, #32
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}

08015e34 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015e34:	b480      	push	{r7}
 8015e36:	b085      	sub	sp, #20
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d101      	bne.n	8015e46 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e42:	2309      	movs	r3, #9
 8015e44:	e019      	b.n	8015e7a <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015e46:	2300      	movs	r3, #0
 8015e48:	60fb      	str	r3, [r7, #12]
 8015e4a:	e012      	b.n	8015e72 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8015e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8015e84 <LoRaMacCryptoSetMulticastReference+0x50>)
 8015e4e:	6819      	ldr	r1, [r3, #0]
 8015e50:	68fa      	ldr	r2, [r7, #12]
 8015e52:	4613      	mov	r3, r2
 8015e54:	005b      	lsls	r3, r3, #1
 8015e56:	4413      	add	r3, r2
 8015e58:	011b      	lsls	r3, r3, #4
 8015e5a:	461a      	mov	r2, r3
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	4413      	add	r3, r2
 8015e60:	68fa      	ldr	r2, [r7, #12]
 8015e62:	3206      	adds	r2, #6
 8015e64:	0092      	lsls	r2, r2, #2
 8015e66:	440a      	add	r2, r1
 8015e68:	3204      	adds	r2, #4
 8015e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	3301      	adds	r3, #1
 8015e70:	60fb      	str	r3, [r7, #12]
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	dde9      	ble.n	8015e4c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015e78:	2300      	movs	r3, #0
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3714      	adds	r7, #20
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bc80      	pop	{r7}
 8015e82:	4770      	bx	lr
 8015e84:	20001d20 	.word	0x20001d20

08015e88 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b082      	sub	sp, #8
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	4603      	mov	r3, r0
 8015e90:	6039      	str	r1, [r7, #0]
 8015e92:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015e94:	79fb      	ldrb	r3, [r7, #7]
 8015e96:	6839      	ldr	r1, [r7, #0]
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7f7 fd91 	bl	800d9c0 <SecureElementSetKey>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d001      	beq.n	8015ea8 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ea4:	230e      	movs	r3, #14
 8015ea6:	e021      	b.n	8015eec <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8015ea8:	79fb      	ldrb	r3, [r7, #7]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d11d      	bne.n	8015eea <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015eae:	4b11      	ldr	r3, [pc, #68]	@ (8015ef4 <LoRaMacCryptoSetKey+0x6c>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	789b      	ldrb	r3, [r3, #2]
 8015eb4:	210b      	movs	r1, #11
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f000 fa54 	bl	8016364 <LoRaMacCryptoDeriveLifeTimeKey>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d001      	beq.n	8015ec6 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ec2:	230e      	movs	r3, #14
 8015ec4:	e012      	b.n	8015eec <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015ec6:	210c      	movs	r1, #12
 8015ec8:	2000      	movs	r0, #0
 8015eca:	f000 fa4b 	bl	8016364 <LoRaMacCryptoDeriveLifeTimeKey>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d001      	beq.n	8015ed8 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ed4:	230e      	movs	r3, #14
 8015ed6:	e009      	b.n	8015eec <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015ed8:	210a      	movs	r1, #10
 8015eda:	2000      	movs	r0, #0
 8015edc:	f000 fa42 	bl	8016364 <LoRaMacCryptoDeriveLifeTimeKey>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d001      	beq.n	8015eea <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ee6:	230e      	movs	r3, #14
 8015ee8:	e000      	b.n	8015eec <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015eea:	2300      	movs	r3, #0
}
 8015eec:	4618      	mov	r0, r3
 8015eee:	3708      	adds	r7, #8
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd80      	pop	{r7, pc}
 8015ef4:	20001d20 	.word	0x20001d20

08015ef8 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b086      	sub	sp, #24
 8015efc:	af02      	add	r7, sp, #8
 8015efe:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d101      	bne.n	8015f0a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f06:	2309      	movs	r3, #9
 8015f08:	e02d      	b.n	8015f66 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8015f0e:	4b18      	ldr	r3, [pc, #96]	@ (8015f70 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	889a      	ldrh	r2, [r3, #4]
 8015f14:	3201      	adds	r2, #1
 8015f16:	b292      	uxth	r2, r2
 8015f18:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8015f1a:	4b15      	ldr	r3, [pc, #84]	@ (8015f70 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	889a      	ldrh	r2, [r3, #4]
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015f24:	6878      	ldr	r0, [r7, #4]
 8015f26:	f000 fc14 	bl	8016752 <LoRaMacSerializerJoinRequest>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d001      	beq.n	8015f34 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015f30:	2310      	movs	r3, #16
 8015f32:	e018      	b.n	8015f66 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	6819      	ldr	r1, [r3, #0]
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	3318      	adds	r3, #24
 8015f3c:	7bfa      	ldrb	r2, [r7, #15]
 8015f3e:	9300      	str	r3, [sp, #0]
 8015f40:	4613      	mov	r3, r2
 8015f42:	2213      	movs	r2, #19
 8015f44:	2000      	movs	r0, #0
 8015f46:	f7f7 fd99 	bl	800da7c <SecureElementComputeAesCmac>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d001      	beq.n	8015f54 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015f50:	230e      	movs	r3, #14
 8015f52:	e008      	b.n	8015f66 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015f54:	6878      	ldr	r0, [r7, #4]
 8015f56:	f000 fbfc 	bl	8016752 <LoRaMacSerializerJoinRequest>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d001      	beq.n	8015f64 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015f60:	2310      	movs	r3, #16
 8015f62:	e000      	b.n	8015f66 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015f64:	2300      	movs	r3, #0
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	3710      	adds	r7, #16
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}
 8015f6e:	bf00      	nop
 8015f70:	20001d20 	.word	0x20001d20

08015f74 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015f74:	b590      	push	{r4, r7, lr}
 8015f76:	b097      	sub	sp, #92	@ 0x5c
 8015f78:	af04      	add	r7, sp, #16
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	607a      	str	r2, [r7, #4]
 8015f80:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d002      	beq.n	8015f8e <LoRaMacCryptoHandleJoinAccept+0x1a>
 8015f88:	68bb      	ldr	r3, [r7, #8]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d101      	bne.n	8015f92 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f8e:	2309      	movs	r3, #9
 8015f90:	e0d1      	b.n	8016136 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015f92:	2312      	movs	r3, #18
 8015f94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8015f98:	f107 0314 	add.w	r3, r7, #20
 8015f9c:	2221      	movs	r2, #33	@ 0x21
 8015f9e:	2100      	movs	r1, #0
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f008 f88f 	bl	801e0c4 <memset>
    uint8_t versionMinor         = 0;
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8015faa:	4b65      	ldr	r3, [pc, #404]	@ (8016140 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	889b      	ldrh	r3, [r3, #4]
 8015fb0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	681c      	ldr	r4, [r3, #0]
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	791b      	ldrb	r3, [r3, #4]
 8015fbc:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8015fc0:	7bf8      	ldrb	r0, [r7, #15]
 8015fc2:	f107 0213 	add.w	r2, r7, #19
 8015fc6:	9202      	str	r2, [sp, #8]
 8015fc8:	f107 0214 	add.w	r2, r7, #20
 8015fcc:	9201      	str	r2, [sp, #4]
 8015fce:	9300      	str	r3, [sp, #0]
 8015fd0:	4623      	mov	r3, r4
 8015fd2:	460a      	mov	r2, r1
 8015fd4:	68b9      	ldr	r1, [r7, #8]
 8015fd6:	f7f7 fe56 	bl	800dc86 <SecureElementProcessJoinAccept>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d001      	beq.n	8015fe4 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015fe0:	230e      	movs	r3, #14
 8015fe2:	e0a8      	b.n	8016136 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	6818      	ldr	r0, [r3, #0]
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	791b      	ldrb	r3, [r3, #4]
 8015fec:	461a      	mov	r2, r3
 8015fee:	f107 0314 	add.w	r3, r7, #20
 8015ff2:	4619      	mov	r1, r3
 8015ff4:	f002 ff5f 	bl	8018eb6 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f000 f9ed 	bl	80163d8 <LoRaMacParserJoinAccept>
 8015ffe:	4603      	mov	r3, r0
 8016000:	2b00      	cmp	r3, #0
 8016002:	d001      	beq.n	8016008 <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016004:	230f      	movs	r3, #15
 8016006:	e096      	b.n	8016136 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8016008:	2300      	movs	r3, #0
 801600a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	799b      	ldrb	r3, [r3, #6]
 8016012:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	79db      	ldrb	r3, [r3, #7]
 8016018:	021b      	lsls	r3, r3, #8
 801601a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801601c:	4313      	orrs	r3, r2
 801601e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	7a1b      	ldrb	r3, [r3, #8]
 8016024:	041b      	lsls	r3, r3, #16
 8016026:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016028:	4313      	orrs	r3, r2
 801602a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 801602c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801602e:	f7ff fe4d 	bl	8015ccc <IsJoinNonce10xOk>
 8016032:	4603      	mov	r3, r0
 8016034:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8016038:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801603c:	2b00      	cmp	r3, #0
 801603e:	d010      	beq.n	8016062 <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016040:	4b3f      	ldr	r3, [pc, #252]	@ (8016140 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016046:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8016048:	7cfb      	ldrb	r3, [r7, #19]
 801604a:	210b      	movs	r1, #11
 801604c:	4618      	mov	r0, r3
 801604e:	f000 f989 	bl	8016364 <LoRaMacCryptoDeriveLifeTimeKey>
 8016052:	4603      	mov	r3, r0
 8016054:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016058:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801605c:	2b00      	cmp	r3, #0
 801605e:	d005      	beq.n	801606c <LoRaMacCryptoHandleJoinAccept+0xf8>
 8016060:	e001      	b.n	8016066 <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016062:	2303      	movs	r3, #3
 8016064:	e067      	b.n	8016136 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 8016066:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801606a:	e064      	b.n	8016136 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 801606c:	210c      	movs	r1, #12
 801606e:	2000      	movs	r0, #0
 8016070:	f000 f978 	bl	8016364 <LoRaMacCryptoDeriveLifeTimeKey>
 8016074:	4603      	mov	r3, r0
 8016076:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801607a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801607e:	2b00      	cmp	r3, #0
 8016080:	d002      	beq.n	8016088 <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 8016082:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016086:	e056      	b.n	8016136 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8016088:	210a      	movs	r1, #10
 801608a:	2000      	movs	r0, #0
 801608c:	f000 f96a 	bl	8016364 <LoRaMacCryptoDeriveLifeTimeKey>
 8016090:	4603      	mov	r3, r0
 8016092:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016096:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801609a:	2b00      	cmp	r3, #0
 801609c:	d002      	beq.n	80160a4 <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 801609e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80160a2:	e048      	b.n	8016136 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	7a5b      	ldrb	r3, [r3, #9]
 80160a8:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	7a9b      	ldrb	r3, [r3, #10]
 80160ae:	021b      	lsls	r3, r3, #8
 80160b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80160b2:	4313      	orrs	r3, r2
 80160b4:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	7adb      	ldrb	r3, [r3, #11]
 80160ba:	041b      	lsls	r3, r3, #16
 80160bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80160be:	4313      	orrs	r3, r2
 80160c0:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80160c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80160c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80160c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80160ca:	2009      	movs	r0, #9
 80160cc:	f7ff fcdc 	bl	8015a88 <DeriveSessionKey10x>
 80160d0:	4603      	mov	r3, r0
 80160d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80160d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d002      	beq.n	80160e4 <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 80160de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80160e2:	e028      	b.n	8016136 <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80160e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80160e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80160ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80160ec:	2008      	movs	r0, #8
 80160ee:	f7ff fccb 	bl	8015a88 <DeriveSessionKey10x>
 80160f2:	4603      	mov	r3, r0
 80160f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80160f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d002      	beq.n	8016106 <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 8016100:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016104:	e017      	b.n	8016136 <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016106:	4b0e      	ldr	r3, [pc, #56]	@ (8016140 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	7cfa      	ldrb	r2, [r7, #19]
 801610c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 801610e:	4b0c      	ldr	r3, [pc, #48]	@ (8016140 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	2200      	movs	r2, #0
 8016114:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016116:	4b0a      	ldr	r3, [pc, #40]	@ (8016140 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	f04f 32ff 	mov.w	r2, #4294967295
 801611e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016120:	4b07      	ldr	r3, [pc, #28]	@ (8016140 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	f04f 32ff 	mov.w	r2, #4294967295
 8016128:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801612a:	4b05      	ldr	r3, [pc, #20]	@ (8016140 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	f04f 32ff 	mov.w	r2, #4294967295
 8016132:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016134:	2300      	movs	r3, #0
}
 8016136:	4618      	mov	r0, r3
 8016138:	374c      	adds	r7, #76	@ 0x4c
 801613a:	46bd      	mov	sp, r7
 801613c:	bd90      	pop	{r4, r7, pc}
 801613e:	bf00      	nop
 8016140:	20001d20 	.word	0x20001d20

08016144 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016144:	b590      	push	{r4, r7, lr}
 8016146:	b08b      	sub	sp, #44	@ 0x2c
 8016148:	af04      	add	r7, sp, #16
 801614a:	60f8      	str	r0, [r7, #12]
 801614c:	607b      	str	r3, [r7, #4]
 801614e:	460b      	mov	r3, r1
 8016150:	72fb      	strb	r3, [r7, #11]
 8016152:	4613      	mov	r3, r2
 8016154:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016156:	2312      	movs	r3, #18
 8016158:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801615a:	2309      	movs	r3, #9
 801615c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d101      	bne.n	8016168 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016164:	2309      	movs	r3, #9
 8016166:	e05e      	b.n	8016226 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016168:	4b31      	ldr	r3, [pc, #196]	@ (8016230 <LoRaMacCryptoSecureMessage+0xec>)
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	68db      	ldr	r3, [r3, #12]
 801616e:	68fa      	ldr	r2, [r7, #12]
 8016170:	429a      	cmp	r2, r3
 8016172:	d201      	bcs.n	8016178 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016174:	2306      	movs	r3, #6
 8016176:	e056      	b.n	8016226 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d101      	bne.n	8016186 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016182:	2308      	movs	r3, #8
 8016184:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016186:	4b2a      	ldr	r3, [pc, #168]	@ (8016230 <LoRaMacCryptoSecureMessage+0xec>)
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	68db      	ldr	r3, [r3, #12]
 801618c:	68fa      	ldr	r2, [r7, #12]
 801618e:	429a      	cmp	r2, r3
 8016190:	d916      	bls.n	80161c0 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801619c:	b219      	sxth	r1, r3
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	689c      	ldr	r4, [r3, #8]
 80161a2:	7dfa      	ldrb	r2, [r7, #23]
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	9301      	str	r3, [sp, #4]
 80161a8:	2300      	movs	r3, #0
 80161aa:	9300      	str	r3, [sp, #0]
 80161ac:	4623      	mov	r3, r4
 80161ae:	f7ff fa79 	bl	80156a4 <PayloadEncrypt>
 80161b2:	4603      	mov	r3, r0
 80161b4:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80161b6:	7dbb      	ldrb	r3, [r7, #22]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d001      	beq.n	80161c0 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80161bc:	7dbb      	ldrb	r3, [r7, #22]
 80161be:	e032      	b.n	8016226 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80161c0:	6878      	ldr	r0, [r7, #4]
 80161c2:	f000 fb48 	bl	8016856 <LoRaMacSerializerData>
 80161c6:	4603      	mov	r3, r0
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d001      	beq.n	80161d0 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80161cc:	2310      	movs	r3, #16
 80161ce:	e02a      	b.n	8016226 <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80161d0:	2308      	movs	r3, #8
 80161d2:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	6818      	ldr	r0, [r3, #0]
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	791b      	ldrb	r3, [r3, #4]
 80161dc:	3b04      	subs	r3, #4
 80161de:	b299      	uxth	r1, r3
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	689b      	ldr	r3, [r3, #8]
 80161e4:	687a      	ldr	r2, [r7, #4]
 80161e6:	322c      	adds	r2, #44	@ 0x2c
 80161e8:	7dfc      	ldrb	r4, [r7, #23]
 80161ea:	9203      	str	r2, [sp, #12]
 80161ec:	68fa      	ldr	r2, [r7, #12]
 80161ee:	9202      	str	r2, [sp, #8]
 80161f0:	9301      	str	r3, [sp, #4]
 80161f2:	2300      	movs	r3, #0
 80161f4:	9300      	str	r3, [sp, #0]
 80161f6:	2300      	movs	r3, #0
 80161f8:	4622      	mov	r2, r4
 80161fa:	f7ff fb52 	bl	80158a2 <ComputeCmacB0>
 80161fe:	4603      	mov	r3, r0
 8016200:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016202:	7dbb      	ldrb	r3, [r7, #22]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d001      	beq.n	801620c <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8016208:	7dbb      	ldrb	r3, [r7, #22]
 801620a:	e00c      	b.n	8016226 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801620c:	6878      	ldr	r0, [r7, #4]
 801620e:	f000 fb22 	bl	8016856 <LoRaMacSerializerData>
 8016212:	4603      	mov	r3, r0
 8016214:	2b00      	cmp	r3, #0
 8016216:	d001      	beq.n	801621c <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016218:	2310      	movs	r3, #16
 801621a:	e004      	b.n	8016226 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801621c:	4b04      	ldr	r3, [pc, #16]	@ (8016230 <LoRaMacCryptoSecureMessage+0xec>)
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	68fa      	ldr	r2, [r7, #12]
 8016222:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016224:	2300      	movs	r3, #0
}
 8016226:	4618      	mov	r0, r3
 8016228:	371c      	adds	r7, #28
 801622a:	46bd      	mov	sp, r7
 801622c:	bd90      	pop	{r4, r7, pc}
 801622e:	bf00      	nop
 8016230:	20001d20 	.word	0x20001d20

08016234 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016234:	b590      	push	{r4, r7, lr}
 8016236:	b08b      	sub	sp, #44	@ 0x2c
 8016238:	af04      	add	r7, sp, #16
 801623a:	60b9      	str	r1, [r7, #8]
 801623c:	607b      	str	r3, [r7, #4]
 801623e:	4603      	mov	r3, r0
 8016240:	73fb      	strb	r3, [r7, #15]
 8016242:	4613      	mov	r3, r2
 8016244:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8016246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016248:	2b00      	cmp	r3, #0
 801624a:	d101      	bne.n	8016250 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801624c:	2309      	movs	r3, #9
 801624e:	e083      	b.n	8016358 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016250:	7bbb      	ldrb	r3, [r7, #14]
 8016252:	6879      	ldr	r1, [r7, #4]
 8016254:	4618      	mov	r0, r3
 8016256:	f7ff fca1 	bl	8015b9c <CheckFCntDown>
 801625a:	4603      	mov	r3, r0
 801625c:	f083 0301 	eor.w	r3, r3, #1
 8016260:	b2db      	uxtb	r3, r3
 8016262:	2b00      	cmp	r3, #0
 8016264:	d001      	beq.n	801626a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016266:	2306      	movs	r3, #6
 8016268:	e076      	b.n	8016358 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801626a:	2312      	movs	r3, #18
 801626c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801626e:	2309      	movs	r3, #9
 8016270:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016272:	2308      	movs	r3, #8
 8016274:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016276:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016278:	f000 f979 	bl	801656e <LoRaMacParserData>
 801627c:	4603      	mov	r3, r0
 801627e:	2b00      	cmp	r3, #0
 8016280:	d001      	beq.n	8016286 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016282:	230f      	movs	r3, #15
 8016284:	e068      	b.n	8016358 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016286:	f107 0210 	add.w	r2, r7, #16
 801628a:	7bfb      	ldrb	r3, [r7, #15]
 801628c:	4611      	mov	r1, r2
 801628e:	4618      	mov	r0, r3
 8016290:	f7ff fbd4 	bl	8015a3c <GetKeyAddrItem>
 8016294:	4603      	mov	r3, r0
 8016296:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016298:	7d7b      	ldrb	r3, [r7, #21]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d001      	beq.n	80162a2 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801629e:	7d7b      	ldrb	r3, [r7, #21]
 80162a0:	e05a      	b.n	8016358 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	785b      	ldrb	r3, [r3, #1]
 80162a6:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80162a8:	693b      	ldr	r3, [r7, #16]
 80162aa:	789b      	ldrb	r3, [r3, #2]
 80162ac:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80162ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162b0:	689b      	ldr	r3, [r3, #8]
 80162b2:	68ba      	ldr	r2, [r7, #8]
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d001      	beq.n	80162bc <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80162b8:	2302      	movs	r3, #2
 80162ba:	e04d      	b.n	8016358 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80162bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162be:	7b1b      	ldrb	r3, [r3, #12]
 80162c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80162c4:	b2db      	uxtb	r3, r3
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	bf14      	ite	ne
 80162ca:	2301      	movne	r3, #1
 80162cc:	2300      	moveq	r3, #0
 80162ce:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80162d0:	4b23      	ldr	r3, [pc, #140]	@ (8016360 <LoRaMacCryptoUnsecureMessage+0x12c>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	789b      	ldrb	r3, [r3, #2]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d101      	bne.n	80162de <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80162da:	2300      	movs	r3, #0
 80162dc:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80162de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162e0:	6818      	ldr	r0, [r3, #0]
 80162e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162e4:	791b      	ldrb	r3, [r3, #4]
 80162e6:	3b04      	subs	r3, #4
 80162e8:	b299      	uxth	r1, r3
 80162ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162ee:	7dbc      	ldrb	r4, [r7, #22]
 80162f0:	7d3a      	ldrb	r2, [r7, #20]
 80162f2:	9303      	str	r3, [sp, #12]
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	9302      	str	r3, [sp, #8]
 80162f8:	68bb      	ldr	r3, [r7, #8]
 80162fa:	9301      	str	r3, [sp, #4]
 80162fc:	2301      	movs	r3, #1
 80162fe:	9300      	str	r3, [sp, #0]
 8016300:	4623      	mov	r3, r4
 8016302:	f7ff fb0c 	bl	801591e <VerifyCmacB0>
 8016306:	4603      	mov	r3, r0
 8016308:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801630a:	7d7b      	ldrb	r3, [r7, #21]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d001      	beq.n	8016314 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8016310:	7d7b      	ldrb	r3, [r7, #21]
 8016312:	e021      	b.n	8016358 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016316:	f893 3020 	ldrb.w	r3, [r3, #32]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d101      	bne.n	8016322 <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801631e:	2308      	movs	r3, #8
 8016320:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8016322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016324:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8016326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016328:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801632c:	b219      	sxth	r1, r3
 801632e:	7dfa      	ldrb	r2, [r7, #23]
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	9301      	str	r3, [sp, #4]
 8016334:	2301      	movs	r3, #1
 8016336:	9300      	str	r3, [sp, #0]
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	f7ff f9b3 	bl	80156a4 <PayloadEncrypt>
 801633e:	4603      	mov	r3, r0
 8016340:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016342:	7d7b      	ldrb	r3, [r7, #21]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d001      	beq.n	801634c <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8016348:	7d7b      	ldrb	r3, [r7, #21]
 801634a:	e005      	b.n	8016358 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 801634c:	7bbb      	ldrb	r3, [r7, #14]
 801634e:	6879      	ldr	r1, [r7, #4]
 8016350:	4618      	mov	r0, r3
 8016352:	f7ff fc47 	bl	8015be4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8016356:	2300      	movs	r3, #0
}
 8016358:	4618      	mov	r0, r3
 801635a:	371c      	adds	r7, #28
 801635c:	46bd      	mov	sp, r7
 801635e:	bd90      	pop	{r4, r7, pc}
 8016360:	20001d20 	.word	0x20001d20

08016364 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b088      	sub	sp, #32
 8016368:	af00      	add	r7, sp, #0
 801636a:	4603      	mov	r3, r0
 801636c:	460a      	mov	r2, r1
 801636e:	71fb      	strb	r3, [r7, #7]
 8016370:	4613      	mov	r3, r2
 8016372:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8016374:	f107 030c 	add.w	r3, r7, #12
 8016378:	2200      	movs	r2, #0
 801637a:	601a      	str	r2, [r3, #0]
 801637c:	605a      	str	r2, [r3, #4]
 801637e:	609a      	str	r2, [r3, #8]
 8016380:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8016382:	2300      	movs	r3, #0
 8016384:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8016386:	79bb      	ldrb	r3, [r7, #6]
 8016388:	2b0c      	cmp	r3, #12
 801638a:	d00b      	beq.n	80163a4 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 801638c:	2b0c      	cmp	r3, #12
 801638e:	dc0f      	bgt.n	80163b0 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 8016390:	2b0a      	cmp	r3, #10
 8016392:	d00a      	beq.n	80163aa <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 8016394:	2b0b      	cmp	r3, #11
 8016396:	d10b      	bne.n	80163b0 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8016398:	79fb      	ldrb	r3, [r7, #7]
 801639a:	2b01      	cmp	r3, #1
 801639c:	d10a      	bne.n	80163b4 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 801639e:	2320      	movs	r3, #32
 80163a0:	733b      	strb	r3, [r7, #12]
            }
            break;
 80163a2:	e007      	b.n	80163b4 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 80163a4:	230b      	movs	r3, #11
 80163a6:	77fb      	strb	r3, [r7, #31]
            break;
 80163a8:	e005      	b.n	80163b6 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 80163aa:	2330      	movs	r3, #48	@ 0x30
 80163ac:	733b      	strb	r3, [r7, #12]
            break;
 80163ae:	e002      	b.n	80163b6 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80163b0:	230a      	movs	r3, #10
 80163b2:	e00d      	b.n	80163d0 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 80163b4:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80163b6:	79ba      	ldrb	r2, [r7, #6]
 80163b8:	7ff9      	ldrb	r1, [r7, #31]
 80163ba:	f107 030c 	add.w	r3, r7, #12
 80163be:	4618      	mov	r0, r3
 80163c0:	f7f7 fc22 	bl	800dc08 <SecureElementDeriveAndStoreKey>
 80163c4:	4603      	mov	r3, r0
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d001      	beq.n	80163ce <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80163ca:	230e      	movs	r3, #14
 80163cc:	e000      	b.n	80163d0 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80163ce:	2300      	movs	r3, #0
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	3720      	adds	r7, #32
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}

080163d8 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b084      	sub	sp, #16
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d003      	beq.n	80163ee <LoRaMacParserJoinAccept+0x16>
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d101      	bne.n	80163f2 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80163ee:	2302      	movs	r3, #2
 80163f0:	e0b9      	b.n	8016566 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80163f2:	2300      	movs	r3, #0
 80163f4:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	681a      	ldr	r2, [r3, #0]
 80163fa:	89fb      	ldrh	r3, [r7, #14]
 80163fc:	1c59      	adds	r1, r3, #1
 80163fe:	81f9      	strh	r1, [r7, #14]
 8016400:	4413      	add	r3, r2
 8016402:	781a      	ldrb	r2, [r3, #0]
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	1d98      	adds	r0, r3, #6
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	681a      	ldr	r2, [r3, #0]
 8016410:	89fb      	ldrh	r3, [r7, #14]
 8016412:	4413      	add	r3, r2
 8016414:	2203      	movs	r2, #3
 8016416:	4619      	mov	r1, r3
 8016418:	f002 fd4d 	bl	8018eb6 <memcpy1>
    bufItr = bufItr + 3;
 801641c:	89fb      	ldrh	r3, [r7, #14]
 801641e:	3303      	adds	r3, #3
 8016420:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	f103 0009 	add.w	r0, r3, #9
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	681a      	ldr	r2, [r3, #0]
 801642c:	89fb      	ldrh	r3, [r7, #14]
 801642e:	4413      	add	r3, r2
 8016430:	2203      	movs	r2, #3
 8016432:	4619      	mov	r1, r3
 8016434:	f002 fd3f 	bl	8018eb6 <memcpy1>
    bufItr = bufItr + 3;
 8016438:	89fb      	ldrh	r3, [r7, #14]
 801643a:	3303      	adds	r3, #3
 801643c:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	681a      	ldr	r2, [r3, #0]
 8016442:	89fb      	ldrh	r3, [r7, #14]
 8016444:	1c59      	adds	r1, r3, #1
 8016446:	81f9      	strh	r1, [r7, #14]
 8016448:	4413      	add	r3, r2
 801644a:	781b      	ldrb	r3, [r3, #0]
 801644c:	461a      	mov	r2, r3
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	681a      	ldr	r2, [r3, #0]
 8016456:	89fb      	ldrh	r3, [r7, #14]
 8016458:	1c59      	adds	r1, r3, #1
 801645a:	81f9      	strh	r1, [r7, #14]
 801645c:	4413      	add	r3, r2
 801645e:	781b      	ldrb	r3, [r3, #0]
 8016460:	021a      	lsls	r2, r3, #8
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	68db      	ldr	r3, [r3, #12]
 8016466:	431a      	orrs	r2, r3
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681a      	ldr	r2, [r3, #0]
 8016470:	89fb      	ldrh	r3, [r7, #14]
 8016472:	1c59      	adds	r1, r3, #1
 8016474:	81f9      	strh	r1, [r7, #14]
 8016476:	4413      	add	r3, r2
 8016478:	781b      	ldrb	r3, [r3, #0]
 801647a:	041a      	lsls	r2, r3, #16
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	68db      	ldr	r3, [r3, #12]
 8016480:	431a      	orrs	r2, r3
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	681a      	ldr	r2, [r3, #0]
 801648a:	89fb      	ldrh	r3, [r7, #14]
 801648c:	1c59      	adds	r1, r3, #1
 801648e:	81f9      	strh	r1, [r7, #14]
 8016490:	4413      	add	r3, r2
 8016492:	781b      	ldrb	r3, [r3, #0]
 8016494:	061a      	lsls	r2, r3, #24
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	68db      	ldr	r3, [r3, #12]
 801649a:	431a      	orrs	r2, r3
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	681a      	ldr	r2, [r3, #0]
 80164a4:	89fb      	ldrh	r3, [r7, #14]
 80164a6:	1c59      	adds	r1, r3, #1
 80164a8:	81f9      	strh	r1, [r7, #14]
 80164aa:	4413      	add	r3, r2
 80164ac:	781a      	ldrb	r2, [r3, #0]
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681a      	ldr	r2, [r3, #0]
 80164b6:	89fb      	ldrh	r3, [r7, #14]
 80164b8:	1c59      	adds	r1, r3, #1
 80164ba:	81f9      	strh	r1, [r7, #14]
 80164bc:	4413      	add	r3, r2
 80164be:	781a      	ldrb	r2, [r3, #0]
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	791b      	ldrb	r3, [r3, #4]
 80164c8:	1f1a      	subs	r2, r3, #4
 80164ca:	89fb      	ldrh	r3, [r7, #14]
 80164cc:	1ad3      	subs	r3, r2, r3
 80164ce:	2b10      	cmp	r3, #16
 80164d0:	d10e      	bne.n	80164f0 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	f103 0012 	add.w	r0, r3, #18
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	681a      	ldr	r2, [r3, #0]
 80164dc:	89fb      	ldrh	r3, [r7, #14]
 80164de:	4413      	add	r3, r2
 80164e0:	2210      	movs	r2, #16
 80164e2:	4619      	mov	r1, r3
 80164e4:	f002 fce7 	bl	8018eb6 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80164e8:	89fb      	ldrh	r3, [r7, #14]
 80164ea:	3310      	adds	r3, #16
 80164ec:	81fb      	strh	r3, [r7, #14]
 80164ee:	e008      	b.n	8016502 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	791b      	ldrb	r3, [r3, #4]
 80164f4:	1f1a      	subs	r2, r3, #4
 80164f6:	89fb      	ldrh	r3, [r7, #14]
 80164f8:	1ad3      	subs	r3, r2, r3
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	dd01      	ble.n	8016502 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80164fe:	2301      	movs	r3, #1
 8016500:	e031      	b.n	8016566 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	681a      	ldr	r2, [r3, #0]
 8016506:	89fb      	ldrh	r3, [r7, #14]
 8016508:	1c59      	adds	r1, r3, #1
 801650a:	81f9      	strh	r1, [r7, #14]
 801650c:	4413      	add	r3, r2
 801650e:	781b      	ldrb	r3, [r3, #0]
 8016510:	461a      	mov	r2, r3
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681a      	ldr	r2, [r3, #0]
 801651a:	89fb      	ldrh	r3, [r7, #14]
 801651c:	1c59      	adds	r1, r3, #1
 801651e:	81f9      	strh	r1, [r7, #14]
 8016520:	4413      	add	r3, r2
 8016522:	781b      	ldrb	r3, [r3, #0]
 8016524:	021a      	lsls	r2, r3, #8
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801652a:	431a      	orrs	r2, r3
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	681a      	ldr	r2, [r3, #0]
 8016534:	89fb      	ldrh	r3, [r7, #14]
 8016536:	1c59      	adds	r1, r3, #1
 8016538:	81f9      	strh	r1, [r7, #14]
 801653a:	4413      	add	r3, r2
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	041a      	lsls	r2, r3, #16
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016544:	431a      	orrs	r2, r3
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681a      	ldr	r2, [r3, #0]
 801654e:	89fb      	ldrh	r3, [r7, #14]
 8016550:	1c59      	adds	r1, r3, #1
 8016552:	81f9      	strh	r1, [r7, #14]
 8016554:	4413      	add	r3, r2
 8016556:	781b      	ldrb	r3, [r3, #0]
 8016558:	061a      	lsls	r2, r3, #24
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801655e:	431a      	orrs	r2, r3
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8016564:	2300      	movs	r3, #0
}
 8016566:	4618      	mov	r0, r3
 8016568:	3710      	adds	r7, #16
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}

0801656e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801656e:	b580      	push	{r7, lr}
 8016570:	b084      	sub	sp, #16
 8016572:	af00      	add	r7, sp, #0
 8016574:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d003      	beq.n	8016584 <LoRaMacParserData+0x16>
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d101      	bne.n	8016588 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016584:	2302      	movs	r3, #2
 8016586:	e0e0      	b.n	801674a <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8016588:	2300      	movs	r3, #0
 801658a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681a      	ldr	r2, [r3, #0]
 8016590:	89fb      	ldrh	r3, [r7, #14]
 8016592:	1c59      	adds	r1, r3, #1
 8016594:	81f9      	strh	r1, [r7, #14]
 8016596:	4413      	add	r3, r2
 8016598:	781a      	ldrb	r2, [r3, #0]
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	681a      	ldr	r2, [r3, #0]
 80165a2:	89fb      	ldrh	r3, [r7, #14]
 80165a4:	1c59      	adds	r1, r3, #1
 80165a6:	81f9      	strh	r1, [r7, #14]
 80165a8:	4413      	add	r3, r2
 80165aa:	781b      	ldrb	r3, [r3, #0]
 80165ac:	461a      	mov	r2, r3
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681a      	ldr	r2, [r3, #0]
 80165b6:	89fb      	ldrh	r3, [r7, #14]
 80165b8:	1c59      	adds	r1, r3, #1
 80165ba:	81f9      	strh	r1, [r7, #14]
 80165bc:	4413      	add	r3, r2
 80165be:	781b      	ldrb	r3, [r3, #0]
 80165c0:	021a      	lsls	r2, r3, #8
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	689b      	ldr	r3, [r3, #8]
 80165c6:	431a      	orrs	r2, r3
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	681a      	ldr	r2, [r3, #0]
 80165d0:	89fb      	ldrh	r3, [r7, #14]
 80165d2:	1c59      	adds	r1, r3, #1
 80165d4:	81f9      	strh	r1, [r7, #14]
 80165d6:	4413      	add	r3, r2
 80165d8:	781b      	ldrb	r3, [r3, #0]
 80165da:	041a      	lsls	r2, r3, #16
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	689b      	ldr	r3, [r3, #8]
 80165e0:	431a      	orrs	r2, r3
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	89fb      	ldrh	r3, [r7, #14]
 80165ec:	1c59      	adds	r1, r3, #1
 80165ee:	81f9      	strh	r1, [r7, #14]
 80165f0:	4413      	add	r3, r2
 80165f2:	781b      	ldrb	r3, [r3, #0]
 80165f4:	061a      	lsls	r2, r3, #24
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	689b      	ldr	r3, [r3, #8]
 80165fa:	431a      	orrs	r2, r3
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	681a      	ldr	r2, [r3, #0]
 8016604:	89fb      	ldrh	r3, [r7, #14]
 8016606:	1c59      	adds	r1, r3, #1
 8016608:	81f9      	strh	r1, [r7, #14]
 801660a:	4413      	add	r3, r2
 801660c:	781a      	ldrb	r2, [r3, #0]
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681a      	ldr	r2, [r3, #0]
 8016616:	89fb      	ldrh	r3, [r7, #14]
 8016618:	1c59      	adds	r1, r3, #1
 801661a:	81f9      	strh	r1, [r7, #14]
 801661c:	4413      	add	r3, r2
 801661e:	781b      	ldrb	r3, [r3, #0]
 8016620:	461a      	mov	r2, r3
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	681a      	ldr	r2, [r3, #0]
 801662a:	89fb      	ldrh	r3, [r7, #14]
 801662c:	1c59      	adds	r1, r3, #1
 801662e:	81f9      	strh	r1, [r7, #14]
 8016630:	4413      	add	r3, r2
 8016632:	781b      	ldrb	r3, [r3, #0]
 8016634:	0219      	lsls	r1, r3, #8
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	89db      	ldrh	r3, [r3, #14]
 801663a:	b21a      	sxth	r2, r3
 801663c:	b20b      	sxth	r3, r1
 801663e:	4313      	orrs	r3, r2
 8016640:	b21b      	sxth	r3, r3
 8016642:	b29a      	uxth	r2, r3
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	f103 0010 	add.w	r0, r3, #16
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	681a      	ldr	r2, [r3, #0]
 8016652:	89fb      	ldrh	r3, [r7, #14]
 8016654:	18d1      	adds	r1, r2, r3
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	7b1b      	ldrb	r3, [r3, #12]
 801665a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801665e:	b2db      	uxtb	r3, r3
 8016660:	461a      	mov	r2, r3
 8016662:	f002 fc28 	bl	8018eb6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	7b1b      	ldrb	r3, [r3, #12]
 801666a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801666e:	b2db      	uxtb	r3, r3
 8016670:	461a      	mov	r2, r3
 8016672:	89fb      	ldrh	r3, [r7, #14]
 8016674:	4413      	add	r3, r2
 8016676:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2200      	movs	r2, #0
 801667c:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2200      	movs	r2, #0
 8016684:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	791b      	ldrb	r3, [r3, #4]
 801668c:	461a      	mov	r2, r3
 801668e:	89fb      	ldrh	r3, [r7, #14]
 8016690:	1ad3      	subs	r3, r2, r3
 8016692:	2b04      	cmp	r3, #4
 8016694:	dd27      	ble.n	80166e6 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681a      	ldr	r2, [r3, #0]
 801669a:	89fb      	ldrh	r3, [r7, #14]
 801669c:	1c59      	adds	r1, r3, #1
 801669e:	81f9      	strh	r1, [r7, #14]
 80166a0:	4413      	add	r3, r2
 80166a2:	781a      	ldrb	r2, [r3, #0]
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	791a      	ldrb	r2, [r3, #4]
 80166ae:	89fb      	ldrh	r3, [r7, #14]
 80166b0:	b2db      	uxtb	r3, r3
 80166b2:	1ad3      	subs	r3, r2, r3
 80166b4:	b2db      	uxtb	r3, r3
 80166b6:	3b04      	subs	r3, #4
 80166b8:	b2da      	uxtb	r2, r3
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	681a      	ldr	r2, [r3, #0]
 80166c8:	89fb      	ldrh	r3, [r7, #14]
 80166ca:	18d1      	adds	r1, r2, r3
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80166d2:	461a      	mov	r2, r3
 80166d4:	f002 fbef 	bl	8018eb6 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80166de:	461a      	mov	r2, r3
 80166e0:	89fb      	ldrh	r3, [r7, #14]
 80166e2:	4413      	add	r3, r2
 80166e4:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681a      	ldr	r2, [r3, #0]
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	791b      	ldrb	r3, [r3, #4]
 80166ee:	3b04      	subs	r3, #4
 80166f0:	4413      	add	r3, r2
 80166f2:	781b      	ldrb	r3, [r3, #0]
 80166f4:	461a      	mov	r2, r3
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	6819      	ldr	r1, [r3, #0]
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	791b      	ldrb	r3, [r3, #4]
 8016706:	3b03      	subs	r3, #3
 8016708:	440b      	add	r3, r1
 801670a:	781b      	ldrb	r3, [r3, #0]
 801670c:	021b      	lsls	r3, r3, #8
 801670e:	431a      	orrs	r2, r3
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	6819      	ldr	r1, [r3, #0]
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	791b      	ldrb	r3, [r3, #4]
 8016720:	3b02      	subs	r3, #2
 8016722:	440b      	add	r3, r1
 8016724:	781b      	ldrb	r3, [r3, #0]
 8016726:	041b      	lsls	r3, r3, #16
 8016728:	431a      	orrs	r2, r3
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	6819      	ldr	r1, [r3, #0]
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	791b      	ldrb	r3, [r3, #4]
 801673a:	3b01      	subs	r3, #1
 801673c:	440b      	add	r3, r1
 801673e:	781b      	ldrb	r3, [r3, #0]
 8016740:	061b      	lsls	r3, r3, #24
 8016742:	431a      	orrs	r2, r3
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016748:	2300      	movs	r3, #0
}
 801674a:	4618      	mov	r0, r3
 801674c:	3710      	adds	r7, #16
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}

08016752 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016752:	b580      	push	{r7, lr}
 8016754:	b084      	sub	sp, #16
 8016756:	af00      	add	r7, sp, #0
 8016758:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d003      	beq.n	8016768 <LoRaMacSerializerJoinRequest+0x16>
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d101      	bne.n	801676c <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016768:	2301      	movs	r3, #1
 801676a:	e070      	b.n	801684e <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 801676c:	2300      	movs	r3, #0
 801676e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	791b      	ldrb	r3, [r3, #4]
 8016774:	2b16      	cmp	r3, #22
 8016776:	d801      	bhi.n	801677c <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016778:	2302      	movs	r3, #2
 801677a:	e068      	b.n	801684e <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681a      	ldr	r2, [r3, #0]
 8016780:	89fb      	ldrh	r3, [r7, #14]
 8016782:	1c59      	adds	r1, r3, #1
 8016784:	81f9      	strh	r1, [r7, #14]
 8016786:	4413      	add	r3, r2
 8016788:	687a      	ldr	r2, [r7, #4]
 801678a:	7952      	ldrb	r2, [r2, #5]
 801678c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	681a      	ldr	r2, [r3, #0]
 8016792:	89fb      	ldrh	r3, [r7, #14]
 8016794:	18d0      	adds	r0, r2, r3
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	3306      	adds	r3, #6
 801679a:	2208      	movs	r2, #8
 801679c:	4619      	mov	r1, r3
 801679e:	f002 fba5 	bl	8018eec <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80167a2:	89fb      	ldrh	r3, [r7, #14]
 80167a4:	3308      	adds	r3, #8
 80167a6:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	681a      	ldr	r2, [r3, #0]
 80167ac:	89fb      	ldrh	r3, [r7, #14]
 80167ae:	18d0      	adds	r0, r2, r3
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	330e      	adds	r3, #14
 80167b4:	2208      	movs	r2, #8
 80167b6:	4619      	mov	r1, r3
 80167b8:	f002 fb98 	bl	8018eec <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80167bc:	89fb      	ldrh	r3, [r7, #14]
 80167be:	3308      	adds	r3, #8
 80167c0:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	8ad9      	ldrh	r1, [r3, #22]
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	681a      	ldr	r2, [r3, #0]
 80167ca:	89fb      	ldrh	r3, [r7, #14]
 80167cc:	1c58      	adds	r0, r3, #1
 80167ce:	81f8      	strh	r0, [r7, #14]
 80167d0:	4413      	add	r3, r2
 80167d2:	b2ca      	uxtb	r2, r1
 80167d4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	8adb      	ldrh	r3, [r3, #22]
 80167da:	0a1b      	lsrs	r3, r3, #8
 80167dc:	b299      	uxth	r1, r3
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	681a      	ldr	r2, [r3, #0]
 80167e2:	89fb      	ldrh	r3, [r7, #14]
 80167e4:	1c58      	adds	r0, r3, #1
 80167e6:	81f8      	strh	r0, [r7, #14]
 80167e8:	4413      	add	r3, r2
 80167ea:	b2ca      	uxtb	r2, r1
 80167ec:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	6999      	ldr	r1, [r3, #24]
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	681a      	ldr	r2, [r3, #0]
 80167f6:	89fb      	ldrh	r3, [r7, #14]
 80167f8:	1c58      	adds	r0, r3, #1
 80167fa:	81f8      	strh	r0, [r7, #14]
 80167fc:	4413      	add	r3, r2
 80167fe:	b2ca      	uxtb	r2, r1
 8016800:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	699b      	ldr	r3, [r3, #24]
 8016806:	0a19      	lsrs	r1, r3, #8
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	681a      	ldr	r2, [r3, #0]
 801680c:	89fb      	ldrh	r3, [r7, #14]
 801680e:	1c58      	adds	r0, r3, #1
 8016810:	81f8      	strh	r0, [r7, #14]
 8016812:	4413      	add	r3, r2
 8016814:	b2ca      	uxtb	r2, r1
 8016816:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	699b      	ldr	r3, [r3, #24]
 801681c:	0c19      	lsrs	r1, r3, #16
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	681a      	ldr	r2, [r3, #0]
 8016822:	89fb      	ldrh	r3, [r7, #14]
 8016824:	1c58      	adds	r0, r3, #1
 8016826:	81f8      	strh	r0, [r7, #14]
 8016828:	4413      	add	r3, r2
 801682a:	b2ca      	uxtb	r2, r1
 801682c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	699b      	ldr	r3, [r3, #24]
 8016832:	0e19      	lsrs	r1, r3, #24
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681a      	ldr	r2, [r3, #0]
 8016838:	89fb      	ldrh	r3, [r7, #14]
 801683a:	1c58      	adds	r0, r3, #1
 801683c:	81f8      	strh	r0, [r7, #14]
 801683e:	4413      	add	r3, r2
 8016840:	b2ca      	uxtb	r2, r1
 8016842:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016844:	89fb      	ldrh	r3, [r7, #14]
 8016846:	b2da      	uxtb	r2, r3
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801684c:	2300      	movs	r3, #0
}
 801684e:	4618      	mov	r0, r3
 8016850:	3710      	adds	r7, #16
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}

08016856 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8016856:	b580      	push	{r7, lr}
 8016858:	b084      	sub	sp, #16
 801685a:	af00      	add	r7, sp, #0
 801685c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d003      	beq.n	801686c <LoRaMacSerializerData+0x16>
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d101      	bne.n	8016870 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801686c:	2301      	movs	r3, #1
 801686e:	e0e3      	b.n	8016a38 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8016870:	2300      	movs	r3, #0
 8016872:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8016874:	2308      	movs	r3, #8
 8016876:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	7b1b      	ldrb	r3, [r3, #12]
 801687c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016880:	b2db      	uxtb	r3, r3
 8016882:	461a      	mov	r2, r3
 8016884:	89bb      	ldrh	r3, [r7, #12]
 8016886:	4413      	add	r3, r2
 8016888:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016890:	2b00      	cmp	r3, #0
 8016892:	d002      	beq.n	801689a <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8016894:	89bb      	ldrh	r3, [r7, #12]
 8016896:	3301      	adds	r3, #1
 8016898:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80168a0:	461a      	mov	r2, r3
 80168a2:	89bb      	ldrh	r3, [r7, #12]
 80168a4:	4413      	add	r3, r2
 80168a6:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80168a8:	89bb      	ldrh	r3, [r7, #12]
 80168aa:	3304      	adds	r3, #4
 80168ac:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	791b      	ldrb	r3, [r3, #4]
 80168b2:	461a      	mov	r2, r3
 80168b4:	89bb      	ldrh	r3, [r7, #12]
 80168b6:	4293      	cmp	r3, r2
 80168b8:	d901      	bls.n	80168be <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80168ba:	2302      	movs	r3, #2
 80168bc:	e0bc      	b.n	8016a38 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	681a      	ldr	r2, [r3, #0]
 80168c2:	89fb      	ldrh	r3, [r7, #14]
 80168c4:	1c59      	adds	r1, r3, #1
 80168c6:	81f9      	strh	r1, [r7, #14]
 80168c8:	4413      	add	r3, r2
 80168ca:	687a      	ldr	r2, [r7, #4]
 80168cc:	7952      	ldrb	r2, [r2, #5]
 80168ce:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	6899      	ldr	r1, [r3, #8]
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	681a      	ldr	r2, [r3, #0]
 80168d8:	89fb      	ldrh	r3, [r7, #14]
 80168da:	1c58      	adds	r0, r3, #1
 80168dc:	81f8      	strh	r0, [r7, #14]
 80168de:	4413      	add	r3, r2
 80168e0:	b2ca      	uxtb	r2, r1
 80168e2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	689b      	ldr	r3, [r3, #8]
 80168e8:	0a19      	lsrs	r1, r3, #8
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	681a      	ldr	r2, [r3, #0]
 80168ee:	89fb      	ldrh	r3, [r7, #14]
 80168f0:	1c58      	adds	r0, r3, #1
 80168f2:	81f8      	strh	r0, [r7, #14]
 80168f4:	4413      	add	r3, r2
 80168f6:	b2ca      	uxtb	r2, r1
 80168f8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	689b      	ldr	r3, [r3, #8]
 80168fe:	0c19      	lsrs	r1, r3, #16
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	681a      	ldr	r2, [r3, #0]
 8016904:	89fb      	ldrh	r3, [r7, #14]
 8016906:	1c58      	adds	r0, r3, #1
 8016908:	81f8      	strh	r0, [r7, #14]
 801690a:	4413      	add	r3, r2
 801690c:	b2ca      	uxtb	r2, r1
 801690e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	689b      	ldr	r3, [r3, #8]
 8016914:	0e19      	lsrs	r1, r3, #24
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	681a      	ldr	r2, [r3, #0]
 801691a:	89fb      	ldrh	r3, [r7, #14]
 801691c:	1c58      	adds	r0, r3, #1
 801691e:	81f8      	strh	r0, [r7, #14]
 8016920:	4413      	add	r3, r2
 8016922:	b2ca      	uxtb	r2, r1
 8016924:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681a      	ldr	r2, [r3, #0]
 801692a:	89fb      	ldrh	r3, [r7, #14]
 801692c:	1c59      	adds	r1, r3, #1
 801692e:	81f9      	strh	r1, [r7, #14]
 8016930:	4413      	add	r3, r2
 8016932:	687a      	ldr	r2, [r7, #4]
 8016934:	7b12      	ldrb	r2, [r2, #12]
 8016936:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	89d9      	ldrh	r1, [r3, #14]
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	681a      	ldr	r2, [r3, #0]
 8016940:	89fb      	ldrh	r3, [r7, #14]
 8016942:	1c58      	adds	r0, r3, #1
 8016944:	81f8      	strh	r0, [r7, #14]
 8016946:	4413      	add	r3, r2
 8016948:	b2ca      	uxtb	r2, r1
 801694a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	89db      	ldrh	r3, [r3, #14]
 8016950:	0a1b      	lsrs	r3, r3, #8
 8016952:	b299      	uxth	r1, r3
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681a      	ldr	r2, [r3, #0]
 8016958:	89fb      	ldrh	r3, [r7, #14]
 801695a:	1c58      	adds	r0, r3, #1
 801695c:	81f8      	strh	r0, [r7, #14]
 801695e:	4413      	add	r3, r2
 8016960:	b2ca      	uxtb	r2, r1
 8016962:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	681a      	ldr	r2, [r3, #0]
 8016968:	89fb      	ldrh	r3, [r7, #14]
 801696a:	18d0      	adds	r0, r2, r3
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f103 0110 	add.w	r1, r3, #16
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	7b1b      	ldrb	r3, [r3, #12]
 8016976:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801697a:	b2db      	uxtb	r3, r3
 801697c:	461a      	mov	r2, r3
 801697e:	f002 fa9a 	bl	8018eb6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	7b1b      	ldrb	r3, [r3, #12]
 8016986:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801698a:	b2db      	uxtb	r3, r3
 801698c:	461a      	mov	r2, r3
 801698e:	89fb      	ldrh	r3, [r7, #14]
 8016990:	4413      	add	r3, r2
 8016992:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801699a:	2b00      	cmp	r3, #0
 801699c:	d009      	beq.n	80169b2 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	681a      	ldr	r2, [r3, #0]
 80169a2:	89fb      	ldrh	r3, [r7, #14]
 80169a4:	1c59      	adds	r1, r3, #1
 80169a6:	81f9      	strh	r1, [r7, #14]
 80169a8:	4413      	add	r3, r2
 80169aa:	687a      	ldr	r2, [r7, #4]
 80169ac:	f892 2020 	ldrb.w	r2, [r2, #32]
 80169b0:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	681a      	ldr	r2, [r3, #0]
 80169b6:	89fb      	ldrh	r3, [r7, #14]
 80169b8:	18d0      	adds	r0, r2, r3
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80169c4:	461a      	mov	r2, r3
 80169c6:	f002 fa76 	bl	8018eb6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80169d0:	461a      	mov	r2, r3
 80169d2:	89fb      	ldrh	r3, [r7, #14]
 80169d4:	4413      	add	r3, r2
 80169d6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681a      	ldr	r2, [r3, #0]
 80169e0:	89fb      	ldrh	r3, [r7, #14]
 80169e2:	1c58      	adds	r0, r3, #1
 80169e4:	81f8      	strh	r0, [r7, #14]
 80169e6:	4413      	add	r3, r2
 80169e8:	b2ca      	uxtb	r2, r1
 80169ea:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169f0:	0a19      	lsrs	r1, r3, #8
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	681a      	ldr	r2, [r3, #0]
 80169f6:	89fb      	ldrh	r3, [r7, #14]
 80169f8:	1c58      	adds	r0, r3, #1
 80169fa:	81f8      	strh	r0, [r7, #14]
 80169fc:	4413      	add	r3, r2
 80169fe:	b2ca      	uxtb	r2, r1
 8016a00:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a06:	0c19      	lsrs	r1, r3, #16
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	681a      	ldr	r2, [r3, #0]
 8016a0c:	89fb      	ldrh	r3, [r7, #14]
 8016a0e:	1c58      	adds	r0, r3, #1
 8016a10:	81f8      	strh	r0, [r7, #14]
 8016a12:	4413      	add	r3, r2
 8016a14:	b2ca      	uxtb	r2, r1
 8016a16:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a1c:	0e19      	lsrs	r1, r3, #24
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681a      	ldr	r2, [r3, #0]
 8016a22:	89fb      	ldrh	r3, [r7, #14]
 8016a24:	1c58      	adds	r0, r3, #1
 8016a26:	81f8      	strh	r0, [r7, #14]
 8016a28:	4413      	add	r3, r2
 8016a2a:	b2ca      	uxtb	r2, r1
 8016a2c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016a2e:	89fb      	ldrh	r3, [r7, #14]
 8016a30:	b2da      	uxtb	r2, r3
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016a36:	2300      	movs	r3, #0
}
 8016a38:	4618      	mov	r0, r3
 8016a3a:	3710      	adds	r7, #16
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}

08016a40 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016a40:	b480      	push	{r7}
 8016a42:	b083      	sub	sp, #12
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	4603      	mov	r3, r0
 8016a48:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016a4a:	79fb      	ldrb	r3, [r7, #7]
 8016a4c:	2b05      	cmp	r3, #5
 8016a4e:	d101      	bne.n	8016a54 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8016a50:	2301      	movs	r3, #1
 8016a52:	e000      	b.n	8016a56 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016a54:	2300      	movs	r3, #0
        }
    }
}
 8016a56:	4618      	mov	r0, r3
 8016a58:	370c      	adds	r7, #12
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bc80      	pop	{r7}
 8016a5e:	4770      	bx	lr

08016a60 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b084      	sub	sp, #16
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	4603      	mov	r3, r0
 8016a68:	6039      	str	r1, [r7, #0]
 8016a6a:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	60bb      	str	r3, [r7, #8]
    switch( region )
 8016a70:	79fb      	ldrb	r3, [r7, #7]
 8016a72:	2b05      	cmp	r3, #5
 8016a74:	d105      	bne.n	8016a82 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016a76:	6838      	ldr	r0, [r7, #0]
 8016a78:	f001 f8fa 	bl	8017c70 <RegionEU868GetPhyParam>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	60fb      	str	r3, [r7, #12]
 8016a80:	e001      	b.n	8016a86 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	4618      	mov	r0, r3
 8016a8a:	3710      	adds	r7, #16
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}

08016a90 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b082      	sub	sp, #8
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	4603      	mov	r3, r0
 8016a98:	6039      	str	r1, [r7, #0]
 8016a9a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016a9c:	79fb      	ldrb	r3, [r7, #7]
 8016a9e:	2b05      	cmp	r3, #5
 8016aa0:	d103      	bne.n	8016aaa <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8016aa2:	6838      	ldr	r0, [r7, #0]
 8016aa4:	f001 fa2a 	bl	8017efc <RegionEU868SetBandTxDone>
 8016aa8:	e000      	b.n	8016aac <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016aaa:	bf00      	nop
        }
    }
}
 8016aac:	3708      	adds	r7, #8
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}

08016ab2 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016ab2:	b580      	push	{r7, lr}
 8016ab4:	b082      	sub	sp, #8
 8016ab6:	af00      	add	r7, sp, #0
 8016ab8:	4603      	mov	r3, r0
 8016aba:	6039      	str	r1, [r7, #0]
 8016abc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016abe:	79fb      	ldrb	r3, [r7, #7]
 8016ac0:	2b05      	cmp	r3, #5
 8016ac2:	d103      	bne.n	8016acc <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016ac4:	6838      	ldr	r0, [r7, #0]
 8016ac6:	f001 fa45 	bl	8017f54 <RegionEU868InitDefaults>
 8016aca:	e000      	b.n	8016ace <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016acc:	bf00      	nop
        }
    }
}
 8016ace:	bf00      	nop
 8016ad0:	3708      	adds	r7, #8
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd80      	pop	{r7, pc}

08016ad6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016ad6:	b580      	push	{r7, lr}
 8016ad8:	b082      	sub	sp, #8
 8016ada:	af00      	add	r7, sp, #0
 8016adc:	4603      	mov	r3, r0
 8016ade:	6039      	str	r1, [r7, #0]
 8016ae0:	71fb      	strb	r3, [r7, #7]
 8016ae2:	4613      	mov	r3, r2
 8016ae4:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8016ae6:	79fb      	ldrb	r3, [r7, #7]
 8016ae8:	2b05      	cmp	r3, #5
 8016aea:	d106      	bne.n	8016afa <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016aec:	79bb      	ldrb	r3, [r7, #6]
 8016aee:	4619      	mov	r1, r3
 8016af0:	6838      	ldr	r0, [r7, #0]
 8016af2:	f001 facd 	bl	8018090 <RegionEU868Verify>
 8016af6:	4603      	mov	r3, r0
 8016af8:	e000      	b.n	8016afc <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8016afa:	2300      	movs	r3, #0
        }
    }
}
 8016afc:	4618      	mov	r0, r3
 8016afe:	3708      	adds	r7, #8
 8016b00:	46bd      	mov	sp, r7
 8016b02:	bd80      	pop	{r7, pc}

08016b04 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b082      	sub	sp, #8
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	6039      	str	r1, [r7, #0]
 8016b0e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016b10:	79fb      	ldrb	r3, [r7, #7]
 8016b12:	2b05      	cmp	r3, #5
 8016b14:	d103      	bne.n	8016b1e <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8016b16:	6838      	ldr	r0, [r7, #0]
 8016b18:	f001 fb36 	bl	8018188 <RegionEU868ApplyCFList>
 8016b1c:	e000      	b.n	8016b20 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016b1e:	bf00      	nop
        }
    }
}
 8016b20:	bf00      	nop
 8016b22:	3708      	adds	r7, #8
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}

08016b28 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	4603      	mov	r3, r0
 8016b30:	6039      	str	r1, [r7, #0]
 8016b32:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016b34:	79fb      	ldrb	r3, [r7, #7]
 8016b36:	2b05      	cmp	r3, #5
 8016b38:	d104      	bne.n	8016b44 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8016b3a:	6838      	ldr	r0, [r7, #0]
 8016b3c:	f001 fb98 	bl	8018270 <RegionEU868ChanMaskSet>
 8016b40:	4603      	mov	r3, r0
 8016b42:	e000      	b.n	8016b46 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016b44:	2300      	movs	r3, #0
        }
    }
}
 8016b46:	4618      	mov	r0, r3
 8016b48:	3708      	adds	r7, #8
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}

08016b4e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016b4e:	b580      	push	{r7, lr}
 8016b50:	b082      	sub	sp, #8
 8016b52:	af00      	add	r7, sp, #0
 8016b54:	603b      	str	r3, [r7, #0]
 8016b56:	4603      	mov	r3, r0
 8016b58:	71fb      	strb	r3, [r7, #7]
 8016b5a:	460b      	mov	r3, r1
 8016b5c:	71bb      	strb	r3, [r7, #6]
 8016b5e:	4613      	mov	r3, r2
 8016b60:	717b      	strb	r3, [r7, #5]
    switch( region )
 8016b62:	79fb      	ldrb	r3, [r7, #7]
 8016b64:	2b05      	cmp	r3, #5
 8016b66:	d107      	bne.n	8016b78 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8016b68:	7979      	ldrb	r1, [r7, #5]
 8016b6a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8016b6e:	693b      	ldr	r3, [r7, #16]
 8016b70:	683a      	ldr	r2, [r7, #0]
 8016b72:	f001 fba7 	bl	80182c4 <RegionEU868ComputeRxWindowParameters>
 8016b76:	e000      	b.n	8016b7a <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016b78:	bf00      	nop
        }
    }
}
 8016b7a:	bf00      	nop
 8016b7c:	3708      	adds	r7, #8
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}

08016b82 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016b82:	b580      	push	{r7, lr}
 8016b84:	b084      	sub	sp, #16
 8016b86:	af00      	add	r7, sp, #0
 8016b88:	4603      	mov	r3, r0
 8016b8a:	60b9      	str	r1, [r7, #8]
 8016b8c:	607a      	str	r2, [r7, #4]
 8016b8e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016b90:	7bfb      	ldrb	r3, [r7, #15]
 8016b92:	2b05      	cmp	r3, #5
 8016b94:	d105      	bne.n	8016ba2 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016b96:	6879      	ldr	r1, [r7, #4]
 8016b98:	68b8      	ldr	r0, [r7, #8]
 8016b9a:	f001 fbed 	bl	8018378 <RegionEU868RxConfig>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	e000      	b.n	8016ba4 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016ba2:	2300      	movs	r3, #0
        }
    }
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3710      	adds	r7, #16
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}

08016bac <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b084      	sub	sp, #16
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	60b9      	str	r1, [r7, #8]
 8016bb4:	607a      	str	r2, [r7, #4]
 8016bb6:	603b      	str	r3, [r7, #0]
 8016bb8:	4603      	mov	r3, r0
 8016bba:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016bbc:	7bfb      	ldrb	r3, [r7, #15]
 8016bbe:	2b05      	cmp	r3, #5
 8016bc0:	d106      	bne.n	8016bd0 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016bc2:	683a      	ldr	r2, [r7, #0]
 8016bc4:	6879      	ldr	r1, [r7, #4]
 8016bc6:	68b8      	ldr	r0, [r7, #8]
 8016bc8:	f001 fca6 	bl	8018518 <RegionEU868TxConfig>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	e000      	b.n	8016bd2 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016bd0:	2300      	movs	r3, #0
        }
    }
}
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	3710      	adds	r7, #16
 8016bd6:	46bd      	mov	sp, r7
 8016bd8:	bd80      	pop	{r7, pc}

08016bda <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016bda:	b580      	push	{r7, lr}
 8016bdc:	b086      	sub	sp, #24
 8016bde:	af02      	add	r7, sp, #8
 8016be0:	60b9      	str	r1, [r7, #8]
 8016be2:	607a      	str	r2, [r7, #4]
 8016be4:	603b      	str	r3, [r7, #0]
 8016be6:	4603      	mov	r3, r0
 8016be8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016bea:	7bfb      	ldrb	r3, [r7, #15]
 8016bec:	2b05      	cmp	r3, #5
 8016bee:	d109      	bne.n	8016c04 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016bf0:	69fb      	ldr	r3, [r7, #28]
 8016bf2:	9300      	str	r3, [sp, #0]
 8016bf4:	69bb      	ldr	r3, [r7, #24]
 8016bf6:	683a      	ldr	r2, [r7, #0]
 8016bf8:	6879      	ldr	r1, [r7, #4]
 8016bfa:	68b8      	ldr	r0, [r7, #8]
 8016bfc:	f001 fd5c 	bl	80186b8 <RegionEU868LinkAdrReq>
 8016c00:	4603      	mov	r3, r0
 8016c02:	e000      	b.n	8016c06 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016c04:	2300      	movs	r3, #0
        }
    }
}
 8016c06:	4618      	mov	r0, r3
 8016c08:	3710      	adds	r7, #16
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}

08016c0e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016c0e:	b580      	push	{r7, lr}
 8016c10:	b082      	sub	sp, #8
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	4603      	mov	r3, r0
 8016c16:	6039      	str	r1, [r7, #0]
 8016c18:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016c1a:	79fb      	ldrb	r3, [r7, #7]
 8016c1c:	2b05      	cmp	r3, #5
 8016c1e:	d104      	bne.n	8016c2a <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016c20:	6838      	ldr	r0, [r7, #0]
 8016c22:	f001 fe6b 	bl	80188fc <RegionEU868RxParamSetupReq>
 8016c26:	4603      	mov	r3, r0
 8016c28:	e000      	b.n	8016c2c <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016c2a:	2300      	movs	r3, #0
        }
    }
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3708      	adds	r7, #8
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}

08016c34 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b082      	sub	sp, #8
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	6039      	str	r1, [r7, #0]
 8016c3e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016c40:	79fb      	ldrb	r3, [r7, #7]
 8016c42:	2b05      	cmp	r3, #5
 8016c44:	d104      	bne.n	8016c50 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8016c46:	6838      	ldr	r0, [r7, #0]
 8016c48:	f001 fe96 	bl	8018978 <RegionEU868NewChannelReq>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	e000      	b.n	8016c52 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016c50:	2300      	movs	r3, #0
        }
    }
}
 8016c52:	4618      	mov	r0, r3
 8016c54:	3708      	adds	r7, #8
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}

08016c5a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8016c5a:	b580      	push	{r7, lr}
 8016c5c:	b082      	sub	sp, #8
 8016c5e:	af00      	add	r7, sp, #0
 8016c60:	4603      	mov	r3, r0
 8016c62:	6039      	str	r1, [r7, #0]
 8016c64:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016c66:	79fb      	ldrb	r3, [r7, #7]
 8016c68:	2b05      	cmp	r3, #5
 8016c6a:	d104      	bne.n	8016c76 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8016c6c:	6838      	ldr	r0, [r7, #0]
 8016c6e:	f001 fee1 	bl	8018a34 <RegionEU868TxParamSetupReq>
 8016c72:	4603      	mov	r3, r0
 8016c74:	e000      	b.n	8016c78 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016c76:	2300      	movs	r3, #0
        }
    }
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	3708      	adds	r7, #8
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	bd80      	pop	{r7, pc}

08016c80 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b082      	sub	sp, #8
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	4603      	mov	r3, r0
 8016c88:	6039      	str	r1, [r7, #0]
 8016c8a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016c8c:	79fb      	ldrb	r3, [r7, #7]
 8016c8e:	2b05      	cmp	r3, #5
 8016c90:	d104      	bne.n	8016c9c <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8016c92:	6838      	ldr	r0, [r7, #0]
 8016c94:	f001 feda 	bl	8018a4c <RegionEU868DlChannelReq>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	e000      	b.n	8016c9e <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016c9c:	2300      	movs	r3, #0
        }
    }
}
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	3708      	adds	r7, #8
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}

08016ca6 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8016ca6:	b580      	push	{r7, lr}
 8016ca8:	b082      	sub	sp, #8
 8016caa:	af00      	add	r7, sp, #0
 8016cac:	4603      	mov	r3, r0
 8016cae:	71fb      	strb	r3, [r7, #7]
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	71bb      	strb	r3, [r7, #6]
 8016cb4:	4613      	mov	r3, r2
 8016cb6:	717b      	strb	r3, [r7, #5]
    switch( region )
 8016cb8:	79fb      	ldrb	r3, [r7, #7]
 8016cba:	2b05      	cmp	r3, #5
 8016cbc:	d108      	bne.n	8016cd0 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016cbe:	797a      	ldrb	r2, [r7, #5]
 8016cc0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016cc4:	4611      	mov	r1, r2
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f001 ff0a 	bl	8018ae0 <RegionEU868AlternateDr>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	e000      	b.n	8016cd2 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016cd0:	2300      	movs	r3, #0
        }
    }
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3708      	adds	r7, #8
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}

08016cda <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016cda:	b580      	push	{r7, lr}
 8016cdc:	b084      	sub	sp, #16
 8016cde:	af00      	add	r7, sp, #0
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
 8016ce4:	603b      	str	r3, [r7, #0]
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016cea:	7bfb      	ldrb	r3, [r7, #15]
 8016cec:	2b05      	cmp	r3, #5
 8016cee:	d107      	bne.n	8016d00 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016cf0:	69bb      	ldr	r3, [r7, #24]
 8016cf2:	683a      	ldr	r2, [r7, #0]
 8016cf4:	6879      	ldr	r1, [r7, #4]
 8016cf6:	68b8      	ldr	r0, [r7, #8]
 8016cf8:	f001 ff02 	bl	8018b00 <RegionEU868NextChannel>
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	e000      	b.n	8016d02 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016d00:	2309      	movs	r3, #9
        }
    }
}
 8016d02:	4618      	mov	r0, r3
 8016d04:	3710      	adds	r7, #16
 8016d06:	46bd      	mov	sp, r7
 8016d08:	bd80      	pop	{r7, pc}

08016d0a <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016d0a:	b590      	push	{r4, r7, lr}
 8016d0c:	b083      	sub	sp, #12
 8016d0e:	af00      	add	r7, sp, #0
 8016d10:	4604      	mov	r4, r0
 8016d12:	4608      	mov	r0, r1
 8016d14:	4611      	mov	r1, r2
 8016d16:	461a      	mov	r2, r3
 8016d18:	4623      	mov	r3, r4
 8016d1a:	71fb      	strb	r3, [r7, #7]
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	71bb      	strb	r3, [r7, #6]
 8016d20:	460b      	mov	r3, r1
 8016d22:	717b      	strb	r3, [r7, #5]
 8016d24:	4613      	mov	r3, r2
 8016d26:	713b      	strb	r3, [r7, #4]
    switch( region )
 8016d28:	79fb      	ldrb	r3, [r7, #7]
 8016d2a:	2b05      	cmp	r3, #5
 8016d2c:	d109      	bne.n	8016d42 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016d2e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8016d32:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8016d36:	79bb      	ldrb	r3, [r7, #6]
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f002 f85b 	bl	8018df4 <RegionEU868ApplyDrOffset>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	e000      	b.n	8016d44 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8016d42:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8016d44:	4618      	mov	r0, r3
 8016d46:	370c      	adds	r7, #12
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bd90      	pop	{r4, r7, pc}

08016d4c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8016d4c:	b480      	push	{r7}
 8016d4e:	b083      	sub	sp, #12
 8016d50:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8016d52:	4b04      	ldr	r3, [pc, #16]	@ (8016d64 <RegionGetVersion+0x18>)
 8016d54:	607b      	str	r3, [r7, #4]

    return version;
 8016d56:	687b      	ldr	r3, [r7, #4]
}
 8016d58:	4618      	mov	r0, r3
 8016d5a:	370c      	adds	r7, #12
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bc80      	pop	{r7}
 8016d60:	4770      	bx	lr
 8016d62:	bf00      	nop
 8016d64:	02010003 	.word	0x02010003

08016d68 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016d68:	b480      	push	{r7}
 8016d6a:	b087      	sub	sp, #28
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	60f8      	str	r0, [r7, #12]
 8016d70:	4608      	mov	r0, r1
 8016d72:	4639      	mov	r1, r7
 8016d74:	e881 000c 	stmia.w	r1, {r2, r3}
 8016d78:	4603      	mov	r3, r0
 8016d7a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	881b      	ldrh	r3, [r3, #0]
 8016d80:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016d82:	7afb      	ldrb	r3, [r7, #11]
 8016d84:	f083 0301 	eor.w	r3, r3, #1
 8016d88:	b2db      	uxtb	r3, r3
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d007      	beq.n	8016d9e <GetDutyCycle+0x36>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
        uint16_t joinDutyCycle = BACKOFF_DC_1_HOUR;
 8016d8e:	2364      	movs	r3, #100	@ 0x64
 8016d90:	82bb      	strh	r3, [r7, #20]
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8016d92:	8aba      	ldrh	r2, [r7, #20]
 8016d94:	8afb      	ldrh	r3, [r7, #22]
 8016d96:	4293      	cmp	r3, r2
 8016d98:	bf38      	it	cc
 8016d9a:	4613      	movcc	r3, r2
 8016d9c:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016d9e:	8afb      	ldrh	r3, [r7, #22]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d101      	bne.n	8016da8 <GetDutyCycle+0x40>
    {
        dutyCycle = 1;
 8016da4:	2301      	movs	r3, #1
 8016da6:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016da8:	8afb      	ldrh	r3, [r7, #22]
}
 8016daa:	4618      	mov	r0, r3
 8016dac:	371c      	adds	r7, #28
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bc80      	pop	{r7}
 8016db2:	4770      	bx	lr

08016db4 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b086      	sub	sp, #24
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	60f8      	str	r0, [r7, #12]
 8016dbc:	4608      	mov	r0, r1
 8016dbe:	4639      	mov	r1, r7
 8016dc0:	e881 000c 	stmia.w	r1, {r2, r3}
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	881b      	ldrh	r3, [r3, #0]
 8016dcc:	827b      	strh	r3, [r7, #18]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016dce:	4b1a      	ldr	r3, [pc, #104]	@ (8016e38 <SetMaxTimeCredits+0x84>)
 8016dd0:	617b      	str	r3, [r7, #20]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016dd2:	7af9      	ldrb	r1, [r7, #11]
 8016dd4:	463b      	mov	r3, r7
 8016dd6:	cb0c      	ldmia	r3, {r2, r3}
 8016dd8:	68f8      	ldr	r0, [r7, #12]
 8016dda:	f7ff ffc5 	bl	8016d68 <GetDutyCycle>
 8016dde:	4603      	mov	r3, r0
 8016de0:	827b      	strh	r3, [r7, #18]

    if( joined == false )
 8016de2:	7afb      	ldrb	r3, [r7, #11]
 8016de4:	f083 0301 	eor.w	r3, r3, #1
 8016de8:	b2db      	uxtb	r3, r3
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d011      	beq.n	8016e12 <SetMaxTimeCredits+0x5e>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
		if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8016df4:	d202      	bcs.n	8016dfc <SetMaxTimeCredits+0x48>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016df6:	4b10      	ldr	r3, [pc, #64]	@ (8016e38 <SetMaxTimeCredits+0x84>)
 8016df8:	617b      	str	r3, [r7, #20]
 8016dfa:	e014      	b.n	8016e26 <SetMaxTimeCredits+0x72>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016dfc:	683b      	ldr	r3, [r7, #0]
 8016dfe:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016e02:	4293      	cmp	r3, r2
 8016e04:	d802      	bhi.n	8016e0c <SetMaxTimeCredits+0x58>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016e06:	4b0c      	ldr	r3, [pc, #48]	@ (8016e38 <SetMaxTimeCredits+0x84>)
 8016e08:	617b      	str	r3, [r7, #20]
 8016e0a:	e00c      	b.n	8016e26 <SetMaxTimeCredits+0x72>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
 8016e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8016e3c <SetMaxTimeCredits+0x88>)
 8016e0e:	617b      	str	r3, [r7, #20]
 8016e10:	e009      	b.n	8016e26 <SetMaxTimeCredits+0x72>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 8016e12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016e16:	f083 0301 	eor.w	r3, r3, #1
 8016e1a:	b2db      	uxtb	r3, r3
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d002      	beq.n	8016e26 <SetMaxTimeCredits+0x72>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	697a      	ldr	r2, [r7, #20]
 8016e24:	60da      	str	r2, [r3, #12]
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	697a      	ldr	r2, [r7, #20]
 8016e2a:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8016e2c:	8a7b      	ldrh	r3, [r7, #18]
}
 8016e2e:	4618      	mov	r0, r3
 8016e30:	3718      	adds	r7, #24
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
 8016e36:	bf00      	nop
 8016e38:	0036ee80 	.word	0x0036ee80
 8016e3c:	000d4670 	.word	0x000d4670

08016e40 <UpdateTimeCredits>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime, TimerTime_t lastBandUpdateTime )
{
 8016e40:	b580      	push	{r7, lr}
 8016e42:	b086      	sub	sp, #24
 8016e44:	af02      	add	r7, sp, #8
 8016e46:	6078      	str	r0, [r7, #4]
 8016e48:	4608      	mov	r0, r1
 8016e4a:	4611      	mov	r1, r2
 8016e4c:	461a      	mov	r2, r3
 8016e4e:	4603      	mov	r3, r0
 8016e50:	70fb      	strb	r3, [r7, #3]
 8016e52:	460b      	mov	r3, r1
 8016e54:	70bb      	strb	r3, [r7, #2]
 8016e56:	4613      	mov	r3, r2
 8016e58:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8016e5a:	78f9      	ldrb	r1, [r7, #3]
 8016e5c:	787b      	ldrb	r3, [r7, #1]
 8016e5e:	9301      	str	r3, [sp, #4]
 8016e60:	78bb      	ldrb	r3, [r7, #2]
 8016e62:	9300      	str	r3, [sp, #0]
 8016e64:	f107 0318 	add.w	r3, r7, #24
 8016e68:	cb0c      	ldmia	r3, {r2, r3}
 8016e6a:	6878      	ldr	r0, [r7, #4]
 8016e6c:	f7ff ffa2 	bl	8016db4 <SetMaxTimeCredits>
 8016e70:	4603      	mov	r3, r0
 8016e72:	817b      	strh	r3, [r7, #10]
                                            dutyCycleEnabled, lastTxIsJoinRequest );
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;
 8016e74:	4b1a      	ldr	r3, [pc, #104]	@ (8016ee0 <UpdateTimeCredits+0xa0>)
 8016e76:	60fb      	str	r3, [r7, #12]

    if( joined == false )
 8016e78:	78fb      	ldrb	r3, [r7, #3]
 8016e7a:	f083 0301 	eor.w	r3, r3, #1
 8016e7e:	b2db      	uxtb	r3, r3
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d010      	beq.n	8016ea6 <UpdateTimeCredits+0x66>
    {
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016e84:	69bb      	ldr	r3, [r7, #24]
 8016e86:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8016e8a:	d202      	bcs.n	8016e92 <UpdateTimeCredits+0x52>
        {
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
 8016e8c:	4b14      	ldr	r3, [pc, #80]	@ (8016ee0 <UpdateTimeCredits+0xa0>)
 8016e8e:	60fb      	str	r3, [r7, #12]
 8016e90:	e009      	b.n	8016ea6 <UpdateTimeCredits+0x66>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016e92:	69bb      	ldr	r3, [r7, #24]
 8016e94:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016e98:	4293      	cmp	r3, r2
 8016e9a:	d802      	bhi.n	8016ea2 <UpdateTimeCredits+0x62>
        {
            observation = ( BACKOFF_DUTY_CYCLE_10_HOURS_IN_S * 1000 );
 8016e9c:	4b11      	ldr	r3, [pc, #68]	@ (8016ee4 <UpdateTimeCredits+0xa4>)
 8016e9e:	60fb      	str	r3, [r7, #12]
 8016ea0:	e001      	b.n	8016ea6 <UpdateTimeCredits+0x66>
        }
        else
        {
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
 8016ea2:	4b11      	ldr	r3, [pc, #68]	@ (8016ee8 <UpdateTimeCredits+0xa8>)
 8016ea4:	60fb      	str	r3, [r7, #12]
        }
    }

    // Apply new credits only if the observation period has been elapsed.
    if( ( observation <= lastBandUpdateTime ) ||
 8016ea6:	68fa      	ldr	r2, [r7, #12]
 8016ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eaa:	429a      	cmp	r2, r3
 8016eac:	d908      	bls.n	8016ec0 <UpdateTimeCredits+0x80>
        ( band->LastMaxCreditAssignTime != observation ) ||
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	689b      	ldr	r3, [r3, #8]
    if( ( observation <= lastBandUpdateTime ) ||
 8016eb2:	68fa      	ldr	r2, [r7, #12]
 8016eb4:	429a      	cmp	r2, r3
 8016eb6:	d103      	bne.n	8016ec0 <UpdateTimeCredits+0x80>
        ( band->LastBandUpdateTime == 0 ) )
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	685b      	ldr	r3, [r3, #4]
        ( band->LastMaxCreditAssignTime != observation ) ||
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d109      	bne.n	8016ed4 <UpdateTimeCredits+0x94>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	691a      	ldr	r2, [r3, #16]
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	60da      	str	r2, [r3, #12]
        band->LastBandUpdateTime = currentTime;
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6a3a      	ldr	r2, [r7, #32]
 8016ecc:	605a      	str	r2, [r3, #4]
        band->LastMaxCreditAssignTime = observation;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	68fa      	ldr	r2, [r7, #12]
 8016ed2:	609a      	str	r2, [r3, #8]
    }
    return dutyCycle;
 8016ed4:	897b      	ldrh	r3, [r7, #10]
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	3710      	adds	r7, #16
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}
 8016ede:	bf00      	nop
 8016ee0:	0036ee80 	.word	0x0036ee80
 8016ee4:	025c3f80 	.word	0x025c3f80
 8016ee8:	07829b80 	.word	0x07829b80

08016eec <CountChannels>:
    return dutyCycle;
}
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016eec:	b480      	push	{r7}
 8016eee:	b085      	sub	sp, #20
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	460a      	mov	r2, r1
 8016ef6:	80fb      	strh	r3, [r7, #6]
 8016ef8:	4613      	mov	r3, r2
 8016efa:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016efc:	2300      	movs	r3, #0
 8016efe:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016f00:	2300      	movs	r3, #0
 8016f02:	73bb      	strb	r3, [r7, #14]
 8016f04:	e011      	b.n	8016f2a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016f06:	88fa      	ldrh	r2, [r7, #6]
 8016f08:	7bbb      	ldrb	r3, [r7, #14]
 8016f0a:	2101      	movs	r1, #1
 8016f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8016f10:	401a      	ands	r2, r3
 8016f12:	7bbb      	ldrb	r3, [r7, #14]
 8016f14:	2101      	movs	r1, #1
 8016f16:	fa01 f303 	lsl.w	r3, r1, r3
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	d102      	bne.n	8016f24 <CountChannels+0x38>
        {
            nbActiveBits++;
 8016f1e:	7bfb      	ldrb	r3, [r7, #15]
 8016f20:	3301      	adds	r3, #1
 8016f22:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016f24:	7bbb      	ldrb	r3, [r7, #14]
 8016f26:	3301      	adds	r3, #1
 8016f28:	73bb      	strb	r3, [r7, #14]
 8016f2a:	7bba      	ldrb	r2, [r7, #14]
 8016f2c:	797b      	ldrb	r3, [r7, #5]
 8016f2e:	429a      	cmp	r2, r3
 8016f30:	d3e9      	bcc.n	8016f06 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8016f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f34:	4618      	mov	r0, r3
 8016f36:	3714      	adds	r7, #20
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bc80      	pop	{r7}
 8016f3c:	4770      	bx	lr

08016f3e <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016f3e:	b580      	push	{r7, lr}
 8016f40:	b084      	sub	sp, #16
 8016f42:	af00      	add	r7, sp, #0
 8016f44:	6039      	str	r1, [r7, #0]
 8016f46:	4611      	mov	r1, r2
 8016f48:	461a      	mov	r2, r3
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	71fb      	strb	r3, [r7, #7]
 8016f4e:	460b      	mov	r3, r1
 8016f50:	71bb      	strb	r3, [r7, #6]
 8016f52:	4613      	mov	r3, r2
 8016f54:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016f56:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8016f5a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8016f5e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016f62:	4618      	mov	r0, r3
 8016f64:	f000 f85d 	bl	8017022 <RegionCommonValueInRange>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d101      	bne.n	8016f72 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	e053      	b.n	801701a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016f72:	2300      	movs	r3, #0
 8016f74:	73fb      	strb	r3, [r7, #15]
 8016f76:	2300      	movs	r3, #0
 8016f78:	73bb      	strb	r3, [r7, #14]
 8016f7a:	e049      	b.n	8017010 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	737b      	strb	r3, [r7, #13]
 8016f80:	e03d      	b.n	8016ffe <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016f82:	7bbb      	ldrb	r3, [r7, #14]
 8016f84:	005b      	lsls	r3, r3, #1
 8016f86:	683a      	ldr	r2, [r7, #0]
 8016f88:	4413      	add	r3, r2
 8016f8a:	881b      	ldrh	r3, [r3, #0]
 8016f8c:	461a      	mov	r2, r3
 8016f8e:	7b7b      	ldrb	r3, [r7, #13]
 8016f90:	fa42 f303 	asr.w	r3, r2, r3
 8016f94:	f003 0301 	and.w	r3, r3, #1
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d02d      	beq.n	8016ff8 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016f9c:	7bfa      	ldrb	r2, [r7, #15]
 8016f9e:	7b7b      	ldrb	r3, [r7, #13]
 8016fa0:	4413      	add	r3, r2
 8016fa2:	461a      	mov	r2, r3
 8016fa4:	4613      	mov	r3, r2
 8016fa6:	005b      	lsls	r3, r3, #1
 8016fa8:	4413      	add	r3, r2
 8016faa:	009b      	lsls	r3, r3, #2
 8016fac:	461a      	mov	r2, r3
 8016fae:	69fb      	ldr	r3, [r7, #28]
 8016fb0:	4413      	add	r3, r2
 8016fb2:	7a1b      	ldrb	r3, [r3, #8]
 8016fb4:	f343 0303 	sbfx	r3, r3, #0, #4
 8016fb8:	b25b      	sxtb	r3, r3
 8016fba:	f003 030f 	and.w	r3, r3, #15
 8016fbe:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016fc0:	7bfa      	ldrb	r2, [r7, #15]
 8016fc2:	7b7b      	ldrb	r3, [r7, #13]
 8016fc4:	4413      	add	r3, r2
 8016fc6:	461a      	mov	r2, r3
 8016fc8:	4613      	mov	r3, r2
 8016fca:	005b      	lsls	r3, r3, #1
 8016fcc:	4413      	add	r3, r2
 8016fce:	009b      	lsls	r3, r3, #2
 8016fd0:	461a      	mov	r2, r3
 8016fd2:	69fb      	ldr	r3, [r7, #28]
 8016fd4:	4413      	add	r3, r2
 8016fd6:	7a1b      	ldrb	r3, [r3, #8]
 8016fd8:	f343 1303 	sbfx	r3, r3, #4, #4
 8016fdc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016fde:	f003 030f 	and.w	r3, r3, #15
 8016fe2:	b25a      	sxtb	r2, r3
 8016fe4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016fe8:	4618      	mov	r0, r3
 8016fea:	f000 f81a 	bl	8017022 <RegionCommonValueInRange>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	2b01      	cmp	r3, #1
 8016ff2:	d101      	bne.n	8016ff8 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016ff4:	2301      	movs	r3, #1
 8016ff6:	e010      	b.n	801701a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016ff8:	7b7b      	ldrb	r3, [r7, #13]
 8016ffa:	3301      	adds	r3, #1
 8016ffc:	737b      	strb	r3, [r7, #13]
 8016ffe:	7b7b      	ldrb	r3, [r7, #13]
 8017000:	2b0f      	cmp	r3, #15
 8017002:	d9be      	bls.n	8016f82 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017004:	7bfb      	ldrb	r3, [r7, #15]
 8017006:	3310      	adds	r3, #16
 8017008:	73fb      	strb	r3, [r7, #15]
 801700a:	7bbb      	ldrb	r3, [r7, #14]
 801700c:	3301      	adds	r3, #1
 801700e:	73bb      	strb	r3, [r7, #14]
 8017010:	7bfa      	ldrb	r2, [r7, #15]
 8017012:	79fb      	ldrb	r3, [r7, #7]
 8017014:	429a      	cmp	r2, r3
 8017016:	d3b1      	bcc.n	8016f7c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8017018:	2300      	movs	r3, #0
}
 801701a:	4618      	mov	r0, r3
 801701c:	3710      	adds	r7, #16
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}

08017022 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017022:	b480      	push	{r7}
 8017024:	b083      	sub	sp, #12
 8017026:	af00      	add	r7, sp, #0
 8017028:	4603      	mov	r3, r0
 801702a:	71fb      	strb	r3, [r7, #7]
 801702c:	460b      	mov	r3, r1
 801702e:	71bb      	strb	r3, [r7, #6]
 8017030:	4613      	mov	r3, r2
 8017032:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8017034:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017038:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801703c:	429a      	cmp	r2, r3
 801703e:	db07      	blt.n	8017050 <RegionCommonValueInRange+0x2e>
 8017040:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017044:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017048:	429a      	cmp	r2, r3
 801704a:	dc01      	bgt.n	8017050 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 801704c:	2301      	movs	r3, #1
 801704e:	e000      	b.n	8017052 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8017050:	2300      	movs	r3, #0
}
 8017052:	4618      	mov	r0, r3
 8017054:	370c      	adds	r7, #12
 8017056:	46bd      	mov	sp, r7
 8017058:	bc80      	pop	{r7}
 801705a:	4770      	bx	lr

0801705c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801705c:	b480      	push	{r7}
 801705e:	b085      	sub	sp, #20
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
 8017064:	460b      	mov	r3, r1
 8017066:	70fb      	strb	r3, [r7, #3]
 8017068:	4613      	mov	r3, r2
 801706a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 801706c:	78fb      	ldrb	r3, [r7, #3]
 801706e:	091b      	lsrs	r3, r3, #4
 8017070:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017072:	78bb      	ldrb	r3, [r7, #2]
 8017074:	091b      	lsrs	r3, r3, #4
 8017076:	b2db      	uxtb	r3, r3
 8017078:	7bfa      	ldrb	r2, [r7, #15]
 801707a:	429a      	cmp	r2, r3
 801707c:	d803      	bhi.n	8017086 <RegionCommonChanDisable+0x2a>
 801707e:	78fa      	ldrb	r2, [r7, #3]
 8017080:	78bb      	ldrb	r3, [r7, #2]
 8017082:	429a      	cmp	r2, r3
 8017084:	d301      	bcc.n	801708a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017086:	2300      	movs	r3, #0
 8017088:	e017      	b.n	80170ba <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801708a:	7bfb      	ldrb	r3, [r7, #15]
 801708c:	005b      	lsls	r3, r3, #1
 801708e:	687a      	ldr	r2, [r7, #4]
 8017090:	4413      	add	r3, r2
 8017092:	881b      	ldrh	r3, [r3, #0]
 8017094:	b21a      	sxth	r2, r3
 8017096:	78fb      	ldrb	r3, [r7, #3]
 8017098:	f003 030f 	and.w	r3, r3, #15
 801709c:	2101      	movs	r1, #1
 801709e:	fa01 f303 	lsl.w	r3, r1, r3
 80170a2:	b21b      	sxth	r3, r3
 80170a4:	43db      	mvns	r3, r3
 80170a6:	b21b      	sxth	r3, r3
 80170a8:	4013      	ands	r3, r2
 80170aa:	b219      	sxth	r1, r3
 80170ac:	7bfb      	ldrb	r3, [r7, #15]
 80170ae:	005b      	lsls	r3, r3, #1
 80170b0:	687a      	ldr	r2, [r7, #4]
 80170b2:	4413      	add	r3, r2
 80170b4:	b28a      	uxth	r2, r1
 80170b6:	801a      	strh	r2, [r3, #0]

    return true;
 80170b8:	2301      	movs	r3, #1
}
 80170ba:	4618      	mov	r0, r3
 80170bc:	3714      	adds	r7, #20
 80170be:	46bd      	mov	sp, r7
 80170c0:	bc80      	pop	{r7}
 80170c2:	4770      	bx	lr

080170c4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b084      	sub	sp, #16
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	460b      	mov	r3, r1
 80170ce:	70fb      	strb	r3, [r7, #3]
 80170d0:	4613      	mov	r3, r2
 80170d2:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80170d4:	2300      	movs	r3, #0
 80170d6:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d101      	bne.n	80170e2 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80170de:	2300      	movs	r3, #0
 80170e0:	e018      	b.n	8017114 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80170e2:	78fb      	ldrb	r3, [r7, #3]
 80170e4:	73bb      	strb	r3, [r7, #14]
 80170e6:	e010      	b.n	801710a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80170e8:	7bbb      	ldrb	r3, [r7, #14]
 80170ea:	005b      	lsls	r3, r3, #1
 80170ec:	687a      	ldr	r2, [r7, #4]
 80170ee:	4413      	add	r3, r2
 80170f0:	881b      	ldrh	r3, [r3, #0]
 80170f2:	2110      	movs	r1, #16
 80170f4:	4618      	mov	r0, r3
 80170f6:	f7ff fef9 	bl	8016eec <CountChannels>
 80170fa:	4603      	mov	r3, r0
 80170fc:	461a      	mov	r2, r3
 80170fe:	7bfb      	ldrb	r3, [r7, #15]
 8017100:	4413      	add	r3, r2
 8017102:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017104:	7bbb      	ldrb	r3, [r7, #14]
 8017106:	3301      	adds	r3, #1
 8017108:	73bb      	strb	r3, [r7, #14]
 801710a:	7bba      	ldrb	r2, [r7, #14]
 801710c:	78bb      	ldrb	r3, [r7, #2]
 801710e:	429a      	cmp	r2, r3
 8017110:	d3ea      	bcc.n	80170e8 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8017112:	7bfb      	ldrb	r3, [r7, #15]
}
 8017114:	4618      	mov	r0, r3
 8017116:	3710      	adds	r7, #16
 8017118:	46bd      	mov	sp, r7
 801711a:	bd80      	pop	{r7, pc}

0801711c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 801711c:	b480      	push	{r7}
 801711e:	b087      	sub	sp, #28
 8017120:	af00      	add	r7, sp, #0
 8017122:	60f8      	str	r0, [r7, #12]
 8017124:	60b9      	str	r1, [r7, #8]
 8017126:	4613      	mov	r3, r2
 8017128:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d016      	beq.n	801715e <RegionCommonChanMaskCopy+0x42>
 8017130:	68bb      	ldr	r3, [r7, #8]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d013      	beq.n	801715e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017136:	2300      	movs	r3, #0
 8017138:	75fb      	strb	r3, [r7, #23]
 801713a:	e00c      	b.n	8017156 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801713c:	7dfb      	ldrb	r3, [r7, #23]
 801713e:	005b      	lsls	r3, r3, #1
 8017140:	68ba      	ldr	r2, [r7, #8]
 8017142:	441a      	add	r2, r3
 8017144:	7dfb      	ldrb	r3, [r7, #23]
 8017146:	005b      	lsls	r3, r3, #1
 8017148:	68f9      	ldr	r1, [r7, #12]
 801714a:	440b      	add	r3, r1
 801714c:	8812      	ldrh	r2, [r2, #0]
 801714e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017150:	7dfb      	ldrb	r3, [r7, #23]
 8017152:	3301      	adds	r3, #1
 8017154:	75fb      	strb	r3, [r7, #23]
 8017156:	7dfa      	ldrb	r2, [r7, #23]
 8017158:	79fb      	ldrb	r3, [r7, #7]
 801715a:	429a      	cmp	r2, r3
 801715c:	d3ee      	bcc.n	801713c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801715e:	bf00      	nop
 8017160:	371c      	adds	r7, #28
 8017162:	46bd      	mov	sp, r7
 8017164:	bc80      	pop	{r7}
 8017166:	4770      	bx	lr

08017168 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017168:	b082      	sub	sp, #8
 801716a:	b580      	push	{r7, lr}
 801716c:	b086      	sub	sp, #24
 801716e:	af00      	add	r7, sp, #0
 8017170:	60f8      	str	r0, [r7, #12]
 8017172:	60b9      	str	r1, [r7, #8]
 8017174:	627b      	str	r3, [r7, #36]	@ 0x24
 8017176:	4613      	mov	r3, r2
 8017178:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801717a:	79f9      	ldrb	r1, [r7, #7]
 801717c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017180:	cb0c      	ldmia	r3, {r2, r3}
 8017182:	68f8      	ldr	r0, [r7, #12]
 8017184:	f7ff fdf0 	bl	8016d68 <GetDutyCycle>
 8017188:	4603      	mov	r3, r0
 801718a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	68da      	ldr	r2, [r3, #12]
 8017190:	8afb      	ldrh	r3, [r7, #22]
 8017192:	68b9      	ldr	r1, [r7, #8]
 8017194:	fb01 f303 	mul.w	r3, r1, r3
 8017198:	429a      	cmp	r2, r3
 801719a:	d909      	bls.n	80171b0 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	68da      	ldr	r2, [r3, #12]
 80171a0:	8afb      	ldrh	r3, [r7, #22]
 80171a2:	68b9      	ldr	r1, [r7, #8]
 80171a4:	fb01 f303 	mul.w	r3, r1, r3
 80171a8:	1ad2      	subs	r2, r2, r3
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80171ae:	e002      	b.n	80171b6 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2200      	movs	r2, #0
 80171b4:	60da      	str	r2, [r3, #12]
}
 80171b6:	bf00      	nop
 80171b8:	3718      	adds	r7, #24
 80171ba:	46bd      	mov	sp, r7
 80171bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80171c0:	b002      	add	sp, #8
 80171c2:	4770      	bx	lr

080171c4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80171c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171c6:	b08f      	sub	sp, #60	@ 0x3c
 80171c8:	af04      	add	r7, sp, #16
 80171ca:	6039      	str	r1, [r7, #0]
 80171cc:	4611      	mov	r1, r2
 80171ce:	461a      	mov	r2, r3
 80171d0:	4603      	mov	r3, r0
 80171d2:	71fb      	strb	r3, [r7, #7]
 80171d4:	460b      	mov	r3, r1
 80171d6:	71bb      	strb	r3, [r7, #6]
 80171d8:	4613      	mov	r3, r2
 80171da:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80171dc:	f04f 33ff 	mov.w	r3, #4294967295
 80171e0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80171e2:	f005 fe6f 	bl	801cec4 <UTIL_TIMER_GetCurrentTime>
 80171e6:	61b8      	str	r0, [r7, #24]
    TimerTime_t creditCosts = 0;
 80171e8:	2300      	movs	r3, #0
 80171ea:	617b      	str	r3, [r7, #20]
    uint16_t dutyCycle = 1;
 80171ec:	2301      	movs	r3, #1
 80171ee:	827b      	strh	r3, [r7, #18]
    uint8_t validBands = 0;
 80171f0:	2300      	movs	r3, #0
 80171f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80171f6:	2300      	movs	r3, #0
 80171f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80171fc:	e09c      	b.n	8017338 <RegionCommonUpdateBandTimeOff+0x174>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
        TimerTime_t elapsedTime = TimerGetElapsedTime( bands[i].LastBandUpdateTime );
 80171fe:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017202:	4613      	mov	r3, r2
 8017204:	005b      	lsls	r3, r3, #1
 8017206:	4413      	add	r3, r2
 8017208:	00db      	lsls	r3, r3, #3
 801720a:	461a      	mov	r2, r3
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	4413      	add	r3, r2
 8017210:	685b      	ldr	r3, [r3, #4]
 8017212:	4618      	mov	r0, r3
 8017214:	f005 fe68 	bl	801cee8 <UTIL_TIMER_GetElapsedTime>
 8017218:	60f8      	str	r0, [r7, #12]

        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801721a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801721e:	4613      	mov	r3, r2
 8017220:	005b      	lsls	r3, r3, #1
 8017222:	4413      	add	r3, r2
 8017224:	00db      	lsls	r3, r3, #3
 8017226:	461a      	mov	r2, r3
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	189c      	adds	r4, r3, r2
 801722c:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8017230:	797a      	ldrb	r2, [r7, #5]
 8017232:	79fd      	ldrb	r5, [r7, #7]
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	9303      	str	r3, [sp, #12]
 8017238:	69bb      	ldr	r3, [r7, #24]
 801723a:	9302      	str	r3, [sp, #8]
 801723c:	46ec      	mov	ip, sp
 801723e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8017242:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017246:	e88c 0003 	stmia.w	ip, {r0, r1}
 801724a:	4633      	mov	r3, r6
 801724c:	4629      	mov	r1, r5
 801724e:	4620      	mov	r0, r4
 8017250:	f7ff fdf6 	bl	8016e40 <UpdateTimeCredits>
 8017254:	4603      	mov	r3, r0
 8017256:	827b      	strh	r3, [r7, #18]
                                       currentTime );
#endif

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8017258:	8a7a      	ldrh	r2, [r7, #18]
 801725a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801725c:	fb02 f303 	mul.w	r3, r2, r3
 8017260:	617b      	str	r3, [r7, #20]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017262:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017266:	4613      	mov	r3, r2
 8017268:	005b      	lsls	r3, r3, #1
 801726a:	4413      	add	r3, r2
 801726c:	00db      	lsls	r3, r3, #3
 801726e:	461a      	mov	r2, r3
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	4413      	add	r3, r2
 8017274:	68db      	ldr	r3, [r3, #12]
 8017276:	697a      	ldr	r2, [r7, #20]
 8017278:	429a      	cmp	r2, r3
 801727a:	d308      	bcc.n	801728e <RegionCommonUpdateBandTimeOff+0xca>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801727c:	797b      	ldrb	r3, [r7, #5]
 801727e:	f083 0301 	eor.w	r3, r3, #1
 8017282:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017284:	2b00      	cmp	r3, #0
 8017286:	d013      	beq.n	80172b0 <RegionCommonUpdateBandTimeOff+0xec>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017288:	79fb      	ldrb	r3, [r7, #7]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d010      	beq.n	80172b0 <RegionCommonUpdateBandTimeOff+0xec>
        {
            bands[i].ReadyForTransmission = true;
 801728e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017292:	4613      	mov	r3, r2
 8017294:	005b      	lsls	r3, r3, #1
 8017296:	4413      	add	r3, r2
 8017298:	00db      	lsls	r3, r3, #3
 801729a:	461a      	mov	r2, r3
 801729c:	683b      	ldr	r3, [r7, #0]
 801729e:	4413      	add	r3, r2
 80172a0:	2201      	movs	r2, #1
 80172a2:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80172a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80172a8:	3301      	adds	r3, #1
 80172aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80172ae:	e03e      	b.n	801732e <RegionCommonUpdateBandTimeOff+0x16a>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80172b0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80172b4:	4613      	mov	r3, r2
 80172b6:	005b      	lsls	r3, r3, #1
 80172b8:	4413      	add	r3, r2
 80172ba:	00db      	lsls	r3, r3, #3
 80172bc:	461a      	mov	r2, r3
 80172be:	683b      	ldr	r3, [r7, #0]
 80172c0:	4413      	add	r3, r2
 80172c2:	2200      	movs	r2, #0
 80172c4:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80172c6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80172ca:	4613      	mov	r3, r2
 80172cc:	005b      	lsls	r3, r3, #1
 80172ce:	4413      	add	r3, r2
 80172d0:	00db      	lsls	r3, r3, #3
 80172d2:	461a      	mov	r2, r3
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	4413      	add	r3, r2
 80172d8:	691b      	ldr	r3, [r3, #16]
 80172da:	697a      	ldr	r2, [r7, #20]
 80172dc:	429a      	cmp	r2, r3
 80172de:	d226      	bcs.n	801732e <RegionCommonUpdateBandTimeOff+0x16a>
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
                TimerTime_t observationTimeDiff = 0;
 80172e0:	2300      	movs	r3, #0
 80172e2:	61fb      	str	r3, [r7, #28]
                if( bands[i].LastMaxCreditAssignTime >= elapsedTime )
 80172e4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80172e8:	4613      	mov	r3, r2
 80172ea:	005b      	lsls	r3, r3, #1
 80172ec:	4413      	add	r3, r2
 80172ee:	00db      	lsls	r3, r3, #3
 80172f0:	461a      	mov	r2, r3
 80172f2:	683b      	ldr	r3, [r7, #0]
 80172f4:	4413      	add	r3, r2
 80172f6:	689b      	ldr	r3, [r3, #8]
 80172f8:	68fa      	ldr	r2, [r7, #12]
 80172fa:	429a      	cmp	r2, r3
 80172fc:	d80c      	bhi.n	8017318 <RegionCommonUpdateBandTimeOff+0x154>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
 80172fe:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017302:	4613      	mov	r3, r2
 8017304:	005b      	lsls	r3, r3, #1
 8017306:	4413      	add	r3, r2
 8017308:	00db      	lsls	r3, r3, #3
 801730a:	461a      	mov	r2, r3
 801730c:	683b      	ldr	r3, [r7, #0]
 801730e:	4413      	add	r3, r2
 8017310:	689a      	ldr	r2, [r3, #8]
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	1ad3      	subs	r3, r2, r3
 8017316:	61fb      	str	r3, [r7, #28]
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
 8017318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801731a:	69fb      	ldr	r3, [r7, #28]
 801731c:	4293      	cmp	r3, r2
 801731e:	bf28      	it	cs
 8017320:	4613      	movcs	r3, r2
 8017322:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017324:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017328:	3301      	adds	r3, #1
 801732a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for( uint8_t i = 0; i < nbBands; i++ )
 801732e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017332:	3301      	adds	r3, #1
 8017334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017338:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801733c:	79bb      	ldrb	r3, [r7, #6]
 801733e:	429a      	cmp	r2, r3
 8017340:	f4ff af5d 	bcc.w	80171fe <RegionCommonUpdateBandTimeOff+0x3a>
#endif

        }
    }

    if( validBands == 0 )
 8017344:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017348:	2b00      	cmp	r3, #0
 801734a:	d102      	bne.n	8017352 <RegionCommonUpdateBandTimeOff+0x18e>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801734c:	f04f 33ff 	mov.w	r3, #4294967295
 8017350:	e000      	b.n	8017354 <RegionCommonUpdateBandTimeOff+0x190>
    }
    return minTimeToWait;
 8017352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017354:	4618      	mov	r0, r3
 8017356:	372c      	adds	r7, #44	@ 0x2c
 8017358:	46bd      	mov	sp, r7
 801735a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801735c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 801735c:	b480      	push	{r7}
 801735e:	b085      	sub	sp, #20
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
 8017364:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8017366:	2300      	movs	r3, #0
 8017368:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	781b      	ldrb	r3, [r3, #0]
 801736e:	2b03      	cmp	r3, #3
 8017370:	d140      	bne.n	80173f4 <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	3301      	adds	r3, #1
 8017376:	781b      	ldrb	r3, [r3, #0]
 8017378:	b25a      	sxtb	r2, r3
 801737a:	683b      	ldr	r3, [r7, #0]
 801737c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017384:	f003 030f 	and.w	r3, r3, #15
 8017388:	b25a      	sxtb	r2, r3
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801738e:	683b      	ldr	r3, [r7, #0]
 8017390:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017394:	b2db      	uxtb	r3, r3
 8017396:	091b      	lsrs	r3, r3, #4
 8017398:	b2db      	uxtb	r3, r3
 801739a:	b25a      	sxtb	r2, r3
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	3302      	adds	r3, #2
 80173a4:	781b      	ldrb	r3, [r3, #0]
 80173a6:	461a      	mov	r2, r3
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80173ac:	683b      	ldr	r3, [r7, #0]
 80173ae:	889b      	ldrh	r3, [r3, #4]
 80173b0:	b21a      	sxth	r2, r3
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	3303      	adds	r3, #3
 80173b6:	781b      	ldrb	r3, [r3, #0]
 80173b8:	b21b      	sxth	r3, r3
 80173ba:	021b      	lsls	r3, r3, #8
 80173bc:	b21b      	sxth	r3, r3
 80173be:	4313      	orrs	r3, r2
 80173c0:	b21b      	sxth	r3, r3
 80173c2:	b29a      	uxth	r2, r3
 80173c4:	683b      	ldr	r3, [r7, #0]
 80173c6:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	791a      	ldrb	r2, [r3, #4]
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	091b      	lsrs	r3, r3, #4
 80173d6:	b2db      	uxtb	r3, r3
 80173d8:	f003 0307 	and.w	r3, r3, #7
 80173dc:	b2da      	uxtb	r2, r3
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80173e2:	683b      	ldr	r3, [r7, #0]
 80173e4:	781b      	ldrb	r3, [r3, #0]
 80173e6:	f003 030f 	and.w	r3, r3, #15
 80173ea:	b2da      	uxtb	r2, r3
 80173ec:	683b      	ldr	r3, [r7, #0]
 80173ee:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80173f0:	2305      	movs	r3, #5
 80173f2:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80173f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	3714      	adds	r7, #20
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bc80      	pop	{r7}
 80173fe:	4770      	bx	lr

08017400 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017400:	b5b0      	push	{r4, r5, r7, lr}
 8017402:	b088      	sub	sp, #32
 8017404:	af02      	add	r7, sp, #8
 8017406:	60f8      	str	r0, [r7, #12]
 8017408:	60b9      	str	r1, [r7, #8]
 801740a:	607a      	str	r2, [r7, #4]
 801740c:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	791b      	ldrb	r3, [r3, #4]
 8017412:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	799b      	ldrb	r3, [r3, #6]
 8017418:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	79db      	ldrb	r3, [r3, #7]
 801741e:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	7a1b      	ldrb	r3, [r3, #8]
 8017424:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	795b      	ldrb	r3, [r3, #5]
 801742a:	f083 0301 	eor.w	r3, r3, #1
 801742e:	b2db      	uxtb	r3, r3
 8017430:	2b00      	cmp	r3, #0
 8017432:	d008      	beq.n	8017446 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	7adb      	ldrb	r3, [r3, #11]
 8017438:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	7a5b      	ldrb	r3, [r3, #9]
 801743e:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	7a9b      	ldrb	r3, [r3, #10]
 8017444:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8017446:	7dfb      	ldrb	r3, [r7, #23]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d04a      	beq.n	80174e2 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801744c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017450:	2b0f      	cmp	r3, #15
 8017452:	d103      	bne.n	801745c <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	7a5b      	ldrb	r3, [r3, #9]
 8017458:	75bb      	strb	r3, [r7, #22]
 801745a:	e01d      	b.n	8017498 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	7b18      	ldrb	r0, [r3, #12]
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	6919      	ldr	r1, [r3, #16]
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8017470:	68fa      	ldr	r2, [r7, #12]
 8017472:	6992      	ldr	r2, [r2, #24]
 8017474:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8017478:	9201      	str	r2, [sp, #4]
 801747a:	9300      	str	r3, [sp, #0]
 801747c:	462b      	mov	r3, r5
 801747e:	4622      	mov	r2, r4
 8017480:	f7ff fd5d 	bl	8016f3e <RegionCommonChanVerifyDr>
 8017484:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017486:	f083 0301 	eor.w	r3, r3, #1
 801748a:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801748c:	2b00      	cmp	r3, #0
 801748e:	d003      	beq.n	8017498 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8017490:	7dfb      	ldrb	r3, [r7, #23]
 8017492:	f023 0302 	bic.w	r3, r3, #2
 8017496:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8017498:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801749c:	2b0f      	cmp	r3, #15
 801749e:	d103      	bne.n	80174a8 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	7a9b      	ldrb	r3, [r3, #10]
 80174a4:	757b      	strb	r3, [r7, #21]
 80174a6:	e01c      	b.n	80174e2 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80174b4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80174b8:	4618      	mov	r0, r3
 80174ba:	f7ff fdb2 	bl	8017022 <RegionCommonValueInRange>
 80174be:	4603      	mov	r3, r0
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d10e      	bne.n	80174e2 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80174ca:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80174ce:	429a      	cmp	r2, r3
 80174d0:	da03      	bge.n	80174da <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	7f5b      	ldrb	r3, [r3, #29]
 80174d6:	757b      	strb	r3, [r7, #21]
 80174d8:	e003      	b.n	80174e2 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80174da:	7dfb      	ldrb	r3, [r7, #23]
 80174dc:	f023 0304 	bic.w	r3, r3, #4
 80174e0:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80174e2:	7dfb      	ldrb	r3, [r7, #23]
 80174e4:	2b07      	cmp	r3, #7
 80174e6:	d105      	bne.n	80174f4 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80174e8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d101      	bne.n	80174f4 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80174f0:	2301      	movs	r3, #1
 80174f2:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80174f4:	68bb      	ldr	r3, [r7, #8]
 80174f6:	7dba      	ldrb	r2, [r7, #22]
 80174f8:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	7d7a      	ldrb	r2, [r7, #21]
 80174fe:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017500:	7d3a      	ldrb	r2, [r7, #20]
 8017502:	683b      	ldr	r3, [r7, #0]
 8017504:	701a      	strb	r2, [r3, #0]

    return status;
 8017506:	7dfb      	ldrb	r3, [r7, #23]
}
 8017508:	4618      	mov	r0, r3
 801750a:	3718      	adds	r7, #24
 801750c:	46bd      	mov	sp, r7
 801750e:	bdb0      	pop	{r4, r5, r7, pc}

08017510 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017510:	b480      	push	{r7}
 8017512:	b083      	sub	sp, #12
 8017514:	af00      	add	r7, sp, #0
 8017516:	4603      	mov	r3, r0
 8017518:	6039      	str	r1, [r7, #0]
 801751a:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 801751c:	79fb      	ldrb	r3, [r7, #7]
 801751e:	4a06      	ldr	r2, [pc, #24]	@ (8017538 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017520:	fa02 f303 	lsl.w	r3, r2, r3
 8017524:	461a      	mov	r2, r3
 8017526:	683b      	ldr	r3, [r7, #0]
 8017528:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801752c:	4618      	mov	r0, r3
 801752e:	370c      	adds	r7, #12
 8017530:	46bd      	mov	sp, r7
 8017532:	bc80      	pop	{r7}
 8017534:	4770      	bx	lr
 8017536:	bf00      	nop
 8017538:	000f4240 	.word	0x000f4240

0801753c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 801753c:	b480      	push	{r7}
 801753e:	b083      	sub	sp, #12
 8017540:	af00      	add	r7, sp, #0
 8017542:	4603      	mov	r3, r0
 8017544:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8017546:	79fb      	ldrb	r3, [r7, #7]
 8017548:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801754c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017550:	4618      	mov	r0, r3
 8017552:	370c      	adds	r7, #12
 8017554:	46bd      	mov	sp, r7
 8017556:	bc80      	pop	{r7}
 8017558:	4770      	bx	lr
	...

0801755c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 801755c:	b480      	push	{r7}
 801755e:	b085      	sub	sp, #20
 8017560:	af00      	add	r7, sp, #0
 8017562:	60f8      	str	r0, [r7, #12]
 8017564:	607a      	str	r2, [r7, #4]
 8017566:	603b      	str	r3, [r7, #0]
 8017568:	460b      	mov	r3, r1
 801756a:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801756c:	7afa      	ldrb	r2, [r7, #11]
 801756e:	7afb      	ldrb	r3, [r7, #11]
 8017570:	3b04      	subs	r3, #4
 8017572:	4619      	mov	r1, r3
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	fb03 f101 	mul.w	r1, r3, r1
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017580:	fb00 f303 	mul.w	r3, r0, r3
 8017584:	440b      	add	r3, r1
 8017586:	005b      	lsls	r3, r3, #1
 8017588:	2b00      	cmp	r3, #0
 801758a:	d013      	beq.n	80175b4 <RegionCommonComputeRxWindowParameters+0x58>
 801758c:	7afb      	ldrb	r3, [r7, #11]
 801758e:	3b04      	subs	r3, #4
 8017590:	4619      	mov	r1, r3
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	fb03 f101 	mul.w	r1, r3, r1
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801759e:	fb00 f303 	mul.w	r3, r0, r3
 80175a2:	440b      	add	r3, r1
 80175a4:	0059      	lsls	r1, r3, #1
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	440b      	add	r3, r1
 80175aa:	1e59      	subs	r1, r3, #1
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80175b2:	e00f      	b.n	80175d4 <RegionCommonComputeRxWindowParameters+0x78>
 80175b4:	7afb      	ldrb	r3, [r7, #11]
 80175b6:	3b04      	subs	r3, #4
 80175b8:	4619      	mov	r1, r3
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	fb03 f101 	mul.w	r1, r3, r1
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80175c6:	fb00 f303 	mul.w	r3, r0, r3
 80175ca:	440b      	add	r3, r1
 80175cc:	0059      	lsls	r1, r3, #1
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80175d4:	429a      	cmp	r2, r3
 80175d6:	bf38      	it	cc
 80175d8:	461a      	movcc	r2, r3
 80175da:	69bb      	ldr	r3, [r7, #24]
 80175dc:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	009b      	lsls	r3, r3, #2
 80175e2:	4619      	mov	r1, r3
 80175e4:	69bb      	ldr	r3, [r7, #24]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	68fa      	ldr	r2, [r7, #12]
 80175ea:	fb02 f303 	mul.w	r3, r2, r3
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d007      	beq.n	8017602 <RegionCommonComputeRxWindowParameters+0xa6>
 80175f2:	69bb      	ldr	r3, [r7, #24]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	68fa      	ldr	r2, [r7, #12]
 80175f8:	fb02 f303 	mul.w	r3, r2, r3
 80175fc:	3301      	adds	r3, #1
 80175fe:	085b      	lsrs	r3, r3, #1
 8017600:	e005      	b.n	801760e <RegionCommonComputeRxWindowParameters+0xb2>
 8017602:	69bb      	ldr	r3, [r7, #24]
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	68fa      	ldr	r2, [r7, #12]
 8017608:	fb02 f303 	mul.w	r3, r2, r3
 801760c:	085b      	lsrs	r3, r3, #1
 801760e:	1acb      	subs	r3, r1, r3
 8017610:	683a      	ldr	r2, [r7, #0]
 8017612:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017616:	fb01 f202 	mul.w	r2, r1, r2
 801761a:	1a9b      	subs	r3, r3, r2
 801761c:	2b00      	cmp	r3, #0
 801761e:	dd27      	ble.n	8017670 <RegionCommonComputeRxWindowParameters+0x114>
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	009b      	lsls	r3, r3, #2
 8017624:	4619      	mov	r1, r3
 8017626:	69bb      	ldr	r3, [r7, #24]
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	68fa      	ldr	r2, [r7, #12]
 801762c:	fb02 f303 	mul.w	r3, r2, r3
 8017630:	2b00      	cmp	r3, #0
 8017632:	d007      	beq.n	8017644 <RegionCommonComputeRxWindowParameters+0xe8>
 8017634:	69bb      	ldr	r3, [r7, #24]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	68fa      	ldr	r2, [r7, #12]
 801763a:	fb02 f303 	mul.w	r3, r2, r3
 801763e:	3301      	adds	r3, #1
 8017640:	085b      	lsrs	r3, r3, #1
 8017642:	e005      	b.n	8017650 <RegionCommonComputeRxWindowParameters+0xf4>
 8017644:	69bb      	ldr	r3, [r7, #24]
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	68fa      	ldr	r2, [r7, #12]
 801764a:	fb02 f303 	mul.w	r3, r2, r3
 801764e:	085b      	lsrs	r3, r3, #1
 8017650:	1acb      	subs	r3, r1, r3
 8017652:	683a      	ldr	r2, [r7, #0]
 8017654:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017658:	fb01 f202 	mul.w	r2, r1, r2
 801765c:	1a9b      	subs	r3, r3, r2
 801765e:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8017662:	4a19      	ldr	r2, [pc, #100]	@ (80176c8 <RegionCommonComputeRxWindowParameters+0x16c>)
 8017664:	fb82 1203 	smull	r1, r2, r2, r3
 8017668:	1192      	asrs	r2, r2, #6
 801766a:	17db      	asrs	r3, r3, #31
 801766c:	1ad3      	subs	r3, r2, r3
 801766e:	e024      	b.n	80176ba <RegionCommonComputeRxWindowParameters+0x15e>
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	009b      	lsls	r3, r3, #2
 8017674:	4619      	mov	r1, r3
 8017676:	69bb      	ldr	r3, [r7, #24]
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	68fa      	ldr	r2, [r7, #12]
 801767c:	fb02 f303 	mul.w	r3, r2, r3
 8017680:	2b00      	cmp	r3, #0
 8017682:	d007      	beq.n	8017694 <RegionCommonComputeRxWindowParameters+0x138>
 8017684:	69bb      	ldr	r3, [r7, #24]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	68fa      	ldr	r2, [r7, #12]
 801768a:	fb02 f303 	mul.w	r3, r2, r3
 801768e:	3301      	adds	r3, #1
 8017690:	085b      	lsrs	r3, r3, #1
 8017692:	e005      	b.n	80176a0 <RegionCommonComputeRxWindowParameters+0x144>
 8017694:	69bb      	ldr	r3, [r7, #24]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	68fa      	ldr	r2, [r7, #12]
 801769a:	fb02 f303 	mul.w	r3, r2, r3
 801769e:	085b      	lsrs	r3, r3, #1
 80176a0:	1acb      	subs	r3, r1, r3
 80176a2:	683a      	ldr	r2, [r7, #0]
 80176a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80176a8:	fb01 f202 	mul.w	r2, r1, r2
 80176ac:	1a9b      	subs	r3, r3, r2
 80176ae:	4a06      	ldr	r2, [pc, #24]	@ (80176c8 <RegionCommonComputeRxWindowParameters+0x16c>)
 80176b0:	fb82 1203 	smull	r1, r2, r2, r3
 80176b4:	1192      	asrs	r2, r2, #6
 80176b6:	17db      	asrs	r3, r3, #31
 80176b8:	1ad3      	subs	r3, r2, r3
 80176ba:	69fa      	ldr	r2, [r7, #28]
 80176bc:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80176be:	bf00      	nop
 80176c0:	3714      	adds	r7, #20
 80176c2:	46bd      	mov	sp, r7
 80176c4:	bc80      	pop	{r7}
 80176c6:	4770      	bx	lr
 80176c8:	10624dd3 	.word	0x10624dd3

080176cc <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b086      	sub	sp, #24
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	4603      	mov	r3, r0
 80176d4:	60b9      	str	r1, [r7, #8]
 80176d6:	607a      	str	r2, [r7, #4]
 80176d8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80176da:	2300      	movs	r3, #0
 80176dc:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80176de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176e2:	005b      	lsls	r3, r3, #1
 80176e4:	4618      	mov	r0, r3
 80176e6:	f7e9 fb3d 	bl	8000d64 <__aeabi_ui2f>
 80176ea:	4603      	mov	r3, r0
 80176ec:	4619      	mov	r1, r3
 80176ee:	68b8      	ldr	r0, [r7, #8]
 80176f0:	f7e9 fa86 	bl	8000c00 <__aeabi_fsub>
 80176f4:	4603      	mov	r3, r0
 80176f6:	6879      	ldr	r1, [r7, #4]
 80176f8:	4618      	mov	r0, r3
 80176fa:	f7e9 fa81 	bl	8000c00 <__aeabi_fsub>
 80176fe:	4603      	mov	r3, r0
 8017700:	4618      	mov	r0, r3
 8017702:	f7e8 fef9 	bl	80004f8 <__aeabi_f2d>
 8017706:	4602      	mov	r2, r0
 8017708:	460b      	mov	r3, r1
 801770a:	4610      	mov	r0, r2
 801770c:	4619      	mov	r1, r3
 801770e:	f008 fdd7 	bl	80202c0 <floor>
 8017712:	4602      	mov	r2, r0
 8017714:	460b      	mov	r3, r1
 8017716:	4610      	mov	r0, r2
 8017718:	4619      	mov	r1, r3
 801771a:	f7e9 f9f5 	bl	8000b08 <__aeabi_d2iz>
 801771e:	4603      	mov	r3, r0
 8017720:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8017722:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017726:	4618      	mov	r0, r3
 8017728:	3718      	adds	r7, #24
 801772a:	46bd      	mov	sp, r7
 801772c:	bd80      	pop	{r7, pc}

0801772e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801772e:	b590      	push	{r4, r7, lr}
 8017730:	b087      	sub	sp, #28
 8017732:	af00      	add	r7, sp, #0
 8017734:	60f8      	str	r0, [r7, #12]
 8017736:	60b9      	str	r1, [r7, #8]
 8017738:	607a      	str	r2, [r7, #4]
 801773a:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 801773c:	2300      	movs	r3, #0
 801773e:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8017740:	2300      	movs	r3, #0
 8017742:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017744:	2300      	movs	r3, #0
 8017746:	757b      	strb	r3, [r7, #21]
 8017748:	2300      	movs	r3, #0
 801774a:	753b      	strb	r3, [r7, #20]
 801774c:	e09c      	b.n	8017888 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801774e:	2300      	movs	r3, #0
 8017750:	74fb      	strb	r3, [r7, #19]
 8017752:	e08f      	b.n	8017874 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	685a      	ldr	r2, [r3, #4]
 8017758:	7d3b      	ldrb	r3, [r7, #20]
 801775a:	005b      	lsls	r3, r3, #1
 801775c:	4413      	add	r3, r2
 801775e:	881b      	ldrh	r3, [r3, #0]
 8017760:	461a      	mov	r2, r3
 8017762:	7cfb      	ldrb	r3, [r7, #19]
 8017764:	fa42 f303 	asr.w	r3, r2, r3
 8017768:	f003 0301 	and.w	r3, r3, #1
 801776c:	2b00      	cmp	r3, #0
 801776e:	d07e      	beq.n	801786e <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	689a      	ldr	r2, [r3, #8]
 8017774:	7d79      	ldrb	r1, [r7, #21]
 8017776:	7cfb      	ldrb	r3, [r7, #19]
 8017778:	440b      	add	r3, r1
 801777a:	4619      	mov	r1, r3
 801777c:	460b      	mov	r3, r1
 801777e:	005b      	lsls	r3, r3, #1
 8017780:	440b      	add	r3, r1
 8017782:	009b      	lsls	r3, r3, #2
 8017784:	4413      	add	r3, r2
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	2b00      	cmp	r3, #0
 801778a:	d06b      	beq.n	8017864 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	781b      	ldrb	r3, [r3, #0]
 8017790:	f083 0301 	eor.w	r3, r3, #1
 8017794:	b2db      	uxtb	r3, r3
 8017796:	2b00      	cmp	r3, #0
 8017798:	d011      	beq.n	80177be <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d00d      	beq.n	80177be <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	695a      	ldr	r2, [r3, #20]
 80177a6:	7d3b      	ldrb	r3, [r7, #20]
 80177a8:	005b      	lsls	r3, r3, #1
 80177aa:	4413      	add	r3, r2
 80177ac:	881b      	ldrh	r3, [r3, #0]
 80177ae:	461a      	mov	r2, r3
 80177b0:	7cfb      	ldrb	r3, [r7, #19]
 80177b2:	fa42 f303 	asr.w	r3, r2, r3
 80177b6:	f003 0301 	and.w	r3, r3, #1
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d054      	beq.n	8017868 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	785b      	ldrb	r3, [r3, #1]
 80177c2:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	689a      	ldr	r2, [r3, #8]
 80177c8:	7d79      	ldrb	r1, [r7, #21]
 80177ca:	7cfb      	ldrb	r3, [r7, #19]
 80177cc:	440b      	add	r3, r1
 80177ce:	4619      	mov	r1, r3
 80177d0:	460b      	mov	r3, r1
 80177d2:	005b      	lsls	r3, r3, #1
 80177d4:	440b      	add	r3, r1
 80177d6:	009b      	lsls	r3, r3, #2
 80177d8:	4413      	add	r3, r2
 80177da:	7a1b      	ldrb	r3, [r3, #8]
 80177dc:	f343 0303 	sbfx	r3, r3, #0, #4
 80177e0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80177e2:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	689a      	ldr	r2, [r3, #8]
 80177e8:	7d79      	ldrb	r1, [r7, #21]
 80177ea:	7cfb      	ldrb	r3, [r7, #19]
 80177ec:	440b      	add	r3, r1
 80177ee:	4619      	mov	r1, r3
 80177f0:	460b      	mov	r3, r1
 80177f2:	005b      	lsls	r3, r3, #1
 80177f4:	440b      	add	r3, r1
 80177f6:	009b      	lsls	r3, r3, #2
 80177f8:	4413      	add	r3, r2
 80177fa:	7a1b      	ldrb	r3, [r3, #8]
 80177fc:	f343 1303 	sbfx	r3, r3, #4, #4
 8017800:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017802:	461a      	mov	r2, r3
 8017804:	4621      	mov	r1, r4
 8017806:	f7ff fc0c 	bl	8017022 <RegionCommonValueInRange>
 801780a:	4603      	mov	r3, r0
 801780c:	2b00      	cmp	r3, #0
 801780e:	d02d      	beq.n	801786c <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	68da      	ldr	r2, [r3, #12]
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	6899      	ldr	r1, [r3, #8]
 8017818:	7d78      	ldrb	r0, [r7, #21]
 801781a:	7cfb      	ldrb	r3, [r7, #19]
 801781c:	4403      	add	r3, r0
 801781e:	4618      	mov	r0, r3
 8017820:	4603      	mov	r3, r0
 8017822:	005b      	lsls	r3, r3, #1
 8017824:	4403      	add	r3, r0
 8017826:	009b      	lsls	r3, r3, #2
 8017828:	440b      	add	r3, r1
 801782a:	7a5b      	ldrb	r3, [r3, #9]
 801782c:	4619      	mov	r1, r3
 801782e:	460b      	mov	r3, r1
 8017830:	005b      	lsls	r3, r3, #1
 8017832:	440b      	add	r3, r1
 8017834:	00db      	lsls	r3, r3, #3
 8017836:	4413      	add	r3, r2
 8017838:	7d1b      	ldrb	r3, [r3, #20]
 801783a:	f083 0301 	eor.w	r3, r3, #1
 801783e:	b2db      	uxtb	r3, r3
 8017840:	2b00      	cmp	r3, #0
 8017842:	d003      	beq.n	801784c <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017844:	7dbb      	ldrb	r3, [r7, #22]
 8017846:	3301      	adds	r3, #1
 8017848:	75bb      	strb	r3, [r7, #22]
                    continue;
 801784a:	e010      	b.n	801786e <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801784c:	7dfb      	ldrb	r3, [r7, #23]
 801784e:	1c5a      	adds	r2, r3, #1
 8017850:	75fa      	strb	r2, [r7, #23]
 8017852:	461a      	mov	r2, r3
 8017854:	68bb      	ldr	r3, [r7, #8]
 8017856:	4413      	add	r3, r2
 8017858:	7d79      	ldrb	r1, [r7, #21]
 801785a:	7cfa      	ldrb	r2, [r7, #19]
 801785c:	440a      	add	r2, r1
 801785e:	b2d2      	uxtb	r2, r2
 8017860:	701a      	strb	r2, [r3, #0]
 8017862:	e004      	b.n	801786e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017864:	bf00      	nop
 8017866:	e002      	b.n	801786e <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8017868:	bf00      	nop
 801786a:	e000      	b.n	801786e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801786c:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801786e:	7cfb      	ldrb	r3, [r7, #19]
 8017870:	3301      	adds	r3, #1
 8017872:	74fb      	strb	r3, [r7, #19]
 8017874:	7cfb      	ldrb	r3, [r7, #19]
 8017876:	2b0f      	cmp	r3, #15
 8017878:	f67f af6c 	bls.w	8017754 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801787c:	7d7b      	ldrb	r3, [r7, #21]
 801787e:	3310      	adds	r3, #16
 8017880:	757b      	strb	r3, [r7, #21]
 8017882:	7d3b      	ldrb	r3, [r7, #20]
 8017884:	3301      	adds	r3, #1
 8017886:	753b      	strb	r3, [r7, #20]
 8017888:	7d7b      	ldrb	r3, [r7, #21]
 801788a:	b29a      	uxth	r2, r3
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	8a1b      	ldrh	r3, [r3, #16]
 8017890:	429a      	cmp	r2, r3
 8017892:	f4ff af5c 	bcc.w	801774e <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	7dfa      	ldrb	r2, [r7, #23]
 801789a:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801789c:	683b      	ldr	r3, [r7, #0]
 801789e:	7dba      	ldrb	r2, [r7, #22]
 80178a0:	701a      	strb	r2, [r3, #0]
}
 80178a2:	bf00      	nop
 80178a4:	371c      	adds	r7, #28
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd90      	pop	{r4, r7, pc}

080178aa <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80178aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178ac:	b08b      	sub	sp, #44	@ 0x2c
 80178ae:	af04      	add	r7, sp, #16
 80178b0:	60f8      	str	r0, [r7, #12]
 80178b2:	60b9      	str	r1, [r7, #8]
 80178b4:	607a      	str	r2, [r7, #4]
 80178b6:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	685b      	ldr	r3, [r3, #4]
 80178bc:	4618      	mov	r0, r3
 80178be:	f005 fb13 	bl	801cee8 <UTIL_TIMER_GetElapsedTime>
 80178c2:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	681a      	ldr	r2, [r3, #0]
 80178c8:	697b      	ldr	r3, [r7, #20]
 80178ca:	1ad2      	subs	r2, r2, r3
 80178cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178ce:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80178d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178d2:	2201      	movs	r2, #1
 80178d4:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	2200      	movs	r2, #0
 80178da:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	685b      	ldr	r3, [r3, #4]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d004      	beq.n	80178ee <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80178e8:	697a      	ldr	r2, [r7, #20]
 80178ea:	429a      	cmp	r2, r3
 80178ec:	d32b      	bcc.n	8017946 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80178ee:	68bb      	ldr	r3, [r7, #8]
 80178f0:	2200      	movs	r2, #0
 80178f2:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	69db      	ldr	r3, [r3, #28]
 80178f8:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80178fe:	68dd      	ldr	r5, [r3, #12]
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	7a5e      	ldrb	r6, [r3, #9]
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	f893 c008 	ldrb.w	ip, [r3, #8]
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	7d1b      	ldrb	r3, [r3, #20]
 801790e:	68fa      	ldr	r2, [r7, #12]
 8017910:	6992      	ldr	r2, [r2, #24]
 8017912:	9203      	str	r2, [sp, #12]
 8017914:	68fa      	ldr	r2, [r7, #12]
 8017916:	f10d 0e04 	add.w	lr, sp, #4
 801791a:	320c      	adds	r2, #12
 801791c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017920:	e88e 0003 	stmia.w	lr, {r0, r1}
 8017924:	9300      	str	r3, [sp, #0]
 8017926:	4663      	mov	r3, ip
 8017928:	4632      	mov	r2, r6
 801792a:	4629      	mov	r1, r5
 801792c:	4620      	mov	r0, r4
 801792e:	f7ff fc49 	bl	80171c4 <RegionCommonUpdateBandTimeOff>
 8017932:	4602      	mov	r2, r0
 8017934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017936:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	69d8      	ldr	r0, [r3, #28]
 801793c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801793e:	683a      	ldr	r2, [r7, #0]
 8017940:	6879      	ldr	r1, [r7, #4]
 8017942:	f7ff fef4 	bl	801772e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017946:	683b      	ldr	r3, [r7, #0]
 8017948:	781b      	ldrb	r3, [r3, #0]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d004      	beq.n	8017958 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801794e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017950:	2200      	movs	r2, #0
 8017952:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017954:	2300      	movs	r3, #0
 8017956:	e006      	b.n	8017966 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8017958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801795a:	781b      	ldrb	r3, [r3, #0]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d001      	beq.n	8017964 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017960:	230b      	movs	r3, #11
 8017962:	e000      	b.n	8017966 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017964:	230c      	movs	r3, #12
    }
}
 8017966:	4618      	mov	r0, r3
 8017968:	371c      	adds	r7, #28
 801796a:	46bd      	mov	sp, r7
 801796c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801796e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801796e:	b5b0      	push	{r4, r5, r7, lr}
 8017970:	b086      	sub	sp, #24
 8017972:	af02      	add	r7, sp, #8
 8017974:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	781b      	ldrb	r3, [r3, #0]
 801797a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	f993 2000 	ldrsb.w	r2, [r3]
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017988:	429a      	cmp	r2, r3
 801798a:	d103      	bne.n	8017994 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017992:	e026      	b.n	80179e2 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8017994:	7bfb      	ldrb	r3, [r7, #15]
 8017996:	3b01      	subs	r3, #1
 8017998:	b2db      	uxtb	r3, r3
 801799a:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80179a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80179a6:	429a      	cmp	r2, r3
 80179a8:	d019      	beq.n	80179de <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	78d8      	ldrb	r0, [r3, #3]
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	6859      	ldr	r1, [r3, #4]
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80179be:	687a      	ldr	r2, [r7, #4]
 80179c0:	6892      	ldr	r2, [r2, #8]
 80179c2:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80179c6:	9201      	str	r2, [sp, #4]
 80179c8:	9300      	str	r3, [sp, #0]
 80179ca:	462b      	mov	r3, r5
 80179cc:	4622      	mov	r2, r4
 80179ce:	f7ff fab6 	bl	8016f3e <RegionCommonChanVerifyDr>
 80179d2:	4603      	mov	r3, r0
 80179d4:	f083 0301 	eor.w	r3, r3, #1
 80179d8:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d1da      	bne.n	8017994 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80179de:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80179e2:	4618      	mov	r0, r3
 80179e4:	3710      	adds	r7, #16
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bdb0      	pop	{r4, r5, r7, pc}

080179ea <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80179ea:	b480      	push	{r7}
 80179ec:	b083      	sub	sp, #12
 80179ee:	af00      	add	r7, sp, #0
 80179f0:	4603      	mov	r3, r0
 80179f2:	460a      	mov	r2, r1
 80179f4:	71fb      	strb	r3, [r7, #7]
 80179f6:	4613      	mov	r3, r2
 80179f8:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80179fa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80179fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a02:	4293      	cmp	r3, r2
 8017a04:	bfb8      	it	lt
 8017a06:	4613      	movlt	r3, r2
 8017a08:	b25b      	sxtb	r3, r3
}
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	370c      	adds	r7, #12
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bc80      	pop	{r7}
 8017a12:	4770      	bx	lr

08017a14 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8017a14:	b480      	push	{r7}
 8017a16:	b083      	sub	sp, #12
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
 8017a1c:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	009b      	lsls	r3, r3, #2
 8017a22:	683a      	ldr	r2, [r7, #0]
 8017a24:	4413      	add	r3, r2
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	4a07      	ldr	r2, [pc, #28]	@ (8017a48 <RegionCommonGetBandwidth+0x34>)
 8017a2a:	4293      	cmp	r3, r2
 8017a2c:	d004      	beq.n	8017a38 <RegionCommonGetBandwidth+0x24>
 8017a2e:	4a07      	ldr	r2, [pc, #28]	@ (8017a4c <RegionCommonGetBandwidth+0x38>)
 8017a30:	4293      	cmp	r3, r2
 8017a32:	d003      	beq.n	8017a3c <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8017a34:	2300      	movs	r3, #0
 8017a36:	e002      	b.n	8017a3e <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8017a38:	2301      	movs	r3, #1
 8017a3a:	e000      	b.n	8017a3e <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8017a3c:	2302      	movs	r3, #2
    }
}
 8017a3e:	4618      	mov	r0, r3
 8017a40:	370c      	adds	r7, #12
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bc80      	pop	{r7}
 8017a46:	4770      	bx	lr
 8017a48:	0003d090 	.word	0x0003d090
 8017a4c:	0007a120 	.word	0x0007a120

08017a50 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b086      	sub	sp, #24
 8017a54:	af04      	add	r7, sp, #16
 8017a56:	4603      	mov	r3, r0
 8017a58:	6039      	str	r1, [r7, #0]
 8017a5a:	71fb      	strb	r3, [r7, #7]
 8017a5c:	4613      	mov	r3, r2
 8017a5e:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8017a60:	79fb      	ldrb	r3, [r7, #7]
 8017a62:	2b05      	cmp	r3, #5
 8017a64:	d810      	bhi.n	8017a88 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8017a66:	79fb      	ldrb	r3, [r7, #7]
 8017a68:	4a0f      	ldr	r2, [pc, #60]	@ (8017aa8 <RegionCommonRxConfigPrint+0x58>)
 8017a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a6e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017a72:	9202      	str	r2, [sp, #8]
 8017a74:	683a      	ldr	r2, [r7, #0]
 8017a76:	9201      	str	r2, [sp, #4]
 8017a78:	9300      	str	r3, [sp, #0]
 8017a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8017aac <RegionCommonRxConfigPrint+0x5c>)
 8017a7c:	2201      	movs	r2, #1
 8017a7e:	2100      	movs	r1, #0
 8017a80:	2002      	movs	r0, #2
 8017a82:	f005 fb0f 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017a86:	e00a      	b.n	8017a9e <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017a88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017a8c:	9301      	str	r3, [sp, #4]
 8017a8e:	683b      	ldr	r3, [r7, #0]
 8017a90:	9300      	str	r3, [sp, #0]
 8017a92:	4b07      	ldr	r3, [pc, #28]	@ (8017ab0 <RegionCommonRxConfigPrint+0x60>)
 8017a94:	2201      	movs	r2, #1
 8017a96:	2100      	movs	r1, #0
 8017a98:	2002      	movs	r0, #2
 8017a9a:	f005 fb03 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
}
 8017a9e:	bf00      	nop
 8017aa0:	3708      	adds	r7, #8
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	bd80      	pop	{r7, pc}
 8017aa6:	bf00      	nop
 8017aa8:	20000118 	.word	0x20000118
 8017aac:	0802102c 	.word	0x0802102c
 8017ab0:	0802104c 	.word	0x0802104c

08017ab4 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b084      	sub	sp, #16
 8017ab8:	af02      	add	r7, sp, #8
 8017aba:	6078      	str	r0, [r7, #4]
 8017abc:	460b      	mov	r3, r1
 8017abe:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017ac4:	9301      	str	r3, [sp, #4]
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	9300      	str	r3, [sp, #0]
 8017aca:	4b05      	ldr	r3, [pc, #20]	@ (8017ae0 <RegionCommonTxConfigPrint+0x2c>)
 8017acc:	2201      	movs	r2, #1
 8017ace:	2100      	movs	r1, #0
 8017ad0:	2002      	movs	r0, #2
 8017ad2:	f005 fae7 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
}
 8017ad6:	bf00      	nop
 8017ad8:	3708      	adds	r7, #8
 8017ada:	46bd      	mov	sp, r7
 8017adc:	bd80      	pop	{r7, pc}
 8017ade:	bf00      	nop
 8017ae0:	08021068 	.word	0x08021068

08017ae4 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b082      	sub	sp, #8
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	6078      	str	r0, [r7, #4]
 8017aec:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017aee:	4b2d      	ldr	r3, [pc, #180]	@ (8017ba4 <VerifyRfFreq+0xc0>)
 8017af0:	6a1b      	ldr	r3, [r3, #32]
 8017af2:	6878      	ldr	r0, [r7, #4]
 8017af4:	4798      	blx	r3
 8017af6:	4603      	mov	r3, r0
 8017af8:	f083 0301 	eor.w	r3, r3, #1
 8017afc:	b2db      	uxtb	r3, r3
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d001      	beq.n	8017b06 <VerifyRfFreq+0x22>
    {
        return false;
 8017b02:	2300      	movs	r3, #0
 8017b04:	e04a      	b.n	8017b9c <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	4a27      	ldr	r2, [pc, #156]	@ (8017ba8 <VerifyRfFreq+0xc4>)
 8017b0a:	4293      	cmp	r3, r2
 8017b0c:	d307      	bcc.n	8017b1e <VerifyRfFreq+0x3a>
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	4a26      	ldr	r2, [pc, #152]	@ (8017bac <VerifyRfFreq+0xc8>)
 8017b12:	4293      	cmp	r3, r2
 8017b14:	d803      	bhi.n	8017b1e <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8017b16:	683b      	ldr	r3, [r7, #0]
 8017b18:	2202      	movs	r2, #2
 8017b1a:	701a      	strb	r2, [r3, #0]
 8017b1c:	e03d      	b.n	8017b9a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	4a22      	ldr	r2, [pc, #136]	@ (8017bac <VerifyRfFreq+0xc8>)
 8017b22:	4293      	cmp	r3, r2
 8017b24:	d907      	bls.n	8017b36 <VerifyRfFreq+0x52>
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	4a21      	ldr	r2, [pc, #132]	@ (8017bb0 <VerifyRfFreq+0xcc>)
 8017b2a:	4293      	cmp	r3, r2
 8017b2c:	d803      	bhi.n	8017b36 <VerifyRfFreq+0x52>
    {
        *band = 0;
 8017b2e:	683b      	ldr	r3, [r7, #0]
 8017b30:	2200      	movs	r2, #0
 8017b32:	701a      	strb	r2, [r3, #0]
 8017b34:	e031      	b.n	8017b9a <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	4a1d      	ldr	r2, [pc, #116]	@ (8017bb0 <VerifyRfFreq+0xcc>)
 8017b3a:	4293      	cmp	r3, r2
 8017b3c:	d907      	bls.n	8017b4e <VerifyRfFreq+0x6a>
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	4a1c      	ldr	r2, [pc, #112]	@ (8017bb4 <VerifyRfFreq+0xd0>)
 8017b42:	4293      	cmp	r3, r2
 8017b44:	d803      	bhi.n	8017b4e <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8017b46:	683b      	ldr	r3, [r7, #0]
 8017b48:	2201      	movs	r2, #1
 8017b4a:	701a      	strb	r2, [r3, #0]
 8017b4c:	e025      	b.n	8017b9a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	4a19      	ldr	r2, [pc, #100]	@ (8017bb8 <VerifyRfFreq+0xd4>)
 8017b52:	4293      	cmp	r3, r2
 8017b54:	d907      	bls.n	8017b66 <VerifyRfFreq+0x82>
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	4a18      	ldr	r2, [pc, #96]	@ (8017bbc <VerifyRfFreq+0xd8>)
 8017b5a:	4293      	cmp	r3, r2
 8017b5c:	d803      	bhi.n	8017b66 <VerifyRfFreq+0x82>
    {
        *band = 5;
 8017b5e:	683b      	ldr	r3, [r7, #0]
 8017b60:	2205      	movs	r2, #5
 8017b62:	701a      	strb	r2, [r3, #0]
 8017b64:	e019      	b.n	8017b9a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	4a15      	ldr	r2, [pc, #84]	@ (8017bc0 <VerifyRfFreq+0xdc>)
 8017b6a:	4293      	cmp	r3, r2
 8017b6c:	d907      	bls.n	8017b7e <VerifyRfFreq+0x9a>
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	4a14      	ldr	r2, [pc, #80]	@ (8017bc4 <VerifyRfFreq+0xe0>)
 8017b72:	4293      	cmp	r3, r2
 8017b74:	d803      	bhi.n	8017b7e <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8017b76:	683b      	ldr	r3, [r7, #0]
 8017b78:	2203      	movs	r2, #3
 8017b7a:	701a      	strb	r2, [r3, #0]
 8017b7c:	e00d      	b.n	8017b9a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	4a11      	ldr	r2, [pc, #68]	@ (8017bc8 <VerifyRfFreq+0xe4>)
 8017b82:	4293      	cmp	r3, r2
 8017b84:	d307      	bcc.n	8017b96 <VerifyRfFreq+0xb2>
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	4a10      	ldr	r2, [pc, #64]	@ (8017bcc <VerifyRfFreq+0xe8>)
 8017b8a:	4293      	cmp	r3, r2
 8017b8c:	d803      	bhi.n	8017b96 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8017b8e:	683b      	ldr	r3, [r7, #0]
 8017b90:	2204      	movs	r2, #4
 8017b92:	701a      	strb	r2, [r3, #0]
 8017b94:	e001      	b.n	8017b9a <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8017b96:	2300      	movs	r3, #0
 8017b98:	e000      	b.n	8017b9c <VerifyRfFreq+0xb8>
    }
    return true;
 8017b9a:	2301      	movs	r3, #1
}
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	3708      	adds	r7, #8
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	bd80      	pop	{r7, pc}
 8017ba4:	08021620 	.word	0x08021620
 8017ba8:	337055c0 	.word	0x337055c0
 8017bac:	338eda3f 	.word	0x338eda3f
 8017bb0:	33bca100 	.word	0x33bca100
 8017bb4:	33c5c8c0 	.word	0x33c5c8c0
 8017bb8:	33c74f5f 	.word	0x33c74f5f
 8017bbc:	33cef080 	.word	0x33cef080
 8017bc0:	33d1fdbf 	.word	0x33d1fdbf
 8017bc4:	33d5ce50 	.word	0x33d5ce50
 8017bc8:	33d691a0 	.word	0x33d691a0
 8017bcc:	33db2580 	.word	0x33db2580

08017bd0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017bd0:	b590      	push	{r4, r7, lr}
 8017bd2:	b08b      	sub	sp, #44	@ 0x2c
 8017bd4:	af04      	add	r7, sp, #16
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	460a      	mov	r2, r1
 8017bda:	71fb      	strb	r3, [r7, #7]
 8017bdc:	4613      	mov	r3, r2
 8017bde:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8017be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017be4:	4a1f      	ldr	r2, [pc, #124]	@ (8017c64 <GetTimeOnAir+0x94>)
 8017be6:	5cd3      	ldrb	r3, [r2, r3]
 8017be8:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8017bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017bee:	491e      	ldr	r1, [pc, #120]	@ (8017c68 <GetTimeOnAir+0x98>)
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	f7ff ff0f 	bl	8017a14 <RegionCommonGetBandwidth>
 8017bf6:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017c00:	2b07      	cmp	r3, #7
 8017c02:	d118      	bne.n	8017c36 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8017c04:	4b19      	ldr	r3, [pc, #100]	@ (8017c6c <GetTimeOnAir+0x9c>)
 8017c06:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8017c08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017c0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017c10:	fb02 f303 	mul.w	r3, r2, r3
 8017c14:	4619      	mov	r1, r3
 8017c16:	88bb      	ldrh	r3, [r7, #4]
 8017c18:	b2db      	uxtb	r3, r3
 8017c1a:	2201      	movs	r2, #1
 8017c1c:	9203      	str	r2, [sp, #12]
 8017c1e:	9302      	str	r3, [sp, #8]
 8017c20:	2300      	movs	r3, #0
 8017c22:	9301      	str	r3, [sp, #4]
 8017c24:	2305      	movs	r3, #5
 8017c26:	9300      	str	r3, [sp, #0]
 8017c28:	2300      	movs	r3, #0
 8017c2a:	460a      	mov	r2, r1
 8017c2c:	68f9      	ldr	r1, [r7, #12]
 8017c2e:	2000      	movs	r0, #0
 8017c30:	47a0      	blx	r4
 8017c32:	6178      	str	r0, [r7, #20]
 8017c34:	e011      	b.n	8017c5a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017c36:	4b0d      	ldr	r3, [pc, #52]	@ (8017c6c <GetTimeOnAir+0x9c>)
 8017c38:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8017c3a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017c3e:	88bb      	ldrh	r3, [r7, #4]
 8017c40:	b2db      	uxtb	r3, r3
 8017c42:	2101      	movs	r1, #1
 8017c44:	9103      	str	r1, [sp, #12]
 8017c46:	9302      	str	r3, [sp, #8]
 8017c48:	2300      	movs	r3, #0
 8017c4a:	9301      	str	r3, [sp, #4]
 8017c4c:	2308      	movs	r3, #8
 8017c4e:	9300      	str	r3, [sp, #0]
 8017c50:	2301      	movs	r3, #1
 8017c52:	68f9      	ldr	r1, [r7, #12]
 8017c54:	2001      	movs	r0, #1
 8017c56:	47a0      	blx	r4
 8017c58:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8017c5a:	697b      	ldr	r3, [r7, #20]
}
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	371c      	adds	r7, #28
 8017c60:	46bd      	mov	sp, r7
 8017c62:	bd90      	pop	{r4, r7, pc}
 8017c64:	080215e8 	.word	0x080215e8
 8017c68:	080215f0 	.word	0x080215f0
 8017c6c:	08021620 	.word	0x08021620

08017c70 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b088      	sub	sp, #32
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017c78:	2300      	movs	r3, #0
 8017c7a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	781b      	ldrb	r3, [r3, #0]
 8017c80:	3b01      	subs	r3, #1
 8017c82:	2b37      	cmp	r3, #55	@ 0x37
 8017c84:	f200 8122 	bhi.w	8017ecc <RegionEU868GetPhyParam+0x25c>
 8017c88:	a201      	add	r2, pc, #4	@ (adr r2, 8017c90 <RegionEU868GetPhyParam+0x20>)
 8017c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c8e:	bf00      	nop
 8017c90:	08017d71 	.word	0x08017d71
 8017c94:	08017d77 	.word	0x08017d77
 8017c98:	08017ecd 	.word	0x08017ecd
 8017c9c:	08017ecd 	.word	0x08017ecd
 8017ca0:	08017ecd 	.word	0x08017ecd
 8017ca4:	08017d7d 	.word	0x08017d7d
 8017ca8:	08017ecd 	.word	0x08017ecd
 8017cac:	08017db7 	.word	0x08017db7
 8017cb0:	08017ecd 	.word	0x08017ecd
 8017cb4:	08017dbd 	.word	0x08017dbd
 8017cb8:	08017dc3 	.word	0x08017dc3
 8017cbc:	08017dc9 	.word	0x08017dc9
 8017cc0:	08017dcf 	.word	0x08017dcf
 8017cc4:	08017ddf 	.word	0x08017ddf
 8017cc8:	08017def 	.word	0x08017def
 8017ccc:	08017df5 	.word	0x08017df5
 8017cd0:	08017dfd 	.word	0x08017dfd
 8017cd4:	08017e05 	.word	0x08017e05
 8017cd8:	08017e0d 	.word	0x08017e0d
 8017cdc:	08017e15 	.word	0x08017e15
 8017ce0:	08017e1d 	.word	0x08017e1d
 8017ce4:	08017e31 	.word	0x08017e31
 8017ce8:	08017e37 	.word	0x08017e37
 8017cec:	08017e3d 	.word	0x08017e3d
 8017cf0:	08017e43 	.word	0x08017e43
 8017cf4:	08017e4f 	.word	0x08017e4f
 8017cf8:	08017e5b 	.word	0x08017e5b
 8017cfc:	08017e61 	.word	0x08017e61
 8017d00:	08017e69 	.word	0x08017e69
 8017d04:	08017e6f 	.word	0x08017e6f
 8017d08:	08017e75 	.word	0x08017e75
 8017d0c:	08017e7d 	.word	0x08017e7d
 8017d10:	08017d83 	.word	0x08017d83
 8017d14:	08017ecd 	.word	0x08017ecd
 8017d18:	08017ecd 	.word	0x08017ecd
 8017d1c:	08017ecd 	.word	0x08017ecd
 8017d20:	08017ecd 	.word	0x08017ecd
 8017d24:	08017ecd 	.word	0x08017ecd
 8017d28:	08017ecd 	.word	0x08017ecd
 8017d2c:	08017ecd 	.word	0x08017ecd
 8017d30:	08017ecd 	.word	0x08017ecd
 8017d34:	08017ecd 	.word	0x08017ecd
 8017d38:	08017ecd 	.word	0x08017ecd
 8017d3c:	08017ecd 	.word	0x08017ecd
 8017d40:	08017ecd 	.word	0x08017ecd
 8017d44:	08017ecd 	.word	0x08017ecd
 8017d48:	08017e83 	.word	0x08017e83
 8017d4c:	08017e89 	.word	0x08017e89
 8017d50:	08017e97 	.word	0x08017e97
 8017d54:	08017ecd 	.word	0x08017ecd
 8017d58:	08017ecd 	.word	0x08017ecd
 8017d5c:	08017e9d 	.word	0x08017e9d
 8017d60:	08017ea3 	.word	0x08017ea3
 8017d64:	08017ecd 	.word	0x08017ecd
 8017d68:	08017ea9 	.word	0x08017ea9
 8017d6c:	08017eb9 	.word	0x08017eb9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017d70:	2300      	movs	r3, #0
 8017d72:	61bb      	str	r3, [r7, #24]
            break;
 8017d74:	e0ab      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8017d76:	2300      	movs	r3, #0
 8017d78:	61bb      	str	r3, [r7, #24]
            break;
 8017d7a:	e0a8      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	61bb      	str	r3, [r7, #24]
            break;
 8017d80:	e0a5      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017d88:	733b      	strb	r3, [r7, #12]
 8017d8a:	2307      	movs	r3, #7
 8017d8c:	737b      	strb	r3, [r7, #13]
 8017d8e:	2300      	movs	r3, #0
 8017d90:	73bb      	strb	r3, [r7, #14]
 8017d92:	2310      	movs	r3, #16
 8017d94:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017d96:	4b51      	ldr	r3, [pc, #324]	@ (8017edc <RegionEU868GetPhyParam+0x26c>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017d9e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017da0:	4b4e      	ldr	r3, [pc, #312]	@ (8017edc <RegionEU868GetPhyParam+0x26c>)
 8017da2:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017da4:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017da6:	f107 030c 	add.w	r3, r7, #12
 8017daa:	4618      	mov	r0, r3
 8017dac:	f7ff fddf 	bl	801796e <RegionCommonGetNextLowerTxDr>
 8017db0:	4603      	mov	r3, r0
 8017db2:	61bb      	str	r3, [r7, #24]
            break;
 8017db4:	e08b      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8017db6:	2300      	movs	r3, #0
 8017db8:	61bb      	str	r3, [r7, #24]
            break;
 8017dba:	e088      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	61bb      	str	r3, [r7, #24]
            break;
 8017dc0:	e085      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017dc2:	2340      	movs	r3, #64	@ 0x40
 8017dc4:	61bb      	str	r3, [r7, #24]
            break;
 8017dc6:	e082      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017dc8:	2320      	movs	r3, #32
 8017dca:	61bb      	str	r3, [r7, #24]
            break;
 8017dcc:	e07f      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017dd4:	461a      	mov	r2, r3
 8017dd6:	4b42      	ldr	r3, [pc, #264]	@ (8017ee0 <RegionEU868GetPhyParam+0x270>)
 8017dd8:	5c9b      	ldrb	r3, [r3, r2]
 8017dda:	61bb      	str	r3, [r7, #24]
            break;
 8017ddc:	e077      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017de4:	461a      	mov	r2, r3
 8017de6:	4b3f      	ldr	r3, [pc, #252]	@ (8017ee4 <RegionEU868GetPhyParam+0x274>)
 8017de8:	5c9b      	ldrb	r3, [r3, r2]
 8017dea:	61bb      	str	r3, [r7, #24]
            break;
 8017dec:	e06f      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017dee:	2301      	movs	r3, #1
 8017df0:	61bb      	str	r3, [r7, #24]
            break;
 8017df2:	e06c      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017df4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8017df8:	61bb      	str	r3, [r7, #24]
            break;
 8017dfa:	e068      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017dfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017e00:	61bb      	str	r3, [r7, #24]
            break;
 8017e02:	e064      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017e04:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8017e08:	61bb      	str	r3, [r7, #24]
            break;
 8017e0a:	e060      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017e0c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017e10:	61bb      	str	r3, [r7, #24]
            break;
 8017e12:	e05c      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017e14:	f241 7370 	movw	r3, #6000	@ 0x1770
 8017e18:	61bb      	str	r3, [r7, #24]
            break;
 8017e1a:	e058      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017e1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017e20:	4831      	ldr	r0, [pc, #196]	@ (8017ee8 <RegionEU868GetPhyParam+0x278>)
 8017e22:	f001 f831 	bl	8018e88 <randr>
 8017e26:	4603      	mov	r3, r0
 8017e28:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8017e2c:	61bb      	str	r3, [r7, #24]
            break;
 8017e2e:	e04e      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017e30:	2300      	movs	r3, #0
 8017e32:	61bb      	str	r3, [r7, #24]
            break;
 8017e34:	e04b      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8017e36:	4b2d      	ldr	r3, [pc, #180]	@ (8017eec <RegionEU868GetPhyParam+0x27c>)
 8017e38:	61bb      	str	r3, [r7, #24]
            break;
 8017e3a:	e048      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	61bb      	str	r3, [r7, #24]
            break;
 8017e40:	e045      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017e42:	4b26      	ldr	r3, [pc, #152]	@ (8017edc <RegionEU868GetPhyParam+0x26c>)
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017e4a:	61bb      	str	r3, [r7, #24]
            break;
 8017e4c:	e03f      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017e4e:	4b23      	ldr	r3, [pc, #140]	@ (8017edc <RegionEU868GetPhyParam+0x26c>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8017e56:	61bb      	str	r3, [r7, #24]
            break;
 8017e58:	e039      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8017e5a:	2310      	movs	r3, #16
 8017e5c:	61bb      	str	r3, [r7, #24]
            break;
 8017e5e:	e036      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017e60:	4b1e      	ldr	r3, [pc, #120]	@ (8017edc <RegionEU868GetPhyParam+0x26c>)
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	61bb      	str	r3, [r7, #24]
            break;
 8017e66:	e032      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8017e68:	2300      	movs	r3, #0
 8017e6a:	61bb      	str	r3, [r7, #24]
            break;
 8017e6c:	e02f      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	61bb      	str	r3, [r7, #24]
            break;
 8017e72:	e02c      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017e74:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8017e78:	61bb      	str	r3, [r7, #24]
            break;
 8017e7a:	e028      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8017e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8017ef0 <RegionEU868GetPhyParam+0x280>)
 8017e7e:	61bb      	str	r3, [r7, #24]
            break;
 8017e80:	e025      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8017e82:	4b1a      	ldr	r3, [pc, #104]	@ (8017eec <RegionEU868GetPhyParam+0x27c>)
 8017e84:	61bb      	str	r3, [r7, #24]
            break;
 8017e86:	e022      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8017e88:	2311      	movs	r3, #17
 8017e8a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8017e8c:	2301      	movs	r3, #1
 8017e8e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8017e90:	2300      	movs	r3, #0
 8017e92:	76bb      	strb	r3, [r7, #26]
            break;
 8017e94:	e01b      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8017e96:	2303      	movs	r3, #3
 8017e98:	61bb      	str	r3, [r7, #24]
            break;
 8017e9a:	e018      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017e9c:	4b13      	ldr	r3, [pc, #76]	@ (8017eec <RegionEU868GetPhyParam+0x27c>)
 8017e9e:	61bb      	str	r3, [r7, #24]
            break;
 8017ea0:	e015      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8017ea2:	2303      	movs	r3, #3
 8017ea4:	61bb      	str	r3, [r7, #24]
            break;
 8017ea6:	e012      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017eae:	461a      	mov	r2, r3
 8017eb0:	4b10      	ldr	r3, [pc, #64]	@ (8017ef4 <RegionEU868GetPhyParam+0x284>)
 8017eb2:	5c9b      	ldrb	r3, [r3, r2]
 8017eb4:	61bb      	str	r3, [r7, #24]
            break;
 8017eb6:	e00a      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ebe:	490e      	ldr	r1, [pc, #56]	@ (8017ef8 <RegionEU868GetPhyParam+0x288>)
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7ff fda7 	bl	8017a14 <RegionCommonGetBandwidth>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	61bb      	str	r3, [r7, #24]
            break;
 8017eca:	e000      	b.n	8017ece <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8017ecc:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8017ece:	69bb      	ldr	r3, [r7, #24]
 8017ed0:	61fb      	str	r3, [r7, #28]
 8017ed2:	69fb      	ldr	r3, [r7, #28]
}
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	3720      	adds	r7, #32
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	bd80      	pop	{r7, pc}
 8017edc:	20001d24 	.word	0x20001d24
 8017ee0:	08021610 	.word	0x08021610
 8017ee4:	08021618 	.word	0x08021618
 8017ee8:	fffffc18 	.word	0xfffffc18
 8017eec:	33d3e608 	.word	0x33d3e608
 8017ef0:	4009999a 	.word	0x4009999a
 8017ef4:	080215e8 	.word	0x080215e8
 8017ef8:	080215f0 	.word	0x080215f0

08017efc <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017efc:	b590      	push	{r4, r7, lr}
 8017efe:	b085      	sub	sp, #20
 8017f00:	af02      	add	r7, sp, #8
 8017f02:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017f04:	4b11      	ldr	r3, [pc, #68]	@ (8017f4c <RegionEU868SetBandTxDone+0x50>)
 8017f06:	681a      	ldr	r2, [r3, #0]
 8017f08:	4b11      	ldr	r3, [pc, #68]	@ (8017f50 <RegionEU868SetBandTxDone+0x54>)
 8017f0a:	6819      	ldr	r1, [r3, #0]
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	781b      	ldrb	r3, [r3, #0]
 8017f10:	4618      	mov	r0, r3
 8017f12:	4603      	mov	r3, r0
 8017f14:	005b      	lsls	r3, r3, #1
 8017f16:	4403      	add	r3, r0
 8017f18:	009b      	lsls	r3, r3, #2
 8017f1a:	440b      	add	r3, r1
 8017f1c:	3309      	adds	r3, #9
 8017f1e:	781b      	ldrb	r3, [r3, #0]
 8017f20:	4619      	mov	r1, r3
 8017f22:	460b      	mov	r3, r1
 8017f24:	005b      	lsls	r3, r3, #1
 8017f26:	440b      	add	r3, r1
 8017f28:	00db      	lsls	r3, r3, #3
 8017f2a:	18d0      	adds	r0, r2, r3
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	6899      	ldr	r1, [r3, #8]
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	785c      	ldrb	r4, [r3, #1]
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	691a      	ldr	r2, [r3, #16]
 8017f38:	9200      	str	r2, [sp, #0]
 8017f3a:	68db      	ldr	r3, [r3, #12]
 8017f3c:	4622      	mov	r2, r4
 8017f3e:	f7ff f913 	bl	8017168 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8017f42:	bf00      	nop
 8017f44:	370c      	adds	r7, #12
 8017f46:	46bd      	mov	sp, r7
 8017f48:	bd90      	pop	{r4, r7, pc}
 8017f4a:	bf00      	nop
 8017f4c:	20001d28 	.word	0x20001d28
 8017f50:	20001d24 	.word	0x20001d24

08017f54 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b0b0      	sub	sp, #192	@ 0xc0
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8017f5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017f60:	2290      	movs	r2, #144	@ 0x90
 8017f62:	2100      	movs	r1, #0
 8017f64:	4618      	mov	r0, r3
 8017f66:	f006 f8ad 	bl	801e0c4 <memset>
 8017f6a:	2364      	movs	r3, #100	@ 0x64
 8017f6c:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017f6e:	2364      	movs	r3, #100	@ 0x64
 8017f70:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8017f74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017f78:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8017f7c:	230a      	movs	r3, #10
 8017f7e:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8017f82:	2364      	movs	r3, #100	@ 0x64
 8017f84:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8017f88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017f8c:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	7b1b      	ldrb	r3, [r3, #12]
 8017f94:	2b02      	cmp	r3, #2
 8017f96:	d05d      	beq.n	8018054 <RegionEU868InitDefaults+0x100>
 8017f98:	2b02      	cmp	r3, #2
 8017f9a:	dc6a      	bgt.n	8018072 <RegionEU868InitDefaults+0x11e>
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d002      	beq.n	8017fa6 <RegionEU868InitDefaults+0x52>
 8017fa0:	2b01      	cmp	r3, #1
 8017fa2:	d03e      	beq.n	8018022 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8017fa4:	e065      	b.n	8018072 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d062      	beq.n	8018074 <RegionEU868InitDefaults+0x120>
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	685b      	ldr	r3, [r3, #4]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d05e      	beq.n	8018074 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	685b      	ldr	r3, [r3, #4]
 8017fba:	4a30      	ldr	r2, [pc, #192]	@ (801807c <RegionEU868InitDefaults+0x128>)
 8017fbc:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	689b      	ldr	r3, [r3, #8]
 8017fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8018080 <RegionEU868InitDefaults+0x12c>)
 8017fc4:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8017fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8018080 <RegionEU868InitDefaults+0x12c>)
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8017fce:	2290      	movs	r2, #144	@ 0x90
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	f000 ff70 	bl	8018eb6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8017fd6:	4b29      	ldr	r3, [pc, #164]	@ (801807c <RegionEU868InitDefaults+0x128>)
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	4a2a      	ldr	r2, [pc, #168]	@ (8018084 <RegionEU868InitDefaults+0x130>)
 8017fdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8017fde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017fe2:	4b26      	ldr	r3, [pc, #152]	@ (801807c <RegionEU868InitDefaults+0x128>)
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	4a28      	ldr	r2, [pc, #160]	@ (8018088 <RegionEU868InitDefaults+0x134>)
 8017fe8:	330c      	adds	r3, #12
 8017fea:	ca07      	ldmia	r2, {r0, r1, r2}
 8017fec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017ff0:	4b22      	ldr	r3, [pc, #136]	@ (801807c <RegionEU868InitDefaults+0x128>)
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	4a25      	ldr	r2, [pc, #148]	@ (801808c <RegionEU868InitDefaults+0x138>)
 8017ff6:	3318      	adds	r3, #24
 8017ff8:	ca07      	ldmia	r2, {r0, r1, r2}
 8017ffa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017ffe:	4b1f      	ldr	r3, [pc, #124]	@ (801807c <RegionEU868InitDefaults+0x128>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	2207      	movs	r2, #7
 8018004:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018008:	4b1c      	ldr	r3, [pc, #112]	@ (801807c <RegionEU868InitDefaults+0x128>)
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8018010:	4b1a      	ldr	r3, [pc, #104]	@ (801807c <RegionEU868InitDefaults+0x128>)
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8018018:	2201      	movs	r2, #1
 801801a:	4619      	mov	r1, r3
 801801c:	f7ff f87e 	bl	801711c <RegionCommonChanMaskCopy>
 8018020:	e028      	b.n	8018074 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018022:	4b16      	ldr	r3, [pc, #88]	@ (801807c <RegionEU868InitDefaults+0x128>)
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	2200      	movs	r2, #0
 8018028:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801802a:	4b14      	ldr	r3, [pc, #80]	@ (801807c <RegionEU868InitDefaults+0x128>)
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	2200      	movs	r2, #0
 8018030:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8018032:	4b12      	ldr	r3, [pc, #72]	@ (801807c <RegionEU868InitDefaults+0x128>)
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	2200      	movs	r2, #0
 8018038:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801803a:	4b10      	ldr	r3, [pc, #64]	@ (801807c <RegionEU868InitDefaults+0x128>)
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8018042:	4b0e      	ldr	r3, [pc, #56]	@ (801807c <RegionEU868InitDefaults+0x128>)
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801804a:	2201      	movs	r2, #1
 801804c:	4619      	mov	r1, r3
 801804e:	f7ff f865 	bl	801711c <RegionCommonChanMaskCopy>
            break;
 8018052:	e00f      	b.n	8018074 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8018054:	4b09      	ldr	r3, [pc, #36]	@ (801807c <RegionEU868InitDefaults+0x128>)
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 801805c:	4b07      	ldr	r3, [pc, #28]	@ (801807c <RegionEU868InitDefaults+0x128>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8018064:	4b05      	ldr	r3, [pc, #20]	@ (801807c <RegionEU868InitDefaults+0x128>)
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	430a      	orrs	r2, r1
 801806a:	b292      	uxth	r2, r2
 801806c:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8018070:	e000      	b.n	8018074 <RegionEU868InitDefaults+0x120>
            break;
 8018072:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018074:	37c0      	adds	r7, #192	@ 0xc0
 8018076:	46bd      	mov	sp, r7
 8018078:	bd80      	pop	{r7, pc}
 801807a:	bf00      	nop
 801807c:	20001d24 	.word	0x20001d24
 8018080:	20001d28 	.word	0x20001d28
 8018084:	08021084 	.word	0x08021084
 8018088:	08021090 	.word	0x08021090
 801808c:	0802109c 	.word	0x0802109c

08018090 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b084      	sub	sp, #16
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
 8018098:	460b      	mov	r3, r1
 801809a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 801809c:	78fb      	ldrb	r3, [r7, #3]
 801809e:	2b0f      	cmp	r3, #15
 80180a0:	d86c      	bhi.n	801817c <RegionEU868Verify+0xec>
 80180a2:	a201      	add	r2, pc, #4	@ (adr r2, 80180a8 <RegionEU868Verify+0x18>)
 80180a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180a8:	080180e9 	.word	0x080180e9
 80180ac:	0801817d 	.word	0x0801817d
 80180b0:	0801817d 	.word	0x0801817d
 80180b4:	0801817d 	.word	0x0801817d
 80180b8:	0801817d 	.word	0x0801817d
 80180bc:	08018101 	.word	0x08018101
 80180c0:	0801811f 	.word	0x0801811f
 80180c4:	0801813d 	.word	0x0801813d
 80180c8:	0801817d 	.word	0x0801817d
 80180cc:	0801815b 	.word	0x0801815b
 80180d0:	0801815b 	.word	0x0801815b
 80180d4:	0801817d 	.word	0x0801817d
 80180d8:	0801817d 	.word	0x0801817d
 80180dc:	0801817d 	.word	0x0801817d
 80180e0:	0801817d 	.word	0x0801817d
 80180e4:	08018179 	.word	0x08018179
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80180e8:	2300      	movs	r3, #0
 80180ea:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	f107 020f 	add.w	r2, r7, #15
 80180f4:	4611      	mov	r1, r2
 80180f6:	4618      	mov	r0, r3
 80180f8:	f7ff fcf4 	bl	8017ae4 <VerifyRfFreq>
 80180fc:	4603      	mov	r3, r0
 80180fe:	e03e      	b.n	801817e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	f993 3000 	ldrsb.w	r3, [r3]
 8018106:	2207      	movs	r2, #7
 8018108:	2100      	movs	r1, #0
 801810a:	4618      	mov	r0, r3
 801810c:	f7fe ff89 	bl	8017022 <RegionCommonValueInRange>
 8018110:	4603      	mov	r3, r0
 8018112:	2b00      	cmp	r3, #0
 8018114:	bf14      	ite	ne
 8018116:	2301      	movne	r3, #1
 8018118:	2300      	moveq	r3, #0
 801811a:	b2db      	uxtb	r3, r3
 801811c:	e02f      	b.n	801817e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	f993 3000 	ldrsb.w	r3, [r3]
 8018124:	2205      	movs	r2, #5
 8018126:	2100      	movs	r1, #0
 8018128:	4618      	mov	r0, r3
 801812a:	f7fe ff7a 	bl	8017022 <RegionCommonValueInRange>
 801812e:	4603      	mov	r3, r0
 8018130:	2b00      	cmp	r3, #0
 8018132:	bf14      	ite	ne
 8018134:	2301      	movne	r3, #1
 8018136:	2300      	moveq	r3, #0
 8018138:	b2db      	uxtb	r3, r3
 801813a:	e020      	b.n	801817e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	f993 3000 	ldrsb.w	r3, [r3]
 8018142:	2207      	movs	r2, #7
 8018144:	2100      	movs	r1, #0
 8018146:	4618      	mov	r0, r3
 8018148:	f7fe ff6b 	bl	8017022 <RegionCommonValueInRange>
 801814c:	4603      	mov	r3, r0
 801814e:	2b00      	cmp	r3, #0
 8018150:	bf14      	ite	ne
 8018152:	2301      	movne	r3, #1
 8018154:	2300      	moveq	r3, #0
 8018156:	b2db      	uxtb	r3, r3
 8018158:	e011      	b.n	801817e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	f993 3000 	ldrsb.w	r3, [r3]
 8018160:	2207      	movs	r2, #7
 8018162:	2100      	movs	r1, #0
 8018164:	4618      	mov	r0, r3
 8018166:	f7fe ff5c 	bl	8017022 <RegionCommonValueInRange>
 801816a:	4603      	mov	r3, r0
 801816c:	2b00      	cmp	r3, #0
 801816e:	bf14      	ite	ne
 8018170:	2301      	movne	r3, #1
 8018172:	2300      	moveq	r3, #0
 8018174:	b2db      	uxtb	r3, r3
 8018176:	e002      	b.n	801817e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8018178:	2301      	movs	r3, #1
 801817a:	e000      	b.n	801817e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801817c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801817e:	4618      	mov	r0, r3
 8018180:	3710      	adds	r7, #16
 8018182:	46bd      	mov	sp, r7
 8018184:	bd80      	pop	{r7, pc}
 8018186:	bf00      	nop

08018188 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b08a      	sub	sp, #40	@ 0x28
 801818c:	af00      	add	r7, sp, #0
 801818e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018190:	2350      	movs	r3, #80	@ 0x50
 8018192:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	7a1b      	ldrb	r3, [r3, #8]
 801819a:	2b10      	cmp	r3, #16
 801819c:	d162      	bne.n	8018264 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	685b      	ldr	r3, [r3, #4]
 80181a2:	330f      	adds	r3, #15
 80181a4:	781b      	ldrb	r3, [r3, #0]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d15e      	bne.n	8018268 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80181aa:	2300      	movs	r3, #0
 80181ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80181b0:	2303      	movs	r3, #3
 80181b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80181b6:	e050      	b.n	801825a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80181b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80181bc:	2b07      	cmp	r3, #7
 80181be:	d824      	bhi.n	801820a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	685a      	ldr	r2, [r3, #4]
 80181c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80181c8:	4413      	add	r3, r2
 80181ca:	781b      	ldrb	r3, [r3, #0]
 80181cc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80181ce:	69ba      	ldr	r2, [r7, #24]
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	6859      	ldr	r1, [r3, #4]
 80181d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80181d8:	3301      	adds	r3, #1
 80181da:	440b      	add	r3, r1
 80181dc:	781b      	ldrb	r3, [r3, #0]
 80181de:	021b      	lsls	r3, r3, #8
 80181e0:	4313      	orrs	r3, r2
 80181e2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80181e4:	69ba      	ldr	r2, [r7, #24]
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	6859      	ldr	r1, [r3, #4]
 80181ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80181ee:	3302      	adds	r3, #2
 80181f0:	440b      	add	r3, r1
 80181f2:	781b      	ldrb	r3, [r3, #0]
 80181f4:	041b      	lsls	r3, r3, #16
 80181f6:	4313      	orrs	r3, r2
 80181f8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80181fa:	69bb      	ldr	r3, [r7, #24]
 80181fc:	2264      	movs	r2, #100	@ 0x64
 80181fe:	fb02 f303 	mul.w	r3, r2, r3
 8018202:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8018204:	2300      	movs	r3, #0
 8018206:	61fb      	str	r3, [r7, #28]
 8018208:	e006      	b.n	8018218 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801820a:	2300      	movs	r3, #0
 801820c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801820e:	2300      	movs	r3, #0
 8018210:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8018214:	2300      	movs	r3, #0
 8018216:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8018218:	69bb      	ldr	r3, [r7, #24]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d00b      	beq.n	8018236 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801821e:	f107 0318 	add.w	r3, r7, #24
 8018222:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8018224:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018228:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801822a:	f107 0310 	add.w	r3, r7, #16
 801822e:	4618      	mov	r0, r3
 8018230:	f000 fd14 	bl	8018c5c <RegionEU868ChannelAdd>
 8018234:	e007      	b.n	8018246 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018236:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801823a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801823c:	f107 030c 	add.w	r3, r7, #12
 8018240:	4618      	mov	r0, r3
 8018242:	f000 fdad 	bl	8018da0 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018246:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801824a:	3303      	adds	r3, #3
 801824c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018250:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018254:	3301      	adds	r3, #1
 8018256:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801825a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801825e:	2b0f      	cmp	r3, #15
 8018260:	d9aa      	bls.n	80181b8 <RegionEU868ApplyCFList+0x30>
 8018262:	e002      	b.n	801826a <RegionEU868ApplyCFList+0xe2>
        return;
 8018264:	bf00      	nop
 8018266:	e000      	b.n	801826a <RegionEU868ApplyCFList+0xe2>
        return;
 8018268:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801826a:	3728      	adds	r7, #40	@ 0x28
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}

08018270 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018270:	b580      	push	{r7, lr}
 8018272:	b082      	sub	sp, #8
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	791b      	ldrb	r3, [r3, #4]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d002      	beq.n	8018286 <RegionEU868ChanMaskSet+0x16>
 8018280:	2b01      	cmp	r3, #1
 8018282:	d00b      	beq.n	801829c <RegionEU868ChanMaskSet+0x2c>
 8018284:	e015      	b.n	80182b2 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018286:	4b0e      	ldr	r3, [pc, #56]	@ (80182c0 <RegionEU868ChanMaskSet+0x50>)
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	2201      	movs	r2, #1
 8018294:	4619      	mov	r1, r3
 8018296:	f7fe ff41 	bl	801711c <RegionCommonChanMaskCopy>
            break;
 801829a:	e00c      	b.n	80182b6 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801829c:	4b08      	ldr	r3, [pc, #32]	@ (80182c0 <RegionEU868ChanMaskSet+0x50>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	2201      	movs	r2, #1
 80182aa:	4619      	mov	r1, r3
 80182ac:	f7fe ff36 	bl	801711c <RegionCommonChanMaskCopy>
            break;
 80182b0:	e001      	b.n	80182b6 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80182b2:	2300      	movs	r3, #0
 80182b4:	e000      	b.n	80182b8 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80182b6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80182b8:	4618      	mov	r0, r3
 80182ba:	3708      	adds	r7, #8
 80182bc:	46bd      	mov	sp, r7
 80182be:	bd80      	pop	{r7, pc}
 80182c0:	20001d24 	.word	0x20001d24

080182c4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80182c4:	b580      	push	{r7, lr}
 80182c6:	b088      	sub	sp, #32
 80182c8:	af02      	add	r7, sp, #8
 80182ca:	60ba      	str	r2, [r7, #8]
 80182cc:	607b      	str	r3, [r7, #4]
 80182ce:	4603      	mov	r3, r0
 80182d0:	73fb      	strb	r3, [r7, #15]
 80182d2:	460b      	mov	r3, r1
 80182d4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80182d6:	2300      	movs	r3, #0
 80182d8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80182da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182de:	2b07      	cmp	r3, #7
 80182e0:	bfa8      	it	ge
 80182e2:	2307      	movge	r3, #7
 80182e4:	b25a      	sxtb	r2, r3
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80182f0:	491e      	ldr	r1, [pc, #120]	@ (801836c <RegionEU868ComputeRxWindowParameters+0xa8>)
 80182f2:	4618      	mov	r0, r3
 80182f4:	f7ff fb8e 	bl	8017a14 <RegionCommonGetBandwidth>
 80182f8:	4603      	mov	r3, r0
 80182fa:	b2da      	uxtb	r2, r3
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018306:	2b07      	cmp	r3, #7
 8018308:	d10a      	bne.n	8018320 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018310:	461a      	mov	r2, r3
 8018312:	4b17      	ldr	r3, [pc, #92]	@ (8018370 <RegionEU868ComputeRxWindowParameters+0xac>)
 8018314:	5c9b      	ldrb	r3, [r3, r2]
 8018316:	4618      	mov	r0, r3
 8018318:	f7ff f910 	bl	801753c <RegionCommonComputeSymbolTimeFsk>
 801831c:	6178      	str	r0, [r7, #20]
 801831e:	e011      	b.n	8018344 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018326:	461a      	mov	r2, r3
 8018328:	4b11      	ldr	r3, [pc, #68]	@ (8018370 <RegionEU868ComputeRxWindowParameters+0xac>)
 801832a:	5c9a      	ldrb	r2, [r3, r2]
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018332:	4619      	mov	r1, r3
 8018334:	4b0d      	ldr	r3, [pc, #52]	@ (801836c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8018336:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801833a:	4619      	mov	r1, r3
 801833c:	4610      	mov	r0, r2
 801833e:	f7ff f8e7 	bl	8017510 <RegionCommonComputeSymbolTimeLoRa>
 8018342:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018344:	4b0b      	ldr	r3, [pc, #44]	@ (8018374 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8018346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018348:	4798      	blx	r3
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	3308      	adds	r3, #8
 801834e:	687a      	ldr	r2, [r7, #4]
 8018350:	320c      	adds	r2, #12
 8018352:	7bb9      	ldrb	r1, [r7, #14]
 8018354:	9201      	str	r2, [sp, #4]
 8018356:	9300      	str	r3, [sp, #0]
 8018358:	4603      	mov	r3, r0
 801835a:	68ba      	ldr	r2, [r7, #8]
 801835c:	6978      	ldr	r0, [r7, #20]
 801835e:	f7ff f8fd 	bl	801755c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8018362:	bf00      	nop
 8018364:	3718      	adds	r7, #24
 8018366:	46bd      	mov	sp, r7
 8018368:	bd80      	pop	{r7, pc}
 801836a:	bf00      	nop
 801836c:	080215f0 	.word	0x080215f0
 8018370:	080215e8 	.word	0x080215e8
 8018374:	08021620 	.word	0x08021620

08018378 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018378:	b5b0      	push	{r4, r5, r7, lr}
 801837a:	b090      	sub	sp, #64	@ 0x40
 801837c:	af0a      	add	r7, sp, #40	@ 0x28
 801837e:	6078      	str	r0, [r7, #4]
 8018380:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	785b      	ldrb	r3, [r3, #1]
 8018386:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018388:	2300      	movs	r3, #0
 801838a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801838c:	2300      	movs	r3, #0
 801838e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	685b      	ldr	r3, [r3, #4]
 8018394:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018396:	4b5a      	ldr	r3, [pc, #360]	@ (8018500 <RegionEU868RxConfig+0x188>)
 8018398:	685b      	ldr	r3, [r3, #4]
 801839a:	4798      	blx	r3
 801839c:	4603      	mov	r3, r0
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d001      	beq.n	80183a6 <RegionEU868RxConfig+0x2e>
    {
        return false;
 80183a2:	2300      	movs	r3, #0
 80183a4:	e0a8      	b.n	80184f8 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	7cdb      	ldrb	r3, [r3, #19]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d126      	bne.n	80183fc <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80183ae:	4b55      	ldr	r3, [pc, #340]	@ (8018504 <RegionEU868RxConfig+0x18c>)
 80183b0:	681a      	ldr	r2, [r3, #0]
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	781b      	ldrb	r3, [r3, #0]
 80183b6:	4619      	mov	r1, r3
 80183b8:	460b      	mov	r3, r1
 80183ba:	005b      	lsls	r3, r3, #1
 80183bc:	440b      	add	r3, r1
 80183be:	009b      	lsls	r3, r3, #2
 80183c0:	4413      	add	r3, r2
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80183c6:	4b4f      	ldr	r3, [pc, #316]	@ (8018504 <RegionEU868RxConfig+0x18c>)
 80183c8:	681a      	ldr	r2, [r3, #0]
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	781b      	ldrb	r3, [r3, #0]
 80183ce:	4619      	mov	r1, r3
 80183d0:	460b      	mov	r3, r1
 80183d2:	005b      	lsls	r3, r3, #1
 80183d4:	440b      	add	r3, r1
 80183d6:	009b      	lsls	r3, r3, #2
 80183d8:	4413      	add	r3, r2
 80183da:	3304      	adds	r3, #4
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d00c      	beq.n	80183fc <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80183e2:	4b48      	ldr	r3, [pc, #288]	@ (8018504 <RegionEU868RxConfig+0x18c>)
 80183e4:	681a      	ldr	r2, [r3, #0]
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	4619      	mov	r1, r3
 80183ec:	460b      	mov	r3, r1
 80183ee:	005b      	lsls	r3, r3, #1
 80183f0:	440b      	add	r3, r1
 80183f2:	009b      	lsls	r3, r3, #2
 80183f4:	4413      	add	r3, r2
 80183f6:	3304      	adds	r3, #4
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80183fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018400:	4a41      	ldr	r2, [pc, #260]	@ (8018508 <RegionEU868RxConfig+0x190>)
 8018402:	5cd3      	ldrb	r3, [r2, r3]
 8018404:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018406:	4b3e      	ldr	r3, [pc, #248]	@ (8018500 <RegionEU868RxConfig+0x188>)
 8018408:	68db      	ldr	r3, [r3, #12]
 801840a:	6938      	ldr	r0, [r7, #16]
 801840c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801840e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018412:	2b07      	cmp	r3, #7
 8018414:	d128      	bne.n	8018468 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8018416:	2300      	movs	r3, #0
 8018418:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801841a:	4b39      	ldr	r3, [pc, #228]	@ (8018500 <RegionEU868RxConfig+0x188>)
 801841c:	699c      	ldr	r4, [r3, #24]
 801841e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018422:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018426:	fb02 f303 	mul.w	r3, r2, r3
 801842a:	4619      	mov	r1, r3
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	689b      	ldr	r3, [r3, #8]
 8018430:	b29b      	uxth	r3, r3
 8018432:	687a      	ldr	r2, [r7, #4]
 8018434:	7c92      	ldrb	r2, [r2, #18]
 8018436:	7df8      	ldrb	r0, [r7, #23]
 8018438:	9209      	str	r2, [sp, #36]	@ 0x24
 801843a:	2200      	movs	r2, #0
 801843c:	9208      	str	r2, [sp, #32]
 801843e:	2200      	movs	r2, #0
 8018440:	9207      	str	r2, [sp, #28]
 8018442:	2200      	movs	r2, #0
 8018444:	9206      	str	r2, [sp, #24]
 8018446:	2201      	movs	r2, #1
 8018448:	9205      	str	r2, [sp, #20]
 801844a:	2200      	movs	r2, #0
 801844c:	9204      	str	r2, [sp, #16]
 801844e:	2200      	movs	r2, #0
 8018450:	9203      	str	r2, [sp, #12]
 8018452:	9302      	str	r3, [sp, #8]
 8018454:	2305      	movs	r3, #5
 8018456:	9301      	str	r3, [sp, #4]
 8018458:	4b2c      	ldr	r3, [pc, #176]	@ (801850c <RegionEU868RxConfig+0x194>)
 801845a:	9300      	str	r3, [sp, #0]
 801845c:	2300      	movs	r3, #0
 801845e:	460a      	mov	r2, r1
 8018460:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8018464:	47a0      	blx	r4
 8018466:	e024      	b.n	80184b2 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8018468:	2301      	movs	r3, #1
 801846a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801846c:	4b24      	ldr	r3, [pc, #144]	@ (8018500 <RegionEU868RxConfig+0x188>)
 801846e:	699c      	ldr	r4, [r3, #24]
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	789b      	ldrb	r3, [r3, #2]
 8018474:	461d      	mov	r5, r3
 8018476:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	689b      	ldr	r3, [r3, #8]
 801847e:	b29b      	uxth	r3, r3
 8018480:	687a      	ldr	r2, [r7, #4]
 8018482:	7c92      	ldrb	r2, [r2, #18]
 8018484:	7df8      	ldrb	r0, [r7, #23]
 8018486:	9209      	str	r2, [sp, #36]	@ 0x24
 8018488:	2201      	movs	r2, #1
 801848a:	9208      	str	r2, [sp, #32]
 801848c:	2200      	movs	r2, #0
 801848e:	9207      	str	r2, [sp, #28]
 8018490:	2200      	movs	r2, #0
 8018492:	9206      	str	r2, [sp, #24]
 8018494:	2200      	movs	r2, #0
 8018496:	9205      	str	r2, [sp, #20]
 8018498:	2200      	movs	r2, #0
 801849a:	9204      	str	r2, [sp, #16]
 801849c:	2200      	movs	r2, #0
 801849e:	9203      	str	r2, [sp, #12]
 80184a0:	9302      	str	r3, [sp, #8]
 80184a2:	2308      	movs	r3, #8
 80184a4:	9301      	str	r3, [sp, #4]
 80184a6:	2300      	movs	r3, #0
 80184a8:	9300      	str	r3, [sp, #0]
 80184aa:	2301      	movs	r3, #1
 80184ac:	460a      	mov	r2, r1
 80184ae:	4629      	mov	r1, r5
 80184b0:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	7c5b      	ldrb	r3, [r3, #17]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d005      	beq.n	80184c6 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80184ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184be:	4a14      	ldr	r2, [pc, #80]	@ (8018510 <RegionEU868RxConfig+0x198>)
 80184c0:	5cd3      	ldrb	r3, [r2, r3]
 80184c2:	75bb      	strb	r3, [r7, #22]
 80184c4:	e004      	b.n	80184d0 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80184c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184ca:	4a12      	ldr	r2, [pc, #72]	@ (8018514 <RegionEU868RxConfig+0x19c>)
 80184cc:	5cd3      	ldrb	r3, [r2, r3]
 80184ce:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80184d0:	4b0b      	ldr	r3, [pc, #44]	@ (8018500 <RegionEU868RxConfig+0x188>)
 80184d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80184d4:	7dba      	ldrb	r2, [r7, #22]
 80184d6:	320d      	adds	r2, #13
 80184d8:	b2d1      	uxtb	r1, r2
 80184da:	7dfa      	ldrb	r2, [r7, #23]
 80184dc:	4610      	mov	r0, r2
 80184de:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	7cdb      	ldrb	r3, [r3, #19]
 80184e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80184e8:	6939      	ldr	r1, [r7, #16]
 80184ea:	4618      	mov	r0, r3
 80184ec:	f7ff fab0 	bl	8017a50 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80184f0:	683b      	ldr	r3, [r7, #0]
 80184f2:	7bfa      	ldrb	r2, [r7, #15]
 80184f4:	701a      	strb	r2, [r3, #0]
    return true;
 80184f6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80184f8:	4618      	mov	r0, r3
 80184fa:	3718      	adds	r7, #24
 80184fc:	46bd      	mov	sp, r7
 80184fe:	bdb0      	pop	{r4, r5, r7, pc}
 8018500:	08021620 	.word	0x08021620
 8018504:	20001d24 	.word	0x20001d24
 8018508:	080215e8 	.word	0x080215e8
 801850c:	00014585 	.word	0x00014585
 8018510:	08021618 	.word	0x08021618
 8018514:	08021610 	.word	0x08021610

08018518 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018518:	b590      	push	{r4, r7, lr}
 801851a:	b093      	sub	sp, #76	@ 0x4c
 801851c:	af0a      	add	r7, sp, #40	@ 0x28
 801851e:	60f8      	str	r0, [r7, #12]
 8018520:	60b9      	str	r1, [r7, #8]
 8018522:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801852a:	461a      	mov	r2, r3
 801852c:	4b5d      	ldr	r3, [pc, #372]	@ (80186a4 <RegionEU868TxConfig+0x18c>)
 801852e:	5c9b      	ldrb	r3, [r3, r2]
 8018530:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018538:	4b5b      	ldr	r3, [pc, #364]	@ (80186a8 <RegionEU868TxConfig+0x190>)
 801853a:	681a      	ldr	r2, [r3, #0]
 801853c:	4b5b      	ldr	r3, [pc, #364]	@ (80186ac <RegionEU868TxConfig+0x194>)
 801853e:	6819      	ldr	r1, [r3, #0]
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	781b      	ldrb	r3, [r3, #0]
 8018544:	461c      	mov	r4, r3
 8018546:	4623      	mov	r3, r4
 8018548:	005b      	lsls	r3, r3, #1
 801854a:	4423      	add	r3, r4
 801854c:	009b      	lsls	r3, r3, #2
 801854e:	440b      	add	r3, r1
 8018550:	3309      	adds	r3, #9
 8018552:	781b      	ldrb	r3, [r3, #0]
 8018554:	4619      	mov	r1, r3
 8018556:	460b      	mov	r3, r1
 8018558:	005b      	lsls	r3, r3, #1
 801855a:	440b      	add	r3, r1
 801855c:	00db      	lsls	r3, r3, #3
 801855e:	4413      	add	r3, r2
 8018560:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018564:	4619      	mov	r1, r3
 8018566:	f7ff fa40 	bl	80179ea <RegionCommonLimitTxPower>
 801856a:	4603      	mov	r3, r0
 801856c:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018574:	494e      	ldr	r1, [pc, #312]	@ (80186b0 <RegionEU868TxConfig+0x198>)
 8018576:	4618      	mov	r0, r3
 8018578:	f7ff fa4c 	bl	8017a14 <RegionCommonGetBandwidth>
 801857c:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801857e:	2300      	movs	r3, #0
 8018580:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	6859      	ldr	r1, [r3, #4]
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	689a      	ldr	r2, [r3, #8]
 801858a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801858e:	4618      	mov	r0, r3
 8018590:	f7ff f89c 	bl	80176cc <RegionCommonComputeTxPower>
 8018594:	4603      	mov	r3, r0
 8018596:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018598:	4b46      	ldr	r3, [pc, #280]	@ (80186b4 <RegionEU868TxConfig+0x19c>)
 801859a:	68da      	ldr	r2, [r3, #12]
 801859c:	4b43      	ldr	r3, [pc, #268]	@ (80186ac <RegionEU868TxConfig+0x194>)
 801859e:	6819      	ldr	r1, [r3, #0]
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	781b      	ldrb	r3, [r3, #0]
 80185a4:	4618      	mov	r0, r3
 80185a6:	4603      	mov	r3, r0
 80185a8:	005b      	lsls	r3, r3, #1
 80185aa:	4403      	add	r3, r0
 80185ac:	009b      	lsls	r3, r3, #2
 80185ae:	440b      	add	r3, r1
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	4618      	mov	r0, r3
 80185b4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80185bc:	2b07      	cmp	r3, #7
 80185be:	d124      	bne.n	801860a <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80185c0:	2300      	movs	r3, #0
 80185c2:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80185c4:	4b3b      	ldr	r3, [pc, #236]	@ (80186b4 <RegionEU868TxConfig+0x19c>)
 80185c6:	69dc      	ldr	r4, [r3, #28]
 80185c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80185cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80185d0:	fb02 f303 	mul.w	r3, r2, r3
 80185d4:	461a      	mov	r2, r3
 80185d6:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80185da:	7ff8      	ldrb	r0, [r7, #31]
 80185dc:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80185e0:	9308      	str	r3, [sp, #32]
 80185e2:	2300      	movs	r3, #0
 80185e4:	9307      	str	r3, [sp, #28]
 80185e6:	2300      	movs	r3, #0
 80185e8:	9306      	str	r3, [sp, #24]
 80185ea:	2300      	movs	r3, #0
 80185ec:	9305      	str	r3, [sp, #20]
 80185ee:	2301      	movs	r3, #1
 80185f0:	9304      	str	r3, [sp, #16]
 80185f2:	2300      	movs	r3, #0
 80185f4:	9303      	str	r3, [sp, #12]
 80185f6:	2305      	movs	r3, #5
 80185f8:	9302      	str	r3, [sp, #8]
 80185fa:	2300      	movs	r3, #0
 80185fc:	9301      	str	r3, [sp, #4]
 80185fe:	9200      	str	r2, [sp, #0]
 8018600:	69bb      	ldr	r3, [r7, #24]
 8018602:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8018606:	47a0      	blx	r4
 8018608:	e01d      	b.n	8018646 <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 801860a:	2301      	movs	r3, #1
 801860c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801860e:	4b29      	ldr	r3, [pc, #164]	@ (80186b4 <RegionEU868TxConfig+0x19c>)
 8018610:	69dc      	ldr	r4, [r3, #28]
 8018612:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018616:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801861a:	7ff8      	ldrb	r0, [r7, #31]
 801861c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8018620:	9208      	str	r2, [sp, #32]
 8018622:	2200      	movs	r2, #0
 8018624:	9207      	str	r2, [sp, #28]
 8018626:	2200      	movs	r2, #0
 8018628:	9206      	str	r2, [sp, #24]
 801862a:	2200      	movs	r2, #0
 801862c:	9205      	str	r2, [sp, #20]
 801862e:	2201      	movs	r2, #1
 8018630:	9204      	str	r2, [sp, #16]
 8018632:	2200      	movs	r2, #0
 8018634:	9203      	str	r2, [sp, #12]
 8018636:	2208      	movs	r2, #8
 8018638:	9202      	str	r2, [sp, #8]
 801863a:	2201      	movs	r2, #1
 801863c:	9201      	str	r2, [sp, #4]
 801863e:	9300      	str	r3, [sp, #0]
 8018640:	69bb      	ldr	r3, [r7, #24]
 8018642:	2200      	movs	r2, #0
 8018644:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018646:	4b19      	ldr	r3, [pc, #100]	@ (80186ac <RegionEU868TxConfig+0x194>)
 8018648:	681a      	ldr	r2, [r3, #0]
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	781b      	ldrb	r3, [r3, #0]
 801864e:	4619      	mov	r1, r3
 8018650:	460b      	mov	r3, r1
 8018652:	005b      	lsls	r3, r3, #1
 8018654:	440b      	add	r3, r1
 8018656:	009b      	lsls	r3, r3, #2
 8018658:	4413      	add	r3, r2
 801865a:	681a      	ldr	r2, [r3, #0]
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018662:	4619      	mov	r1, r3
 8018664:	4610      	mov	r0, r2
 8018666:	f7ff fa25 	bl	8017ab4 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	899b      	ldrh	r3, [r3, #12]
 8018674:	4619      	mov	r1, r3
 8018676:	4610      	mov	r0, r2
 8018678:	f7ff faaa 	bl	8017bd0 <GetTimeOnAir>
 801867c:	4602      	mov	r2, r0
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018682:	4b0c      	ldr	r3, [pc, #48]	@ (80186b4 <RegionEU868TxConfig+0x19c>)
 8018684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018686:	68fa      	ldr	r2, [r7, #12]
 8018688:	8992      	ldrh	r2, [r2, #12]
 801868a:	b2d1      	uxtb	r1, r2
 801868c:	7ffa      	ldrb	r2, [r7, #31]
 801868e:	4610      	mov	r0, r2
 8018690:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018692:	68bb      	ldr	r3, [r7, #8]
 8018694:	7f7a      	ldrb	r2, [r7, #29]
 8018696:	701a      	strb	r2, [r3, #0]
    return true;
 8018698:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801869a:	4618      	mov	r0, r3
 801869c:	3724      	adds	r7, #36	@ 0x24
 801869e:	46bd      	mov	sp, r7
 80186a0:	bd90      	pop	{r4, r7, pc}
 80186a2:	bf00      	nop
 80186a4:	080215e8 	.word	0x080215e8
 80186a8:	20001d28 	.word	0x20001d28
 80186ac:	20001d24 	.word	0x20001d24
 80186b0:	080215f0 	.word	0x080215f0
 80186b4:	08021620 	.word	0x08021620

080186b8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80186b8:	b590      	push	{r4, r7, lr}
 80186ba:	b093      	sub	sp, #76	@ 0x4c
 80186bc:	af00      	add	r7, sp, #0
 80186be:	60f8      	str	r0, [r7, #12]
 80186c0:	60b9      	str	r1, [r7, #8]
 80186c2:	607a      	str	r2, [r7, #4]
 80186c4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80186c6:	2307      	movs	r3, #7
 80186c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80186cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80186d0:	2200      	movs	r2, #0
 80186d2:	601a      	str	r2, [r3, #0]
 80186d4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80186d6:	2300      	movs	r3, #0
 80186d8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 80186dc:	2300      	movs	r3, #0
 80186de:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 80186e2:	2300      	movs	r3, #0
 80186e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80186e6:	e085      	b.n	80187f4 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	685a      	ldr	r2, [r3, #4]
 80186ec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80186f0:	4413      	add	r3, r2
 80186f2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80186f6:	4611      	mov	r1, r2
 80186f8:	4618      	mov	r0, r3
 80186fa:	f7fe fe2f 	bl	801735c <RegionCommonParseLinkAdrReq>
 80186fe:	4603      	mov	r3, r0
 8018700:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8018704:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018708:	2b00      	cmp	r3, #0
 801870a:	d07b      	beq.n	8018804 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801870c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018710:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018714:	4413      	add	r3, r2
 8018716:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801871a:	2307      	movs	r3, #7
 801871c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018720:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018724:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8018726:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801872a:	2b00      	cmp	r3, #0
 801872c:	d109      	bne.n	8018742 <RegionEU868LinkAdrReq+0x8a>
 801872e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018730:	2b00      	cmp	r3, #0
 8018732:	d106      	bne.n	8018742 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8018734:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018738:	f023 0301 	bic.w	r3, r3, #1
 801873c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8018740:	e058      	b.n	80187f4 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018742:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018746:	2b00      	cmp	r3, #0
 8018748:	d003      	beq.n	8018752 <RegionEU868LinkAdrReq+0x9a>
 801874a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801874e:	2b05      	cmp	r3, #5
 8018750:	d903      	bls.n	801875a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8018752:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018756:	2b06      	cmp	r3, #6
 8018758:	d906      	bls.n	8018768 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801875a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801875e:	f023 0301 	bic.w	r3, r3, #1
 8018762:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8018766:	e045      	b.n	80187f4 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018768:	2300      	movs	r3, #0
 801876a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801876e:	e03d      	b.n	80187ec <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018770:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018774:	2b06      	cmp	r3, #6
 8018776:	d118      	bne.n	80187aa <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8018778:	4b5f      	ldr	r3, [pc, #380]	@ (80188f8 <RegionEU868LinkAdrReq+0x240>)
 801877a:	6819      	ldr	r1, [r3, #0]
 801877c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8018780:	4613      	mov	r3, r2
 8018782:	005b      	lsls	r3, r3, #1
 8018784:	4413      	add	r3, r2
 8018786:	009b      	lsls	r3, r3, #2
 8018788:	440b      	add	r3, r1
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d028      	beq.n	80187e2 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8018790:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018794:	2201      	movs	r2, #1
 8018796:	fa02 f303 	lsl.w	r3, r2, r3
 801879a:	b21a      	sxth	r2, r3
 801879c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801879e:	b21b      	sxth	r3, r3
 80187a0:	4313      	orrs	r3, r2
 80187a2:	b21b      	sxth	r3, r3
 80187a4:	b29b      	uxth	r3, r3
 80187a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80187a8:	e01b      	b.n	80187e2 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80187aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80187ac:	461a      	mov	r2, r3
 80187ae:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80187b2:	fa42 f303 	asr.w	r3, r2, r3
 80187b6:	f003 0301 	and.w	r3, r3, #1
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d011      	beq.n	80187e2 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80187be:	4b4e      	ldr	r3, [pc, #312]	@ (80188f8 <RegionEU868LinkAdrReq+0x240>)
 80187c0:	6819      	ldr	r1, [r3, #0]
 80187c2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80187c6:	4613      	mov	r3, r2
 80187c8:	005b      	lsls	r3, r3, #1
 80187ca:	4413      	add	r3, r2
 80187cc:	009b      	lsls	r3, r3, #2
 80187ce:	440b      	add	r3, r1
 80187d0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d105      	bne.n	80187e2 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80187d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80187da:	f023 0301 	bic.w	r3, r3, #1
 80187de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80187e2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80187e6:	3301      	adds	r3, #1
 80187e8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80187ec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80187f0:	2b0f      	cmp	r3, #15
 80187f2:	d9bd      	bls.n	8018770 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	7a1b      	ldrb	r3, [r3, #8]
 80187f8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80187fc:	429a      	cmp	r2, r3
 80187fe:	f4ff af73 	bcc.w	80186e8 <RegionEU868LinkAdrReq+0x30>
 8018802:	e000      	b.n	8018806 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8018804:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018806:	2302      	movs	r3, #2
 8018808:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	7a5b      	ldrb	r3, [r3, #9]
 8018810:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8018814:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018818:	4618      	mov	r0, r3
 801881a:	f7ff fa29 	bl	8017c70 <RegionEU868GetPhyParam>
 801881e:	4603      	mov	r3, r0
 8018820:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8018822:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018826:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	7a9b      	ldrb	r3, [r3, #10]
 801882c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801882e:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8018832:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018834:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8018838:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801883a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801883e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8018846:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801884e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	7b5b      	ldrb	r3, [r3, #13]
 8018854:	b25b      	sxtb	r3, r3
 8018856:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018858:	2310      	movs	r3, #16
 801885a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801885c:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8018860:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018864:	b25b      	sxtb	r3, r3
 8018866:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801886a:	2307      	movs	r3, #7
 801886c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8018870:	4b21      	ldr	r3, [pc, #132]	@ (80188f8 <RegionEU868LinkAdrReq+0x240>)
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8018876:	2307      	movs	r3, #7
 8018878:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801887c:	2300      	movs	r3, #0
 801887e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018888:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 801888c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018890:	1c9a      	adds	r2, r3, #2
 8018892:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018896:	1c59      	adds	r1, r3, #1
 8018898:	f107 0010 	add.w	r0, r7, #16
 801889c:	4623      	mov	r3, r4
 801889e:	f7fe fdaf 	bl	8017400 <RegionCommonLinkAdrReqVerifyParams>
 80188a2:	4603      	mov	r3, r0
 80188a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80188a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80188ac:	2b07      	cmp	r3, #7
 80188ae:	d10d      	bne.n	80188cc <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80188b0:	4b11      	ldr	r3, [pc, #68]	@ (80188f8 <RegionEU868LinkAdrReq+0x240>)
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80188b8:	220c      	movs	r2, #12
 80188ba:	2100      	movs	r1, #0
 80188bc:	4618      	mov	r0, r3
 80188be:	f000 fb35 	bl	8018f2c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80188c2:	4b0d      	ldr	r3, [pc, #52]	@ (80188f8 <RegionEU868LinkAdrReq+0x240>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80188c8:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80188cc:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 80188d0:	68bb      	ldr	r3, [r7, #8]
 80188d2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80188d4:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80188dc:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80188e0:	683b      	ldr	r3, [r7, #0]
 80188e2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80188e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80188e6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80188ea:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80188ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80188f0:	4618      	mov	r0, r3
 80188f2:	374c      	adds	r7, #76	@ 0x4c
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd90      	pop	{r4, r7, pc}
 80188f8:	20001d24 	.word	0x20001d24

080188fc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b084      	sub	sp, #16
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018904:	2307      	movs	r3, #7
 8018906:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018908:	2300      	movs	r3, #0
 801890a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	685b      	ldr	r3, [r3, #4]
 8018910:	f107 020e 	add.w	r2, r7, #14
 8018914:	4611      	mov	r1, r2
 8018916:	4618      	mov	r0, r3
 8018918:	f7ff f8e4 	bl	8017ae4 <VerifyRfFreq>
 801891c:	4603      	mov	r3, r0
 801891e:	f083 0301 	eor.w	r3, r3, #1
 8018922:	b2db      	uxtb	r3, r3
 8018924:	2b00      	cmp	r3, #0
 8018926:	d003      	beq.n	8018930 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8018928:	7bfb      	ldrb	r3, [r7, #15]
 801892a:	f023 0301 	bic.w	r3, r3, #1
 801892e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	f993 3000 	ldrsb.w	r3, [r3]
 8018936:	2207      	movs	r2, #7
 8018938:	2100      	movs	r1, #0
 801893a:	4618      	mov	r0, r3
 801893c:	f7fe fb71 	bl	8017022 <RegionCommonValueInRange>
 8018940:	4603      	mov	r3, r0
 8018942:	2b00      	cmp	r3, #0
 8018944:	d103      	bne.n	801894e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8018946:	7bfb      	ldrb	r3, [r7, #15]
 8018948:	f023 0302 	bic.w	r3, r3, #2
 801894c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018954:	2205      	movs	r2, #5
 8018956:	2100      	movs	r1, #0
 8018958:	4618      	mov	r0, r3
 801895a:	f7fe fb62 	bl	8017022 <RegionCommonValueInRange>
 801895e:	4603      	mov	r3, r0
 8018960:	2b00      	cmp	r3, #0
 8018962:	d103      	bne.n	801896c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018964:	7bfb      	ldrb	r3, [r7, #15]
 8018966:	f023 0304 	bic.w	r3, r3, #4
 801896a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801896c:	7bfb      	ldrb	r3, [r7, #15]
}
 801896e:	4618      	mov	r0, r3
 8018970:	3710      	adds	r7, #16
 8018972:	46bd      	mov	sp, r7
 8018974:	bd80      	pop	{r7, pc}
	...

08018978 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b086      	sub	sp, #24
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018980:	2303      	movs	r3, #3
 8018982:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d114      	bne.n	80189b8 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018994:	b2db      	uxtb	r3, r3
 8018996:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018998:	f107 0308 	add.w	r3, r7, #8
 801899c:	4618      	mov	r0, r3
 801899e:	f000 f9ff 	bl	8018da0 <RegionEU868ChannelsRemove>
 80189a2:	4603      	mov	r3, r0
 80189a4:	f083 0301 	eor.w	r3, r3, #1
 80189a8:	b2db      	uxtb	r3, r3
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d03b      	beq.n	8018a26 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80189ae:	7dfb      	ldrb	r3, [r7, #23]
 80189b0:	f023 0303 	bic.w	r3, r3, #3
 80189b4:	75fb      	strb	r3, [r7, #23]
 80189b6:	e036      	b.n	8018a26 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80189c4:	b2db      	uxtb	r3, r3
 80189c6:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80189c8:	f107 030c 	add.w	r3, r7, #12
 80189cc:	4618      	mov	r0, r3
 80189ce:	f000 f945 	bl	8018c5c <RegionEU868ChannelAdd>
 80189d2:	4603      	mov	r3, r0
 80189d4:	2b06      	cmp	r3, #6
 80189d6:	d820      	bhi.n	8018a1a <RegionEU868NewChannelReq+0xa2>
 80189d8:	a201      	add	r2, pc, #4	@ (adr r2, 80189e0 <RegionEU868NewChannelReq+0x68>)
 80189da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189de:	bf00      	nop
 80189e0:	08018a25 	.word	0x08018a25
 80189e4:	08018a1b 	.word	0x08018a1b
 80189e8:	08018a1b 	.word	0x08018a1b
 80189ec:	08018a1b 	.word	0x08018a1b
 80189f0:	080189fd 	.word	0x080189fd
 80189f4:	08018a07 	.word	0x08018a07
 80189f8:	08018a11 	.word	0x08018a11
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80189fc:	7dfb      	ldrb	r3, [r7, #23]
 80189fe:	f023 0301 	bic.w	r3, r3, #1
 8018a02:	75fb      	strb	r3, [r7, #23]
                break;
 8018a04:	e00f      	b.n	8018a26 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8018a06:	7dfb      	ldrb	r3, [r7, #23]
 8018a08:	f023 0302 	bic.w	r3, r3, #2
 8018a0c:	75fb      	strb	r3, [r7, #23]
                break;
 8018a0e:	e00a      	b.n	8018a26 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018a10:	7dfb      	ldrb	r3, [r7, #23]
 8018a12:	f023 0303 	bic.w	r3, r3, #3
 8018a16:	75fb      	strb	r3, [r7, #23]
                break;
 8018a18:	e005      	b.n	8018a26 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8018a1a:	7dfb      	ldrb	r3, [r7, #23]
 8018a1c:	f023 0303 	bic.w	r3, r3, #3
 8018a20:	75fb      	strb	r3, [r7, #23]
                break;
 8018a22:	e000      	b.n	8018a26 <RegionEU868NewChannelReq+0xae>
                break;
 8018a24:	bf00      	nop
            }
        }
    }

    return status;
 8018a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	3718      	adds	r7, #24
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	bd80      	pop	{r7, pc}
 8018a32:	bf00      	nop

08018a34 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018a34:	b480      	push	{r7}
 8018a36:	b083      	sub	sp, #12
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018a40:	4618      	mov	r0, r3
 8018a42:	370c      	adds	r7, #12
 8018a44:	46bd      	mov	sp, r7
 8018a46:	bc80      	pop	{r7}
 8018a48:	4770      	bx	lr
	...

08018a4c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b084      	sub	sp, #16
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018a54:	2303      	movs	r3, #3
 8018a56:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018a58:	2300      	movs	r3, #0
 8018a5a:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	781b      	ldrb	r3, [r3, #0]
 8018a60:	2b0f      	cmp	r3, #15
 8018a62:	d901      	bls.n	8018a68 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8018a64:	2300      	movs	r3, #0
 8018a66:	e035      	b.n	8018ad4 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	685b      	ldr	r3, [r3, #4]
 8018a6c:	f107 020e 	add.w	r2, r7, #14
 8018a70:	4611      	mov	r1, r2
 8018a72:	4618      	mov	r0, r3
 8018a74:	f7ff f836 	bl	8017ae4 <VerifyRfFreq>
 8018a78:	4603      	mov	r3, r0
 8018a7a:	f083 0301 	eor.w	r3, r3, #1
 8018a7e:	b2db      	uxtb	r3, r3
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d003      	beq.n	8018a8c <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8018a84:	7bfb      	ldrb	r3, [r7, #15]
 8018a86:	f023 0301 	bic.w	r3, r3, #1
 8018a8a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018a8c:	4b13      	ldr	r3, [pc, #76]	@ (8018adc <RegionEU868DlChannelReq+0x90>)
 8018a8e:	681a      	ldr	r2, [r3, #0]
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	781b      	ldrb	r3, [r3, #0]
 8018a94:	4619      	mov	r1, r3
 8018a96:	460b      	mov	r3, r1
 8018a98:	005b      	lsls	r3, r3, #1
 8018a9a:	440b      	add	r3, r1
 8018a9c:	009b      	lsls	r3, r3, #2
 8018a9e:	4413      	add	r3, r2
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d103      	bne.n	8018aae <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8018aa6:	7bfb      	ldrb	r3, [r7, #15]
 8018aa8:	f023 0302 	bic.w	r3, r3, #2
 8018aac:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8018aae:	7bfb      	ldrb	r3, [r7, #15]
 8018ab0:	2b03      	cmp	r3, #3
 8018ab2:	d10d      	bne.n	8018ad0 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8018ab4:	4b09      	ldr	r3, [pc, #36]	@ (8018adc <RegionEU868DlChannelReq+0x90>)
 8018ab6:	6819      	ldr	r1, [r3, #0]
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	781b      	ldrb	r3, [r3, #0]
 8018abc:	4618      	mov	r0, r3
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	685a      	ldr	r2, [r3, #4]
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	005b      	lsls	r3, r3, #1
 8018ac6:	4403      	add	r3, r0
 8018ac8:	009b      	lsls	r3, r3, #2
 8018aca:	440b      	add	r3, r1
 8018acc:	3304      	adds	r3, #4
 8018ace:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8018ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	3710      	adds	r7, #16
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	bd80      	pop	{r7, pc}
 8018adc:	20001d24 	.word	0x20001d24

08018ae0 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018ae0:	b480      	push	{r7}
 8018ae2:	b083      	sub	sp, #12
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	460a      	mov	r2, r1
 8018aea:	71fb      	strb	r3, [r7, #7]
 8018aec:	4613      	mov	r3, r2
 8018aee:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8018af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8018af4:	4618      	mov	r0, r3
 8018af6:	370c      	adds	r7, #12
 8018af8:	46bd      	mov	sp, r7
 8018afa:	bc80      	pop	{r7}
 8018afc:	4770      	bx	lr
	...

08018b00 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b09a      	sub	sp, #104	@ 0x68
 8018b04:	af02      	add	r7, sp, #8
 8018b06:	60f8      	str	r0, [r7, #12]
 8018b08:	60b9      	str	r1, [r7, #8]
 8018b0a:	607a      	str	r2, [r7, #4]
 8018b0c:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8018b0e:	2300      	movs	r3, #0
 8018b10:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8018b14:	2300      	movs	r3, #0
 8018b16:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8018b1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018b1e:	2200      	movs	r2, #0
 8018b20:	601a      	str	r2, [r3, #0]
 8018b22:	605a      	str	r2, [r3, #4]
 8018b24:	609a      	str	r2, [r3, #8]
 8018b26:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018b28:	230c      	movs	r3, #12
 8018b2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8018b2e:	2307      	movs	r3, #7
 8018b30:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8018b32:	4b48      	ldr	r3, [pc, #288]	@ (8018c54 <RegionEU868NextChannel+0x154>)
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018b3a:	2201      	movs	r2, #1
 8018b3c:	2100      	movs	r1, #0
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f7fe fac0 	bl	80170c4 <RegionCommonCountChannels>
 8018b44:	4603      	mov	r3, r0
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d10a      	bne.n	8018b60 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018b4a:	4b42      	ldr	r3, [pc, #264]	@ (8018c54 <RegionEU868NextChannel+0x154>)
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8018b52:	4b40      	ldr	r3, [pc, #256]	@ (8018c54 <RegionEU868NextChannel+0x154>)
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	f042 0207 	orr.w	r2, r2, #7
 8018b5a:	b292      	uxth	r2, r2
 8018b5c:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	7a5b      	ldrb	r3, [r3, #9]
 8018b64:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018b6c:	b2db      	uxtb	r3, r3
 8018b6e:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018b70:	4b38      	ldr	r3, [pc, #224]	@ (8018c54 <RegionEU868NextChannel+0x154>)
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018b78:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018b7a:	4b36      	ldr	r3, [pc, #216]	@ (8018c54 <RegionEU868NextChannel+0x154>)
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
 8018b80:	4b35      	ldr	r3, [pc, #212]	@ (8018c58 <RegionEU868NextChannel+0x158>)
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8018b86:	2310      	movs	r3, #16
 8018b88:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8018b8a:	f107 0312 	add.w	r3, r7, #18
 8018b8e:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	685b      	ldr	r3, [r3, #4]
 8018b9a:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	7a9b      	ldrb	r3, [r3, #10]
 8018ba0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8018ba4:	2306      	movs	r3, #6
 8018ba6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018baa:	68fa      	ldr	r2, [r7, #12]
 8018bac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8018bb0:	320c      	adds	r2, #12
 8018bb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018bb6:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	7d1b      	ldrb	r3, [r3, #20]
 8018bbe:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	8adb      	ldrh	r3, [r3, #22]
 8018bcc:	4619      	mov	r1, r3
 8018bce:	4610      	mov	r0, r2
 8018bd0:	f7fe fffe 	bl	8017bd0 <GetTimeOnAir>
 8018bd4:	4603      	mov	r3, r0
 8018bd6:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018bd8:	f107 0314 	add.w	r3, r7, #20
 8018bdc:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018bde:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8018be2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8018be6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	9301      	str	r3, [sp, #4]
 8018bee:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8018bf2:	9300      	str	r3, [sp, #0]
 8018bf4:	460b      	mov	r3, r1
 8018bf6:	6839      	ldr	r1, [r7, #0]
 8018bf8:	f7fe fe57 	bl	80178aa <RegionCommonIdentifyChannels>
 8018bfc:	4603      	mov	r3, r0
 8018bfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018c02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d10e      	bne.n	8018c28 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018c0a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8018c0e:	3b01      	subs	r3, #1
 8018c10:	4619      	mov	r1, r3
 8018c12:	2000      	movs	r0, #0
 8018c14:	f000 f938 	bl	8018e88 <randr>
 8018c18:	4603      	mov	r3, r0
 8018c1a:	3360      	adds	r3, #96	@ 0x60
 8018c1c:	443b      	add	r3, r7
 8018c1e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8018c22:	68bb      	ldr	r3, [r7, #8]
 8018c24:	701a      	strb	r2, [r3, #0]
 8018c26:	e00e      	b.n	8018c46 <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8018c28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018c2c:	2b0c      	cmp	r3, #12
 8018c2e:	d10a      	bne.n	8018c46 <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018c30:	4b08      	ldr	r3, [pc, #32]	@ (8018c54 <RegionEU868NextChannel+0x154>)
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8018c38:	4b06      	ldr	r3, [pc, #24]	@ (8018c54 <RegionEU868NextChannel+0x154>)
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	f042 0207 	orr.w	r2, r2, #7
 8018c40:	b292      	uxth	r2, r2
 8018c42:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8018c46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	3760      	adds	r7, #96	@ 0x60
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	bd80      	pop	{r7, pc}
 8018c52:	bf00      	nop
 8018c54:	20001d24 	.word	0x20001d24
 8018c58:	20001d28 	.word	0x20001d28

08018c5c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b084      	sub	sp, #16
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018c64:	2300      	movs	r3, #0
 8018c66:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8018c68:	2300      	movs	r3, #0
 8018c6a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	791b      	ldrb	r3, [r3, #4]
 8018c74:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018c76:	7b7b      	ldrb	r3, [r7, #13]
 8018c78:	2b02      	cmp	r3, #2
 8018c7a:	d801      	bhi.n	8018c80 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018c7c:	2306      	movs	r3, #6
 8018c7e:	e089      	b.n	8018d94 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8018c80:	7b7b      	ldrb	r3, [r7, #13]
 8018c82:	2b0f      	cmp	r3, #15
 8018c84:	d901      	bls.n	8018c8a <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018c86:	2303      	movs	r3, #3
 8018c88:	e084      	b.n	8018d94 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	7a1b      	ldrb	r3, [r3, #8]
 8018c90:	f343 0303 	sbfx	r3, r3, #0, #4
 8018c94:	b25b      	sxtb	r3, r3
 8018c96:	2207      	movs	r2, #7
 8018c98:	2100      	movs	r1, #0
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	f7fe f9c1 	bl	8017022 <RegionCommonValueInRange>
 8018ca0:	4603      	mov	r3, r0
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d101      	bne.n	8018caa <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	7a1b      	ldrb	r3, [r3, #8]
 8018cb0:	f343 1303 	sbfx	r3, r3, #4, #4
 8018cb4:	b25b      	sxtb	r3, r3
 8018cb6:	2207      	movs	r2, #7
 8018cb8:	2100      	movs	r1, #0
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f7fe f9b1 	bl	8017022 <RegionCommonValueInRange>
 8018cc0:	4603      	mov	r3, r0
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d101      	bne.n	8018cca <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8018cc6:	2301      	movs	r3, #1
 8018cc8:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	7a1b      	ldrb	r3, [r3, #8]
 8018cd0:	f343 0303 	sbfx	r3, r3, #0, #4
 8018cd4:	b25a      	sxtb	r2, r3
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	7a1b      	ldrb	r3, [r3, #8]
 8018cdc:	f343 1303 	sbfx	r3, r3, #4, #4
 8018ce0:	b25b      	sxtb	r3, r3
 8018ce2:	429a      	cmp	r2, r3
 8018ce4:	dd01      	ble.n	8018cea <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8018ce6:	2301      	movs	r3, #1
 8018ce8:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8018cea:	7bbb      	ldrb	r3, [r7, #14]
 8018cec:	f083 0301 	eor.w	r3, r3, #1
 8018cf0:	b2db      	uxtb	r3, r3
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d010      	beq.n	8018d18 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	f107 020c 	add.w	r2, r7, #12
 8018d00:	4611      	mov	r1, r2
 8018d02:	4618      	mov	r0, r3
 8018d04:	f7fe feee 	bl	8017ae4 <VerifyRfFreq>
 8018d08:	4603      	mov	r3, r0
 8018d0a:	f083 0301 	eor.w	r3, r3, #1
 8018d0e:	b2db      	uxtb	r3, r3
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d001      	beq.n	8018d18 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8018d14:	2301      	movs	r3, #1
 8018d16:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8018d18:	7bfb      	ldrb	r3, [r7, #15]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d004      	beq.n	8018d28 <RegionEU868ChannelAdd+0xcc>
 8018d1e:	7bbb      	ldrb	r3, [r7, #14]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d001      	beq.n	8018d28 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018d24:	2306      	movs	r3, #6
 8018d26:	e035      	b.n	8018d94 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8018d28:	7bfb      	ldrb	r3, [r7, #15]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d001      	beq.n	8018d32 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8018d2e:	2305      	movs	r3, #5
 8018d30:	e030      	b.n	8018d94 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8018d32:	7bbb      	ldrb	r3, [r7, #14]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d001      	beq.n	8018d3c <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8018d38:	2304      	movs	r3, #4
 8018d3a:	e02b      	b.n	8018d94 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8018d3c:	4b17      	ldr	r3, [pc, #92]	@ (8018d9c <RegionEU868ChannelAdd+0x140>)
 8018d3e:	6819      	ldr	r1, [r3, #0]
 8018d40:	7b7a      	ldrb	r2, [r7, #13]
 8018d42:	4613      	mov	r3, r2
 8018d44:	005b      	lsls	r3, r3, #1
 8018d46:	4413      	add	r3, r2
 8018d48:	009b      	lsls	r3, r3, #2
 8018d4a:	18c8      	adds	r0, r1, r3
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	220c      	movs	r2, #12
 8018d52:	4619      	mov	r1, r3
 8018d54:	f000 f8af 	bl	8018eb6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8018d58:	4b10      	ldr	r3, [pc, #64]	@ (8018d9c <RegionEU868ChannelAdd+0x140>)
 8018d5a:	6819      	ldr	r1, [r3, #0]
 8018d5c:	7b7a      	ldrb	r2, [r7, #13]
 8018d5e:	7b38      	ldrb	r0, [r7, #12]
 8018d60:	4613      	mov	r3, r2
 8018d62:	005b      	lsls	r3, r3, #1
 8018d64:	4413      	add	r3, r2
 8018d66:	009b      	lsls	r3, r3, #2
 8018d68:	440b      	add	r3, r1
 8018d6a:	3309      	adds	r3, #9
 8018d6c:	4602      	mov	r2, r0
 8018d6e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8018d70:	4b0a      	ldr	r3, [pc, #40]	@ (8018d9c <RegionEU868ChannelAdd+0x140>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8018d78:	b21a      	sxth	r2, r3
 8018d7a:	7b7b      	ldrb	r3, [r7, #13]
 8018d7c:	2101      	movs	r1, #1
 8018d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8018d82:	b21b      	sxth	r3, r3
 8018d84:	4313      	orrs	r3, r2
 8018d86:	b21a      	sxth	r2, r3
 8018d88:	4b04      	ldr	r3, [pc, #16]	@ (8018d9c <RegionEU868ChannelAdd+0x140>)
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	b292      	uxth	r2, r2
 8018d8e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 8018d92:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8018d94:	4618      	mov	r0, r3
 8018d96:	3710      	adds	r7, #16
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	bd80      	pop	{r7, pc}
 8018d9c:	20001d24 	.word	0x20001d24

08018da0 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b086      	sub	sp, #24
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	781b      	ldrb	r3, [r3, #0]
 8018dac:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018dae:	7dfb      	ldrb	r3, [r7, #23]
 8018db0:	2b02      	cmp	r3, #2
 8018db2:	d801      	bhi.n	8018db8 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8018db4:	2300      	movs	r3, #0
 8018db6:	e016      	b.n	8018de6 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8018db8:	4b0d      	ldr	r3, [pc, #52]	@ (8018df0 <RegionEU868ChannelsRemove+0x50>)
 8018dba:	6819      	ldr	r1, [r3, #0]
 8018dbc:	7dfa      	ldrb	r2, [r7, #23]
 8018dbe:	4613      	mov	r3, r2
 8018dc0:	005b      	lsls	r3, r3, #1
 8018dc2:	4413      	add	r3, r2
 8018dc4:	009b      	lsls	r3, r3, #2
 8018dc6:	440b      	add	r3, r1
 8018dc8:	461a      	mov	r2, r3
 8018dca:	2300      	movs	r3, #0
 8018dcc:	6013      	str	r3, [r2, #0]
 8018dce:	6053      	str	r3, [r2, #4]
 8018dd0:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8018dd2:	4b07      	ldr	r3, [pc, #28]	@ (8018df0 <RegionEU868ChannelsRemove+0x50>)
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018dda:	7df9      	ldrb	r1, [r7, #23]
 8018ddc:	2210      	movs	r2, #16
 8018dde:	4618      	mov	r0, r3
 8018de0:	f7fe f93c 	bl	801705c <RegionCommonChanDisable>
 8018de4:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8018de6:	4618      	mov	r0, r3
 8018de8:	3718      	adds	r7, #24
 8018dea:	46bd      	mov	sp, r7
 8018dec:	bd80      	pop	{r7, pc}
 8018dee:	bf00      	nop
 8018df0:	20001d24 	.word	0x20001d24

08018df4 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018df4:	b480      	push	{r7}
 8018df6:	b085      	sub	sp, #20
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	71fb      	strb	r3, [r7, #7]
 8018dfe:	460b      	mov	r3, r1
 8018e00:	71bb      	strb	r3, [r7, #6]
 8018e02:	4613      	mov	r3, r2
 8018e04:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8018e06:	79ba      	ldrb	r2, [r7, #6]
 8018e08:	797b      	ldrb	r3, [r7, #5]
 8018e0a:	1ad3      	subs	r3, r2, r3
 8018e0c:	b2db      	uxtb	r3, r3
 8018e0e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	da01      	bge.n	8018e1c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8018e18:	2300      	movs	r3, #0
 8018e1a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018e1c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8018e1e:	4618      	mov	r0, r3
 8018e20:	3714      	adds	r7, #20
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bc80      	pop	{r7}
 8018e26:	4770      	bx	lr

08018e28 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018e28:	b480      	push	{r7}
 8018e2a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8018e64 <rand1+0x3c>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	4a0d      	ldr	r2, [pc, #52]	@ (8018e68 <rand1+0x40>)
 8018e32:	fb02 f303 	mul.w	r3, r2, r3
 8018e36:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018e3a:	3339      	adds	r3, #57	@ 0x39
 8018e3c:	4a09      	ldr	r2, [pc, #36]	@ (8018e64 <rand1+0x3c>)
 8018e3e:	6013      	str	r3, [r2, #0]
 8018e40:	4b08      	ldr	r3, [pc, #32]	@ (8018e64 <rand1+0x3c>)
 8018e42:	681a      	ldr	r2, [r3, #0]
 8018e44:	2303      	movs	r3, #3
 8018e46:	fba3 1302 	umull	r1, r3, r3, r2
 8018e4a:	1ad1      	subs	r1, r2, r3
 8018e4c:	0849      	lsrs	r1, r1, #1
 8018e4e:	440b      	add	r3, r1
 8018e50:	0f99      	lsrs	r1, r3, #30
 8018e52:	460b      	mov	r3, r1
 8018e54:	07db      	lsls	r3, r3, #31
 8018e56:	1a5b      	subs	r3, r3, r1
 8018e58:	1ad1      	subs	r1, r2, r3
 8018e5a:	460b      	mov	r3, r1
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	bc80      	pop	{r7}
 8018e62:	4770      	bx	lr
 8018e64:	20000130 	.word	0x20000130
 8018e68:	41c64e6d 	.word	0x41c64e6d

08018e6c <srand1>:

void srand1( uint32_t seed )
{
 8018e6c:	b480      	push	{r7}
 8018e6e:	b083      	sub	sp, #12
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	6078      	str	r0, [r7, #4]
    next = seed;
 8018e74:	4a03      	ldr	r2, [pc, #12]	@ (8018e84 <srand1+0x18>)
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	6013      	str	r3, [r2, #0]
}
 8018e7a:	bf00      	nop
 8018e7c:	370c      	adds	r7, #12
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bc80      	pop	{r7}
 8018e82:	4770      	bx	lr
 8018e84:	20000130 	.word	0x20000130

08018e88 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b082      	sub	sp, #8
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
 8018e90:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018e92:	f7ff ffc9 	bl	8018e28 <rand1>
 8018e96:	4602      	mov	r2, r0
 8018e98:	6839      	ldr	r1, [r7, #0]
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	1acb      	subs	r3, r1, r3
 8018e9e:	3301      	adds	r3, #1
 8018ea0:	fb92 f1f3 	sdiv	r1, r2, r3
 8018ea4:	fb01 f303 	mul.w	r3, r1, r3
 8018ea8:	1ad2      	subs	r2, r2, r3
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	4413      	add	r3, r2
}
 8018eae:	4618      	mov	r0, r3
 8018eb0:	3708      	adds	r7, #8
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	bd80      	pop	{r7, pc}

08018eb6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018eb6:	b480      	push	{r7}
 8018eb8:	b085      	sub	sp, #20
 8018eba:	af00      	add	r7, sp, #0
 8018ebc:	60f8      	str	r0, [r7, #12]
 8018ebe:	60b9      	str	r1, [r7, #8]
 8018ec0:	4613      	mov	r3, r2
 8018ec2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018ec4:	e007      	b.n	8018ed6 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018ec6:	68ba      	ldr	r2, [r7, #8]
 8018ec8:	1c53      	adds	r3, r2, #1
 8018eca:	60bb      	str	r3, [r7, #8]
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	1c59      	adds	r1, r3, #1
 8018ed0:	60f9      	str	r1, [r7, #12]
 8018ed2:	7812      	ldrb	r2, [r2, #0]
 8018ed4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018ed6:	88fb      	ldrh	r3, [r7, #6]
 8018ed8:	1e5a      	subs	r2, r3, #1
 8018eda:	80fa      	strh	r2, [r7, #6]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d1f2      	bne.n	8018ec6 <memcpy1+0x10>
    }
}
 8018ee0:	bf00      	nop
 8018ee2:	bf00      	nop
 8018ee4:	3714      	adds	r7, #20
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bc80      	pop	{r7}
 8018eea:	4770      	bx	lr

08018eec <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018eec:	b480      	push	{r7}
 8018eee:	b085      	sub	sp, #20
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	60f8      	str	r0, [r7, #12]
 8018ef4:	60b9      	str	r1, [r7, #8]
 8018ef6:	4613      	mov	r3, r2
 8018ef8:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018efa:	88fb      	ldrh	r3, [r7, #6]
 8018efc:	3b01      	subs	r3, #1
 8018efe:	68fa      	ldr	r2, [r7, #12]
 8018f00:	4413      	add	r3, r2
 8018f02:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018f04:	e007      	b.n	8018f16 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018f06:	68ba      	ldr	r2, [r7, #8]
 8018f08:	1c53      	adds	r3, r2, #1
 8018f0a:	60bb      	str	r3, [r7, #8]
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	1e59      	subs	r1, r3, #1
 8018f10:	60f9      	str	r1, [r7, #12]
 8018f12:	7812      	ldrb	r2, [r2, #0]
 8018f14:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018f16:	88fb      	ldrh	r3, [r7, #6]
 8018f18:	1e5a      	subs	r2, r3, #1
 8018f1a:	80fa      	strh	r2, [r7, #6]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d1f2      	bne.n	8018f06 <memcpyr+0x1a>
    }
}
 8018f20:	bf00      	nop
 8018f22:	bf00      	nop
 8018f24:	3714      	adds	r7, #20
 8018f26:	46bd      	mov	sp, r7
 8018f28:	bc80      	pop	{r7}
 8018f2a:	4770      	bx	lr

08018f2c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018f2c:	b480      	push	{r7}
 8018f2e:	b083      	sub	sp, #12
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	6078      	str	r0, [r7, #4]
 8018f34:	460b      	mov	r3, r1
 8018f36:	70fb      	strb	r3, [r7, #3]
 8018f38:	4613      	mov	r3, r2
 8018f3a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018f3c:	e004      	b.n	8018f48 <memset1+0x1c>
    {
        *dst++ = value;
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	1c5a      	adds	r2, r3, #1
 8018f42:	607a      	str	r2, [r7, #4]
 8018f44:	78fa      	ldrb	r2, [r7, #3]
 8018f46:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018f48:	883b      	ldrh	r3, [r7, #0]
 8018f4a:	1e5a      	subs	r2, r3, #1
 8018f4c:	803a      	strh	r2, [r7, #0]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d1f5      	bne.n	8018f3e <memset1+0x12>
    }
}
 8018f52:	bf00      	nop
 8018f54:	bf00      	nop
 8018f56:	370c      	adds	r7, #12
 8018f58:	46bd      	mov	sp, r7
 8018f5a:	bc80      	pop	{r7}
 8018f5c:	4770      	bx	lr
	...

08018f60 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018f60:	b480      	push	{r7}
 8018f62:	b085      	sub	sp, #20
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	6078      	str	r0, [r7, #4]
 8018f68:	460b      	mov	r3, r1
 8018f6a:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8018f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f70:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d101      	bne.n	8018f7c <Crc32+0x1c>
    {
        return 0;
 8018f78:	2300      	movs	r3, #0
 8018f7a:	e026      	b.n	8018fca <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	817b      	strh	r3, [r7, #10]
 8018f80:	e01d      	b.n	8018fbe <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8018f82:	897b      	ldrh	r3, [r7, #10]
 8018f84:	687a      	ldr	r2, [r7, #4]
 8018f86:	4413      	add	r3, r2
 8018f88:	781b      	ldrb	r3, [r3, #0]
 8018f8a:	461a      	mov	r2, r3
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	4053      	eors	r3, r2
 8018f90:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018f92:	2300      	movs	r3, #0
 8018f94:	813b      	strh	r3, [r7, #8]
 8018f96:	e00c      	b.n	8018fb2 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	085a      	lsrs	r2, r3, #1
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	f003 0301 	and.w	r3, r3, #1
 8018fa2:	425b      	negs	r3, r3
 8018fa4:	490b      	ldr	r1, [pc, #44]	@ (8018fd4 <Crc32+0x74>)
 8018fa6:	400b      	ands	r3, r1
 8018fa8:	4053      	eors	r3, r2
 8018faa:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018fac:	893b      	ldrh	r3, [r7, #8]
 8018fae:	3301      	adds	r3, #1
 8018fb0:	813b      	strh	r3, [r7, #8]
 8018fb2:	893b      	ldrh	r3, [r7, #8]
 8018fb4:	2b07      	cmp	r3, #7
 8018fb6:	d9ef      	bls.n	8018f98 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018fb8:	897b      	ldrh	r3, [r7, #10]
 8018fba:	3301      	adds	r3, #1
 8018fbc:	817b      	strh	r3, [r7, #10]
 8018fbe:	897a      	ldrh	r2, [r7, #10]
 8018fc0:	887b      	ldrh	r3, [r7, #2]
 8018fc2:	429a      	cmp	r2, r3
 8018fc4:	d3dd      	bcc.n	8018f82 <Crc32+0x22>
        }
    }

    return ~crc;
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	43db      	mvns	r3, r3
}
 8018fca:	4618      	mov	r0, r3
 8018fcc:	3714      	adds	r7, #20
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	bc80      	pop	{r7}
 8018fd2:	4770      	bx	lr
 8018fd4:	edb88320 	.word	0xedb88320

08018fd8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b084      	sub	sp, #16
 8018fdc:	af02      	add	r7, sp, #8
 8018fde:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018fe0:	4a24      	ldr	r2, [pc, #144]	@ (8019074 <RadioInit+0x9c>)
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018fe6:	4b24      	ldr	r3, [pc, #144]	@ (8019078 <RadioInit+0xa0>)
 8018fe8:	2200      	movs	r2, #0
 8018fea:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018fec:	4b22      	ldr	r3, [pc, #136]	@ (8019078 <RadioInit+0xa0>)
 8018fee:	2200      	movs	r2, #0
 8018ff0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018ff2:	4b21      	ldr	r3, [pc, #132]	@ (8019078 <RadioInit+0xa0>)
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8019078 <RadioInit+0xa0>)
 8018ffa:	2200      	movs	r2, #0
 8018ffc:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8018ffe:	481f      	ldr	r0, [pc, #124]	@ (801907c <RadioInit+0xa4>)
 8019000:	f001 ffc6 	bl	801af90 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8019004:	4b1c      	ldr	r3, [pc, #112]	@ (8019078 <RadioInit+0xa0>)
 8019006:	2200      	movs	r2, #0
 8019008:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801900a:	4b1b      	ldr	r3, [pc, #108]	@ (8019078 <RadioInit+0xa0>)
 801900c:	2200      	movs	r2, #0
 801900e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8019010:	f002 fa5c 	bl	801b4cc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8019014:	2100      	movs	r1, #0
 8019016:	2000      	movs	r0, #0
 8019018:	f002 fe28 	bl	801bc6c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801901c:	2204      	movs	r2, #4
 801901e:	2100      	movs	r1, #0
 8019020:	2001      	movs	r0, #1
 8019022:	f002 fbeb 	bl	801b7fc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019026:	2300      	movs	r3, #0
 8019028:	2200      	movs	r2, #0
 801902a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801902e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019032:	f002 fb1b 	bl	801b66c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8019036:	f000 fe99 	bl	8019d6c <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801903a:	2300      	movs	r3, #0
 801903c:	9300      	str	r3, [sp, #0]
 801903e:	4b10      	ldr	r3, [pc, #64]	@ (8019080 <RadioInit+0xa8>)
 8019040:	2200      	movs	r2, #0
 8019042:	f04f 31ff 	mov.w	r1, #4294967295
 8019046:	480f      	ldr	r0, [pc, #60]	@ (8019084 <RadioInit+0xac>)
 8019048:	f003 fd7e 	bl	801cb48 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801904c:	2300      	movs	r3, #0
 801904e:	9300      	str	r3, [sp, #0]
 8019050:	4b0d      	ldr	r3, [pc, #52]	@ (8019088 <RadioInit+0xb0>)
 8019052:	2200      	movs	r2, #0
 8019054:	f04f 31ff 	mov.w	r1, #4294967295
 8019058:	480c      	ldr	r0, [pc, #48]	@ (801908c <RadioInit+0xb4>)
 801905a:	f003 fd75 	bl	801cb48 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801905e:	4809      	ldr	r0, [pc, #36]	@ (8019084 <RadioInit+0xac>)
 8019060:	f003 fe16 	bl	801cc90 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019064:	4809      	ldr	r0, [pc, #36]	@ (801908c <RadioInit+0xb4>)
 8019066:	f003 fe13 	bl	801cc90 <UTIL_TIMER_Stop>
}
 801906a:	bf00      	nop
 801906c:	3708      	adds	r7, #8
 801906e:	46bd      	mov	sp, r7
 8019070:	bd80      	pop	{r7, pc}
 8019072:	bf00      	nop
 8019074:	20001e2c 	.word	0x20001e2c
 8019078:	20001e30 	.word	0x20001e30
 801907c:	0801a161 	.word	0x0801a161
 8019080:	0801a0e9 	.word	0x0801a0e9
 8019084:	20001e8c 	.word	0x20001e8c
 8019088:	0801a0fd 	.word	0x0801a0fd
 801908c:	20001ea4 	.word	0x20001ea4

08019090 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019090:	b580      	push	{r7, lr}
 8019092:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019094:	f001 ffc4 	bl	801b020 <SUBGRF_GetOperatingMode>
 8019098:	4603      	mov	r3, r0
 801909a:	2b07      	cmp	r3, #7
 801909c:	d00a      	beq.n	80190b4 <RadioGetStatus+0x24>
 801909e:	2b07      	cmp	r3, #7
 80190a0:	dc0a      	bgt.n	80190b8 <RadioGetStatus+0x28>
 80190a2:	2b04      	cmp	r3, #4
 80190a4:	d002      	beq.n	80190ac <RadioGetStatus+0x1c>
 80190a6:	2b05      	cmp	r3, #5
 80190a8:	d002      	beq.n	80190b0 <RadioGetStatus+0x20>
 80190aa:	e005      	b.n	80190b8 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80190ac:	2302      	movs	r3, #2
 80190ae:	e004      	b.n	80190ba <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80190b0:	2301      	movs	r3, #1
 80190b2:	e002      	b.n	80190ba <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80190b4:	2303      	movs	r3, #3
 80190b6:	e000      	b.n	80190ba <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80190b8:	2300      	movs	r3, #0
    }
}
 80190ba:	4618      	mov	r0, r3
 80190bc:	bd80      	pop	{r7, pc}
	...

080190c0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80190c0:	b580      	push	{r7, lr}
 80190c2:	b082      	sub	sp, #8
 80190c4:	af00      	add	r7, sp, #0
 80190c6:	4603      	mov	r3, r0
 80190c8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80190ca:	4a2a      	ldr	r2, [pc, #168]	@ (8019174 <RadioSetModem+0xb4>)
 80190cc:	79fb      	ldrb	r3, [r7, #7]
 80190ce:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80190d0:	79fb      	ldrb	r3, [r7, #7]
 80190d2:	4618      	mov	r0, r3
 80190d4:	f003 f9b7 	bl	801c446 <RFW_SetRadioModem>
    switch( modem )
 80190d8:	79fb      	ldrb	r3, [r7, #7]
 80190da:	2b05      	cmp	r3, #5
 80190dc:	d80e      	bhi.n	80190fc <RadioSetModem+0x3c>
 80190de:	a201      	add	r2, pc, #4	@ (adr r2, 80190e4 <RadioSetModem+0x24>)
 80190e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190e4:	0801910b 	.word	0x0801910b
 80190e8:	08019119 	.word	0x08019119
 80190ec:	080190fd 	.word	0x080190fd
 80190f0:	0801913f 	.word	0x0801913f
 80190f4:	0801914d 	.word	0x0801914d
 80190f8:	0801915b 	.word	0x0801915b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80190fc:	2003      	movs	r0, #3
 80190fe:	f002 fb57 	bl	801b7b0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019102:	4b1c      	ldr	r3, [pc, #112]	@ (8019174 <RadioSetModem+0xb4>)
 8019104:	2200      	movs	r2, #0
 8019106:	735a      	strb	r2, [r3, #13]
        break;
 8019108:	e02f      	b.n	801916a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801910a:	2000      	movs	r0, #0
 801910c:	f002 fb50 	bl	801b7b0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019110:	4b18      	ldr	r3, [pc, #96]	@ (8019174 <RadioSetModem+0xb4>)
 8019112:	2200      	movs	r2, #0
 8019114:	735a      	strb	r2, [r3, #13]
        break;
 8019116:	e028      	b.n	801916a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8019118:	2001      	movs	r0, #1
 801911a:	f002 fb49 	bl	801b7b0 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801911e:	4b15      	ldr	r3, [pc, #84]	@ (8019174 <RadioSetModem+0xb4>)
 8019120:	7b5a      	ldrb	r2, [r3, #13]
 8019122:	4b14      	ldr	r3, [pc, #80]	@ (8019174 <RadioSetModem+0xb4>)
 8019124:	7b1b      	ldrb	r3, [r3, #12]
 8019126:	429a      	cmp	r2, r3
 8019128:	d01e      	beq.n	8019168 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801912a:	4b12      	ldr	r3, [pc, #72]	@ (8019174 <RadioSetModem+0xb4>)
 801912c:	7b1a      	ldrb	r2, [r3, #12]
 801912e:	4b11      	ldr	r3, [pc, #68]	@ (8019174 <RadioSetModem+0xb4>)
 8019130:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8019132:	4b10      	ldr	r3, [pc, #64]	@ (8019174 <RadioSetModem+0xb4>)
 8019134:	7b5b      	ldrb	r3, [r3, #13]
 8019136:	4618      	mov	r0, r3
 8019138:	f000 ffa0 	bl	801a07c <RadioSetPublicNetwork>
        }
        break;
 801913c:	e014      	b.n	8019168 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801913e:	2002      	movs	r0, #2
 8019140:	f002 fb36 	bl	801b7b0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019144:	4b0b      	ldr	r3, [pc, #44]	@ (8019174 <RadioSetModem+0xb4>)
 8019146:	2200      	movs	r2, #0
 8019148:	735a      	strb	r2, [r3, #13]
        break;
 801914a:	e00e      	b.n	801916a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801914c:	2002      	movs	r0, #2
 801914e:	f002 fb2f 	bl	801b7b0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019152:	4b08      	ldr	r3, [pc, #32]	@ (8019174 <RadioSetModem+0xb4>)
 8019154:	2200      	movs	r2, #0
 8019156:	735a      	strb	r2, [r3, #13]
        break;
 8019158:	e007      	b.n	801916a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801915a:	2000      	movs	r0, #0
 801915c:	f002 fb28 	bl	801b7b0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019160:	4b04      	ldr	r3, [pc, #16]	@ (8019174 <RadioSetModem+0xb4>)
 8019162:	2200      	movs	r2, #0
 8019164:	735a      	strb	r2, [r3, #13]
        break;
 8019166:	e000      	b.n	801916a <RadioSetModem+0xaa>
        break;
 8019168:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801916a:	bf00      	nop
 801916c:	3708      	adds	r7, #8
 801916e:	46bd      	mov	sp, r7
 8019170:	bd80      	pop	{r7, pc}
 8019172:	bf00      	nop
 8019174:	20001e30 	.word	0x20001e30

08019178 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b082      	sub	sp, #8
 801917c:	af00      	add	r7, sp, #0
 801917e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8019180:	6878      	ldr	r0, [r7, #4]
 8019182:	f002 facf 	bl	801b724 <SUBGRF_SetRfFrequency>
}
 8019186:	bf00      	nop
 8019188:	3708      	adds	r7, #8
 801918a:	46bd      	mov	sp, r7
 801918c:	bd80      	pop	{r7, pc}

0801918e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801918e:	b580      	push	{r7, lr}
 8019190:	b090      	sub	sp, #64	@ 0x40
 8019192:	af0a      	add	r7, sp, #40	@ 0x28
 8019194:	60f8      	str	r0, [r7, #12]
 8019196:	60b9      	str	r1, [r7, #8]
 8019198:	603b      	str	r3, [r7, #0]
 801919a:	4613      	mov	r3, r2
 801919c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801919e:	2301      	movs	r3, #1
 80191a0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80191a2:	2300      	movs	r3, #0
 80191a4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80191a6:	2300      	movs	r3, #0
 80191a8:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80191aa:	f000 fdf2 	bl	8019d92 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80191ae:	2000      	movs	r0, #0
 80191b0:	f7ff ff86 	bl	80190c0 <RadioSetModem>

    RadioSetChannel( freq );
 80191b4:	68f8      	ldr	r0, [r7, #12]
 80191b6:	f7ff ffdf 	bl	8019178 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80191ba:	2301      	movs	r3, #1
 80191bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80191be:	2300      	movs	r3, #0
 80191c0:	9308      	str	r3, [sp, #32]
 80191c2:	2300      	movs	r3, #0
 80191c4:	9307      	str	r3, [sp, #28]
 80191c6:	2300      	movs	r3, #0
 80191c8:	9306      	str	r3, [sp, #24]
 80191ca:	2300      	movs	r3, #0
 80191cc:	9305      	str	r3, [sp, #20]
 80191ce:	2300      	movs	r3, #0
 80191d0:	9304      	str	r3, [sp, #16]
 80191d2:	2300      	movs	r3, #0
 80191d4:	9303      	str	r3, [sp, #12]
 80191d6:	2300      	movs	r3, #0
 80191d8:	9302      	str	r3, [sp, #8]
 80191da:	2303      	movs	r3, #3
 80191dc:	9301      	str	r3, [sp, #4]
 80191de:	68bb      	ldr	r3, [r7, #8]
 80191e0:	9300      	str	r3, [sp, #0]
 80191e2:	2300      	movs	r3, #0
 80191e4:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80191e8:	68b9      	ldr	r1, [r7, #8]
 80191ea:	2000      	movs	r0, #0
 80191ec:	f000 f83c 	bl	8019268 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80191f0:	2000      	movs	r0, #0
 80191f2:	f000 fdd5 	bl	8019da0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80191f6:	f000 ff6f 	bl	801a0d8 <RadioGetWakeupTime>
 80191fa:	4603      	mov	r3, r0
 80191fc:	4618      	mov	r0, r3
 80191fe:	f7e9 fbed 	bl	80029dc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019202:	f003 fe5f 	bl	801cec4 <UTIL_TIMER_GetCurrentTime>
 8019206:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019208:	e00d      	b.n	8019226 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801920a:	2000      	movs	r0, #0
 801920c:	f000 feb6 	bl	8019f7c <RadioRssi>
 8019210:	4603      	mov	r3, r0
 8019212:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8019214:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801921c:	429a      	cmp	r2, r3
 801921e:	dd02      	ble.n	8019226 <RadioIsChannelFree+0x98>
        {
            status = false;
 8019220:	2300      	movs	r3, #0
 8019222:	75fb      	strb	r3, [r7, #23]
            break;
 8019224:	e006      	b.n	8019234 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019226:	6938      	ldr	r0, [r7, #16]
 8019228:	f003 fe5e 	bl	801cee8 <UTIL_TIMER_GetElapsedTime>
 801922c:	4602      	mov	r2, r0
 801922e:	683b      	ldr	r3, [r7, #0]
 8019230:	4293      	cmp	r3, r2
 8019232:	d8ea      	bhi.n	801920a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8019234:	f000 fdad 	bl	8019d92 <RadioStandby>

    return status;
 8019238:	7dfb      	ldrb	r3, [r7, #23]
}
 801923a:	4618      	mov	r0, r3
 801923c:	3718      	adds	r7, #24
 801923e:	46bd      	mov	sp, r7
 8019240:	bd80      	pop	{r7, pc}

08019242 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8019242:	b580      	push	{r7, lr}
 8019244:	b082      	sub	sp, #8
 8019246:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8019248:	2300      	movs	r3, #0
 801924a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801924c:	2300      	movs	r3, #0
 801924e:	2200      	movs	r2, #0
 8019250:	2100      	movs	r1, #0
 8019252:	2000      	movs	r0, #0
 8019254:	f002 fa0a 	bl	801b66c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8019258:	f001 ffb3 	bl	801b1c2 <SUBGRF_GetRandom>
 801925c:	6078      	str	r0, [r7, #4]

    return rnd;
 801925e:	687b      	ldr	r3, [r7, #4]
}
 8019260:	4618      	mov	r0, r3
 8019262:	3708      	adds	r7, #8
 8019264:	46bd      	mov	sp, r7
 8019266:	bd80      	pop	{r7, pc}

08019268 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b08a      	sub	sp, #40	@ 0x28
 801926c:	af00      	add	r7, sp, #0
 801926e:	60b9      	str	r1, [r7, #8]
 8019270:	607a      	str	r2, [r7, #4]
 8019272:	461a      	mov	r2, r3
 8019274:	4603      	mov	r3, r0
 8019276:	73fb      	strb	r3, [r7, #15]
 8019278:	4613      	mov	r3, r2
 801927a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801927c:	4ab9      	ldr	r2, [pc, #740]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 801927e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8019282:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8019284:	f003 f89d 	bl	801c3c2 <RFW_DeInit>
    if( rxContinuous == true )
 8019288:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801928c:	2b00      	cmp	r3, #0
 801928e:	d001      	beq.n	8019294 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8019290:	2300      	movs	r3, #0
 8019292:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8019294:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8019298:	2b00      	cmp	r3, #0
 801929a:	d004      	beq.n	80192a6 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801929c:	4ab2      	ldr	r2, [pc, #712]	@ (8019568 <RadioSetRxConfig+0x300>)
 801929e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80192a2:	7013      	strb	r3, [r2, #0]
 80192a4:	e002      	b.n	80192ac <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80192a6:	4bb0      	ldr	r3, [pc, #704]	@ (8019568 <RadioSetRxConfig+0x300>)
 80192a8:	22ff      	movs	r2, #255	@ 0xff
 80192aa:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80192ac:	7bfb      	ldrb	r3, [r7, #15]
 80192ae:	2b05      	cmp	r3, #5
 80192b0:	d009      	beq.n	80192c6 <RadioSetRxConfig+0x5e>
 80192b2:	2b05      	cmp	r3, #5
 80192b4:	f300 81d7 	bgt.w	8019666 <RadioSetRxConfig+0x3fe>
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	f000 80bf 	beq.w	801943c <RadioSetRxConfig+0x1d4>
 80192be:	2b01      	cmp	r3, #1
 80192c0:	f000 8124 	beq.w	801950c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80192c4:	e1cf      	b.n	8019666 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80192c6:	2001      	movs	r0, #1
 80192c8:	f002 f8c2 	bl	801b450 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80192cc:	4ba5      	ldr	r3, [pc, #660]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 80192ce:	2200      	movs	r2, #0
 80192d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80192d4:	4aa3      	ldr	r2, [pc, #652]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80192da:	4ba2      	ldr	r3, [pc, #648]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 80192dc:	2209      	movs	r2, #9
 80192de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80192e2:	4ba0      	ldr	r3, [pc, #640]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 80192e4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80192e8:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80192ea:	68b8      	ldr	r0, [r7, #8]
 80192ec:	f002 ff9c 	bl	801c228 <SUBGRF_GetFskBandwidthRegValue>
 80192f0:	4603      	mov	r3, r0
 80192f2:	461a      	mov	r2, r3
 80192f4:	4b9b      	ldr	r3, [pc, #620]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 80192f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80192fa:	4b9a      	ldr	r3, [pc, #616]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 80192fc:	2200      	movs	r2, #0
 80192fe:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019300:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019302:	00db      	lsls	r3, r3, #3
 8019304:	b29a      	uxth	r2, r3
 8019306:	4b97      	ldr	r3, [pc, #604]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019308:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801930a:	4b96      	ldr	r3, [pc, #600]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 801930c:	2200      	movs	r2, #0
 801930e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8019310:	4b94      	ldr	r3, [pc, #592]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019312:	2210      	movs	r2, #16
 8019314:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019316:	4b93      	ldr	r3, [pc, #588]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019318:	2200      	movs	r2, #0
 801931a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801931c:	4b91      	ldr	r3, [pc, #580]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 801931e:	2200      	movs	r2, #0
 8019320:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019322:	4b91      	ldr	r3, [pc, #580]	@ (8019568 <RadioSetRxConfig+0x300>)
 8019324:	781a      	ldrb	r2, [r3, #0]
 8019326:	4b8f      	ldr	r3, [pc, #572]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019328:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801932a:	4b8e      	ldr	r3, [pc, #568]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 801932c:	2201      	movs	r2, #1
 801932e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8019330:	4b8c      	ldr	r3, [pc, #560]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019332:	2200      	movs	r2, #0
 8019334:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8019336:	2005      	movs	r0, #5
 8019338:	f7ff fec2 	bl	80190c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801933c:	488b      	ldr	r0, [pc, #556]	@ (801956c <RadioSetRxConfig+0x304>)
 801933e:	f002 fb2b 	bl	801b998 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019342:	488b      	ldr	r0, [pc, #556]	@ (8019570 <RadioSetRxConfig+0x308>)
 8019344:	f002 fbf6 	bl	801bb34 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019348:	4a8a      	ldr	r2, [pc, #552]	@ (8019574 <RadioSetRxConfig+0x30c>)
 801934a:	f107 031c 	add.w	r3, r7, #28
 801934e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019352:	e883 0003 	stmia.w	r3, {r0, r1}
 8019356:	f107 031c 	add.w	r3, r7, #28
 801935a:	4618      	mov	r0, r3
 801935c:	f001 feaf 	bl	801b0be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019360:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8019364:	f001 fefa 	bl	801b15c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8019368:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 801936c:	f000 fe24 	bl	8019fb8 <RadioRead>
 8019370:	4603      	mov	r3, r0
 8019372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8019376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801937a:	f023 0310 	bic.w	r3, r3, #16
 801937e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8019382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019386:	4619      	mov	r1, r3
 8019388:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 801938c:	f000 fe02 	bl	8019f94 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8019390:	2104      	movs	r1, #4
 8019392:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8019396:	f000 fdfd 	bl	8019f94 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801939a:	f640 009b 	movw	r0, #2203	@ 0x89b
 801939e:	f000 fe0b 	bl	8019fb8 <RadioRead>
 80193a2:	4603      	mov	r3, r0
 80193a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80193a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193ac:	f023 031c 	bic.w	r3, r3, #28
 80193b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80193b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193b8:	f043 0308 	orr.w	r3, r3, #8
 80193bc:	b2db      	uxtb	r3, r3
 80193be:	4619      	mov	r1, r3
 80193c0:	f640 009b 	movw	r0, #2203	@ 0x89b
 80193c4:	f000 fde6 	bl	8019f94 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80193c8:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80193cc:	f000 fdf4 	bl	8019fb8 <RadioRead>
 80193d0:	4603      	mov	r3, r0
 80193d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80193d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193da:	f023 0318 	bic.w	r3, r3, #24
 80193de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80193e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193e6:	f043 0318 	orr.w	r3, r3, #24
 80193ea:	b2db      	uxtb	r3, r3
 80193ec:	4619      	mov	r1, r3
 80193ee:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80193f2:	f000 fdcf 	bl	8019f94 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80193f6:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80193fa:	f000 fddd 	bl	8019fb8 <RadioRead>
 80193fe:	4603      	mov	r3, r0
 8019400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8019404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801940c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8019410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019414:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8019418:	b2db      	uxtb	r3, r3
 801941a:	4619      	mov	r1, r3
 801941c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019420:	f000 fdb8 	bl	8019f94 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019424:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8019426:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801942a:	fb02 f303 	mul.w	r3, r2, r3
 801942e:	461a      	mov	r2, r3
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	fbb2 f3f3 	udiv	r3, r2, r3
 8019436:	4a4b      	ldr	r2, [pc, #300]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019438:	6093      	str	r3, [r2, #8]
            break;
 801943a:	e115      	b.n	8019668 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801943c:	2000      	movs	r0, #0
 801943e:	f002 f807 	bl	801b450 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019442:	4b48      	ldr	r3, [pc, #288]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019444:	2200      	movs	r2, #0
 8019446:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801944a:	4a46      	ldr	r2, [pc, #280]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019450:	4b44      	ldr	r3, [pc, #272]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019452:	220b      	movs	r2, #11
 8019454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019458:	68b8      	ldr	r0, [r7, #8]
 801945a:	f002 fee5 	bl	801c228 <SUBGRF_GetFskBandwidthRegValue>
 801945e:	4603      	mov	r3, r0
 8019460:	461a      	mov	r2, r3
 8019462:	4b40      	ldr	r3, [pc, #256]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019468:	4b3e      	ldr	r3, [pc, #248]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 801946a:	2200      	movs	r2, #0
 801946c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801946e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019470:	00db      	lsls	r3, r3, #3
 8019472:	b29a      	uxth	r2, r3
 8019474:	4b3b      	ldr	r3, [pc, #236]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019476:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019478:	4b3a      	ldr	r3, [pc, #232]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 801947a:	2204      	movs	r2, #4
 801947c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801947e:	4b39      	ldr	r3, [pc, #228]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019480:	2218      	movs	r2, #24
 8019482:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019484:	4b37      	ldr	r3, [pc, #220]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019486:	2200      	movs	r2, #0
 8019488:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801948a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801948e:	f083 0301 	eor.w	r3, r3, #1
 8019492:	b2db      	uxtb	r3, r3
 8019494:	461a      	mov	r2, r3
 8019496:	4b33      	ldr	r3, [pc, #204]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019498:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801949a:	4b33      	ldr	r3, [pc, #204]	@ (8019568 <RadioSetRxConfig+0x300>)
 801949c:	781a      	ldrb	r2, [r3, #0]
 801949e:	4b31      	ldr	r3, [pc, #196]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 80194a0:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80194a2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d003      	beq.n	80194b2 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80194aa:	4b2e      	ldr	r3, [pc, #184]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 80194ac:	22f2      	movs	r2, #242	@ 0xf2
 80194ae:	75da      	strb	r2, [r3, #23]
 80194b0:	e002      	b.n	80194b8 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80194b2:	4b2c      	ldr	r3, [pc, #176]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 80194b4:	2201      	movs	r2, #1
 80194b6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80194b8:	4b2a      	ldr	r3, [pc, #168]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 80194ba:	2201      	movs	r2, #1
 80194bc:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80194be:	f000 fc68 	bl	8019d92 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80194c2:	2000      	movs	r0, #0
 80194c4:	f7ff fdfc 	bl	80190c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80194c8:	4828      	ldr	r0, [pc, #160]	@ (801956c <RadioSetRxConfig+0x304>)
 80194ca:	f002 fa65 	bl	801b998 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80194ce:	4828      	ldr	r0, [pc, #160]	@ (8019570 <RadioSetRxConfig+0x308>)
 80194d0:	f002 fb30 	bl	801bb34 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80194d4:	4a28      	ldr	r2, [pc, #160]	@ (8019578 <RadioSetRxConfig+0x310>)
 80194d6:	f107 0314 	add.w	r3, r7, #20
 80194da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194de:	e883 0003 	stmia.w	r3, {r0, r1}
 80194e2:	f107 0314 	add.w	r3, r7, #20
 80194e6:	4618      	mov	r0, r3
 80194e8:	f001 fde9 	bl	801b0be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80194ec:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80194f0:	f001 fe34 	bl	801b15c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80194f4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80194f6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80194fa:	fb02 f303 	mul.w	r3, r2, r3
 80194fe:	461a      	mov	r2, r3
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	fbb2 f3f3 	udiv	r3, r2, r3
 8019506:	4a17      	ldr	r2, [pc, #92]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019508:	6093      	str	r3, [r2, #8]
            break;
 801950a:	e0ad      	b.n	8019668 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801950c:	2000      	movs	r0, #0
 801950e:	f001 ff9f 	bl	801b450 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019512:	4b14      	ldr	r3, [pc, #80]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019514:	2201      	movs	r2, #1
 8019516:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	b2da      	uxtb	r2, r3
 801951e:	4b11      	ldr	r3, [pc, #68]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019520:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8019524:	4a15      	ldr	r2, [pc, #84]	@ (801957c <RadioSetRxConfig+0x314>)
 8019526:	68bb      	ldr	r3, [r7, #8]
 8019528:	4413      	add	r3, r2
 801952a:	781a      	ldrb	r2, [r3, #0]
 801952c:	4b0d      	ldr	r3, [pc, #52]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 801952e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8019532:	4a0c      	ldr	r2, [pc, #48]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 8019534:	7bbb      	ldrb	r3, [r7, #14]
 8019536:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801953a:	68bb      	ldr	r3, [r7, #8]
 801953c:	2b00      	cmp	r3, #0
 801953e:	d105      	bne.n	801954c <RadioSetRxConfig+0x2e4>
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	2b0b      	cmp	r3, #11
 8019544:	d008      	beq.n	8019558 <RadioSetRxConfig+0x2f0>
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	2b0c      	cmp	r3, #12
 801954a:	d005      	beq.n	8019558 <RadioSetRxConfig+0x2f0>
 801954c:	68bb      	ldr	r3, [r7, #8]
 801954e:	2b01      	cmp	r3, #1
 8019550:	d116      	bne.n	8019580 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	2b0c      	cmp	r3, #12
 8019556:	d113      	bne.n	8019580 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019558:	4b02      	ldr	r3, [pc, #8]	@ (8019564 <RadioSetRxConfig+0x2fc>)
 801955a:	2201      	movs	r2, #1
 801955c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8019560:	e012      	b.n	8019588 <RadioSetRxConfig+0x320>
 8019562:	bf00      	nop
 8019564:	20001e30 	.word	0x20001e30
 8019568:	20000134 	.word	0x20000134
 801956c:	20001e68 	.word	0x20001e68
 8019570:	20001e3e 	.word	0x20001e3e
 8019574:	080210a8 	.word	0x080210a8
 8019578:	080210b0 	.word	0x080210b0
 801957c:	080216ac 	.word	0x080216ac
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019580:	4b3b      	ldr	r3, [pc, #236]	@ (8019670 <RadioSetRxConfig+0x408>)
 8019582:	2200      	movs	r2, #0
 8019584:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019588:	4b39      	ldr	r3, [pc, #228]	@ (8019670 <RadioSetRxConfig+0x408>)
 801958a:	2201      	movs	r2, #1
 801958c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801958e:	4b38      	ldr	r3, [pc, #224]	@ (8019670 <RadioSetRxConfig+0x408>)
 8019590:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8019594:	2b05      	cmp	r3, #5
 8019596:	d004      	beq.n	80195a2 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019598:	4b35      	ldr	r3, [pc, #212]	@ (8019670 <RadioSetRxConfig+0x408>)
 801959a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801959e:	2b06      	cmp	r3, #6
 80195a0:	d10a      	bne.n	80195b8 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80195a2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80195a4:	2b0b      	cmp	r3, #11
 80195a6:	d803      	bhi.n	80195b0 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80195a8:	4b31      	ldr	r3, [pc, #196]	@ (8019670 <RadioSetRxConfig+0x408>)
 80195aa:	220c      	movs	r2, #12
 80195ac:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80195ae:	e006      	b.n	80195be <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80195b0:	4a2f      	ldr	r2, [pc, #188]	@ (8019670 <RadioSetRxConfig+0x408>)
 80195b2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80195b4:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80195b6:	e002      	b.n	80195be <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80195b8:	4a2d      	ldr	r2, [pc, #180]	@ (8019670 <RadioSetRxConfig+0x408>)
 80195ba:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80195bc:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80195be:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80195c2:	4b2b      	ldr	r3, [pc, #172]	@ (8019670 <RadioSetRxConfig+0x408>)
 80195c4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80195c6:	4b2b      	ldr	r3, [pc, #172]	@ (8019674 <RadioSetRxConfig+0x40c>)
 80195c8:	781a      	ldrb	r2, [r3, #0]
 80195ca:	4b29      	ldr	r3, [pc, #164]	@ (8019670 <RadioSetRxConfig+0x408>)
 80195cc:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80195ce:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80195d2:	4b27      	ldr	r3, [pc, #156]	@ (8019670 <RadioSetRxConfig+0x408>)
 80195d4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80195d8:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80195dc:	4b24      	ldr	r3, [pc, #144]	@ (8019670 <RadioSetRxConfig+0x408>)
 80195de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80195e2:	f000 fbd6 	bl	8019d92 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80195e6:	2001      	movs	r0, #1
 80195e8:	f7ff fd6a 	bl	80190c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80195ec:	4822      	ldr	r0, [pc, #136]	@ (8019678 <RadioSetRxConfig+0x410>)
 80195ee:	f002 f9d3 	bl	801b998 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195f2:	4822      	ldr	r0, [pc, #136]	@ (801967c <RadioSetRxConfig+0x414>)
 80195f4:	f002 fa9e 	bl	801bb34 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80195f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80195fa:	b2db      	uxtb	r3, r3
 80195fc:	4618      	mov	r0, r3
 80195fe:	f001 ff36 	bl	801b46e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8019602:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8019606:	f002 fbfd 	bl	801be04 <SUBGRF_ReadRegister>
 801960a:	4603      	mov	r3, r0
 801960c:	f003 0301 	and.w	r3, r3, #1
 8019610:	b2db      	uxtb	r3, r3
 8019612:	4619      	mov	r1, r3
 8019614:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8019618:	f002 fbd2 	bl	801bdc0 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801961c:	4b14      	ldr	r3, [pc, #80]	@ (8019670 <RadioSetRxConfig+0x408>)
 801961e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8019622:	2b01      	cmp	r3, #1
 8019624:	d10d      	bne.n	8019642 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019626:	f240 7036 	movw	r0, #1846	@ 0x736
 801962a:	f002 fbeb 	bl	801be04 <SUBGRF_ReadRegister>
 801962e:	4603      	mov	r3, r0
 8019630:	f023 0304 	bic.w	r3, r3, #4
 8019634:	b2db      	uxtb	r3, r3
 8019636:	4619      	mov	r1, r3
 8019638:	f240 7036 	movw	r0, #1846	@ 0x736
 801963c:	f002 fbc0 	bl	801bdc0 <SUBGRF_WriteRegister>
 8019640:	e00c      	b.n	801965c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019642:	f240 7036 	movw	r0, #1846	@ 0x736
 8019646:	f002 fbdd 	bl	801be04 <SUBGRF_ReadRegister>
 801964a:	4603      	mov	r3, r0
 801964c:	f043 0304 	orr.w	r3, r3, #4
 8019650:	b2db      	uxtb	r3, r3
 8019652:	4619      	mov	r1, r3
 8019654:	f240 7036 	movw	r0, #1846	@ 0x736
 8019658:	f002 fbb2 	bl	801bdc0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801965c:	4b04      	ldr	r3, [pc, #16]	@ (8019670 <RadioSetRxConfig+0x408>)
 801965e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019662:	609a      	str	r2, [r3, #8]
            break;
 8019664:	e000      	b.n	8019668 <RadioSetRxConfig+0x400>
            break;
 8019666:	bf00      	nop
    }
}
 8019668:	bf00      	nop
 801966a:	3728      	adds	r7, #40	@ 0x28
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}
 8019670:	20001e30 	.word	0x20001e30
 8019674:	20000134 	.word	0x20000134
 8019678:	20001e68 	.word	0x20001e68
 801967c:	20001e3e 	.word	0x20001e3e

08019680 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019680:	b580      	push	{r7, lr}
 8019682:	b086      	sub	sp, #24
 8019684:	af00      	add	r7, sp, #0
 8019686:	60ba      	str	r2, [r7, #8]
 8019688:	607b      	str	r3, [r7, #4]
 801968a:	4603      	mov	r3, r0
 801968c:	73fb      	strb	r3, [r7, #15]
 801968e:	460b      	mov	r3, r1
 8019690:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8019692:	f002 fe96 	bl	801c3c2 <RFW_DeInit>
    switch( modem )
 8019696:	7bfb      	ldrb	r3, [r7, #15]
 8019698:	2b04      	cmp	r3, #4
 801969a:	f000 80c7 	beq.w	801982c <RadioSetTxConfig+0x1ac>
 801969e:	2b04      	cmp	r3, #4
 80196a0:	f300 80d6 	bgt.w	8019850 <RadioSetTxConfig+0x1d0>
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d002      	beq.n	80196ae <RadioSetTxConfig+0x2e>
 80196a8:	2b01      	cmp	r3, #1
 80196aa:	d059      	beq.n	8019760 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80196ac:	e0d0      	b.n	8019850 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80196ae:	4b77      	ldr	r3, [pc, #476]	@ (801988c <RadioSetTxConfig+0x20c>)
 80196b0:	2200      	movs	r2, #0
 80196b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80196b6:	4a75      	ldr	r2, [pc, #468]	@ (801988c <RadioSetTxConfig+0x20c>)
 80196b8:	6a3b      	ldr	r3, [r7, #32]
 80196ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80196bc:	4b73      	ldr	r3, [pc, #460]	@ (801988c <RadioSetTxConfig+0x20c>)
 80196be:	220b      	movs	r2, #11
 80196c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80196c4:	6878      	ldr	r0, [r7, #4]
 80196c6:	f002 fdaf 	bl	801c228 <SUBGRF_GetFskBandwidthRegValue>
 80196ca:	4603      	mov	r3, r0
 80196cc:	461a      	mov	r2, r3
 80196ce:	4b6f      	ldr	r3, [pc, #444]	@ (801988c <RadioSetTxConfig+0x20c>)
 80196d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80196d4:	4a6d      	ldr	r2, [pc, #436]	@ (801988c <RadioSetTxConfig+0x20c>)
 80196d6:	68bb      	ldr	r3, [r7, #8]
 80196d8:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80196da:	4b6c      	ldr	r3, [pc, #432]	@ (801988c <RadioSetTxConfig+0x20c>)
 80196dc:	2200      	movs	r2, #0
 80196de:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80196e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80196e2:	00db      	lsls	r3, r3, #3
 80196e4:	b29a      	uxth	r2, r3
 80196e6:	4b69      	ldr	r3, [pc, #420]	@ (801988c <RadioSetTxConfig+0x20c>)
 80196e8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80196ea:	4b68      	ldr	r3, [pc, #416]	@ (801988c <RadioSetTxConfig+0x20c>)
 80196ec:	2204      	movs	r2, #4
 80196ee:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80196f0:	4b66      	ldr	r3, [pc, #408]	@ (801988c <RadioSetTxConfig+0x20c>)
 80196f2:	2218      	movs	r2, #24
 80196f4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80196f6:	4b65      	ldr	r3, [pc, #404]	@ (801988c <RadioSetTxConfig+0x20c>)
 80196f8:	2200      	movs	r2, #0
 80196fa:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80196fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019700:	f083 0301 	eor.w	r3, r3, #1
 8019704:	b2db      	uxtb	r3, r3
 8019706:	461a      	mov	r2, r3
 8019708:	4b60      	ldr	r3, [pc, #384]	@ (801988c <RadioSetTxConfig+0x20c>)
 801970a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801970c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8019710:	2b00      	cmp	r3, #0
 8019712:	d003      	beq.n	801971c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019714:	4b5d      	ldr	r3, [pc, #372]	@ (801988c <RadioSetTxConfig+0x20c>)
 8019716:	22f2      	movs	r2, #242	@ 0xf2
 8019718:	75da      	strb	r2, [r3, #23]
 801971a:	e002      	b.n	8019722 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801971c:	4b5b      	ldr	r3, [pc, #364]	@ (801988c <RadioSetTxConfig+0x20c>)
 801971e:	2201      	movs	r2, #1
 8019720:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019722:	4b5a      	ldr	r3, [pc, #360]	@ (801988c <RadioSetTxConfig+0x20c>)
 8019724:	2201      	movs	r2, #1
 8019726:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019728:	f000 fb33 	bl	8019d92 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801972c:	2000      	movs	r0, #0
 801972e:	f7ff fcc7 	bl	80190c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019732:	4857      	ldr	r0, [pc, #348]	@ (8019890 <RadioSetTxConfig+0x210>)
 8019734:	f002 f930 	bl	801b998 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019738:	4856      	ldr	r0, [pc, #344]	@ (8019894 <RadioSetTxConfig+0x214>)
 801973a:	f002 f9fb 	bl	801bb34 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801973e:	4a56      	ldr	r2, [pc, #344]	@ (8019898 <RadioSetTxConfig+0x218>)
 8019740:	f107 0310 	add.w	r3, r7, #16
 8019744:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019748:	e883 0003 	stmia.w	r3, {r0, r1}
 801974c:	f107 0310 	add.w	r3, r7, #16
 8019750:	4618      	mov	r0, r3
 8019752:	f001 fcb4 	bl	801b0be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019756:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801975a:	f001 fcff 	bl	801b15c <SUBGRF_SetWhiteningSeed>
            break;
 801975e:	e078      	b.n	8019852 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019760:	4b4a      	ldr	r3, [pc, #296]	@ (801988c <RadioSetTxConfig+0x20c>)
 8019762:	2201      	movs	r2, #1
 8019764:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8019768:	6a3b      	ldr	r3, [r7, #32]
 801976a:	b2da      	uxtb	r2, r3
 801976c:	4b47      	ldr	r3, [pc, #284]	@ (801988c <RadioSetTxConfig+0x20c>)
 801976e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8019772:	4a4a      	ldr	r2, [pc, #296]	@ (801989c <RadioSetTxConfig+0x21c>)
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	4413      	add	r3, r2
 8019778:	781a      	ldrb	r2, [r3, #0]
 801977a:	4b44      	ldr	r3, [pc, #272]	@ (801988c <RadioSetTxConfig+0x20c>)
 801977c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8019780:	4a42      	ldr	r2, [pc, #264]	@ (801988c <RadioSetTxConfig+0x20c>)
 8019782:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019786:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d105      	bne.n	801979c <RadioSetTxConfig+0x11c>
 8019790:	6a3b      	ldr	r3, [r7, #32]
 8019792:	2b0b      	cmp	r3, #11
 8019794:	d008      	beq.n	80197a8 <RadioSetTxConfig+0x128>
 8019796:	6a3b      	ldr	r3, [r7, #32]
 8019798:	2b0c      	cmp	r3, #12
 801979a:	d005      	beq.n	80197a8 <RadioSetTxConfig+0x128>
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	2b01      	cmp	r3, #1
 80197a0:	d107      	bne.n	80197b2 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80197a2:	6a3b      	ldr	r3, [r7, #32]
 80197a4:	2b0c      	cmp	r3, #12
 80197a6:	d104      	bne.n	80197b2 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80197a8:	4b38      	ldr	r3, [pc, #224]	@ (801988c <RadioSetTxConfig+0x20c>)
 80197aa:	2201      	movs	r2, #1
 80197ac:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80197b0:	e003      	b.n	80197ba <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80197b2:	4b36      	ldr	r3, [pc, #216]	@ (801988c <RadioSetTxConfig+0x20c>)
 80197b4:	2200      	movs	r2, #0
 80197b6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80197ba:	4b34      	ldr	r3, [pc, #208]	@ (801988c <RadioSetTxConfig+0x20c>)
 80197bc:	2201      	movs	r2, #1
 80197be:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80197c0:	4b32      	ldr	r3, [pc, #200]	@ (801988c <RadioSetTxConfig+0x20c>)
 80197c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80197c6:	2b05      	cmp	r3, #5
 80197c8:	d004      	beq.n	80197d4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80197ca:	4b30      	ldr	r3, [pc, #192]	@ (801988c <RadioSetTxConfig+0x20c>)
 80197cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80197d0:	2b06      	cmp	r3, #6
 80197d2:	d10a      	bne.n	80197ea <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80197d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80197d6:	2b0b      	cmp	r3, #11
 80197d8:	d803      	bhi.n	80197e2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80197da:	4b2c      	ldr	r3, [pc, #176]	@ (801988c <RadioSetTxConfig+0x20c>)
 80197dc:	220c      	movs	r2, #12
 80197de:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80197e0:	e006      	b.n	80197f0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80197e2:	4a2a      	ldr	r2, [pc, #168]	@ (801988c <RadioSetTxConfig+0x20c>)
 80197e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80197e6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80197e8:	e002      	b.n	80197f0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80197ea:	4a28      	ldr	r2, [pc, #160]	@ (801988c <RadioSetTxConfig+0x20c>)
 80197ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80197ee:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80197f0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80197f4:	4b25      	ldr	r3, [pc, #148]	@ (801988c <RadioSetTxConfig+0x20c>)
 80197f6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80197f8:	4b29      	ldr	r3, [pc, #164]	@ (80198a0 <RadioSetTxConfig+0x220>)
 80197fa:	781a      	ldrb	r2, [r3, #0]
 80197fc:	4b23      	ldr	r3, [pc, #140]	@ (801988c <RadioSetTxConfig+0x20c>)
 80197fe:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019800:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8019804:	4b21      	ldr	r3, [pc, #132]	@ (801988c <RadioSetTxConfig+0x20c>)
 8019806:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801980a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801980e:	4b1f      	ldr	r3, [pc, #124]	@ (801988c <RadioSetTxConfig+0x20c>)
 8019810:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8019814:	f000 fabd 	bl	8019d92 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019818:	2001      	movs	r0, #1
 801981a:	f7ff fc51 	bl	80190c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801981e:	481c      	ldr	r0, [pc, #112]	@ (8019890 <RadioSetTxConfig+0x210>)
 8019820:	f002 f8ba 	bl	801b998 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019824:	481b      	ldr	r0, [pc, #108]	@ (8019894 <RadioSetTxConfig+0x214>)
 8019826:	f002 f985 	bl	801bb34 <SUBGRF_SetPacketParams>
            break;
 801982a:	e012      	b.n	8019852 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801982c:	2004      	movs	r0, #4
 801982e:	f7ff fc47 	bl	80190c0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019832:	4b16      	ldr	r3, [pc, #88]	@ (801988c <RadioSetTxConfig+0x20c>)
 8019834:	2202      	movs	r2, #2
 8019836:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801983a:	4a14      	ldr	r2, [pc, #80]	@ (801988c <RadioSetTxConfig+0x20c>)
 801983c:	6a3b      	ldr	r3, [r7, #32]
 801983e:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019840:	4b12      	ldr	r3, [pc, #72]	@ (801988c <RadioSetTxConfig+0x20c>)
 8019842:	2216      	movs	r2, #22
 8019844:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019848:	4811      	ldr	r0, [pc, #68]	@ (8019890 <RadioSetTxConfig+0x210>)
 801984a:	f002 f8a5 	bl	801b998 <SUBGRF_SetModulationParams>
            break;
 801984e:	e000      	b.n	8019852 <RadioSetTxConfig+0x1d2>
            break;
 8019850:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019852:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019856:	4618      	mov	r0, r3
 8019858:	f002 fbe8 	bl	801c02c <SUBGRF_SetRfTxPower>
 801985c:	4603      	mov	r3, r0
 801985e:	461a      	mov	r2, r3
 8019860:	4b0a      	ldr	r3, [pc, #40]	@ (801988c <RadioSetTxConfig+0x20c>)
 8019862:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019866:	210e      	movs	r1, #14
 8019868:	f640 101f 	movw	r0, #2335	@ 0x91f
 801986c:	f002 faa8 	bl	801bdc0 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019870:	4b06      	ldr	r3, [pc, #24]	@ (801988c <RadioSetTxConfig+0x20c>)
 8019872:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019876:	4618      	mov	r0, r3
 8019878:	f002 fdb7 	bl	801c3ea <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801987c:	4a03      	ldr	r2, [pc, #12]	@ (801988c <RadioSetTxConfig+0x20c>)
 801987e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019880:	6053      	str	r3, [r2, #4]
}
 8019882:	bf00      	nop
 8019884:	3718      	adds	r7, #24
 8019886:	46bd      	mov	sp, r7
 8019888:	bd80      	pop	{r7, pc}
 801988a:	bf00      	nop
 801988c:	20001e30 	.word	0x20001e30
 8019890:	20001e68 	.word	0x20001e68
 8019894:	20001e3e 	.word	0x20001e3e
 8019898:	080210b0 	.word	0x080210b0
 801989c:	080216ac 	.word	0x080216ac
 80198a0:	20000134 	.word	0x20000134

080198a4 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80198a4:	b480      	push	{r7}
 80198a6:	b083      	sub	sp, #12
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
    return true;
 80198ac:	2301      	movs	r3, #1
}
 80198ae:	4618      	mov	r0, r3
 80198b0:	370c      	adds	r7, #12
 80198b2:	46bd      	mov	sp, r7
 80198b4:	bc80      	pop	{r7}
 80198b6:	4770      	bx	lr

080198b8 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80198b8:	b480      	push	{r7}
 80198ba:	b085      	sub	sp, #20
 80198bc:	af00      	add	r7, sp, #0
 80198be:	4603      	mov	r3, r0
 80198c0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80198c2:	2300      	movs	r3, #0
 80198c4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80198c6:	79fb      	ldrb	r3, [r7, #7]
 80198c8:	2b0a      	cmp	r3, #10
 80198ca:	d83e      	bhi.n	801994a <RadioGetLoRaBandwidthInHz+0x92>
 80198cc:	a201      	add	r2, pc, #4	@ (adr r2, 80198d4 <RadioGetLoRaBandwidthInHz+0x1c>)
 80198ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198d2:	bf00      	nop
 80198d4:	08019901 	.word	0x08019901
 80198d8:	08019911 	.word	0x08019911
 80198dc:	08019921 	.word	0x08019921
 80198e0:	08019931 	.word	0x08019931
 80198e4:	08019939 	.word	0x08019939
 80198e8:	0801993f 	.word	0x0801993f
 80198ec:	08019945 	.word	0x08019945
 80198f0:	0801994b 	.word	0x0801994b
 80198f4:	08019909 	.word	0x08019909
 80198f8:	08019919 	.word	0x08019919
 80198fc:	08019929 	.word	0x08019929
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019900:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8019904:	60fb      	str	r3, [r7, #12]
        break;
 8019906:	e020      	b.n	801994a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019908:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 801990c:	60fb      	str	r3, [r7, #12]
        break;
 801990e:	e01c      	b.n	801994a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019910:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8019914:	60fb      	str	r3, [r7, #12]
        break;
 8019916:	e018      	b.n	801994a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019918:	f245 1361 	movw	r3, #20833	@ 0x5161
 801991c:	60fb      	str	r3, [r7, #12]
        break;
 801991e:	e014      	b.n	801994a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019920:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8019924:	60fb      	str	r3, [r7, #12]
        break;
 8019926:	e010      	b.n	801994a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019928:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 801992c:	60fb      	str	r3, [r7, #12]
        break;
 801992e:	e00c      	b.n	801994a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019930:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8019934:	60fb      	str	r3, [r7, #12]
        break;
 8019936:	e008      	b.n	801994a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019938:	4b07      	ldr	r3, [pc, #28]	@ (8019958 <RadioGetLoRaBandwidthInHz+0xa0>)
 801993a:	60fb      	str	r3, [r7, #12]
        break;
 801993c:	e005      	b.n	801994a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801993e:	4b07      	ldr	r3, [pc, #28]	@ (801995c <RadioGetLoRaBandwidthInHz+0xa4>)
 8019940:	60fb      	str	r3, [r7, #12]
        break;
 8019942:	e002      	b.n	801994a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8019944:	4b06      	ldr	r3, [pc, #24]	@ (8019960 <RadioGetLoRaBandwidthInHz+0xa8>)
 8019946:	60fb      	str	r3, [r7, #12]
        break;
 8019948:	bf00      	nop
    }

    return bandwidthInHz;
 801994a:	68fb      	ldr	r3, [r7, #12]
}
 801994c:	4618      	mov	r0, r3
 801994e:	3714      	adds	r7, #20
 8019950:	46bd      	mov	sp, r7
 8019952:	bc80      	pop	{r7}
 8019954:	4770      	bx	lr
 8019956:	bf00      	nop
 8019958:	0001e848 	.word	0x0001e848
 801995c:	0003d090 	.word	0x0003d090
 8019960:	0007a120 	.word	0x0007a120

08019964 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019964:	b480      	push	{r7}
 8019966:	b083      	sub	sp, #12
 8019968:	af00      	add	r7, sp, #0
 801996a:	6078      	str	r0, [r7, #4]
 801996c:	4608      	mov	r0, r1
 801996e:	4611      	mov	r1, r2
 8019970:	461a      	mov	r2, r3
 8019972:	4603      	mov	r3, r0
 8019974:	70fb      	strb	r3, [r7, #3]
 8019976:	460b      	mov	r3, r1
 8019978:	803b      	strh	r3, [r7, #0]
 801997a:	4613      	mov	r3, r2
 801997c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801997e:	883b      	ldrh	r3, [r7, #0]
 8019980:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019982:	78ba      	ldrb	r2, [r7, #2]
 8019984:	f082 0201 	eor.w	r2, r2, #1
 8019988:	b2d2      	uxtb	r2, r2
 801998a:	2a00      	cmp	r2, #0
 801998c:	d001      	beq.n	8019992 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801998e:	2208      	movs	r2, #8
 8019990:	e000      	b.n	8019994 <RadioGetGfskTimeOnAirNumerator+0x30>
 8019992:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8019994:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019996:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801999a:	7c3b      	ldrb	r3, [r7, #16]
 801999c:	7d39      	ldrb	r1, [r7, #20]
 801999e:	2900      	cmp	r1, #0
 80199a0:	d001      	beq.n	80199a6 <RadioGetGfskTimeOnAirNumerator+0x42>
 80199a2:	2102      	movs	r1, #2
 80199a4:	e000      	b.n	80199a8 <RadioGetGfskTimeOnAirNumerator+0x44>
 80199a6:	2100      	movs	r1, #0
 80199a8:	440b      	add	r3, r1
 80199aa:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80199ac:	4413      	add	r3, r2
}
 80199ae:	4618      	mov	r0, r3
 80199b0:	370c      	adds	r7, #12
 80199b2:	46bd      	mov	sp, r7
 80199b4:	bc80      	pop	{r7}
 80199b6:	4770      	bx	lr

080199b8 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80199b8:	b480      	push	{r7}
 80199ba:	b08b      	sub	sp, #44	@ 0x2c
 80199bc:	af00      	add	r7, sp, #0
 80199be:	60f8      	str	r0, [r7, #12]
 80199c0:	60b9      	str	r1, [r7, #8]
 80199c2:	4611      	mov	r1, r2
 80199c4:	461a      	mov	r2, r3
 80199c6:	460b      	mov	r3, r1
 80199c8:	71fb      	strb	r3, [r7, #7]
 80199ca:	4613      	mov	r3, r2
 80199cc:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80199ce:	79fb      	ldrb	r3, [r7, #7]
 80199d0:	3304      	adds	r3, #4
 80199d2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80199d4:	2300      	movs	r3, #0
 80199d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80199da:	68bb      	ldr	r3, [r7, #8]
 80199dc:	2b05      	cmp	r3, #5
 80199de:	d002      	beq.n	80199e6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80199e0:	68bb      	ldr	r3, [r7, #8]
 80199e2:	2b06      	cmp	r3, #6
 80199e4:	d104      	bne.n	80199f0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80199e6:	88bb      	ldrh	r3, [r7, #4]
 80199e8:	2b0b      	cmp	r3, #11
 80199ea:	d801      	bhi.n	80199f0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80199ec:	230c      	movs	r3, #12
 80199ee:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d105      	bne.n	8019a02 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80199f6:	68bb      	ldr	r3, [r7, #8]
 80199f8:	2b0b      	cmp	r3, #11
 80199fa:	d008      	beq.n	8019a0e <RadioGetLoRaTimeOnAirNumerator+0x56>
 80199fc:	68bb      	ldr	r3, [r7, #8]
 80199fe:	2b0c      	cmp	r3, #12
 8019a00:	d005      	beq.n	8019a0e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	2b01      	cmp	r3, #1
 8019a06:	d105      	bne.n	8019a14 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019a08:	68bb      	ldr	r3, [r7, #8]
 8019a0a:	2b0c      	cmp	r3, #12
 8019a0c:	d102      	bne.n	8019a14 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019a0e:	2301      	movs	r3, #1
 8019a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019a14:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8019a18:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8019a1a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8019a1e:	2a00      	cmp	r2, #0
 8019a20:	d001      	beq.n	8019a26 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8019a22:	2210      	movs	r2, #16
 8019a24:	e000      	b.n	8019a28 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8019a26:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019a28:	4413      	add	r3, r2
 8019a2a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019a30:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8019a32:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8019a36:	2a00      	cmp	r2, #0
 8019a38:	d001      	beq.n	8019a3e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8019a3a:	2200      	movs	r2, #0
 8019a3c:	e000      	b.n	8019a40 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8019a3e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019a40:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019a42:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8019a44:	68bb      	ldr	r3, [r7, #8]
 8019a46:	2b06      	cmp	r3, #6
 8019a48:	d803      	bhi.n	8019a52 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8019a4a:	68bb      	ldr	r3, [r7, #8]
 8019a4c:	009b      	lsls	r3, r3, #2
 8019a4e:	623b      	str	r3, [r7, #32]
 8019a50:	e00e      	b.n	8019a70 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8019a52:	69fb      	ldr	r3, [r7, #28]
 8019a54:	3308      	adds	r3, #8
 8019a56:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8019a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d004      	beq.n	8019a6a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8019a60:	68bb      	ldr	r3, [r7, #8]
 8019a62:	3b02      	subs	r3, #2
 8019a64:	009b      	lsls	r3, r3, #2
 8019a66:	623b      	str	r3, [r7, #32]
 8019a68:	e002      	b.n	8019a70 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8019a6a:	68bb      	ldr	r3, [r7, #8]
 8019a6c:	009b      	lsls	r3, r3, #2
 8019a6e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8019a70:	69fb      	ldr	r3, [r7, #28]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	da01      	bge.n	8019a7a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8019a76:	2300      	movs	r3, #0
 8019a78:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8019a7a:	69fa      	ldr	r2, [r7, #28]
 8019a7c:	6a3b      	ldr	r3, [r7, #32]
 8019a7e:	4413      	add	r3, r2
 8019a80:	1e5a      	subs	r2, r3, #1
 8019a82:	6a3b      	ldr	r3, [r7, #32]
 8019a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a88:	697a      	ldr	r2, [r7, #20]
 8019a8a:	fb03 f202 	mul.w	r2, r3, r2
 8019a8e:	88bb      	ldrh	r3, [r7, #4]
 8019a90:	4413      	add	r3, r2
    int32_t intermediate =
 8019a92:	330c      	adds	r3, #12
 8019a94:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8019a96:	68bb      	ldr	r3, [r7, #8]
 8019a98:	2b06      	cmp	r3, #6
 8019a9a:	d802      	bhi.n	8019aa2 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019a9c:	69bb      	ldr	r3, [r7, #24]
 8019a9e:	3302      	adds	r3, #2
 8019aa0:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019aa2:	69bb      	ldr	r3, [r7, #24]
 8019aa4:	009b      	lsls	r3, r3, #2
 8019aa6:	1c5a      	adds	r2, r3, #1
 8019aa8:	68bb      	ldr	r3, [r7, #8]
 8019aaa:	3b02      	subs	r3, #2
 8019aac:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	372c      	adds	r7, #44	@ 0x2c
 8019ab4:	46bd      	mov	sp, r7
 8019ab6:	bc80      	pop	{r7}
 8019ab8:	4770      	bx	lr
	...

08019abc <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b08a      	sub	sp, #40	@ 0x28
 8019ac0:	af04      	add	r7, sp, #16
 8019ac2:	60b9      	str	r1, [r7, #8]
 8019ac4:	607a      	str	r2, [r7, #4]
 8019ac6:	461a      	mov	r2, r3
 8019ac8:	4603      	mov	r3, r0
 8019aca:	73fb      	strb	r3, [r7, #15]
 8019acc:	4613      	mov	r3, r2
 8019ace:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019ad4:	2301      	movs	r3, #1
 8019ad6:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019ad8:	7bfb      	ldrb	r3, [r7, #15]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d002      	beq.n	8019ae4 <RadioTimeOnAir+0x28>
 8019ade:	2b01      	cmp	r3, #1
 8019ae0:	d017      	beq.n	8019b12 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019ae2:	e035      	b.n	8019b50 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019ae4:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8019ae8:	8c3a      	ldrh	r2, [r7, #32]
 8019aea:	7bb9      	ldrb	r1, [r7, #14]
 8019aec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019af0:	9301      	str	r3, [sp, #4]
 8019af2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019af6:	9300      	str	r3, [sp, #0]
 8019af8:	4603      	mov	r3, r0
 8019afa:	6878      	ldr	r0, [r7, #4]
 8019afc:	f7ff ff32 	bl	8019964 <RadioGetGfskTimeOnAirNumerator>
 8019b00:	4603      	mov	r3, r0
 8019b02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019b06:	fb02 f303 	mul.w	r3, r2, r3
 8019b0a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	613b      	str	r3, [r7, #16]
        break;
 8019b10:	e01e      	b.n	8019b50 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019b12:	8c39      	ldrh	r1, [r7, #32]
 8019b14:	7bba      	ldrb	r2, [r7, #14]
 8019b16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019b1a:	9302      	str	r3, [sp, #8]
 8019b1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019b20:	9301      	str	r3, [sp, #4]
 8019b22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019b26:	9300      	str	r3, [sp, #0]
 8019b28:	460b      	mov	r3, r1
 8019b2a:	6879      	ldr	r1, [r7, #4]
 8019b2c:	68b8      	ldr	r0, [r7, #8]
 8019b2e:	f7ff ff43 	bl	80199b8 <RadioGetLoRaTimeOnAirNumerator>
 8019b32:	4603      	mov	r3, r0
 8019b34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019b38:	fb02 f303 	mul.w	r3, r2, r3
 8019b3c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8019b68 <RadioTimeOnAir+0xac>)
 8019b40:	68bb      	ldr	r3, [r7, #8]
 8019b42:	4413      	add	r3, r2
 8019b44:	781b      	ldrb	r3, [r3, #0]
 8019b46:	4618      	mov	r0, r3
 8019b48:	f7ff feb6 	bl	80198b8 <RadioGetLoRaBandwidthInHz>
 8019b4c:	6138      	str	r0, [r7, #16]
        break;
 8019b4e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8019b50:	697a      	ldr	r2, [r7, #20]
 8019b52:	693b      	ldr	r3, [r7, #16]
 8019b54:	4413      	add	r3, r2
 8019b56:	1e5a      	subs	r2, r3, #1
 8019b58:	693b      	ldr	r3, [r7, #16]
 8019b5a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019b5e:	4618      	mov	r0, r3
 8019b60:	3718      	adds	r7, #24
 8019b62:	46bd      	mov	sp, r7
 8019b64:	bd80      	pop	{r7, pc}
 8019b66:	bf00      	nop
 8019b68:	080216ac 	.word	0x080216ac

08019b6c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8019b6c:	b580      	push	{r7, lr}
 8019b6e:	b084      	sub	sp, #16
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	6078      	str	r0, [r7, #4]
 8019b74:	460b      	mov	r3, r1
 8019b76:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8019b78:	2300      	movs	r3, #0
 8019b7a:	2200      	movs	r2, #0
 8019b7c:	f240 2101 	movw	r1, #513	@ 0x201
 8019b80:	f240 2001 	movw	r0, #513	@ 0x201
 8019b84:	f001 fd72 	bl	801b66c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019b88:	4b73      	ldr	r3, [pc, #460]	@ (8019d58 <RadioSend+0x1ec>)
 8019b8a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019b8e:	2101      	movs	r1, #1
 8019b90:	4618      	mov	r0, r3
 8019b92:	f002 fa23 	bl	801bfdc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8019b96:	4b70      	ldr	r3, [pc, #448]	@ (8019d58 <RadioSend+0x1ec>)
 8019b98:	781b      	ldrb	r3, [r3, #0]
 8019b9a:	2b01      	cmp	r3, #1
 8019b9c:	d112      	bne.n	8019bc4 <RadioSend+0x58>
 8019b9e:	4b6e      	ldr	r3, [pc, #440]	@ (8019d58 <RadioSend+0x1ec>)
 8019ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019ba4:	2b06      	cmp	r3, #6
 8019ba6:	d10d      	bne.n	8019bc4 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019ba8:	f640 0089 	movw	r0, #2185	@ 0x889
 8019bac:	f002 f92a 	bl	801be04 <SUBGRF_ReadRegister>
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	f023 0304 	bic.w	r3, r3, #4
 8019bb6:	b2db      	uxtb	r3, r3
 8019bb8:	4619      	mov	r1, r3
 8019bba:	f640 0089 	movw	r0, #2185	@ 0x889
 8019bbe:	f002 f8ff 	bl	801bdc0 <SUBGRF_WriteRegister>
 8019bc2:	e00c      	b.n	8019bde <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019bc4:	f640 0089 	movw	r0, #2185	@ 0x889
 8019bc8:	f002 f91c 	bl	801be04 <SUBGRF_ReadRegister>
 8019bcc:	4603      	mov	r3, r0
 8019bce:	f043 0304 	orr.w	r3, r3, #4
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	4619      	mov	r1, r3
 8019bd6:	f640 0089 	movw	r0, #2185	@ 0x889
 8019bda:	f002 f8f1 	bl	801bdc0 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019bde:	4b5e      	ldr	r3, [pc, #376]	@ (8019d58 <RadioSend+0x1ec>)
 8019be0:	781b      	ldrb	r3, [r3, #0]
 8019be2:	2b04      	cmp	r3, #4
 8019be4:	f200 80a8 	bhi.w	8019d38 <RadioSend+0x1cc>
 8019be8:	a201      	add	r2, pc, #4	@ (adr r2, 8019bf0 <RadioSend+0x84>)
 8019bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bee:	bf00      	nop
 8019bf0:	08019c1f 	.word	0x08019c1f
 8019bf4:	08019c05 	.word	0x08019c05
 8019bf8:	08019c1f 	.word	0x08019c1f
 8019bfc:	08019c81 	.word	0x08019c81
 8019c00:	08019ca1 	.word	0x08019ca1
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019c04:	4a54      	ldr	r2, [pc, #336]	@ (8019d58 <RadioSend+0x1ec>)
 8019c06:	78fb      	ldrb	r3, [r7, #3]
 8019c08:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c0a:	4854      	ldr	r0, [pc, #336]	@ (8019d5c <RadioSend+0x1f0>)
 8019c0c:	f001 ff92 	bl	801bb34 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019c10:	78fb      	ldrb	r3, [r7, #3]
 8019c12:	2200      	movs	r2, #0
 8019c14:	4619      	mov	r1, r3
 8019c16:	6878      	ldr	r0, [r7, #4]
 8019c18:	f001 fa3e 	bl	801b098 <SUBGRF_SendPayload>
            break;
 8019c1c:	e08d      	b.n	8019d3a <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019c1e:	f002 fbd6 	bl	801c3ce <RFW_Is_Init>
 8019c22:	4603      	mov	r3, r0
 8019c24:	2b01      	cmp	r3, #1
 8019c26:	d11e      	bne.n	8019c66 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019c28:	f107 020d 	add.w	r2, r7, #13
 8019c2c:	78fb      	ldrb	r3, [r7, #3]
 8019c2e:	4619      	mov	r1, r3
 8019c30:	6878      	ldr	r0, [r7, #4]
 8019c32:	f002 fbe4 	bl	801c3fe <RFW_TransmitInit>
 8019c36:	4603      	mov	r3, r0
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d10c      	bne.n	8019c56 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019c3c:	7b7a      	ldrb	r2, [r7, #13]
 8019c3e:	4b46      	ldr	r3, [pc, #280]	@ (8019d58 <RadioSend+0x1ec>)
 8019c40:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c42:	4846      	ldr	r0, [pc, #280]	@ (8019d5c <RadioSend+0x1f0>)
 8019c44:	f001 ff76 	bl	801bb34 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8019c48:	7b7b      	ldrb	r3, [r7, #13]
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	4619      	mov	r1, r3
 8019c4e:	6878      	ldr	r0, [r7, #4]
 8019c50:	f001 fa22 	bl	801b098 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019c54:	e071      	b.n	8019d3a <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8019c56:	4b42      	ldr	r3, [pc, #264]	@ (8019d60 <RadioSend+0x1f4>)
 8019c58:	2201      	movs	r2, #1
 8019c5a:	2100      	movs	r1, #0
 8019c5c:	2002      	movs	r0, #2
 8019c5e:	f003 fa21 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8019c62:	2303      	movs	r3, #3
 8019c64:	e073      	b.n	8019d4e <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019c66:	4a3c      	ldr	r2, [pc, #240]	@ (8019d58 <RadioSend+0x1ec>)
 8019c68:	78fb      	ldrb	r3, [r7, #3]
 8019c6a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c6c:	483b      	ldr	r0, [pc, #236]	@ (8019d5c <RadioSend+0x1f0>)
 8019c6e:	f001 ff61 	bl	801bb34 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8019c72:	78fb      	ldrb	r3, [r7, #3]
 8019c74:	2200      	movs	r2, #0
 8019c76:	4619      	mov	r1, r3
 8019c78:	6878      	ldr	r0, [r7, #4]
 8019c7a:	f001 fa0d 	bl	801b098 <SUBGRF_SendPayload>
            break;
 8019c7e:	e05c      	b.n	8019d3a <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019c80:	4b35      	ldr	r3, [pc, #212]	@ (8019d58 <RadioSend+0x1ec>)
 8019c82:	2202      	movs	r2, #2
 8019c84:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019c86:	4a34      	ldr	r2, [pc, #208]	@ (8019d58 <RadioSend+0x1ec>)
 8019c88:	78fb      	ldrb	r3, [r7, #3]
 8019c8a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c8c:	4833      	ldr	r0, [pc, #204]	@ (8019d5c <RadioSend+0x1f0>)
 8019c8e:	f001 ff51 	bl	801bb34 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019c92:	78fb      	ldrb	r3, [r7, #3]
 8019c94:	2200      	movs	r2, #0
 8019c96:	4619      	mov	r1, r3
 8019c98:	6878      	ldr	r0, [r7, #4]
 8019c9a:	f001 f9fd 	bl	801b098 <SUBGRF_SendPayload>
            break;
 8019c9e:	e04c      	b.n	8019d3a <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019ca0:	78fb      	ldrb	r3, [r7, #3]
 8019ca2:	461a      	mov	r2, r3
 8019ca4:	6879      	ldr	r1, [r7, #4]
 8019ca6:	482f      	ldr	r0, [pc, #188]	@ (8019d64 <RadioSend+0x1f8>)
 8019ca8:	f000 fcca 	bl	801a640 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019cac:	4b2a      	ldr	r3, [pc, #168]	@ (8019d58 <RadioSend+0x1ec>)
 8019cae:	2202      	movs	r2, #2
 8019cb0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8019cb2:	78fb      	ldrb	r3, [r7, #3]
 8019cb4:	3301      	adds	r3, #1
 8019cb6:	b2da      	uxtb	r2, r3
 8019cb8:	4b27      	ldr	r3, [pc, #156]	@ (8019d58 <RadioSend+0x1ec>)
 8019cba:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019cbc:	4827      	ldr	r0, [pc, #156]	@ (8019d5c <RadioSend+0x1f0>)
 8019cbe:	f001 ff39 	bl	801bb34 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8019cc2:	2100      	movs	r1, #0
 8019cc4:	20f1      	movs	r0, #241	@ 0xf1
 8019cc6:	f000 f965 	bl	8019f94 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019cca:	2100      	movs	r1, #0
 8019ccc:	20f0      	movs	r0, #240	@ 0xf0
 8019cce:	f000 f961 	bl	8019f94 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019cd2:	4b21      	ldr	r3, [pc, #132]	@ (8019d58 <RadioSend+0x1ec>)
 8019cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019cd6:	2b64      	cmp	r3, #100	@ 0x64
 8019cd8:	d108      	bne.n	8019cec <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8019cda:	2170      	movs	r1, #112	@ 0x70
 8019cdc:	20f3      	movs	r0, #243	@ 0xf3
 8019cde:	f000 f959 	bl	8019f94 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8019ce2:	211d      	movs	r1, #29
 8019ce4:	20f2      	movs	r0, #242	@ 0xf2
 8019ce6:	f000 f955 	bl	8019f94 <RadioWrite>
 8019cea:	e007      	b.n	8019cfc <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019cec:	21e1      	movs	r1, #225	@ 0xe1
 8019cee:	20f3      	movs	r0, #243	@ 0xf3
 8019cf0:	f000 f950 	bl	8019f94 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8019cf4:	2104      	movs	r1, #4
 8019cf6:	20f2      	movs	r0, #242	@ 0xf2
 8019cf8:	f000 f94c 	bl	8019f94 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019cfc:	78fb      	ldrb	r3, [r7, #3]
 8019cfe:	b29b      	uxth	r3, r3
 8019d00:	00db      	lsls	r3, r3, #3
 8019d02:	b29b      	uxth	r3, r3
 8019d04:	3302      	adds	r3, #2
 8019d06:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019d08:	89fb      	ldrh	r3, [r7, #14]
 8019d0a:	0a1b      	lsrs	r3, r3, #8
 8019d0c:	b29b      	uxth	r3, r3
 8019d0e:	b2db      	uxtb	r3, r3
 8019d10:	4619      	mov	r1, r3
 8019d12:	20f4      	movs	r0, #244	@ 0xf4
 8019d14:	f000 f93e 	bl	8019f94 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019d18:	89fb      	ldrh	r3, [r7, #14]
 8019d1a:	b2db      	uxtb	r3, r3
 8019d1c:	4619      	mov	r1, r3
 8019d1e:	20f5      	movs	r0, #245	@ 0xf5
 8019d20:	f000 f938 	bl	8019f94 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8019d24:	78fb      	ldrb	r3, [r7, #3]
 8019d26:	3301      	adds	r3, #1
 8019d28:	b2db      	uxtb	r3, r3
 8019d2a:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8019d2e:	4619      	mov	r1, r3
 8019d30:	480c      	ldr	r0, [pc, #48]	@ (8019d64 <RadioSend+0x1f8>)
 8019d32:	f001 f9b1 	bl	801b098 <SUBGRF_SendPayload>
            break;
 8019d36:	e000      	b.n	8019d3a <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019d38:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019d3a:	4b07      	ldr	r3, [pc, #28]	@ (8019d58 <RadioSend+0x1ec>)
 8019d3c:	685b      	ldr	r3, [r3, #4]
 8019d3e:	4619      	mov	r1, r3
 8019d40:	4809      	ldr	r0, [pc, #36]	@ (8019d68 <RadioSend+0x1fc>)
 8019d42:	f003 f815 	bl	801cd70 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8019d46:	4808      	ldr	r0, [pc, #32]	@ (8019d68 <RadioSend+0x1fc>)
 8019d48:	f002 ff34 	bl	801cbb4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8019d4c:	2300      	movs	r3, #0
}
 8019d4e:	4618      	mov	r0, r3
 8019d50:	3710      	adds	r7, #16
 8019d52:	46bd      	mov	sp, r7
 8019d54:	bd80      	pop	{r7, pc}
 8019d56:	bf00      	nop
 8019d58:	20001e30 	.word	0x20001e30
 8019d5c:	20001e3e 	.word	0x20001e3e
 8019d60:	080210b8 	.word	0x080210b8
 8019d64:	20001d2c 	.word	0x20001d2c
 8019d68:	20001e8c 	.word	0x20001e8c

08019d6c <RadioSleep>:

static void RadioSleep( void )
{
 8019d6c:	b580      	push	{r7, lr}
 8019d6e:	b082      	sub	sp, #8
 8019d70:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019d72:	2300      	movs	r3, #0
 8019d74:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8019d76:	793b      	ldrb	r3, [r7, #4]
 8019d78:	f043 0304 	orr.w	r3, r3, #4
 8019d7c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019d7e:	7938      	ldrb	r0, [r7, #4]
 8019d80:	f001 fa66 	bl	801b250 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019d84:	2002      	movs	r0, #2
 8019d86:	f7e8 fe29 	bl	80029dc <HAL_Delay>
}
 8019d8a:	bf00      	nop
 8019d8c:	3708      	adds	r7, #8
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bd80      	pop	{r7, pc}

08019d92 <RadioStandby>:

static void RadioStandby( void )
{
 8019d92:	b580      	push	{r7, lr}
 8019d94:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8019d96:	2000      	movs	r0, #0
 8019d98:	f001 fa8e 	bl	801b2b8 <SUBGRF_SetStandby>
}
 8019d9c:	bf00      	nop
 8019d9e:	bd80      	pop	{r7, pc}

08019da0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b082      	sub	sp, #8
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8019da8:	f002 fb11 	bl	801c3ce <RFW_Is_Init>
 8019dac:	4603      	mov	r3, r0
 8019dae:	2b01      	cmp	r3, #1
 8019db0:	d102      	bne.n	8019db8 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8019db2:	f002 fb34 	bl	801c41e <RFW_ReceiveInit>
 8019db6:	e007      	b.n	8019dc8 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019db8:	2300      	movs	r3, #0
 8019dba:	2200      	movs	r2, #0
 8019dbc:	f240 2162 	movw	r1, #610	@ 0x262
 8019dc0:	f240 2062 	movw	r0, #610	@ 0x262
 8019dc4:	f001 fc52 	bl	801b66c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d006      	beq.n	8019ddc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019dce:	6879      	ldr	r1, [r7, #4]
 8019dd0:	4811      	ldr	r0, [pc, #68]	@ (8019e18 <RadioRx+0x78>)
 8019dd2:	f002 ffcd 	bl	801cd70 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019dd6:	4810      	ldr	r0, [pc, #64]	@ (8019e18 <RadioRx+0x78>)
 8019dd8:	f002 feec 	bl	801cbb4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8019e1c <RadioRx+0x7c>)
 8019dde:	2200      	movs	r2, #0
 8019de0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019de2:	4b0e      	ldr	r3, [pc, #56]	@ (8019e1c <RadioRx+0x7c>)
 8019de4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019de8:	2100      	movs	r1, #0
 8019dea:	4618      	mov	r0, r3
 8019dec:	f002 f8f6 	bl	801bfdc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019df0:	4b0a      	ldr	r3, [pc, #40]	@ (8019e1c <RadioRx+0x7c>)
 8019df2:	785b      	ldrb	r3, [r3, #1]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d004      	beq.n	8019e02 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019df8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019dfc:	f001 fa98 	bl	801b330 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019e00:	e005      	b.n	8019e0e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019e02:	4b06      	ldr	r3, [pc, #24]	@ (8019e1c <RadioRx+0x7c>)
 8019e04:	689b      	ldr	r3, [r3, #8]
 8019e06:	019b      	lsls	r3, r3, #6
 8019e08:	4618      	mov	r0, r3
 8019e0a:	f001 fa91 	bl	801b330 <SUBGRF_SetRx>
}
 8019e0e:	bf00      	nop
 8019e10:	3708      	adds	r7, #8
 8019e12:	46bd      	mov	sp, r7
 8019e14:	bd80      	pop	{r7, pc}
 8019e16:	bf00      	nop
 8019e18:	20001ea4 	.word	0x20001ea4
 8019e1c:	20001e30 	.word	0x20001e30

08019e20 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b082      	sub	sp, #8
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8019e28:	f002 fad1 	bl	801c3ce <RFW_Is_Init>
 8019e2c:	4603      	mov	r3, r0
 8019e2e:	2b01      	cmp	r3, #1
 8019e30:	d102      	bne.n	8019e38 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019e32:	f002 faf4 	bl	801c41e <RFW_ReceiveInit>
 8019e36:	e007      	b.n	8019e48 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019e38:	2300      	movs	r3, #0
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	f240 2162 	movw	r1, #610	@ 0x262
 8019e40:	f240 2062 	movw	r0, #610	@ 0x262
 8019e44:	f001 fc12 	bl	801b66c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d006      	beq.n	8019e5c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019e4e:	6879      	ldr	r1, [r7, #4]
 8019e50:	4811      	ldr	r0, [pc, #68]	@ (8019e98 <RadioRxBoosted+0x78>)
 8019e52:	f002 ff8d 	bl	801cd70 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019e56:	4810      	ldr	r0, [pc, #64]	@ (8019e98 <RadioRxBoosted+0x78>)
 8019e58:	f002 feac 	bl	801cbb4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8019e9c <RadioRxBoosted+0x7c>)
 8019e5e:	2200      	movs	r2, #0
 8019e60:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019e62:	4b0e      	ldr	r3, [pc, #56]	@ (8019e9c <RadioRxBoosted+0x7c>)
 8019e64:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019e68:	2100      	movs	r1, #0
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	f002 f8b6 	bl	801bfdc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019e70:	4b0a      	ldr	r3, [pc, #40]	@ (8019e9c <RadioRxBoosted+0x7c>)
 8019e72:	785b      	ldrb	r3, [r3, #1]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d004      	beq.n	8019e82 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019e78:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019e7c:	f001 fa78 	bl	801b370 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019e80:	e005      	b.n	8019e8e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019e82:	4b06      	ldr	r3, [pc, #24]	@ (8019e9c <RadioRxBoosted+0x7c>)
 8019e84:	689b      	ldr	r3, [r3, #8]
 8019e86:	019b      	lsls	r3, r3, #6
 8019e88:	4618      	mov	r0, r3
 8019e8a:	f001 fa71 	bl	801b370 <SUBGRF_SetRxBoosted>
}
 8019e8e:	bf00      	nop
 8019e90:	3708      	adds	r7, #8
 8019e92:	46bd      	mov	sp, r7
 8019e94:	bd80      	pop	{r7, pc}
 8019e96:	bf00      	nop
 8019e98:	20001ea4 	.word	0x20001ea4
 8019e9c:	20001e30 	.word	0x20001e30

08019ea0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b082      	sub	sp, #8
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
 8019ea8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	005a      	lsls	r2, r3, #1
 8019eae:	683b      	ldr	r3, [r7, #0]
 8019eb0:	4413      	add	r3, r2
 8019eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8019ee4 <RadioSetRxDutyCycle+0x44>)
 8019eb4:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	2200      	movs	r2, #0
 8019eba:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8019ebe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019ec2:	f001 fbd3 	bl	801b66c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019ec6:	4b07      	ldr	r3, [pc, #28]	@ (8019ee4 <RadioSetRxDutyCycle+0x44>)
 8019ec8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019ecc:	2100      	movs	r1, #0
 8019ece:	4618      	mov	r0, r3
 8019ed0:	f002 f884 	bl	801bfdc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019ed4:	6839      	ldr	r1, [r7, #0]
 8019ed6:	6878      	ldr	r0, [r7, #4]
 8019ed8:	f001 fa6e 	bl	801b3b8 <SUBGRF_SetRxDutyCycle>
}
 8019edc:	bf00      	nop
 8019ede:	3708      	adds	r7, #8
 8019ee0:	46bd      	mov	sp, r7
 8019ee2:	bd80      	pop	{r7, pc}
 8019ee4:	20001e30 	.word	0x20001e30

08019ee8 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019ee8:	b580      	push	{r7, lr}
 8019eea:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019eec:	4b09      	ldr	r3, [pc, #36]	@ (8019f14 <RadioStartCad+0x2c>)
 8019eee:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019ef2:	2100      	movs	r1, #0
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f002 f871 	bl	801bfdc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019efa:	2300      	movs	r3, #0
 8019efc:	2200      	movs	r2, #0
 8019efe:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8019f02:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8019f06:	f001 fbb1 	bl	801b66c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019f0a:	f001 fa81 	bl	801b410 <SUBGRF_SetCad>
}
 8019f0e:	bf00      	nop
 8019f10:	bd80      	pop	{r7, pc}
 8019f12:	bf00      	nop
 8019f14:	20001e30 	.word	0x20001e30

08019f18 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	b084      	sub	sp, #16
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
 8019f20:	460b      	mov	r3, r1
 8019f22:	70fb      	strb	r3, [r7, #3]
 8019f24:	4613      	mov	r3, r2
 8019f26:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8019f28:	883b      	ldrh	r3, [r7, #0]
 8019f2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019f2e:	fb02 f303 	mul.w	r3, r2, r3
 8019f32:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019f34:	6878      	ldr	r0, [r7, #4]
 8019f36:	f001 fbf5 	bl	801b724 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019f3e:	4618      	mov	r0, r3
 8019f40:	f002 f874 	bl	801c02c <SUBGRF_SetRfTxPower>
 8019f44:	4603      	mov	r3, r0
 8019f46:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019f48:	210e      	movs	r1, #14
 8019f4a:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019f4e:	f001 ff37 	bl	801bdc0 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019f52:	7afb      	ldrb	r3, [r7, #11]
 8019f54:	2101      	movs	r1, #1
 8019f56:	4618      	mov	r0, r3
 8019f58:	f002 f840 	bl	801bfdc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019f5c:	f001 fa66 	bl	801b42c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019f60:	68f9      	ldr	r1, [r7, #12]
 8019f62:	4805      	ldr	r0, [pc, #20]	@ (8019f78 <RadioSetTxContinuousWave+0x60>)
 8019f64:	f002 ff04 	bl	801cd70 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019f68:	4803      	ldr	r0, [pc, #12]	@ (8019f78 <RadioSetTxContinuousWave+0x60>)
 8019f6a:	f002 fe23 	bl	801cbb4 <UTIL_TIMER_Start>
}
 8019f6e:	bf00      	nop
 8019f70:	3710      	adds	r7, #16
 8019f72:	46bd      	mov	sp, r7
 8019f74:	bd80      	pop	{r7, pc}
 8019f76:	bf00      	nop
 8019f78:	20001e8c 	.word	0x20001e8c

08019f7c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	b082      	sub	sp, #8
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	4603      	mov	r3, r0
 8019f84:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8019f86:	f001 fe88 	bl	801bc9a <SUBGRF_GetRssiInst>
 8019f8a:	4603      	mov	r3, r0
}
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	3708      	adds	r7, #8
 8019f90:	46bd      	mov	sp, r7
 8019f92:	bd80      	pop	{r7, pc}

08019f94 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b082      	sub	sp, #8
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	4603      	mov	r3, r0
 8019f9c:	460a      	mov	r2, r1
 8019f9e:	80fb      	strh	r3, [r7, #6]
 8019fa0:	4613      	mov	r3, r2
 8019fa2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8019fa4:	797a      	ldrb	r2, [r7, #5]
 8019fa6:	88fb      	ldrh	r3, [r7, #6]
 8019fa8:	4611      	mov	r1, r2
 8019faa:	4618      	mov	r0, r3
 8019fac:	f001 ff08 	bl	801bdc0 <SUBGRF_WriteRegister>
}
 8019fb0:	bf00      	nop
 8019fb2:	3708      	adds	r7, #8
 8019fb4:	46bd      	mov	sp, r7
 8019fb6:	bd80      	pop	{r7, pc}

08019fb8 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019fb8:	b580      	push	{r7, lr}
 8019fba:	b082      	sub	sp, #8
 8019fbc:	af00      	add	r7, sp, #0
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8019fc2:	88fb      	ldrh	r3, [r7, #6]
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	f001 ff1d 	bl	801be04 <SUBGRF_ReadRegister>
 8019fca:	4603      	mov	r3, r0
}
 8019fcc:	4618      	mov	r0, r3
 8019fce:	3708      	adds	r7, #8
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	bd80      	pop	{r7, pc}

08019fd4 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b082      	sub	sp, #8
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	4603      	mov	r3, r0
 8019fdc:	6039      	str	r1, [r7, #0]
 8019fde:	80fb      	strh	r3, [r7, #6]
 8019fe0:	4613      	mov	r3, r2
 8019fe2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019fe4:	797b      	ldrb	r3, [r7, #5]
 8019fe6:	b29a      	uxth	r2, r3
 8019fe8:	88fb      	ldrh	r3, [r7, #6]
 8019fea:	6839      	ldr	r1, [r7, #0]
 8019fec:	4618      	mov	r0, r3
 8019fee:	f001 ff29 	bl	801be44 <SUBGRF_WriteRegisters>
}
 8019ff2:	bf00      	nop
 8019ff4:	3708      	adds	r7, #8
 8019ff6:	46bd      	mov	sp, r7
 8019ff8:	bd80      	pop	{r7, pc}

08019ffa <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019ffa:	b580      	push	{r7, lr}
 8019ffc:	b082      	sub	sp, #8
 8019ffe:	af00      	add	r7, sp, #0
 801a000:	4603      	mov	r3, r0
 801a002:	6039      	str	r1, [r7, #0]
 801a004:	80fb      	strh	r3, [r7, #6]
 801a006:	4613      	mov	r3, r2
 801a008:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801a00a:	797b      	ldrb	r3, [r7, #5]
 801a00c:	b29a      	uxth	r2, r3
 801a00e:	88fb      	ldrh	r3, [r7, #6]
 801a010:	6839      	ldr	r1, [r7, #0]
 801a012:	4618      	mov	r0, r3
 801a014:	f001 ff38 	bl	801be88 <SUBGRF_ReadRegisters>
}
 801a018:	bf00      	nop
 801a01a:	3708      	adds	r7, #8
 801a01c:	46bd      	mov	sp, r7
 801a01e:	bd80      	pop	{r7, pc}

0801a020 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b082      	sub	sp, #8
 801a024:	af00      	add	r7, sp, #0
 801a026:	4603      	mov	r3, r0
 801a028:	460a      	mov	r2, r1
 801a02a:	71fb      	strb	r3, [r7, #7]
 801a02c:	4613      	mov	r3, r2
 801a02e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801a030:	79fb      	ldrb	r3, [r7, #7]
 801a032:	2b01      	cmp	r3, #1
 801a034:	d10a      	bne.n	801a04c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801a036:	4a0e      	ldr	r2, [pc, #56]	@ (801a070 <RadioSetMaxPayloadLength+0x50>)
 801a038:	79bb      	ldrb	r3, [r7, #6]
 801a03a:	7013      	strb	r3, [r2, #0]
 801a03c:	4b0c      	ldr	r3, [pc, #48]	@ (801a070 <RadioSetMaxPayloadLength+0x50>)
 801a03e:	781a      	ldrb	r2, [r3, #0]
 801a040:	4b0c      	ldr	r3, [pc, #48]	@ (801a074 <RadioSetMaxPayloadLength+0x54>)
 801a042:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a044:	480c      	ldr	r0, [pc, #48]	@ (801a078 <RadioSetMaxPayloadLength+0x58>)
 801a046:	f001 fd75 	bl	801bb34 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801a04a:	e00d      	b.n	801a068 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801a04c:	4b09      	ldr	r3, [pc, #36]	@ (801a074 <RadioSetMaxPayloadLength+0x54>)
 801a04e:	7d5b      	ldrb	r3, [r3, #21]
 801a050:	2b01      	cmp	r3, #1
 801a052:	d109      	bne.n	801a068 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801a054:	4a06      	ldr	r2, [pc, #24]	@ (801a070 <RadioSetMaxPayloadLength+0x50>)
 801a056:	79bb      	ldrb	r3, [r7, #6]
 801a058:	7013      	strb	r3, [r2, #0]
 801a05a:	4b05      	ldr	r3, [pc, #20]	@ (801a070 <RadioSetMaxPayloadLength+0x50>)
 801a05c:	781a      	ldrb	r2, [r3, #0]
 801a05e:	4b05      	ldr	r3, [pc, #20]	@ (801a074 <RadioSetMaxPayloadLength+0x54>)
 801a060:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a062:	4805      	ldr	r0, [pc, #20]	@ (801a078 <RadioSetMaxPayloadLength+0x58>)
 801a064:	f001 fd66 	bl	801bb34 <SUBGRF_SetPacketParams>
}
 801a068:	bf00      	nop
 801a06a:	3708      	adds	r7, #8
 801a06c:	46bd      	mov	sp, r7
 801a06e:	bd80      	pop	{r7, pc}
 801a070:	20000134 	.word	0x20000134
 801a074:	20001e30 	.word	0x20001e30
 801a078:	20001e3e 	.word	0x20001e3e

0801a07c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b082      	sub	sp, #8
 801a080:	af00      	add	r7, sp, #0
 801a082:	4603      	mov	r3, r0
 801a084:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801a086:	4a13      	ldr	r2, [pc, #76]	@ (801a0d4 <RadioSetPublicNetwork+0x58>)
 801a088:	79fb      	ldrb	r3, [r7, #7]
 801a08a:	7313      	strb	r3, [r2, #12]
 801a08c:	4b11      	ldr	r3, [pc, #68]	@ (801a0d4 <RadioSetPublicNetwork+0x58>)
 801a08e:	7b1a      	ldrb	r2, [r3, #12]
 801a090:	4b10      	ldr	r3, [pc, #64]	@ (801a0d4 <RadioSetPublicNetwork+0x58>)
 801a092:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801a094:	2001      	movs	r0, #1
 801a096:	f7ff f813 	bl	80190c0 <RadioSetModem>
    if( enable == true )
 801a09a:	79fb      	ldrb	r3, [r7, #7]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d00a      	beq.n	801a0b6 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801a0a0:	2134      	movs	r1, #52	@ 0x34
 801a0a2:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801a0a6:	f001 fe8b 	bl	801bdc0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801a0aa:	2144      	movs	r1, #68	@ 0x44
 801a0ac:	f240 7041 	movw	r0, #1857	@ 0x741
 801a0b0:	f001 fe86 	bl	801bdc0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801a0b4:	e009      	b.n	801a0ca <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801a0b6:	2114      	movs	r1, #20
 801a0b8:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801a0bc:	f001 fe80 	bl	801bdc0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801a0c0:	2124      	movs	r1, #36	@ 0x24
 801a0c2:	f240 7041 	movw	r0, #1857	@ 0x741
 801a0c6:	f001 fe7b 	bl	801bdc0 <SUBGRF_WriteRegister>
}
 801a0ca:	bf00      	nop
 801a0cc:	3708      	adds	r7, #8
 801a0ce:	46bd      	mov	sp, r7
 801a0d0:	bd80      	pop	{r7, pc}
 801a0d2:	bf00      	nop
 801a0d4:	20001e30 	.word	0x20001e30

0801a0d8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801a0d8:	b580      	push	{r7, lr}
 801a0da:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801a0dc:	f001 ffda 	bl	801c094 <SUBGRF_GetRadioWakeUpTime>
 801a0e0:	4603      	mov	r3, r0
 801a0e2:	3303      	adds	r3, #3
}
 801a0e4:	4618      	mov	r0, r3
 801a0e6:	bd80      	pop	{r7, pc}

0801a0e8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801a0e8:	b580      	push	{r7, lr}
 801a0ea:	b082      	sub	sp, #8
 801a0ec:	af00      	add	r7, sp, #0
 801a0ee:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801a0f0:	f000 f80e 	bl	801a110 <RadioOnTxTimeoutProcess>
}
 801a0f4:	bf00      	nop
 801a0f6:	3708      	adds	r7, #8
 801a0f8:	46bd      	mov	sp, r7
 801a0fa:	bd80      	pop	{r7, pc}

0801a0fc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b082      	sub	sp, #8
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801a104:	f000 f818 	bl	801a138 <RadioOnRxTimeoutProcess>
}
 801a108:	bf00      	nop
 801a10a:	3708      	adds	r7, #8
 801a10c:	46bd      	mov	sp, r7
 801a10e:	bd80      	pop	{r7, pc}

0801a110 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801a110:	b580      	push	{r7, lr}
 801a112:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a114:	4b07      	ldr	r3, [pc, #28]	@ (801a134 <RadioOnTxTimeoutProcess+0x24>)
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d008      	beq.n	801a12e <RadioOnTxTimeoutProcess+0x1e>
 801a11c:	4b05      	ldr	r3, [pc, #20]	@ (801a134 <RadioOnTxTimeoutProcess+0x24>)
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	685b      	ldr	r3, [r3, #4]
 801a122:	2b00      	cmp	r3, #0
 801a124:	d003      	beq.n	801a12e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801a126:	4b03      	ldr	r3, [pc, #12]	@ (801a134 <RadioOnTxTimeoutProcess+0x24>)
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	685b      	ldr	r3, [r3, #4]
 801a12c:	4798      	blx	r3
    }
}
 801a12e:	bf00      	nop
 801a130:	bd80      	pop	{r7, pc}
 801a132:	bf00      	nop
 801a134:	20001e2c 	.word	0x20001e2c

0801a138 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801a138:	b580      	push	{r7, lr}
 801a13a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a13c:	4b07      	ldr	r3, [pc, #28]	@ (801a15c <RadioOnRxTimeoutProcess+0x24>)
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d008      	beq.n	801a156 <RadioOnRxTimeoutProcess+0x1e>
 801a144:	4b05      	ldr	r3, [pc, #20]	@ (801a15c <RadioOnRxTimeoutProcess+0x24>)
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	68db      	ldr	r3, [r3, #12]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d003      	beq.n	801a156 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801a14e:	4b03      	ldr	r3, [pc, #12]	@ (801a15c <RadioOnRxTimeoutProcess+0x24>)
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	68db      	ldr	r3, [r3, #12]
 801a154:	4798      	blx	r3
    }
}
 801a156:	bf00      	nop
 801a158:	bd80      	pop	{r7, pc}
 801a15a:	bf00      	nop
 801a15c:	20001e2c 	.word	0x20001e2c

0801a160 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801a160:	b580      	push	{r7, lr}
 801a162:	b082      	sub	sp, #8
 801a164:	af00      	add	r7, sp, #0
 801a166:	4603      	mov	r3, r0
 801a168:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801a16a:	4a05      	ldr	r2, [pc, #20]	@ (801a180 <RadioOnDioIrq+0x20>)
 801a16c:	88fb      	ldrh	r3, [r7, #6]
 801a16e:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 801a172:	f000 f807 	bl	801a184 <RadioIrqProcess>
}
 801a176:	bf00      	nop
 801a178:	3708      	adds	r7, #8
 801a17a:	46bd      	mov	sp, r7
 801a17c:	bd80      	pop	{r7, pc}
 801a17e:	bf00      	nop
 801a180:	20001e30 	.word	0x20001e30

0801a184 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801a184:	b5b0      	push	{r4, r5, r7, lr}
 801a186:	b082      	sub	sp, #8
 801a188:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801a18a:	2300      	movs	r3, #0
 801a18c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801a18e:	2300      	movs	r3, #0
 801a190:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801a192:	4ba8      	ldr	r3, [pc, #672]	@ (801a434 <RadioIrqProcess+0x2b0>)
 801a194:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 801a198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a19c:	f000 810d 	beq.w	801a3ba <RadioIrqProcess+0x236>
 801a1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a1a4:	f300 81e8 	bgt.w	801a578 <RadioIrqProcess+0x3f4>
 801a1a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a1ac:	f000 80f1 	beq.w	801a392 <RadioIrqProcess+0x20e>
 801a1b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a1b4:	f300 81e0 	bgt.w	801a578 <RadioIrqProcess+0x3f4>
 801a1b8:	2b80      	cmp	r3, #128	@ 0x80
 801a1ba:	f000 80d6 	beq.w	801a36a <RadioIrqProcess+0x1e6>
 801a1be:	2b80      	cmp	r3, #128	@ 0x80
 801a1c0:	f300 81da 	bgt.w	801a578 <RadioIrqProcess+0x3f4>
 801a1c4:	2b20      	cmp	r3, #32
 801a1c6:	dc49      	bgt.n	801a25c <RadioIrqProcess+0xd8>
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	f340 81d5 	ble.w	801a578 <RadioIrqProcess+0x3f4>
 801a1ce:	3b01      	subs	r3, #1
 801a1d0:	2b1f      	cmp	r3, #31
 801a1d2:	f200 81d1 	bhi.w	801a578 <RadioIrqProcess+0x3f4>
 801a1d6:	a201      	add	r2, pc, #4	@ (adr r2, 801a1dc <RadioIrqProcess+0x58>)
 801a1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1dc:	0801a265 	.word	0x0801a265
 801a1e0:	0801a29f 	.word	0x0801a29f
 801a1e4:	0801a579 	.word	0x0801a579
 801a1e8:	0801a455 	.word	0x0801a455
 801a1ec:	0801a579 	.word	0x0801a579
 801a1f0:	0801a579 	.word	0x0801a579
 801a1f4:	0801a579 	.word	0x0801a579
 801a1f8:	0801a4d1 	.word	0x0801a4d1
 801a1fc:	0801a579 	.word	0x0801a579
 801a200:	0801a579 	.word	0x0801a579
 801a204:	0801a579 	.word	0x0801a579
 801a208:	0801a579 	.word	0x0801a579
 801a20c:	0801a579 	.word	0x0801a579
 801a210:	0801a579 	.word	0x0801a579
 801a214:	0801a579 	.word	0x0801a579
 801a218:	0801a4ed 	.word	0x0801a4ed
 801a21c:	0801a579 	.word	0x0801a579
 801a220:	0801a579 	.word	0x0801a579
 801a224:	0801a579 	.word	0x0801a579
 801a228:	0801a579 	.word	0x0801a579
 801a22c:	0801a579 	.word	0x0801a579
 801a230:	0801a579 	.word	0x0801a579
 801a234:	0801a579 	.word	0x0801a579
 801a238:	0801a579 	.word	0x0801a579
 801a23c:	0801a579 	.word	0x0801a579
 801a240:	0801a579 	.word	0x0801a579
 801a244:	0801a579 	.word	0x0801a579
 801a248:	0801a579 	.word	0x0801a579
 801a24c:	0801a579 	.word	0x0801a579
 801a250:	0801a579 	.word	0x0801a579
 801a254:	0801a579 	.word	0x0801a579
 801a258:	0801a4fb 	.word	0x0801a4fb
 801a25c:	2b40      	cmp	r3, #64	@ 0x40
 801a25e:	f000 816d 	beq.w	801a53c <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801a262:	e189      	b.n	801a578 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801a264:	4874      	ldr	r0, [pc, #464]	@ (801a438 <RadioIrqProcess+0x2b4>)
 801a266:	f002 fd13 	bl	801cc90 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801a26a:	2000      	movs	r0, #0
 801a26c:	f001 f824 	bl	801b2b8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801a270:	f002 f8b4 	bl	801c3dc <RFW_Is_LongPacketModeEnabled>
 801a274:	4603      	mov	r3, r0
 801a276:	2b01      	cmp	r3, #1
 801a278:	d101      	bne.n	801a27e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801a27a:	f002 f8d8 	bl	801c42e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801a27e:	4b6f      	ldr	r3, [pc, #444]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	2b00      	cmp	r3, #0
 801a284:	f000 817a 	beq.w	801a57c <RadioIrqProcess+0x3f8>
 801a288:	4b6c      	ldr	r3, [pc, #432]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	f000 8174 	beq.w	801a57c <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801a294:	4b69      	ldr	r3, [pc, #420]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	4798      	blx	r3
        break;
 801a29c:	e16e      	b.n	801a57c <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801a29e:	4868      	ldr	r0, [pc, #416]	@ (801a440 <RadioIrqProcess+0x2bc>)
 801a2a0:	f002 fcf6 	bl	801cc90 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a2a4:	4b63      	ldr	r3, [pc, #396]	@ (801a434 <RadioIrqProcess+0x2b0>)
 801a2a6:	785b      	ldrb	r3, [r3, #1]
 801a2a8:	f083 0301 	eor.w	r3, r3, #1
 801a2ac:	b2db      	uxtb	r3, r3
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d014      	beq.n	801a2dc <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801a2b2:	2000      	movs	r0, #0
 801a2b4:	f001 f800 	bl	801b2b8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801a2b8:	2100      	movs	r1, #0
 801a2ba:	f640 1002 	movw	r0, #2306	@ 0x902
 801a2be:	f001 fd7f 	bl	801bdc0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801a2c2:	f640 1044 	movw	r0, #2372	@ 0x944
 801a2c6:	f001 fd9d 	bl	801be04 <SUBGRF_ReadRegister>
 801a2ca:	4603      	mov	r3, r0
 801a2cc:	f043 0302 	orr.w	r3, r3, #2
 801a2d0:	b2db      	uxtb	r3, r3
 801a2d2:	4619      	mov	r1, r3
 801a2d4:	f640 1044 	movw	r0, #2372	@ 0x944
 801a2d8:	f001 fd72 	bl	801bdc0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801a2dc:	1dfb      	adds	r3, r7, #7
 801a2de:	22ff      	movs	r2, #255	@ 0xff
 801a2e0:	4619      	mov	r1, r3
 801a2e2:	4858      	ldr	r0, [pc, #352]	@ (801a444 <RadioIrqProcess+0x2c0>)
 801a2e4:	f000 feb6 	bl	801b054 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801a2e8:	4857      	ldr	r0, [pc, #348]	@ (801a448 <RadioIrqProcess+0x2c4>)
 801a2ea:	f001 fd17 	bl	801bd1c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801a2ee:	4b53      	ldr	r3, [pc, #332]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	f000 8144 	beq.w	801a580 <RadioIrqProcess+0x3fc>
 801a2f8:	4b50      	ldr	r3, [pc, #320]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	689b      	ldr	r3, [r3, #8]
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	f000 813e 	beq.w	801a580 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801a304:	4b4b      	ldr	r3, [pc, #300]	@ (801a434 <RadioIrqProcess+0x2b0>)
 801a306:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801a30a:	2b01      	cmp	r3, #1
 801a30c:	d10e      	bne.n	801a32c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801a30e:	4b4b      	ldr	r3, [pc, #300]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	689c      	ldr	r4, [r3, #8]
 801a314:	79fb      	ldrb	r3, [r7, #7]
 801a316:	4619      	mov	r1, r3
 801a318:	4b46      	ldr	r3, [pc, #280]	@ (801a434 <RadioIrqProcess+0x2b0>)
 801a31a:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 801a31e:	461a      	mov	r2, r3
 801a320:	4b44      	ldr	r3, [pc, #272]	@ (801a434 <RadioIrqProcess+0x2b0>)
 801a322:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 801a326:	4847      	ldr	r0, [pc, #284]	@ (801a444 <RadioIrqProcess+0x2c0>)
 801a328:	47a0      	blx	r4
                break;
 801a32a:	e01d      	b.n	801a368 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801a32c:	4b41      	ldr	r3, [pc, #260]	@ (801a434 <RadioIrqProcess+0x2b0>)
 801a32e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a330:	463a      	mov	r2, r7
 801a332:	4611      	mov	r1, r2
 801a334:	4618      	mov	r0, r3
 801a336:	f001 ff9f 	bl	801c278 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801a33a:	4b40      	ldr	r3, [pc, #256]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	689c      	ldr	r4, [r3, #8]
 801a340:	79fb      	ldrb	r3, [r7, #7]
 801a342:	4619      	mov	r1, r3
 801a344:	4b3b      	ldr	r3, [pc, #236]	@ (801a434 <RadioIrqProcess+0x2b0>)
 801a346:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 801a34a:	4618      	mov	r0, r3
 801a34c:	683b      	ldr	r3, [r7, #0]
 801a34e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 801a352:	4a3e      	ldr	r2, [pc, #248]	@ (801a44c <RadioIrqProcess+0x2c8>)
 801a354:	fb82 5203 	smull	r5, r2, r2, r3
 801a358:	1192      	asrs	r2, r2, #6
 801a35a:	17db      	asrs	r3, r3, #31
 801a35c:	1ad3      	subs	r3, r2, r3
 801a35e:	b25b      	sxtb	r3, r3
 801a360:	4602      	mov	r2, r0
 801a362:	4838      	ldr	r0, [pc, #224]	@ (801a444 <RadioIrqProcess+0x2c0>)
 801a364:	47a0      	blx	r4
                break;
 801a366:	bf00      	nop
        break;
 801a368:	e10a      	b.n	801a580 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801a36a:	2000      	movs	r0, #0
 801a36c:	f000 ffa4 	bl	801b2b8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a370:	4b32      	ldr	r3, [pc, #200]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	2b00      	cmp	r3, #0
 801a376:	f000 8105 	beq.w	801a584 <RadioIrqProcess+0x400>
 801a37a:	4b30      	ldr	r3, [pc, #192]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	699b      	ldr	r3, [r3, #24]
 801a380:	2b00      	cmp	r3, #0
 801a382:	f000 80ff 	beq.w	801a584 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801a386:	4b2d      	ldr	r3, [pc, #180]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	699b      	ldr	r3, [r3, #24]
 801a38c:	2000      	movs	r0, #0
 801a38e:	4798      	blx	r3
        break;
 801a390:	e0f8      	b.n	801a584 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801a392:	2000      	movs	r0, #0
 801a394:	f000 ff90 	bl	801b2b8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a398:	4b28      	ldr	r3, [pc, #160]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	f000 80f3 	beq.w	801a588 <RadioIrqProcess+0x404>
 801a3a2:	4b26      	ldr	r3, [pc, #152]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	699b      	ldr	r3, [r3, #24]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	f000 80ed 	beq.w	801a588 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801a3ae:	4b23      	ldr	r3, [pc, #140]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	699b      	ldr	r3, [r3, #24]
 801a3b4:	2001      	movs	r0, #1
 801a3b6:	4798      	blx	r3
        break;
 801a3b8:	e0e6      	b.n	801a588 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a3ba:	4b25      	ldr	r3, [pc, #148]	@ (801a450 <RadioIrqProcess+0x2cc>)
 801a3bc:	2201      	movs	r2, #1
 801a3be:	2100      	movs	r1, #0
 801a3c0:	2002      	movs	r0, #2
 801a3c2:	f002 fe6f 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a3c6:	f000 fe2b 	bl	801b020 <SUBGRF_GetOperatingMode>
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	2b04      	cmp	r3, #4
 801a3ce:	d115      	bne.n	801a3fc <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801a3d0:	4819      	ldr	r0, [pc, #100]	@ (801a438 <RadioIrqProcess+0x2b4>)
 801a3d2:	f002 fc5d 	bl	801cc90 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a3d6:	2000      	movs	r0, #0
 801a3d8:	f000 ff6e 	bl	801b2b8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a3dc:	4b17      	ldr	r3, [pc, #92]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	f000 80d3 	beq.w	801a58c <RadioIrqProcess+0x408>
 801a3e6:	4b15      	ldr	r3, [pc, #84]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	685b      	ldr	r3, [r3, #4]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	f000 80cd 	beq.w	801a58c <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801a3f2:	4b12      	ldr	r3, [pc, #72]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	685b      	ldr	r3, [r3, #4]
 801a3f8:	4798      	blx	r3
        break;
 801a3fa:	e0c7      	b.n	801a58c <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a3fc:	f000 fe10 	bl	801b020 <SUBGRF_GetOperatingMode>
 801a400:	4603      	mov	r3, r0
 801a402:	2b05      	cmp	r3, #5
 801a404:	f040 80c2 	bne.w	801a58c <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801a408:	480d      	ldr	r0, [pc, #52]	@ (801a440 <RadioIrqProcess+0x2bc>)
 801a40a:	f002 fc41 	bl	801cc90 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a40e:	2000      	movs	r0, #0
 801a410:	f000 ff52 	bl	801b2b8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a414:	4b09      	ldr	r3, [pc, #36]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	f000 80b7 	beq.w	801a58c <RadioIrqProcess+0x408>
 801a41e:	4b07      	ldr	r3, [pc, #28]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	68db      	ldr	r3, [r3, #12]
 801a424:	2b00      	cmp	r3, #0
 801a426:	f000 80b1 	beq.w	801a58c <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801a42a:	4b04      	ldr	r3, [pc, #16]	@ (801a43c <RadioIrqProcess+0x2b8>)
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	68db      	ldr	r3, [r3, #12]
 801a430:	4798      	blx	r3
        break;
 801a432:	e0ab      	b.n	801a58c <RadioIrqProcess+0x408>
 801a434:	20001e30 	.word	0x20001e30
 801a438:	20001e8c 	.word	0x20001e8c
 801a43c:	20001e2c 	.word	0x20001e2c
 801a440:	20001ea4 	.word	0x20001ea4
 801a444:	20001d2c 	.word	0x20001d2c
 801a448:	20001e54 	.word	0x20001e54
 801a44c:	10624dd3 	.word	0x10624dd3
 801a450:	080210d0 	.word	0x080210d0
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a454:	4b54      	ldr	r3, [pc, #336]	@ (801a5a8 <RadioIrqProcess+0x424>)
 801a456:	2201      	movs	r2, #1
 801a458:	2100      	movs	r1, #0
 801a45a:	2002      	movs	r0, #2
 801a45c:	f002 fe22 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801a460:	4b52      	ldr	r3, [pc, #328]	@ (801a5ac <RadioIrqProcess+0x428>)
 801a462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a464:	2b00      	cmp	r3, #0
 801a466:	f000 8093 	beq.w	801a590 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801a46a:	4a51      	ldr	r2, [pc, #324]	@ (801a5b0 <RadioIrqProcess+0x42c>)
 801a46c:	4b4f      	ldr	r3, [pc, #316]	@ (801a5ac <RadioIrqProcess+0x428>)
 801a46e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a470:	0c1b      	lsrs	r3, r3, #16
 801a472:	b2db      	uxtb	r3, r3
 801a474:	4619      	mov	r1, r3
 801a476:	f640 1003 	movw	r0, #2307	@ 0x903
 801a47a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801a47c:	4a4c      	ldr	r2, [pc, #304]	@ (801a5b0 <RadioIrqProcess+0x42c>)
 801a47e:	4b4b      	ldr	r3, [pc, #300]	@ (801a5ac <RadioIrqProcess+0x428>)
 801a480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a482:	0a1b      	lsrs	r3, r3, #8
 801a484:	b2db      	uxtb	r3, r3
 801a486:	4619      	mov	r1, r3
 801a488:	f640 1004 	movw	r0, #2308	@ 0x904
 801a48c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801a48e:	4a48      	ldr	r2, [pc, #288]	@ (801a5b0 <RadioIrqProcess+0x42c>)
 801a490:	4b46      	ldr	r3, [pc, #280]	@ (801a5ac <RadioIrqProcess+0x428>)
 801a492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a494:	b2db      	uxtb	r3, r3
 801a496:	4619      	mov	r1, r3
 801a498:	f640 1005 	movw	r0, #2309	@ 0x905
 801a49c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801a49e:	4c44      	ldr	r4, [pc, #272]	@ (801a5b0 <RadioIrqProcess+0x42c>)
 801a4a0:	4b44      	ldr	r3, [pc, #272]	@ (801a5b4 <RadioIrqProcess+0x430>)
 801a4a2:	f640 1002 	movw	r0, #2306	@ 0x902
 801a4a6:	4798      	blx	r3
 801a4a8:	4603      	mov	r3, r0
 801a4aa:	f043 0301 	orr.w	r3, r3, #1
 801a4ae:	b2db      	uxtb	r3, r3
 801a4b0:	4619      	mov	r1, r3
 801a4b2:	f640 1002 	movw	r0, #2306	@ 0x902
 801a4b6:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801a4b8:	4b3c      	ldr	r3, [pc, #240]	@ (801a5ac <RadioIrqProcess+0x428>)
 801a4ba:	2200      	movs	r2, #0
 801a4bc:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a4be:	2300      	movs	r3, #0
 801a4c0:	2200      	movs	r2, #0
 801a4c2:	f240 2162 	movw	r1, #610	@ 0x262
 801a4c6:	f240 2062 	movw	r0, #610	@ 0x262
 801a4ca:	f001 f8cf 	bl	801b66c <SUBGRF_SetDioIrqParams>
        break;
 801a4ce:	e05f      	b.n	801a590 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a4d0:	4b39      	ldr	r3, [pc, #228]	@ (801a5b8 <RadioIrqProcess+0x434>)
 801a4d2:	2201      	movs	r2, #1
 801a4d4:	2100      	movs	r1, #0
 801a4d6:	2002      	movs	r0, #2
 801a4d8:	f002 fde4 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801a4dc:	f001 ff77 	bl	801c3ce <RFW_Is_Init>
 801a4e0:	4603      	mov	r3, r0
 801a4e2:	2b01      	cmp	r3, #1
 801a4e4:	d156      	bne.n	801a594 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801a4e6:	f001 ffa8 	bl	801c43a <RFW_ReceivePayload>
        break;
 801a4ea:	e053      	b.n	801a594 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a4ec:	4b33      	ldr	r3, [pc, #204]	@ (801a5bc <RadioIrqProcess+0x438>)
 801a4ee:	2201      	movs	r2, #1
 801a4f0:	2100      	movs	r1, #0
 801a4f2:	2002      	movs	r0, #2
 801a4f4:	f002 fdd6 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a4f8:	e051      	b.n	801a59e <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801a4fa:	4831      	ldr	r0, [pc, #196]	@ (801a5c0 <RadioIrqProcess+0x43c>)
 801a4fc:	f002 fbc8 	bl	801cc90 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a500:	4b2a      	ldr	r3, [pc, #168]	@ (801a5ac <RadioIrqProcess+0x428>)
 801a502:	785b      	ldrb	r3, [r3, #1]
 801a504:	f083 0301 	eor.w	r3, r3, #1
 801a508:	b2db      	uxtb	r3, r3
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d002      	beq.n	801a514 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801a50e:	2000      	movs	r0, #0
 801a510:	f000 fed2 	bl	801b2b8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a514:	4b2b      	ldr	r3, [pc, #172]	@ (801a5c4 <RadioIrqProcess+0x440>)
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d03d      	beq.n	801a598 <RadioIrqProcess+0x414>
 801a51c:	4b29      	ldr	r3, [pc, #164]	@ (801a5c4 <RadioIrqProcess+0x440>)
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	68db      	ldr	r3, [r3, #12]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d038      	beq.n	801a598 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801a526:	4b27      	ldr	r3, [pc, #156]	@ (801a5c4 <RadioIrqProcess+0x440>)
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	68db      	ldr	r3, [r3, #12]
 801a52c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a52e:	4b26      	ldr	r3, [pc, #152]	@ (801a5c8 <RadioIrqProcess+0x444>)
 801a530:	2201      	movs	r2, #1
 801a532:	2100      	movs	r1, #0
 801a534:	2002      	movs	r0, #2
 801a536:	f002 fdb5 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a53a:	e02d      	b.n	801a598 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a53c:	4b23      	ldr	r3, [pc, #140]	@ (801a5cc <RadioIrqProcess+0x448>)
 801a53e:	2201      	movs	r2, #1
 801a540:	2100      	movs	r1, #0
 801a542:	2002      	movs	r0, #2
 801a544:	f002 fdae 	bl	801d0a4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a548:	4b18      	ldr	r3, [pc, #96]	@ (801a5ac <RadioIrqProcess+0x428>)
 801a54a:	785b      	ldrb	r3, [r3, #1]
 801a54c:	f083 0301 	eor.w	r3, r3, #1
 801a550:	b2db      	uxtb	r3, r3
 801a552:	2b00      	cmp	r3, #0
 801a554:	d002      	beq.n	801a55c <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801a556:	2000      	movs	r0, #0
 801a558:	f000 feae 	bl	801b2b8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a55c:	4b19      	ldr	r3, [pc, #100]	@ (801a5c4 <RadioIrqProcess+0x440>)
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	2b00      	cmp	r3, #0
 801a562:	d01b      	beq.n	801a59c <RadioIrqProcess+0x418>
 801a564:	4b17      	ldr	r3, [pc, #92]	@ (801a5c4 <RadioIrqProcess+0x440>)
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	691b      	ldr	r3, [r3, #16]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d016      	beq.n	801a59c <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801a56e:	4b15      	ldr	r3, [pc, #84]	@ (801a5c4 <RadioIrqProcess+0x440>)
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	691b      	ldr	r3, [r3, #16]
 801a574:	4798      	blx	r3
        break;
 801a576:	e011      	b.n	801a59c <RadioIrqProcess+0x418>
        break;
 801a578:	bf00      	nop
 801a57a:	e010      	b.n	801a59e <RadioIrqProcess+0x41a>
        break;
 801a57c:	bf00      	nop
 801a57e:	e00e      	b.n	801a59e <RadioIrqProcess+0x41a>
        break;
 801a580:	bf00      	nop
 801a582:	e00c      	b.n	801a59e <RadioIrqProcess+0x41a>
        break;
 801a584:	bf00      	nop
 801a586:	e00a      	b.n	801a59e <RadioIrqProcess+0x41a>
        break;
 801a588:	bf00      	nop
 801a58a:	e008      	b.n	801a59e <RadioIrqProcess+0x41a>
        break;
 801a58c:	bf00      	nop
 801a58e:	e006      	b.n	801a59e <RadioIrqProcess+0x41a>
        break;
 801a590:	bf00      	nop
 801a592:	e004      	b.n	801a59e <RadioIrqProcess+0x41a>
        break;
 801a594:	bf00      	nop
 801a596:	e002      	b.n	801a59e <RadioIrqProcess+0x41a>
        break;
 801a598:	bf00      	nop
 801a59a:	e000      	b.n	801a59e <RadioIrqProcess+0x41a>
        break;
 801a59c:	bf00      	nop
    }
}
 801a59e:	bf00      	nop
 801a5a0:	3708      	adds	r7, #8
 801a5a2:	46bd      	mov	sp, r7
 801a5a4:	bdb0      	pop	{r4, r5, r7, pc}
 801a5a6:	bf00      	nop
 801a5a8:	080210e4 	.word	0x080210e4
 801a5ac:	20001e30 	.word	0x20001e30
 801a5b0:	08019f95 	.word	0x08019f95
 801a5b4:	08019fb9 	.word	0x08019fb9
 801a5b8:	080210f0 	.word	0x080210f0
 801a5bc:	080210fc 	.word	0x080210fc
 801a5c0:	20001ea4 	.word	0x20001ea4
 801a5c4:	20001e2c 	.word	0x20001e2c
 801a5c8:	08021108 	.word	0x08021108
 801a5cc:	08021114 	.word	0x08021114

0801a5d0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a5d0:	b580      	push	{r7, lr}
 801a5d2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a5d4:	4b09      	ldr	r3, [pc, #36]	@ (801a5fc <RadioTxPrbs+0x2c>)
 801a5d6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a5da:	2101      	movs	r1, #1
 801a5dc:	4618      	mov	r0, r3
 801a5de:	f001 fcfd 	bl	801bfdc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801a5e2:	4b07      	ldr	r3, [pc, #28]	@ (801a600 <RadioTxPrbs+0x30>)
 801a5e4:	212d      	movs	r1, #45	@ 0x2d
 801a5e6:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a5ea:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a5ec:	f000 ff27 	bl	801b43e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a5f0:	4804      	ldr	r0, [pc, #16]	@ (801a604 <RadioTxPrbs+0x34>)
 801a5f2:	f000 fe7d 	bl	801b2f0 <SUBGRF_SetTx>
}
 801a5f6:	bf00      	nop
 801a5f8:	bd80      	pop	{r7, pc}
 801a5fa:	bf00      	nop
 801a5fc:	20001e30 	.word	0x20001e30
 801a600:	08019f95 	.word	0x08019f95
 801a604:	000fffff 	.word	0x000fffff

0801a608 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a608:	b580      	push	{r7, lr}
 801a60a:	b084      	sub	sp, #16
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	4603      	mov	r3, r0
 801a610:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a616:	4618      	mov	r0, r3
 801a618:	f001 fd08 	bl	801c02c <SUBGRF_SetRfTxPower>
 801a61c:	4603      	mov	r3, r0
 801a61e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a620:	210e      	movs	r1, #14
 801a622:	f640 101f 	movw	r0, #2335	@ 0x91f
 801a626:	f001 fbcb 	bl	801bdc0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a62a:	7bfb      	ldrb	r3, [r7, #15]
 801a62c:	2101      	movs	r1, #1
 801a62e:	4618      	mov	r0, r3
 801a630:	f001 fcd4 	bl	801bfdc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a634:	f000 fefa 	bl	801b42c <SUBGRF_SetTxContinuousWave>
}
 801a638:	bf00      	nop
 801a63a:	3710      	adds	r7, #16
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bd80      	pop	{r7, pc}

0801a640 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a640:	b480      	push	{r7}
 801a642:	b089      	sub	sp, #36	@ 0x24
 801a644:	af00      	add	r7, sp, #0
 801a646:	60f8      	str	r0, [r7, #12]
 801a648:	60b9      	str	r1, [r7, #8]
 801a64a:	4613      	mov	r3, r2
 801a64c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a64e:	2300      	movs	r3, #0
 801a650:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801a652:	2300      	movs	r3, #0
 801a654:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801a656:	2300      	movs	r3, #0
 801a658:	61bb      	str	r3, [r7, #24]
 801a65a:	e011      	b.n	801a680 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a65c:	69bb      	ldr	r3, [r7, #24]
 801a65e:	68ba      	ldr	r2, [r7, #8]
 801a660:	4413      	add	r3, r2
 801a662:	781a      	ldrb	r2, [r3, #0]
 801a664:	69bb      	ldr	r3, [r7, #24]
 801a666:	68b9      	ldr	r1, [r7, #8]
 801a668:	440b      	add	r3, r1
 801a66a:	43d2      	mvns	r2, r2
 801a66c:	b2d2      	uxtb	r2, r2
 801a66e:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a670:	69bb      	ldr	r3, [r7, #24]
 801a672:	68fa      	ldr	r2, [r7, #12]
 801a674:	4413      	add	r3, r2
 801a676:	2200      	movs	r2, #0
 801a678:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a67a:	69bb      	ldr	r3, [r7, #24]
 801a67c:	3301      	adds	r3, #1
 801a67e:	61bb      	str	r3, [r7, #24]
 801a680:	79fb      	ldrb	r3, [r7, #7]
 801a682:	69ba      	ldr	r2, [r7, #24]
 801a684:	429a      	cmp	r2, r3
 801a686:	dbe9      	blt.n	801a65c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801a688:	2300      	movs	r3, #0
 801a68a:	61bb      	str	r3, [r7, #24]
 801a68c:	e049      	b.n	801a722 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a68e:	69bb      	ldr	r3, [r7, #24]
 801a690:	425a      	negs	r2, r3
 801a692:	f003 0307 	and.w	r3, r3, #7
 801a696:	f002 0207 	and.w	r2, r2, #7
 801a69a:	bf58      	it	pl
 801a69c:	4253      	negpl	r3, r2
 801a69e:	b2db      	uxtb	r3, r3
 801a6a0:	f1c3 0307 	rsb	r3, r3, #7
 801a6a4:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a6a6:	69bb      	ldr	r3, [r7, #24]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	da00      	bge.n	801a6ae <payload_integration+0x6e>
 801a6ac:	3307      	adds	r3, #7
 801a6ae:	10db      	asrs	r3, r3, #3
 801a6b0:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a6b2:	69bb      	ldr	r3, [r7, #24]
 801a6b4:	3301      	adds	r3, #1
 801a6b6:	425a      	negs	r2, r3
 801a6b8:	f003 0307 	and.w	r3, r3, #7
 801a6bc:	f002 0207 	and.w	r2, r2, #7
 801a6c0:	bf58      	it	pl
 801a6c2:	4253      	negpl	r3, r2
 801a6c4:	b2db      	uxtb	r3, r3
 801a6c6:	f1c3 0307 	rsb	r3, r3, #7
 801a6ca:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a6cc:	69bb      	ldr	r3, [r7, #24]
 801a6ce:	3301      	adds	r3, #1
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	da00      	bge.n	801a6d6 <payload_integration+0x96>
 801a6d4:	3307      	adds	r3, #7
 801a6d6:	10db      	asrs	r3, r3, #3
 801a6d8:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a6da:	7dbb      	ldrb	r3, [r7, #22]
 801a6dc:	68ba      	ldr	r2, [r7, #8]
 801a6de:	4413      	add	r3, r2
 801a6e0:	781b      	ldrb	r3, [r3, #0]
 801a6e2:	461a      	mov	r2, r3
 801a6e4:	7dfb      	ldrb	r3, [r7, #23]
 801a6e6:	fa42 f303 	asr.w	r3, r2, r3
 801a6ea:	b2db      	uxtb	r3, r3
 801a6ec:	f003 0301 	and.w	r3, r3, #1
 801a6f0:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a6f2:	7ffa      	ldrb	r2, [r7, #31]
 801a6f4:	7cfb      	ldrb	r3, [r7, #19]
 801a6f6:	4053      	eors	r3, r2
 801a6f8:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a6fa:	7d3b      	ldrb	r3, [r7, #20]
 801a6fc:	68fa      	ldr	r2, [r7, #12]
 801a6fe:	4413      	add	r3, r2
 801a700:	781b      	ldrb	r3, [r3, #0]
 801a702:	b25a      	sxtb	r2, r3
 801a704:	7ff9      	ldrb	r1, [r7, #31]
 801a706:	7d7b      	ldrb	r3, [r7, #21]
 801a708:	fa01 f303 	lsl.w	r3, r1, r3
 801a70c:	b25b      	sxtb	r3, r3
 801a70e:	4313      	orrs	r3, r2
 801a710:	b259      	sxtb	r1, r3
 801a712:	7d3b      	ldrb	r3, [r7, #20]
 801a714:	68fa      	ldr	r2, [r7, #12]
 801a716:	4413      	add	r3, r2
 801a718:	b2ca      	uxtb	r2, r1
 801a71a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801a71c:	69bb      	ldr	r3, [r7, #24]
 801a71e:	3301      	adds	r3, #1
 801a720:	61bb      	str	r3, [r7, #24]
 801a722:	79fb      	ldrb	r3, [r7, #7]
 801a724:	00db      	lsls	r3, r3, #3
 801a726:	69ba      	ldr	r2, [r7, #24]
 801a728:	429a      	cmp	r2, r3
 801a72a:	dbb0      	blt.n	801a68e <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a72c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801a730:	01db      	lsls	r3, r3, #7
 801a732:	b25a      	sxtb	r2, r3
 801a734:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801a738:	019b      	lsls	r3, r3, #6
 801a73a:	b25b      	sxtb	r3, r3
 801a73c:	4313      	orrs	r3, r2
 801a73e:	b25b      	sxtb	r3, r3
 801a740:	7ffa      	ldrb	r2, [r7, #31]
 801a742:	2a00      	cmp	r2, #0
 801a744:	d101      	bne.n	801a74a <payload_integration+0x10a>
 801a746:	2220      	movs	r2, #32
 801a748:	e000      	b.n	801a74c <payload_integration+0x10c>
 801a74a:	2200      	movs	r2, #0
 801a74c:	4313      	orrs	r3, r2
 801a74e:	b259      	sxtb	r1, r3
 801a750:	79fb      	ldrb	r3, [r7, #7]
 801a752:	68fa      	ldr	r2, [r7, #12]
 801a754:	4413      	add	r3, r2
 801a756:	b2ca      	uxtb	r2, r1
 801a758:	701a      	strb	r2, [r3, #0]
}
 801a75a:	bf00      	nop
 801a75c:	3724      	adds	r7, #36	@ 0x24
 801a75e:	46bd      	mov	sp, r7
 801a760:	bc80      	pop	{r7}
 801a762:	4770      	bx	lr

0801a764 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b08c      	sub	sp, #48	@ 0x30
 801a768:	af00      	add	r7, sp, #0
 801a76a:	60b9      	str	r1, [r7, #8]
 801a76c:	607a      	str	r2, [r7, #4]
 801a76e:	603b      	str	r3, [r7, #0]
 801a770:	4603      	mov	r3, r0
 801a772:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801a774:	2300      	movs	r3, #0
 801a776:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 801a778:	f107 0320 	add.w	r3, r7, #32
 801a77c:	2200      	movs	r2, #0
 801a77e:	601a      	str	r2, [r3, #0]
 801a780:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a782:	f001 fe1e 	bl	801c3c2 <RFW_DeInit>

    if( rxContinuous != 0 )
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d001      	beq.n	801a790 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 801a78c:	2300      	movs	r3, #0
 801a78e:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	2b00      	cmp	r3, #0
 801a794:	bf14      	ite	ne
 801a796:	2301      	movne	r3, #1
 801a798:	2300      	moveq	r3, #0
 801a79a:	b2da      	uxtb	r2, r3
 801a79c:	4ba3      	ldr	r3, [pc, #652]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a79e:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a7a0:	7bfb      	ldrb	r3, [r7, #15]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d003      	beq.n	801a7ae <RadioSetRxGenericConfig+0x4a>
 801a7a6:	2b01      	cmp	r3, #1
 801a7a8:	f000 80dc 	beq.w	801a964 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a7ac:	e195      	b.n	801aada <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a7ae:	68bb      	ldr	r3, [r7, #8]
 801a7b0:	689b      	ldr	r3, [r3, #8]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d003      	beq.n	801a7be <RadioSetRxGenericConfig+0x5a>
 801a7b6:	68bb      	ldr	r3, [r7, #8]
 801a7b8:	68db      	ldr	r3, [r3, #12]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d102      	bne.n	801a7c4 <RadioSetRxGenericConfig+0x60>
            return -1;
 801a7be:	f04f 33ff 	mov.w	r3, #4294967295
 801a7c2:	e18b      	b.n	801aadc <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 801a7c4:	68bb      	ldr	r3, [r7, #8]
 801a7c6:	7f9b      	ldrb	r3, [r3, #30]
 801a7c8:	2b08      	cmp	r3, #8
 801a7ca:	d902      	bls.n	801a7d2 <RadioSetRxGenericConfig+0x6e>
            return -1;
 801a7cc:	f04f 33ff 	mov.w	r3, #4294967295
 801a7d0:	e184      	b.n	801aadc <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a7d2:	68bb      	ldr	r3, [r7, #8]
 801a7d4:	6919      	ldr	r1, [r3, #16]
 801a7d6:	68bb      	ldr	r3, [r7, #8]
 801a7d8:	7f9b      	ldrb	r3, [r3, #30]
 801a7da:	461a      	mov	r2, r3
 801a7dc:	f107 0320 	add.w	r3, r7, #32
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	f001 fee1 	bl	801c5a8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a7e6:	68bb      	ldr	r3, [r7, #8]
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	bf14      	ite	ne
 801a7ee:	2301      	movne	r3, #1
 801a7f0:	2300      	moveq	r3, #0
 801a7f2:	b2db      	uxtb	r3, r3
 801a7f4:	4618      	mov	r0, r3
 801a7f6:	f000 fe2b 	bl	801b450 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a7fa:	4b8c      	ldr	r3, [pc, #560]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a7fc:	2200      	movs	r2, #0
 801a7fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a802:	68bb      	ldr	r3, [r7, #8]
 801a804:	689b      	ldr	r3, [r3, #8]
 801a806:	4a89      	ldr	r2, [pc, #548]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a808:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a80a:	68bb      	ldr	r3, [r7, #8]
 801a80c:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a810:	4b86      	ldr	r3, [pc, #536]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a816:	68bb      	ldr	r3, [r7, #8]
 801a818:	685b      	ldr	r3, [r3, #4]
 801a81a:	4618      	mov	r0, r3
 801a81c:	f001 fd04 	bl	801c228 <SUBGRF_GetFskBandwidthRegValue>
 801a820:	4603      	mov	r3, r0
 801a822:	461a      	mov	r2, r3
 801a824:	4b81      	ldr	r3, [pc, #516]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a82a:	4b80      	ldr	r3, [pc, #512]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a82c:	2200      	movs	r2, #0
 801a82e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	68db      	ldr	r3, [r3, #12]
 801a834:	b29b      	uxth	r3, r3
 801a836:	00db      	lsls	r3, r3, #3
 801a838:	b29a      	uxth	r2, r3
 801a83a:	4b7c      	ldr	r3, [pc, #496]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a83c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a83e:	68bb      	ldr	r3, [r7, #8]
 801a840:	7fda      	ldrb	r2, [r3, #31]
 801a842:	4b7a      	ldr	r3, [pc, #488]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a844:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a846:	68bb      	ldr	r3, [r7, #8]
 801a848:	7f9b      	ldrb	r3, [r3, #30]
 801a84a:	00db      	lsls	r3, r3, #3
 801a84c:	b2da      	uxtb	r2, r3
 801a84e:	4b77      	ldr	r3, [pc, #476]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a850:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a852:	68bb      	ldr	r3, [r7, #8]
 801a854:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801a858:	4b74      	ldr	r3, [pc, #464]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a85a:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a85c:	68bb      	ldr	r3, [r7, #8]
 801a85e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801a862:	2b00      	cmp	r3, #0
 801a864:	d105      	bne.n	801a872 <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a866:	68bb      	ldr	r3, [r7, #8]
 801a868:	695b      	ldr	r3, [r3, #20]
 801a86a:	b2da      	uxtb	r2, r3
 801a86c:	4b6f      	ldr	r3, [pc, #444]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a86e:	759a      	strb	r2, [r3, #22]
 801a870:	e00b      	b.n	801a88a <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801a878:	2b02      	cmp	r3, #2
 801a87a:	d103      	bne.n	801a884 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a87c:	4b6b      	ldr	r3, [pc, #428]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a87e:	22ff      	movs	r2, #255	@ 0xff
 801a880:	759a      	strb	r2, [r3, #22]
 801a882:	e002      	b.n	801a88a <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a884:	4b69      	ldr	r3, [pc, #420]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a886:	22ff      	movs	r2, #255	@ 0xff
 801a888:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a88a:	68bb      	ldr	r3, [r7, #8]
 801a88c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801a890:	2b02      	cmp	r3, #2
 801a892:	d004      	beq.n	801a89e <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a894:	68bb      	ldr	r3, [r7, #8]
 801a896:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801a89a:	2b02      	cmp	r3, #2
 801a89c:	d12d      	bne.n	801a8fa <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a89e:	68bb      	ldr	r3, [r7, #8]
 801a8a0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801a8a4:	2bf1      	cmp	r3, #241	@ 0xf1
 801a8a6:	d00c      	beq.n	801a8c2 <RadioSetRxGenericConfig+0x15e>
 801a8a8:	68bb      	ldr	r3, [r7, #8]
 801a8aa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801a8ae:	2bf2      	cmp	r3, #242	@ 0xf2
 801a8b0:	d007      	beq.n	801a8c2 <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a8b2:	68bb      	ldr	r3, [r7, #8]
 801a8b4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801a8b8:	2b01      	cmp	r3, #1
 801a8ba:	d002      	beq.n	801a8c2 <RadioSetRxGenericConfig+0x15e>
                return -1;
 801a8bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a8c0:	e10c      	b.n	801aadc <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 801a8c2:	2300      	movs	r3, #0
 801a8c4:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801a8c6:	68bb      	ldr	r3, [r7, #8]
 801a8c8:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a8ca:	4b59      	ldr	r3, [pc, #356]	@ (801aa30 <RadioSetRxGenericConfig+0x2cc>)
 801a8cc:	6819      	ldr	r1, [r3, #0]
 801a8ce:	f107 0314 	add.w	r3, r7, #20
 801a8d2:	4a58      	ldr	r2, [pc, #352]	@ (801aa34 <RadioSetRxGenericConfig+0x2d0>)
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	f001 fd67 	bl	801c3a8 <RFW_Init>
 801a8da:	4603      	mov	r3, r0
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d002      	beq.n	801a8e6 <RadioSetRxGenericConfig+0x182>
                return -1;
 801a8e0:	f04f 33ff 	mov.w	r3, #4294967295
 801a8e4:	e0fa      	b.n	801aadc <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a8e6:	4b51      	ldr	r3, [pc, #324]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a8e8:	2200      	movs	r2, #0
 801a8ea:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a8ec:	4b4f      	ldr	r3, [pc, #316]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a8ee:	2201      	movs	r2, #1
 801a8f0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a8f2:	4b4e      	ldr	r3, [pc, #312]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	755a      	strb	r2, [r3, #21]
        {
 801a8f8:	e00e      	b.n	801a918 <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a8fa:	68bb      	ldr	r3, [r7, #8]
 801a8fc:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801a900:	4b4a      	ldr	r3, [pc, #296]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a902:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a904:	68bb      	ldr	r3, [r7, #8]
 801a906:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801a90a:	4b48      	ldr	r3, [pc, #288]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a90c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a90e:	68bb      	ldr	r3, [r7, #8]
 801a910:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801a914:	4b45      	ldr	r3, [pc, #276]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a916:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a918:	f7ff fa3b 	bl	8019d92 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a91c:	2000      	movs	r0, #0
 801a91e:	f7fe fbcf 	bl	80190c0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a922:	4845      	ldr	r0, [pc, #276]	@ (801aa38 <RadioSetRxGenericConfig+0x2d4>)
 801a924:	f001 f838 	bl	801b998 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a928:	4844      	ldr	r0, [pc, #272]	@ (801aa3c <RadioSetRxGenericConfig+0x2d8>)
 801a92a:	f001 f903 	bl	801bb34 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a92e:	f107 0320 	add.w	r3, r7, #32
 801a932:	4618      	mov	r0, r3
 801a934:	f000 fbc3 	bl	801b0be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a938:	68bb      	ldr	r3, [r7, #8]
 801a93a:	8b9b      	ldrh	r3, [r3, #28]
 801a93c:	4618      	mov	r0, r3
 801a93e:	f000 fc0d 	bl	801b15c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a942:	68bb      	ldr	r3, [r7, #8]
 801a944:	8b1b      	ldrh	r3, [r3, #24]
 801a946:	4618      	mov	r0, r3
 801a948:	f000 fbe8 	bl	801b11c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a94c:	683b      	ldr	r3, [r7, #0]
 801a94e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801a952:	fb03 f202 	mul.w	r2, r3, r2
 801a956:	68bb      	ldr	r3, [r7, #8]
 801a958:	689b      	ldr	r3, [r3, #8]
 801a95a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a95e:	4a33      	ldr	r2, [pc, #204]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a960:	6093      	str	r3, [r2, #8]
        break;
 801a962:	e0ba      	b.n	801aada <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 801a964:	68bb      	ldr	r3, [r7, #8]
 801a966:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d102      	bne.n	801a972 <RadioSetRxGenericConfig+0x20e>
            return -1;
 801a96c:	f04f 33ff 	mov.w	r3, #4294967295
 801a970:	e0b4      	b.n	801aadc <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a972:	68bb      	ldr	r3, [r7, #8]
 801a974:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801a978:	2b01      	cmp	r3, #1
 801a97a:	d105      	bne.n	801a988 <RadioSetRxGenericConfig+0x224>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 801a97c:	68bb      	ldr	r3, [r7, #8]
 801a97e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801a982:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801a986:	e002      	b.n	801a98e <RadioSetRxGenericConfig+0x22a>
            MaxPayloadLength = 0xFF;
 801a988:	23ff      	movs	r3, #255	@ 0xff
 801a98a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a98e:	68bb      	ldr	r3, [r7, #8]
 801a990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a992:	2b00      	cmp	r3, #0
 801a994:	bf14      	ite	ne
 801a996:	2301      	movne	r3, #1
 801a998:	2300      	moveq	r3, #0
 801a99a:	b2db      	uxtb	r3, r3
 801a99c:	4618      	mov	r0, r3
 801a99e:	f000 fd57 	bl	801b450 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a9a2:	683b      	ldr	r3, [r7, #0]
 801a9a4:	b2db      	uxtb	r3, r3
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	f000 fd61 	bl	801b46e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a9ac:	4b1f      	ldr	r3, [pc, #124]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a9ae:	2201      	movs	r2, #1
 801a9b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a9b4:	68bb      	ldr	r3, [r7, #8]
 801a9b6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801a9ba:	4b1c      	ldr	r3, [pc, #112]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a9bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a9c0:	68bb      	ldr	r3, [r7, #8]
 801a9c2:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801a9c6:	4b19      	ldr	r3, [pc, #100]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a9c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a9cc:	68bb      	ldr	r3, [r7, #8]
 801a9ce:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801a9d2:	4b16      	ldr	r3, [pc, #88]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a9d4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801a9d8:	68bb      	ldr	r3, [r7, #8]
 801a9da:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a9de:	2b02      	cmp	r3, #2
 801a9e0:	d010      	beq.n	801aa04 <RadioSetRxGenericConfig+0x2a0>
 801a9e2:	2b02      	cmp	r3, #2
 801a9e4:	dc2c      	bgt.n	801aa40 <RadioSetRxGenericConfig+0x2dc>
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d002      	beq.n	801a9f0 <RadioSetRxGenericConfig+0x28c>
 801a9ea:	2b01      	cmp	r3, #1
 801a9ec:	d005      	beq.n	801a9fa <RadioSetRxGenericConfig+0x296>
            break;
 801a9ee:	e027      	b.n	801aa40 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a9f0:	4b0e      	ldr	r3, [pc, #56]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a9f8:	e023      	b.n	801aa42 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a9fa:	4b0c      	ldr	r3, [pc, #48]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801a9fc:	2201      	movs	r2, #1
 801a9fe:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801aa02:	e01e      	b.n	801aa42 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801aa04:	68bb      	ldr	r3, [r7, #8]
 801aa06:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801aa0a:	2b0b      	cmp	r3, #11
 801aa0c:	d004      	beq.n	801aa18 <RadioSetRxGenericConfig+0x2b4>
 801aa0e:	68bb      	ldr	r3, [r7, #8]
 801aa10:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801aa14:	2b0c      	cmp	r3, #12
 801aa16:	d104      	bne.n	801aa22 <RadioSetRxGenericConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801aa18:	4b04      	ldr	r3, [pc, #16]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801aa1a:	2201      	movs	r2, #1
 801aa1c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801aa20:	e00f      	b.n	801aa42 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801aa22:	4b02      	ldr	r3, [pc, #8]	@ (801aa2c <RadioSetRxGenericConfig+0x2c8>)
 801aa24:	2200      	movs	r2, #0
 801aa26:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801aa2a:	e00a      	b.n	801aa42 <RadioSetRxGenericConfig+0x2de>
 801aa2c:	20001e30 	.word	0x20001e30
 801aa30:	20001e2c 	.word	0x20001e2c
 801aa34:	20001ea4 	.word	0x20001ea4
 801aa38:	20001e68 	.word	0x20001e68
 801aa3c:	20001e3e 	.word	0x20001e3e
            break;
 801aa40:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801aa42:	4b28      	ldr	r3, [pc, #160]	@ (801aae4 <RadioSetRxGenericConfig+0x380>)
 801aa44:	2201      	movs	r2, #1
 801aa46:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801aa48:	68bb      	ldr	r3, [r7, #8]
 801aa4a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 801aa4c:	4b25      	ldr	r3, [pc, #148]	@ (801aae4 <RadioSetRxGenericConfig+0x380>)
 801aa4e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801aa50:	68bb      	ldr	r3, [r7, #8]
 801aa52:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 801aa56:	4b23      	ldr	r3, [pc, #140]	@ (801aae4 <RadioSetRxGenericConfig+0x380>)
 801aa58:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801aa5a:	4a22      	ldr	r2, [pc, #136]	@ (801aae4 <RadioSetRxGenericConfig+0x380>)
 801aa5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801aa60:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801aa62:	68bb      	ldr	r3, [r7, #8]
 801aa64:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 801aa68:	4b1e      	ldr	r3, [pc, #120]	@ (801aae4 <RadioSetRxGenericConfig+0x380>)
 801aa6a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801aa6e:	68bb      	ldr	r3, [r7, #8]
 801aa70:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 801aa74:	4b1b      	ldr	r3, [pc, #108]	@ (801aae4 <RadioSetRxGenericConfig+0x380>)
 801aa76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801aa7a:	f7ff f98a 	bl	8019d92 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801aa7e:	2001      	movs	r0, #1
 801aa80:	f7fe fb1e 	bl	80190c0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aa84:	4818      	ldr	r0, [pc, #96]	@ (801aae8 <RadioSetRxGenericConfig+0x384>)
 801aa86:	f000 ff87 	bl	801b998 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aa8a:	4818      	ldr	r0, [pc, #96]	@ (801aaec <RadioSetRxGenericConfig+0x388>)
 801aa8c:	f001 f852 	bl	801bb34 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801aa90:	4b14      	ldr	r3, [pc, #80]	@ (801aae4 <RadioSetRxGenericConfig+0x380>)
 801aa92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801aa96:	2b01      	cmp	r3, #1
 801aa98:	d10d      	bne.n	801aab6 <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801aa9a:	f240 7036 	movw	r0, #1846	@ 0x736
 801aa9e:	f001 f9b1 	bl	801be04 <SUBGRF_ReadRegister>
 801aaa2:	4603      	mov	r3, r0
 801aaa4:	f023 0304 	bic.w	r3, r3, #4
 801aaa8:	b2db      	uxtb	r3, r3
 801aaaa:	4619      	mov	r1, r3
 801aaac:	f240 7036 	movw	r0, #1846	@ 0x736
 801aab0:	f001 f986 	bl	801bdc0 <SUBGRF_WriteRegister>
 801aab4:	e00c      	b.n	801aad0 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801aab6:	f240 7036 	movw	r0, #1846	@ 0x736
 801aaba:	f001 f9a3 	bl	801be04 <SUBGRF_ReadRegister>
 801aabe:	4603      	mov	r3, r0
 801aac0:	f043 0304 	orr.w	r3, r3, #4
 801aac4:	b2db      	uxtb	r3, r3
 801aac6:	4619      	mov	r1, r3
 801aac8:	f240 7036 	movw	r0, #1846	@ 0x736
 801aacc:	f001 f978 	bl	801bdc0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801aad0:	4b04      	ldr	r3, [pc, #16]	@ (801aae4 <RadioSetRxGenericConfig+0x380>)
 801aad2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801aad6:	609a      	str	r2, [r3, #8]
        break;
 801aad8:	bf00      	nop
    }
    return status;
 801aada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801aadc:	4618      	mov	r0, r3
 801aade:	3730      	adds	r7, #48	@ 0x30
 801aae0:	46bd      	mov	sp, r7
 801aae2:	bd80      	pop	{r7, pc}
 801aae4:	20001e30 	.word	0x20001e30
 801aae8:	20001e68 	.word	0x20001e68
 801aaec:	20001e3e 	.word	0x20001e3e

0801aaf0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b08e      	sub	sp, #56	@ 0x38
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	60b9      	str	r1, [r7, #8]
 801aaf8:	607b      	str	r3, [r7, #4]
 801aafa:	4603      	mov	r3, r0
 801aafc:	73fb      	strb	r3, [r7, #15]
 801aafe:	4613      	mov	r3, r2
 801ab00:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801ab02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801ab06:	2200      	movs	r2, #0
 801ab08:	601a      	str	r2, [r3, #0]
 801ab0a:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801ab0c:	f001 fc59 	bl	801c3c2 <RFW_DeInit>
    switch( modem )
 801ab10:	7bfb      	ldrb	r3, [r7, #15]
 801ab12:	2b03      	cmp	r3, #3
 801ab14:	f200 8205 	bhi.w	801af22 <RadioSetTxGenericConfig+0x432>
 801ab18:	a201      	add	r2, pc, #4	@ (adr r2, 801ab20 <RadioSetTxGenericConfig+0x30>)
 801ab1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab1e:	bf00      	nop
 801ab20:	0801aca5 	.word	0x0801aca5
 801ab24:	0801aded 	.word	0x0801aded
 801ab28:	0801aee5 	.word	0x0801aee5
 801ab2c:	0801ab31 	.word	0x0801ab31
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801ab30:	68bb      	ldr	r3, [r7, #8]
 801ab32:	7c9b      	ldrb	r3, [r3, #18]
 801ab34:	2b08      	cmp	r3, #8
 801ab36:	d902      	bls.n	801ab3e <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 801ab38:	f04f 33ff 	mov.w	r3, #4294967295
 801ab3c:	e206      	b.n	801af4c <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801ab3e:	68bb      	ldr	r3, [r7, #8]
 801ab40:	6899      	ldr	r1, [r3, #8]
 801ab42:	68bb      	ldr	r3, [r7, #8]
 801ab44:	7c9b      	ldrb	r3, [r3, #18]
 801ab46:	461a      	mov	r2, r3
 801ab48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	f001 fd2b 	bl	801c5a8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801ab52:	68bb      	ldr	r3, [r7, #8]
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d102      	bne.n	801ab60 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 801ab5a:	f04f 33ff 	mov.w	r3, #4294967295
 801ab5e:	e1f5      	b.n	801af4c <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 801ab60:	68bb      	ldr	r3, [r7, #8]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	f242 7210 	movw	r2, #10000	@ 0x2710
 801ab68:	4293      	cmp	r3, r2
 801ab6a:	d813      	bhi.n	801ab94 <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801ab6c:	2302      	movs	r3, #2
 801ab6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801ab72:	4b99      	ldr	r3, [pc, #612]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ab74:	2203      	movs	r2, #3
 801ab76:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801ab78:	4b97      	ldr	r3, [pc, #604]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ab7a:	2203      	movs	r2, #3
 801ab7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801ab80:	68bb      	ldr	r3, [r7, #8]
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	4a94      	ldr	r2, [pc, #592]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ab86:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801ab88:	68bb      	ldr	r3, [r7, #8]
 801ab8a:	7cda      	ldrb	r2, [r3, #19]
 801ab8c:	4b92      	ldr	r3, [pc, #584]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ab8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801ab92:	e017      	b.n	801abc4 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801ab94:	2300      	movs	r3, #0
 801ab96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ab9a:	4b8f      	ldr	r3, [pc, #572]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ab9c:	2200      	movs	r2, #0
 801ab9e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801aba0:	4b8d      	ldr	r3, [pc, #564]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801aba2:	2200      	movs	r2, #0
 801aba4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801aba8:	68bb      	ldr	r3, [r7, #8]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	4a8a      	ldr	r2, [pc, #552]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801abae:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801abb0:	68bb      	ldr	r3, [r7, #8]
 801abb2:	7cda      	ldrb	r2, [r3, #19]
 801abb4:	4b88      	ldr	r3, [pc, #544]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801abb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801abba:	68bb      	ldr	r3, [r7, #8]
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	089b      	lsrs	r3, r3, #2
 801abc0:	4a85      	ldr	r2, [pc, #532]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801abc2:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801abc4:	68bb      	ldr	r3, [r7, #8]
 801abc6:	685b      	ldr	r3, [r3, #4]
 801abc8:	b29b      	uxth	r3, r3
 801abca:	00db      	lsls	r3, r3, #3
 801abcc:	b29a      	uxth	r2, r3
 801abce:	4b82      	ldr	r3, [pc, #520]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801abd0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801abd2:	4b81      	ldr	r3, [pc, #516]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801abd4:	2204      	movs	r2, #4
 801abd6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801abd8:	68bb      	ldr	r3, [r7, #8]
 801abda:	7c9b      	ldrb	r3, [r3, #18]
 801abdc:	00db      	lsls	r3, r3, #3
 801abde:	b2da      	uxtb	r2, r3
 801abe0:	4b7d      	ldr	r3, [pc, #500]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801abe2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801abe4:	4b7c      	ldr	r3, [pc, #496]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801abe6:	2200      	movs	r2, #0
 801abe8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801abea:	68bb      	ldr	r3, [r7, #8]
 801abec:	7d9b      	ldrb	r3, [r3, #22]
 801abee:	2b02      	cmp	r3, #2
 801abf0:	d003      	beq.n	801abfa <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801abf2:	68bb      	ldr	r3, [r7, #8]
 801abf4:	7d1b      	ldrb	r3, [r3, #20]
 801abf6:	2b02      	cmp	r3, #2
 801abf8:	d12b      	bne.n	801ac52 <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	7d5b      	ldrb	r3, [r3, #21]
 801abfe:	2bf1      	cmp	r3, #241	@ 0xf1
 801ac00:	d00a      	beq.n	801ac18 <RadioSetTxGenericConfig+0x128>
 801ac02:	68bb      	ldr	r3, [r7, #8]
 801ac04:	7d5b      	ldrb	r3, [r3, #21]
 801ac06:	2bf2      	cmp	r3, #242	@ 0xf2
 801ac08:	d006      	beq.n	801ac18 <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ac0a:	68bb      	ldr	r3, [r7, #8]
 801ac0c:	7d5b      	ldrb	r3, [r3, #21]
 801ac0e:	2b01      	cmp	r3, #1
 801ac10:	d002      	beq.n	801ac18 <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 801ac12:	f04f 33ff 	mov.w	r3, #4294967295
 801ac16:	e199      	b.n	801af4c <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801ac18:	68bb      	ldr	r3, [r7, #8]
 801ac1a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801ac1c:	2301      	movs	r3, #1
 801ac1e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801ac22:	4b6e      	ldr	r3, [pc, #440]	@ (801addc <RadioSetTxGenericConfig+0x2ec>)
 801ac24:	6819      	ldr	r1, [r3, #0]
 801ac26:	f107 0320 	add.w	r3, r7, #32
 801ac2a:	4a6d      	ldr	r2, [pc, #436]	@ (801ade0 <RadioSetTxGenericConfig+0x2f0>)
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	f001 fbbb 	bl	801c3a8 <RFW_Init>
 801ac32:	4603      	mov	r3, r0
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d002      	beq.n	801ac3e <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 801ac38:	f04f 33ff 	mov.w	r3, #4294967295
 801ac3c:	e186      	b.n	801af4c <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ac3e:	4b66      	ldr	r3, [pc, #408]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ac40:	2200      	movs	r2, #0
 801ac42:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ac44:	4b64      	ldr	r3, [pc, #400]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ac46:	2201      	movs	r2, #1
 801ac48:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ac4a:	4b63      	ldr	r3, [pc, #396]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ac4c:	2200      	movs	r2, #0
 801ac4e:	755a      	strb	r2, [r3, #21]
        {
 801ac50:	e00b      	b.n	801ac6a <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801ac52:	68bb      	ldr	r3, [r7, #8]
 801ac54:	7d5a      	ldrb	r2, [r3, #21]
 801ac56:	4b60      	ldr	r3, [pc, #384]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ac58:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801ac5a:	68bb      	ldr	r3, [r7, #8]
 801ac5c:	7d9a      	ldrb	r2, [r3, #22]
 801ac5e:	4b5e      	ldr	r3, [pc, #376]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ac60:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801ac62:	68bb      	ldr	r3, [r7, #8]
 801ac64:	7d1a      	ldrb	r2, [r3, #20]
 801ac66:	4b5c      	ldr	r3, [pc, #368]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ac68:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801ac6a:	f7ff f892 	bl	8019d92 <RadioStandby>
        RadioSetModem( radio_modem );
 801ac6e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801ac72:	4618      	mov	r0, r3
 801ac74:	f7fe fa24 	bl	80190c0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ac78:	485a      	ldr	r0, [pc, #360]	@ (801ade4 <RadioSetTxGenericConfig+0x2f4>)
 801ac7a:	f000 fe8d 	bl	801b998 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac7e:	485a      	ldr	r0, [pc, #360]	@ (801ade8 <RadioSetTxGenericConfig+0x2f8>)
 801ac80:	f000 ff58 	bl	801bb34 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801ac84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801ac88:	4618      	mov	r0, r3
 801ac8a:	f000 fa18 	bl	801b0be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801ac8e:	68bb      	ldr	r3, [r7, #8]
 801ac90:	8a1b      	ldrh	r3, [r3, #16]
 801ac92:	4618      	mov	r0, r3
 801ac94:	f000 fa62 	bl	801b15c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801ac98:	68bb      	ldr	r3, [r7, #8]
 801ac9a:	899b      	ldrh	r3, [r3, #12]
 801ac9c:	4618      	mov	r0, r3
 801ac9e:	f000 fa3d 	bl	801b11c <SUBGRF_SetCrcPolynomial>
        break;
 801aca2:	e13f      	b.n	801af24 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801aca4:	68bb      	ldr	r3, [r7, #8]
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d102      	bne.n	801acb2 <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 801acac:	f04f 33ff 	mov.w	r3, #4294967295
 801acb0:	e14c      	b.n	801af4c <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 801acb2:	68bb      	ldr	r3, [r7, #8]
 801acb4:	7c9b      	ldrb	r3, [r3, #18]
 801acb6:	2b08      	cmp	r3, #8
 801acb8:	d902      	bls.n	801acc0 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 801acba:	f04f 33ff 	mov.w	r3, #4294967295
 801acbe:	e145      	b.n	801af4c <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801acc0:	68bb      	ldr	r3, [r7, #8]
 801acc2:	6899      	ldr	r1, [r3, #8]
 801acc4:	68bb      	ldr	r3, [r7, #8]
 801acc6:	7c9b      	ldrb	r3, [r3, #18]
 801acc8:	461a      	mov	r2, r3
 801acca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801acce:	4618      	mov	r0, r3
 801acd0:	f001 fc6a 	bl	801c5a8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801acd4:	4b40      	ldr	r3, [pc, #256]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801acd6:	2200      	movs	r2, #0
 801acd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801acdc:	68bb      	ldr	r3, [r7, #8]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	4a3d      	ldr	r2, [pc, #244]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ace2:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801ace4:	68bb      	ldr	r3, [r7, #8]
 801ace6:	7cda      	ldrb	r2, [r3, #19]
 801ace8:	4b3b      	ldr	r3, [pc, #236]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801acea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801acee:	68bb      	ldr	r3, [r7, #8]
 801acf0:	699b      	ldr	r3, [r3, #24]
 801acf2:	4a39      	ldr	r2, [pc, #228]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801acf4:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801acf6:	4b38      	ldr	r3, [pc, #224]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801acf8:	2200      	movs	r2, #0
 801acfa:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801acfc:	68bb      	ldr	r3, [r7, #8]
 801acfe:	685b      	ldr	r3, [r3, #4]
 801ad00:	b29b      	uxth	r3, r3
 801ad02:	00db      	lsls	r3, r3, #3
 801ad04:	b29a      	uxth	r2, r3
 801ad06:	4b34      	ldr	r3, [pc, #208]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ad08:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801ad0a:	4b33      	ldr	r3, [pc, #204]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ad0c:	2204      	movs	r2, #4
 801ad0e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ad10:	68bb      	ldr	r3, [r7, #8]
 801ad12:	7c9b      	ldrb	r3, [r3, #18]
 801ad14:	00db      	lsls	r3, r3, #3
 801ad16:	b2da      	uxtb	r2, r3
 801ad18:	4b2f      	ldr	r3, [pc, #188]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ad1a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801ad1c:	4b2e      	ldr	r3, [pc, #184]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ad1e:	2200      	movs	r2, #0
 801ad20:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801ad22:	68bb      	ldr	r3, [r7, #8]
 801ad24:	7d9b      	ldrb	r3, [r3, #22]
 801ad26:	2b02      	cmp	r3, #2
 801ad28:	d003      	beq.n	801ad32 <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ad2a:	68bb      	ldr	r3, [r7, #8]
 801ad2c:	7d1b      	ldrb	r3, [r3, #20]
 801ad2e:	2b02      	cmp	r3, #2
 801ad30:	d12a      	bne.n	801ad88 <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801ad32:	68bb      	ldr	r3, [r7, #8]
 801ad34:	7d5b      	ldrb	r3, [r3, #21]
 801ad36:	2bf1      	cmp	r3, #241	@ 0xf1
 801ad38:	d00a      	beq.n	801ad50 <RadioSetTxGenericConfig+0x260>
 801ad3a:	68bb      	ldr	r3, [r7, #8]
 801ad3c:	7d5b      	ldrb	r3, [r3, #21]
 801ad3e:	2bf2      	cmp	r3, #242	@ 0xf2
 801ad40:	d006      	beq.n	801ad50 <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ad42:	68bb      	ldr	r3, [r7, #8]
 801ad44:	7d5b      	ldrb	r3, [r3, #21]
 801ad46:	2b01      	cmp	r3, #1
 801ad48:	d002      	beq.n	801ad50 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 801ad4a:	f04f 33ff 	mov.w	r3, #4294967295
 801ad4e:	e0fd      	b.n	801af4c <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801ad50:	2301      	movs	r3, #1
 801ad52:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801ad54:	68bb      	ldr	r3, [r7, #8]
 801ad56:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801ad58:	4b20      	ldr	r3, [pc, #128]	@ (801addc <RadioSetTxGenericConfig+0x2ec>)
 801ad5a:	6819      	ldr	r1, [r3, #0]
 801ad5c:	f107 0314 	add.w	r3, r7, #20
 801ad60:	4a1f      	ldr	r2, [pc, #124]	@ (801ade0 <RadioSetTxGenericConfig+0x2f0>)
 801ad62:	4618      	mov	r0, r3
 801ad64:	f001 fb20 	bl	801c3a8 <RFW_Init>
 801ad68:	4603      	mov	r3, r0
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d002      	beq.n	801ad74 <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 801ad6e:	f04f 33ff 	mov.w	r3, #4294967295
 801ad72:	e0eb      	b.n	801af4c <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ad74:	4b18      	ldr	r3, [pc, #96]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ad76:	2200      	movs	r2, #0
 801ad78:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ad7a:	4b17      	ldr	r3, [pc, #92]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ad7c:	2201      	movs	r2, #1
 801ad7e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ad80:	4b15      	ldr	r3, [pc, #84]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ad82:	2200      	movs	r2, #0
 801ad84:	755a      	strb	r2, [r3, #21]
        {
 801ad86:	e00b      	b.n	801ada0 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801ad88:	68bb      	ldr	r3, [r7, #8]
 801ad8a:	7d5a      	ldrb	r2, [r3, #21]
 801ad8c:	4b12      	ldr	r3, [pc, #72]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ad8e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801ad90:	68bb      	ldr	r3, [r7, #8]
 801ad92:	7d9a      	ldrb	r2, [r3, #22]
 801ad94:	4b10      	ldr	r3, [pc, #64]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ad96:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801ad98:	68bb      	ldr	r3, [r7, #8]
 801ad9a:	7d1a      	ldrb	r2, [r3, #20]
 801ad9c:	4b0e      	ldr	r3, [pc, #56]	@ (801add8 <RadioSetTxGenericConfig+0x2e8>)
 801ad9e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801ada0:	f7fe fff7 	bl	8019d92 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801ada4:	2000      	movs	r0, #0
 801ada6:	f7fe f98b 	bl	80190c0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801adaa:	480e      	ldr	r0, [pc, #56]	@ (801ade4 <RadioSetTxGenericConfig+0x2f4>)
 801adac:	f000 fdf4 	bl	801b998 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801adb0:	480d      	ldr	r0, [pc, #52]	@ (801ade8 <RadioSetTxGenericConfig+0x2f8>)
 801adb2:	f000 febf 	bl	801bb34 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801adb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801adba:	4618      	mov	r0, r3
 801adbc:	f000 f97f 	bl	801b0be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801adc0:	68bb      	ldr	r3, [r7, #8]
 801adc2:	8a1b      	ldrh	r3, [r3, #16]
 801adc4:	4618      	mov	r0, r3
 801adc6:	f000 f9c9 	bl	801b15c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801adca:	68bb      	ldr	r3, [r7, #8]
 801adcc:	899b      	ldrh	r3, [r3, #12]
 801adce:	4618      	mov	r0, r3
 801add0:	f000 f9a4 	bl	801b11c <SUBGRF_SetCrcPolynomial>
        break;
 801add4:	e0a6      	b.n	801af24 <RadioSetTxGenericConfig+0x434>
 801add6:	bf00      	nop
 801add8:	20001e30 	.word	0x20001e30
 801addc:	20001e2c 	.word	0x20001e2c
 801ade0:	20001e8c 	.word	0x20001e8c
 801ade4:	20001e68 	.word	0x20001e68
 801ade8:	20001e3e 	.word	0x20001e3e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801adec:	4b59      	ldr	r3, [pc, #356]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801adee:	2201      	movs	r2, #1
 801adf0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801adf4:	68bb      	ldr	r3, [r7, #8]
 801adf6:	781a      	ldrb	r2, [r3, #0]
 801adf8:	4b56      	ldr	r3, [pc, #344]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801adfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801adfe:	68bb      	ldr	r3, [r7, #8]
 801ae00:	785a      	ldrb	r2, [r3, #1]
 801ae02:	4b54      	ldr	r3, [pc, #336]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801ae04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801ae08:	68bb      	ldr	r3, [r7, #8]
 801ae0a:	789a      	ldrb	r2, [r3, #2]
 801ae0c:	4b51      	ldr	r3, [pc, #324]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801ae0e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801ae12:	68bb      	ldr	r3, [r7, #8]
 801ae14:	78db      	ldrb	r3, [r3, #3]
 801ae16:	2b02      	cmp	r3, #2
 801ae18:	d010      	beq.n	801ae3c <RadioSetTxGenericConfig+0x34c>
 801ae1a:	2b02      	cmp	r3, #2
 801ae1c:	dc20      	bgt.n	801ae60 <RadioSetTxGenericConfig+0x370>
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d002      	beq.n	801ae28 <RadioSetTxGenericConfig+0x338>
 801ae22:	2b01      	cmp	r3, #1
 801ae24:	d005      	beq.n	801ae32 <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801ae26:	e01b      	b.n	801ae60 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ae28:	4b4a      	ldr	r3, [pc, #296]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801ae2a:	2200      	movs	r2, #0
 801ae2c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801ae30:	e017      	b.n	801ae62 <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ae32:	4b48      	ldr	r3, [pc, #288]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801ae34:	2201      	movs	r2, #1
 801ae36:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801ae3a:	e012      	b.n	801ae62 <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801ae3c:	68bb      	ldr	r3, [r7, #8]
 801ae3e:	781b      	ldrb	r3, [r3, #0]
 801ae40:	2b0b      	cmp	r3, #11
 801ae42:	d003      	beq.n	801ae4c <RadioSetTxGenericConfig+0x35c>
 801ae44:	68bb      	ldr	r3, [r7, #8]
 801ae46:	781b      	ldrb	r3, [r3, #0]
 801ae48:	2b0c      	cmp	r3, #12
 801ae4a:	d104      	bne.n	801ae56 <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ae4c:	4b41      	ldr	r3, [pc, #260]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801ae4e:	2201      	movs	r2, #1
 801ae50:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801ae54:	e005      	b.n	801ae62 <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ae56:	4b3f      	ldr	r3, [pc, #252]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801ae58:	2200      	movs	r2, #0
 801ae5a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801ae5e:	e000      	b.n	801ae62 <RadioSetTxGenericConfig+0x372>
            break;
 801ae60:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ae62:	4b3c      	ldr	r3, [pc, #240]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801ae64:	2201      	movs	r2, #1
 801ae66:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801ae68:	68bb      	ldr	r3, [r7, #8]
 801ae6a:	889a      	ldrh	r2, [r3, #4]
 801ae6c:	4b39      	ldr	r3, [pc, #228]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801ae6e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801ae70:	68bb      	ldr	r3, [r7, #8]
 801ae72:	799a      	ldrb	r2, [r3, #6]
 801ae74:	4b37      	ldr	r3, [pc, #220]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801ae76:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801ae78:	68bb      	ldr	r3, [r7, #8]
 801ae7a:	79da      	ldrb	r2, [r3, #7]
 801ae7c:	4b35      	ldr	r3, [pc, #212]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801ae7e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801ae82:	68bb      	ldr	r3, [r7, #8]
 801ae84:	7a1a      	ldrb	r2, [r3, #8]
 801ae86:	4b33      	ldr	r3, [pc, #204]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801ae88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 801ae8c:	f7fe ff81 	bl	8019d92 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ae90:	2001      	movs	r0, #1
 801ae92:	f7fe f915 	bl	80190c0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ae96:	4830      	ldr	r0, [pc, #192]	@ (801af58 <RadioSetTxGenericConfig+0x468>)
 801ae98:	f000 fd7e 	bl	801b998 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae9c:	482f      	ldr	r0, [pc, #188]	@ (801af5c <RadioSetTxGenericConfig+0x46c>)
 801ae9e:	f000 fe49 	bl	801bb34 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801aea2:	4b2c      	ldr	r3, [pc, #176]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801aea4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801aea8:	2b06      	cmp	r3, #6
 801aeaa:	d10d      	bne.n	801aec8 <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801aeac:	f640 0089 	movw	r0, #2185	@ 0x889
 801aeb0:	f000 ffa8 	bl	801be04 <SUBGRF_ReadRegister>
 801aeb4:	4603      	mov	r3, r0
 801aeb6:	f023 0304 	bic.w	r3, r3, #4
 801aeba:	b2db      	uxtb	r3, r3
 801aebc:	4619      	mov	r1, r3
 801aebe:	f640 0089 	movw	r0, #2185	@ 0x889
 801aec2:	f000 ff7d 	bl	801bdc0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801aec6:	e02d      	b.n	801af24 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801aec8:	f640 0089 	movw	r0, #2185	@ 0x889
 801aecc:	f000 ff9a 	bl	801be04 <SUBGRF_ReadRegister>
 801aed0:	4603      	mov	r3, r0
 801aed2:	f043 0304 	orr.w	r3, r3, #4
 801aed6:	b2db      	uxtb	r3, r3
 801aed8:	4619      	mov	r1, r3
 801aeda:	f640 0089 	movw	r0, #2185	@ 0x889
 801aede:	f000 ff6f 	bl	801bdc0 <SUBGRF_WriteRegister>
        break;
 801aee2:	e01f      	b.n	801af24 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801aee4:	68bb      	ldr	r3, [r7, #8]
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d004      	beq.n	801aef6 <RadioSetTxGenericConfig+0x406>
 801aeec:	68bb      	ldr	r3, [r7, #8]
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801aef4:	d902      	bls.n	801aefc <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 801aef6:	f04f 33ff 	mov.w	r3, #4294967295
 801aefa:	e027      	b.n	801af4c <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 801aefc:	2003      	movs	r0, #3
 801aefe:	f7fe f8df 	bl	80190c0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801af02:	4b14      	ldr	r3, [pc, #80]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801af04:	2202      	movs	r2, #2
 801af06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801af0a:	68bb      	ldr	r3, [r7, #8]
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	4a11      	ldr	r2, [pc, #68]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801af10:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801af12:	4b10      	ldr	r3, [pc, #64]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801af14:	2216      	movs	r2, #22
 801af16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801af1a:	480f      	ldr	r0, [pc, #60]	@ (801af58 <RadioSetTxGenericConfig+0x468>)
 801af1c:	f000 fd3c 	bl	801b998 <SUBGRF_SetModulationParams>
        break;
 801af20:	e000      	b.n	801af24 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 801af22:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801af24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801af28:	4618      	mov	r0, r3
 801af2a:	f001 f87f 	bl	801c02c <SUBGRF_SetRfTxPower>
 801af2e:	4603      	mov	r3, r0
 801af30:	461a      	mov	r2, r3
 801af32:	4b08      	ldr	r3, [pc, #32]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801af34:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801af38:	4b06      	ldr	r3, [pc, #24]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801af3a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801af3e:	4618      	mov	r0, r3
 801af40:	f001 fa53 	bl	801c3ea <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801af44:	4a03      	ldr	r2, [pc, #12]	@ (801af54 <RadioSetTxGenericConfig+0x464>)
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	6053      	str	r3, [r2, #4]
    return 0;
 801af4a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801af4c:	4618      	mov	r0, r3
 801af4e:	3738      	adds	r7, #56	@ 0x38
 801af50:	46bd      	mov	sp, r7
 801af52:	bd80      	pop	{r7, pc}
 801af54:	20001e30 	.word	0x20001e30
 801af58:	20001e68 	.word	0x20001e68
 801af5c:	20001e3e 	.word	0x20001e3e

0801af60 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801af60:	b480      	push	{r7}
 801af62:	b085      	sub	sp, #20
 801af64:	af00      	add	r7, sp, #0
 801af66:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801af68:	2301      	movs	r3, #1
 801af6a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801af6c:	7bfb      	ldrb	r3, [r7, #15]
}
 801af6e:	4618      	mov	r0, r3
 801af70:	3714      	adds	r7, #20
 801af72:	46bd      	mov	sp, r7
 801af74:	bc80      	pop	{r7}
 801af76:	4770      	bx	lr

0801af78 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801af78:	b480      	push	{r7}
 801af7a:	b083      	sub	sp, #12
 801af7c:	af00      	add	r7, sp, #0
 801af7e:	6078      	str	r0, [r7, #4]
 801af80:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801af82:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801af84:	4618      	mov	r0, r3
 801af86:	370c      	adds	r7, #12
 801af88:	46bd      	mov	sp, r7
 801af8a:	bc80      	pop	{r7}
 801af8c:	4770      	bx	lr
	...

0801af90 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801af90:	b580      	push	{r7, lr}
 801af92:	b084      	sub	sp, #16
 801af94:	af00      	add	r7, sp, #0
 801af96:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d002      	beq.n	801afa4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801af9e:	4a1d      	ldr	r2, [pc, #116]	@ (801b014 <SUBGRF_Init+0x84>)
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801afa4:	f7e7 fa90 	bl	80024c8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801afa8:	2002      	movs	r0, #2
 801afaa:	f001 f91b 	bl	801c1e4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801afae:	4b1a      	ldr	r3, [pc, #104]	@ (801b018 <SUBGRF_Init+0x88>)
 801afb0:	2200      	movs	r2, #0
 801afb2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801afb4:	2000      	movs	r0, #0
 801afb6:	f000 f97f 	bl	801b2b8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801afba:	f7f1 fab7 	bl	800c52c <RBI_IsTCXO>
 801afbe:	4603      	mov	r3, r0
 801afc0:	2b01      	cmp	r3, #1
 801afc2:	d10e      	bne.n	801afe2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801afc4:	2140      	movs	r1, #64	@ 0x40
 801afc6:	2001      	movs	r0, #1
 801afc8:	f000 fb8a 	bl	801b6e0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801afcc:	2100      	movs	r1, #0
 801afce:	f640 1011 	movw	r0, #2321	@ 0x911
 801afd2:	f000 fef5 	bl	801bdc0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801afd6:	237f      	movs	r3, #127	@ 0x7f
 801afd8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801afda:	7b38      	ldrb	r0, [r7, #12]
 801afdc:	f000 fa8d 	bl	801b4fa <SUBGRF_Calibrate>
 801afe0:	e009      	b.n	801aff6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801afe2:	2120      	movs	r1, #32
 801afe4:	f640 1011 	movw	r0, #2321	@ 0x911
 801afe8:	f000 feea 	bl	801bdc0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801afec:	2120      	movs	r1, #32
 801afee:	f640 1012 	movw	r0, #2322	@ 0x912
 801aff2:	f000 fee5 	bl	801bdc0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801aff6:	210e      	movs	r1, #14
 801aff8:	f640 101f 	movw	r0, #2335	@ 0x91f
 801affc:	f000 fee0 	bl	801bdc0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801b000:	f7f1 fa78 	bl	800c4f4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801b004:	4b05      	ldr	r3, [pc, #20]	@ (801b01c <SUBGRF_Init+0x8c>)
 801b006:	2201      	movs	r2, #1
 801b008:	701a      	strb	r2, [r3, #0]
}
 801b00a:	bf00      	nop
 801b00c:	3710      	adds	r7, #16
 801b00e:	46bd      	mov	sp, r7
 801b010:	bd80      	pop	{r7, pc}
 801b012:	bf00      	nop
 801b014:	20001ec8 	.word	0x20001ec8
 801b018:	20001ec4 	.word	0x20001ec4
 801b01c:	20001ebc 	.word	0x20001ebc

0801b020 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801b020:	b480      	push	{r7}
 801b022:	af00      	add	r7, sp, #0
    return OperatingMode;
 801b024:	4b02      	ldr	r3, [pc, #8]	@ (801b030 <SUBGRF_GetOperatingMode+0x10>)
 801b026:	781b      	ldrb	r3, [r3, #0]
}
 801b028:	4618      	mov	r0, r3
 801b02a:	46bd      	mov	sp, r7
 801b02c:	bc80      	pop	{r7}
 801b02e:	4770      	bx	lr
 801b030:	20001ebc 	.word	0x20001ebc

0801b034 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801b034:	b580      	push	{r7, lr}
 801b036:	b082      	sub	sp, #8
 801b038:	af00      	add	r7, sp, #0
 801b03a:	6078      	str	r0, [r7, #4]
 801b03c:	460b      	mov	r3, r1
 801b03e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801b040:	78fb      	ldrb	r3, [r7, #3]
 801b042:	461a      	mov	r2, r3
 801b044:	6879      	ldr	r1, [r7, #4]
 801b046:	2000      	movs	r0, #0
 801b048:	f000 ff40 	bl	801becc <SUBGRF_WriteBuffer>
}
 801b04c:	bf00      	nop
 801b04e:	3708      	adds	r7, #8
 801b050:	46bd      	mov	sp, r7
 801b052:	bd80      	pop	{r7, pc}

0801b054 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801b054:	b580      	push	{r7, lr}
 801b056:	b086      	sub	sp, #24
 801b058:	af00      	add	r7, sp, #0
 801b05a:	60f8      	str	r0, [r7, #12]
 801b05c:	60b9      	str	r1, [r7, #8]
 801b05e:	4613      	mov	r3, r2
 801b060:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801b062:	2300      	movs	r3, #0
 801b064:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801b066:	f107 0317 	add.w	r3, r7, #23
 801b06a:	4619      	mov	r1, r3
 801b06c:	68b8      	ldr	r0, [r7, #8]
 801b06e:	f000 fe29 	bl	801bcc4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801b072:	68bb      	ldr	r3, [r7, #8]
 801b074:	781b      	ldrb	r3, [r3, #0]
 801b076:	79fa      	ldrb	r2, [r7, #7]
 801b078:	429a      	cmp	r2, r3
 801b07a:	d201      	bcs.n	801b080 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801b07c:	2301      	movs	r3, #1
 801b07e:	e007      	b.n	801b090 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801b080:	7df8      	ldrb	r0, [r7, #23]
 801b082:	68bb      	ldr	r3, [r7, #8]
 801b084:	781b      	ldrb	r3, [r3, #0]
 801b086:	461a      	mov	r2, r3
 801b088:	68f9      	ldr	r1, [r7, #12]
 801b08a:	f000 ff41 	bl	801bf10 <SUBGRF_ReadBuffer>

    return 0;
 801b08e:	2300      	movs	r3, #0
}
 801b090:	4618      	mov	r0, r3
 801b092:	3718      	adds	r7, #24
 801b094:	46bd      	mov	sp, r7
 801b096:	bd80      	pop	{r7, pc}

0801b098 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801b098:	b580      	push	{r7, lr}
 801b09a:	b084      	sub	sp, #16
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	60f8      	str	r0, [r7, #12]
 801b0a0:	460b      	mov	r3, r1
 801b0a2:	607a      	str	r2, [r7, #4]
 801b0a4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801b0a6:	7afb      	ldrb	r3, [r7, #11]
 801b0a8:	4619      	mov	r1, r3
 801b0aa:	68f8      	ldr	r0, [r7, #12]
 801b0ac:	f7ff ffc2 	bl	801b034 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801b0b0:	6878      	ldr	r0, [r7, #4]
 801b0b2:	f000 f91d 	bl	801b2f0 <SUBGRF_SetTx>
}
 801b0b6:	bf00      	nop
 801b0b8:	3710      	adds	r7, #16
 801b0ba:	46bd      	mov	sp, r7
 801b0bc:	bd80      	pop	{r7, pc}

0801b0be <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801b0be:	b580      	push	{r7, lr}
 801b0c0:	b082      	sub	sp, #8
 801b0c2:	af00      	add	r7, sp, #0
 801b0c4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801b0c6:	2208      	movs	r2, #8
 801b0c8:	6879      	ldr	r1, [r7, #4]
 801b0ca:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801b0ce:	f000 feb9 	bl	801be44 <SUBGRF_WriteRegisters>
    return 0;
 801b0d2:	2300      	movs	r3, #0
}
 801b0d4:	4618      	mov	r0, r3
 801b0d6:	3708      	adds	r7, #8
 801b0d8:	46bd      	mov	sp, r7
 801b0da:	bd80      	pop	{r7, pc}

0801b0dc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	b084      	sub	sp, #16
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	4603      	mov	r3, r0
 801b0e4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801b0e6:	88fb      	ldrh	r3, [r7, #6]
 801b0e8:	0a1b      	lsrs	r3, r3, #8
 801b0ea:	b29b      	uxth	r3, r3
 801b0ec:	b2db      	uxtb	r3, r3
 801b0ee:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801b0f0:	88fb      	ldrh	r3, [r7, #6]
 801b0f2:	b2db      	uxtb	r3, r3
 801b0f4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b0f6:	f000 fb77 	bl	801b7e8 <SUBGRF_GetPacketType>
 801b0fa:	4603      	mov	r3, r0
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d108      	bne.n	801b112 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801b100:	f107 030c 	add.w	r3, r7, #12
 801b104:	2202      	movs	r2, #2
 801b106:	4619      	mov	r1, r3
 801b108:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801b10c:	f000 fe9a 	bl	801be44 <SUBGRF_WriteRegisters>
            break;
 801b110:	e000      	b.n	801b114 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801b112:	bf00      	nop
    }
}
 801b114:	bf00      	nop
 801b116:	3710      	adds	r7, #16
 801b118:	46bd      	mov	sp, r7
 801b11a:	bd80      	pop	{r7, pc}

0801b11c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801b11c:	b580      	push	{r7, lr}
 801b11e:	b084      	sub	sp, #16
 801b120:	af00      	add	r7, sp, #0
 801b122:	4603      	mov	r3, r0
 801b124:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801b126:	88fb      	ldrh	r3, [r7, #6]
 801b128:	0a1b      	lsrs	r3, r3, #8
 801b12a:	b29b      	uxth	r3, r3
 801b12c:	b2db      	uxtb	r3, r3
 801b12e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801b130:	88fb      	ldrh	r3, [r7, #6]
 801b132:	b2db      	uxtb	r3, r3
 801b134:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b136:	f000 fb57 	bl	801b7e8 <SUBGRF_GetPacketType>
 801b13a:	4603      	mov	r3, r0
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d108      	bne.n	801b152 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801b140:	f107 030c 	add.w	r3, r7, #12
 801b144:	2202      	movs	r2, #2
 801b146:	4619      	mov	r1, r3
 801b148:	f240 60be 	movw	r0, #1726	@ 0x6be
 801b14c:	f000 fe7a 	bl	801be44 <SUBGRF_WriteRegisters>
            break;
 801b150:	e000      	b.n	801b154 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801b152:	bf00      	nop
    }
}
 801b154:	bf00      	nop
 801b156:	3710      	adds	r7, #16
 801b158:	46bd      	mov	sp, r7
 801b15a:	bd80      	pop	{r7, pc}

0801b15c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801b15c:	b580      	push	{r7, lr}
 801b15e:	b084      	sub	sp, #16
 801b160:	af00      	add	r7, sp, #0
 801b162:	4603      	mov	r3, r0
 801b164:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801b166:	2300      	movs	r3, #0
 801b168:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801b16a:	f000 fb3d 	bl	801b7e8 <SUBGRF_GetPacketType>
 801b16e:	4603      	mov	r3, r0
 801b170:	2b00      	cmp	r3, #0
 801b172:	d121      	bne.n	801b1b8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801b174:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801b178:	f000 fe44 	bl	801be04 <SUBGRF_ReadRegister>
 801b17c:	4603      	mov	r3, r0
 801b17e:	f023 0301 	bic.w	r3, r3, #1
 801b182:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801b184:	88fb      	ldrh	r3, [r7, #6]
 801b186:	0a1b      	lsrs	r3, r3, #8
 801b188:	b29b      	uxth	r3, r3
 801b18a:	b25b      	sxtb	r3, r3
 801b18c:	f003 0301 	and.w	r3, r3, #1
 801b190:	b25a      	sxtb	r2, r3
 801b192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b196:	4313      	orrs	r3, r2
 801b198:	b25b      	sxtb	r3, r3
 801b19a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801b19c:	7bfb      	ldrb	r3, [r7, #15]
 801b19e:	4619      	mov	r1, r3
 801b1a0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801b1a4:	f000 fe0c 	bl	801bdc0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801b1a8:	88fb      	ldrh	r3, [r7, #6]
 801b1aa:	b2db      	uxtb	r3, r3
 801b1ac:	4619      	mov	r1, r3
 801b1ae:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801b1b2:	f000 fe05 	bl	801bdc0 <SUBGRF_WriteRegister>
            break;
 801b1b6:	e000      	b.n	801b1ba <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801b1b8:	bf00      	nop
    }
}
 801b1ba:	bf00      	nop
 801b1bc:	3710      	adds	r7, #16
 801b1be:	46bd      	mov	sp, r7
 801b1c0:	bd80      	pop	{r7, pc}

0801b1c2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801b1c2:	b580      	push	{r7, lr}
 801b1c4:	b082      	sub	sp, #8
 801b1c6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801b1c8:	2300      	movs	r3, #0
 801b1ca:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801b1cc:	2300      	movs	r3, #0
 801b1ce:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801b1d0:	2300      	movs	r3, #0
 801b1d2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801b1d4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801b1d8:	f000 fe14 	bl	801be04 <SUBGRF_ReadRegister>
 801b1dc:	4603      	mov	r3, r0
 801b1de:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801b1e0:	79fb      	ldrb	r3, [r7, #7]
 801b1e2:	f023 0301 	bic.w	r3, r3, #1
 801b1e6:	b2db      	uxtb	r3, r3
 801b1e8:	4619      	mov	r1, r3
 801b1ea:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801b1ee:	f000 fde7 	bl	801bdc0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801b1f2:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801b1f6:	f000 fe05 	bl	801be04 <SUBGRF_ReadRegister>
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801b1fe:	79bb      	ldrb	r3, [r7, #6]
 801b200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b204:	b2db      	uxtb	r3, r3
 801b206:	4619      	mov	r1, r3
 801b208:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801b20c:	f000 fdd8 	bl	801bdc0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801b210:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801b214:	f000 f88c 	bl	801b330 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801b218:	463b      	mov	r3, r7
 801b21a:	2204      	movs	r2, #4
 801b21c:	4619      	mov	r1, r3
 801b21e:	f640 0019 	movw	r0, #2073	@ 0x819
 801b222:	f000 fe31 	bl	801be88 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801b226:	2000      	movs	r0, #0
 801b228:	f000 f846 	bl	801b2b8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801b22c:	79fb      	ldrb	r3, [r7, #7]
 801b22e:	4619      	mov	r1, r3
 801b230:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801b234:	f000 fdc4 	bl	801bdc0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801b238:	79bb      	ldrb	r3, [r7, #6]
 801b23a:	4619      	mov	r1, r3
 801b23c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801b240:	f000 fdbe 	bl	801bdc0 <SUBGRF_WriteRegister>

    return number;
 801b244:	683b      	ldr	r3, [r7, #0]
}
 801b246:	4618      	mov	r0, r3
 801b248:	3708      	adds	r7, #8
 801b24a:	46bd      	mov	sp, r7
 801b24c:	bd80      	pop	{r7, pc}
	...

0801b250 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801b250:	b580      	push	{r7, lr}
 801b252:	b084      	sub	sp, #16
 801b254:	af00      	add	r7, sp, #0
 801b256:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801b258:	2000      	movs	r0, #0
 801b25a:	f7f1 f952 	bl	800c502 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b25e:	2002      	movs	r0, #2
 801b260:	f000 ffc0 	bl	801c1e4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b264:	793b      	ldrb	r3, [r7, #4]
 801b266:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b26a:	b2db      	uxtb	r3, r3
 801b26c:	b25b      	sxtb	r3, r3
 801b26e:	009b      	lsls	r3, r3, #2
 801b270:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b272:	793b      	ldrb	r3, [r7, #4]
 801b274:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b278:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b27a:	b25b      	sxtb	r3, r3
 801b27c:	005b      	lsls	r3, r3, #1
 801b27e:	b25b      	sxtb	r3, r3
 801b280:	4313      	orrs	r3, r2
 801b282:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801b284:	793b      	ldrb	r3, [r7, #4]
 801b286:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b28a:	b2db      	uxtb	r3, r3
 801b28c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b28e:	4313      	orrs	r3, r2
 801b290:	b25b      	sxtb	r3, r3
 801b292:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b294:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801b296:	f107 030f 	add.w	r3, r7, #15
 801b29a:	2201      	movs	r2, #1
 801b29c:	4619      	mov	r1, r3
 801b29e:	2084      	movs	r0, #132	@ 0x84
 801b2a0:	f000 fe58 	bl	801bf54 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801b2a4:	4b03      	ldr	r3, [pc, #12]	@ (801b2b4 <SUBGRF_SetSleep+0x64>)
 801b2a6:	2200      	movs	r2, #0
 801b2a8:	701a      	strb	r2, [r3, #0]
}
 801b2aa:	bf00      	nop
 801b2ac:	3710      	adds	r7, #16
 801b2ae:	46bd      	mov	sp, r7
 801b2b0:	bd80      	pop	{r7, pc}
 801b2b2:	bf00      	nop
 801b2b4:	20001ebc 	.word	0x20001ebc

0801b2b8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801b2b8:	b580      	push	{r7, lr}
 801b2ba:	b082      	sub	sp, #8
 801b2bc:	af00      	add	r7, sp, #0
 801b2be:	4603      	mov	r3, r0
 801b2c0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801b2c2:	1dfb      	adds	r3, r7, #7
 801b2c4:	2201      	movs	r2, #1
 801b2c6:	4619      	mov	r1, r3
 801b2c8:	2080      	movs	r0, #128	@ 0x80
 801b2ca:	f000 fe43 	bl	801bf54 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801b2ce:	79fb      	ldrb	r3, [r7, #7]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d103      	bne.n	801b2dc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801b2d4:	4b05      	ldr	r3, [pc, #20]	@ (801b2ec <SUBGRF_SetStandby+0x34>)
 801b2d6:	2201      	movs	r2, #1
 801b2d8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801b2da:	e002      	b.n	801b2e2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801b2dc:	4b03      	ldr	r3, [pc, #12]	@ (801b2ec <SUBGRF_SetStandby+0x34>)
 801b2de:	2202      	movs	r2, #2
 801b2e0:	701a      	strb	r2, [r3, #0]
}
 801b2e2:	bf00      	nop
 801b2e4:	3708      	adds	r7, #8
 801b2e6:	46bd      	mov	sp, r7
 801b2e8:	bd80      	pop	{r7, pc}
 801b2ea:	bf00      	nop
 801b2ec:	20001ebc 	.word	0x20001ebc

0801b2f0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b084      	sub	sp, #16
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801b2f8:	4b0c      	ldr	r3, [pc, #48]	@ (801b32c <SUBGRF_SetTx+0x3c>)
 801b2fa:	2204      	movs	r2, #4
 801b2fc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	0c1b      	lsrs	r3, r3, #16
 801b302:	b2db      	uxtb	r3, r3
 801b304:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	0a1b      	lsrs	r3, r3, #8
 801b30a:	b2db      	uxtb	r3, r3
 801b30c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	b2db      	uxtb	r3, r3
 801b312:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801b314:	f107 030c 	add.w	r3, r7, #12
 801b318:	2203      	movs	r2, #3
 801b31a:	4619      	mov	r1, r3
 801b31c:	2083      	movs	r0, #131	@ 0x83
 801b31e:	f000 fe19 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b322:	bf00      	nop
 801b324:	3710      	adds	r7, #16
 801b326:	46bd      	mov	sp, r7
 801b328:	bd80      	pop	{r7, pc}
 801b32a:	bf00      	nop
 801b32c:	20001ebc 	.word	0x20001ebc

0801b330 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801b330:	b580      	push	{r7, lr}
 801b332:	b084      	sub	sp, #16
 801b334:	af00      	add	r7, sp, #0
 801b336:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b338:	4b0c      	ldr	r3, [pc, #48]	@ (801b36c <SUBGRF_SetRx+0x3c>)
 801b33a:	2205      	movs	r2, #5
 801b33c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	0c1b      	lsrs	r3, r3, #16
 801b342:	b2db      	uxtb	r3, r3
 801b344:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	0a1b      	lsrs	r3, r3, #8
 801b34a:	b2db      	uxtb	r3, r3
 801b34c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	b2db      	uxtb	r3, r3
 801b352:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b354:	f107 030c 	add.w	r3, r7, #12
 801b358:	2203      	movs	r2, #3
 801b35a:	4619      	mov	r1, r3
 801b35c:	2082      	movs	r0, #130	@ 0x82
 801b35e:	f000 fdf9 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b362:	bf00      	nop
 801b364:	3710      	adds	r7, #16
 801b366:	46bd      	mov	sp, r7
 801b368:	bd80      	pop	{r7, pc}
 801b36a:	bf00      	nop
 801b36c:	20001ebc 	.word	0x20001ebc

0801b370 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801b370:	b580      	push	{r7, lr}
 801b372:	b084      	sub	sp, #16
 801b374:	af00      	add	r7, sp, #0
 801b376:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b378:	4b0e      	ldr	r3, [pc, #56]	@ (801b3b4 <SUBGRF_SetRxBoosted+0x44>)
 801b37a:	2205      	movs	r2, #5
 801b37c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801b37e:	2197      	movs	r1, #151	@ 0x97
 801b380:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801b384:	f000 fd1c 	bl	801bdc0 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	0c1b      	lsrs	r3, r3, #16
 801b38c:	b2db      	uxtb	r3, r3
 801b38e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	0a1b      	lsrs	r3, r3, #8
 801b394:	b2db      	uxtb	r3, r3
 801b396:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	b2db      	uxtb	r3, r3
 801b39c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b39e:	f107 030c 	add.w	r3, r7, #12
 801b3a2:	2203      	movs	r2, #3
 801b3a4:	4619      	mov	r1, r3
 801b3a6:	2082      	movs	r0, #130	@ 0x82
 801b3a8:	f000 fdd4 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b3ac:	bf00      	nop
 801b3ae:	3710      	adds	r7, #16
 801b3b0:	46bd      	mov	sp, r7
 801b3b2:	bd80      	pop	{r7, pc}
 801b3b4:	20001ebc 	.word	0x20001ebc

0801b3b8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	b084      	sub	sp, #16
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	6078      	str	r0, [r7, #4]
 801b3c0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	0c1b      	lsrs	r3, r3, #16
 801b3c6:	b2db      	uxtb	r3, r3
 801b3c8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	0a1b      	lsrs	r3, r3, #8
 801b3ce:	b2db      	uxtb	r3, r3
 801b3d0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	b2db      	uxtb	r3, r3
 801b3d6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b3d8:	683b      	ldr	r3, [r7, #0]
 801b3da:	0c1b      	lsrs	r3, r3, #16
 801b3dc:	b2db      	uxtb	r3, r3
 801b3de:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b3e0:	683b      	ldr	r3, [r7, #0]
 801b3e2:	0a1b      	lsrs	r3, r3, #8
 801b3e4:	b2db      	uxtb	r3, r3
 801b3e6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b3e8:	683b      	ldr	r3, [r7, #0]
 801b3ea:	b2db      	uxtb	r3, r3
 801b3ec:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b3ee:	f107 0308 	add.w	r3, r7, #8
 801b3f2:	2206      	movs	r2, #6
 801b3f4:	4619      	mov	r1, r3
 801b3f6:	2094      	movs	r0, #148	@ 0x94
 801b3f8:	f000 fdac 	bl	801bf54 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b3fc:	4b03      	ldr	r3, [pc, #12]	@ (801b40c <SUBGRF_SetRxDutyCycle+0x54>)
 801b3fe:	2206      	movs	r2, #6
 801b400:	701a      	strb	r2, [r3, #0]
}
 801b402:	bf00      	nop
 801b404:	3710      	adds	r7, #16
 801b406:	46bd      	mov	sp, r7
 801b408:	bd80      	pop	{r7, pc}
 801b40a:	bf00      	nop
 801b40c:	20001ebc 	.word	0x20001ebc

0801b410 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b410:	b580      	push	{r7, lr}
 801b412:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b414:	2200      	movs	r2, #0
 801b416:	2100      	movs	r1, #0
 801b418:	20c5      	movs	r0, #197	@ 0xc5
 801b41a:	f000 fd9b 	bl	801bf54 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b41e:	4b02      	ldr	r3, [pc, #8]	@ (801b428 <SUBGRF_SetCad+0x18>)
 801b420:	2207      	movs	r2, #7
 801b422:	701a      	strb	r2, [r3, #0]
}
 801b424:	bf00      	nop
 801b426:	bd80      	pop	{r7, pc}
 801b428:	20001ebc 	.word	0x20001ebc

0801b42c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b42c:	b580      	push	{r7, lr}
 801b42e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b430:	2200      	movs	r2, #0
 801b432:	2100      	movs	r1, #0
 801b434:	20d1      	movs	r0, #209	@ 0xd1
 801b436:	f000 fd8d 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b43a:	bf00      	nop
 801b43c:	bd80      	pop	{r7, pc}

0801b43e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b43e:	b580      	push	{r7, lr}
 801b440:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b442:	2200      	movs	r2, #0
 801b444:	2100      	movs	r1, #0
 801b446:	20d2      	movs	r0, #210	@ 0xd2
 801b448:	f000 fd84 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b44c:	bf00      	nop
 801b44e:	bd80      	pop	{r7, pc}

0801b450 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b450:	b580      	push	{r7, lr}
 801b452:	b082      	sub	sp, #8
 801b454:	af00      	add	r7, sp, #0
 801b456:	4603      	mov	r3, r0
 801b458:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b45a:	1dfb      	adds	r3, r7, #7
 801b45c:	2201      	movs	r2, #1
 801b45e:	4619      	mov	r1, r3
 801b460:	209f      	movs	r0, #159	@ 0x9f
 801b462:	f000 fd77 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b466:	bf00      	nop
 801b468:	3708      	adds	r7, #8
 801b46a:	46bd      	mov	sp, r7
 801b46c:	bd80      	pop	{r7, pc}

0801b46e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b46e:	b580      	push	{r7, lr}
 801b470:	b084      	sub	sp, #16
 801b472:	af00      	add	r7, sp, #0
 801b474:	4603      	mov	r3, r0
 801b476:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b478:	1dfb      	adds	r3, r7, #7
 801b47a:	2201      	movs	r2, #1
 801b47c:	4619      	mov	r1, r3
 801b47e:	20a0      	movs	r0, #160	@ 0xa0
 801b480:	f000 fd68 	bl	801bf54 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b484:	79fb      	ldrb	r3, [r7, #7]
 801b486:	2b3f      	cmp	r3, #63	@ 0x3f
 801b488:	d91c      	bls.n	801b4c4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b48a:	79fb      	ldrb	r3, [r7, #7]
 801b48c:	085b      	lsrs	r3, r3, #1
 801b48e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b490:	2300      	movs	r3, #0
 801b492:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b494:	2300      	movs	r3, #0
 801b496:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b498:	e005      	b.n	801b4a6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b49a:	7bfb      	ldrb	r3, [r7, #15]
 801b49c:	089b      	lsrs	r3, r3, #2
 801b49e:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b4a0:	7bbb      	ldrb	r3, [r7, #14]
 801b4a2:	3301      	adds	r3, #1
 801b4a4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b4a6:	7bfb      	ldrb	r3, [r7, #15]
 801b4a8:	2b1f      	cmp	r3, #31
 801b4aa:	d8f6      	bhi.n	801b49a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b4ac:	7bfb      	ldrb	r3, [r7, #15]
 801b4ae:	00db      	lsls	r3, r3, #3
 801b4b0:	b2da      	uxtb	r2, r3
 801b4b2:	7bbb      	ldrb	r3, [r7, #14]
 801b4b4:	4413      	add	r3, r2
 801b4b6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b4b8:	7b7b      	ldrb	r3, [r7, #13]
 801b4ba:	4619      	mov	r1, r3
 801b4bc:	f240 7006 	movw	r0, #1798	@ 0x706
 801b4c0:	f000 fc7e 	bl	801bdc0 <SUBGRF_WriteRegister>
    }
}
 801b4c4:	bf00      	nop
 801b4c6:	3710      	adds	r7, #16
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	bd80      	pop	{r7, pc}

0801b4cc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b4cc:	b580      	push	{r7, lr}
 801b4ce:	b082      	sub	sp, #8
 801b4d0:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b4d2:	f7f1 f832 	bl	800c53a <RBI_IsDCDC>
 801b4d6:	4603      	mov	r3, r0
 801b4d8:	2b01      	cmp	r3, #1
 801b4da:	d102      	bne.n	801b4e2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b4dc:	2301      	movs	r3, #1
 801b4de:	71fb      	strb	r3, [r7, #7]
 801b4e0:	e001      	b.n	801b4e6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b4e6:	1dfb      	adds	r3, r7, #7
 801b4e8:	2201      	movs	r2, #1
 801b4ea:	4619      	mov	r1, r3
 801b4ec:	2096      	movs	r0, #150	@ 0x96
 801b4ee:	f000 fd31 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b4f2:	bf00      	nop
 801b4f4:	3708      	adds	r7, #8
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	bd80      	pop	{r7, pc}

0801b4fa <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b4fa:	b580      	push	{r7, lr}
 801b4fc:	b084      	sub	sp, #16
 801b4fe:	af00      	add	r7, sp, #0
 801b500:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b502:	793b      	ldrb	r3, [r7, #4]
 801b504:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b508:	b2db      	uxtb	r3, r3
 801b50a:	b25b      	sxtb	r3, r3
 801b50c:	019b      	lsls	r3, r3, #6
 801b50e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b510:	793b      	ldrb	r3, [r7, #4]
 801b512:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b516:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b518:	b25b      	sxtb	r3, r3
 801b51a:	015b      	lsls	r3, r3, #5
 801b51c:	b25b      	sxtb	r3, r3
 801b51e:	4313      	orrs	r3, r2
 801b520:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b522:	793b      	ldrb	r3, [r7, #4]
 801b524:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b528:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b52a:	b25b      	sxtb	r3, r3
 801b52c:	011b      	lsls	r3, r3, #4
 801b52e:	b25b      	sxtb	r3, r3
 801b530:	4313      	orrs	r3, r2
 801b532:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b534:	793b      	ldrb	r3, [r7, #4]
 801b536:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b53a:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b53c:	b25b      	sxtb	r3, r3
 801b53e:	00db      	lsls	r3, r3, #3
 801b540:	b25b      	sxtb	r3, r3
 801b542:	4313      	orrs	r3, r2
 801b544:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b546:	793b      	ldrb	r3, [r7, #4]
 801b548:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b54c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b54e:	b25b      	sxtb	r3, r3
 801b550:	009b      	lsls	r3, r3, #2
 801b552:	b25b      	sxtb	r3, r3
 801b554:	4313      	orrs	r3, r2
 801b556:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b558:	793b      	ldrb	r3, [r7, #4]
 801b55a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b55e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b560:	b25b      	sxtb	r3, r3
 801b562:	005b      	lsls	r3, r3, #1
 801b564:	b25b      	sxtb	r3, r3
 801b566:	4313      	orrs	r3, r2
 801b568:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b56a:	793b      	ldrb	r3, [r7, #4]
 801b56c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b570:	b2db      	uxtb	r3, r3
 801b572:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b574:	4313      	orrs	r3, r2
 801b576:	b25b      	sxtb	r3, r3
 801b578:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b57a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b57c:	f107 030f 	add.w	r3, r7, #15
 801b580:	2201      	movs	r2, #1
 801b582:	4619      	mov	r1, r3
 801b584:	2089      	movs	r0, #137	@ 0x89
 801b586:	f000 fce5 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b58a:	bf00      	nop
 801b58c:	3710      	adds	r7, #16
 801b58e:	46bd      	mov	sp, r7
 801b590:	bd80      	pop	{r7, pc}
	...

0801b594 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b594:	b580      	push	{r7, lr}
 801b596:	b084      	sub	sp, #16
 801b598:	af00      	add	r7, sp, #0
 801b59a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	4a1d      	ldr	r2, [pc, #116]	@ (801b614 <SUBGRF_CalibrateImage+0x80>)
 801b5a0:	4293      	cmp	r3, r2
 801b5a2:	d904      	bls.n	801b5ae <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b5a4:	23e1      	movs	r3, #225	@ 0xe1
 801b5a6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b5a8:	23e9      	movs	r3, #233	@ 0xe9
 801b5aa:	737b      	strb	r3, [r7, #13]
 801b5ac:	e027      	b.n	801b5fe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	4a19      	ldr	r2, [pc, #100]	@ (801b618 <SUBGRF_CalibrateImage+0x84>)
 801b5b2:	4293      	cmp	r3, r2
 801b5b4:	d904      	bls.n	801b5c0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b5b6:	23d7      	movs	r3, #215	@ 0xd7
 801b5b8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b5ba:	23db      	movs	r3, #219	@ 0xdb
 801b5bc:	737b      	strb	r3, [r7, #13]
 801b5be:	e01e      	b.n	801b5fe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	4a16      	ldr	r2, [pc, #88]	@ (801b61c <SUBGRF_CalibrateImage+0x88>)
 801b5c4:	4293      	cmp	r3, r2
 801b5c6:	d904      	bls.n	801b5d2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b5c8:	23c1      	movs	r3, #193	@ 0xc1
 801b5ca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b5cc:	23c5      	movs	r3, #197	@ 0xc5
 801b5ce:	737b      	strb	r3, [r7, #13]
 801b5d0:	e015      	b.n	801b5fe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	4a12      	ldr	r2, [pc, #72]	@ (801b620 <SUBGRF_CalibrateImage+0x8c>)
 801b5d6:	4293      	cmp	r3, r2
 801b5d8:	d904      	bls.n	801b5e4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b5da:	2375      	movs	r3, #117	@ 0x75
 801b5dc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b5de:	2381      	movs	r3, #129	@ 0x81
 801b5e0:	737b      	strb	r3, [r7, #13]
 801b5e2:	e00c      	b.n	801b5fe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	4a0f      	ldr	r2, [pc, #60]	@ (801b624 <SUBGRF_CalibrateImage+0x90>)
 801b5e8:	4293      	cmp	r3, r2
 801b5ea:	d904      	bls.n	801b5f6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801b5ec:	236b      	movs	r3, #107	@ 0x6b
 801b5ee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b5f0:	236f      	movs	r3, #111	@ 0x6f
 801b5f2:	737b      	strb	r3, [r7, #13]
 801b5f4:	e003      	b.n	801b5fe <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801b5f6:	2329      	movs	r3, #41	@ 0x29
 801b5f8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801b5fa:	232b      	movs	r3, #43	@ 0x2b
 801b5fc:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b5fe:	f107 030c 	add.w	r3, r7, #12
 801b602:	2202      	movs	r2, #2
 801b604:	4619      	mov	r1, r3
 801b606:	2098      	movs	r0, #152	@ 0x98
 801b608:	f000 fca4 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b60c:	bf00      	nop
 801b60e:	3710      	adds	r7, #16
 801b610:	46bd      	mov	sp, r7
 801b612:	bd80      	pop	{r7, pc}
 801b614:	35a4e900 	.word	0x35a4e900
 801b618:	32a9f880 	.word	0x32a9f880
 801b61c:	2de54480 	.word	0x2de54480
 801b620:	1b6b0b00 	.word	0x1b6b0b00
 801b624:	1954fc40 	.word	0x1954fc40

0801b628 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b628:	b590      	push	{r4, r7, lr}
 801b62a:	b085      	sub	sp, #20
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	4604      	mov	r4, r0
 801b630:	4608      	mov	r0, r1
 801b632:	4611      	mov	r1, r2
 801b634:	461a      	mov	r2, r3
 801b636:	4623      	mov	r3, r4
 801b638:	71fb      	strb	r3, [r7, #7]
 801b63a:	4603      	mov	r3, r0
 801b63c:	71bb      	strb	r3, [r7, #6]
 801b63e:	460b      	mov	r3, r1
 801b640:	717b      	strb	r3, [r7, #5]
 801b642:	4613      	mov	r3, r2
 801b644:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b646:	79fb      	ldrb	r3, [r7, #7]
 801b648:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b64a:	79bb      	ldrb	r3, [r7, #6]
 801b64c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b64e:	797b      	ldrb	r3, [r7, #5]
 801b650:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b652:	793b      	ldrb	r3, [r7, #4]
 801b654:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b656:	f107 030c 	add.w	r3, r7, #12
 801b65a:	2204      	movs	r2, #4
 801b65c:	4619      	mov	r1, r3
 801b65e:	2095      	movs	r0, #149	@ 0x95
 801b660:	f000 fc78 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b664:	bf00      	nop
 801b666:	3714      	adds	r7, #20
 801b668:	46bd      	mov	sp, r7
 801b66a:	bd90      	pop	{r4, r7, pc}

0801b66c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b66c:	b590      	push	{r4, r7, lr}
 801b66e:	b085      	sub	sp, #20
 801b670:	af00      	add	r7, sp, #0
 801b672:	4604      	mov	r4, r0
 801b674:	4608      	mov	r0, r1
 801b676:	4611      	mov	r1, r2
 801b678:	461a      	mov	r2, r3
 801b67a:	4623      	mov	r3, r4
 801b67c:	80fb      	strh	r3, [r7, #6]
 801b67e:	4603      	mov	r3, r0
 801b680:	80bb      	strh	r3, [r7, #4]
 801b682:	460b      	mov	r3, r1
 801b684:	807b      	strh	r3, [r7, #2]
 801b686:	4613      	mov	r3, r2
 801b688:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b68a:	88fb      	ldrh	r3, [r7, #6]
 801b68c:	0a1b      	lsrs	r3, r3, #8
 801b68e:	b29b      	uxth	r3, r3
 801b690:	b2db      	uxtb	r3, r3
 801b692:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b694:	88fb      	ldrh	r3, [r7, #6]
 801b696:	b2db      	uxtb	r3, r3
 801b698:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b69a:	88bb      	ldrh	r3, [r7, #4]
 801b69c:	0a1b      	lsrs	r3, r3, #8
 801b69e:	b29b      	uxth	r3, r3
 801b6a0:	b2db      	uxtb	r3, r3
 801b6a2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b6a4:	88bb      	ldrh	r3, [r7, #4]
 801b6a6:	b2db      	uxtb	r3, r3
 801b6a8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b6aa:	887b      	ldrh	r3, [r7, #2]
 801b6ac:	0a1b      	lsrs	r3, r3, #8
 801b6ae:	b29b      	uxth	r3, r3
 801b6b0:	b2db      	uxtb	r3, r3
 801b6b2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b6b4:	887b      	ldrh	r3, [r7, #2]
 801b6b6:	b2db      	uxtb	r3, r3
 801b6b8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b6ba:	883b      	ldrh	r3, [r7, #0]
 801b6bc:	0a1b      	lsrs	r3, r3, #8
 801b6be:	b29b      	uxth	r3, r3
 801b6c0:	b2db      	uxtb	r3, r3
 801b6c2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b6c4:	883b      	ldrh	r3, [r7, #0]
 801b6c6:	b2db      	uxtb	r3, r3
 801b6c8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b6ca:	f107 0308 	add.w	r3, r7, #8
 801b6ce:	2208      	movs	r2, #8
 801b6d0:	4619      	mov	r1, r3
 801b6d2:	2008      	movs	r0, #8
 801b6d4:	f000 fc3e 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b6d8:	bf00      	nop
 801b6da:	3714      	adds	r7, #20
 801b6dc:	46bd      	mov	sp, r7
 801b6de:	bd90      	pop	{r4, r7, pc}

0801b6e0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	b084      	sub	sp, #16
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	4603      	mov	r3, r0
 801b6e8:	6039      	str	r1, [r7, #0]
 801b6ea:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b6ec:	79fb      	ldrb	r3, [r7, #7]
 801b6ee:	f003 0307 	and.w	r3, r3, #7
 801b6f2:	b2db      	uxtb	r3, r3
 801b6f4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b6f6:	683b      	ldr	r3, [r7, #0]
 801b6f8:	0c1b      	lsrs	r3, r3, #16
 801b6fa:	b2db      	uxtb	r3, r3
 801b6fc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b6fe:	683b      	ldr	r3, [r7, #0]
 801b700:	0a1b      	lsrs	r3, r3, #8
 801b702:	b2db      	uxtb	r3, r3
 801b704:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b706:	683b      	ldr	r3, [r7, #0]
 801b708:	b2db      	uxtb	r3, r3
 801b70a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b70c:	f107 030c 	add.w	r3, r7, #12
 801b710:	2204      	movs	r2, #4
 801b712:	4619      	mov	r1, r3
 801b714:	2097      	movs	r0, #151	@ 0x97
 801b716:	f000 fc1d 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b71a:	bf00      	nop
 801b71c:	3710      	adds	r7, #16
 801b71e:	46bd      	mov	sp, r7
 801b720:	bd80      	pop	{r7, pc}
	...

0801b724 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b724:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b728:	b084      	sub	sp, #16
 801b72a:	af00      	add	r7, sp, #0
 801b72c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b72e:	2300      	movs	r3, #0
 801b730:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b732:	4b1d      	ldr	r3, [pc, #116]	@ (801b7a8 <SUBGRF_SetRfFrequency+0x84>)
 801b734:	781b      	ldrb	r3, [r3, #0]
 801b736:	f083 0301 	eor.w	r3, r3, #1
 801b73a:	b2db      	uxtb	r3, r3
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d005      	beq.n	801b74c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b740:	6878      	ldr	r0, [r7, #4]
 801b742:	f7ff ff27 	bl	801b594 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b746:	4b18      	ldr	r3, [pc, #96]	@ (801b7a8 <SUBGRF_SetRfFrequency+0x84>)
 801b748:	2201      	movs	r2, #1
 801b74a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	2200      	movs	r2, #0
 801b750:	461c      	mov	r4, r3
 801b752:	4615      	mov	r5, r2
 801b754:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b758:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b75c:	4a13      	ldr	r2, [pc, #76]	@ (801b7ac <SUBGRF_SetRfFrequency+0x88>)
 801b75e:	f04f 0300 	mov.w	r3, #0
 801b762:	4640      	mov	r0, r8
 801b764:	4649      	mov	r1, r9
 801b766:	f7e5 fceb 	bl	8001140 <__aeabi_uldivmod>
 801b76a:	4602      	mov	r2, r0
 801b76c:	460b      	mov	r3, r1
 801b76e:	4613      	mov	r3, r2
 801b770:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b772:	68fb      	ldr	r3, [r7, #12]
 801b774:	0e1b      	lsrs	r3, r3, #24
 801b776:	b2db      	uxtb	r3, r3
 801b778:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	0c1b      	lsrs	r3, r3, #16
 801b77e:	b2db      	uxtb	r3, r3
 801b780:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b782:	68fb      	ldr	r3, [r7, #12]
 801b784:	0a1b      	lsrs	r3, r3, #8
 801b786:	b2db      	uxtb	r3, r3
 801b788:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b78a:	68fb      	ldr	r3, [r7, #12]
 801b78c:	b2db      	uxtb	r3, r3
 801b78e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b790:	f107 0308 	add.w	r3, r7, #8
 801b794:	2204      	movs	r2, #4
 801b796:	4619      	mov	r1, r3
 801b798:	2086      	movs	r0, #134	@ 0x86
 801b79a:	f000 fbdb 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b79e:	bf00      	nop
 801b7a0:	3710      	adds	r7, #16
 801b7a2:	46bd      	mov	sp, r7
 801b7a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b7a8:	20001ec4 	.word	0x20001ec4
 801b7ac:	01e84800 	.word	0x01e84800

0801b7b0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b7b0:	b580      	push	{r7, lr}
 801b7b2:	b082      	sub	sp, #8
 801b7b4:	af00      	add	r7, sp, #0
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b7ba:	79fa      	ldrb	r2, [r7, #7]
 801b7bc:	4b09      	ldr	r3, [pc, #36]	@ (801b7e4 <SUBGRF_SetPacketType+0x34>)
 801b7be:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b7c0:	79fb      	ldrb	r3, [r7, #7]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d104      	bne.n	801b7d0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b7c6:	2100      	movs	r1, #0
 801b7c8:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801b7cc:	f000 faf8 	bl	801bdc0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b7d0:	1dfb      	adds	r3, r7, #7
 801b7d2:	2201      	movs	r2, #1
 801b7d4:	4619      	mov	r1, r3
 801b7d6:	208a      	movs	r0, #138	@ 0x8a
 801b7d8:	f000 fbbc 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b7dc:	bf00      	nop
 801b7de:	3708      	adds	r7, #8
 801b7e0:	46bd      	mov	sp, r7
 801b7e2:	bd80      	pop	{r7, pc}
 801b7e4:	20001ebd 	.word	0x20001ebd

0801b7e8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b7e8:	b480      	push	{r7}
 801b7ea:	af00      	add	r7, sp, #0
    return PacketType;
 801b7ec:	4b02      	ldr	r3, [pc, #8]	@ (801b7f8 <SUBGRF_GetPacketType+0x10>)
 801b7ee:	781b      	ldrb	r3, [r3, #0]
}
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	bc80      	pop	{r7}
 801b7f6:	4770      	bx	lr
 801b7f8:	20001ebd 	.word	0x20001ebd

0801b7fc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801b7fc:	b580      	push	{r7, lr}
 801b7fe:	b084      	sub	sp, #16
 801b800:	af00      	add	r7, sp, #0
 801b802:	4603      	mov	r3, r0
 801b804:	71fb      	strb	r3, [r7, #7]
 801b806:	460b      	mov	r3, r1
 801b808:	71bb      	strb	r3, [r7, #6]
 801b80a:	4613      	mov	r3, r2
 801b80c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801b80e:	79fb      	ldrb	r3, [r7, #7]
 801b810:	2b01      	cmp	r3, #1
 801b812:	d149      	bne.n	801b8a8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801b814:	2000      	movs	r0, #0
 801b816:	f7f0 fe97 	bl	800c548 <RBI_GetRFOMaxPowerConfig>
 801b81a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801b81c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b820:	68fa      	ldr	r2, [r7, #12]
 801b822:	429a      	cmp	r2, r3
 801b824:	da01      	bge.n	801b82a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801b826:	68fb      	ldr	r3, [r7, #12]
 801b828:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	2b0e      	cmp	r3, #14
 801b82e:	d10e      	bne.n	801b84e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801b830:	2301      	movs	r3, #1
 801b832:	2201      	movs	r2, #1
 801b834:	2100      	movs	r1, #0
 801b836:	2004      	movs	r0, #4
 801b838:	f7ff fef6 	bl	801b628 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b83c:	79ba      	ldrb	r2, [r7, #6]
 801b83e:	68fb      	ldr	r3, [r7, #12]
 801b840:	b2db      	uxtb	r3, r3
 801b842:	1ad3      	subs	r3, r2, r3
 801b844:	b2db      	uxtb	r3, r3
 801b846:	330e      	adds	r3, #14
 801b848:	b2db      	uxtb	r3, r3
 801b84a:	71bb      	strb	r3, [r7, #6]
 801b84c:	e01f      	b.n	801b88e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801b84e:	68fb      	ldr	r3, [r7, #12]
 801b850:	2b0a      	cmp	r3, #10
 801b852:	d10e      	bne.n	801b872 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801b854:	2301      	movs	r3, #1
 801b856:	2201      	movs	r2, #1
 801b858:	2100      	movs	r1, #0
 801b85a:	2001      	movs	r0, #1
 801b85c:	f7ff fee4 	bl	801b628 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801b860:	79ba      	ldrb	r2, [r7, #6]
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	b2db      	uxtb	r3, r3
 801b866:	1ad3      	subs	r3, r2, r3
 801b868:	b2db      	uxtb	r3, r3
 801b86a:	330d      	adds	r3, #13
 801b86c:	b2db      	uxtb	r3, r3
 801b86e:	71bb      	strb	r3, [r7, #6]
 801b870:	e00d      	b.n	801b88e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801b872:	2301      	movs	r3, #1
 801b874:	2201      	movs	r2, #1
 801b876:	2100      	movs	r1, #0
 801b878:	2007      	movs	r0, #7
 801b87a:	f7ff fed5 	bl	801b628 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b87e:	79ba      	ldrb	r2, [r7, #6]
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	b2db      	uxtb	r3, r3
 801b884:	1ad3      	subs	r3, r2, r3
 801b886:	b2db      	uxtb	r3, r3
 801b888:	330e      	adds	r3, #14
 801b88a:	b2db      	uxtb	r3, r3
 801b88c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801b88e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b892:	f113 0f11 	cmn.w	r3, #17
 801b896:	da01      	bge.n	801b89c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801b898:	23ef      	movs	r3, #239	@ 0xef
 801b89a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801b89c:	2118      	movs	r1, #24
 801b89e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801b8a2:	f000 fa8d 	bl	801bdc0 <SUBGRF_WriteRegister>
 801b8a6:	e067      	b.n	801b978 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801b8a8:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801b8ac:	f000 faaa 	bl	801be04 <SUBGRF_ReadRegister>
 801b8b0:	4603      	mov	r3, r0
 801b8b2:	f043 031e 	orr.w	r3, r3, #30
 801b8b6:	b2db      	uxtb	r3, r3
 801b8b8:	4619      	mov	r1, r3
 801b8ba:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801b8be:	f000 fa7f 	bl	801bdc0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801b8c2:	2001      	movs	r0, #1
 801b8c4:	f7f0 fe40 	bl	800c548 <RBI_GetRFOMaxPowerConfig>
 801b8c8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801b8ca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b8ce:	68fa      	ldr	r2, [r7, #12]
 801b8d0:	429a      	cmp	r2, r3
 801b8d2:	da01      	bge.n	801b8d8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	2b14      	cmp	r3, #20
 801b8dc:	d10e      	bne.n	801b8fc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801b8de:	2301      	movs	r3, #1
 801b8e0:	2200      	movs	r2, #0
 801b8e2:	2105      	movs	r1, #5
 801b8e4:	2003      	movs	r0, #3
 801b8e6:	f7ff fe9f 	bl	801b628 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b8ea:	79ba      	ldrb	r2, [r7, #6]
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	b2db      	uxtb	r3, r3
 801b8f0:	1ad3      	subs	r3, r2, r3
 801b8f2:	b2db      	uxtb	r3, r3
 801b8f4:	3316      	adds	r3, #22
 801b8f6:	b2db      	uxtb	r3, r3
 801b8f8:	71bb      	strb	r3, [r7, #6]
 801b8fa:	e031      	b.n	801b960 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	2b11      	cmp	r3, #17
 801b900:	d10e      	bne.n	801b920 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801b902:	2301      	movs	r3, #1
 801b904:	2200      	movs	r2, #0
 801b906:	2103      	movs	r1, #3
 801b908:	2002      	movs	r0, #2
 801b90a:	f7ff fe8d 	bl	801b628 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b90e:	79ba      	ldrb	r2, [r7, #6]
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	b2db      	uxtb	r3, r3
 801b914:	1ad3      	subs	r3, r2, r3
 801b916:	b2db      	uxtb	r3, r3
 801b918:	3316      	adds	r3, #22
 801b91a:	b2db      	uxtb	r3, r3
 801b91c:	71bb      	strb	r3, [r7, #6]
 801b91e:	e01f      	b.n	801b960 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	2b0e      	cmp	r3, #14
 801b924:	d10e      	bne.n	801b944 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801b926:	2301      	movs	r3, #1
 801b928:	2200      	movs	r2, #0
 801b92a:	2102      	movs	r1, #2
 801b92c:	2002      	movs	r0, #2
 801b92e:	f7ff fe7b 	bl	801b628 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b932:	79ba      	ldrb	r2, [r7, #6]
 801b934:	68fb      	ldr	r3, [r7, #12]
 801b936:	b2db      	uxtb	r3, r3
 801b938:	1ad3      	subs	r3, r2, r3
 801b93a:	b2db      	uxtb	r3, r3
 801b93c:	330e      	adds	r3, #14
 801b93e:	b2db      	uxtb	r3, r3
 801b940:	71bb      	strb	r3, [r7, #6]
 801b942:	e00d      	b.n	801b960 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801b944:	2301      	movs	r3, #1
 801b946:	2200      	movs	r2, #0
 801b948:	2107      	movs	r1, #7
 801b94a:	2004      	movs	r0, #4
 801b94c:	f7ff fe6c 	bl	801b628 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b950:	79ba      	ldrb	r2, [r7, #6]
 801b952:	68fb      	ldr	r3, [r7, #12]
 801b954:	b2db      	uxtb	r3, r3
 801b956:	1ad3      	subs	r3, r2, r3
 801b958:	b2db      	uxtb	r3, r3
 801b95a:	3316      	adds	r3, #22
 801b95c:	b2db      	uxtb	r3, r3
 801b95e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801b960:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b964:	f113 0f09 	cmn.w	r3, #9
 801b968:	da01      	bge.n	801b96e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801b96a:	23f7      	movs	r3, #247	@ 0xf7
 801b96c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801b96e:	2138      	movs	r1, #56	@ 0x38
 801b970:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801b974:	f000 fa24 	bl	801bdc0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b978:	79bb      	ldrb	r3, [r7, #6]
 801b97a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801b97c:	797b      	ldrb	r3, [r7, #5]
 801b97e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801b980:	f107 0308 	add.w	r3, r7, #8
 801b984:	2202      	movs	r2, #2
 801b986:	4619      	mov	r1, r3
 801b988:	208e      	movs	r0, #142	@ 0x8e
 801b98a:	f000 fae3 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801b98e:	bf00      	nop
 801b990:	3710      	adds	r7, #16
 801b992:	46bd      	mov	sp, r7
 801b994:	bd80      	pop	{r7, pc}
	...

0801b998 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b998:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b99c:	b086      	sub	sp, #24
 801b99e:	af00      	add	r7, sp, #0
 801b9a0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b9a2:	2300      	movs	r3, #0
 801b9a4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b9a6:	f107 0308 	add.w	r3, r7, #8
 801b9aa:	2200      	movs	r2, #0
 801b9ac:	601a      	str	r2, [r3, #0]
 801b9ae:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	781a      	ldrb	r2, [r3, #0]
 801b9b4:	4b5c      	ldr	r3, [pc, #368]	@ (801bb28 <SUBGRF_SetModulationParams+0x190>)
 801b9b6:	781b      	ldrb	r3, [r3, #0]
 801b9b8:	429a      	cmp	r2, r3
 801b9ba:	d004      	beq.n	801b9c6 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	781b      	ldrb	r3, [r3, #0]
 801b9c0:	4618      	mov	r0, r3
 801b9c2:	f7ff fef5 	bl	801b7b0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	781b      	ldrb	r3, [r3, #0]
 801b9ca:	2b03      	cmp	r3, #3
 801b9cc:	f200 80a5 	bhi.w	801bb1a <SUBGRF_SetModulationParams+0x182>
 801b9d0:	a201      	add	r2, pc, #4	@ (adr r2, 801b9d8 <SUBGRF_SetModulationParams+0x40>)
 801b9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9d6:	bf00      	nop
 801b9d8:	0801b9e9 	.word	0x0801b9e9
 801b9dc:	0801baa9 	.word	0x0801baa9
 801b9e0:	0801ba6b 	.word	0x0801ba6b
 801b9e4:	0801bad7 	.word	0x0801bad7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b9e8:	2308      	movs	r3, #8
 801b9ea:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	685b      	ldr	r3, [r3, #4]
 801b9f0:	4a4e      	ldr	r2, [pc, #312]	@ (801bb2c <SUBGRF_SetModulationParams+0x194>)
 801b9f2:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9f6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b9f8:	697b      	ldr	r3, [r7, #20]
 801b9fa:	0c1b      	lsrs	r3, r3, #16
 801b9fc:	b2db      	uxtb	r3, r3
 801b9fe:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ba00:	697b      	ldr	r3, [r7, #20]
 801ba02:	0a1b      	lsrs	r3, r3, #8
 801ba04:	b2db      	uxtb	r3, r3
 801ba06:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ba08:	697b      	ldr	r3, [r7, #20]
 801ba0a:	b2db      	uxtb	r3, r3
 801ba0c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	7b1b      	ldrb	r3, [r3, #12]
 801ba12:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	7b5b      	ldrb	r3, [r3, #13]
 801ba18:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	689b      	ldr	r3, [r3, #8]
 801ba1e:	2200      	movs	r2, #0
 801ba20:	461c      	mov	r4, r3
 801ba22:	4615      	mov	r5, r2
 801ba24:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801ba28:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801ba2c:	4a40      	ldr	r2, [pc, #256]	@ (801bb30 <SUBGRF_SetModulationParams+0x198>)
 801ba2e:	f04f 0300 	mov.w	r3, #0
 801ba32:	4640      	mov	r0, r8
 801ba34:	4649      	mov	r1, r9
 801ba36:	f7e5 fb83 	bl	8001140 <__aeabi_uldivmod>
 801ba3a:	4602      	mov	r2, r0
 801ba3c:	460b      	mov	r3, r1
 801ba3e:	4613      	mov	r3, r2
 801ba40:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801ba42:	697b      	ldr	r3, [r7, #20]
 801ba44:	0c1b      	lsrs	r3, r3, #16
 801ba46:	b2db      	uxtb	r3, r3
 801ba48:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801ba4a:	697b      	ldr	r3, [r7, #20]
 801ba4c:	0a1b      	lsrs	r3, r3, #8
 801ba4e:	b2db      	uxtb	r3, r3
 801ba50:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801ba52:	697b      	ldr	r3, [r7, #20]
 801ba54:	b2db      	uxtb	r3, r3
 801ba56:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ba58:	7cfb      	ldrb	r3, [r7, #19]
 801ba5a:	b29a      	uxth	r2, r3
 801ba5c:	f107 0308 	add.w	r3, r7, #8
 801ba60:	4619      	mov	r1, r3
 801ba62:	208b      	movs	r0, #139	@ 0x8b
 801ba64:	f000 fa76 	bl	801bf54 <SUBGRF_WriteCommand>
        break;
 801ba68:	e058      	b.n	801bb1c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 801ba6a:	2304      	movs	r3, #4
 801ba6c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	691b      	ldr	r3, [r3, #16]
 801ba72:	4a2e      	ldr	r2, [pc, #184]	@ (801bb2c <SUBGRF_SetModulationParams+0x194>)
 801ba74:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba78:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ba7a:	697b      	ldr	r3, [r7, #20]
 801ba7c:	0c1b      	lsrs	r3, r3, #16
 801ba7e:	b2db      	uxtb	r3, r3
 801ba80:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ba82:	697b      	ldr	r3, [r7, #20]
 801ba84:	0a1b      	lsrs	r3, r3, #8
 801ba86:	b2db      	uxtb	r3, r3
 801ba88:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ba8a:	697b      	ldr	r3, [r7, #20]
 801ba8c:	b2db      	uxtb	r3, r3
 801ba8e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	7d1b      	ldrb	r3, [r3, #20]
 801ba94:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ba96:	7cfb      	ldrb	r3, [r7, #19]
 801ba98:	b29a      	uxth	r2, r3
 801ba9a:	f107 0308 	add.w	r3, r7, #8
 801ba9e:	4619      	mov	r1, r3
 801baa0:	208b      	movs	r0, #139	@ 0x8b
 801baa2:	f000 fa57 	bl	801bf54 <SUBGRF_WriteCommand>
        break;
 801baa6:	e039      	b.n	801bb1c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 801baa8:	2304      	movs	r3, #4
 801baaa:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	7e1b      	ldrb	r3, [r3, #24]
 801bab0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	7e5b      	ldrb	r3, [r3, #25]
 801bab6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	7e9b      	ldrb	r3, [r3, #26]
 801babc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	7edb      	ldrb	r3, [r3, #27]
 801bac2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bac4:	7cfb      	ldrb	r3, [r7, #19]
 801bac6:	b29a      	uxth	r2, r3
 801bac8:	f107 0308 	add.w	r3, r7, #8
 801bacc:	4619      	mov	r1, r3
 801bace:	208b      	movs	r0, #139	@ 0x8b
 801bad0:	f000 fa40 	bl	801bf54 <SUBGRF_WriteCommand>

        break;
 801bad4:	e022      	b.n	801bb1c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 801bad6:	2305      	movs	r3, #5
 801bad8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	685b      	ldr	r3, [r3, #4]
 801bade:	4a13      	ldr	r2, [pc, #76]	@ (801bb2c <SUBGRF_SetModulationParams+0x194>)
 801bae0:	fbb2 f3f3 	udiv	r3, r2, r3
 801bae4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801bae6:	697b      	ldr	r3, [r7, #20]
 801bae8:	0c1b      	lsrs	r3, r3, #16
 801baea:	b2db      	uxtb	r3, r3
 801baec:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801baee:	697b      	ldr	r3, [r7, #20]
 801baf0:	0a1b      	lsrs	r3, r3, #8
 801baf2:	b2db      	uxtb	r3, r3
 801baf4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801baf6:	697b      	ldr	r3, [r7, #20]
 801baf8:	b2db      	uxtb	r3, r3
 801bafa:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	7b1b      	ldrb	r3, [r3, #12]
 801bb00:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	7b5b      	ldrb	r3, [r3, #13]
 801bb06:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bb08:	7cfb      	ldrb	r3, [r7, #19]
 801bb0a:	b29a      	uxth	r2, r3
 801bb0c:	f107 0308 	add.w	r3, r7, #8
 801bb10:	4619      	mov	r1, r3
 801bb12:	208b      	movs	r0, #139	@ 0x8b
 801bb14:	f000 fa1e 	bl	801bf54 <SUBGRF_WriteCommand>
        break;
 801bb18:	e000      	b.n	801bb1c <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 801bb1a:	bf00      	nop
    }
}
 801bb1c:	bf00      	nop
 801bb1e:	3718      	adds	r7, #24
 801bb20:	46bd      	mov	sp, r7
 801bb22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801bb26:	bf00      	nop
 801bb28:	20001ebd 	.word	0x20001ebd
 801bb2c:	3d090000 	.word	0x3d090000
 801bb30:	01e84800 	.word	0x01e84800

0801bb34 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801bb34:	b580      	push	{r7, lr}
 801bb36:	b086      	sub	sp, #24
 801bb38:	af00      	add	r7, sp, #0
 801bb3a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801bb3c:	2300      	movs	r3, #0
 801bb3e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801bb40:	f107 030c 	add.w	r3, r7, #12
 801bb44:	2200      	movs	r2, #0
 801bb46:	601a      	str	r2, [r3, #0]
 801bb48:	605a      	str	r2, [r3, #4]
 801bb4a:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	781a      	ldrb	r2, [r3, #0]
 801bb50:	4b44      	ldr	r3, [pc, #272]	@ (801bc64 <SUBGRF_SetPacketParams+0x130>)
 801bb52:	781b      	ldrb	r3, [r3, #0]
 801bb54:	429a      	cmp	r2, r3
 801bb56:	d004      	beq.n	801bb62 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	781b      	ldrb	r3, [r3, #0]
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	f7ff fe27 	bl	801b7b0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	781b      	ldrb	r3, [r3, #0]
 801bb66:	2b03      	cmp	r3, #3
 801bb68:	d878      	bhi.n	801bc5c <SUBGRF_SetPacketParams+0x128>
 801bb6a:	a201      	add	r2, pc, #4	@ (adr r2, 801bb70 <SUBGRF_SetPacketParams+0x3c>)
 801bb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb70:	0801bb81 	.word	0x0801bb81
 801bb74:	0801bc11 	.word	0x0801bc11
 801bb78:	0801bc05 	.word	0x0801bc05
 801bb7c:	0801bb81 	.word	0x0801bb81
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	7a5b      	ldrb	r3, [r3, #9]
 801bb84:	2bf1      	cmp	r3, #241	@ 0xf1
 801bb86:	d10a      	bne.n	801bb9e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801bb88:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801bb8c:	f7ff faa6 	bl	801b0dc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801bb90:	f248 0005 	movw	r0, #32773	@ 0x8005
 801bb94:	f7ff fac2 	bl	801b11c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801bb98:	2302      	movs	r3, #2
 801bb9a:	75bb      	strb	r3, [r7, #22]
 801bb9c:	e011      	b.n	801bbc2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	7a5b      	ldrb	r3, [r3, #9]
 801bba2:	2bf2      	cmp	r3, #242	@ 0xf2
 801bba4:	d10a      	bne.n	801bbbc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801bba6:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801bbaa:	f7ff fa97 	bl	801b0dc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801bbae:	f241 0021 	movw	r0, #4129	@ 0x1021
 801bbb2:	f7ff fab3 	bl	801b11c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801bbb6:	2306      	movs	r3, #6
 801bbb8:	75bb      	strb	r3, [r7, #22]
 801bbba:	e002      	b.n	801bbc2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	7a5b      	ldrb	r3, [r3, #9]
 801bbc0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801bbc2:	2309      	movs	r3, #9
 801bbc4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	885b      	ldrh	r3, [r3, #2]
 801bbca:	0a1b      	lsrs	r3, r3, #8
 801bbcc:	b29b      	uxth	r3, r3
 801bbce:	b2db      	uxtb	r3, r3
 801bbd0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	885b      	ldrh	r3, [r3, #2]
 801bbd6:	b2db      	uxtb	r3, r3
 801bbd8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	791b      	ldrb	r3, [r3, #4]
 801bbde:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	795b      	ldrb	r3, [r3, #5]
 801bbe4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	799b      	ldrb	r3, [r3, #6]
 801bbea:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	79db      	ldrb	r3, [r3, #7]
 801bbf0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	7a1b      	ldrb	r3, [r3, #8]
 801bbf6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801bbf8:	7dbb      	ldrb	r3, [r7, #22]
 801bbfa:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	7a9b      	ldrb	r3, [r3, #10]
 801bc00:	753b      	strb	r3, [r7, #20]
        break;
 801bc02:	e022      	b.n	801bc4a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801bc04:	2301      	movs	r3, #1
 801bc06:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	7b1b      	ldrb	r3, [r3, #12]
 801bc0c:	733b      	strb	r3, [r7, #12]
        break;
 801bc0e:	e01c      	b.n	801bc4a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801bc10:	2306      	movs	r3, #6
 801bc12:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	89db      	ldrh	r3, [r3, #14]
 801bc18:	0a1b      	lsrs	r3, r3, #8
 801bc1a:	b29b      	uxth	r3, r3
 801bc1c:	b2db      	uxtb	r3, r3
 801bc1e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	89db      	ldrh	r3, [r3, #14]
 801bc24:	b2db      	uxtb	r3, r3
 801bc26:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	7c1a      	ldrb	r2, [r3, #16]
 801bc2c:	4b0e      	ldr	r3, [pc, #56]	@ (801bc68 <SUBGRF_SetPacketParams+0x134>)
 801bc2e:	4611      	mov	r1, r2
 801bc30:	7019      	strb	r1, [r3, #0]
 801bc32:	4613      	mov	r3, r2
 801bc34:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	7c5b      	ldrb	r3, [r3, #17]
 801bc3a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	7c9b      	ldrb	r3, [r3, #18]
 801bc40:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	7cdb      	ldrb	r3, [r3, #19]
 801bc46:	747b      	strb	r3, [r7, #17]
        break;
 801bc48:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801bc4a:	7dfb      	ldrb	r3, [r7, #23]
 801bc4c:	b29a      	uxth	r2, r3
 801bc4e:	f107 030c 	add.w	r3, r7, #12
 801bc52:	4619      	mov	r1, r3
 801bc54:	208c      	movs	r0, #140	@ 0x8c
 801bc56:	f000 f97d 	bl	801bf54 <SUBGRF_WriteCommand>
 801bc5a:	e000      	b.n	801bc5e <SUBGRF_SetPacketParams+0x12a>
        return;
 801bc5c:	bf00      	nop
}
 801bc5e:	3718      	adds	r7, #24
 801bc60:	46bd      	mov	sp, r7
 801bc62:	bd80      	pop	{r7, pc}
 801bc64:	20001ebd 	.word	0x20001ebd
 801bc68:	20001ebe 	.word	0x20001ebe

0801bc6c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801bc6c:	b580      	push	{r7, lr}
 801bc6e:	b084      	sub	sp, #16
 801bc70:	af00      	add	r7, sp, #0
 801bc72:	4603      	mov	r3, r0
 801bc74:	460a      	mov	r2, r1
 801bc76:	71fb      	strb	r3, [r7, #7]
 801bc78:	4613      	mov	r3, r2
 801bc7a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801bc7c:	79fb      	ldrb	r3, [r7, #7]
 801bc7e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801bc80:	79bb      	ldrb	r3, [r7, #6]
 801bc82:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801bc84:	f107 030c 	add.w	r3, r7, #12
 801bc88:	2202      	movs	r2, #2
 801bc8a:	4619      	mov	r1, r3
 801bc8c:	208f      	movs	r0, #143	@ 0x8f
 801bc8e:	f000 f961 	bl	801bf54 <SUBGRF_WriteCommand>
}
 801bc92:	bf00      	nop
 801bc94:	3710      	adds	r7, #16
 801bc96:	46bd      	mov	sp, r7
 801bc98:	bd80      	pop	{r7, pc}

0801bc9a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801bc9a:	b580      	push	{r7, lr}
 801bc9c:	b082      	sub	sp, #8
 801bc9e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801bca0:	2300      	movs	r3, #0
 801bca2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801bca4:	1d3b      	adds	r3, r7, #4
 801bca6:	2201      	movs	r2, #1
 801bca8:	4619      	mov	r1, r3
 801bcaa:	2015      	movs	r0, #21
 801bcac:	f000 f974 	bl	801bf98 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801bcb0:	793b      	ldrb	r3, [r7, #4]
 801bcb2:	425b      	negs	r3, r3
 801bcb4:	105b      	asrs	r3, r3, #1
 801bcb6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801bcb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801bcbc:	4618      	mov	r0, r3
 801bcbe:	3708      	adds	r7, #8
 801bcc0:	46bd      	mov	sp, r7
 801bcc2:	bd80      	pop	{r7, pc}

0801bcc4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801bcc4:	b580      	push	{r7, lr}
 801bcc6:	b084      	sub	sp, #16
 801bcc8:	af00      	add	r7, sp, #0
 801bcca:	6078      	str	r0, [r7, #4]
 801bccc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801bcce:	f107 030c 	add.w	r3, r7, #12
 801bcd2:	2202      	movs	r2, #2
 801bcd4:	4619      	mov	r1, r3
 801bcd6:	2013      	movs	r0, #19
 801bcd8:	f000 f95e 	bl	801bf98 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801bcdc:	f7ff fd84 	bl	801b7e8 <SUBGRF_GetPacketType>
 801bce0:	4603      	mov	r3, r0
 801bce2:	2b01      	cmp	r3, #1
 801bce4:	d10d      	bne.n	801bd02 <SUBGRF_GetRxBufferStatus+0x3e>
 801bce6:	4b0c      	ldr	r3, [pc, #48]	@ (801bd18 <SUBGRF_GetRxBufferStatus+0x54>)
 801bce8:	781b      	ldrb	r3, [r3, #0]
 801bcea:	b2db      	uxtb	r3, r3
 801bcec:	2b01      	cmp	r3, #1
 801bcee:	d108      	bne.n	801bd02 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801bcf0:	f240 7002 	movw	r0, #1794	@ 0x702
 801bcf4:	f000 f886 	bl	801be04 <SUBGRF_ReadRegister>
 801bcf8:	4603      	mov	r3, r0
 801bcfa:	461a      	mov	r2, r3
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	701a      	strb	r2, [r3, #0]
 801bd00:	e002      	b.n	801bd08 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801bd02:	7b3a      	ldrb	r2, [r7, #12]
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801bd08:	7b7a      	ldrb	r2, [r7, #13]
 801bd0a:	683b      	ldr	r3, [r7, #0]
 801bd0c:	701a      	strb	r2, [r3, #0]
}
 801bd0e:	bf00      	nop
 801bd10:	3710      	adds	r7, #16
 801bd12:	46bd      	mov	sp, r7
 801bd14:	bd80      	pop	{r7, pc}
 801bd16:	bf00      	nop
 801bd18:	20001ebe 	.word	0x20001ebe

0801bd1c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	b084      	sub	sp, #16
 801bd20:	af00      	add	r7, sp, #0
 801bd22:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801bd24:	f107 030c 	add.w	r3, r7, #12
 801bd28:	2203      	movs	r2, #3
 801bd2a:	4619      	mov	r1, r3
 801bd2c:	2014      	movs	r0, #20
 801bd2e:	f000 f933 	bl	801bf98 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801bd32:	f7ff fd59 	bl	801b7e8 <SUBGRF_GetPacketType>
 801bd36:	4603      	mov	r3, r0
 801bd38:	461a      	mov	r2, r3
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	781b      	ldrb	r3, [r3, #0]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d002      	beq.n	801bd4c <SUBGRF_GetPacketStatus+0x30>
 801bd46:	2b01      	cmp	r3, #1
 801bd48:	d013      	beq.n	801bd72 <SUBGRF_GetPacketStatus+0x56>
 801bd4a:	e02a      	b.n	801bda2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801bd4c:	7b3a      	ldrb	r2, [r7, #12]
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801bd52:	7b7b      	ldrb	r3, [r7, #13]
 801bd54:	425b      	negs	r3, r3
 801bd56:	105b      	asrs	r3, r3, #1
 801bd58:	b25a      	sxtb	r2, r3
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801bd5e:	7bbb      	ldrb	r3, [r7, #14]
 801bd60:	425b      	negs	r3, r3
 801bd62:	105b      	asrs	r3, r3, #1
 801bd64:	b25a      	sxtb	r2, r3
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	2200      	movs	r2, #0
 801bd6e:	609a      	str	r2, [r3, #8]
            break;
 801bd70:	e020      	b.n	801bdb4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801bd72:	7b3b      	ldrb	r3, [r7, #12]
 801bd74:	425b      	negs	r3, r3
 801bd76:	105b      	asrs	r3, r3, #1
 801bd78:	b25a      	sxtb	r2, r3
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801bd7e:	7b7b      	ldrb	r3, [r7, #13]
 801bd80:	b25b      	sxtb	r3, r3
 801bd82:	3302      	adds	r3, #2
 801bd84:	109b      	asrs	r3, r3, #2
 801bd86:	b25a      	sxtb	r2, r3
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801bd8c:	7bbb      	ldrb	r3, [r7, #14]
 801bd8e:	425b      	negs	r3, r3
 801bd90:	105b      	asrs	r3, r3, #1
 801bd92:	b25a      	sxtb	r2, r3
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801bd98:	4b08      	ldr	r3, [pc, #32]	@ (801bdbc <SUBGRF_GetPacketStatus+0xa0>)
 801bd9a:	681a      	ldr	r2, [r3, #0]
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	611a      	str	r2, [r3, #16]
            break;
 801bda0:	e008      	b.n	801bdb4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801bda2:	2214      	movs	r2, #20
 801bda4:	2100      	movs	r1, #0
 801bda6:	6878      	ldr	r0, [r7, #4]
 801bda8:	f000 fc1d 	bl	801c5e6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	220f      	movs	r2, #15
 801bdb0:	701a      	strb	r2, [r3, #0]
            break;
 801bdb2:	bf00      	nop
    }
}
 801bdb4:	bf00      	nop
 801bdb6:	3710      	adds	r7, #16
 801bdb8:	46bd      	mov	sp, r7
 801bdba:	bd80      	pop	{r7, pc}
 801bdbc:	20001ec0 	.word	0x20001ec0

0801bdc0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801bdc0:	b580      	push	{r7, lr}
 801bdc2:	b086      	sub	sp, #24
 801bdc4:	af00      	add	r7, sp, #0
 801bdc6:	4603      	mov	r3, r0
 801bdc8:	460a      	mov	r2, r1
 801bdca:	80fb      	strh	r3, [r7, #6]
 801bdcc:	4613      	mov	r3, r2
 801bdce:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bdd0:	f3ef 8310 	mrs	r3, PRIMASK
 801bdd4:	60fb      	str	r3, [r7, #12]
  return(result);
 801bdd6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bdd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bdda:	b672      	cpsid	i
}
 801bddc:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801bdde:	1d7a      	adds	r2, r7, #5
 801bde0:	88f9      	ldrh	r1, [r7, #6]
 801bde2:	2301      	movs	r3, #1
 801bde4:	4806      	ldr	r0, [pc, #24]	@ (801be00 <SUBGRF_WriteRegister+0x40>)
 801bde6:	f7ec fd9d 	bl	8008924 <HAL_SUBGHZ_WriteRegisters>
 801bdea:	697b      	ldr	r3, [r7, #20]
 801bdec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bdee:	693b      	ldr	r3, [r7, #16]
 801bdf0:	f383 8810 	msr	PRIMASK, r3
}
 801bdf4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bdf6:	bf00      	nop
 801bdf8:	3718      	adds	r7, #24
 801bdfa:	46bd      	mov	sp, r7
 801bdfc:	bd80      	pop	{r7, pc}
 801bdfe:	bf00      	nop
 801be00:	20000418 	.word	0x20000418

0801be04 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801be04:	b580      	push	{r7, lr}
 801be06:	b086      	sub	sp, #24
 801be08:	af00      	add	r7, sp, #0
 801be0a:	4603      	mov	r3, r0
 801be0c:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be0e:	f3ef 8310 	mrs	r3, PRIMASK
 801be12:	60fb      	str	r3, [r7, #12]
  return(result);
 801be14:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 801be16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801be18:	b672      	cpsid	i
}
 801be1a:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801be1c:	f107 020b 	add.w	r2, r7, #11
 801be20:	88f9      	ldrh	r1, [r7, #6]
 801be22:	2301      	movs	r3, #1
 801be24:	4806      	ldr	r0, [pc, #24]	@ (801be40 <SUBGRF_ReadRegister+0x3c>)
 801be26:	f7ec fddc 	bl	80089e2 <HAL_SUBGHZ_ReadRegisters>
 801be2a:	697b      	ldr	r3, [r7, #20]
 801be2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be2e:	693b      	ldr	r3, [r7, #16]
 801be30:	f383 8810 	msr	PRIMASK, r3
}
 801be34:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 801be36:	7afb      	ldrb	r3, [r7, #11]
}
 801be38:	4618      	mov	r0, r3
 801be3a:	3718      	adds	r7, #24
 801be3c:	46bd      	mov	sp, r7
 801be3e:	bd80      	pop	{r7, pc}
 801be40:	20000418 	.word	0x20000418

0801be44 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801be44:	b580      	push	{r7, lr}
 801be46:	b086      	sub	sp, #24
 801be48:	af00      	add	r7, sp, #0
 801be4a:	4603      	mov	r3, r0
 801be4c:	6039      	str	r1, [r7, #0]
 801be4e:	80fb      	strh	r3, [r7, #6]
 801be50:	4613      	mov	r3, r2
 801be52:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be54:	f3ef 8310 	mrs	r3, PRIMASK
 801be58:	60fb      	str	r3, [r7, #12]
  return(result);
 801be5a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801be5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801be5e:	b672      	cpsid	i
}
 801be60:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801be62:	88bb      	ldrh	r3, [r7, #4]
 801be64:	88f9      	ldrh	r1, [r7, #6]
 801be66:	683a      	ldr	r2, [r7, #0]
 801be68:	4806      	ldr	r0, [pc, #24]	@ (801be84 <SUBGRF_WriteRegisters+0x40>)
 801be6a:	f7ec fd5b 	bl	8008924 <HAL_SUBGHZ_WriteRegisters>
 801be6e:	697b      	ldr	r3, [r7, #20]
 801be70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be72:	693b      	ldr	r3, [r7, #16]
 801be74:	f383 8810 	msr	PRIMASK, r3
}
 801be78:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801be7a:	bf00      	nop
 801be7c:	3718      	adds	r7, #24
 801be7e:	46bd      	mov	sp, r7
 801be80:	bd80      	pop	{r7, pc}
 801be82:	bf00      	nop
 801be84:	20000418 	.word	0x20000418

0801be88 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801be88:	b580      	push	{r7, lr}
 801be8a:	b086      	sub	sp, #24
 801be8c:	af00      	add	r7, sp, #0
 801be8e:	4603      	mov	r3, r0
 801be90:	6039      	str	r1, [r7, #0]
 801be92:	80fb      	strh	r3, [r7, #6]
 801be94:	4613      	mov	r3, r2
 801be96:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be98:	f3ef 8310 	mrs	r3, PRIMASK
 801be9c:	60fb      	str	r3, [r7, #12]
  return(result);
 801be9e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bea2:	b672      	cpsid	i
}
 801bea4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801bea6:	88bb      	ldrh	r3, [r7, #4]
 801bea8:	88f9      	ldrh	r1, [r7, #6]
 801beaa:	683a      	ldr	r2, [r7, #0]
 801beac:	4806      	ldr	r0, [pc, #24]	@ (801bec8 <SUBGRF_ReadRegisters+0x40>)
 801beae:	f7ec fd98 	bl	80089e2 <HAL_SUBGHZ_ReadRegisters>
 801beb2:	697b      	ldr	r3, [r7, #20]
 801beb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801beb6:	693b      	ldr	r3, [r7, #16]
 801beb8:	f383 8810 	msr	PRIMASK, r3
}
 801bebc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bebe:	bf00      	nop
 801bec0:	3718      	adds	r7, #24
 801bec2:	46bd      	mov	sp, r7
 801bec4:	bd80      	pop	{r7, pc}
 801bec6:	bf00      	nop
 801bec8:	20000418 	.word	0x20000418

0801becc <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801becc:	b580      	push	{r7, lr}
 801bece:	b086      	sub	sp, #24
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	4603      	mov	r3, r0
 801bed4:	6039      	str	r1, [r7, #0]
 801bed6:	71fb      	strb	r3, [r7, #7]
 801bed8:	4613      	mov	r3, r2
 801beda:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bedc:	f3ef 8310 	mrs	r3, PRIMASK
 801bee0:	60fb      	str	r3, [r7, #12]
  return(result);
 801bee2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bee4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bee6:	b672      	cpsid	i
}
 801bee8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801beea:	79bb      	ldrb	r3, [r7, #6]
 801beec:	b29b      	uxth	r3, r3
 801beee:	79f9      	ldrb	r1, [r7, #7]
 801bef0:	683a      	ldr	r2, [r7, #0]
 801bef2:	4806      	ldr	r0, [pc, #24]	@ (801bf0c <SUBGRF_WriteBuffer+0x40>)
 801bef4:	f7ec fe89 	bl	8008c0a <HAL_SUBGHZ_WriteBuffer>
 801bef8:	697b      	ldr	r3, [r7, #20]
 801befa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801befc:	693b      	ldr	r3, [r7, #16]
 801befe:	f383 8810 	msr	PRIMASK, r3
}
 801bf02:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bf04:	bf00      	nop
 801bf06:	3718      	adds	r7, #24
 801bf08:	46bd      	mov	sp, r7
 801bf0a:	bd80      	pop	{r7, pc}
 801bf0c:	20000418 	.word	0x20000418

0801bf10 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b086      	sub	sp, #24
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	4603      	mov	r3, r0
 801bf18:	6039      	str	r1, [r7, #0]
 801bf1a:	71fb      	strb	r3, [r7, #7]
 801bf1c:	4613      	mov	r3, r2
 801bf1e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf20:	f3ef 8310 	mrs	r3, PRIMASK
 801bf24:	60fb      	str	r3, [r7, #12]
  return(result);
 801bf26:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bf28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf2a:	b672      	cpsid	i
}
 801bf2c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801bf2e:	79bb      	ldrb	r3, [r7, #6]
 801bf30:	b29b      	uxth	r3, r3
 801bf32:	79f9      	ldrb	r1, [r7, #7]
 801bf34:	683a      	ldr	r2, [r7, #0]
 801bf36:	4806      	ldr	r0, [pc, #24]	@ (801bf50 <SUBGRF_ReadBuffer+0x40>)
 801bf38:	f7ec feba 	bl	8008cb0 <HAL_SUBGHZ_ReadBuffer>
 801bf3c:	697b      	ldr	r3, [r7, #20]
 801bf3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf40:	693b      	ldr	r3, [r7, #16]
 801bf42:	f383 8810 	msr	PRIMASK, r3
}
 801bf46:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bf48:	bf00      	nop
 801bf4a:	3718      	adds	r7, #24
 801bf4c:	46bd      	mov	sp, r7
 801bf4e:	bd80      	pop	{r7, pc}
 801bf50:	20000418 	.word	0x20000418

0801bf54 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bf54:	b580      	push	{r7, lr}
 801bf56:	b086      	sub	sp, #24
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	4603      	mov	r3, r0
 801bf5c:	6039      	str	r1, [r7, #0]
 801bf5e:	71fb      	strb	r3, [r7, #7]
 801bf60:	4613      	mov	r3, r2
 801bf62:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf64:	f3ef 8310 	mrs	r3, PRIMASK
 801bf68:	60fb      	str	r3, [r7, #12]
  return(result);
 801bf6a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bf6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf6e:	b672      	cpsid	i
}
 801bf70:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801bf72:	88bb      	ldrh	r3, [r7, #4]
 801bf74:	79f9      	ldrb	r1, [r7, #7]
 801bf76:	683a      	ldr	r2, [r7, #0]
 801bf78:	4806      	ldr	r0, [pc, #24]	@ (801bf94 <SUBGRF_WriteCommand+0x40>)
 801bf7a:	f7ec fd93 	bl	8008aa4 <HAL_SUBGHZ_ExecSetCmd>
 801bf7e:	697b      	ldr	r3, [r7, #20]
 801bf80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf82:	693b      	ldr	r3, [r7, #16]
 801bf84:	f383 8810 	msr	PRIMASK, r3
}
 801bf88:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bf8a:	bf00      	nop
 801bf8c:	3718      	adds	r7, #24
 801bf8e:	46bd      	mov	sp, r7
 801bf90:	bd80      	pop	{r7, pc}
 801bf92:	bf00      	nop
 801bf94:	20000418 	.word	0x20000418

0801bf98 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bf98:	b580      	push	{r7, lr}
 801bf9a:	b086      	sub	sp, #24
 801bf9c:	af00      	add	r7, sp, #0
 801bf9e:	4603      	mov	r3, r0
 801bfa0:	6039      	str	r1, [r7, #0]
 801bfa2:	71fb      	strb	r3, [r7, #7]
 801bfa4:	4613      	mov	r3, r2
 801bfa6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bfa8:	f3ef 8310 	mrs	r3, PRIMASK
 801bfac:	60fb      	str	r3, [r7, #12]
  return(result);
 801bfae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bfb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bfb2:	b672      	cpsid	i
}
 801bfb4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801bfb6:	88bb      	ldrh	r3, [r7, #4]
 801bfb8:	79f9      	ldrb	r1, [r7, #7]
 801bfba:	683a      	ldr	r2, [r7, #0]
 801bfbc:	4806      	ldr	r0, [pc, #24]	@ (801bfd8 <SUBGRF_ReadCommand+0x40>)
 801bfbe:	f7ec fdd0 	bl	8008b62 <HAL_SUBGHZ_ExecGetCmd>
 801bfc2:	697b      	ldr	r3, [r7, #20]
 801bfc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bfc6:	693b      	ldr	r3, [r7, #16]
 801bfc8:	f383 8810 	msr	PRIMASK, r3
}
 801bfcc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bfce:	bf00      	nop
 801bfd0:	3718      	adds	r7, #24
 801bfd2:	46bd      	mov	sp, r7
 801bfd4:	bd80      	pop	{r7, pc}
 801bfd6:	bf00      	nop
 801bfd8:	20000418 	.word	0x20000418

0801bfdc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801bfdc:	b580      	push	{r7, lr}
 801bfde:	b084      	sub	sp, #16
 801bfe0:	af00      	add	r7, sp, #0
 801bfe2:	4603      	mov	r3, r0
 801bfe4:	460a      	mov	r2, r1
 801bfe6:	71fb      	strb	r3, [r7, #7]
 801bfe8:	4613      	mov	r3, r2
 801bfea:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801bfec:	2301      	movs	r3, #1
 801bfee:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801bff0:	79bb      	ldrb	r3, [r7, #6]
 801bff2:	2b01      	cmp	r3, #1
 801bff4:	d10d      	bne.n	801c012 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801bff6:	79fb      	ldrb	r3, [r7, #7]
 801bff8:	2b01      	cmp	r3, #1
 801bffa:	d104      	bne.n	801c006 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801bffc:	2302      	movs	r3, #2
 801bffe:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801c000:	2004      	movs	r0, #4
 801c002:	f000 f8ef 	bl	801c1e4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801c006:	79fb      	ldrb	r3, [r7, #7]
 801c008:	2b02      	cmp	r3, #2
 801c00a:	d107      	bne.n	801c01c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801c00c:	2303      	movs	r3, #3
 801c00e:	73fb      	strb	r3, [r7, #15]
 801c010:	e004      	b.n	801c01c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801c012:	79bb      	ldrb	r3, [r7, #6]
 801c014:	2b00      	cmp	r3, #0
 801c016:	d101      	bne.n	801c01c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801c018:	2301      	movs	r3, #1
 801c01a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801c01c:	7bfb      	ldrb	r3, [r7, #15]
 801c01e:	4618      	mov	r0, r3
 801c020:	f7f0 fa6f 	bl	800c502 <RBI_ConfigRFSwitch>
}
 801c024:	bf00      	nop
 801c026:	3710      	adds	r7, #16
 801c028:	46bd      	mov	sp, r7
 801c02a:	bd80      	pop	{r7, pc}

0801c02c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801c02c:	b580      	push	{r7, lr}
 801c02e:	b084      	sub	sp, #16
 801c030:	af00      	add	r7, sp, #0
 801c032:	4603      	mov	r3, r0
 801c034:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801c036:	2301      	movs	r3, #1
 801c038:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801c03a:	f7f0 fa70 	bl	800c51e <RBI_GetTxConfig>
 801c03e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801c040:	68bb      	ldr	r3, [r7, #8]
 801c042:	2b02      	cmp	r3, #2
 801c044:	d016      	beq.n	801c074 <SUBGRF_SetRfTxPower+0x48>
 801c046:	68bb      	ldr	r3, [r7, #8]
 801c048:	2b02      	cmp	r3, #2
 801c04a:	dc16      	bgt.n	801c07a <SUBGRF_SetRfTxPower+0x4e>
 801c04c:	68bb      	ldr	r3, [r7, #8]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d003      	beq.n	801c05a <SUBGRF_SetRfTxPower+0x2e>
 801c052:	68bb      	ldr	r3, [r7, #8]
 801c054:	2b01      	cmp	r3, #1
 801c056:	d00a      	beq.n	801c06e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801c058:	e00f      	b.n	801c07a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801c05a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c05e:	2b0f      	cmp	r3, #15
 801c060:	dd02      	ble.n	801c068 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801c062:	2302      	movs	r3, #2
 801c064:	73fb      	strb	r3, [r7, #15]
            break;
 801c066:	e009      	b.n	801c07c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801c068:	2301      	movs	r3, #1
 801c06a:	73fb      	strb	r3, [r7, #15]
            break;
 801c06c:	e006      	b.n	801c07c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801c06e:	2301      	movs	r3, #1
 801c070:	73fb      	strb	r3, [r7, #15]
            break;
 801c072:	e003      	b.n	801c07c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801c074:	2302      	movs	r3, #2
 801c076:	73fb      	strb	r3, [r7, #15]
            break;
 801c078:	e000      	b.n	801c07c <SUBGRF_SetRfTxPower+0x50>
            break;
 801c07a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801c07c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c080:	7bfb      	ldrb	r3, [r7, #15]
 801c082:	2202      	movs	r2, #2
 801c084:	4618      	mov	r0, r3
 801c086:	f7ff fbb9 	bl	801b7fc <SUBGRF_SetTxParams>

    return paSelect;
 801c08a:	7bfb      	ldrb	r3, [r7, #15]
}
 801c08c:	4618      	mov	r0, r3
 801c08e:	3710      	adds	r7, #16
 801c090:	46bd      	mov	sp, r7
 801c092:	bd80      	pop	{r7, pc}

0801c094 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801c094:	b480      	push	{r7}
 801c096:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801c098:	2301      	movs	r3, #1
}
 801c09a:	4618      	mov	r0, r3
 801c09c:	46bd      	mov	sp, r7
 801c09e:	bc80      	pop	{r7}
 801c0a0:	4770      	bx	lr
	...

0801c0a4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	b082      	sub	sp, #8
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801c0ac:	4b03      	ldr	r3, [pc, #12]	@ (801c0bc <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	2001      	movs	r0, #1
 801c0b2:	4798      	blx	r3
}
 801c0b4:	bf00      	nop
 801c0b6:	3708      	adds	r7, #8
 801c0b8:	46bd      	mov	sp, r7
 801c0ba:	bd80      	pop	{r7, pc}
 801c0bc:	20001ec8 	.word	0x20001ec8

0801c0c0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b082      	sub	sp, #8
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801c0c8:	4b03      	ldr	r3, [pc, #12]	@ (801c0d8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	2002      	movs	r0, #2
 801c0ce:	4798      	blx	r3
}
 801c0d0:	bf00      	nop
 801c0d2:	3708      	adds	r7, #8
 801c0d4:	46bd      	mov	sp, r7
 801c0d6:	bd80      	pop	{r7, pc}
 801c0d8:	20001ec8 	.word	0x20001ec8

0801c0dc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	b082      	sub	sp, #8
 801c0e0:	af00      	add	r7, sp, #0
 801c0e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801c0e4:	4b03      	ldr	r3, [pc, #12]	@ (801c0f4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	2040      	movs	r0, #64	@ 0x40
 801c0ea:	4798      	blx	r3
}
 801c0ec:	bf00      	nop
 801c0ee:	3708      	adds	r7, #8
 801c0f0:	46bd      	mov	sp, r7
 801c0f2:	bd80      	pop	{r7, pc}
 801c0f4:	20001ec8 	.word	0x20001ec8

0801c0f8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801c0f8:	b580      	push	{r7, lr}
 801c0fa:	b082      	sub	sp, #8
 801c0fc:	af00      	add	r7, sp, #0
 801c0fe:	6078      	str	r0, [r7, #4]
 801c100:	460b      	mov	r3, r1
 801c102:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801c104:	78fb      	ldrb	r3, [r7, #3]
 801c106:	2b00      	cmp	r3, #0
 801c108:	d002      	beq.n	801c110 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801c10a:	2b01      	cmp	r3, #1
 801c10c:	d005      	beq.n	801c11a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801c10e:	e00a      	b.n	801c126 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801c110:	4b07      	ldr	r3, [pc, #28]	@ (801c130 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c112:	681b      	ldr	r3, [r3, #0]
 801c114:	2080      	movs	r0, #128	@ 0x80
 801c116:	4798      	blx	r3
            break;
 801c118:	e005      	b.n	801c126 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801c11a:	4b05      	ldr	r3, [pc, #20]	@ (801c130 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c11c:	681b      	ldr	r3, [r3, #0]
 801c11e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c122:	4798      	blx	r3
            break;
 801c124:	bf00      	nop
    }
}
 801c126:	bf00      	nop
 801c128:	3708      	adds	r7, #8
 801c12a:	46bd      	mov	sp, r7
 801c12c:	bd80      	pop	{r7, pc}
 801c12e:	bf00      	nop
 801c130:	20001ec8 	.word	0x20001ec8

0801c134 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b082      	sub	sp, #8
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801c13c:	4b04      	ldr	r3, [pc, #16]	@ (801c150 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801c144:	4798      	blx	r3
}
 801c146:	bf00      	nop
 801c148:	3708      	adds	r7, #8
 801c14a:	46bd      	mov	sp, r7
 801c14c:	bd80      	pop	{r7, pc}
 801c14e:	bf00      	nop
 801c150:	20001ec8 	.word	0x20001ec8

0801c154 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c154:	b580      	push	{r7, lr}
 801c156:	b082      	sub	sp, #8
 801c158:	af00      	add	r7, sp, #0
 801c15a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801c15c:	4b03      	ldr	r3, [pc, #12]	@ (801c16c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	2020      	movs	r0, #32
 801c162:	4798      	blx	r3
}
 801c164:	bf00      	nop
 801c166:	3708      	adds	r7, #8
 801c168:	46bd      	mov	sp, r7
 801c16a:	bd80      	pop	{r7, pc}
 801c16c:	20001ec8 	.word	0x20001ec8

0801c170 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c170:	b580      	push	{r7, lr}
 801c172:	b082      	sub	sp, #8
 801c174:	af00      	add	r7, sp, #0
 801c176:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801c178:	4b03      	ldr	r3, [pc, #12]	@ (801c188 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	2004      	movs	r0, #4
 801c17e:	4798      	blx	r3
}
 801c180:	bf00      	nop
 801c182:	3708      	adds	r7, #8
 801c184:	46bd      	mov	sp, r7
 801c186:	bd80      	pop	{r7, pc}
 801c188:	20001ec8 	.word	0x20001ec8

0801c18c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c18c:	b580      	push	{r7, lr}
 801c18e:	b082      	sub	sp, #8
 801c190:	af00      	add	r7, sp, #0
 801c192:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801c194:	4b03      	ldr	r3, [pc, #12]	@ (801c1a4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	2008      	movs	r0, #8
 801c19a:	4798      	blx	r3
}
 801c19c:	bf00      	nop
 801c19e:	3708      	adds	r7, #8
 801c1a0:	46bd      	mov	sp, r7
 801c1a2:	bd80      	pop	{r7, pc}
 801c1a4:	20001ec8 	.word	0x20001ec8

0801c1a8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c1a8:	b580      	push	{r7, lr}
 801c1aa:	b082      	sub	sp, #8
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801c1b0:	4b03      	ldr	r3, [pc, #12]	@ (801c1c0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	2010      	movs	r0, #16
 801c1b6:	4798      	blx	r3
}
 801c1b8:	bf00      	nop
 801c1ba:	3708      	adds	r7, #8
 801c1bc:	46bd      	mov	sp, r7
 801c1be:	bd80      	pop	{r7, pc}
 801c1c0:	20001ec8 	.word	0x20001ec8

0801c1c4 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b082      	sub	sp, #8
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801c1cc:	4b04      	ldr	r3, [pc, #16]	@ (801c1e0 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801c1d4:	4798      	blx	r3
}
 801c1d6:	bf00      	nop
 801c1d8:	3708      	adds	r7, #8
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	bd80      	pop	{r7, pc}
 801c1de:	bf00      	nop
 801c1e0:	20001ec8 	.word	0x20001ec8

0801c1e4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801c1e4:	b580      	push	{r7, lr}
 801c1e6:	b084      	sub	sp, #16
 801c1e8:	af00      	add	r7, sp, #0
 801c1ea:	4603      	mov	r3, r0
 801c1ec:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801c1ee:	f7f0 f9a4 	bl	800c53a <RBI_IsDCDC>
 801c1f2:	4603      	mov	r3, r0
 801c1f4:	2b01      	cmp	r3, #1
 801c1f6:	d112      	bne.n	801c21e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801c1f8:	f640 1023 	movw	r0, #2339	@ 0x923
 801c1fc:	f7ff fe02 	bl	801be04 <SUBGRF_ReadRegister>
 801c200:	4603      	mov	r3, r0
 801c202:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801c204:	7bfb      	ldrb	r3, [r7, #15]
 801c206:	f023 0306 	bic.w	r3, r3, #6
 801c20a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801c20c:	7bfa      	ldrb	r2, [r7, #15]
 801c20e:	79fb      	ldrb	r3, [r7, #7]
 801c210:	4313      	orrs	r3, r2
 801c212:	b2db      	uxtb	r3, r3
 801c214:	4619      	mov	r1, r3
 801c216:	f640 1023 	movw	r0, #2339	@ 0x923
 801c21a:	f7ff fdd1 	bl	801bdc0 <SUBGRF_WriteRegister>
  }
}
 801c21e:	bf00      	nop
 801c220:	3710      	adds	r7, #16
 801c222:	46bd      	mov	sp, r7
 801c224:	bd80      	pop	{r7, pc}
	...

0801c228 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801c228:	b480      	push	{r7}
 801c22a:	b085      	sub	sp, #20
 801c22c:	af00      	add	r7, sp, #0
 801c22e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	2b00      	cmp	r3, #0
 801c234:	d101      	bne.n	801c23a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801c236:	231f      	movs	r3, #31
 801c238:	e017      	b.n	801c26a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c23a:	2300      	movs	r3, #0
 801c23c:	73fb      	strb	r3, [r7, #15]
 801c23e:	e00f      	b.n	801c260 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801c240:	7bfb      	ldrb	r3, [r7, #15]
 801c242:	4a0c      	ldr	r2, [pc, #48]	@ (801c274 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c244:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c248:	687a      	ldr	r2, [r7, #4]
 801c24a:	429a      	cmp	r2, r3
 801c24c:	d205      	bcs.n	801c25a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801c24e:	7bfb      	ldrb	r3, [r7, #15]
 801c250:	4a08      	ldr	r2, [pc, #32]	@ (801c274 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c252:	00db      	lsls	r3, r3, #3
 801c254:	4413      	add	r3, r2
 801c256:	791b      	ldrb	r3, [r3, #4]
 801c258:	e007      	b.n	801c26a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c25a:	7bfb      	ldrb	r3, [r7, #15]
 801c25c:	3301      	adds	r3, #1
 801c25e:	73fb      	strb	r3, [r7, #15]
 801c260:	7bfb      	ldrb	r3, [r7, #15]
 801c262:	2b15      	cmp	r3, #21
 801c264:	d9ec      	bls.n	801c240 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801c266:	bf00      	nop
 801c268:	e7fd      	b.n	801c266 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801c26a:	4618      	mov	r0, r3
 801c26c:	3714      	adds	r7, #20
 801c26e:	46bd      	mov	sp, r7
 801c270:	bc80      	pop	{r7}
 801c272:	4770      	bx	lr
 801c274:	080216b0 	.word	0x080216b0

0801c278 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801c278:	b580      	push	{r7, lr}
 801c27a:	b08a      	sub	sp, #40	@ 0x28
 801c27c:	af00      	add	r7, sp, #0
 801c27e:	6078      	str	r0, [r7, #4]
 801c280:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801c282:	4b35      	ldr	r3, [pc, #212]	@ (801c358 <SUBGRF_GetCFO+0xe0>)
 801c284:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801c286:	f640 0007 	movw	r0, #2055	@ 0x807
 801c28a:	f7ff fdbb 	bl	801be04 <SUBGRF_ReadRegister>
 801c28e:	4603      	mov	r3, r0
 801c290:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801c292:	7ffb      	ldrb	r3, [r7, #31]
 801c294:	08db      	lsrs	r3, r3, #3
 801c296:	b2db      	uxtb	r3, r3
 801c298:	f003 0303 	and.w	r3, r3, #3
 801c29c:	3328      	adds	r3, #40	@ 0x28
 801c29e:	443b      	add	r3, r7
 801c2a0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801c2a4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801c2a6:	7ffb      	ldrb	r3, [r7, #31]
 801c2a8:	f003 0307 	and.w	r3, r3, #7
 801c2ac:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801c2ae:	7fba      	ldrb	r2, [r7, #30]
 801c2b0:	7f7b      	ldrb	r3, [r7, #29]
 801c2b2:	3301      	adds	r3, #1
 801c2b4:	fa02 f303 	lsl.w	r3, r2, r3
 801c2b8:	461a      	mov	r2, r3
 801c2ba:	4b28      	ldr	r3, [pc, #160]	@ (801c35c <SUBGRF_GetCFO+0xe4>)
 801c2bc:	fbb3 f3f2 	udiv	r3, r3, r2
 801c2c0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801c2c2:	69ba      	ldr	r2, [r7, #24]
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 801c2ca:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801c2cc:	2301      	movs	r3, #1
 801c2ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801c2d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c2d6:	697a      	ldr	r2, [r7, #20]
 801c2d8:	fb02 f303 	mul.w	r3, r2, r3
 801c2dc:	2b07      	cmp	r3, #7
 801c2de:	d802      	bhi.n	801c2e6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801c2e0:	2302      	movs	r3, #2
 801c2e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801c2e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c2ea:	697a      	ldr	r2, [r7, #20]
 801c2ec:	fb02 f303 	mul.w	r3, r2, r3
 801c2f0:	2b03      	cmp	r3, #3
 801c2f2:	d802      	bhi.n	801c2fa <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801c2f4:	2304      	movs	r3, #4
 801c2f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801c2fa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c2fe:	69bb      	ldr	r3, [r7, #24]
 801c300:	fb02 f303 	mul.w	r3, r2, r3
 801c304:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801c306:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801c30a:	f7ff fd7b 	bl	801be04 <SUBGRF_ReadRegister>
 801c30e:	4603      	mov	r3, r0
 801c310:	021b      	lsls	r3, r3, #8
 801c312:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801c316:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801c318:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801c31c:	f7ff fd72 	bl	801be04 <SUBGRF_ReadRegister>
 801c320:	4603      	mov	r3, r0
 801c322:	461a      	mov	r2, r3
 801c324:	6a3b      	ldr	r3, [r7, #32]
 801c326:	4313      	orrs	r3, r2
 801c328:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801c32a:	6a3b      	ldr	r3, [r7, #32]
 801c32c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801c330:	2b00      	cmp	r3, #0
 801c332:	d005      	beq.n	801c340 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801c334:	6a3b      	ldr	r3, [r7, #32]
 801c336:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801c33a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801c33e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801c340:	693b      	ldr	r3, [r7, #16]
 801c342:	095b      	lsrs	r3, r3, #5
 801c344:	6a3a      	ldr	r2, [r7, #32]
 801c346:	fb02 f303 	mul.w	r3, r2, r3
 801c34a:	11da      	asrs	r2, r3, #7
 801c34c:	683b      	ldr	r3, [r7, #0]
 801c34e:	601a      	str	r2, [r3, #0]
}
 801c350:	bf00      	nop
 801c352:	3728      	adds	r7, #40	@ 0x28
 801c354:	46bd      	mov	sp, r7
 801c356:	bd80      	pop	{r7, pc}
 801c358:	0c0a0804 	.word	0x0c0a0804
 801c35c:	01e84800 	.word	0x01e84800

0801c360 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801c360:	b480      	push	{r7}
 801c362:	b087      	sub	sp, #28
 801c364:	af00      	add	r7, sp, #0
 801c366:	4603      	mov	r3, r0
 801c368:	60b9      	str	r1, [r7, #8]
 801c36a:	607a      	str	r2, [r7, #4]
 801c36c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801c36e:	2300      	movs	r3, #0
 801c370:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801c372:	f04f 33ff 	mov.w	r3, #4294967295
 801c376:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c378:	697b      	ldr	r3, [r7, #20]
}
 801c37a:	4618      	mov	r0, r3
 801c37c:	371c      	adds	r7, #28
 801c37e:	46bd      	mov	sp, r7
 801c380:	bc80      	pop	{r7}
 801c382:	4770      	bx	lr

0801c384 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801c384:	b480      	push	{r7}
 801c386:	b087      	sub	sp, #28
 801c388:	af00      	add	r7, sp, #0
 801c38a:	4603      	mov	r3, r0
 801c38c:	60b9      	str	r1, [r7, #8]
 801c38e:	607a      	str	r2, [r7, #4]
 801c390:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801c392:	2300      	movs	r3, #0
 801c394:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801c396:	f04f 33ff 	mov.w	r3, #4294967295
 801c39a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c39c:	697b      	ldr	r3, [r7, #20]
}
 801c39e:	4618      	mov	r0, r3
 801c3a0:	371c      	adds	r7, #28
 801c3a2:	46bd      	mov	sp, r7
 801c3a4:	bc80      	pop	{r7}
 801c3a6:	4770      	bx	lr

0801c3a8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801c3a8:	b480      	push	{r7}
 801c3aa:	b085      	sub	sp, #20
 801c3ac:	af00      	add	r7, sp, #0
 801c3ae:	60f8      	str	r0, [r7, #12]
 801c3b0:	60b9      	str	r1, [r7, #8]
 801c3b2:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801c3b4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	3714      	adds	r7, #20
 801c3bc:	46bd      	mov	sp, r7
 801c3be:	bc80      	pop	{r7}
 801c3c0:	4770      	bx	lr

0801c3c2 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801c3c2:	b480      	push	{r7}
 801c3c4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801c3c6:	bf00      	nop
 801c3c8:	46bd      	mov	sp, r7
 801c3ca:	bc80      	pop	{r7}
 801c3cc:	4770      	bx	lr

0801c3ce <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801c3ce:	b480      	push	{r7}
 801c3d0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801c3d2:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c3d4:	4618      	mov	r0, r3
 801c3d6:	46bd      	mov	sp, r7
 801c3d8:	bc80      	pop	{r7}
 801c3da:	4770      	bx	lr

0801c3dc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801c3dc:	b480      	push	{r7}
 801c3de:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801c3e0:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c3e2:	4618      	mov	r0, r3
 801c3e4:	46bd      	mov	sp, r7
 801c3e6:	bc80      	pop	{r7}
 801c3e8:	4770      	bx	lr

0801c3ea <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801c3ea:	b480      	push	{r7}
 801c3ec:	b083      	sub	sp, #12
 801c3ee:	af00      	add	r7, sp, #0
 801c3f0:	4603      	mov	r3, r0
 801c3f2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801c3f4:	bf00      	nop
 801c3f6:	370c      	adds	r7, #12
 801c3f8:	46bd      	mov	sp, r7
 801c3fa:	bc80      	pop	{r7}
 801c3fc:	4770      	bx	lr

0801c3fe <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801c3fe:	b480      	push	{r7}
 801c400:	b087      	sub	sp, #28
 801c402:	af00      	add	r7, sp, #0
 801c404:	60f8      	str	r0, [r7, #12]
 801c406:	460b      	mov	r3, r1
 801c408:	607a      	str	r2, [r7, #4]
 801c40a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801c40c:	f04f 33ff 	mov.w	r3, #4294967295
 801c410:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801c412:	697b      	ldr	r3, [r7, #20]
}
 801c414:	4618      	mov	r0, r3
 801c416:	371c      	adds	r7, #28
 801c418:	46bd      	mov	sp, r7
 801c41a:	bc80      	pop	{r7}
 801c41c:	4770      	bx	lr

0801c41e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c41e:	b480      	push	{r7}
 801c420:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801c422:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801c426:	4618      	mov	r0, r3
 801c428:	46bd      	mov	sp, r7
 801c42a:	bc80      	pop	{r7}
 801c42c:	4770      	bx	lr

0801c42e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801c42e:	b480      	push	{r7}
 801c430:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801c432:	bf00      	nop
 801c434:	46bd      	mov	sp, r7
 801c436:	bc80      	pop	{r7}
 801c438:	4770      	bx	lr

0801c43a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c43a:	b480      	push	{r7}
 801c43c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801c43e:	bf00      	nop
 801c440:	46bd      	mov	sp, r7
 801c442:	bc80      	pop	{r7}
 801c444:	4770      	bx	lr

0801c446 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801c446:	b480      	push	{r7}
 801c448:	b083      	sub	sp, #12
 801c44a:	af00      	add	r7, sp, #0
 801c44c:	4603      	mov	r3, r0
 801c44e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801c450:	bf00      	nop
 801c452:	370c      	adds	r7, #12
 801c454:	46bd      	mov	sp, r7
 801c456:	bc80      	pop	{r7}
 801c458:	4770      	bx	lr
	...

0801c45c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c45c:	b480      	push	{r7}
 801c45e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c460:	4b04      	ldr	r3, [pc, #16]	@ (801c474 <UTIL_LPM_Init+0x18>)
 801c462:	2200      	movs	r2, #0
 801c464:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c466:	4b04      	ldr	r3, [pc, #16]	@ (801c478 <UTIL_LPM_Init+0x1c>)
 801c468:	2200      	movs	r2, #0
 801c46a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c46c:	bf00      	nop
 801c46e:	46bd      	mov	sp, r7
 801c470:	bc80      	pop	{r7}
 801c472:	4770      	bx	lr
 801c474:	20001ecc 	.word	0x20001ecc
 801c478:	20001ed0 	.word	0x20001ed0

0801c47c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c47c:	b480      	push	{r7}
 801c47e:	b087      	sub	sp, #28
 801c480:	af00      	add	r7, sp, #0
 801c482:	6078      	str	r0, [r7, #4]
 801c484:	460b      	mov	r3, r1
 801c486:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c488:	f3ef 8310 	mrs	r3, PRIMASK
 801c48c:	613b      	str	r3, [r7, #16]
  return(result);
 801c48e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c490:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c492:	b672      	cpsid	i
}
 801c494:	bf00      	nop
  
  switch( state )
 801c496:	78fb      	ldrb	r3, [r7, #3]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d008      	beq.n	801c4ae <UTIL_LPM_SetStopMode+0x32>
 801c49c:	2b01      	cmp	r3, #1
 801c49e:	d10e      	bne.n	801c4be <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c4a0:	4b0d      	ldr	r3, [pc, #52]	@ (801c4d8 <UTIL_LPM_SetStopMode+0x5c>)
 801c4a2:	681a      	ldr	r2, [r3, #0]
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	4313      	orrs	r3, r2
 801c4a8:	4a0b      	ldr	r2, [pc, #44]	@ (801c4d8 <UTIL_LPM_SetStopMode+0x5c>)
 801c4aa:	6013      	str	r3, [r2, #0]
      break;
 801c4ac:	e008      	b.n	801c4c0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	43da      	mvns	r2, r3
 801c4b2:	4b09      	ldr	r3, [pc, #36]	@ (801c4d8 <UTIL_LPM_SetStopMode+0x5c>)
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	4013      	ands	r3, r2
 801c4b8:	4a07      	ldr	r2, [pc, #28]	@ (801c4d8 <UTIL_LPM_SetStopMode+0x5c>)
 801c4ba:	6013      	str	r3, [r2, #0]
      break;
 801c4bc:	e000      	b.n	801c4c0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c4be:	bf00      	nop
 801c4c0:	697b      	ldr	r3, [r7, #20]
 801c4c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	f383 8810 	msr	PRIMASK, r3
}
 801c4ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c4cc:	bf00      	nop
 801c4ce:	371c      	adds	r7, #28
 801c4d0:	46bd      	mov	sp, r7
 801c4d2:	bc80      	pop	{r7}
 801c4d4:	4770      	bx	lr
 801c4d6:	bf00      	nop
 801c4d8:	20001ecc 	.word	0x20001ecc

0801c4dc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c4dc:	b480      	push	{r7}
 801c4de:	b087      	sub	sp, #28
 801c4e0:	af00      	add	r7, sp, #0
 801c4e2:	6078      	str	r0, [r7, #4]
 801c4e4:	460b      	mov	r3, r1
 801c4e6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4e8:	f3ef 8310 	mrs	r3, PRIMASK
 801c4ec:	613b      	str	r3, [r7, #16]
  return(result);
 801c4ee:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c4f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4f2:	b672      	cpsid	i
}
 801c4f4:	bf00      	nop
  
  switch(state)
 801c4f6:	78fb      	ldrb	r3, [r7, #3]
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d008      	beq.n	801c50e <UTIL_LPM_SetOffMode+0x32>
 801c4fc:	2b01      	cmp	r3, #1
 801c4fe:	d10e      	bne.n	801c51e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c500:	4b0d      	ldr	r3, [pc, #52]	@ (801c538 <UTIL_LPM_SetOffMode+0x5c>)
 801c502:	681a      	ldr	r2, [r3, #0]
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	4313      	orrs	r3, r2
 801c508:	4a0b      	ldr	r2, [pc, #44]	@ (801c538 <UTIL_LPM_SetOffMode+0x5c>)
 801c50a:	6013      	str	r3, [r2, #0]
      break;
 801c50c:	e008      	b.n	801c520 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	43da      	mvns	r2, r3
 801c512:	4b09      	ldr	r3, [pc, #36]	@ (801c538 <UTIL_LPM_SetOffMode+0x5c>)
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	4013      	ands	r3, r2
 801c518:	4a07      	ldr	r2, [pc, #28]	@ (801c538 <UTIL_LPM_SetOffMode+0x5c>)
 801c51a:	6013      	str	r3, [r2, #0]
      break;
 801c51c:	e000      	b.n	801c520 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c51e:	bf00      	nop
 801c520:	697b      	ldr	r3, [r7, #20]
 801c522:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c524:	68fb      	ldr	r3, [r7, #12]
 801c526:	f383 8810 	msr	PRIMASK, r3
}
 801c52a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c52c:	bf00      	nop
 801c52e:	371c      	adds	r7, #28
 801c530:	46bd      	mov	sp, r7
 801c532:	bc80      	pop	{r7}
 801c534:	4770      	bx	lr
 801c536:	bf00      	nop
 801c538:	20001ed0 	.word	0x20001ed0

0801c53c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801c53c:	b580      	push	{r7, lr}
 801c53e:	b084      	sub	sp, #16
 801c540:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c542:	f3ef 8310 	mrs	r3, PRIMASK
 801c546:	60bb      	str	r3, [r7, #8]
  return(result);
 801c548:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c54a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c54c:	b672      	cpsid	i
}
 801c54e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c550:	4b12      	ldr	r3, [pc, #72]	@ (801c59c <UTIL_LPM_EnterLowPower+0x60>)
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	2b00      	cmp	r3, #0
 801c556:	d006      	beq.n	801c566 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c558:	4b11      	ldr	r3, [pc, #68]	@ (801c5a0 <UTIL_LPM_EnterLowPower+0x64>)
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c55e:	4b10      	ldr	r3, [pc, #64]	@ (801c5a0 <UTIL_LPM_EnterLowPower+0x64>)
 801c560:	685b      	ldr	r3, [r3, #4]
 801c562:	4798      	blx	r3
 801c564:	e010      	b.n	801c588 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c566:	4b0f      	ldr	r3, [pc, #60]	@ (801c5a4 <UTIL_LPM_EnterLowPower+0x68>)
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d006      	beq.n	801c57c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c56e:	4b0c      	ldr	r3, [pc, #48]	@ (801c5a0 <UTIL_LPM_EnterLowPower+0x64>)
 801c570:	689b      	ldr	r3, [r3, #8]
 801c572:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c574:	4b0a      	ldr	r3, [pc, #40]	@ (801c5a0 <UTIL_LPM_EnterLowPower+0x64>)
 801c576:	68db      	ldr	r3, [r3, #12]
 801c578:	4798      	blx	r3
 801c57a:	e005      	b.n	801c588 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c57c:	4b08      	ldr	r3, [pc, #32]	@ (801c5a0 <UTIL_LPM_EnterLowPower+0x64>)
 801c57e:	691b      	ldr	r3, [r3, #16]
 801c580:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c582:	4b07      	ldr	r3, [pc, #28]	@ (801c5a0 <UTIL_LPM_EnterLowPower+0x64>)
 801c584:	695b      	ldr	r3, [r3, #20]
 801c586:	4798      	blx	r3
 801c588:	68fb      	ldr	r3, [r7, #12]
 801c58a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	f383 8810 	msr	PRIMASK, r3
}
 801c592:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c594:	bf00      	nop
 801c596:	3710      	adds	r7, #16
 801c598:	46bd      	mov	sp, r7
 801c59a:	bd80      	pop	{r7, pc}
 801c59c:	20001ecc 	.word	0x20001ecc
 801c5a0:	08021124 	.word	0x08021124
 801c5a4:	20001ed0 	.word	0x20001ed0

0801c5a8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c5a8:	b480      	push	{r7}
 801c5aa:	b087      	sub	sp, #28
 801c5ac:	af00      	add	r7, sp, #0
 801c5ae:	60f8      	str	r0, [r7, #12]
 801c5b0:	60b9      	str	r1, [r7, #8]
 801c5b2:	4613      	mov	r3, r2
 801c5b4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c5ba:	68bb      	ldr	r3, [r7, #8]
 801c5bc:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c5be:	e007      	b.n	801c5d0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c5c0:	693a      	ldr	r2, [r7, #16]
 801c5c2:	1c53      	adds	r3, r2, #1
 801c5c4:	613b      	str	r3, [r7, #16]
 801c5c6:	697b      	ldr	r3, [r7, #20]
 801c5c8:	1c59      	adds	r1, r3, #1
 801c5ca:	6179      	str	r1, [r7, #20]
 801c5cc:	7812      	ldrb	r2, [r2, #0]
 801c5ce:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c5d0:	88fb      	ldrh	r3, [r7, #6]
 801c5d2:	1e5a      	subs	r2, r3, #1
 801c5d4:	80fa      	strh	r2, [r7, #6]
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d1f2      	bne.n	801c5c0 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c5da:	bf00      	nop
 801c5dc:	bf00      	nop
 801c5de:	371c      	adds	r7, #28
 801c5e0:	46bd      	mov	sp, r7
 801c5e2:	bc80      	pop	{r7}
 801c5e4:	4770      	bx	lr

0801c5e6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c5e6:	b480      	push	{r7}
 801c5e8:	b085      	sub	sp, #20
 801c5ea:	af00      	add	r7, sp, #0
 801c5ec:	6078      	str	r0, [r7, #4]
 801c5ee:	460b      	mov	r3, r1
 801c5f0:	70fb      	strb	r3, [r7, #3]
 801c5f2:	4613      	mov	r3, r2
 801c5f4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c5fa:	e004      	b.n	801c606 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c5fc:	68fb      	ldr	r3, [r7, #12]
 801c5fe:	1c5a      	adds	r2, r3, #1
 801c600:	60fa      	str	r2, [r7, #12]
 801c602:	78fa      	ldrb	r2, [r7, #3]
 801c604:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c606:	883b      	ldrh	r3, [r7, #0]
 801c608:	1e5a      	subs	r2, r3, #1
 801c60a:	803a      	strh	r2, [r7, #0]
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d1f5      	bne.n	801c5fc <UTIL_MEM_set_8+0x16>
  }
}
 801c610:	bf00      	nop
 801c612:	bf00      	nop
 801c614:	3714      	adds	r7, #20
 801c616:	46bd      	mov	sp, r7
 801c618:	bc80      	pop	{r7}
 801c61a:	4770      	bx	lr

0801c61c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c61c:	b082      	sub	sp, #8
 801c61e:	b480      	push	{r7}
 801c620:	b087      	sub	sp, #28
 801c622:	af00      	add	r7, sp, #0
 801c624:	60f8      	str	r0, [r7, #12]
 801c626:	1d38      	adds	r0, r7, #4
 801c628:	e880 0006 	stmia.w	r0, {r1, r2}
 801c62c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c62e:	2300      	movs	r3, #0
 801c630:	613b      	str	r3, [r7, #16]
 801c632:	2300      	movs	r3, #0
 801c634:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801c636:	687a      	ldr	r2, [r7, #4]
 801c638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c63a:	4413      	add	r3, r2
 801c63c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c63e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c642:	b29a      	uxth	r2, r3
 801c644:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801c648:	b29b      	uxth	r3, r3
 801c64a:	4413      	add	r3, r2
 801c64c:	b29b      	uxth	r3, r3
 801c64e:	b21b      	sxth	r3, r3
 801c650:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801c652:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c656:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c65a:	db0a      	blt.n	801c672 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801c65c:	693b      	ldr	r3, [r7, #16]
 801c65e:	3301      	adds	r3, #1
 801c660:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801c662:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c666:	b29b      	uxth	r3, r3
 801c668:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801c66c:	b29b      	uxth	r3, r3
 801c66e:	b21b      	sxth	r3, r3
 801c670:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	461a      	mov	r2, r3
 801c676:	f107 0310 	add.w	r3, r7, #16
 801c67a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c67e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c682:	68f8      	ldr	r0, [r7, #12]
 801c684:	371c      	adds	r7, #28
 801c686:	46bd      	mov	sp, r7
 801c688:	bc80      	pop	{r7}
 801c68a:	b002      	add	sp, #8
 801c68c:	4770      	bx	lr

0801c68e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c68e:	b082      	sub	sp, #8
 801c690:	b480      	push	{r7}
 801c692:	b087      	sub	sp, #28
 801c694:	af00      	add	r7, sp, #0
 801c696:	60f8      	str	r0, [r7, #12]
 801c698:	1d38      	adds	r0, r7, #4
 801c69a:	e880 0006 	stmia.w	r0, {r1, r2}
 801c69e:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c6a0:	2300      	movs	r3, #0
 801c6a2:	613b      	str	r3, [r7, #16]
 801c6a4:	2300      	movs	r3, #0
 801c6a6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801c6a8:	687a      	ldr	r2, [r7, #4]
 801c6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6ac:	1ad3      	subs	r3, r2, r3
 801c6ae:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c6b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c6b4:	b29a      	uxth	r2, r3
 801c6b6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801c6ba:	b29b      	uxth	r3, r3
 801c6bc:	1ad3      	subs	r3, r2, r3
 801c6be:	b29b      	uxth	r3, r3
 801c6c0:	b21b      	sxth	r3, r3
 801c6c2:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801c6c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	da0a      	bge.n	801c6e2 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801c6cc:	693b      	ldr	r3, [r7, #16]
 801c6ce:	3b01      	subs	r3, #1
 801c6d0:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801c6d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c6d6:	b29b      	uxth	r3, r3
 801c6d8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801c6dc:	b29b      	uxth	r3, r3
 801c6de:	b21b      	sxth	r3, r3
 801c6e0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c6e2:	68fb      	ldr	r3, [r7, #12]
 801c6e4:	461a      	mov	r2, r3
 801c6e6:	f107 0310 	add.w	r3, r7, #16
 801c6ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c6ee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c6f2:	68f8      	ldr	r0, [r7, #12]
 801c6f4:	371c      	adds	r7, #28
 801c6f6:	46bd      	mov	sp, r7
 801c6f8:	bc80      	pop	{r7}
 801c6fa:	b002      	add	sp, #8
 801c6fc:	4770      	bx	lr
	...

0801c700 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c700:	b580      	push	{r7, lr}
 801c702:	b088      	sub	sp, #32
 801c704:	af02      	add	r7, sp, #8
 801c706:	463b      	mov	r3, r7
 801c708:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c70c:	2300      	movs	r3, #0
 801c70e:	60bb      	str	r3, [r7, #8]
 801c710:	2300      	movs	r3, #0
 801c712:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c714:	4b10      	ldr	r3, [pc, #64]	@ (801c758 <SysTimeSet+0x58>)
 801c716:	691b      	ldr	r3, [r3, #16]
 801c718:	f107 0208 	add.w	r2, r7, #8
 801c71c:	3204      	adds	r2, #4
 801c71e:	4610      	mov	r0, r2
 801c720:	4798      	blx	r3
 801c722:	4603      	mov	r3, r0
 801c724:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c726:	f107 0010 	add.w	r0, r7, #16
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	9300      	str	r3, [sp, #0]
 801c72e:	68bb      	ldr	r3, [r7, #8]
 801c730:	463a      	mov	r2, r7
 801c732:	ca06      	ldmia	r2, {r1, r2}
 801c734:	f7ff ffab 	bl	801c68e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c738:	4b07      	ldr	r3, [pc, #28]	@ (801c758 <SysTimeSet+0x58>)
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	693a      	ldr	r2, [r7, #16]
 801c73e:	4610      	mov	r0, r2
 801c740:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c742:	4b05      	ldr	r3, [pc, #20]	@ (801c758 <SysTimeSet+0x58>)
 801c744:	689b      	ldr	r3, [r3, #8]
 801c746:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c74a:	4610      	mov	r0, r2
 801c74c:	4798      	blx	r3
}
 801c74e:	bf00      	nop
 801c750:	3718      	adds	r7, #24
 801c752:	46bd      	mov	sp, r7
 801c754:	bd80      	pop	{r7, pc}
 801c756:	bf00      	nop
 801c758:	08021208 	.word	0x08021208

0801c75c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c75c:	b580      	push	{r7, lr}
 801c75e:	b08a      	sub	sp, #40	@ 0x28
 801c760:	af02      	add	r7, sp, #8
 801c762:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c764:	2300      	movs	r3, #0
 801c766:	61bb      	str	r3, [r7, #24]
 801c768:	2300      	movs	r3, #0
 801c76a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c76c:	2300      	movs	r3, #0
 801c76e:	613b      	str	r3, [r7, #16]
 801c770:	2300      	movs	r3, #0
 801c772:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c774:	4b14      	ldr	r3, [pc, #80]	@ (801c7c8 <SysTimeGet+0x6c>)
 801c776:	691b      	ldr	r3, [r3, #16]
 801c778:	f107 0218 	add.w	r2, r7, #24
 801c77c:	3204      	adds	r2, #4
 801c77e:	4610      	mov	r0, r2
 801c780:	4798      	blx	r3
 801c782:	4603      	mov	r3, r0
 801c784:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c786:	4b10      	ldr	r3, [pc, #64]	@ (801c7c8 <SysTimeGet+0x6c>)
 801c788:	68db      	ldr	r3, [r3, #12]
 801c78a:	4798      	blx	r3
 801c78c:	4603      	mov	r3, r0
 801c78e:	b21b      	sxth	r3, r3
 801c790:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c792:	4b0d      	ldr	r3, [pc, #52]	@ (801c7c8 <SysTimeGet+0x6c>)
 801c794:	685b      	ldr	r3, [r3, #4]
 801c796:	4798      	blx	r3
 801c798:	4603      	mov	r3, r0
 801c79a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c79c:	f107 0010 	add.w	r0, r7, #16
 801c7a0:	69fb      	ldr	r3, [r7, #28]
 801c7a2:	9300      	str	r3, [sp, #0]
 801c7a4:	69bb      	ldr	r3, [r7, #24]
 801c7a6:	f107 0208 	add.w	r2, r7, #8
 801c7aa:	ca06      	ldmia	r2, {r1, r2}
 801c7ac:	f7ff ff36 	bl	801c61c <SysTimeAdd>

  return sysTime;
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	461a      	mov	r2, r3
 801c7b4:	f107 0310 	add.w	r3, r7, #16
 801c7b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c7bc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c7c0:	6878      	ldr	r0, [r7, #4]
 801c7c2:	3720      	adds	r7, #32
 801c7c4:	46bd      	mov	sp, r7
 801c7c6:	bd80      	pop	{r7, pc}
 801c7c8:	08021208 	.word	0x08021208

0801c7cc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	b084      	sub	sp, #16
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c7d4:	2300      	movs	r3, #0
 801c7d6:	60bb      	str	r3, [r7, #8]
 801c7d8:	2300      	movs	r3, #0
 801c7da:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c7dc:	4b0a      	ldr	r3, [pc, #40]	@ (801c808 <SysTimeGetMcuTime+0x3c>)
 801c7de:	691b      	ldr	r3, [r3, #16]
 801c7e0:	f107 0208 	add.w	r2, r7, #8
 801c7e4:	3204      	adds	r2, #4
 801c7e6:	4610      	mov	r0, r2
 801c7e8:	4798      	blx	r3
 801c7ea:	4603      	mov	r3, r0
 801c7ec:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	461a      	mov	r2, r3
 801c7f2:	f107 0308 	add.w	r3, r7, #8
 801c7f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c7fa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c7fe:	6878      	ldr	r0, [r7, #4]
 801c800:	3710      	adds	r7, #16
 801c802:	46bd      	mov	sp, r7
 801c804:	bd80      	pop	{r7, pc}
 801c806:	bf00      	nop
 801c808:	08021208 	.word	0x08021208

0801c80c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c80c:	b580      	push	{r7, lr}
 801c80e:	b090      	sub	sp, #64	@ 0x40
 801c810:	af00      	add	r7, sp, #0
 801c812:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c814:	4b73      	ldr	r3, [pc, #460]	@ (801c9e4 <UTIL_SEQ_Run+0x1d8>)
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801c81a:	4b72      	ldr	r3, [pc, #456]	@ (801c9e4 <UTIL_SEQ_Run+0x1d8>)
 801c81c:	681a      	ldr	r2, [r3, #0]
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	4013      	ands	r3, r2
 801c822:	4a70      	ldr	r2, [pc, #448]	@ (801c9e4 <UTIL_SEQ_Run+0x1d8>)
 801c824:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c826:	4b70      	ldr	r3, [pc, #448]	@ (801c9e8 <UTIL_SEQ_Run+0x1dc>)
 801c828:	681b      	ldr	r3, [r3, #0]
 801c82a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801c82c:	4b6f      	ldr	r3, [pc, #444]	@ (801c9ec <UTIL_SEQ_Run+0x1e0>)
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801c832:	4b6f      	ldr	r3, [pc, #444]	@ (801c9f0 <UTIL_SEQ_Run+0x1e4>)
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801c838:	4b6e      	ldr	r3, [pc, #440]	@ (801c9f4 <UTIL_SEQ_Run+0x1e8>)
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c83e:	e08d      	b.n	801c95c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c840:	2300      	movs	r3, #0
 801c842:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c844:	e002      	b.n	801c84c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c848:	3301      	adds	r3, #1
 801c84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c84c:	4a6a      	ldr	r2, [pc, #424]	@ (801c9f8 <UTIL_SEQ_Run+0x1ec>)
 801c84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c850:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c856:	401a      	ands	r2, r3
 801c858:	4b62      	ldr	r3, [pc, #392]	@ (801c9e4 <UTIL_SEQ_Run+0x1d8>)
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	4013      	ands	r3, r2
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d0f1      	beq.n	801c846 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c862:	4a65      	ldr	r2, [pc, #404]	@ (801c9f8 <UTIL_SEQ_Run+0x1ec>)
 801c864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c866:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c86c:	401a      	ands	r2, r3
 801c86e:	4b5d      	ldr	r3, [pc, #372]	@ (801c9e4 <UTIL_SEQ_Run+0x1d8>)
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	4013      	ands	r3, r2
 801c874:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c876:	4a60      	ldr	r2, [pc, #384]	@ (801c9f8 <UTIL_SEQ_Run+0x1ec>)
 801c878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c87a:	00db      	lsls	r3, r3, #3
 801c87c:	4413      	add	r3, r2
 801c87e:	685a      	ldr	r2, [r3, #4]
 801c880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c882:	4013      	ands	r3, r2
 801c884:	2b00      	cmp	r3, #0
 801c886:	d106      	bne.n	801c896 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c888:	4a5b      	ldr	r2, [pc, #364]	@ (801c9f8 <UTIL_SEQ_Run+0x1ec>)
 801c88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c88c:	00db      	lsls	r3, r3, #3
 801c88e:	4413      	add	r3, r2
 801c890:	f04f 32ff 	mov.w	r2, #4294967295
 801c894:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c896:	4a58      	ldr	r2, [pc, #352]	@ (801c9f8 <UTIL_SEQ_Run+0x1ec>)
 801c898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c89a:	00db      	lsls	r3, r3, #3
 801c89c:	4413      	add	r3, r2
 801c89e:	685a      	ldr	r2, [r3, #4]
 801c8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8a2:	4013      	ands	r3, r2
 801c8a4:	4618      	mov	r0, r3
 801c8a6:	f000 f907 	bl	801cab8 <SEQ_BitPosition>
 801c8aa:	4603      	mov	r3, r0
 801c8ac:	461a      	mov	r2, r3
 801c8ae:	4b53      	ldr	r3, [pc, #332]	@ (801c9fc <UTIL_SEQ_Run+0x1f0>)
 801c8b0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c8b2:	4a51      	ldr	r2, [pc, #324]	@ (801c9f8 <UTIL_SEQ_Run+0x1ec>)
 801c8b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c8b6:	00db      	lsls	r3, r3, #3
 801c8b8:	4413      	add	r3, r2
 801c8ba:	685a      	ldr	r2, [r3, #4]
 801c8bc:	4b4f      	ldr	r3, [pc, #316]	@ (801c9fc <UTIL_SEQ_Run+0x1f0>)
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	2101      	movs	r1, #1
 801c8c2:	fa01 f303 	lsl.w	r3, r1, r3
 801c8c6:	43db      	mvns	r3, r3
 801c8c8:	401a      	ands	r2, r3
 801c8ca:	494b      	ldr	r1, [pc, #300]	@ (801c9f8 <UTIL_SEQ_Run+0x1ec>)
 801c8cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c8ce:	00db      	lsls	r3, r3, #3
 801c8d0:	440b      	add	r3, r1
 801c8d2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c8d4:	f3ef 8310 	mrs	r3, PRIMASK
 801c8d8:	61bb      	str	r3, [r7, #24]
  return(result);
 801c8da:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c8dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c8de:	b672      	cpsid	i
}
 801c8e0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c8e2:	4b46      	ldr	r3, [pc, #280]	@ (801c9fc <UTIL_SEQ_Run+0x1f0>)
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	2201      	movs	r2, #1
 801c8e8:	fa02 f303 	lsl.w	r3, r2, r3
 801c8ec:	43da      	mvns	r2, r3
 801c8ee:	4b3e      	ldr	r3, [pc, #248]	@ (801c9e8 <UTIL_SEQ_Run+0x1dc>)
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	4013      	ands	r3, r2
 801c8f4:	4a3c      	ldr	r2, [pc, #240]	@ (801c9e8 <UTIL_SEQ_Run+0x1dc>)
 801c8f6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c8f8:	2301      	movs	r3, #1
 801c8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c8fc:	e013      	b.n	801c926 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c8fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c900:	3b01      	subs	r3, #1
 801c902:	4a3d      	ldr	r2, [pc, #244]	@ (801c9f8 <UTIL_SEQ_Run+0x1ec>)
 801c904:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c908:	4b3c      	ldr	r3, [pc, #240]	@ (801c9fc <UTIL_SEQ_Run+0x1f0>)
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	2201      	movs	r2, #1
 801c90e:	fa02 f303 	lsl.w	r3, r2, r3
 801c912:	43da      	mvns	r2, r3
 801c914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c916:	3b01      	subs	r3, #1
 801c918:	400a      	ands	r2, r1
 801c91a:	4937      	ldr	r1, [pc, #220]	@ (801c9f8 <UTIL_SEQ_Run+0x1ec>)
 801c91c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c922:	3b01      	subs	r3, #1
 801c924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d1e8      	bne.n	801c8fe <UTIL_SEQ_Run+0xf2>
 801c92c:	6a3b      	ldr	r3, [r7, #32]
 801c92e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c930:	697b      	ldr	r3, [r7, #20]
 801c932:	f383 8810 	msr	PRIMASK, r3
}
 801c936:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c938:	4b30      	ldr	r3, [pc, #192]	@ (801c9fc <UTIL_SEQ_Run+0x1f0>)
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	4a30      	ldr	r2, [pc, #192]	@ (801ca00 <UTIL_SEQ_Run+0x1f4>)
 801c93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c942:	4798      	blx	r3

    local_taskset = TaskSet;
 801c944:	4b28      	ldr	r3, [pc, #160]	@ (801c9e8 <UTIL_SEQ_Run+0x1dc>)
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801c94a:	4b28      	ldr	r3, [pc, #160]	@ (801c9ec <UTIL_SEQ_Run+0x1e0>)
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801c950:	4b27      	ldr	r3, [pc, #156]	@ (801c9f0 <UTIL_SEQ_Run+0x1e4>)
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801c956:	4b27      	ldr	r3, [pc, #156]	@ (801c9f4 <UTIL_SEQ_Run+0x1e8>)
 801c958:	681b      	ldr	r3, [r3, #0]
 801c95a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c95c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c960:	401a      	ands	r2, r3
 801c962:	4b20      	ldr	r3, [pc, #128]	@ (801c9e4 <UTIL_SEQ_Run+0x1d8>)
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	4013      	ands	r3, r2
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d005      	beq.n	801c978 <UTIL_SEQ_Run+0x16c>
 801c96c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c970:	4013      	ands	r3, r2
 801c972:	2b00      	cmp	r3, #0
 801c974:	f43f af64 	beq.w	801c840 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c978:	4b20      	ldr	r3, [pc, #128]	@ (801c9fc <UTIL_SEQ_Run+0x1f0>)
 801c97a:	f04f 32ff 	mov.w	r2, #4294967295
 801c97e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c980:	f000 f88e 	bl	801caa0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c984:	f3ef 8310 	mrs	r3, PRIMASK
 801c988:	613b      	str	r3, [r7, #16]
  return(result);
 801c98a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c98c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c98e:	b672      	cpsid	i
}
 801c990:	bf00      	nop
  local_taskset = TaskSet;
 801c992:	4b15      	ldr	r3, [pc, #84]	@ (801c9e8 <UTIL_SEQ_Run+0x1dc>)
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801c998:	4b14      	ldr	r3, [pc, #80]	@ (801c9ec <UTIL_SEQ_Run+0x1e0>)
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801c99e:	4b14      	ldr	r3, [pc, #80]	@ (801c9f0 <UTIL_SEQ_Run+0x1e4>)
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c9a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9a8:	401a      	ands	r2, r3
 801c9aa:	4b0e      	ldr	r3, [pc, #56]	@ (801c9e4 <UTIL_SEQ_Run+0x1d8>)
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	4013      	ands	r3, r2
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d107      	bne.n	801c9c4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c9b4:	4b0f      	ldr	r3, [pc, #60]	@ (801c9f4 <UTIL_SEQ_Run+0x1e8>)
 801c9b6:	681a      	ldr	r2, [r3, #0]
 801c9b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c9ba:	4013      	ands	r3, r2
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d101      	bne.n	801c9c4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c9c0:	f7e5 fec2 	bl	8002748 <UTIL_SEQ_Idle>
 801c9c4:	69fb      	ldr	r3, [r7, #28]
 801c9c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9c8:	68fb      	ldr	r3, [r7, #12]
 801c9ca:	f383 8810 	msr	PRIMASK, r3
}
 801c9ce:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c9d0:	f000 f86c 	bl	801caac <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c9d4:	4a03      	ldr	r2, [pc, #12]	@ (801c9e4 <UTIL_SEQ_Run+0x1d8>)
 801c9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9d8:	6013      	str	r3, [r2, #0]

  return;
 801c9da:	bf00      	nop
}
 801c9dc:	3740      	adds	r7, #64	@ 0x40
 801c9de:	46bd      	mov	sp, r7
 801c9e0:	bd80      	pop	{r7, pc}
 801c9e2:	bf00      	nop
 801c9e4:	2000013c 	.word	0x2000013c
 801c9e8:	20001ed4 	.word	0x20001ed4
 801c9ec:	20001ed8 	.word	0x20001ed8
 801c9f0:	20000138 	.word	0x20000138
 801c9f4:	20001edc 	.word	0x20001edc
 801c9f8:	20001ef4 	.word	0x20001ef4
 801c9fc:	20001ee0 	.word	0x20001ee0
 801ca00:	20001ee4 	.word	0x20001ee4

0801ca04 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801ca04:	b580      	push	{r7, lr}
 801ca06:	b088      	sub	sp, #32
 801ca08:	af00      	add	r7, sp, #0
 801ca0a:	60f8      	str	r0, [r7, #12]
 801ca0c:	60b9      	str	r1, [r7, #8]
 801ca0e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca10:	f3ef 8310 	mrs	r3, PRIMASK
 801ca14:	617b      	str	r3, [r7, #20]
  return(result);
 801ca16:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801ca18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca1a:	b672      	cpsid	i
}
 801ca1c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801ca1e:	68f8      	ldr	r0, [r7, #12]
 801ca20:	f000 f84a 	bl	801cab8 <SEQ_BitPosition>
 801ca24:	4603      	mov	r3, r0
 801ca26:	4619      	mov	r1, r3
 801ca28:	4a06      	ldr	r2, [pc, #24]	@ (801ca44 <UTIL_SEQ_RegTask+0x40>)
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ca30:	69fb      	ldr	r3, [r7, #28]
 801ca32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca34:	69bb      	ldr	r3, [r7, #24]
 801ca36:	f383 8810 	msr	PRIMASK, r3
}
 801ca3a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801ca3c:	bf00      	nop
}
 801ca3e:	3720      	adds	r7, #32
 801ca40:	46bd      	mov	sp, r7
 801ca42:	bd80      	pop	{r7, pc}
 801ca44:	20001ee4 	.word	0x20001ee4

0801ca48 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801ca48:	b480      	push	{r7}
 801ca4a:	b087      	sub	sp, #28
 801ca4c:	af00      	add	r7, sp, #0
 801ca4e:	6078      	str	r0, [r7, #4]
 801ca50:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca52:	f3ef 8310 	mrs	r3, PRIMASK
 801ca56:	60fb      	str	r3, [r7, #12]
  return(result);
 801ca58:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ca5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca5c:	b672      	cpsid	i
}
 801ca5e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801ca60:	4b0d      	ldr	r3, [pc, #52]	@ (801ca98 <UTIL_SEQ_SetTask+0x50>)
 801ca62:	681a      	ldr	r2, [r3, #0]
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	4313      	orrs	r3, r2
 801ca68:	4a0b      	ldr	r2, [pc, #44]	@ (801ca98 <UTIL_SEQ_SetTask+0x50>)
 801ca6a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801ca6c:	4a0b      	ldr	r2, [pc, #44]	@ (801ca9c <UTIL_SEQ_SetTask+0x54>)
 801ca6e:	683b      	ldr	r3, [r7, #0]
 801ca70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	431a      	orrs	r2, r3
 801ca78:	4908      	ldr	r1, [pc, #32]	@ (801ca9c <UTIL_SEQ_SetTask+0x54>)
 801ca7a:	683b      	ldr	r3, [r7, #0]
 801ca7c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801ca80:	697b      	ldr	r3, [r7, #20]
 801ca82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca84:	693b      	ldr	r3, [r7, #16]
 801ca86:	f383 8810 	msr	PRIMASK, r3
}
 801ca8a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801ca8c:	bf00      	nop
}
 801ca8e:	371c      	adds	r7, #28
 801ca90:	46bd      	mov	sp, r7
 801ca92:	bc80      	pop	{r7}
 801ca94:	4770      	bx	lr
 801ca96:	bf00      	nop
 801ca98:	20001ed4 	.word	0x20001ed4
 801ca9c:	20001ef4 	.word	0x20001ef4

0801caa0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801caa0:	b480      	push	{r7}
 801caa2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801caa4:	bf00      	nop
}
 801caa6:	46bd      	mov	sp, r7
 801caa8:	bc80      	pop	{r7}
 801caaa:	4770      	bx	lr

0801caac <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801caac:	b480      	push	{r7}
 801caae:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801cab0:	bf00      	nop
}
 801cab2:	46bd      	mov	sp, r7
 801cab4:	bc80      	pop	{r7}
 801cab6:	4770      	bx	lr

0801cab8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801cab8:	b480      	push	{r7}
 801caba:	b085      	sub	sp, #20
 801cabc:	af00      	add	r7, sp, #0
 801cabe:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801cac0:	2300      	movs	r3, #0
 801cac2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801cac8:	68bb      	ldr	r3, [r7, #8]
 801caca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cace:	d204      	bcs.n	801cada <SEQ_BitPosition+0x22>
 801cad0:	2310      	movs	r3, #16
 801cad2:	73fb      	strb	r3, [r7, #15]
 801cad4:	68bb      	ldr	r3, [r7, #8]
 801cad6:	041b      	lsls	r3, r3, #16
 801cad8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801cada:	68bb      	ldr	r3, [r7, #8]
 801cadc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801cae0:	d205      	bcs.n	801caee <SEQ_BitPosition+0x36>
 801cae2:	7bfb      	ldrb	r3, [r7, #15]
 801cae4:	3308      	adds	r3, #8
 801cae6:	73fb      	strb	r3, [r7, #15]
 801cae8:	68bb      	ldr	r3, [r7, #8]
 801caea:	021b      	lsls	r3, r3, #8
 801caec:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801caee:	68bb      	ldr	r3, [r7, #8]
 801caf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801caf4:	d205      	bcs.n	801cb02 <SEQ_BitPosition+0x4a>
 801caf6:	7bfb      	ldrb	r3, [r7, #15]
 801caf8:	3304      	adds	r3, #4
 801cafa:	73fb      	strb	r3, [r7, #15]
 801cafc:	68bb      	ldr	r3, [r7, #8]
 801cafe:	011b      	lsls	r3, r3, #4
 801cb00:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801cb02:	68bb      	ldr	r3, [r7, #8]
 801cb04:	0f1b      	lsrs	r3, r3, #28
 801cb06:	4a07      	ldr	r2, [pc, #28]	@ (801cb24 <SEQ_BitPosition+0x6c>)
 801cb08:	5cd2      	ldrb	r2, [r2, r3]
 801cb0a:	7bfb      	ldrb	r3, [r7, #15]
 801cb0c:	4413      	add	r3, r2
 801cb0e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801cb10:	7bfb      	ldrb	r3, [r7, #15]
 801cb12:	f1c3 031f 	rsb	r3, r3, #31
 801cb16:	b2db      	uxtb	r3, r3
}
 801cb18:	4618      	mov	r0, r3
 801cb1a:	3714      	adds	r7, #20
 801cb1c:	46bd      	mov	sp, r7
 801cb1e:	bc80      	pop	{r7}
 801cb20:	4770      	bx	lr
 801cb22:	bf00      	nop
 801cb24:	08021760 	.word	0x08021760

0801cb28 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801cb28:	b580      	push	{r7, lr}
 801cb2a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801cb2c:	4b04      	ldr	r3, [pc, #16]	@ (801cb40 <UTIL_TIMER_Init+0x18>)
 801cb2e:	2200      	movs	r2, #0
 801cb30:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801cb32:	4b04      	ldr	r3, [pc, #16]	@ (801cb44 <UTIL_TIMER_Init+0x1c>)
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	4798      	blx	r3
 801cb38:	4603      	mov	r3, r0
}
 801cb3a:	4618      	mov	r0, r3
 801cb3c:	bd80      	pop	{r7, pc}
 801cb3e:	bf00      	nop
 801cb40:	20001efc 	.word	0x20001efc
 801cb44:	080211dc 	.word	0x080211dc

0801cb48 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801cb48:	b580      	push	{r7, lr}
 801cb4a:	b084      	sub	sp, #16
 801cb4c:	af00      	add	r7, sp, #0
 801cb4e:	60f8      	str	r0, [r7, #12]
 801cb50:	60b9      	str	r1, [r7, #8]
 801cb52:	603b      	str	r3, [r7, #0]
 801cb54:	4613      	mov	r3, r2
 801cb56:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801cb58:	68fb      	ldr	r3, [r7, #12]
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d023      	beq.n	801cba6 <UTIL_TIMER_Create+0x5e>
 801cb5e:	683b      	ldr	r3, [r7, #0]
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d020      	beq.n	801cba6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	2200      	movs	r2, #0
 801cb68:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801cb6a:	4b11      	ldr	r3, [pc, #68]	@ (801cbb0 <UTIL_TIMER_Create+0x68>)
 801cb6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb6e:	68b8      	ldr	r0, [r7, #8]
 801cb70:	4798      	blx	r3
 801cb72:	4602      	mov	r2, r0
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801cb78:	68fb      	ldr	r3, [r7, #12]
 801cb7a:	2200      	movs	r2, #0
 801cb7c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	2200      	movs	r2, #0
 801cb82:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cb84:	68fb      	ldr	r3, [r7, #12]
 801cb86:	2200      	movs	r2, #0
 801cb88:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	683a      	ldr	r2, [r7, #0]
 801cb8e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801cb90:	68fb      	ldr	r3, [r7, #12]
 801cb92:	69ba      	ldr	r2, [r7, #24]
 801cb94:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801cb96:	68fb      	ldr	r3, [r7, #12]
 801cb98:	79fa      	ldrb	r2, [r7, #7]
 801cb9a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801cb9c:	68fb      	ldr	r3, [r7, #12]
 801cb9e:	2200      	movs	r2, #0
 801cba0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801cba2:	2300      	movs	r3, #0
 801cba4:	e000      	b.n	801cba8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801cba6:	2301      	movs	r3, #1
  }
}
 801cba8:	4618      	mov	r0, r3
 801cbaa:	3710      	adds	r7, #16
 801cbac:	46bd      	mov	sp, r7
 801cbae:	bd80      	pop	{r7, pc}
 801cbb0:	080211dc 	.word	0x080211dc

0801cbb4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801cbb4:	b580      	push	{r7, lr}
 801cbb6:	b08a      	sub	sp, #40	@ 0x28
 801cbb8:	af00      	add	r7, sp, #0
 801cbba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d056      	beq.n	801cc76 <UTIL_TIMER_Start+0xc2>
 801cbc8:	6878      	ldr	r0, [r7, #4]
 801cbca:	f000 f9a9 	bl	801cf20 <TimerExists>
 801cbce:	4603      	mov	r3, r0
 801cbd0:	f083 0301 	eor.w	r3, r3, #1
 801cbd4:	b2db      	uxtb	r3, r3
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d04d      	beq.n	801cc76 <UTIL_TIMER_Start+0xc2>
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	7a5b      	ldrb	r3, [r3, #9]
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d149      	bne.n	801cc76 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cbe2:	f3ef 8310 	mrs	r3, PRIMASK
 801cbe6:	613b      	str	r3, [r7, #16]
  return(result);
 801cbe8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cbea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cbec:	b672      	cpsid	i
}
 801cbee:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	685b      	ldr	r3, [r3, #4]
 801cbf4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801cbf6:	4b24      	ldr	r3, [pc, #144]	@ (801cc88 <UTIL_TIMER_Start+0xd4>)
 801cbf8:	6a1b      	ldr	r3, [r3, #32]
 801cbfa:	4798      	blx	r3
 801cbfc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801cbfe:	6a3a      	ldr	r2, [r7, #32]
 801cc00:	69bb      	ldr	r3, [r7, #24]
 801cc02:	429a      	cmp	r2, r3
 801cc04:	d201      	bcs.n	801cc0a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801cc06:	69bb      	ldr	r3, [r7, #24]
 801cc08:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	6a3a      	ldr	r2, [r7, #32]
 801cc0e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	2200      	movs	r2, #0
 801cc14:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	2201      	movs	r2, #1
 801cc1a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	2200      	movs	r2, #0
 801cc20:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801cc22:	4b1a      	ldr	r3, [pc, #104]	@ (801cc8c <UTIL_TIMER_Start+0xd8>)
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d106      	bne.n	801cc38 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801cc2a:	4b17      	ldr	r3, [pc, #92]	@ (801cc88 <UTIL_TIMER_Start+0xd4>)
 801cc2c:	691b      	ldr	r3, [r3, #16]
 801cc2e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801cc30:	6878      	ldr	r0, [r7, #4]
 801cc32:	f000 f9eb 	bl	801d00c <TimerInsertNewHeadTimer>
 801cc36:	e017      	b.n	801cc68 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801cc38:	4b13      	ldr	r3, [pc, #76]	@ (801cc88 <UTIL_TIMER_Start+0xd4>)
 801cc3a:	699b      	ldr	r3, [r3, #24]
 801cc3c:	4798      	blx	r3
 801cc3e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	681a      	ldr	r2, [r3, #0]
 801cc44:	697b      	ldr	r3, [r7, #20]
 801cc46:	441a      	add	r2, r3
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	681a      	ldr	r2, [r3, #0]
 801cc50:	4b0e      	ldr	r3, [pc, #56]	@ (801cc8c <UTIL_TIMER_Start+0xd8>)
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	429a      	cmp	r2, r3
 801cc58:	d203      	bcs.n	801cc62 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801cc5a:	6878      	ldr	r0, [r7, #4]
 801cc5c:	f000 f9d6 	bl	801d00c <TimerInsertNewHeadTimer>
 801cc60:	e002      	b.n	801cc68 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801cc62:	6878      	ldr	r0, [r7, #4]
 801cc64:	f000 f9a2 	bl	801cfac <TimerInsertTimer>
 801cc68:	69fb      	ldr	r3, [r7, #28]
 801cc6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	f383 8810 	msr	PRIMASK, r3
}
 801cc72:	bf00      	nop
  {
 801cc74:	e002      	b.n	801cc7c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801cc76:	2301      	movs	r3, #1
 801cc78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801cc7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801cc80:	4618      	mov	r0, r3
 801cc82:	3728      	adds	r7, #40	@ 0x28
 801cc84:	46bd      	mov	sp, r7
 801cc86:	bd80      	pop	{r7, pc}
 801cc88:	080211dc 	.word	0x080211dc
 801cc8c:	20001efc 	.word	0x20001efc

0801cc90 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801cc90:	b580      	push	{r7, lr}
 801cc92:	b088      	sub	sp, #32
 801cc94:	af00      	add	r7, sp, #0
 801cc96:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cc98:	2300      	movs	r3, #0
 801cc9a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d05b      	beq.n	801cd5a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cca2:	f3ef 8310 	mrs	r3, PRIMASK
 801cca6:	60fb      	str	r3, [r7, #12]
  return(result);
 801cca8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ccaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ccac:	b672      	cpsid	i
}
 801ccae:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801ccb0:	4b2d      	ldr	r3, [pc, #180]	@ (801cd68 <UTIL_TIMER_Stop+0xd8>)
 801ccb2:	681b      	ldr	r3, [r3, #0]
 801ccb4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801ccb6:	4b2c      	ldr	r3, [pc, #176]	@ (801cd68 <UTIL_TIMER_Stop+0xd8>)
 801ccb8:	681b      	ldr	r3, [r3, #0]
 801ccba:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	2201      	movs	r2, #1
 801ccc0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801ccc2:	4b29      	ldr	r3, [pc, #164]	@ (801cd68 <UTIL_TIMER_Stop+0xd8>)
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d041      	beq.n	801cd4e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	2200      	movs	r2, #0
 801ccce:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801ccd0:	4b25      	ldr	r3, [pc, #148]	@ (801cd68 <UTIL_TIMER_Stop+0xd8>)
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	687a      	ldr	r2, [r7, #4]
 801ccd6:	429a      	cmp	r2, r3
 801ccd8:	d134      	bne.n	801cd44 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801ccda:	4b23      	ldr	r3, [pc, #140]	@ (801cd68 <UTIL_TIMER_Stop+0xd8>)
 801ccdc:	681b      	ldr	r3, [r3, #0]
 801ccde:	2200      	movs	r2, #0
 801cce0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801cce2:	4b21      	ldr	r3, [pc, #132]	@ (801cd68 <UTIL_TIMER_Stop+0xd8>)
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	695b      	ldr	r3, [r3, #20]
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	d00a      	beq.n	801cd02 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801ccec:	4b1e      	ldr	r3, [pc, #120]	@ (801cd68 <UTIL_TIMER_Stop+0xd8>)
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	695b      	ldr	r3, [r3, #20]
 801ccf2:	4a1d      	ldr	r2, [pc, #116]	@ (801cd68 <UTIL_TIMER_Stop+0xd8>)
 801ccf4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801ccf6:	4b1c      	ldr	r3, [pc, #112]	@ (801cd68 <UTIL_TIMER_Stop+0xd8>)
 801ccf8:	681b      	ldr	r3, [r3, #0]
 801ccfa:	4618      	mov	r0, r3
 801ccfc:	f000 f92c 	bl	801cf58 <TimerSetTimeout>
 801cd00:	e023      	b.n	801cd4a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801cd02:	4b1a      	ldr	r3, [pc, #104]	@ (801cd6c <UTIL_TIMER_Stop+0xdc>)
 801cd04:	68db      	ldr	r3, [r3, #12]
 801cd06:	4798      	blx	r3
            TimerListHead = NULL;
 801cd08:	4b17      	ldr	r3, [pc, #92]	@ (801cd68 <UTIL_TIMER_Stop+0xd8>)
 801cd0a:	2200      	movs	r2, #0
 801cd0c:	601a      	str	r2, [r3, #0]
 801cd0e:	e01c      	b.n	801cd4a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801cd10:	697a      	ldr	r2, [r7, #20]
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	429a      	cmp	r2, r3
 801cd16:	d110      	bne.n	801cd3a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801cd18:	697b      	ldr	r3, [r7, #20]
 801cd1a:	695b      	ldr	r3, [r3, #20]
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d006      	beq.n	801cd2e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801cd20:	697b      	ldr	r3, [r7, #20]
 801cd22:	695b      	ldr	r3, [r3, #20]
 801cd24:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cd26:	69bb      	ldr	r3, [r7, #24]
 801cd28:	697a      	ldr	r2, [r7, #20]
 801cd2a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801cd2c:	e00d      	b.n	801cd4a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801cd2e:	2300      	movs	r3, #0
 801cd30:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cd32:	69bb      	ldr	r3, [r7, #24]
 801cd34:	697a      	ldr	r2, [r7, #20]
 801cd36:	615a      	str	r2, [r3, #20]
            break;
 801cd38:	e007      	b.n	801cd4a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801cd3a:	697b      	ldr	r3, [r7, #20]
 801cd3c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801cd3e:	697b      	ldr	r3, [r7, #20]
 801cd40:	695b      	ldr	r3, [r3, #20]
 801cd42:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801cd44:	697b      	ldr	r3, [r7, #20]
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d1e2      	bne.n	801cd10 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801cd4a:	2300      	movs	r3, #0
 801cd4c:	77fb      	strb	r3, [r7, #31]
 801cd4e:	693b      	ldr	r3, [r7, #16]
 801cd50:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd52:	68bb      	ldr	r3, [r7, #8]
 801cd54:	f383 8810 	msr	PRIMASK, r3
}
 801cd58:	e001      	b.n	801cd5e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801cd5a:	2301      	movs	r3, #1
 801cd5c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801cd5e:	7ffb      	ldrb	r3, [r7, #31]
}
 801cd60:	4618      	mov	r0, r3
 801cd62:	3720      	adds	r7, #32
 801cd64:	46bd      	mov	sp, r7
 801cd66:	bd80      	pop	{r7, pc}
 801cd68:	20001efc 	.word	0x20001efc
 801cd6c:	080211dc 	.word	0x080211dc

0801cd70 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801cd70:	b580      	push	{r7, lr}
 801cd72:	b084      	sub	sp, #16
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	6078      	str	r0, [r7, #4]
 801cd78:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cd7a:	2300      	movs	r3, #0
 801cd7c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d102      	bne.n	801cd8a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801cd84:	2301      	movs	r3, #1
 801cd86:	73fb      	strb	r3, [r7, #15]
 801cd88:	e014      	b.n	801cdb4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801cd8a:	4b0d      	ldr	r3, [pc, #52]	@ (801cdc0 <UTIL_TIMER_SetPeriod+0x50>)
 801cd8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cd8e:	6838      	ldr	r0, [r7, #0]
 801cd90:	4798      	blx	r3
 801cd92:	4602      	mov	r2, r0
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801cd98:	6878      	ldr	r0, [r7, #4]
 801cd9a:	f000 f8c1 	bl	801cf20 <TimerExists>
 801cd9e:	4603      	mov	r3, r0
 801cda0:	2b00      	cmp	r3, #0
 801cda2:	d007      	beq.n	801cdb4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801cda4:	6878      	ldr	r0, [r7, #4]
 801cda6:	f7ff ff73 	bl	801cc90 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801cdaa:	6878      	ldr	r0, [r7, #4]
 801cdac:	f7ff ff02 	bl	801cbb4 <UTIL_TIMER_Start>
 801cdb0:	4603      	mov	r3, r0
 801cdb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801cdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	3710      	adds	r7, #16
 801cdba:	46bd      	mov	sp, r7
 801cdbc:	bd80      	pop	{r7, pc}
 801cdbe:	bf00      	nop
 801cdc0:	080211dc 	.word	0x080211dc

0801cdc4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801cdc4:	b590      	push	{r4, r7, lr}
 801cdc6:	b089      	sub	sp, #36	@ 0x24
 801cdc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdca:	f3ef 8310 	mrs	r3, PRIMASK
 801cdce:	60bb      	str	r3, [r7, #8]
  return(result);
 801cdd0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cdd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdd4:	b672      	cpsid	i
}
 801cdd6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801cdd8:	4b38      	ldr	r3, [pc, #224]	@ (801cebc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cdda:	695b      	ldr	r3, [r3, #20]
 801cddc:	4798      	blx	r3
 801cdde:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801cde0:	4b36      	ldr	r3, [pc, #216]	@ (801cebc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cde2:	691b      	ldr	r3, [r3, #16]
 801cde4:	4798      	blx	r3
 801cde6:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801cde8:	693a      	ldr	r2, [r7, #16]
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	1ad3      	subs	r3, r2, r3
 801cdee:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801cdf0:	4b33      	ldr	r3, [pc, #204]	@ (801cec0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d037      	beq.n	801ce68 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801cdf8:	4b31      	ldr	r3, [pc, #196]	@ (801cec0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cdfa:	681b      	ldr	r3, [r3, #0]
 801cdfc:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801cdfe:	69fb      	ldr	r3, [r7, #28]
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	68fa      	ldr	r2, [r7, #12]
 801ce04:	429a      	cmp	r2, r3
 801ce06:	d206      	bcs.n	801ce16 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801ce08:	69fb      	ldr	r3, [r7, #28]
 801ce0a:	681a      	ldr	r2, [r3, #0]
 801ce0c:	68fb      	ldr	r3, [r7, #12]
 801ce0e:	1ad2      	subs	r2, r2, r3
 801ce10:	69fb      	ldr	r3, [r7, #28]
 801ce12:	601a      	str	r2, [r3, #0]
 801ce14:	e002      	b.n	801ce1c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801ce16:	69fb      	ldr	r3, [r7, #28]
 801ce18:	2200      	movs	r2, #0
 801ce1a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801ce1c:	69fb      	ldr	r3, [r7, #28]
 801ce1e:	695b      	ldr	r3, [r3, #20]
 801ce20:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801ce22:	69fb      	ldr	r3, [r7, #28]
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	d1ea      	bne.n	801cdfe <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ce28:	e01e      	b.n	801ce68 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801ce2a:	4b25      	ldr	r3, [pc, #148]	@ (801cec0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801ce30:	4b23      	ldr	r3, [pc, #140]	@ (801cec0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	695b      	ldr	r3, [r3, #20]
 801ce36:	4a22      	ldr	r2, [pc, #136]	@ (801cec0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ce38:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801ce3a:	69fb      	ldr	r3, [r7, #28]
 801ce3c:	2200      	movs	r2, #0
 801ce3e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801ce40:	69fb      	ldr	r3, [r7, #28]
 801ce42:	2200      	movs	r2, #0
 801ce44:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801ce46:	69fb      	ldr	r3, [r7, #28]
 801ce48:	68db      	ldr	r3, [r3, #12]
 801ce4a:	69fa      	ldr	r2, [r7, #28]
 801ce4c:	6912      	ldr	r2, [r2, #16]
 801ce4e:	4610      	mov	r0, r2
 801ce50:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801ce52:	69fb      	ldr	r3, [r7, #28]
 801ce54:	7adb      	ldrb	r3, [r3, #11]
 801ce56:	2b01      	cmp	r3, #1
 801ce58:	d106      	bne.n	801ce68 <UTIL_TIMER_IRQ_Handler+0xa4>
 801ce5a:	69fb      	ldr	r3, [r7, #28]
 801ce5c:	7a9b      	ldrb	r3, [r3, #10]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d102      	bne.n	801ce68 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801ce62:	69f8      	ldr	r0, [r7, #28]
 801ce64:	f7ff fea6 	bl	801cbb4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ce68:	4b15      	ldr	r3, [pc, #84]	@ (801cec0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	d00d      	beq.n	801ce8c <UTIL_TIMER_IRQ_Handler+0xc8>
 801ce70:	4b13      	ldr	r3, [pc, #76]	@ (801cec0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d0d7      	beq.n	801ce2a <UTIL_TIMER_IRQ_Handler+0x66>
 801ce7a:	4b11      	ldr	r3, [pc, #68]	@ (801cec0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	681c      	ldr	r4, [r3, #0]
 801ce80:	4b0e      	ldr	r3, [pc, #56]	@ (801cebc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ce82:	699b      	ldr	r3, [r3, #24]
 801ce84:	4798      	blx	r3
 801ce86:	4603      	mov	r3, r0
 801ce88:	429c      	cmp	r4, r3
 801ce8a:	d3ce      	bcc.n	801ce2a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ce8c:	4b0c      	ldr	r3, [pc, #48]	@ (801cec0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ce8e:	681b      	ldr	r3, [r3, #0]
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d009      	beq.n	801cea8 <UTIL_TIMER_IRQ_Handler+0xe4>
 801ce94:	4b0a      	ldr	r3, [pc, #40]	@ (801cec0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	7a1b      	ldrb	r3, [r3, #8]
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d104      	bne.n	801cea8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801ce9e:	4b08      	ldr	r3, [pc, #32]	@ (801cec0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	4618      	mov	r0, r3
 801cea4:	f000 f858 	bl	801cf58 <TimerSetTimeout>
 801cea8:	69bb      	ldr	r3, [r7, #24]
 801ceaa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	f383 8810 	msr	PRIMASK, r3
}
 801ceb2:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801ceb4:	bf00      	nop
 801ceb6:	3724      	adds	r7, #36	@ 0x24
 801ceb8:	46bd      	mov	sp, r7
 801ceba:	bd90      	pop	{r4, r7, pc}
 801cebc:	080211dc 	.word	0x080211dc
 801cec0:	20001efc 	.word	0x20001efc

0801cec4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801cec4:	b580      	push	{r7, lr}
 801cec6:	b082      	sub	sp, #8
 801cec8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801ceca:	4b06      	ldr	r3, [pc, #24]	@ (801cee4 <UTIL_TIMER_GetCurrentTime+0x20>)
 801cecc:	69db      	ldr	r3, [r3, #28]
 801cece:	4798      	blx	r3
 801ced0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ced2:	4b04      	ldr	r3, [pc, #16]	@ (801cee4 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ced4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ced6:	6878      	ldr	r0, [r7, #4]
 801ced8:	4798      	blx	r3
 801ceda:	4603      	mov	r3, r0
}
 801cedc:	4618      	mov	r0, r3
 801cede:	3708      	adds	r7, #8
 801cee0:	46bd      	mov	sp, r7
 801cee2:	bd80      	pop	{r7, pc}
 801cee4:	080211dc 	.word	0x080211dc

0801cee8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801cee8:	b580      	push	{r7, lr}
 801ceea:	b084      	sub	sp, #16
 801ceec:	af00      	add	r7, sp, #0
 801ceee:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801cef0:	4b0a      	ldr	r3, [pc, #40]	@ (801cf1c <UTIL_TIMER_GetElapsedTime+0x34>)
 801cef2:	69db      	ldr	r3, [r3, #28]
 801cef4:	4798      	blx	r3
 801cef6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801cef8:	4b08      	ldr	r3, [pc, #32]	@ (801cf1c <UTIL_TIMER_GetElapsedTime+0x34>)
 801cefa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cefc:	6878      	ldr	r0, [r7, #4]
 801cefe:	4798      	blx	r3
 801cf00:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801cf02:	4b06      	ldr	r3, [pc, #24]	@ (801cf1c <UTIL_TIMER_GetElapsedTime+0x34>)
 801cf04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf06:	68f9      	ldr	r1, [r7, #12]
 801cf08:	68ba      	ldr	r2, [r7, #8]
 801cf0a:	1a8a      	subs	r2, r1, r2
 801cf0c:	4610      	mov	r0, r2
 801cf0e:	4798      	blx	r3
 801cf10:	4603      	mov	r3, r0
}
 801cf12:	4618      	mov	r0, r3
 801cf14:	3710      	adds	r7, #16
 801cf16:	46bd      	mov	sp, r7
 801cf18:	bd80      	pop	{r7, pc}
 801cf1a:	bf00      	nop
 801cf1c:	080211dc 	.word	0x080211dc

0801cf20 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801cf20:	b480      	push	{r7}
 801cf22:	b085      	sub	sp, #20
 801cf24:	af00      	add	r7, sp, #0
 801cf26:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cf28:	4b0a      	ldr	r3, [pc, #40]	@ (801cf54 <TimerExists+0x34>)
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801cf2e:	e008      	b.n	801cf42 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cf30:	68fa      	ldr	r2, [r7, #12]
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	429a      	cmp	r2, r3
 801cf36:	d101      	bne.n	801cf3c <TimerExists+0x1c>
    {
      return true;
 801cf38:	2301      	movs	r3, #1
 801cf3a:	e006      	b.n	801cf4a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	695b      	ldr	r3, [r3, #20]
 801cf40:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d1f3      	bne.n	801cf30 <TimerExists+0x10>
  }
  return false;
 801cf48:	2300      	movs	r3, #0
}
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	3714      	adds	r7, #20
 801cf4e:	46bd      	mov	sp, r7
 801cf50:	bc80      	pop	{r7}
 801cf52:	4770      	bx	lr
 801cf54:	20001efc 	.word	0x20001efc

0801cf58 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801cf58:	b590      	push	{r4, r7, lr}
 801cf5a:	b085      	sub	sp, #20
 801cf5c:	af00      	add	r7, sp, #0
 801cf5e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801cf60:	4b11      	ldr	r3, [pc, #68]	@ (801cfa8 <TimerSetTimeout+0x50>)
 801cf62:	6a1b      	ldr	r3, [r3, #32]
 801cf64:	4798      	blx	r3
 801cf66:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	2201      	movs	r2, #1
 801cf6c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	681c      	ldr	r4, [r3, #0]
 801cf72:	4b0d      	ldr	r3, [pc, #52]	@ (801cfa8 <TimerSetTimeout+0x50>)
 801cf74:	699b      	ldr	r3, [r3, #24]
 801cf76:	4798      	blx	r3
 801cf78:	4602      	mov	r2, r0
 801cf7a:	68fb      	ldr	r3, [r7, #12]
 801cf7c:	4413      	add	r3, r2
 801cf7e:	429c      	cmp	r4, r3
 801cf80:	d207      	bcs.n	801cf92 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801cf82:	4b09      	ldr	r3, [pc, #36]	@ (801cfa8 <TimerSetTimeout+0x50>)
 801cf84:	699b      	ldr	r3, [r3, #24]
 801cf86:	4798      	blx	r3
 801cf88:	4602      	mov	r2, r0
 801cf8a:	68fb      	ldr	r3, [r7, #12]
 801cf8c:	441a      	add	r2, r3
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801cf92:	4b05      	ldr	r3, [pc, #20]	@ (801cfa8 <TimerSetTimeout+0x50>)
 801cf94:	689b      	ldr	r3, [r3, #8]
 801cf96:	687a      	ldr	r2, [r7, #4]
 801cf98:	6812      	ldr	r2, [r2, #0]
 801cf9a:	4610      	mov	r0, r2
 801cf9c:	4798      	blx	r3
}
 801cf9e:	bf00      	nop
 801cfa0:	3714      	adds	r7, #20
 801cfa2:	46bd      	mov	sp, r7
 801cfa4:	bd90      	pop	{r4, r7, pc}
 801cfa6:	bf00      	nop
 801cfa8:	080211dc 	.word	0x080211dc

0801cfac <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801cfac:	b480      	push	{r7}
 801cfae:	b085      	sub	sp, #20
 801cfb0:	af00      	add	r7, sp, #0
 801cfb2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cfb4:	4b14      	ldr	r3, [pc, #80]	@ (801d008 <TimerInsertTimer+0x5c>)
 801cfb6:	681b      	ldr	r3, [r3, #0]
 801cfb8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801cfba:	4b13      	ldr	r3, [pc, #76]	@ (801d008 <TimerInsertTimer+0x5c>)
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	695b      	ldr	r3, [r3, #20]
 801cfc0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801cfc2:	e012      	b.n	801cfea <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	681a      	ldr	r2, [r3, #0]
 801cfc8:	68bb      	ldr	r3, [r7, #8]
 801cfca:	681b      	ldr	r3, [r3, #0]
 801cfcc:	429a      	cmp	r2, r3
 801cfce:	d905      	bls.n	801cfdc <TimerInsertTimer+0x30>
    {
        cur = next;
 801cfd0:	68bb      	ldr	r3, [r7, #8]
 801cfd2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801cfd4:	68bb      	ldr	r3, [r7, #8]
 801cfd6:	695b      	ldr	r3, [r3, #20]
 801cfd8:	60bb      	str	r3, [r7, #8]
 801cfda:	e006      	b.n	801cfea <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801cfdc:	68fb      	ldr	r3, [r7, #12]
 801cfde:	687a      	ldr	r2, [r7, #4]
 801cfe0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	68ba      	ldr	r2, [r7, #8]
 801cfe6:	615a      	str	r2, [r3, #20]
        return;
 801cfe8:	e009      	b.n	801cffe <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	695b      	ldr	r3, [r3, #20]
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d1e8      	bne.n	801cfc4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	687a      	ldr	r2, [r7, #4]
 801cff6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	2200      	movs	r2, #0
 801cffc:	615a      	str	r2, [r3, #20]
}
 801cffe:	3714      	adds	r7, #20
 801d000:	46bd      	mov	sp, r7
 801d002:	bc80      	pop	{r7}
 801d004:	4770      	bx	lr
 801d006:	bf00      	nop
 801d008:	20001efc 	.word	0x20001efc

0801d00c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b084      	sub	sp, #16
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d014:	4b0b      	ldr	r3, [pc, #44]	@ (801d044 <TimerInsertNewHeadTimer+0x38>)
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d002      	beq.n	801d026 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	2200      	movs	r2, #0
 801d024:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d026:	687b      	ldr	r3, [r7, #4]
 801d028:	68fa      	ldr	r2, [r7, #12]
 801d02a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d02c:	4a05      	ldr	r2, [pc, #20]	@ (801d044 <TimerInsertNewHeadTimer+0x38>)
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d032:	4b04      	ldr	r3, [pc, #16]	@ (801d044 <TimerInsertNewHeadTimer+0x38>)
 801d034:	681b      	ldr	r3, [r3, #0]
 801d036:	4618      	mov	r0, r3
 801d038:	f7ff ff8e 	bl	801cf58 <TimerSetTimeout>
}
 801d03c:	bf00      	nop
 801d03e:	3710      	adds	r7, #16
 801d040:	46bd      	mov	sp, r7
 801d042:	bd80      	pop	{r7, pc}
 801d044:	20001efc 	.word	0x20001efc

0801d048 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801d048:	b580      	push	{r7, lr}
 801d04a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801d04c:	2218      	movs	r2, #24
 801d04e:	2100      	movs	r1, #0
 801d050:	4807      	ldr	r0, [pc, #28]	@ (801d070 <UTIL_ADV_TRACE_Init+0x28>)
 801d052:	f7ff fac8 	bl	801c5e6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801d056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801d05a:	2100      	movs	r1, #0
 801d05c:	4805      	ldr	r0, [pc, #20]	@ (801d074 <UTIL_ADV_TRACE_Init+0x2c>)
 801d05e:	f7ff fac2 	bl	801c5e6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801d062:	4b05      	ldr	r3, [pc, #20]	@ (801d078 <UTIL_ADV_TRACE_Init+0x30>)
 801d064:	681b      	ldr	r3, [r3, #0]
 801d066:	4805      	ldr	r0, [pc, #20]	@ (801d07c <UTIL_ADV_TRACE_Init+0x34>)
 801d068:	4798      	blx	r3
 801d06a:	4603      	mov	r3, r0
}
 801d06c:	4618      	mov	r0, r3
 801d06e:	bd80      	pop	{r7, pc}
 801d070:	20001f00 	.word	0x20001f00
 801d074:	20001f18 	.word	0x20001f18
 801d078:	0802121c 	.word	0x0802121c
 801d07c:	0801d2e9 	.word	0x0801d2e9

0801d080 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801d080:	b480      	push	{r7}
 801d082:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d084:	4b06      	ldr	r3, [pc, #24]	@ (801d0a0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d086:	8a5a      	ldrh	r2, [r3, #18]
 801d088:	4b05      	ldr	r3, [pc, #20]	@ (801d0a0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d08a:	8a1b      	ldrh	r3, [r3, #16]
 801d08c:	429a      	cmp	r2, r3
 801d08e:	d101      	bne.n	801d094 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801d090:	2301      	movs	r3, #1
 801d092:	e000      	b.n	801d096 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801d094:	2300      	movs	r3, #0
}
 801d096:	4618      	mov	r0, r3
 801d098:	46bd      	mov	sp, r7
 801d09a:	bc80      	pop	{r7}
 801d09c:	4770      	bx	lr
 801d09e:	bf00      	nop
 801d0a0:	20001f00 	.word	0x20001f00

0801d0a4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801d0a4:	b408      	push	{r3}
 801d0a6:	b580      	push	{r7, lr}
 801d0a8:	b08d      	sub	sp, #52	@ 0x34
 801d0aa:	af00      	add	r7, sp, #0
 801d0ac:	60f8      	str	r0, [r7, #12]
 801d0ae:	60b9      	str	r1, [r7, #8]
 801d0b0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801d0b2:	2300      	movs	r3, #0
 801d0b4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801d0ba:	4b37      	ldr	r3, [pc, #220]	@ (801d198 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d0bc:	7a1b      	ldrb	r3, [r3, #8]
 801d0be:	461a      	mov	r2, r3
 801d0c0:	68fb      	ldr	r3, [r7, #12]
 801d0c2:	4293      	cmp	r3, r2
 801d0c4:	d902      	bls.n	801d0cc <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801d0c6:	f06f 0304 	mvn.w	r3, #4
 801d0ca:	e05e      	b.n	801d18a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801d0cc:	4b32      	ldr	r3, [pc, #200]	@ (801d198 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d0ce:	68da      	ldr	r2, [r3, #12]
 801d0d0:	68bb      	ldr	r3, [r7, #8]
 801d0d2:	4013      	ands	r3, r2
 801d0d4:	68ba      	ldr	r2, [r7, #8]
 801d0d6:	429a      	cmp	r2, r3
 801d0d8:	d002      	beq.n	801d0e0 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801d0da:	f06f 0305 	mvn.w	r3, #5
 801d0de:	e054      	b.n	801d18a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801d0e0:	4b2d      	ldr	r3, [pc, #180]	@ (801d198 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d0e2:	685b      	ldr	r3, [r3, #4]
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d00a      	beq.n	801d0fe <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d007      	beq.n	801d0fe <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801d0ee:	4b2a      	ldr	r3, [pc, #168]	@ (801d198 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d0f0:	685b      	ldr	r3, [r3, #4]
 801d0f2:	f107 0116 	add.w	r1, r7, #22
 801d0f6:	f107 0218 	add.w	r2, r7, #24
 801d0fa:	4610      	mov	r0, r2
 801d0fc:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801d0fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801d102:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d106:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d108:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801d10c:	4823      	ldr	r0, [pc, #140]	@ (801d19c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801d10e:	f000 ffcb 	bl	801e0a8 <vsniprintf>
 801d112:	4603      	mov	r3, r0
 801d114:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801d116:	f000 f9f1 	bl	801d4fc <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801d11a:	8afa      	ldrh	r2, [r7, #22]
 801d11c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801d11e:	4413      	add	r3, r2
 801d120:	b29b      	uxth	r3, r3
 801d122:	f107 0214 	add.w	r2, r7, #20
 801d126:	4611      	mov	r1, r2
 801d128:	4618      	mov	r0, r3
 801d12a:	f000 f969 	bl	801d400 <TRACE_AllocateBufer>
 801d12e:	4603      	mov	r3, r0
 801d130:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d134:	d025      	beq.n	801d182 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801d136:	2300      	movs	r3, #0
 801d138:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801d13a:	e00e      	b.n	801d15a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801d13c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d13e:	8aba      	ldrh	r2, [r7, #20]
 801d140:	3330      	adds	r3, #48	@ 0x30
 801d142:	443b      	add	r3, r7
 801d144:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801d148:	4b15      	ldr	r3, [pc, #84]	@ (801d1a0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d14a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801d14c:	8abb      	ldrh	r3, [r7, #20]
 801d14e:	3301      	adds	r3, #1
 801d150:	b29b      	uxth	r3, r3
 801d152:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801d154:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d156:	3301      	adds	r3, #1
 801d158:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801d15a:	8afb      	ldrh	r3, [r7, #22]
 801d15c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d15e:	429a      	cmp	r2, r3
 801d160:	d3ec      	bcc.n	801d13c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d162:	8abb      	ldrh	r3, [r7, #20]
 801d164:	461a      	mov	r2, r3
 801d166:	4b0e      	ldr	r3, [pc, #56]	@ (801d1a0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d168:	18d0      	adds	r0, r2, r3
 801d16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d16c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d16e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801d172:	f000 ff99 	bl	801e0a8 <vsniprintf>
    va_end(vaArgs);

    TRACE_UnLock();
 801d176:	f000 f9df 	bl	801d538 <TRACE_UnLock>

    return TRACE_Send();
 801d17a:	f000 f831 	bl	801d1e0 <TRACE_Send>
 801d17e:	4603      	mov	r3, r0
 801d180:	e003      	b.n	801d18a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801d182:	f000 f9d9 	bl	801d538 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801d186:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801d18a:	4618      	mov	r0, r3
 801d18c:	3734      	adds	r7, #52	@ 0x34
 801d18e:	46bd      	mov	sp, r7
 801d190:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d194:	b001      	add	sp, #4
 801d196:	4770      	bx	lr
 801d198:	20001f00 	.word	0x20001f00
 801d19c:	20002318 	.word	0x20002318
 801d1a0:	20001f18 	.word	0x20001f18

0801d1a4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801d1a4:	b480      	push	{r7}
 801d1a6:	b083      	sub	sp, #12
 801d1a8:	af00      	add	r7, sp, #0
 801d1aa:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801d1ac:	4a03      	ldr	r2, [pc, #12]	@ (801d1bc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	6053      	str	r3, [r2, #4]
}
 801d1b2:	bf00      	nop
 801d1b4:	370c      	adds	r7, #12
 801d1b6:	46bd      	mov	sp, r7
 801d1b8:	bc80      	pop	{r7}
 801d1ba:	4770      	bx	lr
 801d1bc:	20001f00 	.word	0x20001f00

0801d1c0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801d1c0:	b480      	push	{r7}
 801d1c2:	b083      	sub	sp, #12
 801d1c4:	af00      	add	r7, sp, #0
 801d1c6:	4603      	mov	r3, r0
 801d1c8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801d1ca:	4a04      	ldr	r2, [pc, #16]	@ (801d1dc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801d1cc:	79fb      	ldrb	r3, [r7, #7]
 801d1ce:	7213      	strb	r3, [r2, #8]
}
 801d1d0:	bf00      	nop
 801d1d2:	370c      	adds	r7, #12
 801d1d4:	46bd      	mov	sp, r7
 801d1d6:	bc80      	pop	{r7}
 801d1d8:	4770      	bx	lr
 801d1da:	bf00      	nop
 801d1dc:	20001f00 	.word	0x20001f00

0801d1e0 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801d1e0:	b580      	push	{r7, lr}
 801d1e2:	b088      	sub	sp, #32
 801d1e4:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801d1e6:	2300      	movs	r3, #0
 801d1e8:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801d1ea:	2300      	movs	r3, #0
 801d1ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d1ee:	f3ef 8310 	mrs	r3, PRIMASK
 801d1f2:	613b      	str	r3, [r7, #16]
  return(result);
 801d1f4:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d1f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d1f8:	b672      	cpsid	i
}
 801d1fa:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801d1fc:	f000 f9ba 	bl	801d574 <TRACE_IsLocked>
 801d200:	4603      	mov	r3, r0
 801d202:	2b00      	cmp	r3, #0
 801d204:	d15d      	bne.n	801d2c2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801d206:	f000 f979 	bl	801d4fc <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801d20a:	4b34      	ldr	r3, [pc, #208]	@ (801d2dc <TRACE_Send+0xfc>)
 801d20c:	8a1a      	ldrh	r2, [r3, #16]
 801d20e:	4b33      	ldr	r3, [pc, #204]	@ (801d2dc <TRACE_Send+0xfc>)
 801d210:	8a5b      	ldrh	r3, [r3, #18]
 801d212:	429a      	cmp	r2, r3
 801d214:	d04d      	beq.n	801d2b2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d216:	4b31      	ldr	r3, [pc, #196]	@ (801d2dc <TRACE_Send+0xfc>)
 801d218:	789b      	ldrb	r3, [r3, #2]
 801d21a:	2b01      	cmp	r3, #1
 801d21c:	d117      	bne.n	801d24e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801d21e:	4b2f      	ldr	r3, [pc, #188]	@ (801d2dc <TRACE_Send+0xfc>)
 801d220:	881a      	ldrh	r2, [r3, #0]
 801d222:	4b2e      	ldr	r3, [pc, #184]	@ (801d2dc <TRACE_Send+0xfc>)
 801d224:	8a1b      	ldrh	r3, [r3, #16]
 801d226:	1ad3      	subs	r3, r2, r3
 801d228:	b29a      	uxth	r2, r3
 801d22a:	4b2c      	ldr	r3, [pc, #176]	@ (801d2dc <TRACE_Send+0xfc>)
 801d22c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d22e:	4b2b      	ldr	r3, [pc, #172]	@ (801d2dc <TRACE_Send+0xfc>)
 801d230:	2202      	movs	r2, #2
 801d232:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d234:	4b29      	ldr	r3, [pc, #164]	@ (801d2dc <TRACE_Send+0xfc>)
 801d236:	2200      	movs	r2, #0
 801d238:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d23a:	4b28      	ldr	r3, [pc, #160]	@ (801d2dc <TRACE_Send+0xfc>)
 801d23c:	8a9b      	ldrh	r3, [r3, #20]
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d105      	bne.n	801d24e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d242:	4b26      	ldr	r3, [pc, #152]	@ (801d2dc <TRACE_Send+0xfc>)
 801d244:	2200      	movs	r2, #0
 801d246:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d248:	4b24      	ldr	r3, [pc, #144]	@ (801d2dc <TRACE_Send+0xfc>)
 801d24a:	2200      	movs	r2, #0
 801d24c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d24e:	4b23      	ldr	r3, [pc, #140]	@ (801d2dc <TRACE_Send+0xfc>)
 801d250:	789b      	ldrb	r3, [r3, #2]
 801d252:	2b00      	cmp	r3, #0
 801d254:	d115      	bne.n	801d282 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d256:	4b21      	ldr	r3, [pc, #132]	@ (801d2dc <TRACE_Send+0xfc>)
 801d258:	8a5a      	ldrh	r2, [r3, #18]
 801d25a:	4b20      	ldr	r3, [pc, #128]	@ (801d2dc <TRACE_Send+0xfc>)
 801d25c:	8a1b      	ldrh	r3, [r3, #16]
 801d25e:	429a      	cmp	r2, r3
 801d260:	d908      	bls.n	801d274 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d262:	4b1e      	ldr	r3, [pc, #120]	@ (801d2dc <TRACE_Send+0xfc>)
 801d264:	8a5a      	ldrh	r2, [r3, #18]
 801d266:	4b1d      	ldr	r3, [pc, #116]	@ (801d2dc <TRACE_Send+0xfc>)
 801d268:	8a1b      	ldrh	r3, [r3, #16]
 801d26a:	1ad3      	subs	r3, r2, r3
 801d26c:	b29a      	uxth	r2, r3
 801d26e:	4b1b      	ldr	r3, [pc, #108]	@ (801d2dc <TRACE_Send+0xfc>)
 801d270:	829a      	strh	r2, [r3, #20]
 801d272:	e006      	b.n	801d282 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d274:	4b19      	ldr	r3, [pc, #100]	@ (801d2dc <TRACE_Send+0xfc>)
 801d276:	8a1b      	ldrh	r3, [r3, #16]
 801d278:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801d27c:	b29a      	uxth	r2, r3
 801d27e:	4b17      	ldr	r3, [pc, #92]	@ (801d2dc <TRACE_Send+0xfc>)
 801d280:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d282:	4b16      	ldr	r3, [pc, #88]	@ (801d2dc <TRACE_Send+0xfc>)
 801d284:	8a1b      	ldrh	r3, [r3, #16]
 801d286:	461a      	mov	r2, r3
 801d288:	4b15      	ldr	r3, [pc, #84]	@ (801d2e0 <TRACE_Send+0x100>)
 801d28a:	4413      	add	r3, r2
 801d28c:	61bb      	str	r3, [r7, #24]
 801d28e:	697b      	ldr	r3, [r7, #20]
 801d290:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	f383 8810 	msr	PRIMASK, r3
}
 801d298:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801d29a:	f7e5 fb5b 	bl	8002954 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d29e:	4b11      	ldr	r3, [pc, #68]	@ (801d2e4 <TRACE_Send+0x104>)
 801d2a0:	68db      	ldr	r3, [r3, #12]
 801d2a2:	4a0e      	ldr	r2, [pc, #56]	@ (801d2dc <TRACE_Send+0xfc>)
 801d2a4:	8a92      	ldrh	r2, [r2, #20]
 801d2a6:	4611      	mov	r1, r2
 801d2a8:	69b8      	ldr	r0, [r7, #24]
 801d2aa:	4798      	blx	r3
 801d2ac:	4603      	mov	r3, r0
 801d2ae:	77fb      	strb	r3, [r7, #31]
 801d2b0:	e00d      	b.n	801d2ce <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801d2b2:	f000 f941 	bl	801d538 <TRACE_UnLock>
 801d2b6:	697b      	ldr	r3, [r7, #20]
 801d2b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d2ba:	68bb      	ldr	r3, [r7, #8]
 801d2bc:	f383 8810 	msr	PRIMASK, r3
}
 801d2c0:	e005      	b.n	801d2ce <TRACE_Send+0xee>
 801d2c2:	697b      	ldr	r3, [r7, #20]
 801d2c4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	f383 8810 	msr	PRIMASK, r3
}
 801d2cc:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801d2ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d2d2:	4618      	mov	r0, r3
 801d2d4:	3720      	adds	r7, #32
 801d2d6:	46bd      	mov	sp, r7
 801d2d8:	bd80      	pop	{r7, pc}
 801d2da:	bf00      	nop
 801d2dc:	20001f00 	.word	0x20001f00
 801d2e0:	20001f18 	.word	0x20001f18
 801d2e4:	0802121c 	.word	0x0802121c

0801d2e8 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801d2e8:	b580      	push	{r7, lr}
 801d2ea:	b088      	sub	sp, #32
 801d2ec:	af00      	add	r7, sp, #0
 801d2ee:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d2f4:	f3ef 8310 	mrs	r3, PRIMASK
 801d2f8:	617b      	str	r3, [r7, #20]
  return(result);
 801d2fa:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d2fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d2fe:	b672      	cpsid	i
}
 801d300:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801d302:	4b3c      	ldr	r3, [pc, #240]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d304:	789b      	ldrb	r3, [r3, #2]
 801d306:	2b02      	cmp	r3, #2
 801d308:	d106      	bne.n	801d318 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d30a:	4b3a      	ldr	r3, [pc, #232]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d30c:	2200      	movs	r2, #0
 801d30e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d310:	4b38      	ldr	r3, [pc, #224]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d312:	2200      	movs	r2, #0
 801d314:	821a      	strh	r2, [r3, #16]
 801d316:	e00a      	b.n	801d32e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d318:	4b36      	ldr	r3, [pc, #216]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d31a:	8a1a      	ldrh	r2, [r3, #16]
 801d31c:	4b35      	ldr	r3, [pc, #212]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d31e:	8a9b      	ldrh	r3, [r3, #20]
 801d320:	4413      	add	r3, r2
 801d322:	b29b      	uxth	r3, r3
 801d324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d328:	b29a      	uxth	r2, r3
 801d32a:	4b32      	ldr	r3, [pc, #200]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d32c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801d32e:	4b31      	ldr	r3, [pc, #196]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d330:	8a1a      	ldrh	r2, [r3, #16]
 801d332:	4b30      	ldr	r3, [pc, #192]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d334:	8a5b      	ldrh	r3, [r3, #18]
 801d336:	429a      	cmp	r2, r3
 801d338:	d04d      	beq.n	801d3d6 <TRACE_TxCpltCallback+0xee>
 801d33a:	4b2e      	ldr	r3, [pc, #184]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d33c:	8adb      	ldrh	r3, [r3, #22]
 801d33e:	2b01      	cmp	r3, #1
 801d340:	d149      	bne.n	801d3d6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d342:	4b2c      	ldr	r3, [pc, #176]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d344:	789b      	ldrb	r3, [r3, #2]
 801d346:	2b01      	cmp	r3, #1
 801d348:	d117      	bne.n	801d37a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801d34a:	4b2a      	ldr	r3, [pc, #168]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d34c:	881a      	ldrh	r2, [r3, #0]
 801d34e:	4b29      	ldr	r3, [pc, #164]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d350:	8a1b      	ldrh	r3, [r3, #16]
 801d352:	1ad3      	subs	r3, r2, r3
 801d354:	b29a      	uxth	r2, r3
 801d356:	4b27      	ldr	r3, [pc, #156]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d358:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d35a:	4b26      	ldr	r3, [pc, #152]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d35c:	2202      	movs	r2, #2
 801d35e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d360:	4b24      	ldr	r3, [pc, #144]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d362:	2200      	movs	r2, #0
 801d364:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d366:	4b23      	ldr	r3, [pc, #140]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d368:	8a9b      	ldrh	r3, [r3, #20]
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d105      	bne.n	801d37a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d36e:	4b21      	ldr	r3, [pc, #132]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d370:	2200      	movs	r2, #0
 801d372:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d374:	4b1f      	ldr	r3, [pc, #124]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d376:	2200      	movs	r2, #0
 801d378:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d37a:	4b1e      	ldr	r3, [pc, #120]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d37c:	789b      	ldrb	r3, [r3, #2]
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d115      	bne.n	801d3ae <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d382:	4b1c      	ldr	r3, [pc, #112]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d384:	8a5a      	ldrh	r2, [r3, #18]
 801d386:	4b1b      	ldr	r3, [pc, #108]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d388:	8a1b      	ldrh	r3, [r3, #16]
 801d38a:	429a      	cmp	r2, r3
 801d38c:	d908      	bls.n	801d3a0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d38e:	4b19      	ldr	r3, [pc, #100]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d390:	8a5a      	ldrh	r2, [r3, #18]
 801d392:	4b18      	ldr	r3, [pc, #96]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d394:	8a1b      	ldrh	r3, [r3, #16]
 801d396:	1ad3      	subs	r3, r2, r3
 801d398:	b29a      	uxth	r2, r3
 801d39a:	4b16      	ldr	r3, [pc, #88]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d39c:	829a      	strh	r2, [r3, #20]
 801d39e:	e006      	b.n	801d3ae <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d3a0:	4b14      	ldr	r3, [pc, #80]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d3a2:	8a1b      	ldrh	r3, [r3, #16]
 801d3a4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801d3a8:	b29a      	uxth	r2, r3
 801d3aa:	4b12      	ldr	r3, [pc, #72]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d3ac:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d3ae:	4b11      	ldr	r3, [pc, #68]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d3b0:	8a1b      	ldrh	r3, [r3, #16]
 801d3b2:	461a      	mov	r2, r3
 801d3b4:	4b10      	ldr	r3, [pc, #64]	@ (801d3f8 <TRACE_TxCpltCallback+0x110>)
 801d3b6:	4413      	add	r3, r2
 801d3b8:	61fb      	str	r3, [r7, #28]
 801d3ba:	69bb      	ldr	r3, [r7, #24]
 801d3bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3be:	693b      	ldr	r3, [r7, #16]
 801d3c0:	f383 8810 	msr	PRIMASK, r3
}
 801d3c4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d3c6:	4b0d      	ldr	r3, [pc, #52]	@ (801d3fc <TRACE_TxCpltCallback+0x114>)
 801d3c8:	68db      	ldr	r3, [r3, #12]
 801d3ca:	4a0a      	ldr	r2, [pc, #40]	@ (801d3f4 <TRACE_TxCpltCallback+0x10c>)
 801d3cc:	8a92      	ldrh	r2, [r2, #20]
 801d3ce:	4611      	mov	r1, r2
 801d3d0:	69f8      	ldr	r0, [r7, #28]
 801d3d2:	4798      	blx	r3
 801d3d4:	e00a      	b.n	801d3ec <TRACE_TxCpltCallback+0x104>
 801d3d6:	69bb      	ldr	r3, [r7, #24]
 801d3d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3da:	68fb      	ldr	r3, [r7, #12]
 801d3dc:	f383 8810 	msr	PRIMASK, r3
}
 801d3e0:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801d3e2:	f7e5 fabf 	bl	8002964 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801d3e6:	f000 f8a7 	bl	801d538 <TRACE_UnLock>
  }
}
 801d3ea:	bf00      	nop
 801d3ec:	bf00      	nop
 801d3ee:	3720      	adds	r7, #32
 801d3f0:	46bd      	mov	sp, r7
 801d3f2:	bd80      	pop	{r7, pc}
 801d3f4:	20001f00 	.word	0x20001f00
 801d3f8:	20001f18 	.word	0x20001f18
 801d3fc:	0802121c 	.word	0x0802121c

0801d400 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801d400:	b480      	push	{r7}
 801d402:	b087      	sub	sp, #28
 801d404:	af00      	add	r7, sp, #0
 801d406:	4603      	mov	r3, r0
 801d408:	6039      	str	r1, [r7, #0]
 801d40a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801d40c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d410:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d412:	f3ef 8310 	mrs	r3, PRIMASK
 801d416:	60fb      	str	r3, [r7, #12]
  return(result);
 801d418:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d41a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d41c:	b672      	cpsid	i
}
 801d41e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d420:	4b35      	ldr	r3, [pc, #212]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d422:	8a5a      	ldrh	r2, [r3, #18]
 801d424:	4b34      	ldr	r3, [pc, #208]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d426:	8a1b      	ldrh	r3, [r3, #16]
 801d428:	429a      	cmp	r2, r3
 801d42a:	d11b      	bne.n	801d464 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d42c:	4b32      	ldr	r3, [pc, #200]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d42e:	8a5b      	ldrh	r3, [r3, #18]
 801d430:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801d434:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801d436:	88fa      	ldrh	r2, [r7, #6]
 801d438:	8afb      	ldrh	r3, [r7, #22]
 801d43a:	429a      	cmp	r2, r3
 801d43c:	d33a      	bcc.n	801d4b4 <TRACE_AllocateBufer+0xb4>
 801d43e:	4b2e      	ldr	r3, [pc, #184]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d440:	8a1b      	ldrh	r3, [r3, #16]
 801d442:	88fa      	ldrh	r2, [r7, #6]
 801d444:	429a      	cmp	r2, r3
 801d446:	d235      	bcs.n	801d4b4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d448:	4b2b      	ldr	r3, [pc, #172]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d44a:	2201      	movs	r2, #1
 801d44c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d44e:	4b2a      	ldr	r3, [pc, #168]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d450:	8a5a      	ldrh	r2, [r3, #18]
 801d452:	4b29      	ldr	r3, [pc, #164]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d454:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d456:	4b28      	ldr	r3, [pc, #160]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d458:	8a1b      	ldrh	r3, [r3, #16]
 801d45a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d45c:	4b26      	ldr	r3, [pc, #152]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d45e:	2200      	movs	r2, #0
 801d460:	825a      	strh	r2, [r3, #18]
 801d462:	e027      	b.n	801d4b4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d464:	4b24      	ldr	r3, [pc, #144]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d466:	8a5a      	ldrh	r2, [r3, #18]
 801d468:	4b23      	ldr	r3, [pc, #140]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d46a:	8a1b      	ldrh	r3, [r3, #16]
 801d46c:	429a      	cmp	r2, r3
 801d46e:	d91b      	bls.n	801d4a8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d470:	4b21      	ldr	r3, [pc, #132]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d472:	8a5b      	ldrh	r3, [r3, #18]
 801d474:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801d478:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801d47a:	88fa      	ldrh	r2, [r7, #6]
 801d47c:	8afb      	ldrh	r3, [r7, #22]
 801d47e:	429a      	cmp	r2, r3
 801d480:	d318      	bcc.n	801d4b4 <TRACE_AllocateBufer+0xb4>
 801d482:	4b1d      	ldr	r3, [pc, #116]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d484:	8a1b      	ldrh	r3, [r3, #16]
 801d486:	88fa      	ldrh	r2, [r7, #6]
 801d488:	429a      	cmp	r2, r3
 801d48a:	d213      	bcs.n	801d4b4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d48c:	4b1a      	ldr	r3, [pc, #104]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d48e:	2201      	movs	r2, #1
 801d490:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d492:	4b19      	ldr	r3, [pc, #100]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d494:	8a5a      	ldrh	r2, [r3, #18]
 801d496:	4b18      	ldr	r3, [pc, #96]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d498:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d49a:	4b17      	ldr	r3, [pc, #92]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d49c:	8a1b      	ldrh	r3, [r3, #16]
 801d49e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d4a0:	4b15      	ldr	r3, [pc, #84]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d4a2:	2200      	movs	r2, #0
 801d4a4:	825a      	strh	r2, [r3, #18]
 801d4a6:	e005      	b.n	801d4b4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801d4a8:	4b13      	ldr	r3, [pc, #76]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d4aa:	8a1a      	ldrh	r2, [r3, #16]
 801d4ac:	4b12      	ldr	r3, [pc, #72]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d4ae:	8a5b      	ldrh	r3, [r3, #18]
 801d4b0:	1ad3      	subs	r3, r2, r3
 801d4b2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801d4b4:	8afa      	ldrh	r2, [r7, #22]
 801d4b6:	88fb      	ldrh	r3, [r7, #6]
 801d4b8:	429a      	cmp	r2, r3
 801d4ba:	d90f      	bls.n	801d4dc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801d4bc:	4b0e      	ldr	r3, [pc, #56]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d4be:	8a5a      	ldrh	r2, [r3, #18]
 801d4c0:	683b      	ldr	r3, [r7, #0]
 801d4c2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d4c4:	4b0c      	ldr	r3, [pc, #48]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d4c6:	8a5a      	ldrh	r2, [r3, #18]
 801d4c8:	88fb      	ldrh	r3, [r7, #6]
 801d4ca:	4413      	add	r3, r2
 801d4cc:	b29b      	uxth	r3, r3
 801d4ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d4d2:	b29a      	uxth	r2, r3
 801d4d4:	4b08      	ldr	r3, [pc, #32]	@ (801d4f8 <TRACE_AllocateBufer+0xf8>)
 801d4d6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801d4d8:	2300      	movs	r3, #0
 801d4da:	82bb      	strh	r3, [r7, #20]
 801d4dc:	693b      	ldr	r3, [r7, #16]
 801d4de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4e0:	68bb      	ldr	r3, [r7, #8]
 801d4e2:	f383 8810 	msr	PRIMASK, r3
}
 801d4e6:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801d4e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801d4ec:	4618      	mov	r0, r3
 801d4ee:	371c      	adds	r7, #28
 801d4f0:	46bd      	mov	sp, r7
 801d4f2:	bc80      	pop	{r7}
 801d4f4:	4770      	bx	lr
 801d4f6:	bf00      	nop
 801d4f8:	20001f00 	.word	0x20001f00

0801d4fc <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801d4fc:	b480      	push	{r7}
 801d4fe:	b085      	sub	sp, #20
 801d500:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d502:	f3ef 8310 	mrs	r3, PRIMASK
 801d506:	607b      	str	r3, [r7, #4]
  return(result);
 801d508:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d50a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d50c:	b672      	cpsid	i
}
 801d50e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801d510:	4b08      	ldr	r3, [pc, #32]	@ (801d534 <TRACE_Lock+0x38>)
 801d512:	8adb      	ldrh	r3, [r3, #22]
 801d514:	3301      	adds	r3, #1
 801d516:	b29a      	uxth	r2, r3
 801d518:	4b06      	ldr	r3, [pc, #24]	@ (801d534 <TRACE_Lock+0x38>)
 801d51a:	82da      	strh	r2, [r3, #22]
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d520:	68bb      	ldr	r3, [r7, #8]
 801d522:	f383 8810 	msr	PRIMASK, r3
}
 801d526:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d528:	bf00      	nop
 801d52a:	3714      	adds	r7, #20
 801d52c:	46bd      	mov	sp, r7
 801d52e:	bc80      	pop	{r7}
 801d530:	4770      	bx	lr
 801d532:	bf00      	nop
 801d534:	20001f00 	.word	0x20001f00

0801d538 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801d538:	b480      	push	{r7}
 801d53a:	b085      	sub	sp, #20
 801d53c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d53e:	f3ef 8310 	mrs	r3, PRIMASK
 801d542:	607b      	str	r3, [r7, #4]
  return(result);
 801d544:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d546:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d548:	b672      	cpsid	i
}
 801d54a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801d54c:	4b08      	ldr	r3, [pc, #32]	@ (801d570 <TRACE_UnLock+0x38>)
 801d54e:	8adb      	ldrh	r3, [r3, #22]
 801d550:	3b01      	subs	r3, #1
 801d552:	b29a      	uxth	r2, r3
 801d554:	4b06      	ldr	r3, [pc, #24]	@ (801d570 <TRACE_UnLock+0x38>)
 801d556:	82da      	strh	r2, [r3, #22]
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d55c:	68bb      	ldr	r3, [r7, #8]
 801d55e:	f383 8810 	msr	PRIMASK, r3
}
 801d562:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d564:	bf00      	nop
 801d566:	3714      	adds	r7, #20
 801d568:	46bd      	mov	sp, r7
 801d56a:	bc80      	pop	{r7}
 801d56c:	4770      	bx	lr
 801d56e:	bf00      	nop
 801d570:	20001f00 	.word	0x20001f00

0801d574 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801d574:	b480      	push	{r7}
 801d576:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801d578:	4b05      	ldr	r3, [pc, #20]	@ (801d590 <TRACE_IsLocked+0x1c>)
 801d57a:	8adb      	ldrh	r3, [r3, #22]
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	bf14      	ite	ne
 801d580:	2301      	movne	r3, #1
 801d582:	2300      	moveq	r3, #0
 801d584:	b2db      	uxtb	r3, r3
}
 801d586:	4618      	mov	r0, r3
 801d588:	46bd      	mov	sp, r7
 801d58a:	bc80      	pop	{r7}
 801d58c:	4770      	bx	lr
 801d58e:	bf00      	nop
 801d590:	20001f00 	.word	0x20001f00

0801d594 <__cvt>:
 801d594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d598:	b088      	sub	sp, #32
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	461d      	mov	r5, r3
 801d59e:	4614      	mov	r4, r2
 801d5a0:	bfbc      	itt	lt
 801d5a2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801d5a6:	4614      	movlt	r4, r2
 801d5a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d5aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801d5ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801d5b0:	bfb6      	itet	lt
 801d5b2:	461d      	movlt	r5, r3
 801d5b4:	2300      	movge	r3, #0
 801d5b6:	232d      	movlt	r3, #45	@ 0x2d
 801d5b8:	7013      	strb	r3, [r2, #0]
 801d5ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d5bc:	f023 0820 	bic.w	r8, r3, #32
 801d5c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d5c4:	d005      	beq.n	801d5d2 <__cvt+0x3e>
 801d5c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801d5ca:	d100      	bne.n	801d5ce <__cvt+0x3a>
 801d5cc:	3601      	adds	r6, #1
 801d5ce:	2302      	movs	r3, #2
 801d5d0:	e000      	b.n	801d5d4 <__cvt+0x40>
 801d5d2:	2303      	movs	r3, #3
 801d5d4:	aa07      	add	r2, sp, #28
 801d5d6:	9204      	str	r2, [sp, #16]
 801d5d8:	aa06      	add	r2, sp, #24
 801d5da:	e9cd a202 	strd	sl, r2, [sp, #8]
 801d5de:	e9cd 3600 	strd	r3, r6, [sp]
 801d5e2:	4622      	mov	r2, r4
 801d5e4:	462b      	mov	r3, r5
 801d5e6:	f000 fe77 	bl	801e2d8 <_dtoa_r>
 801d5ea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801d5ee:	4607      	mov	r7, r0
 801d5f0:	d119      	bne.n	801d626 <__cvt+0x92>
 801d5f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d5f4:	07db      	lsls	r3, r3, #31
 801d5f6:	d50e      	bpl.n	801d616 <__cvt+0x82>
 801d5f8:	eb00 0906 	add.w	r9, r0, r6
 801d5fc:	2200      	movs	r2, #0
 801d5fe:	2300      	movs	r3, #0
 801d600:	4620      	mov	r0, r4
 801d602:	4629      	mov	r1, r5
 801d604:	f7e3 fa38 	bl	8000a78 <__aeabi_dcmpeq>
 801d608:	b108      	cbz	r0, 801d60e <__cvt+0x7a>
 801d60a:	f8cd 901c 	str.w	r9, [sp, #28]
 801d60e:	2230      	movs	r2, #48	@ 0x30
 801d610:	9b07      	ldr	r3, [sp, #28]
 801d612:	454b      	cmp	r3, r9
 801d614:	d31e      	bcc.n	801d654 <__cvt+0xc0>
 801d616:	9b07      	ldr	r3, [sp, #28]
 801d618:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d61a:	1bdb      	subs	r3, r3, r7
 801d61c:	4638      	mov	r0, r7
 801d61e:	6013      	str	r3, [r2, #0]
 801d620:	b008      	add	sp, #32
 801d622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d626:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d62a:	eb00 0906 	add.w	r9, r0, r6
 801d62e:	d1e5      	bne.n	801d5fc <__cvt+0x68>
 801d630:	7803      	ldrb	r3, [r0, #0]
 801d632:	2b30      	cmp	r3, #48	@ 0x30
 801d634:	d10a      	bne.n	801d64c <__cvt+0xb8>
 801d636:	2200      	movs	r2, #0
 801d638:	2300      	movs	r3, #0
 801d63a:	4620      	mov	r0, r4
 801d63c:	4629      	mov	r1, r5
 801d63e:	f7e3 fa1b 	bl	8000a78 <__aeabi_dcmpeq>
 801d642:	b918      	cbnz	r0, 801d64c <__cvt+0xb8>
 801d644:	f1c6 0601 	rsb	r6, r6, #1
 801d648:	f8ca 6000 	str.w	r6, [sl]
 801d64c:	f8da 3000 	ldr.w	r3, [sl]
 801d650:	4499      	add	r9, r3
 801d652:	e7d3      	b.n	801d5fc <__cvt+0x68>
 801d654:	1c59      	adds	r1, r3, #1
 801d656:	9107      	str	r1, [sp, #28]
 801d658:	701a      	strb	r2, [r3, #0]
 801d65a:	e7d9      	b.n	801d610 <__cvt+0x7c>

0801d65c <__exponent>:
 801d65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d65e:	2900      	cmp	r1, #0
 801d660:	bfba      	itte	lt
 801d662:	4249      	neglt	r1, r1
 801d664:	232d      	movlt	r3, #45	@ 0x2d
 801d666:	232b      	movge	r3, #43	@ 0x2b
 801d668:	2909      	cmp	r1, #9
 801d66a:	7002      	strb	r2, [r0, #0]
 801d66c:	7043      	strb	r3, [r0, #1]
 801d66e:	dd29      	ble.n	801d6c4 <__exponent+0x68>
 801d670:	f10d 0307 	add.w	r3, sp, #7
 801d674:	461d      	mov	r5, r3
 801d676:	270a      	movs	r7, #10
 801d678:	461a      	mov	r2, r3
 801d67a:	fbb1 f6f7 	udiv	r6, r1, r7
 801d67e:	fb07 1416 	mls	r4, r7, r6, r1
 801d682:	3430      	adds	r4, #48	@ 0x30
 801d684:	f802 4c01 	strb.w	r4, [r2, #-1]
 801d688:	460c      	mov	r4, r1
 801d68a:	2c63      	cmp	r4, #99	@ 0x63
 801d68c:	f103 33ff 	add.w	r3, r3, #4294967295
 801d690:	4631      	mov	r1, r6
 801d692:	dcf1      	bgt.n	801d678 <__exponent+0x1c>
 801d694:	3130      	adds	r1, #48	@ 0x30
 801d696:	1e94      	subs	r4, r2, #2
 801d698:	f803 1c01 	strb.w	r1, [r3, #-1]
 801d69c:	1c41      	adds	r1, r0, #1
 801d69e:	4623      	mov	r3, r4
 801d6a0:	42ab      	cmp	r3, r5
 801d6a2:	d30a      	bcc.n	801d6ba <__exponent+0x5e>
 801d6a4:	f10d 0309 	add.w	r3, sp, #9
 801d6a8:	1a9b      	subs	r3, r3, r2
 801d6aa:	42ac      	cmp	r4, r5
 801d6ac:	bf88      	it	hi
 801d6ae:	2300      	movhi	r3, #0
 801d6b0:	3302      	adds	r3, #2
 801d6b2:	4403      	add	r3, r0
 801d6b4:	1a18      	subs	r0, r3, r0
 801d6b6:	b003      	add	sp, #12
 801d6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 801d6be:	f801 6f01 	strb.w	r6, [r1, #1]!
 801d6c2:	e7ed      	b.n	801d6a0 <__exponent+0x44>
 801d6c4:	2330      	movs	r3, #48	@ 0x30
 801d6c6:	3130      	adds	r1, #48	@ 0x30
 801d6c8:	7083      	strb	r3, [r0, #2]
 801d6ca:	70c1      	strb	r1, [r0, #3]
 801d6cc:	1d03      	adds	r3, r0, #4
 801d6ce:	e7f1      	b.n	801d6b4 <__exponent+0x58>

0801d6d0 <_printf_float>:
 801d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6d4:	b091      	sub	sp, #68	@ 0x44
 801d6d6:	460c      	mov	r4, r1
 801d6d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801d6dc:	4616      	mov	r6, r2
 801d6de:	461f      	mov	r7, r3
 801d6e0:	4605      	mov	r5, r0
 801d6e2:	f000 fcf7 	bl	801e0d4 <_localeconv_r>
 801d6e6:	6803      	ldr	r3, [r0, #0]
 801d6e8:	9308      	str	r3, [sp, #32]
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	f7e2 fd98 	bl	8000220 <strlen>
 801d6f0:	2300      	movs	r3, #0
 801d6f2:	930e      	str	r3, [sp, #56]	@ 0x38
 801d6f4:	f8d8 3000 	ldr.w	r3, [r8]
 801d6f8:	9009      	str	r0, [sp, #36]	@ 0x24
 801d6fa:	3307      	adds	r3, #7
 801d6fc:	f023 0307 	bic.w	r3, r3, #7
 801d700:	f103 0208 	add.w	r2, r3, #8
 801d704:	f894 a018 	ldrb.w	sl, [r4, #24]
 801d708:	f8d4 b000 	ldr.w	fp, [r4]
 801d70c:	f8c8 2000 	str.w	r2, [r8]
 801d710:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d714:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801d718:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d71a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801d71e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801d722:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d726:	4b9d      	ldr	r3, [pc, #628]	@ (801d99c <_printf_float+0x2cc>)
 801d728:	f04f 32ff 	mov.w	r2, #4294967295
 801d72c:	f7e3 f9d6 	bl	8000adc <__aeabi_dcmpun>
 801d730:	bb70      	cbnz	r0, 801d790 <_printf_float+0xc0>
 801d732:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801d736:	4b99      	ldr	r3, [pc, #612]	@ (801d99c <_printf_float+0x2cc>)
 801d738:	f04f 32ff 	mov.w	r2, #4294967295
 801d73c:	f7e3 f9b0 	bl	8000aa0 <__aeabi_dcmple>
 801d740:	bb30      	cbnz	r0, 801d790 <_printf_float+0xc0>
 801d742:	2200      	movs	r2, #0
 801d744:	2300      	movs	r3, #0
 801d746:	4640      	mov	r0, r8
 801d748:	4649      	mov	r1, r9
 801d74a:	f7e3 f99f 	bl	8000a8c <__aeabi_dcmplt>
 801d74e:	b110      	cbz	r0, 801d756 <_printf_float+0x86>
 801d750:	232d      	movs	r3, #45	@ 0x2d
 801d752:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d756:	4a92      	ldr	r2, [pc, #584]	@ (801d9a0 <_printf_float+0x2d0>)
 801d758:	4b92      	ldr	r3, [pc, #584]	@ (801d9a4 <_printf_float+0x2d4>)
 801d75a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801d75e:	bf8c      	ite	hi
 801d760:	4690      	movhi	r8, r2
 801d762:	4698      	movls	r8, r3
 801d764:	2303      	movs	r3, #3
 801d766:	6123      	str	r3, [r4, #16]
 801d768:	f02b 0304 	bic.w	r3, fp, #4
 801d76c:	6023      	str	r3, [r4, #0]
 801d76e:	f04f 0900 	mov.w	r9, #0
 801d772:	9700      	str	r7, [sp, #0]
 801d774:	4633      	mov	r3, r6
 801d776:	aa0f      	add	r2, sp, #60	@ 0x3c
 801d778:	4621      	mov	r1, r4
 801d77a:	4628      	mov	r0, r5
 801d77c:	f000 f9d4 	bl	801db28 <_printf_common>
 801d780:	3001      	adds	r0, #1
 801d782:	f040 808f 	bne.w	801d8a4 <_printf_float+0x1d4>
 801d786:	f04f 30ff 	mov.w	r0, #4294967295
 801d78a:	b011      	add	sp, #68	@ 0x44
 801d78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d790:	4642      	mov	r2, r8
 801d792:	464b      	mov	r3, r9
 801d794:	4640      	mov	r0, r8
 801d796:	4649      	mov	r1, r9
 801d798:	f7e3 f9a0 	bl	8000adc <__aeabi_dcmpun>
 801d79c:	b140      	cbz	r0, 801d7b0 <_printf_float+0xe0>
 801d79e:	464b      	mov	r3, r9
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	bfbc      	itt	lt
 801d7a4:	232d      	movlt	r3, #45	@ 0x2d
 801d7a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801d7aa:	4a7f      	ldr	r2, [pc, #508]	@ (801d9a8 <_printf_float+0x2d8>)
 801d7ac:	4b7f      	ldr	r3, [pc, #508]	@ (801d9ac <_printf_float+0x2dc>)
 801d7ae:	e7d4      	b.n	801d75a <_printf_float+0x8a>
 801d7b0:	6863      	ldr	r3, [r4, #4]
 801d7b2:	1c5a      	adds	r2, r3, #1
 801d7b4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801d7b8:	d13f      	bne.n	801d83a <_printf_float+0x16a>
 801d7ba:	2306      	movs	r3, #6
 801d7bc:	6063      	str	r3, [r4, #4]
 801d7be:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801d7c2:	2200      	movs	r2, #0
 801d7c4:	6023      	str	r3, [r4, #0]
 801d7c6:	9206      	str	r2, [sp, #24]
 801d7c8:	aa0e      	add	r2, sp, #56	@ 0x38
 801d7ca:	e9cd a204 	strd	sl, r2, [sp, #16]
 801d7ce:	aa0d      	add	r2, sp, #52	@ 0x34
 801d7d0:	9203      	str	r2, [sp, #12]
 801d7d2:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801d7d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801d7da:	6863      	ldr	r3, [r4, #4]
 801d7dc:	9300      	str	r3, [sp, #0]
 801d7de:	4642      	mov	r2, r8
 801d7e0:	464b      	mov	r3, r9
 801d7e2:	4628      	mov	r0, r5
 801d7e4:	910a      	str	r1, [sp, #40]	@ 0x28
 801d7e6:	f7ff fed5 	bl	801d594 <__cvt>
 801d7ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d7ec:	2947      	cmp	r1, #71	@ 0x47
 801d7ee:	4680      	mov	r8, r0
 801d7f0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d7f2:	d128      	bne.n	801d846 <_printf_float+0x176>
 801d7f4:	1cc8      	adds	r0, r1, #3
 801d7f6:	db02      	blt.n	801d7fe <_printf_float+0x12e>
 801d7f8:	6863      	ldr	r3, [r4, #4]
 801d7fa:	4299      	cmp	r1, r3
 801d7fc:	dd40      	ble.n	801d880 <_printf_float+0x1b0>
 801d7fe:	f1aa 0a02 	sub.w	sl, sl, #2
 801d802:	fa5f fa8a 	uxtb.w	sl, sl
 801d806:	3901      	subs	r1, #1
 801d808:	4652      	mov	r2, sl
 801d80a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801d80e:	910d      	str	r1, [sp, #52]	@ 0x34
 801d810:	f7ff ff24 	bl	801d65c <__exponent>
 801d814:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d816:	1813      	adds	r3, r2, r0
 801d818:	2a01      	cmp	r2, #1
 801d81a:	4681      	mov	r9, r0
 801d81c:	6123      	str	r3, [r4, #16]
 801d81e:	dc02      	bgt.n	801d826 <_printf_float+0x156>
 801d820:	6822      	ldr	r2, [r4, #0]
 801d822:	07d2      	lsls	r2, r2, #31
 801d824:	d501      	bpl.n	801d82a <_printf_float+0x15a>
 801d826:	3301      	adds	r3, #1
 801d828:	6123      	str	r3, [r4, #16]
 801d82a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801d82e:	2b00      	cmp	r3, #0
 801d830:	d09f      	beq.n	801d772 <_printf_float+0xa2>
 801d832:	232d      	movs	r3, #45	@ 0x2d
 801d834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d838:	e79b      	b.n	801d772 <_printf_float+0xa2>
 801d83a:	2947      	cmp	r1, #71	@ 0x47
 801d83c:	d1bf      	bne.n	801d7be <_printf_float+0xee>
 801d83e:	2b00      	cmp	r3, #0
 801d840:	d1bd      	bne.n	801d7be <_printf_float+0xee>
 801d842:	2301      	movs	r3, #1
 801d844:	e7ba      	b.n	801d7bc <_printf_float+0xec>
 801d846:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d84a:	d9dc      	bls.n	801d806 <_printf_float+0x136>
 801d84c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801d850:	d118      	bne.n	801d884 <_printf_float+0x1b4>
 801d852:	2900      	cmp	r1, #0
 801d854:	6863      	ldr	r3, [r4, #4]
 801d856:	dd0b      	ble.n	801d870 <_printf_float+0x1a0>
 801d858:	6121      	str	r1, [r4, #16]
 801d85a:	b913      	cbnz	r3, 801d862 <_printf_float+0x192>
 801d85c:	6822      	ldr	r2, [r4, #0]
 801d85e:	07d0      	lsls	r0, r2, #31
 801d860:	d502      	bpl.n	801d868 <_printf_float+0x198>
 801d862:	3301      	adds	r3, #1
 801d864:	440b      	add	r3, r1
 801d866:	6123      	str	r3, [r4, #16]
 801d868:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d86a:	f04f 0900 	mov.w	r9, #0
 801d86e:	e7dc      	b.n	801d82a <_printf_float+0x15a>
 801d870:	b913      	cbnz	r3, 801d878 <_printf_float+0x1a8>
 801d872:	6822      	ldr	r2, [r4, #0]
 801d874:	07d2      	lsls	r2, r2, #31
 801d876:	d501      	bpl.n	801d87c <_printf_float+0x1ac>
 801d878:	3302      	adds	r3, #2
 801d87a:	e7f4      	b.n	801d866 <_printf_float+0x196>
 801d87c:	2301      	movs	r3, #1
 801d87e:	e7f2      	b.n	801d866 <_printf_float+0x196>
 801d880:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801d884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d886:	4299      	cmp	r1, r3
 801d888:	db05      	blt.n	801d896 <_printf_float+0x1c6>
 801d88a:	6823      	ldr	r3, [r4, #0]
 801d88c:	6121      	str	r1, [r4, #16]
 801d88e:	07d8      	lsls	r0, r3, #31
 801d890:	d5ea      	bpl.n	801d868 <_printf_float+0x198>
 801d892:	1c4b      	adds	r3, r1, #1
 801d894:	e7e7      	b.n	801d866 <_printf_float+0x196>
 801d896:	2900      	cmp	r1, #0
 801d898:	bfd4      	ite	le
 801d89a:	f1c1 0202 	rsble	r2, r1, #2
 801d89e:	2201      	movgt	r2, #1
 801d8a0:	4413      	add	r3, r2
 801d8a2:	e7e0      	b.n	801d866 <_printf_float+0x196>
 801d8a4:	6823      	ldr	r3, [r4, #0]
 801d8a6:	055a      	lsls	r2, r3, #21
 801d8a8:	d407      	bmi.n	801d8ba <_printf_float+0x1ea>
 801d8aa:	6923      	ldr	r3, [r4, #16]
 801d8ac:	4642      	mov	r2, r8
 801d8ae:	4631      	mov	r1, r6
 801d8b0:	4628      	mov	r0, r5
 801d8b2:	47b8      	blx	r7
 801d8b4:	3001      	adds	r0, #1
 801d8b6:	d12b      	bne.n	801d910 <_printf_float+0x240>
 801d8b8:	e765      	b.n	801d786 <_printf_float+0xb6>
 801d8ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d8be:	f240 80dd 	bls.w	801da7c <_printf_float+0x3ac>
 801d8c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d8c6:	2200      	movs	r2, #0
 801d8c8:	2300      	movs	r3, #0
 801d8ca:	f7e3 f8d5 	bl	8000a78 <__aeabi_dcmpeq>
 801d8ce:	2800      	cmp	r0, #0
 801d8d0:	d033      	beq.n	801d93a <_printf_float+0x26a>
 801d8d2:	4a37      	ldr	r2, [pc, #220]	@ (801d9b0 <_printf_float+0x2e0>)
 801d8d4:	2301      	movs	r3, #1
 801d8d6:	4631      	mov	r1, r6
 801d8d8:	4628      	mov	r0, r5
 801d8da:	47b8      	blx	r7
 801d8dc:	3001      	adds	r0, #1
 801d8de:	f43f af52 	beq.w	801d786 <_printf_float+0xb6>
 801d8e2:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801d8e6:	4543      	cmp	r3, r8
 801d8e8:	db02      	blt.n	801d8f0 <_printf_float+0x220>
 801d8ea:	6823      	ldr	r3, [r4, #0]
 801d8ec:	07d8      	lsls	r0, r3, #31
 801d8ee:	d50f      	bpl.n	801d910 <_printf_float+0x240>
 801d8f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d8f4:	4631      	mov	r1, r6
 801d8f6:	4628      	mov	r0, r5
 801d8f8:	47b8      	blx	r7
 801d8fa:	3001      	adds	r0, #1
 801d8fc:	f43f af43 	beq.w	801d786 <_printf_float+0xb6>
 801d900:	f04f 0900 	mov.w	r9, #0
 801d904:	f108 38ff 	add.w	r8, r8, #4294967295
 801d908:	f104 0a1a 	add.w	sl, r4, #26
 801d90c:	45c8      	cmp	r8, r9
 801d90e:	dc09      	bgt.n	801d924 <_printf_float+0x254>
 801d910:	6823      	ldr	r3, [r4, #0]
 801d912:	079b      	lsls	r3, r3, #30
 801d914:	f100 8103 	bmi.w	801db1e <_printf_float+0x44e>
 801d918:	68e0      	ldr	r0, [r4, #12]
 801d91a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d91c:	4298      	cmp	r0, r3
 801d91e:	bfb8      	it	lt
 801d920:	4618      	movlt	r0, r3
 801d922:	e732      	b.n	801d78a <_printf_float+0xba>
 801d924:	2301      	movs	r3, #1
 801d926:	4652      	mov	r2, sl
 801d928:	4631      	mov	r1, r6
 801d92a:	4628      	mov	r0, r5
 801d92c:	47b8      	blx	r7
 801d92e:	3001      	adds	r0, #1
 801d930:	f43f af29 	beq.w	801d786 <_printf_float+0xb6>
 801d934:	f109 0901 	add.w	r9, r9, #1
 801d938:	e7e8      	b.n	801d90c <_printf_float+0x23c>
 801d93a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	dc39      	bgt.n	801d9b4 <_printf_float+0x2e4>
 801d940:	4a1b      	ldr	r2, [pc, #108]	@ (801d9b0 <_printf_float+0x2e0>)
 801d942:	2301      	movs	r3, #1
 801d944:	4631      	mov	r1, r6
 801d946:	4628      	mov	r0, r5
 801d948:	47b8      	blx	r7
 801d94a:	3001      	adds	r0, #1
 801d94c:	f43f af1b 	beq.w	801d786 <_printf_float+0xb6>
 801d950:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801d954:	ea59 0303 	orrs.w	r3, r9, r3
 801d958:	d102      	bne.n	801d960 <_printf_float+0x290>
 801d95a:	6823      	ldr	r3, [r4, #0]
 801d95c:	07d9      	lsls	r1, r3, #31
 801d95e:	d5d7      	bpl.n	801d910 <_printf_float+0x240>
 801d960:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d964:	4631      	mov	r1, r6
 801d966:	4628      	mov	r0, r5
 801d968:	47b8      	blx	r7
 801d96a:	3001      	adds	r0, #1
 801d96c:	f43f af0b 	beq.w	801d786 <_printf_float+0xb6>
 801d970:	f04f 0a00 	mov.w	sl, #0
 801d974:	f104 0b1a 	add.w	fp, r4, #26
 801d978:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d97a:	425b      	negs	r3, r3
 801d97c:	4553      	cmp	r3, sl
 801d97e:	dc01      	bgt.n	801d984 <_printf_float+0x2b4>
 801d980:	464b      	mov	r3, r9
 801d982:	e793      	b.n	801d8ac <_printf_float+0x1dc>
 801d984:	2301      	movs	r3, #1
 801d986:	465a      	mov	r2, fp
 801d988:	4631      	mov	r1, r6
 801d98a:	4628      	mov	r0, r5
 801d98c:	47b8      	blx	r7
 801d98e:	3001      	adds	r0, #1
 801d990:	f43f aef9 	beq.w	801d786 <_printf_float+0xb6>
 801d994:	f10a 0a01 	add.w	sl, sl, #1
 801d998:	e7ee      	b.n	801d978 <_printf_float+0x2a8>
 801d99a:	bf00      	nop
 801d99c:	7fefffff 	.word	0x7fefffff
 801d9a0:	08021774 	.word	0x08021774
 801d9a4:	08021770 	.word	0x08021770
 801d9a8:	0802177c 	.word	0x0802177c
 801d9ac:	08021778 	.word	0x08021778
 801d9b0:	08021780 	.word	0x08021780
 801d9b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d9b6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801d9ba:	4553      	cmp	r3, sl
 801d9bc:	bfa8      	it	ge
 801d9be:	4653      	movge	r3, sl
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	4699      	mov	r9, r3
 801d9c4:	dc36      	bgt.n	801da34 <_printf_float+0x364>
 801d9c6:	f04f 0b00 	mov.w	fp, #0
 801d9ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d9ce:	f104 021a 	add.w	r2, r4, #26
 801d9d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d9d4:	930a      	str	r3, [sp, #40]	@ 0x28
 801d9d6:	eba3 0309 	sub.w	r3, r3, r9
 801d9da:	455b      	cmp	r3, fp
 801d9dc:	dc31      	bgt.n	801da42 <_printf_float+0x372>
 801d9de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d9e0:	459a      	cmp	sl, r3
 801d9e2:	dc3a      	bgt.n	801da5a <_printf_float+0x38a>
 801d9e4:	6823      	ldr	r3, [r4, #0]
 801d9e6:	07da      	lsls	r2, r3, #31
 801d9e8:	d437      	bmi.n	801da5a <_printf_float+0x38a>
 801d9ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d9ec:	ebaa 0903 	sub.w	r9, sl, r3
 801d9f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d9f2:	ebaa 0303 	sub.w	r3, sl, r3
 801d9f6:	4599      	cmp	r9, r3
 801d9f8:	bfa8      	it	ge
 801d9fa:	4699      	movge	r9, r3
 801d9fc:	f1b9 0f00 	cmp.w	r9, #0
 801da00:	dc33      	bgt.n	801da6a <_printf_float+0x39a>
 801da02:	f04f 0800 	mov.w	r8, #0
 801da06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801da0a:	f104 0b1a 	add.w	fp, r4, #26
 801da0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da10:	ebaa 0303 	sub.w	r3, sl, r3
 801da14:	eba3 0309 	sub.w	r3, r3, r9
 801da18:	4543      	cmp	r3, r8
 801da1a:	f77f af79 	ble.w	801d910 <_printf_float+0x240>
 801da1e:	2301      	movs	r3, #1
 801da20:	465a      	mov	r2, fp
 801da22:	4631      	mov	r1, r6
 801da24:	4628      	mov	r0, r5
 801da26:	47b8      	blx	r7
 801da28:	3001      	adds	r0, #1
 801da2a:	f43f aeac 	beq.w	801d786 <_printf_float+0xb6>
 801da2e:	f108 0801 	add.w	r8, r8, #1
 801da32:	e7ec      	b.n	801da0e <_printf_float+0x33e>
 801da34:	4642      	mov	r2, r8
 801da36:	4631      	mov	r1, r6
 801da38:	4628      	mov	r0, r5
 801da3a:	47b8      	blx	r7
 801da3c:	3001      	adds	r0, #1
 801da3e:	d1c2      	bne.n	801d9c6 <_printf_float+0x2f6>
 801da40:	e6a1      	b.n	801d786 <_printf_float+0xb6>
 801da42:	2301      	movs	r3, #1
 801da44:	4631      	mov	r1, r6
 801da46:	4628      	mov	r0, r5
 801da48:	920a      	str	r2, [sp, #40]	@ 0x28
 801da4a:	47b8      	blx	r7
 801da4c:	3001      	adds	r0, #1
 801da4e:	f43f ae9a 	beq.w	801d786 <_printf_float+0xb6>
 801da52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801da54:	f10b 0b01 	add.w	fp, fp, #1
 801da58:	e7bb      	b.n	801d9d2 <_printf_float+0x302>
 801da5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801da5e:	4631      	mov	r1, r6
 801da60:	4628      	mov	r0, r5
 801da62:	47b8      	blx	r7
 801da64:	3001      	adds	r0, #1
 801da66:	d1c0      	bne.n	801d9ea <_printf_float+0x31a>
 801da68:	e68d      	b.n	801d786 <_printf_float+0xb6>
 801da6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801da6c:	464b      	mov	r3, r9
 801da6e:	4442      	add	r2, r8
 801da70:	4631      	mov	r1, r6
 801da72:	4628      	mov	r0, r5
 801da74:	47b8      	blx	r7
 801da76:	3001      	adds	r0, #1
 801da78:	d1c3      	bne.n	801da02 <_printf_float+0x332>
 801da7a:	e684      	b.n	801d786 <_printf_float+0xb6>
 801da7c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801da80:	f1ba 0f01 	cmp.w	sl, #1
 801da84:	dc01      	bgt.n	801da8a <_printf_float+0x3ba>
 801da86:	07db      	lsls	r3, r3, #31
 801da88:	d536      	bpl.n	801daf8 <_printf_float+0x428>
 801da8a:	2301      	movs	r3, #1
 801da8c:	4642      	mov	r2, r8
 801da8e:	4631      	mov	r1, r6
 801da90:	4628      	mov	r0, r5
 801da92:	47b8      	blx	r7
 801da94:	3001      	adds	r0, #1
 801da96:	f43f ae76 	beq.w	801d786 <_printf_float+0xb6>
 801da9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801da9e:	4631      	mov	r1, r6
 801daa0:	4628      	mov	r0, r5
 801daa2:	47b8      	blx	r7
 801daa4:	3001      	adds	r0, #1
 801daa6:	f43f ae6e 	beq.w	801d786 <_printf_float+0xb6>
 801daaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801daae:	2200      	movs	r2, #0
 801dab0:	2300      	movs	r3, #0
 801dab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dab6:	f7e2 ffdf 	bl	8000a78 <__aeabi_dcmpeq>
 801daba:	b9c0      	cbnz	r0, 801daee <_printf_float+0x41e>
 801dabc:	4653      	mov	r3, sl
 801dabe:	f108 0201 	add.w	r2, r8, #1
 801dac2:	4631      	mov	r1, r6
 801dac4:	4628      	mov	r0, r5
 801dac6:	47b8      	blx	r7
 801dac8:	3001      	adds	r0, #1
 801daca:	d10c      	bne.n	801dae6 <_printf_float+0x416>
 801dacc:	e65b      	b.n	801d786 <_printf_float+0xb6>
 801dace:	2301      	movs	r3, #1
 801dad0:	465a      	mov	r2, fp
 801dad2:	4631      	mov	r1, r6
 801dad4:	4628      	mov	r0, r5
 801dad6:	47b8      	blx	r7
 801dad8:	3001      	adds	r0, #1
 801dada:	f43f ae54 	beq.w	801d786 <_printf_float+0xb6>
 801dade:	f108 0801 	add.w	r8, r8, #1
 801dae2:	45d0      	cmp	r8, sl
 801dae4:	dbf3      	blt.n	801dace <_printf_float+0x3fe>
 801dae6:	464b      	mov	r3, r9
 801dae8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801daec:	e6df      	b.n	801d8ae <_printf_float+0x1de>
 801daee:	f04f 0800 	mov.w	r8, #0
 801daf2:	f104 0b1a 	add.w	fp, r4, #26
 801daf6:	e7f4      	b.n	801dae2 <_printf_float+0x412>
 801daf8:	2301      	movs	r3, #1
 801dafa:	4642      	mov	r2, r8
 801dafc:	e7e1      	b.n	801dac2 <_printf_float+0x3f2>
 801dafe:	2301      	movs	r3, #1
 801db00:	464a      	mov	r2, r9
 801db02:	4631      	mov	r1, r6
 801db04:	4628      	mov	r0, r5
 801db06:	47b8      	blx	r7
 801db08:	3001      	adds	r0, #1
 801db0a:	f43f ae3c 	beq.w	801d786 <_printf_float+0xb6>
 801db0e:	f108 0801 	add.w	r8, r8, #1
 801db12:	68e3      	ldr	r3, [r4, #12]
 801db14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801db16:	1a5b      	subs	r3, r3, r1
 801db18:	4543      	cmp	r3, r8
 801db1a:	dcf0      	bgt.n	801dafe <_printf_float+0x42e>
 801db1c:	e6fc      	b.n	801d918 <_printf_float+0x248>
 801db1e:	f04f 0800 	mov.w	r8, #0
 801db22:	f104 0919 	add.w	r9, r4, #25
 801db26:	e7f4      	b.n	801db12 <_printf_float+0x442>

0801db28 <_printf_common>:
 801db28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db2c:	4616      	mov	r6, r2
 801db2e:	4698      	mov	r8, r3
 801db30:	688a      	ldr	r2, [r1, #8]
 801db32:	690b      	ldr	r3, [r1, #16]
 801db34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801db38:	4293      	cmp	r3, r2
 801db3a:	bfb8      	it	lt
 801db3c:	4613      	movlt	r3, r2
 801db3e:	6033      	str	r3, [r6, #0]
 801db40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801db44:	4607      	mov	r7, r0
 801db46:	460c      	mov	r4, r1
 801db48:	b10a      	cbz	r2, 801db4e <_printf_common+0x26>
 801db4a:	3301      	adds	r3, #1
 801db4c:	6033      	str	r3, [r6, #0]
 801db4e:	6823      	ldr	r3, [r4, #0]
 801db50:	0699      	lsls	r1, r3, #26
 801db52:	bf42      	ittt	mi
 801db54:	6833      	ldrmi	r3, [r6, #0]
 801db56:	3302      	addmi	r3, #2
 801db58:	6033      	strmi	r3, [r6, #0]
 801db5a:	6825      	ldr	r5, [r4, #0]
 801db5c:	f015 0506 	ands.w	r5, r5, #6
 801db60:	d106      	bne.n	801db70 <_printf_common+0x48>
 801db62:	f104 0a19 	add.w	sl, r4, #25
 801db66:	68e3      	ldr	r3, [r4, #12]
 801db68:	6832      	ldr	r2, [r6, #0]
 801db6a:	1a9b      	subs	r3, r3, r2
 801db6c:	42ab      	cmp	r3, r5
 801db6e:	dc26      	bgt.n	801dbbe <_printf_common+0x96>
 801db70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801db74:	6822      	ldr	r2, [r4, #0]
 801db76:	3b00      	subs	r3, #0
 801db78:	bf18      	it	ne
 801db7a:	2301      	movne	r3, #1
 801db7c:	0692      	lsls	r2, r2, #26
 801db7e:	d42b      	bmi.n	801dbd8 <_printf_common+0xb0>
 801db80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801db84:	4641      	mov	r1, r8
 801db86:	4638      	mov	r0, r7
 801db88:	47c8      	blx	r9
 801db8a:	3001      	adds	r0, #1
 801db8c:	d01e      	beq.n	801dbcc <_printf_common+0xa4>
 801db8e:	6823      	ldr	r3, [r4, #0]
 801db90:	6922      	ldr	r2, [r4, #16]
 801db92:	f003 0306 	and.w	r3, r3, #6
 801db96:	2b04      	cmp	r3, #4
 801db98:	bf02      	ittt	eq
 801db9a:	68e5      	ldreq	r5, [r4, #12]
 801db9c:	6833      	ldreq	r3, [r6, #0]
 801db9e:	1aed      	subeq	r5, r5, r3
 801dba0:	68a3      	ldr	r3, [r4, #8]
 801dba2:	bf0c      	ite	eq
 801dba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dba8:	2500      	movne	r5, #0
 801dbaa:	4293      	cmp	r3, r2
 801dbac:	bfc4      	itt	gt
 801dbae:	1a9b      	subgt	r3, r3, r2
 801dbb0:	18ed      	addgt	r5, r5, r3
 801dbb2:	2600      	movs	r6, #0
 801dbb4:	341a      	adds	r4, #26
 801dbb6:	42b5      	cmp	r5, r6
 801dbb8:	d11a      	bne.n	801dbf0 <_printf_common+0xc8>
 801dbba:	2000      	movs	r0, #0
 801dbbc:	e008      	b.n	801dbd0 <_printf_common+0xa8>
 801dbbe:	2301      	movs	r3, #1
 801dbc0:	4652      	mov	r2, sl
 801dbc2:	4641      	mov	r1, r8
 801dbc4:	4638      	mov	r0, r7
 801dbc6:	47c8      	blx	r9
 801dbc8:	3001      	adds	r0, #1
 801dbca:	d103      	bne.n	801dbd4 <_printf_common+0xac>
 801dbcc:	f04f 30ff 	mov.w	r0, #4294967295
 801dbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbd4:	3501      	adds	r5, #1
 801dbd6:	e7c6      	b.n	801db66 <_printf_common+0x3e>
 801dbd8:	18e1      	adds	r1, r4, r3
 801dbda:	1c5a      	adds	r2, r3, #1
 801dbdc:	2030      	movs	r0, #48	@ 0x30
 801dbde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801dbe2:	4422      	add	r2, r4
 801dbe4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801dbe8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801dbec:	3302      	adds	r3, #2
 801dbee:	e7c7      	b.n	801db80 <_printf_common+0x58>
 801dbf0:	2301      	movs	r3, #1
 801dbf2:	4622      	mov	r2, r4
 801dbf4:	4641      	mov	r1, r8
 801dbf6:	4638      	mov	r0, r7
 801dbf8:	47c8      	blx	r9
 801dbfa:	3001      	adds	r0, #1
 801dbfc:	d0e6      	beq.n	801dbcc <_printf_common+0xa4>
 801dbfe:	3601      	adds	r6, #1
 801dc00:	e7d9      	b.n	801dbb6 <_printf_common+0x8e>
	...

0801dc04 <_printf_i>:
 801dc04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dc08:	7e0f      	ldrb	r7, [r1, #24]
 801dc0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801dc0c:	2f78      	cmp	r7, #120	@ 0x78
 801dc0e:	4691      	mov	r9, r2
 801dc10:	4680      	mov	r8, r0
 801dc12:	460c      	mov	r4, r1
 801dc14:	469a      	mov	sl, r3
 801dc16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801dc1a:	d807      	bhi.n	801dc2c <_printf_i+0x28>
 801dc1c:	2f62      	cmp	r7, #98	@ 0x62
 801dc1e:	d80a      	bhi.n	801dc36 <_printf_i+0x32>
 801dc20:	2f00      	cmp	r7, #0
 801dc22:	f000 80d1 	beq.w	801ddc8 <_printf_i+0x1c4>
 801dc26:	2f58      	cmp	r7, #88	@ 0x58
 801dc28:	f000 80b8 	beq.w	801dd9c <_printf_i+0x198>
 801dc2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dc30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801dc34:	e03a      	b.n	801dcac <_printf_i+0xa8>
 801dc36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801dc3a:	2b15      	cmp	r3, #21
 801dc3c:	d8f6      	bhi.n	801dc2c <_printf_i+0x28>
 801dc3e:	a101      	add	r1, pc, #4	@ (adr r1, 801dc44 <_printf_i+0x40>)
 801dc40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dc44:	0801dc9d 	.word	0x0801dc9d
 801dc48:	0801dcb1 	.word	0x0801dcb1
 801dc4c:	0801dc2d 	.word	0x0801dc2d
 801dc50:	0801dc2d 	.word	0x0801dc2d
 801dc54:	0801dc2d 	.word	0x0801dc2d
 801dc58:	0801dc2d 	.word	0x0801dc2d
 801dc5c:	0801dcb1 	.word	0x0801dcb1
 801dc60:	0801dc2d 	.word	0x0801dc2d
 801dc64:	0801dc2d 	.word	0x0801dc2d
 801dc68:	0801dc2d 	.word	0x0801dc2d
 801dc6c:	0801dc2d 	.word	0x0801dc2d
 801dc70:	0801ddaf 	.word	0x0801ddaf
 801dc74:	0801dcdb 	.word	0x0801dcdb
 801dc78:	0801dd69 	.word	0x0801dd69
 801dc7c:	0801dc2d 	.word	0x0801dc2d
 801dc80:	0801dc2d 	.word	0x0801dc2d
 801dc84:	0801ddd1 	.word	0x0801ddd1
 801dc88:	0801dc2d 	.word	0x0801dc2d
 801dc8c:	0801dcdb 	.word	0x0801dcdb
 801dc90:	0801dc2d 	.word	0x0801dc2d
 801dc94:	0801dc2d 	.word	0x0801dc2d
 801dc98:	0801dd71 	.word	0x0801dd71
 801dc9c:	6833      	ldr	r3, [r6, #0]
 801dc9e:	1d1a      	adds	r2, r3, #4
 801dca0:	681b      	ldr	r3, [r3, #0]
 801dca2:	6032      	str	r2, [r6, #0]
 801dca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801dca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801dcac:	2301      	movs	r3, #1
 801dcae:	e09c      	b.n	801ddea <_printf_i+0x1e6>
 801dcb0:	6833      	ldr	r3, [r6, #0]
 801dcb2:	6820      	ldr	r0, [r4, #0]
 801dcb4:	1d19      	adds	r1, r3, #4
 801dcb6:	6031      	str	r1, [r6, #0]
 801dcb8:	0606      	lsls	r6, r0, #24
 801dcba:	d501      	bpl.n	801dcc0 <_printf_i+0xbc>
 801dcbc:	681d      	ldr	r5, [r3, #0]
 801dcbe:	e003      	b.n	801dcc8 <_printf_i+0xc4>
 801dcc0:	0645      	lsls	r5, r0, #25
 801dcc2:	d5fb      	bpl.n	801dcbc <_printf_i+0xb8>
 801dcc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801dcc8:	2d00      	cmp	r5, #0
 801dcca:	da03      	bge.n	801dcd4 <_printf_i+0xd0>
 801dccc:	232d      	movs	r3, #45	@ 0x2d
 801dcce:	426d      	negs	r5, r5
 801dcd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dcd4:	4858      	ldr	r0, [pc, #352]	@ (801de38 <_printf_i+0x234>)
 801dcd6:	230a      	movs	r3, #10
 801dcd8:	e011      	b.n	801dcfe <_printf_i+0xfa>
 801dcda:	6821      	ldr	r1, [r4, #0]
 801dcdc:	6833      	ldr	r3, [r6, #0]
 801dcde:	0608      	lsls	r0, r1, #24
 801dce0:	f853 5b04 	ldr.w	r5, [r3], #4
 801dce4:	d402      	bmi.n	801dcec <_printf_i+0xe8>
 801dce6:	0649      	lsls	r1, r1, #25
 801dce8:	bf48      	it	mi
 801dcea:	b2ad      	uxthmi	r5, r5
 801dcec:	2f6f      	cmp	r7, #111	@ 0x6f
 801dcee:	4852      	ldr	r0, [pc, #328]	@ (801de38 <_printf_i+0x234>)
 801dcf0:	6033      	str	r3, [r6, #0]
 801dcf2:	bf14      	ite	ne
 801dcf4:	230a      	movne	r3, #10
 801dcf6:	2308      	moveq	r3, #8
 801dcf8:	2100      	movs	r1, #0
 801dcfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801dcfe:	6866      	ldr	r6, [r4, #4]
 801dd00:	60a6      	str	r6, [r4, #8]
 801dd02:	2e00      	cmp	r6, #0
 801dd04:	db05      	blt.n	801dd12 <_printf_i+0x10e>
 801dd06:	6821      	ldr	r1, [r4, #0]
 801dd08:	432e      	orrs	r6, r5
 801dd0a:	f021 0104 	bic.w	r1, r1, #4
 801dd0e:	6021      	str	r1, [r4, #0]
 801dd10:	d04b      	beq.n	801ddaa <_printf_i+0x1a6>
 801dd12:	4616      	mov	r6, r2
 801dd14:	fbb5 f1f3 	udiv	r1, r5, r3
 801dd18:	fb03 5711 	mls	r7, r3, r1, r5
 801dd1c:	5dc7      	ldrb	r7, [r0, r7]
 801dd1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801dd22:	462f      	mov	r7, r5
 801dd24:	42bb      	cmp	r3, r7
 801dd26:	460d      	mov	r5, r1
 801dd28:	d9f4      	bls.n	801dd14 <_printf_i+0x110>
 801dd2a:	2b08      	cmp	r3, #8
 801dd2c:	d10b      	bne.n	801dd46 <_printf_i+0x142>
 801dd2e:	6823      	ldr	r3, [r4, #0]
 801dd30:	07df      	lsls	r7, r3, #31
 801dd32:	d508      	bpl.n	801dd46 <_printf_i+0x142>
 801dd34:	6923      	ldr	r3, [r4, #16]
 801dd36:	6861      	ldr	r1, [r4, #4]
 801dd38:	4299      	cmp	r1, r3
 801dd3a:	bfde      	ittt	le
 801dd3c:	2330      	movle	r3, #48	@ 0x30
 801dd3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 801dd42:	f106 36ff 	addle.w	r6, r6, #4294967295
 801dd46:	1b92      	subs	r2, r2, r6
 801dd48:	6122      	str	r2, [r4, #16]
 801dd4a:	f8cd a000 	str.w	sl, [sp]
 801dd4e:	464b      	mov	r3, r9
 801dd50:	aa03      	add	r2, sp, #12
 801dd52:	4621      	mov	r1, r4
 801dd54:	4640      	mov	r0, r8
 801dd56:	f7ff fee7 	bl	801db28 <_printf_common>
 801dd5a:	3001      	adds	r0, #1
 801dd5c:	d14a      	bne.n	801ddf4 <_printf_i+0x1f0>
 801dd5e:	f04f 30ff 	mov.w	r0, #4294967295
 801dd62:	b004      	add	sp, #16
 801dd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd68:	6823      	ldr	r3, [r4, #0]
 801dd6a:	f043 0320 	orr.w	r3, r3, #32
 801dd6e:	6023      	str	r3, [r4, #0]
 801dd70:	4832      	ldr	r0, [pc, #200]	@ (801de3c <_printf_i+0x238>)
 801dd72:	2778      	movs	r7, #120	@ 0x78
 801dd74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801dd78:	6823      	ldr	r3, [r4, #0]
 801dd7a:	6831      	ldr	r1, [r6, #0]
 801dd7c:	061f      	lsls	r7, r3, #24
 801dd7e:	f851 5b04 	ldr.w	r5, [r1], #4
 801dd82:	d402      	bmi.n	801dd8a <_printf_i+0x186>
 801dd84:	065f      	lsls	r7, r3, #25
 801dd86:	bf48      	it	mi
 801dd88:	b2ad      	uxthmi	r5, r5
 801dd8a:	6031      	str	r1, [r6, #0]
 801dd8c:	07d9      	lsls	r1, r3, #31
 801dd8e:	bf44      	itt	mi
 801dd90:	f043 0320 	orrmi.w	r3, r3, #32
 801dd94:	6023      	strmi	r3, [r4, #0]
 801dd96:	b11d      	cbz	r5, 801dda0 <_printf_i+0x19c>
 801dd98:	2310      	movs	r3, #16
 801dd9a:	e7ad      	b.n	801dcf8 <_printf_i+0xf4>
 801dd9c:	4826      	ldr	r0, [pc, #152]	@ (801de38 <_printf_i+0x234>)
 801dd9e:	e7e9      	b.n	801dd74 <_printf_i+0x170>
 801dda0:	6823      	ldr	r3, [r4, #0]
 801dda2:	f023 0320 	bic.w	r3, r3, #32
 801dda6:	6023      	str	r3, [r4, #0]
 801dda8:	e7f6      	b.n	801dd98 <_printf_i+0x194>
 801ddaa:	4616      	mov	r6, r2
 801ddac:	e7bd      	b.n	801dd2a <_printf_i+0x126>
 801ddae:	6833      	ldr	r3, [r6, #0]
 801ddb0:	6825      	ldr	r5, [r4, #0]
 801ddb2:	6961      	ldr	r1, [r4, #20]
 801ddb4:	1d18      	adds	r0, r3, #4
 801ddb6:	6030      	str	r0, [r6, #0]
 801ddb8:	062e      	lsls	r6, r5, #24
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	d501      	bpl.n	801ddc2 <_printf_i+0x1be>
 801ddbe:	6019      	str	r1, [r3, #0]
 801ddc0:	e002      	b.n	801ddc8 <_printf_i+0x1c4>
 801ddc2:	0668      	lsls	r0, r5, #25
 801ddc4:	d5fb      	bpl.n	801ddbe <_printf_i+0x1ba>
 801ddc6:	8019      	strh	r1, [r3, #0]
 801ddc8:	2300      	movs	r3, #0
 801ddca:	6123      	str	r3, [r4, #16]
 801ddcc:	4616      	mov	r6, r2
 801ddce:	e7bc      	b.n	801dd4a <_printf_i+0x146>
 801ddd0:	6833      	ldr	r3, [r6, #0]
 801ddd2:	1d1a      	adds	r2, r3, #4
 801ddd4:	6032      	str	r2, [r6, #0]
 801ddd6:	681e      	ldr	r6, [r3, #0]
 801ddd8:	6862      	ldr	r2, [r4, #4]
 801ddda:	2100      	movs	r1, #0
 801dddc:	4630      	mov	r0, r6
 801ddde:	f7e2 f9cf 	bl	8000180 <memchr>
 801dde2:	b108      	cbz	r0, 801dde8 <_printf_i+0x1e4>
 801dde4:	1b80      	subs	r0, r0, r6
 801dde6:	6060      	str	r0, [r4, #4]
 801dde8:	6863      	ldr	r3, [r4, #4]
 801ddea:	6123      	str	r3, [r4, #16]
 801ddec:	2300      	movs	r3, #0
 801ddee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ddf2:	e7aa      	b.n	801dd4a <_printf_i+0x146>
 801ddf4:	6923      	ldr	r3, [r4, #16]
 801ddf6:	4632      	mov	r2, r6
 801ddf8:	4649      	mov	r1, r9
 801ddfa:	4640      	mov	r0, r8
 801ddfc:	47d0      	blx	sl
 801ddfe:	3001      	adds	r0, #1
 801de00:	d0ad      	beq.n	801dd5e <_printf_i+0x15a>
 801de02:	6823      	ldr	r3, [r4, #0]
 801de04:	079b      	lsls	r3, r3, #30
 801de06:	d413      	bmi.n	801de30 <_printf_i+0x22c>
 801de08:	68e0      	ldr	r0, [r4, #12]
 801de0a:	9b03      	ldr	r3, [sp, #12]
 801de0c:	4298      	cmp	r0, r3
 801de0e:	bfb8      	it	lt
 801de10:	4618      	movlt	r0, r3
 801de12:	e7a6      	b.n	801dd62 <_printf_i+0x15e>
 801de14:	2301      	movs	r3, #1
 801de16:	4632      	mov	r2, r6
 801de18:	4649      	mov	r1, r9
 801de1a:	4640      	mov	r0, r8
 801de1c:	47d0      	blx	sl
 801de1e:	3001      	adds	r0, #1
 801de20:	d09d      	beq.n	801dd5e <_printf_i+0x15a>
 801de22:	3501      	adds	r5, #1
 801de24:	68e3      	ldr	r3, [r4, #12]
 801de26:	9903      	ldr	r1, [sp, #12]
 801de28:	1a5b      	subs	r3, r3, r1
 801de2a:	42ab      	cmp	r3, r5
 801de2c:	dcf2      	bgt.n	801de14 <_printf_i+0x210>
 801de2e:	e7eb      	b.n	801de08 <_printf_i+0x204>
 801de30:	2500      	movs	r5, #0
 801de32:	f104 0619 	add.w	r6, r4, #25
 801de36:	e7f5      	b.n	801de24 <_printf_i+0x220>
 801de38:	08021782 	.word	0x08021782
 801de3c:	08021793 	.word	0x08021793

0801de40 <std>:
 801de40:	2300      	movs	r3, #0
 801de42:	b510      	push	{r4, lr}
 801de44:	4604      	mov	r4, r0
 801de46:	e9c0 3300 	strd	r3, r3, [r0]
 801de4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801de4e:	6083      	str	r3, [r0, #8]
 801de50:	8181      	strh	r1, [r0, #12]
 801de52:	6643      	str	r3, [r0, #100]	@ 0x64
 801de54:	81c2      	strh	r2, [r0, #14]
 801de56:	6183      	str	r3, [r0, #24]
 801de58:	4619      	mov	r1, r3
 801de5a:	2208      	movs	r2, #8
 801de5c:	305c      	adds	r0, #92	@ 0x5c
 801de5e:	f000 f931 	bl	801e0c4 <memset>
 801de62:	4b0d      	ldr	r3, [pc, #52]	@ (801de98 <std+0x58>)
 801de64:	6263      	str	r3, [r4, #36]	@ 0x24
 801de66:	4b0d      	ldr	r3, [pc, #52]	@ (801de9c <std+0x5c>)
 801de68:	62a3      	str	r3, [r4, #40]	@ 0x28
 801de6a:	4b0d      	ldr	r3, [pc, #52]	@ (801dea0 <std+0x60>)
 801de6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801de6e:	4b0d      	ldr	r3, [pc, #52]	@ (801dea4 <std+0x64>)
 801de70:	6323      	str	r3, [r4, #48]	@ 0x30
 801de72:	4b0d      	ldr	r3, [pc, #52]	@ (801dea8 <std+0x68>)
 801de74:	6224      	str	r4, [r4, #32]
 801de76:	429c      	cmp	r4, r3
 801de78:	d006      	beq.n	801de88 <std+0x48>
 801de7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801de7e:	4294      	cmp	r4, r2
 801de80:	d002      	beq.n	801de88 <std+0x48>
 801de82:	33d0      	adds	r3, #208	@ 0xd0
 801de84:	429c      	cmp	r4, r3
 801de86:	d105      	bne.n	801de94 <std+0x54>
 801de88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801de8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de90:	f000 b994 	b.w	801e1bc <__retarget_lock_init_recursive>
 801de94:	bd10      	pop	{r4, pc}
 801de96:	bf00      	nop
 801de98:	0801dfc5 	.word	0x0801dfc5
 801de9c:	0801dfe7 	.word	0x0801dfe7
 801dea0:	0801e01f 	.word	0x0801e01f
 801dea4:	0801e043 	.word	0x0801e043
 801dea8:	20002518 	.word	0x20002518

0801deac <stdio_exit_handler>:
 801deac:	4a02      	ldr	r2, [pc, #8]	@ (801deb8 <stdio_exit_handler+0xc>)
 801deae:	4903      	ldr	r1, [pc, #12]	@ (801debc <stdio_exit_handler+0x10>)
 801deb0:	4803      	ldr	r0, [pc, #12]	@ (801dec0 <stdio_exit_handler+0x14>)
 801deb2:	f000 b869 	b.w	801df88 <_fwalk_sglue>
 801deb6:	bf00      	nop
 801deb8:	20000140 	.word	0x20000140
 801debc:	0801fb19 	.word	0x0801fb19
 801dec0:	20000150 	.word	0x20000150

0801dec4 <cleanup_stdio>:
 801dec4:	6841      	ldr	r1, [r0, #4]
 801dec6:	4b0c      	ldr	r3, [pc, #48]	@ (801def8 <cleanup_stdio+0x34>)
 801dec8:	4299      	cmp	r1, r3
 801deca:	b510      	push	{r4, lr}
 801decc:	4604      	mov	r4, r0
 801dece:	d001      	beq.n	801ded4 <cleanup_stdio+0x10>
 801ded0:	f001 fe22 	bl	801fb18 <_fflush_r>
 801ded4:	68a1      	ldr	r1, [r4, #8]
 801ded6:	4b09      	ldr	r3, [pc, #36]	@ (801defc <cleanup_stdio+0x38>)
 801ded8:	4299      	cmp	r1, r3
 801deda:	d002      	beq.n	801dee2 <cleanup_stdio+0x1e>
 801dedc:	4620      	mov	r0, r4
 801dede:	f001 fe1b 	bl	801fb18 <_fflush_r>
 801dee2:	68e1      	ldr	r1, [r4, #12]
 801dee4:	4b06      	ldr	r3, [pc, #24]	@ (801df00 <cleanup_stdio+0x3c>)
 801dee6:	4299      	cmp	r1, r3
 801dee8:	d004      	beq.n	801def4 <cleanup_stdio+0x30>
 801deea:	4620      	mov	r0, r4
 801deec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801def0:	f001 be12 	b.w	801fb18 <_fflush_r>
 801def4:	bd10      	pop	{r4, pc}
 801def6:	bf00      	nop
 801def8:	20002518 	.word	0x20002518
 801defc:	20002580 	.word	0x20002580
 801df00:	200025e8 	.word	0x200025e8

0801df04 <global_stdio_init.part.0>:
 801df04:	b510      	push	{r4, lr}
 801df06:	4b0b      	ldr	r3, [pc, #44]	@ (801df34 <global_stdio_init.part.0+0x30>)
 801df08:	4c0b      	ldr	r4, [pc, #44]	@ (801df38 <global_stdio_init.part.0+0x34>)
 801df0a:	4a0c      	ldr	r2, [pc, #48]	@ (801df3c <global_stdio_init.part.0+0x38>)
 801df0c:	601a      	str	r2, [r3, #0]
 801df0e:	4620      	mov	r0, r4
 801df10:	2200      	movs	r2, #0
 801df12:	2104      	movs	r1, #4
 801df14:	f7ff ff94 	bl	801de40 <std>
 801df18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801df1c:	2201      	movs	r2, #1
 801df1e:	2109      	movs	r1, #9
 801df20:	f7ff ff8e 	bl	801de40 <std>
 801df24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801df28:	2202      	movs	r2, #2
 801df2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df2e:	2112      	movs	r1, #18
 801df30:	f7ff bf86 	b.w	801de40 <std>
 801df34:	20002650 	.word	0x20002650
 801df38:	20002518 	.word	0x20002518
 801df3c:	0801dead 	.word	0x0801dead

0801df40 <__sfp_lock_acquire>:
 801df40:	4801      	ldr	r0, [pc, #4]	@ (801df48 <__sfp_lock_acquire+0x8>)
 801df42:	f000 b93c 	b.w	801e1be <__retarget_lock_acquire_recursive>
 801df46:	bf00      	nop
 801df48:	20002659 	.word	0x20002659

0801df4c <__sfp_lock_release>:
 801df4c:	4801      	ldr	r0, [pc, #4]	@ (801df54 <__sfp_lock_release+0x8>)
 801df4e:	f000 b937 	b.w	801e1c0 <__retarget_lock_release_recursive>
 801df52:	bf00      	nop
 801df54:	20002659 	.word	0x20002659

0801df58 <__sinit>:
 801df58:	b510      	push	{r4, lr}
 801df5a:	4604      	mov	r4, r0
 801df5c:	f7ff fff0 	bl	801df40 <__sfp_lock_acquire>
 801df60:	6a23      	ldr	r3, [r4, #32]
 801df62:	b11b      	cbz	r3, 801df6c <__sinit+0x14>
 801df64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df68:	f7ff bff0 	b.w	801df4c <__sfp_lock_release>
 801df6c:	4b04      	ldr	r3, [pc, #16]	@ (801df80 <__sinit+0x28>)
 801df6e:	6223      	str	r3, [r4, #32]
 801df70:	4b04      	ldr	r3, [pc, #16]	@ (801df84 <__sinit+0x2c>)
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	2b00      	cmp	r3, #0
 801df76:	d1f5      	bne.n	801df64 <__sinit+0xc>
 801df78:	f7ff ffc4 	bl	801df04 <global_stdio_init.part.0>
 801df7c:	e7f2      	b.n	801df64 <__sinit+0xc>
 801df7e:	bf00      	nop
 801df80:	0801dec5 	.word	0x0801dec5
 801df84:	20002650 	.word	0x20002650

0801df88 <_fwalk_sglue>:
 801df88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df8c:	4607      	mov	r7, r0
 801df8e:	4688      	mov	r8, r1
 801df90:	4614      	mov	r4, r2
 801df92:	2600      	movs	r6, #0
 801df94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801df98:	f1b9 0901 	subs.w	r9, r9, #1
 801df9c:	d505      	bpl.n	801dfaa <_fwalk_sglue+0x22>
 801df9e:	6824      	ldr	r4, [r4, #0]
 801dfa0:	2c00      	cmp	r4, #0
 801dfa2:	d1f7      	bne.n	801df94 <_fwalk_sglue+0xc>
 801dfa4:	4630      	mov	r0, r6
 801dfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dfaa:	89ab      	ldrh	r3, [r5, #12]
 801dfac:	2b01      	cmp	r3, #1
 801dfae:	d907      	bls.n	801dfc0 <_fwalk_sglue+0x38>
 801dfb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dfb4:	3301      	adds	r3, #1
 801dfb6:	d003      	beq.n	801dfc0 <_fwalk_sglue+0x38>
 801dfb8:	4629      	mov	r1, r5
 801dfba:	4638      	mov	r0, r7
 801dfbc:	47c0      	blx	r8
 801dfbe:	4306      	orrs	r6, r0
 801dfc0:	3568      	adds	r5, #104	@ 0x68
 801dfc2:	e7e9      	b.n	801df98 <_fwalk_sglue+0x10>

0801dfc4 <__sread>:
 801dfc4:	b510      	push	{r4, lr}
 801dfc6:	460c      	mov	r4, r1
 801dfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfcc:	f000 f8a8 	bl	801e120 <_read_r>
 801dfd0:	2800      	cmp	r0, #0
 801dfd2:	bfab      	itete	ge
 801dfd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801dfd6:	89a3      	ldrhlt	r3, [r4, #12]
 801dfd8:	181b      	addge	r3, r3, r0
 801dfda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801dfde:	bfac      	ite	ge
 801dfe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801dfe2:	81a3      	strhlt	r3, [r4, #12]
 801dfe4:	bd10      	pop	{r4, pc}

0801dfe6 <__swrite>:
 801dfe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfea:	461f      	mov	r7, r3
 801dfec:	898b      	ldrh	r3, [r1, #12]
 801dfee:	05db      	lsls	r3, r3, #23
 801dff0:	4605      	mov	r5, r0
 801dff2:	460c      	mov	r4, r1
 801dff4:	4616      	mov	r6, r2
 801dff6:	d505      	bpl.n	801e004 <__swrite+0x1e>
 801dff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dffc:	2302      	movs	r3, #2
 801dffe:	2200      	movs	r2, #0
 801e000:	f000 f87c 	bl	801e0fc <_lseek_r>
 801e004:	89a3      	ldrh	r3, [r4, #12]
 801e006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e00a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e00e:	81a3      	strh	r3, [r4, #12]
 801e010:	4632      	mov	r2, r6
 801e012:	463b      	mov	r3, r7
 801e014:	4628      	mov	r0, r5
 801e016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e01a:	f000 b893 	b.w	801e144 <_write_r>

0801e01e <__sseek>:
 801e01e:	b510      	push	{r4, lr}
 801e020:	460c      	mov	r4, r1
 801e022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e026:	f000 f869 	bl	801e0fc <_lseek_r>
 801e02a:	1c43      	adds	r3, r0, #1
 801e02c:	89a3      	ldrh	r3, [r4, #12]
 801e02e:	bf15      	itete	ne
 801e030:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e03a:	81a3      	strheq	r3, [r4, #12]
 801e03c:	bf18      	it	ne
 801e03e:	81a3      	strhne	r3, [r4, #12]
 801e040:	bd10      	pop	{r4, pc}

0801e042 <__sclose>:
 801e042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e046:	f000 b849 	b.w	801e0dc <_close_r>

0801e04a <_vsniprintf_r>:
 801e04a:	b530      	push	{r4, r5, lr}
 801e04c:	4614      	mov	r4, r2
 801e04e:	2c00      	cmp	r4, #0
 801e050:	b09b      	sub	sp, #108	@ 0x6c
 801e052:	4605      	mov	r5, r0
 801e054:	461a      	mov	r2, r3
 801e056:	da05      	bge.n	801e064 <_vsniprintf_r+0x1a>
 801e058:	238b      	movs	r3, #139	@ 0x8b
 801e05a:	6003      	str	r3, [r0, #0]
 801e05c:	f04f 30ff 	mov.w	r0, #4294967295
 801e060:	b01b      	add	sp, #108	@ 0x6c
 801e062:	bd30      	pop	{r4, r5, pc}
 801e064:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801e068:	f8ad 300c 	strh.w	r3, [sp, #12]
 801e06c:	f04f 0300 	mov.w	r3, #0
 801e070:	9319      	str	r3, [sp, #100]	@ 0x64
 801e072:	bf14      	ite	ne
 801e074:	f104 33ff 	addne.w	r3, r4, #4294967295
 801e078:	4623      	moveq	r3, r4
 801e07a:	9302      	str	r3, [sp, #8]
 801e07c:	9305      	str	r3, [sp, #20]
 801e07e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e082:	9100      	str	r1, [sp, #0]
 801e084:	9104      	str	r1, [sp, #16]
 801e086:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e08a:	4669      	mov	r1, sp
 801e08c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801e08e:	f001 fbc7 	bl	801f820 <_svfiprintf_r>
 801e092:	1c43      	adds	r3, r0, #1
 801e094:	bfbc      	itt	lt
 801e096:	238b      	movlt	r3, #139	@ 0x8b
 801e098:	602b      	strlt	r3, [r5, #0]
 801e09a:	2c00      	cmp	r4, #0
 801e09c:	d0e0      	beq.n	801e060 <_vsniprintf_r+0x16>
 801e09e:	9b00      	ldr	r3, [sp, #0]
 801e0a0:	2200      	movs	r2, #0
 801e0a2:	701a      	strb	r2, [r3, #0]
 801e0a4:	e7dc      	b.n	801e060 <_vsniprintf_r+0x16>
	...

0801e0a8 <vsniprintf>:
 801e0a8:	b507      	push	{r0, r1, r2, lr}
 801e0aa:	9300      	str	r3, [sp, #0]
 801e0ac:	4613      	mov	r3, r2
 801e0ae:	460a      	mov	r2, r1
 801e0b0:	4601      	mov	r1, r0
 801e0b2:	4803      	ldr	r0, [pc, #12]	@ (801e0c0 <vsniprintf+0x18>)
 801e0b4:	6800      	ldr	r0, [r0, #0]
 801e0b6:	f7ff ffc8 	bl	801e04a <_vsniprintf_r>
 801e0ba:	b003      	add	sp, #12
 801e0bc:	f85d fb04 	ldr.w	pc, [sp], #4
 801e0c0:	2000014c 	.word	0x2000014c

0801e0c4 <memset>:
 801e0c4:	4402      	add	r2, r0
 801e0c6:	4603      	mov	r3, r0
 801e0c8:	4293      	cmp	r3, r2
 801e0ca:	d100      	bne.n	801e0ce <memset+0xa>
 801e0cc:	4770      	bx	lr
 801e0ce:	f803 1b01 	strb.w	r1, [r3], #1
 801e0d2:	e7f9      	b.n	801e0c8 <memset+0x4>

0801e0d4 <_localeconv_r>:
 801e0d4:	4800      	ldr	r0, [pc, #0]	@ (801e0d8 <_localeconv_r+0x4>)
 801e0d6:	4770      	bx	lr
 801e0d8:	2000028c 	.word	0x2000028c

0801e0dc <_close_r>:
 801e0dc:	b538      	push	{r3, r4, r5, lr}
 801e0de:	4d06      	ldr	r5, [pc, #24]	@ (801e0f8 <_close_r+0x1c>)
 801e0e0:	2300      	movs	r3, #0
 801e0e2:	4604      	mov	r4, r0
 801e0e4:	4608      	mov	r0, r1
 801e0e6:	602b      	str	r3, [r5, #0]
 801e0e8:	f7e4 fd3e 	bl	8002b68 <_close>
 801e0ec:	1c43      	adds	r3, r0, #1
 801e0ee:	d102      	bne.n	801e0f6 <_close_r+0x1a>
 801e0f0:	682b      	ldr	r3, [r5, #0]
 801e0f2:	b103      	cbz	r3, 801e0f6 <_close_r+0x1a>
 801e0f4:	6023      	str	r3, [r4, #0]
 801e0f6:	bd38      	pop	{r3, r4, r5, pc}
 801e0f8:	20002654 	.word	0x20002654

0801e0fc <_lseek_r>:
 801e0fc:	b538      	push	{r3, r4, r5, lr}
 801e0fe:	4d07      	ldr	r5, [pc, #28]	@ (801e11c <_lseek_r+0x20>)
 801e100:	4604      	mov	r4, r0
 801e102:	4608      	mov	r0, r1
 801e104:	4611      	mov	r1, r2
 801e106:	2200      	movs	r2, #0
 801e108:	602a      	str	r2, [r5, #0]
 801e10a:	461a      	mov	r2, r3
 801e10c:	f7e4 fd50 	bl	8002bb0 <_lseek>
 801e110:	1c43      	adds	r3, r0, #1
 801e112:	d102      	bne.n	801e11a <_lseek_r+0x1e>
 801e114:	682b      	ldr	r3, [r5, #0]
 801e116:	b103      	cbz	r3, 801e11a <_lseek_r+0x1e>
 801e118:	6023      	str	r3, [r4, #0]
 801e11a:	bd38      	pop	{r3, r4, r5, pc}
 801e11c:	20002654 	.word	0x20002654

0801e120 <_read_r>:
 801e120:	b538      	push	{r3, r4, r5, lr}
 801e122:	4d07      	ldr	r5, [pc, #28]	@ (801e140 <_read_r+0x20>)
 801e124:	4604      	mov	r4, r0
 801e126:	4608      	mov	r0, r1
 801e128:	4611      	mov	r1, r2
 801e12a:	2200      	movs	r2, #0
 801e12c:	602a      	str	r2, [r5, #0]
 801e12e:	461a      	mov	r2, r3
 801e130:	f7e4 fce1 	bl	8002af6 <_read>
 801e134:	1c43      	adds	r3, r0, #1
 801e136:	d102      	bne.n	801e13e <_read_r+0x1e>
 801e138:	682b      	ldr	r3, [r5, #0]
 801e13a:	b103      	cbz	r3, 801e13e <_read_r+0x1e>
 801e13c:	6023      	str	r3, [r4, #0]
 801e13e:	bd38      	pop	{r3, r4, r5, pc}
 801e140:	20002654 	.word	0x20002654

0801e144 <_write_r>:
 801e144:	b538      	push	{r3, r4, r5, lr}
 801e146:	4d07      	ldr	r5, [pc, #28]	@ (801e164 <_write_r+0x20>)
 801e148:	4604      	mov	r4, r0
 801e14a:	4608      	mov	r0, r1
 801e14c:	4611      	mov	r1, r2
 801e14e:	2200      	movs	r2, #0
 801e150:	602a      	str	r2, [r5, #0]
 801e152:	461a      	mov	r2, r3
 801e154:	f7e4 fcec 	bl	8002b30 <_write>
 801e158:	1c43      	adds	r3, r0, #1
 801e15a:	d102      	bne.n	801e162 <_write_r+0x1e>
 801e15c:	682b      	ldr	r3, [r5, #0]
 801e15e:	b103      	cbz	r3, 801e162 <_write_r+0x1e>
 801e160:	6023      	str	r3, [r4, #0]
 801e162:	bd38      	pop	{r3, r4, r5, pc}
 801e164:	20002654 	.word	0x20002654

0801e168 <__errno>:
 801e168:	4b01      	ldr	r3, [pc, #4]	@ (801e170 <__errno+0x8>)
 801e16a:	6818      	ldr	r0, [r3, #0]
 801e16c:	4770      	bx	lr
 801e16e:	bf00      	nop
 801e170:	2000014c 	.word	0x2000014c

0801e174 <__libc_init_array>:
 801e174:	b570      	push	{r4, r5, r6, lr}
 801e176:	4d0d      	ldr	r5, [pc, #52]	@ (801e1ac <__libc_init_array+0x38>)
 801e178:	4c0d      	ldr	r4, [pc, #52]	@ (801e1b0 <__libc_init_array+0x3c>)
 801e17a:	1b64      	subs	r4, r4, r5
 801e17c:	10a4      	asrs	r4, r4, #2
 801e17e:	2600      	movs	r6, #0
 801e180:	42a6      	cmp	r6, r4
 801e182:	d109      	bne.n	801e198 <__libc_init_array+0x24>
 801e184:	4d0b      	ldr	r5, [pc, #44]	@ (801e1b4 <__libc_init_array+0x40>)
 801e186:	4c0c      	ldr	r4, [pc, #48]	@ (801e1b8 <__libc_init_array+0x44>)
 801e188:	f002 fb48 	bl	802081c <_init>
 801e18c:	1b64      	subs	r4, r4, r5
 801e18e:	10a4      	asrs	r4, r4, #2
 801e190:	2600      	movs	r6, #0
 801e192:	42a6      	cmp	r6, r4
 801e194:	d105      	bne.n	801e1a2 <__libc_init_array+0x2e>
 801e196:	bd70      	pop	{r4, r5, r6, pc}
 801e198:	f855 3b04 	ldr.w	r3, [r5], #4
 801e19c:	4798      	blx	r3
 801e19e:	3601      	adds	r6, #1
 801e1a0:	e7ee      	b.n	801e180 <__libc_init_array+0xc>
 801e1a2:	f855 3b04 	ldr.w	r3, [r5], #4
 801e1a6:	4798      	blx	r3
 801e1a8:	3601      	adds	r6, #1
 801e1aa:	e7f2      	b.n	801e192 <__libc_init_array+0x1e>
 801e1ac:	08021bc4 	.word	0x08021bc4
 801e1b0:	08021bc4 	.word	0x08021bc4
 801e1b4:	08021bc4 	.word	0x08021bc4
 801e1b8:	08021bc8 	.word	0x08021bc8

0801e1bc <__retarget_lock_init_recursive>:
 801e1bc:	4770      	bx	lr

0801e1be <__retarget_lock_acquire_recursive>:
 801e1be:	4770      	bx	lr

0801e1c0 <__retarget_lock_release_recursive>:
 801e1c0:	4770      	bx	lr

0801e1c2 <quorem>:
 801e1c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1c6:	6903      	ldr	r3, [r0, #16]
 801e1c8:	690c      	ldr	r4, [r1, #16]
 801e1ca:	42a3      	cmp	r3, r4
 801e1cc:	4607      	mov	r7, r0
 801e1ce:	db7e      	blt.n	801e2ce <quorem+0x10c>
 801e1d0:	3c01      	subs	r4, #1
 801e1d2:	f101 0814 	add.w	r8, r1, #20
 801e1d6:	00a3      	lsls	r3, r4, #2
 801e1d8:	f100 0514 	add.w	r5, r0, #20
 801e1dc:	9300      	str	r3, [sp, #0]
 801e1de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e1e2:	9301      	str	r3, [sp, #4]
 801e1e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e1e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e1ec:	3301      	adds	r3, #1
 801e1ee:	429a      	cmp	r2, r3
 801e1f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e1f4:	fbb2 f6f3 	udiv	r6, r2, r3
 801e1f8:	d32e      	bcc.n	801e258 <quorem+0x96>
 801e1fa:	f04f 0a00 	mov.w	sl, #0
 801e1fe:	46c4      	mov	ip, r8
 801e200:	46ae      	mov	lr, r5
 801e202:	46d3      	mov	fp, sl
 801e204:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e208:	b298      	uxth	r0, r3
 801e20a:	fb06 a000 	mla	r0, r6, r0, sl
 801e20e:	0c02      	lsrs	r2, r0, #16
 801e210:	0c1b      	lsrs	r3, r3, #16
 801e212:	fb06 2303 	mla	r3, r6, r3, r2
 801e216:	f8de 2000 	ldr.w	r2, [lr]
 801e21a:	b280      	uxth	r0, r0
 801e21c:	b292      	uxth	r2, r2
 801e21e:	1a12      	subs	r2, r2, r0
 801e220:	445a      	add	r2, fp
 801e222:	f8de 0000 	ldr.w	r0, [lr]
 801e226:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e22a:	b29b      	uxth	r3, r3
 801e22c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801e230:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801e234:	b292      	uxth	r2, r2
 801e236:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801e23a:	45e1      	cmp	r9, ip
 801e23c:	f84e 2b04 	str.w	r2, [lr], #4
 801e240:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801e244:	d2de      	bcs.n	801e204 <quorem+0x42>
 801e246:	9b00      	ldr	r3, [sp, #0]
 801e248:	58eb      	ldr	r3, [r5, r3]
 801e24a:	b92b      	cbnz	r3, 801e258 <quorem+0x96>
 801e24c:	9b01      	ldr	r3, [sp, #4]
 801e24e:	3b04      	subs	r3, #4
 801e250:	429d      	cmp	r5, r3
 801e252:	461a      	mov	r2, r3
 801e254:	d32f      	bcc.n	801e2b6 <quorem+0xf4>
 801e256:	613c      	str	r4, [r7, #16]
 801e258:	4638      	mov	r0, r7
 801e25a:	f001 f97f 	bl	801f55c <__mcmp>
 801e25e:	2800      	cmp	r0, #0
 801e260:	db25      	blt.n	801e2ae <quorem+0xec>
 801e262:	4629      	mov	r1, r5
 801e264:	2000      	movs	r0, #0
 801e266:	f858 2b04 	ldr.w	r2, [r8], #4
 801e26a:	f8d1 c000 	ldr.w	ip, [r1]
 801e26e:	fa1f fe82 	uxth.w	lr, r2
 801e272:	fa1f f38c 	uxth.w	r3, ip
 801e276:	eba3 030e 	sub.w	r3, r3, lr
 801e27a:	4403      	add	r3, r0
 801e27c:	0c12      	lsrs	r2, r2, #16
 801e27e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801e282:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801e286:	b29b      	uxth	r3, r3
 801e288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e28c:	45c1      	cmp	r9, r8
 801e28e:	f841 3b04 	str.w	r3, [r1], #4
 801e292:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e296:	d2e6      	bcs.n	801e266 <quorem+0xa4>
 801e298:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e29c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e2a0:	b922      	cbnz	r2, 801e2ac <quorem+0xea>
 801e2a2:	3b04      	subs	r3, #4
 801e2a4:	429d      	cmp	r5, r3
 801e2a6:	461a      	mov	r2, r3
 801e2a8:	d30b      	bcc.n	801e2c2 <quorem+0x100>
 801e2aa:	613c      	str	r4, [r7, #16]
 801e2ac:	3601      	adds	r6, #1
 801e2ae:	4630      	mov	r0, r6
 801e2b0:	b003      	add	sp, #12
 801e2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2b6:	6812      	ldr	r2, [r2, #0]
 801e2b8:	3b04      	subs	r3, #4
 801e2ba:	2a00      	cmp	r2, #0
 801e2bc:	d1cb      	bne.n	801e256 <quorem+0x94>
 801e2be:	3c01      	subs	r4, #1
 801e2c0:	e7c6      	b.n	801e250 <quorem+0x8e>
 801e2c2:	6812      	ldr	r2, [r2, #0]
 801e2c4:	3b04      	subs	r3, #4
 801e2c6:	2a00      	cmp	r2, #0
 801e2c8:	d1ef      	bne.n	801e2aa <quorem+0xe8>
 801e2ca:	3c01      	subs	r4, #1
 801e2cc:	e7ea      	b.n	801e2a4 <quorem+0xe2>
 801e2ce:	2000      	movs	r0, #0
 801e2d0:	e7ee      	b.n	801e2b0 <quorem+0xee>
 801e2d2:	0000      	movs	r0, r0
 801e2d4:	0000      	movs	r0, r0
	...

0801e2d8 <_dtoa_r>:
 801e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2dc:	69c7      	ldr	r7, [r0, #28]
 801e2de:	b097      	sub	sp, #92	@ 0x5c
 801e2e0:	4614      	mov	r4, r2
 801e2e2:	461d      	mov	r5, r3
 801e2e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801e2e8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801e2ea:	4681      	mov	r9, r0
 801e2ec:	b97f      	cbnz	r7, 801e30e <_dtoa_r+0x36>
 801e2ee:	2010      	movs	r0, #16
 801e2f0:	f000 fe0c 	bl	801ef0c <malloc>
 801e2f4:	4602      	mov	r2, r0
 801e2f6:	f8c9 001c 	str.w	r0, [r9, #28]
 801e2fa:	b920      	cbnz	r0, 801e306 <_dtoa_r+0x2e>
 801e2fc:	4baa      	ldr	r3, [pc, #680]	@ (801e5a8 <_dtoa_r+0x2d0>)
 801e2fe:	21ef      	movs	r1, #239	@ 0xef
 801e300:	48aa      	ldr	r0, [pc, #680]	@ (801e5ac <_dtoa_r+0x2d4>)
 801e302:	f001 fc69 	bl	801fbd8 <__assert_func>
 801e306:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801e30a:	6007      	str	r7, [r0, #0]
 801e30c:	60c7      	str	r7, [r0, #12]
 801e30e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801e312:	6819      	ldr	r1, [r3, #0]
 801e314:	b159      	cbz	r1, 801e32e <_dtoa_r+0x56>
 801e316:	685a      	ldr	r2, [r3, #4]
 801e318:	604a      	str	r2, [r1, #4]
 801e31a:	2301      	movs	r3, #1
 801e31c:	4093      	lsls	r3, r2
 801e31e:	608b      	str	r3, [r1, #8]
 801e320:	4648      	mov	r0, r9
 801e322:	f000 fee9 	bl	801f0f8 <_Bfree>
 801e326:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801e32a:	2200      	movs	r2, #0
 801e32c:	601a      	str	r2, [r3, #0]
 801e32e:	1e2b      	subs	r3, r5, #0
 801e330:	bfb9      	ittee	lt
 801e332:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801e336:	9307      	strlt	r3, [sp, #28]
 801e338:	2300      	movge	r3, #0
 801e33a:	6033      	strge	r3, [r6, #0]
 801e33c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801e340:	4b9b      	ldr	r3, [pc, #620]	@ (801e5b0 <_dtoa_r+0x2d8>)
 801e342:	bfbc      	itt	lt
 801e344:	2201      	movlt	r2, #1
 801e346:	6032      	strlt	r2, [r6, #0]
 801e348:	ea33 0308 	bics.w	r3, r3, r8
 801e34c:	d112      	bne.n	801e374 <_dtoa_r+0x9c>
 801e34e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801e350:	f242 730f 	movw	r3, #9999	@ 0x270f
 801e354:	6013      	str	r3, [r2, #0]
 801e356:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801e35a:	4323      	orrs	r3, r4
 801e35c:	f000 855b 	beq.w	801ee16 <_dtoa_r+0xb3e>
 801e360:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e362:	f8df a250 	ldr.w	sl, [pc, #592]	@ 801e5b4 <_dtoa_r+0x2dc>
 801e366:	2b00      	cmp	r3, #0
 801e368:	f000 855d 	beq.w	801ee26 <_dtoa_r+0xb4e>
 801e36c:	f10a 0303 	add.w	r3, sl, #3
 801e370:	f000 bd57 	b.w	801ee22 <_dtoa_r+0xb4a>
 801e374:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e378:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801e37c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e380:	2200      	movs	r2, #0
 801e382:	2300      	movs	r3, #0
 801e384:	f7e2 fb78 	bl	8000a78 <__aeabi_dcmpeq>
 801e388:	4607      	mov	r7, r0
 801e38a:	b158      	cbz	r0, 801e3a4 <_dtoa_r+0xcc>
 801e38c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801e38e:	2301      	movs	r3, #1
 801e390:	6013      	str	r3, [r2, #0]
 801e392:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e394:	b113      	cbz	r3, 801e39c <_dtoa_r+0xc4>
 801e396:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801e398:	4b87      	ldr	r3, [pc, #540]	@ (801e5b8 <_dtoa_r+0x2e0>)
 801e39a:	6013      	str	r3, [r2, #0]
 801e39c:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801e5bc <_dtoa_r+0x2e4>
 801e3a0:	f000 bd41 	b.w	801ee26 <_dtoa_r+0xb4e>
 801e3a4:	ab14      	add	r3, sp, #80	@ 0x50
 801e3a6:	9301      	str	r3, [sp, #4]
 801e3a8:	ab15      	add	r3, sp, #84	@ 0x54
 801e3aa:	9300      	str	r3, [sp, #0]
 801e3ac:	4648      	mov	r0, r9
 801e3ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801e3b2:	f001 f981 	bl	801f6b8 <__d2b>
 801e3b6:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801e3ba:	9003      	str	r0, [sp, #12]
 801e3bc:	2e00      	cmp	r6, #0
 801e3be:	d077      	beq.n	801e4b0 <_dtoa_r+0x1d8>
 801e3c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3c2:	9712      	str	r7, [sp, #72]	@ 0x48
 801e3c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e3c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e3cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801e3d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801e3d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801e3d8:	4619      	mov	r1, r3
 801e3da:	2200      	movs	r2, #0
 801e3dc:	4b78      	ldr	r3, [pc, #480]	@ (801e5c0 <_dtoa_r+0x2e8>)
 801e3de:	f7e1 ff2b 	bl	8000238 <__aeabi_dsub>
 801e3e2:	a36b      	add	r3, pc, #428	@ (adr r3, 801e590 <_dtoa_r+0x2b8>)
 801e3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3e8:	f7e2 f8de 	bl	80005a8 <__aeabi_dmul>
 801e3ec:	a36a      	add	r3, pc, #424	@ (adr r3, 801e598 <_dtoa_r+0x2c0>)
 801e3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3f2:	f7e1 ff23 	bl	800023c <__adddf3>
 801e3f6:	4604      	mov	r4, r0
 801e3f8:	4630      	mov	r0, r6
 801e3fa:	460d      	mov	r5, r1
 801e3fc:	f7e2 f86a 	bl	80004d4 <__aeabi_i2d>
 801e400:	a367      	add	r3, pc, #412	@ (adr r3, 801e5a0 <_dtoa_r+0x2c8>)
 801e402:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e406:	f7e2 f8cf 	bl	80005a8 <__aeabi_dmul>
 801e40a:	4602      	mov	r2, r0
 801e40c:	460b      	mov	r3, r1
 801e40e:	4620      	mov	r0, r4
 801e410:	4629      	mov	r1, r5
 801e412:	f7e1 ff13 	bl	800023c <__adddf3>
 801e416:	4604      	mov	r4, r0
 801e418:	460d      	mov	r5, r1
 801e41a:	f7e2 fb75 	bl	8000b08 <__aeabi_d2iz>
 801e41e:	2200      	movs	r2, #0
 801e420:	4607      	mov	r7, r0
 801e422:	2300      	movs	r3, #0
 801e424:	4620      	mov	r0, r4
 801e426:	4629      	mov	r1, r5
 801e428:	f7e2 fb30 	bl	8000a8c <__aeabi_dcmplt>
 801e42c:	b140      	cbz	r0, 801e440 <_dtoa_r+0x168>
 801e42e:	4638      	mov	r0, r7
 801e430:	f7e2 f850 	bl	80004d4 <__aeabi_i2d>
 801e434:	4622      	mov	r2, r4
 801e436:	462b      	mov	r3, r5
 801e438:	f7e2 fb1e 	bl	8000a78 <__aeabi_dcmpeq>
 801e43c:	b900      	cbnz	r0, 801e440 <_dtoa_r+0x168>
 801e43e:	3f01      	subs	r7, #1
 801e440:	2f16      	cmp	r7, #22
 801e442:	d853      	bhi.n	801e4ec <_dtoa_r+0x214>
 801e444:	4b5f      	ldr	r3, [pc, #380]	@ (801e5c4 <_dtoa_r+0x2ec>)
 801e446:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e44e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e452:	f7e2 fb1b 	bl	8000a8c <__aeabi_dcmplt>
 801e456:	2800      	cmp	r0, #0
 801e458:	d04a      	beq.n	801e4f0 <_dtoa_r+0x218>
 801e45a:	3f01      	subs	r7, #1
 801e45c:	2300      	movs	r3, #0
 801e45e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e460:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e462:	1b9b      	subs	r3, r3, r6
 801e464:	1e5a      	subs	r2, r3, #1
 801e466:	bf45      	ittet	mi
 801e468:	f1c3 0301 	rsbmi	r3, r3, #1
 801e46c:	9304      	strmi	r3, [sp, #16]
 801e46e:	2300      	movpl	r3, #0
 801e470:	2300      	movmi	r3, #0
 801e472:	9209      	str	r2, [sp, #36]	@ 0x24
 801e474:	bf54      	ite	pl
 801e476:	9304      	strpl	r3, [sp, #16]
 801e478:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801e47a:	2f00      	cmp	r7, #0
 801e47c:	db3a      	blt.n	801e4f4 <_dtoa_r+0x21c>
 801e47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e480:	970e      	str	r7, [sp, #56]	@ 0x38
 801e482:	443b      	add	r3, r7
 801e484:	9309      	str	r3, [sp, #36]	@ 0x24
 801e486:	2300      	movs	r3, #0
 801e488:	930a      	str	r3, [sp, #40]	@ 0x28
 801e48a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e48c:	2b09      	cmp	r3, #9
 801e48e:	d864      	bhi.n	801e55a <_dtoa_r+0x282>
 801e490:	2b05      	cmp	r3, #5
 801e492:	bfc4      	itt	gt
 801e494:	3b04      	subgt	r3, #4
 801e496:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801e498:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e49a:	f1a3 0302 	sub.w	r3, r3, #2
 801e49e:	bfcc      	ite	gt
 801e4a0:	2400      	movgt	r4, #0
 801e4a2:	2401      	movle	r4, #1
 801e4a4:	2b03      	cmp	r3, #3
 801e4a6:	d864      	bhi.n	801e572 <_dtoa_r+0x29a>
 801e4a8:	e8df f003 	tbb	[pc, r3]
 801e4ac:	2c385553 	.word	0x2c385553
 801e4b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801e4b4:	441e      	add	r6, r3
 801e4b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801e4ba:	2b20      	cmp	r3, #32
 801e4bc:	bfc1      	itttt	gt
 801e4be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801e4c2:	fa08 f803 	lslgt.w	r8, r8, r3
 801e4c6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801e4ca:	fa24 f303 	lsrgt.w	r3, r4, r3
 801e4ce:	bfd6      	itet	le
 801e4d0:	f1c3 0320 	rsble	r3, r3, #32
 801e4d4:	ea48 0003 	orrgt.w	r0, r8, r3
 801e4d8:	fa04 f003 	lslle.w	r0, r4, r3
 801e4dc:	f7e1 ffea 	bl	80004b4 <__aeabi_ui2d>
 801e4e0:	2201      	movs	r2, #1
 801e4e2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801e4e6:	3e01      	subs	r6, #1
 801e4e8:	9212      	str	r2, [sp, #72]	@ 0x48
 801e4ea:	e775      	b.n	801e3d8 <_dtoa_r+0x100>
 801e4ec:	2301      	movs	r3, #1
 801e4ee:	e7b6      	b.n	801e45e <_dtoa_r+0x186>
 801e4f0:	900f      	str	r0, [sp, #60]	@ 0x3c
 801e4f2:	e7b5      	b.n	801e460 <_dtoa_r+0x188>
 801e4f4:	9b04      	ldr	r3, [sp, #16]
 801e4f6:	1bdb      	subs	r3, r3, r7
 801e4f8:	9304      	str	r3, [sp, #16]
 801e4fa:	427b      	negs	r3, r7
 801e4fc:	930a      	str	r3, [sp, #40]	@ 0x28
 801e4fe:	2300      	movs	r3, #0
 801e500:	930e      	str	r3, [sp, #56]	@ 0x38
 801e502:	e7c2      	b.n	801e48a <_dtoa_r+0x1b2>
 801e504:	2301      	movs	r3, #1
 801e506:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e508:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e50a:	eb07 0b03 	add.w	fp, r7, r3
 801e50e:	f10b 0301 	add.w	r3, fp, #1
 801e512:	2b01      	cmp	r3, #1
 801e514:	9308      	str	r3, [sp, #32]
 801e516:	bfb8      	it	lt
 801e518:	2301      	movlt	r3, #1
 801e51a:	e006      	b.n	801e52a <_dtoa_r+0x252>
 801e51c:	2301      	movs	r3, #1
 801e51e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e520:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e522:	2b00      	cmp	r3, #0
 801e524:	dd28      	ble.n	801e578 <_dtoa_r+0x2a0>
 801e526:	469b      	mov	fp, r3
 801e528:	9308      	str	r3, [sp, #32]
 801e52a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801e52e:	2100      	movs	r1, #0
 801e530:	2204      	movs	r2, #4
 801e532:	f102 0514 	add.w	r5, r2, #20
 801e536:	429d      	cmp	r5, r3
 801e538:	d926      	bls.n	801e588 <_dtoa_r+0x2b0>
 801e53a:	6041      	str	r1, [r0, #4]
 801e53c:	4648      	mov	r0, r9
 801e53e:	f000 fd9b 	bl	801f078 <_Balloc>
 801e542:	4682      	mov	sl, r0
 801e544:	2800      	cmp	r0, #0
 801e546:	d141      	bne.n	801e5cc <_dtoa_r+0x2f4>
 801e548:	4b1f      	ldr	r3, [pc, #124]	@ (801e5c8 <_dtoa_r+0x2f0>)
 801e54a:	4602      	mov	r2, r0
 801e54c:	f240 11af 	movw	r1, #431	@ 0x1af
 801e550:	e6d6      	b.n	801e300 <_dtoa_r+0x28>
 801e552:	2300      	movs	r3, #0
 801e554:	e7e3      	b.n	801e51e <_dtoa_r+0x246>
 801e556:	2300      	movs	r3, #0
 801e558:	e7d5      	b.n	801e506 <_dtoa_r+0x22e>
 801e55a:	2401      	movs	r4, #1
 801e55c:	2300      	movs	r3, #0
 801e55e:	9320      	str	r3, [sp, #128]	@ 0x80
 801e560:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e562:	f04f 3bff 	mov.w	fp, #4294967295
 801e566:	2200      	movs	r2, #0
 801e568:	f8cd b020 	str.w	fp, [sp, #32]
 801e56c:	2312      	movs	r3, #18
 801e56e:	9221      	str	r2, [sp, #132]	@ 0x84
 801e570:	e7db      	b.n	801e52a <_dtoa_r+0x252>
 801e572:	2301      	movs	r3, #1
 801e574:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e576:	e7f4      	b.n	801e562 <_dtoa_r+0x28a>
 801e578:	f04f 0b01 	mov.w	fp, #1
 801e57c:	f8cd b020 	str.w	fp, [sp, #32]
 801e580:	465b      	mov	r3, fp
 801e582:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 801e586:	e7d0      	b.n	801e52a <_dtoa_r+0x252>
 801e588:	3101      	adds	r1, #1
 801e58a:	0052      	lsls	r2, r2, #1
 801e58c:	e7d1      	b.n	801e532 <_dtoa_r+0x25a>
 801e58e:	bf00      	nop
 801e590:	636f4361 	.word	0x636f4361
 801e594:	3fd287a7 	.word	0x3fd287a7
 801e598:	8b60c8b3 	.word	0x8b60c8b3
 801e59c:	3fc68a28 	.word	0x3fc68a28
 801e5a0:	509f79fb 	.word	0x509f79fb
 801e5a4:	3fd34413 	.word	0x3fd34413
 801e5a8:	080217b1 	.word	0x080217b1
 801e5ac:	080217c8 	.word	0x080217c8
 801e5b0:	7ff00000 	.word	0x7ff00000
 801e5b4:	080217ad 	.word	0x080217ad
 801e5b8:	08021781 	.word	0x08021781
 801e5bc:	08021780 	.word	0x08021780
 801e5c0:	3ff80000 	.word	0x3ff80000
 801e5c4:	08021918 	.word	0x08021918
 801e5c8:	08021820 	.word	0x08021820
 801e5cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801e5d0:	6018      	str	r0, [r3, #0]
 801e5d2:	9b08      	ldr	r3, [sp, #32]
 801e5d4:	2b0e      	cmp	r3, #14
 801e5d6:	f200 80a1 	bhi.w	801e71c <_dtoa_r+0x444>
 801e5da:	2c00      	cmp	r4, #0
 801e5dc:	f000 809e 	beq.w	801e71c <_dtoa_r+0x444>
 801e5e0:	2f00      	cmp	r7, #0
 801e5e2:	dd33      	ble.n	801e64c <_dtoa_r+0x374>
 801e5e4:	4b9c      	ldr	r3, [pc, #624]	@ (801e858 <_dtoa_r+0x580>)
 801e5e6:	f007 020f 	and.w	r2, r7, #15
 801e5ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e5ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e5f2:	05f8      	lsls	r0, r7, #23
 801e5f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 801e5f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801e5fc:	d516      	bpl.n	801e62c <_dtoa_r+0x354>
 801e5fe:	4b97      	ldr	r3, [pc, #604]	@ (801e85c <_dtoa_r+0x584>)
 801e600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e608:	f7e2 f8f8 	bl	80007fc <__aeabi_ddiv>
 801e60c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e610:	f004 040f 	and.w	r4, r4, #15
 801e614:	2603      	movs	r6, #3
 801e616:	4d91      	ldr	r5, [pc, #580]	@ (801e85c <_dtoa_r+0x584>)
 801e618:	b954      	cbnz	r4, 801e630 <_dtoa_r+0x358>
 801e61a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e61e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e622:	f7e2 f8eb 	bl	80007fc <__aeabi_ddiv>
 801e626:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e62a:	e028      	b.n	801e67e <_dtoa_r+0x3a6>
 801e62c:	2602      	movs	r6, #2
 801e62e:	e7f2      	b.n	801e616 <_dtoa_r+0x33e>
 801e630:	07e1      	lsls	r1, r4, #31
 801e632:	d508      	bpl.n	801e646 <_dtoa_r+0x36e>
 801e634:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e638:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e63c:	f7e1 ffb4 	bl	80005a8 <__aeabi_dmul>
 801e640:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e644:	3601      	adds	r6, #1
 801e646:	1064      	asrs	r4, r4, #1
 801e648:	3508      	adds	r5, #8
 801e64a:	e7e5      	b.n	801e618 <_dtoa_r+0x340>
 801e64c:	f000 80af 	beq.w	801e7ae <_dtoa_r+0x4d6>
 801e650:	427c      	negs	r4, r7
 801e652:	4b81      	ldr	r3, [pc, #516]	@ (801e858 <_dtoa_r+0x580>)
 801e654:	4d81      	ldr	r5, [pc, #516]	@ (801e85c <_dtoa_r+0x584>)
 801e656:	f004 020f 	and.w	r2, r4, #15
 801e65a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e662:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e666:	f7e1 ff9f 	bl	80005a8 <__aeabi_dmul>
 801e66a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e66e:	1124      	asrs	r4, r4, #4
 801e670:	2300      	movs	r3, #0
 801e672:	2602      	movs	r6, #2
 801e674:	2c00      	cmp	r4, #0
 801e676:	f040 808f 	bne.w	801e798 <_dtoa_r+0x4c0>
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	d1d3      	bne.n	801e626 <_dtoa_r+0x34e>
 801e67e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e680:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801e684:	2b00      	cmp	r3, #0
 801e686:	f000 8094 	beq.w	801e7b2 <_dtoa_r+0x4da>
 801e68a:	4b75      	ldr	r3, [pc, #468]	@ (801e860 <_dtoa_r+0x588>)
 801e68c:	2200      	movs	r2, #0
 801e68e:	4620      	mov	r0, r4
 801e690:	4629      	mov	r1, r5
 801e692:	f7e2 f9fb 	bl	8000a8c <__aeabi_dcmplt>
 801e696:	2800      	cmp	r0, #0
 801e698:	f000 808b 	beq.w	801e7b2 <_dtoa_r+0x4da>
 801e69c:	9b08      	ldr	r3, [sp, #32]
 801e69e:	2b00      	cmp	r3, #0
 801e6a0:	f000 8087 	beq.w	801e7b2 <_dtoa_r+0x4da>
 801e6a4:	f1bb 0f00 	cmp.w	fp, #0
 801e6a8:	dd34      	ble.n	801e714 <_dtoa_r+0x43c>
 801e6aa:	4620      	mov	r0, r4
 801e6ac:	4b6d      	ldr	r3, [pc, #436]	@ (801e864 <_dtoa_r+0x58c>)
 801e6ae:	2200      	movs	r2, #0
 801e6b0:	4629      	mov	r1, r5
 801e6b2:	f7e1 ff79 	bl	80005a8 <__aeabi_dmul>
 801e6b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e6ba:	f107 38ff 	add.w	r8, r7, #4294967295
 801e6be:	3601      	adds	r6, #1
 801e6c0:	465c      	mov	r4, fp
 801e6c2:	4630      	mov	r0, r6
 801e6c4:	f7e1 ff06 	bl	80004d4 <__aeabi_i2d>
 801e6c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e6cc:	f7e1 ff6c 	bl	80005a8 <__aeabi_dmul>
 801e6d0:	4b65      	ldr	r3, [pc, #404]	@ (801e868 <_dtoa_r+0x590>)
 801e6d2:	2200      	movs	r2, #0
 801e6d4:	f7e1 fdb2 	bl	800023c <__adddf3>
 801e6d8:	4605      	mov	r5, r0
 801e6da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801e6de:	2c00      	cmp	r4, #0
 801e6e0:	d16a      	bne.n	801e7b8 <_dtoa_r+0x4e0>
 801e6e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e6e6:	4b61      	ldr	r3, [pc, #388]	@ (801e86c <_dtoa_r+0x594>)
 801e6e8:	2200      	movs	r2, #0
 801e6ea:	f7e1 fda5 	bl	8000238 <__aeabi_dsub>
 801e6ee:	4602      	mov	r2, r0
 801e6f0:	460b      	mov	r3, r1
 801e6f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e6f6:	462a      	mov	r2, r5
 801e6f8:	4633      	mov	r3, r6
 801e6fa:	f7e2 f9e5 	bl	8000ac8 <__aeabi_dcmpgt>
 801e6fe:	2800      	cmp	r0, #0
 801e700:	f040 8298 	bne.w	801ec34 <_dtoa_r+0x95c>
 801e704:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e708:	462a      	mov	r2, r5
 801e70a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801e70e:	f7e2 f9bd 	bl	8000a8c <__aeabi_dcmplt>
 801e712:	bb38      	cbnz	r0, 801e764 <_dtoa_r+0x48c>
 801e714:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801e718:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801e71c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e71e:	2b00      	cmp	r3, #0
 801e720:	f2c0 8157 	blt.w	801e9d2 <_dtoa_r+0x6fa>
 801e724:	2f0e      	cmp	r7, #14
 801e726:	f300 8154 	bgt.w	801e9d2 <_dtoa_r+0x6fa>
 801e72a:	4b4b      	ldr	r3, [pc, #300]	@ (801e858 <_dtoa_r+0x580>)
 801e72c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e730:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e734:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801e738:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	f280 80e5 	bge.w	801e90a <_dtoa_r+0x632>
 801e740:	9b08      	ldr	r3, [sp, #32]
 801e742:	2b00      	cmp	r3, #0
 801e744:	f300 80e1 	bgt.w	801e90a <_dtoa_r+0x632>
 801e748:	d10c      	bne.n	801e764 <_dtoa_r+0x48c>
 801e74a:	4b48      	ldr	r3, [pc, #288]	@ (801e86c <_dtoa_r+0x594>)
 801e74c:	2200      	movs	r2, #0
 801e74e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e752:	f7e1 ff29 	bl	80005a8 <__aeabi_dmul>
 801e756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e75a:	f7e2 f9ab 	bl	8000ab4 <__aeabi_dcmpge>
 801e75e:	2800      	cmp	r0, #0
 801e760:	f000 8266 	beq.w	801ec30 <_dtoa_r+0x958>
 801e764:	2400      	movs	r4, #0
 801e766:	4625      	mov	r5, r4
 801e768:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e76a:	4656      	mov	r6, sl
 801e76c:	ea6f 0803 	mvn.w	r8, r3
 801e770:	2700      	movs	r7, #0
 801e772:	4621      	mov	r1, r4
 801e774:	4648      	mov	r0, r9
 801e776:	f000 fcbf 	bl	801f0f8 <_Bfree>
 801e77a:	2d00      	cmp	r5, #0
 801e77c:	f000 80bd 	beq.w	801e8fa <_dtoa_r+0x622>
 801e780:	b12f      	cbz	r7, 801e78e <_dtoa_r+0x4b6>
 801e782:	42af      	cmp	r7, r5
 801e784:	d003      	beq.n	801e78e <_dtoa_r+0x4b6>
 801e786:	4639      	mov	r1, r7
 801e788:	4648      	mov	r0, r9
 801e78a:	f000 fcb5 	bl	801f0f8 <_Bfree>
 801e78e:	4629      	mov	r1, r5
 801e790:	4648      	mov	r0, r9
 801e792:	f000 fcb1 	bl	801f0f8 <_Bfree>
 801e796:	e0b0      	b.n	801e8fa <_dtoa_r+0x622>
 801e798:	07e2      	lsls	r2, r4, #31
 801e79a:	d505      	bpl.n	801e7a8 <_dtoa_r+0x4d0>
 801e79c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e7a0:	f7e1 ff02 	bl	80005a8 <__aeabi_dmul>
 801e7a4:	3601      	adds	r6, #1
 801e7a6:	2301      	movs	r3, #1
 801e7a8:	1064      	asrs	r4, r4, #1
 801e7aa:	3508      	adds	r5, #8
 801e7ac:	e762      	b.n	801e674 <_dtoa_r+0x39c>
 801e7ae:	2602      	movs	r6, #2
 801e7b0:	e765      	b.n	801e67e <_dtoa_r+0x3a6>
 801e7b2:	9c08      	ldr	r4, [sp, #32]
 801e7b4:	46b8      	mov	r8, r7
 801e7b6:	e784      	b.n	801e6c2 <_dtoa_r+0x3ea>
 801e7b8:	4b27      	ldr	r3, [pc, #156]	@ (801e858 <_dtoa_r+0x580>)
 801e7ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e7bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e7c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e7c4:	4454      	add	r4, sl
 801e7c6:	2900      	cmp	r1, #0
 801e7c8:	d054      	beq.n	801e874 <_dtoa_r+0x59c>
 801e7ca:	4929      	ldr	r1, [pc, #164]	@ (801e870 <_dtoa_r+0x598>)
 801e7cc:	2000      	movs	r0, #0
 801e7ce:	f7e2 f815 	bl	80007fc <__aeabi_ddiv>
 801e7d2:	4633      	mov	r3, r6
 801e7d4:	462a      	mov	r2, r5
 801e7d6:	f7e1 fd2f 	bl	8000238 <__aeabi_dsub>
 801e7da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e7de:	4656      	mov	r6, sl
 801e7e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e7e4:	f7e2 f990 	bl	8000b08 <__aeabi_d2iz>
 801e7e8:	4605      	mov	r5, r0
 801e7ea:	f7e1 fe73 	bl	80004d4 <__aeabi_i2d>
 801e7ee:	4602      	mov	r2, r0
 801e7f0:	460b      	mov	r3, r1
 801e7f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e7f6:	f7e1 fd1f 	bl	8000238 <__aeabi_dsub>
 801e7fa:	3530      	adds	r5, #48	@ 0x30
 801e7fc:	4602      	mov	r2, r0
 801e7fe:	460b      	mov	r3, r1
 801e800:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e804:	f806 5b01 	strb.w	r5, [r6], #1
 801e808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e80c:	f7e2 f93e 	bl	8000a8c <__aeabi_dcmplt>
 801e810:	2800      	cmp	r0, #0
 801e812:	d172      	bne.n	801e8fa <_dtoa_r+0x622>
 801e814:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e818:	4911      	ldr	r1, [pc, #68]	@ (801e860 <_dtoa_r+0x588>)
 801e81a:	2000      	movs	r0, #0
 801e81c:	f7e1 fd0c 	bl	8000238 <__aeabi_dsub>
 801e820:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e824:	f7e2 f932 	bl	8000a8c <__aeabi_dcmplt>
 801e828:	2800      	cmp	r0, #0
 801e82a:	f040 80b4 	bne.w	801e996 <_dtoa_r+0x6be>
 801e82e:	42a6      	cmp	r6, r4
 801e830:	f43f af70 	beq.w	801e714 <_dtoa_r+0x43c>
 801e834:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e838:	4b0a      	ldr	r3, [pc, #40]	@ (801e864 <_dtoa_r+0x58c>)
 801e83a:	2200      	movs	r2, #0
 801e83c:	f7e1 feb4 	bl	80005a8 <__aeabi_dmul>
 801e840:	4b08      	ldr	r3, [pc, #32]	@ (801e864 <_dtoa_r+0x58c>)
 801e842:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e846:	2200      	movs	r2, #0
 801e848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e84c:	f7e1 feac 	bl	80005a8 <__aeabi_dmul>
 801e850:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e854:	e7c4      	b.n	801e7e0 <_dtoa_r+0x508>
 801e856:	bf00      	nop
 801e858:	08021918 	.word	0x08021918
 801e85c:	080218f0 	.word	0x080218f0
 801e860:	3ff00000 	.word	0x3ff00000
 801e864:	40240000 	.word	0x40240000
 801e868:	401c0000 	.word	0x401c0000
 801e86c:	40140000 	.word	0x40140000
 801e870:	3fe00000 	.word	0x3fe00000
 801e874:	4631      	mov	r1, r6
 801e876:	4628      	mov	r0, r5
 801e878:	f7e1 fe96 	bl	80005a8 <__aeabi_dmul>
 801e87c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e880:	9413      	str	r4, [sp, #76]	@ 0x4c
 801e882:	4656      	mov	r6, sl
 801e884:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e888:	f7e2 f93e 	bl	8000b08 <__aeabi_d2iz>
 801e88c:	4605      	mov	r5, r0
 801e88e:	f7e1 fe21 	bl	80004d4 <__aeabi_i2d>
 801e892:	4602      	mov	r2, r0
 801e894:	460b      	mov	r3, r1
 801e896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e89a:	f7e1 fccd 	bl	8000238 <__aeabi_dsub>
 801e89e:	3530      	adds	r5, #48	@ 0x30
 801e8a0:	f806 5b01 	strb.w	r5, [r6], #1
 801e8a4:	4602      	mov	r2, r0
 801e8a6:	460b      	mov	r3, r1
 801e8a8:	42a6      	cmp	r6, r4
 801e8aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e8ae:	f04f 0200 	mov.w	r2, #0
 801e8b2:	d124      	bne.n	801e8fe <_dtoa_r+0x626>
 801e8b4:	4baf      	ldr	r3, [pc, #700]	@ (801eb74 <_dtoa_r+0x89c>)
 801e8b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e8ba:	f7e1 fcbf 	bl	800023c <__adddf3>
 801e8be:	4602      	mov	r2, r0
 801e8c0:	460b      	mov	r3, r1
 801e8c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e8c6:	f7e2 f8ff 	bl	8000ac8 <__aeabi_dcmpgt>
 801e8ca:	2800      	cmp	r0, #0
 801e8cc:	d163      	bne.n	801e996 <_dtoa_r+0x6be>
 801e8ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e8d2:	49a8      	ldr	r1, [pc, #672]	@ (801eb74 <_dtoa_r+0x89c>)
 801e8d4:	2000      	movs	r0, #0
 801e8d6:	f7e1 fcaf 	bl	8000238 <__aeabi_dsub>
 801e8da:	4602      	mov	r2, r0
 801e8dc:	460b      	mov	r3, r1
 801e8de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e8e2:	f7e2 f8d3 	bl	8000a8c <__aeabi_dcmplt>
 801e8e6:	2800      	cmp	r0, #0
 801e8e8:	f43f af14 	beq.w	801e714 <_dtoa_r+0x43c>
 801e8ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e8ee:	1e73      	subs	r3, r6, #1
 801e8f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e8f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e8f6:	2b30      	cmp	r3, #48	@ 0x30
 801e8f8:	d0f8      	beq.n	801e8ec <_dtoa_r+0x614>
 801e8fa:	4647      	mov	r7, r8
 801e8fc:	e03b      	b.n	801e976 <_dtoa_r+0x69e>
 801e8fe:	4b9e      	ldr	r3, [pc, #632]	@ (801eb78 <_dtoa_r+0x8a0>)
 801e900:	f7e1 fe52 	bl	80005a8 <__aeabi_dmul>
 801e904:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e908:	e7bc      	b.n	801e884 <_dtoa_r+0x5ac>
 801e90a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801e90e:	4656      	mov	r6, sl
 801e910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e914:	4620      	mov	r0, r4
 801e916:	4629      	mov	r1, r5
 801e918:	f7e1 ff70 	bl	80007fc <__aeabi_ddiv>
 801e91c:	f7e2 f8f4 	bl	8000b08 <__aeabi_d2iz>
 801e920:	4680      	mov	r8, r0
 801e922:	f7e1 fdd7 	bl	80004d4 <__aeabi_i2d>
 801e926:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e92a:	f7e1 fe3d 	bl	80005a8 <__aeabi_dmul>
 801e92e:	4602      	mov	r2, r0
 801e930:	460b      	mov	r3, r1
 801e932:	4620      	mov	r0, r4
 801e934:	4629      	mov	r1, r5
 801e936:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801e93a:	f7e1 fc7d 	bl	8000238 <__aeabi_dsub>
 801e93e:	f806 4b01 	strb.w	r4, [r6], #1
 801e942:	9d08      	ldr	r5, [sp, #32]
 801e944:	eba6 040a 	sub.w	r4, r6, sl
 801e948:	42a5      	cmp	r5, r4
 801e94a:	4602      	mov	r2, r0
 801e94c:	460b      	mov	r3, r1
 801e94e:	d133      	bne.n	801e9b8 <_dtoa_r+0x6e0>
 801e950:	f7e1 fc74 	bl	800023c <__adddf3>
 801e954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e958:	4604      	mov	r4, r0
 801e95a:	460d      	mov	r5, r1
 801e95c:	f7e2 f8b4 	bl	8000ac8 <__aeabi_dcmpgt>
 801e960:	b9c0      	cbnz	r0, 801e994 <_dtoa_r+0x6bc>
 801e962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e966:	4620      	mov	r0, r4
 801e968:	4629      	mov	r1, r5
 801e96a:	f7e2 f885 	bl	8000a78 <__aeabi_dcmpeq>
 801e96e:	b110      	cbz	r0, 801e976 <_dtoa_r+0x69e>
 801e970:	f018 0f01 	tst.w	r8, #1
 801e974:	d10e      	bne.n	801e994 <_dtoa_r+0x6bc>
 801e976:	9903      	ldr	r1, [sp, #12]
 801e978:	4648      	mov	r0, r9
 801e97a:	f000 fbbd 	bl	801f0f8 <_Bfree>
 801e97e:	2300      	movs	r3, #0
 801e980:	7033      	strb	r3, [r6, #0]
 801e982:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e984:	3701      	adds	r7, #1
 801e986:	601f      	str	r7, [r3, #0]
 801e988:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	f000 824b 	beq.w	801ee26 <_dtoa_r+0xb4e>
 801e990:	601e      	str	r6, [r3, #0]
 801e992:	e248      	b.n	801ee26 <_dtoa_r+0xb4e>
 801e994:	46b8      	mov	r8, r7
 801e996:	4633      	mov	r3, r6
 801e998:	461e      	mov	r6, r3
 801e99a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e99e:	2a39      	cmp	r2, #57	@ 0x39
 801e9a0:	d106      	bne.n	801e9b0 <_dtoa_r+0x6d8>
 801e9a2:	459a      	cmp	sl, r3
 801e9a4:	d1f8      	bne.n	801e998 <_dtoa_r+0x6c0>
 801e9a6:	2230      	movs	r2, #48	@ 0x30
 801e9a8:	f108 0801 	add.w	r8, r8, #1
 801e9ac:	f88a 2000 	strb.w	r2, [sl]
 801e9b0:	781a      	ldrb	r2, [r3, #0]
 801e9b2:	3201      	adds	r2, #1
 801e9b4:	701a      	strb	r2, [r3, #0]
 801e9b6:	e7a0      	b.n	801e8fa <_dtoa_r+0x622>
 801e9b8:	4b6f      	ldr	r3, [pc, #444]	@ (801eb78 <_dtoa_r+0x8a0>)
 801e9ba:	2200      	movs	r2, #0
 801e9bc:	f7e1 fdf4 	bl	80005a8 <__aeabi_dmul>
 801e9c0:	2200      	movs	r2, #0
 801e9c2:	2300      	movs	r3, #0
 801e9c4:	4604      	mov	r4, r0
 801e9c6:	460d      	mov	r5, r1
 801e9c8:	f7e2 f856 	bl	8000a78 <__aeabi_dcmpeq>
 801e9cc:	2800      	cmp	r0, #0
 801e9ce:	d09f      	beq.n	801e910 <_dtoa_r+0x638>
 801e9d0:	e7d1      	b.n	801e976 <_dtoa_r+0x69e>
 801e9d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e9d4:	2a00      	cmp	r2, #0
 801e9d6:	f000 80ea 	beq.w	801ebae <_dtoa_r+0x8d6>
 801e9da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e9dc:	2a01      	cmp	r2, #1
 801e9de:	f300 80cd 	bgt.w	801eb7c <_dtoa_r+0x8a4>
 801e9e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e9e4:	2a00      	cmp	r2, #0
 801e9e6:	f000 80c1 	beq.w	801eb6c <_dtoa_r+0x894>
 801e9ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801e9ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e9f0:	9e04      	ldr	r6, [sp, #16]
 801e9f2:	9a04      	ldr	r2, [sp, #16]
 801e9f4:	441a      	add	r2, r3
 801e9f6:	9204      	str	r2, [sp, #16]
 801e9f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e9fa:	2101      	movs	r1, #1
 801e9fc:	441a      	add	r2, r3
 801e9fe:	4648      	mov	r0, r9
 801ea00:	9209      	str	r2, [sp, #36]	@ 0x24
 801ea02:	f000 fc2d 	bl	801f260 <__i2b>
 801ea06:	4605      	mov	r5, r0
 801ea08:	b166      	cbz	r6, 801ea24 <_dtoa_r+0x74c>
 801ea0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	dd09      	ble.n	801ea24 <_dtoa_r+0x74c>
 801ea10:	42b3      	cmp	r3, r6
 801ea12:	9a04      	ldr	r2, [sp, #16]
 801ea14:	bfa8      	it	ge
 801ea16:	4633      	movge	r3, r6
 801ea18:	1ad2      	subs	r2, r2, r3
 801ea1a:	9204      	str	r2, [sp, #16]
 801ea1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ea1e:	1af6      	subs	r6, r6, r3
 801ea20:	1ad3      	subs	r3, r2, r3
 801ea22:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ea26:	b30b      	cbz	r3, 801ea6c <_dtoa_r+0x794>
 801ea28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	f000 80c6 	beq.w	801ebbc <_dtoa_r+0x8e4>
 801ea30:	2c00      	cmp	r4, #0
 801ea32:	f000 80c0 	beq.w	801ebb6 <_dtoa_r+0x8de>
 801ea36:	4629      	mov	r1, r5
 801ea38:	4622      	mov	r2, r4
 801ea3a:	4648      	mov	r0, r9
 801ea3c:	f000 fcc8 	bl	801f3d0 <__pow5mult>
 801ea40:	9a03      	ldr	r2, [sp, #12]
 801ea42:	4601      	mov	r1, r0
 801ea44:	4605      	mov	r5, r0
 801ea46:	4648      	mov	r0, r9
 801ea48:	f000 fc20 	bl	801f28c <__multiply>
 801ea4c:	9903      	ldr	r1, [sp, #12]
 801ea4e:	4680      	mov	r8, r0
 801ea50:	4648      	mov	r0, r9
 801ea52:	f000 fb51 	bl	801f0f8 <_Bfree>
 801ea56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ea58:	1b1b      	subs	r3, r3, r4
 801ea5a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ea5c:	f000 80b1 	beq.w	801ebc2 <_dtoa_r+0x8ea>
 801ea60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ea62:	4641      	mov	r1, r8
 801ea64:	4648      	mov	r0, r9
 801ea66:	f000 fcb3 	bl	801f3d0 <__pow5mult>
 801ea6a:	9003      	str	r0, [sp, #12]
 801ea6c:	2101      	movs	r1, #1
 801ea6e:	4648      	mov	r0, r9
 801ea70:	f000 fbf6 	bl	801f260 <__i2b>
 801ea74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea76:	4604      	mov	r4, r0
 801ea78:	2b00      	cmp	r3, #0
 801ea7a:	f000 81d8 	beq.w	801ee2e <_dtoa_r+0xb56>
 801ea7e:	461a      	mov	r2, r3
 801ea80:	4601      	mov	r1, r0
 801ea82:	4648      	mov	r0, r9
 801ea84:	f000 fca4 	bl	801f3d0 <__pow5mult>
 801ea88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ea8a:	2b01      	cmp	r3, #1
 801ea8c:	4604      	mov	r4, r0
 801ea8e:	f300 809f 	bgt.w	801ebd0 <_dtoa_r+0x8f8>
 801ea92:	9b06      	ldr	r3, [sp, #24]
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	f040 8097 	bne.w	801ebc8 <_dtoa_r+0x8f0>
 801ea9a:	9b07      	ldr	r3, [sp, #28]
 801ea9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801eaa0:	2b00      	cmp	r3, #0
 801eaa2:	f040 8093 	bne.w	801ebcc <_dtoa_r+0x8f4>
 801eaa6:	9b07      	ldr	r3, [sp, #28]
 801eaa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801eaac:	0d1b      	lsrs	r3, r3, #20
 801eaae:	051b      	lsls	r3, r3, #20
 801eab0:	b133      	cbz	r3, 801eac0 <_dtoa_r+0x7e8>
 801eab2:	9b04      	ldr	r3, [sp, #16]
 801eab4:	3301      	adds	r3, #1
 801eab6:	9304      	str	r3, [sp, #16]
 801eab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eaba:	3301      	adds	r3, #1
 801eabc:	9309      	str	r3, [sp, #36]	@ 0x24
 801eabe:	2301      	movs	r3, #1
 801eac0:	930a      	str	r3, [sp, #40]	@ 0x28
 801eac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	f000 81b8 	beq.w	801ee3a <_dtoa_r+0xb62>
 801eaca:	6923      	ldr	r3, [r4, #16]
 801eacc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ead0:	6918      	ldr	r0, [r3, #16]
 801ead2:	f000 fb79 	bl	801f1c8 <__hi0bits>
 801ead6:	f1c0 0020 	rsb	r0, r0, #32
 801eada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eadc:	4418      	add	r0, r3
 801eade:	f010 001f 	ands.w	r0, r0, #31
 801eae2:	f000 8082 	beq.w	801ebea <_dtoa_r+0x912>
 801eae6:	f1c0 0320 	rsb	r3, r0, #32
 801eaea:	2b04      	cmp	r3, #4
 801eaec:	dd73      	ble.n	801ebd6 <_dtoa_r+0x8fe>
 801eaee:	9b04      	ldr	r3, [sp, #16]
 801eaf0:	f1c0 001c 	rsb	r0, r0, #28
 801eaf4:	4403      	add	r3, r0
 801eaf6:	9304      	str	r3, [sp, #16]
 801eaf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eafa:	4403      	add	r3, r0
 801eafc:	4406      	add	r6, r0
 801eafe:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb00:	9b04      	ldr	r3, [sp, #16]
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	dd05      	ble.n	801eb12 <_dtoa_r+0x83a>
 801eb06:	9903      	ldr	r1, [sp, #12]
 801eb08:	461a      	mov	r2, r3
 801eb0a:	4648      	mov	r0, r9
 801eb0c:	f000 fcba 	bl	801f484 <__lshift>
 801eb10:	9003      	str	r0, [sp, #12]
 801eb12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	dd05      	ble.n	801eb24 <_dtoa_r+0x84c>
 801eb18:	4621      	mov	r1, r4
 801eb1a:	461a      	mov	r2, r3
 801eb1c:	4648      	mov	r0, r9
 801eb1e:	f000 fcb1 	bl	801f484 <__lshift>
 801eb22:	4604      	mov	r4, r0
 801eb24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eb26:	2b00      	cmp	r3, #0
 801eb28:	d061      	beq.n	801ebee <_dtoa_r+0x916>
 801eb2a:	9803      	ldr	r0, [sp, #12]
 801eb2c:	4621      	mov	r1, r4
 801eb2e:	f000 fd15 	bl	801f55c <__mcmp>
 801eb32:	2800      	cmp	r0, #0
 801eb34:	da5b      	bge.n	801ebee <_dtoa_r+0x916>
 801eb36:	2300      	movs	r3, #0
 801eb38:	9903      	ldr	r1, [sp, #12]
 801eb3a:	220a      	movs	r2, #10
 801eb3c:	4648      	mov	r0, r9
 801eb3e:	f000 fafd 	bl	801f13c <__multadd>
 801eb42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eb44:	9003      	str	r0, [sp, #12]
 801eb46:	f107 38ff 	add.w	r8, r7, #4294967295
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	f000 8177 	beq.w	801ee3e <_dtoa_r+0xb66>
 801eb50:	4629      	mov	r1, r5
 801eb52:	2300      	movs	r3, #0
 801eb54:	220a      	movs	r2, #10
 801eb56:	4648      	mov	r0, r9
 801eb58:	f000 faf0 	bl	801f13c <__multadd>
 801eb5c:	f1bb 0f00 	cmp.w	fp, #0
 801eb60:	4605      	mov	r5, r0
 801eb62:	dc6f      	bgt.n	801ec44 <_dtoa_r+0x96c>
 801eb64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801eb66:	2b02      	cmp	r3, #2
 801eb68:	dc49      	bgt.n	801ebfe <_dtoa_r+0x926>
 801eb6a:	e06b      	b.n	801ec44 <_dtoa_r+0x96c>
 801eb6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801eb6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801eb72:	e73c      	b.n	801e9ee <_dtoa_r+0x716>
 801eb74:	3fe00000 	.word	0x3fe00000
 801eb78:	40240000 	.word	0x40240000
 801eb7c:	9b08      	ldr	r3, [sp, #32]
 801eb7e:	1e5c      	subs	r4, r3, #1
 801eb80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eb82:	42a3      	cmp	r3, r4
 801eb84:	db09      	blt.n	801eb9a <_dtoa_r+0x8c2>
 801eb86:	1b1c      	subs	r4, r3, r4
 801eb88:	9b08      	ldr	r3, [sp, #32]
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	f6bf af30 	bge.w	801e9f0 <_dtoa_r+0x718>
 801eb90:	9b04      	ldr	r3, [sp, #16]
 801eb92:	9a08      	ldr	r2, [sp, #32]
 801eb94:	1a9e      	subs	r6, r3, r2
 801eb96:	2300      	movs	r3, #0
 801eb98:	e72b      	b.n	801e9f2 <_dtoa_r+0x71a>
 801eb9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eb9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eb9e:	940a      	str	r4, [sp, #40]	@ 0x28
 801eba0:	1ae3      	subs	r3, r4, r3
 801eba2:	441a      	add	r2, r3
 801eba4:	9e04      	ldr	r6, [sp, #16]
 801eba6:	9b08      	ldr	r3, [sp, #32]
 801eba8:	920e      	str	r2, [sp, #56]	@ 0x38
 801ebaa:	2400      	movs	r4, #0
 801ebac:	e721      	b.n	801e9f2 <_dtoa_r+0x71a>
 801ebae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ebb0:	9e04      	ldr	r6, [sp, #16]
 801ebb2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801ebb4:	e728      	b.n	801ea08 <_dtoa_r+0x730>
 801ebb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801ebba:	e751      	b.n	801ea60 <_dtoa_r+0x788>
 801ebbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ebbe:	9903      	ldr	r1, [sp, #12]
 801ebc0:	e750      	b.n	801ea64 <_dtoa_r+0x78c>
 801ebc2:	f8cd 800c 	str.w	r8, [sp, #12]
 801ebc6:	e751      	b.n	801ea6c <_dtoa_r+0x794>
 801ebc8:	2300      	movs	r3, #0
 801ebca:	e779      	b.n	801eac0 <_dtoa_r+0x7e8>
 801ebcc:	9b06      	ldr	r3, [sp, #24]
 801ebce:	e777      	b.n	801eac0 <_dtoa_r+0x7e8>
 801ebd0:	2300      	movs	r3, #0
 801ebd2:	930a      	str	r3, [sp, #40]	@ 0x28
 801ebd4:	e779      	b.n	801eaca <_dtoa_r+0x7f2>
 801ebd6:	d093      	beq.n	801eb00 <_dtoa_r+0x828>
 801ebd8:	9a04      	ldr	r2, [sp, #16]
 801ebda:	331c      	adds	r3, #28
 801ebdc:	441a      	add	r2, r3
 801ebde:	9204      	str	r2, [sp, #16]
 801ebe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ebe2:	441a      	add	r2, r3
 801ebe4:	441e      	add	r6, r3
 801ebe6:	9209      	str	r2, [sp, #36]	@ 0x24
 801ebe8:	e78a      	b.n	801eb00 <_dtoa_r+0x828>
 801ebea:	4603      	mov	r3, r0
 801ebec:	e7f4      	b.n	801ebd8 <_dtoa_r+0x900>
 801ebee:	9b08      	ldr	r3, [sp, #32]
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	46b8      	mov	r8, r7
 801ebf4:	dc20      	bgt.n	801ec38 <_dtoa_r+0x960>
 801ebf6:	469b      	mov	fp, r3
 801ebf8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ebfa:	2b02      	cmp	r3, #2
 801ebfc:	dd1e      	ble.n	801ec3c <_dtoa_r+0x964>
 801ebfe:	f1bb 0f00 	cmp.w	fp, #0
 801ec02:	f47f adb1 	bne.w	801e768 <_dtoa_r+0x490>
 801ec06:	4621      	mov	r1, r4
 801ec08:	465b      	mov	r3, fp
 801ec0a:	2205      	movs	r2, #5
 801ec0c:	4648      	mov	r0, r9
 801ec0e:	f000 fa95 	bl	801f13c <__multadd>
 801ec12:	4601      	mov	r1, r0
 801ec14:	4604      	mov	r4, r0
 801ec16:	9803      	ldr	r0, [sp, #12]
 801ec18:	f000 fca0 	bl	801f55c <__mcmp>
 801ec1c:	2800      	cmp	r0, #0
 801ec1e:	f77f ada3 	ble.w	801e768 <_dtoa_r+0x490>
 801ec22:	4656      	mov	r6, sl
 801ec24:	2331      	movs	r3, #49	@ 0x31
 801ec26:	f806 3b01 	strb.w	r3, [r6], #1
 801ec2a:	f108 0801 	add.w	r8, r8, #1
 801ec2e:	e59f      	b.n	801e770 <_dtoa_r+0x498>
 801ec30:	9c08      	ldr	r4, [sp, #32]
 801ec32:	46b8      	mov	r8, r7
 801ec34:	4625      	mov	r5, r4
 801ec36:	e7f4      	b.n	801ec22 <_dtoa_r+0x94a>
 801ec38:	f8dd b020 	ldr.w	fp, [sp, #32]
 801ec3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	f000 8101 	beq.w	801ee46 <_dtoa_r+0xb6e>
 801ec44:	2e00      	cmp	r6, #0
 801ec46:	dd05      	ble.n	801ec54 <_dtoa_r+0x97c>
 801ec48:	4629      	mov	r1, r5
 801ec4a:	4632      	mov	r2, r6
 801ec4c:	4648      	mov	r0, r9
 801ec4e:	f000 fc19 	bl	801f484 <__lshift>
 801ec52:	4605      	mov	r5, r0
 801ec54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ec56:	2b00      	cmp	r3, #0
 801ec58:	d05c      	beq.n	801ed14 <_dtoa_r+0xa3c>
 801ec5a:	6869      	ldr	r1, [r5, #4]
 801ec5c:	4648      	mov	r0, r9
 801ec5e:	f000 fa0b 	bl	801f078 <_Balloc>
 801ec62:	4606      	mov	r6, r0
 801ec64:	b928      	cbnz	r0, 801ec72 <_dtoa_r+0x99a>
 801ec66:	4b82      	ldr	r3, [pc, #520]	@ (801ee70 <_dtoa_r+0xb98>)
 801ec68:	4602      	mov	r2, r0
 801ec6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801ec6e:	f7ff bb47 	b.w	801e300 <_dtoa_r+0x28>
 801ec72:	692a      	ldr	r2, [r5, #16]
 801ec74:	3202      	adds	r2, #2
 801ec76:	0092      	lsls	r2, r2, #2
 801ec78:	f105 010c 	add.w	r1, r5, #12
 801ec7c:	300c      	adds	r0, #12
 801ec7e:	f000 ff9d 	bl	801fbbc <memcpy>
 801ec82:	2201      	movs	r2, #1
 801ec84:	4631      	mov	r1, r6
 801ec86:	4648      	mov	r0, r9
 801ec88:	f000 fbfc 	bl	801f484 <__lshift>
 801ec8c:	f10a 0301 	add.w	r3, sl, #1
 801ec90:	9304      	str	r3, [sp, #16]
 801ec92:	eb0a 030b 	add.w	r3, sl, fp
 801ec96:	930a      	str	r3, [sp, #40]	@ 0x28
 801ec98:	9b06      	ldr	r3, [sp, #24]
 801ec9a:	f003 0301 	and.w	r3, r3, #1
 801ec9e:	462f      	mov	r7, r5
 801eca0:	9309      	str	r3, [sp, #36]	@ 0x24
 801eca2:	4605      	mov	r5, r0
 801eca4:	9b04      	ldr	r3, [sp, #16]
 801eca6:	9803      	ldr	r0, [sp, #12]
 801eca8:	4621      	mov	r1, r4
 801ecaa:	f103 3bff 	add.w	fp, r3, #4294967295
 801ecae:	f7ff fa88 	bl	801e1c2 <quorem>
 801ecb2:	4603      	mov	r3, r0
 801ecb4:	3330      	adds	r3, #48	@ 0x30
 801ecb6:	9006      	str	r0, [sp, #24]
 801ecb8:	4639      	mov	r1, r7
 801ecba:	9803      	ldr	r0, [sp, #12]
 801ecbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ecbe:	f000 fc4d 	bl	801f55c <__mcmp>
 801ecc2:	462a      	mov	r2, r5
 801ecc4:	9008      	str	r0, [sp, #32]
 801ecc6:	4621      	mov	r1, r4
 801ecc8:	4648      	mov	r0, r9
 801ecca:	f000 fc63 	bl	801f594 <__mdiff>
 801ecce:	68c2      	ldr	r2, [r0, #12]
 801ecd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ecd2:	4606      	mov	r6, r0
 801ecd4:	bb02      	cbnz	r2, 801ed18 <_dtoa_r+0xa40>
 801ecd6:	4601      	mov	r1, r0
 801ecd8:	9803      	ldr	r0, [sp, #12]
 801ecda:	f000 fc3f 	bl	801f55c <__mcmp>
 801ecde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ece0:	4602      	mov	r2, r0
 801ece2:	4631      	mov	r1, r6
 801ece4:	4648      	mov	r0, r9
 801ece6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 801ecea:	f000 fa05 	bl	801f0f8 <_Bfree>
 801ecee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ecf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ecf2:	9e04      	ldr	r6, [sp, #16]
 801ecf4:	ea42 0103 	orr.w	r1, r2, r3
 801ecf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecfa:	4319      	orrs	r1, r3
 801ecfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ecfe:	d10d      	bne.n	801ed1c <_dtoa_r+0xa44>
 801ed00:	2b39      	cmp	r3, #57	@ 0x39
 801ed02:	d027      	beq.n	801ed54 <_dtoa_r+0xa7c>
 801ed04:	9a08      	ldr	r2, [sp, #32]
 801ed06:	2a00      	cmp	r2, #0
 801ed08:	dd01      	ble.n	801ed0e <_dtoa_r+0xa36>
 801ed0a:	9b06      	ldr	r3, [sp, #24]
 801ed0c:	3331      	adds	r3, #49	@ 0x31
 801ed0e:	f88b 3000 	strb.w	r3, [fp]
 801ed12:	e52e      	b.n	801e772 <_dtoa_r+0x49a>
 801ed14:	4628      	mov	r0, r5
 801ed16:	e7b9      	b.n	801ec8c <_dtoa_r+0x9b4>
 801ed18:	2201      	movs	r2, #1
 801ed1a:	e7e2      	b.n	801ece2 <_dtoa_r+0xa0a>
 801ed1c:	9908      	ldr	r1, [sp, #32]
 801ed1e:	2900      	cmp	r1, #0
 801ed20:	db04      	blt.n	801ed2c <_dtoa_r+0xa54>
 801ed22:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801ed24:	4301      	orrs	r1, r0
 801ed26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed28:	4301      	orrs	r1, r0
 801ed2a:	d120      	bne.n	801ed6e <_dtoa_r+0xa96>
 801ed2c:	2a00      	cmp	r2, #0
 801ed2e:	ddee      	ble.n	801ed0e <_dtoa_r+0xa36>
 801ed30:	9903      	ldr	r1, [sp, #12]
 801ed32:	9304      	str	r3, [sp, #16]
 801ed34:	2201      	movs	r2, #1
 801ed36:	4648      	mov	r0, r9
 801ed38:	f000 fba4 	bl	801f484 <__lshift>
 801ed3c:	4621      	mov	r1, r4
 801ed3e:	9003      	str	r0, [sp, #12]
 801ed40:	f000 fc0c 	bl	801f55c <__mcmp>
 801ed44:	2800      	cmp	r0, #0
 801ed46:	9b04      	ldr	r3, [sp, #16]
 801ed48:	dc02      	bgt.n	801ed50 <_dtoa_r+0xa78>
 801ed4a:	d1e0      	bne.n	801ed0e <_dtoa_r+0xa36>
 801ed4c:	07da      	lsls	r2, r3, #31
 801ed4e:	d5de      	bpl.n	801ed0e <_dtoa_r+0xa36>
 801ed50:	2b39      	cmp	r3, #57	@ 0x39
 801ed52:	d1da      	bne.n	801ed0a <_dtoa_r+0xa32>
 801ed54:	2339      	movs	r3, #57	@ 0x39
 801ed56:	f88b 3000 	strb.w	r3, [fp]
 801ed5a:	4633      	mov	r3, r6
 801ed5c:	461e      	mov	r6, r3
 801ed5e:	3b01      	subs	r3, #1
 801ed60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801ed64:	2a39      	cmp	r2, #57	@ 0x39
 801ed66:	d04e      	beq.n	801ee06 <_dtoa_r+0xb2e>
 801ed68:	3201      	adds	r2, #1
 801ed6a:	701a      	strb	r2, [r3, #0]
 801ed6c:	e501      	b.n	801e772 <_dtoa_r+0x49a>
 801ed6e:	2a00      	cmp	r2, #0
 801ed70:	dd03      	ble.n	801ed7a <_dtoa_r+0xaa2>
 801ed72:	2b39      	cmp	r3, #57	@ 0x39
 801ed74:	d0ee      	beq.n	801ed54 <_dtoa_r+0xa7c>
 801ed76:	3301      	adds	r3, #1
 801ed78:	e7c9      	b.n	801ed0e <_dtoa_r+0xa36>
 801ed7a:	9a04      	ldr	r2, [sp, #16]
 801ed7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ed7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ed82:	428a      	cmp	r2, r1
 801ed84:	d028      	beq.n	801edd8 <_dtoa_r+0xb00>
 801ed86:	9903      	ldr	r1, [sp, #12]
 801ed88:	2300      	movs	r3, #0
 801ed8a:	220a      	movs	r2, #10
 801ed8c:	4648      	mov	r0, r9
 801ed8e:	f000 f9d5 	bl	801f13c <__multadd>
 801ed92:	42af      	cmp	r7, r5
 801ed94:	9003      	str	r0, [sp, #12]
 801ed96:	f04f 0300 	mov.w	r3, #0
 801ed9a:	f04f 020a 	mov.w	r2, #10
 801ed9e:	4639      	mov	r1, r7
 801eda0:	4648      	mov	r0, r9
 801eda2:	d107      	bne.n	801edb4 <_dtoa_r+0xadc>
 801eda4:	f000 f9ca 	bl	801f13c <__multadd>
 801eda8:	4607      	mov	r7, r0
 801edaa:	4605      	mov	r5, r0
 801edac:	9b04      	ldr	r3, [sp, #16]
 801edae:	3301      	adds	r3, #1
 801edb0:	9304      	str	r3, [sp, #16]
 801edb2:	e777      	b.n	801eca4 <_dtoa_r+0x9cc>
 801edb4:	f000 f9c2 	bl	801f13c <__multadd>
 801edb8:	4629      	mov	r1, r5
 801edba:	4607      	mov	r7, r0
 801edbc:	2300      	movs	r3, #0
 801edbe:	220a      	movs	r2, #10
 801edc0:	4648      	mov	r0, r9
 801edc2:	f000 f9bb 	bl	801f13c <__multadd>
 801edc6:	4605      	mov	r5, r0
 801edc8:	e7f0      	b.n	801edac <_dtoa_r+0xad4>
 801edca:	f1bb 0f00 	cmp.w	fp, #0
 801edce:	bfcc      	ite	gt
 801edd0:	465e      	movgt	r6, fp
 801edd2:	2601      	movle	r6, #1
 801edd4:	4456      	add	r6, sl
 801edd6:	2700      	movs	r7, #0
 801edd8:	9903      	ldr	r1, [sp, #12]
 801edda:	9304      	str	r3, [sp, #16]
 801eddc:	2201      	movs	r2, #1
 801edde:	4648      	mov	r0, r9
 801ede0:	f000 fb50 	bl	801f484 <__lshift>
 801ede4:	4621      	mov	r1, r4
 801ede6:	9003      	str	r0, [sp, #12]
 801ede8:	f000 fbb8 	bl	801f55c <__mcmp>
 801edec:	2800      	cmp	r0, #0
 801edee:	dcb4      	bgt.n	801ed5a <_dtoa_r+0xa82>
 801edf0:	d102      	bne.n	801edf8 <_dtoa_r+0xb20>
 801edf2:	9b04      	ldr	r3, [sp, #16]
 801edf4:	07db      	lsls	r3, r3, #31
 801edf6:	d4b0      	bmi.n	801ed5a <_dtoa_r+0xa82>
 801edf8:	4633      	mov	r3, r6
 801edfa:	461e      	mov	r6, r3
 801edfc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ee00:	2a30      	cmp	r2, #48	@ 0x30
 801ee02:	d0fa      	beq.n	801edfa <_dtoa_r+0xb22>
 801ee04:	e4b5      	b.n	801e772 <_dtoa_r+0x49a>
 801ee06:	459a      	cmp	sl, r3
 801ee08:	d1a8      	bne.n	801ed5c <_dtoa_r+0xa84>
 801ee0a:	2331      	movs	r3, #49	@ 0x31
 801ee0c:	f108 0801 	add.w	r8, r8, #1
 801ee10:	f88a 3000 	strb.w	r3, [sl]
 801ee14:	e4ad      	b.n	801e772 <_dtoa_r+0x49a>
 801ee16:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ee18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801ee74 <_dtoa_r+0xb9c>
 801ee1c:	b11b      	cbz	r3, 801ee26 <_dtoa_r+0xb4e>
 801ee1e:	f10a 0308 	add.w	r3, sl, #8
 801ee22:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ee24:	6013      	str	r3, [r2, #0]
 801ee26:	4650      	mov	r0, sl
 801ee28:	b017      	add	sp, #92	@ 0x5c
 801ee2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ee30:	2b01      	cmp	r3, #1
 801ee32:	f77f ae2e 	ble.w	801ea92 <_dtoa_r+0x7ba>
 801ee36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee38:	930a      	str	r3, [sp, #40]	@ 0x28
 801ee3a:	2001      	movs	r0, #1
 801ee3c:	e64d      	b.n	801eada <_dtoa_r+0x802>
 801ee3e:	f1bb 0f00 	cmp.w	fp, #0
 801ee42:	f77f aed9 	ble.w	801ebf8 <_dtoa_r+0x920>
 801ee46:	4656      	mov	r6, sl
 801ee48:	9803      	ldr	r0, [sp, #12]
 801ee4a:	4621      	mov	r1, r4
 801ee4c:	f7ff f9b9 	bl	801e1c2 <quorem>
 801ee50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801ee54:	f806 3b01 	strb.w	r3, [r6], #1
 801ee58:	eba6 020a 	sub.w	r2, r6, sl
 801ee5c:	4593      	cmp	fp, r2
 801ee5e:	ddb4      	ble.n	801edca <_dtoa_r+0xaf2>
 801ee60:	9903      	ldr	r1, [sp, #12]
 801ee62:	2300      	movs	r3, #0
 801ee64:	220a      	movs	r2, #10
 801ee66:	4648      	mov	r0, r9
 801ee68:	f000 f968 	bl	801f13c <__multadd>
 801ee6c:	9003      	str	r0, [sp, #12]
 801ee6e:	e7eb      	b.n	801ee48 <_dtoa_r+0xb70>
 801ee70:	08021820 	.word	0x08021820
 801ee74:	080217a4 	.word	0x080217a4

0801ee78 <_free_r>:
 801ee78:	b538      	push	{r3, r4, r5, lr}
 801ee7a:	4605      	mov	r5, r0
 801ee7c:	2900      	cmp	r1, #0
 801ee7e:	d041      	beq.n	801ef04 <_free_r+0x8c>
 801ee80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ee84:	1f0c      	subs	r4, r1, #4
 801ee86:	2b00      	cmp	r3, #0
 801ee88:	bfb8      	it	lt
 801ee8a:	18e4      	addlt	r4, r4, r3
 801ee8c:	f000 f8e8 	bl	801f060 <__malloc_lock>
 801ee90:	4a1d      	ldr	r2, [pc, #116]	@ (801ef08 <_free_r+0x90>)
 801ee92:	6813      	ldr	r3, [r2, #0]
 801ee94:	b933      	cbnz	r3, 801eea4 <_free_r+0x2c>
 801ee96:	6063      	str	r3, [r4, #4]
 801ee98:	6014      	str	r4, [r2, #0]
 801ee9a:	4628      	mov	r0, r5
 801ee9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eea0:	f000 b8e4 	b.w	801f06c <__malloc_unlock>
 801eea4:	42a3      	cmp	r3, r4
 801eea6:	d908      	bls.n	801eeba <_free_r+0x42>
 801eea8:	6820      	ldr	r0, [r4, #0]
 801eeaa:	1821      	adds	r1, r4, r0
 801eeac:	428b      	cmp	r3, r1
 801eeae:	bf01      	itttt	eq
 801eeb0:	6819      	ldreq	r1, [r3, #0]
 801eeb2:	685b      	ldreq	r3, [r3, #4]
 801eeb4:	1809      	addeq	r1, r1, r0
 801eeb6:	6021      	streq	r1, [r4, #0]
 801eeb8:	e7ed      	b.n	801ee96 <_free_r+0x1e>
 801eeba:	461a      	mov	r2, r3
 801eebc:	685b      	ldr	r3, [r3, #4]
 801eebe:	b10b      	cbz	r3, 801eec4 <_free_r+0x4c>
 801eec0:	42a3      	cmp	r3, r4
 801eec2:	d9fa      	bls.n	801eeba <_free_r+0x42>
 801eec4:	6811      	ldr	r1, [r2, #0]
 801eec6:	1850      	adds	r0, r2, r1
 801eec8:	42a0      	cmp	r0, r4
 801eeca:	d10b      	bne.n	801eee4 <_free_r+0x6c>
 801eecc:	6820      	ldr	r0, [r4, #0]
 801eece:	4401      	add	r1, r0
 801eed0:	1850      	adds	r0, r2, r1
 801eed2:	4283      	cmp	r3, r0
 801eed4:	6011      	str	r1, [r2, #0]
 801eed6:	d1e0      	bne.n	801ee9a <_free_r+0x22>
 801eed8:	6818      	ldr	r0, [r3, #0]
 801eeda:	685b      	ldr	r3, [r3, #4]
 801eedc:	6053      	str	r3, [r2, #4]
 801eede:	4408      	add	r0, r1
 801eee0:	6010      	str	r0, [r2, #0]
 801eee2:	e7da      	b.n	801ee9a <_free_r+0x22>
 801eee4:	d902      	bls.n	801eeec <_free_r+0x74>
 801eee6:	230c      	movs	r3, #12
 801eee8:	602b      	str	r3, [r5, #0]
 801eeea:	e7d6      	b.n	801ee9a <_free_r+0x22>
 801eeec:	6820      	ldr	r0, [r4, #0]
 801eeee:	1821      	adds	r1, r4, r0
 801eef0:	428b      	cmp	r3, r1
 801eef2:	bf04      	itt	eq
 801eef4:	6819      	ldreq	r1, [r3, #0]
 801eef6:	685b      	ldreq	r3, [r3, #4]
 801eef8:	6063      	str	r3, [r4, #4]
 801eefa:	bf04      	itt	eq
 801eefc:	1809      	addeq	r1, r1, r0
 801eefe:	6021      	streq	r1, [r4, #0]
 801ef00:	6054      	str	r4, [r2, #4]
 801ef02:	e7ca      	b.n	801ee9a <_free_r+0x22>
 801ef04:	bd38      	pop	{r3, r4, r5, pc}
 801ef06:	bf00      	nop
 801ef08:	20002660 	.word	0x20002660

0801ef0c <malloc>:
 801ef0c:	4b02      	ldr	r3, [pc, #8]	@ (801ef18 <malloc+0xc>)
 801ef0e:	4601      	mov	r1, r0
 801ef10:	6818      	ldr	r0, [r3, #0]
 801ef12:	f000 b825 	b.w	801ef60 <_malloc_r>
 801ef16:	bf00      	nop
 801ef18:	2000014c 	.word	0x2000014c

0801ef1c <sbrk_aligned>:
 801ef1c:	b570      	push	{r4, r5, r6, lr}
 801ef1e:	4e0f      	ldr	r6, [pc, #60]	@ (801ef5c <sbrk_aligned+0x40>)
 801ef20:	460c      	mov	r4, r1
 801ef22:	6831      	ldr	r1, [r6, #0]
 801ef24:	4605      	mov	r5, r0
 801ef26:	b911      	cbnz	r1, 801ef2e <sbrk_aligned+0x12>
 801ef28:	f000 fe38 	bl	801fb9c <_sbrk_r>
 801ef2c:	6030      	str	r0, [r6, #0]
 801ef2e:	4621      	mov	r1, r4
 801ef30:	4628      	mov	r0, r5
 801ef32:	f000 fe33 	bl	801fb9c <_sbrk_r>
 801ef36:	1c43      	adds	r3, r0, #1
 801ef38:	d103      	bne.n	801ef42 <sbrk_aligned+0x26>
 801ef3a:	f04f 34ff 	mov.w	r4, #4294967295
 801ef3e:	4620      	mov	r0, r4
 801ef40:	bd70      	pop	{r4, r5, r6, pc}
 801ef42:	1cc4      	adds	r4, r0, #3
 801ef44:	f024 0403 	bic.w	r4, r4, #3
 801ef48:	42a0      	cmp	r0, r4
 801ef4a:	d0f8      	beq.n	801ef3e <sbrk_aligned+0x22>
 801ef4c:	1a21      	subs	r1, r4, r0
 801ef4e:	4628      	mov	r0, r5
 801ef50:	f000 fe24 	bl	801fb9c <_sbrk_r>
 801ef54:	3001      	adds	r0, #1
 801ef56:	d1f2      	bne.n	801ef3e <sbrk_aligned+0x22>
 801ef58:	e7ef      	b.n	801ef3a <sbrk_aligned+0x1e>
 801ef5a:	bf00      	nop
 801ef5c:	2000265c 	.word	0x2000265c

0801ef60 <_malloc_r>:
 801ef60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ef64:	1ccd      	adds	r5, r1, #3
 801ef66:	f025 0503 	bic.w	r5, r5, #3
 801ef6a:	3508      	adds	r5, #8
 801ef6c:	2d0c      	cmp	r5, #12
 801ef6e:	bf38      	it	cc
 801ef70:	250c      	movcc	r5, #12
 801ef72:	2d00      	cmp	r5, #0
 801ef74:	4606      	mov	r6, r0
 801ef76:	db01      	blt.n	801ef7c <_malloc_r+0x1c>
 801ef78:	42a9      	cmp	r1, r5
 801ef7a:	d904      	bls.n	801ef86 <_malloc_r+0x26>
 801ef7c:	230c      	movs	r3, #12
 801ef7e:	6033      	str	r3, [r6, #0]
 801ef80:	2000      	movs	r0, #0
 801ef82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f05c <_malloc_r+0xfc>
 801ef8a:	f000 f869 	bl	801f060 <__malloc_lock>
 801ef8e:	f8d8 3000 	ldr.w	r3, [r8]
 801ef92:	461c      	mov	r4, r3
 801ef94:	bb44      	cbnz	r4, 801efe8 <_malloc_r+0x88>
 801ef96:	4629      	mov	r1, r5
 801ef98:	4630      	mov	r0, r6
 801ef9a:	f7ff ffbf 	bl	801ef1c <sbrk_aligned>
 801ef9e:	1c43      	adds	r3, r0, #1
 801efa0:	4604      	mov	r4, r0
 801efa2:	d158      	bne.n	801f056 <_malloc_r+0xf6>
 801efa4:	f8d8 4000 	ldr.w	r4, [r8]
 801efa8:	4627      	mov	r7, r4
 801efaa:	2f00      	cmp	r7, #0
 801efac:	d143      	bne.n	801f036 <_malloc_r+0xd6>
 801efae:	2c00      	cmp	r4, #0
 801efb0:	d04b      	beq.n	801f04a <_malloc_r+0xea>
 801efb2:	6823      	ldr	r3, [r4, #0]
 801efb4:	4639      	mov	r1, r7
 801efb6:	4630      	mov	r0, r6
 801efb8:	eb04 0903 	add.w	r9, r4, r3
 801efbc:	f000 fdee 	bl	801fb9c <_sbrk_r>
 801efc0:	4581      	cmp	r9, r0
 801efc2:	d142      	bne.n	801f04a <_malloc_r+0xea>
 801efc4:	6821      	ldr	r1, [r4, #0]
 801efc6:	1a6d      	subs	r5, r5, r1
 801efc8:	4629      	mov	r1, r5
 801efca:	4630      	mov	r0, r6
 801efcc:	f7ff ffa6 	bl	801ef1c <sbrk_aligned>
 801efd0:	3001      	adds	r0, #1
 801efd2:	d03a      	beq.n	801f04a <_malloc_r+0xea>
 801efd4:	6823      	ldr	r3, [r4, #0]
 801efd6:	442b      	add	r3, r5
 801efd8:	6023      	str	r3, [r4, #0]
 801efda:	f8d8 3000 	ldr.w	r3, [r8]
 801efde:	685a      	ldr	r2, [r3, #4]
 801efe0:	bb62      	cbnz	r2, 801f03c <_malloc_r+0xdc>
 801efe2:	f8c8 7000 	str.w	r7, [r8]
 801efe6:	e00f      	b.n	801f008 <_malloc_r+0xa8>
 801efe8:	6822      	ldr	r2, [r4, #0]
 801efea:	1b52      	subs	r2, r2, r5
 801efec:	d420      	bmi.n	801f030 <_malloc_r+0xd0>
 801efee:	2a0b      	cmp	r2, #11
 801eff0:	d917      	bls.n	801f022 <_malloc_r+0xc2>
 801eff2:	1961      	adds	r1, r4, r5
 801eff4:	42a3      	cmp	r3, r4
 801eff6:	6025      	str	r5, [r4, #0]
 801eff8:	bf18      	it	ne
 801effa:	6059      	strne	r1, [r3, #4]
 801effc:	6863      	ldr	r3, [r4, #4]
 801effe:	bf08      	it	eq
 801f000:	f8c8 1000 	streq.w	r1, [r8]
 801f004:	5162      	str	r2, [r4, r5]
 801f006:	604b      	str	r3, [r1, #4]
 801f008:	4630      	mov	r0, r6
 801f00a:	f000 f82f 	bl	801f06c <__malloc_unlock>
 801f00e:	f104 000b 	add.w	r0, r4, #11
 801f012:	1d23      	adds	r3, r4, #4
 801f014:	f020 0007 	bic.w	r0, r0, #7
 801f018:	1ac2      	subs	r2, r0, r3
 801f01a:	bf1c      	itt	ne
 801f01c:	1a1b      	subne	r3, r3, r0
 801f01e:	50a3      	strne	r3, [r4, r2]
 801f020:	e7af      	b.n	801ef82 <_malloc_r+0x22>
 801f022:	6862      	ldr	r2, [r4, #4]
 801f024:	42a3      	cmp	r3, r4
 801f026:	bf0c      	ite	eq
 801f028:	f8c8 2000 	streq.w	r2, [r8]
 801f02c:	605a      	strne	r2, [r3, #4]
 801f02e:	e7eb      	b.n	801f008 <_malloc_r+0xa8>
 801f030:	4623      	mov	r3, r4
 801f032:	6864      	ldr	r4, [r4, #4]
 801f034:	e7ae      	b.n	801ef94 <_malloc_r+0x34>
 801f036:	463c      	mov	r4, r7
 801f038:	687f      	ldr	r7, [r7, #4]
 801f03a:	e7b6      	b.n	801efaa <_malloc_r+0x4a>
 801f03c:	461a      	mov	r2, r3
 801f03e:	685b      	ldr	r3, [r3, #4]
 801f040:	42a3      	cmp	r3, r4
 801f042:	d1fb      	bne.n	801f03c <_malloc_r+0xdc>
 801f044:	2300      	movs	r3, #0
 801f046:	6053      	str	r3, [r2, #4]
 801f048:	e7de      	b.n	801f008 <_malloc_r+0xa8>
 801f04a:	230c      	movs	r3, #12
 801f04c:	6033      	str	r3, [r6, #0]
 801f04e:	4630      	mov	r0, r6
 801f050:	f000 f80c 	bl	801f06c <__malloc_unlock>
 801f054:	e794      	b.n	801ef80 <_malloc_r+0x20>
 801f056:	6005      	str	r5, [r0, #0]
 801f058:	e7d6      	b.n	801f008 <_malloc_r+0xa8>
 801f05a:	bf00      	nop
 801f05c:	20002660 	.word	0x20002660

0801f060 <__malloc_lock>:
 801f060:	4801      	ldr	r0, [pc, #4]	@ (801f068 <__malloc_lock+0x8>)
 801f062:	f7ff b8ac 	b.w	801e1be <__retarget_lock_acquire_recursive>
 801f066:	bf00      	nop
 801f068:	20002658 	.word	0x20002658

0801f06c <__malloc_unlock>:
 801f06c:	4801      	ldr	r0, [pc, #4]	@ (801f074 <__malloc_unlock+0x8>)
 801f06e:	f7ff b8a7 	b.w	801e1c0 <__retarget_lock_release_recursive>
 801f072:	bf00      	nop
 801f074:	20002658 	.word	0x20002658

0801f078 <_Balloc>:
 801f078:	b570      	push	{r4, r5, r6, lr}
 801f07a:	69c6      	ldr	r6, [r0, #28]
 801f07c:	4604      	mov	r4, r0
 801f07e:	460d      	mov	r5, r1
 801f080:	b976      	cbnz	r6, 801f0a0 <_Balloc+0x28>
 801f082:	2010      	movs	r0, #16
 801f084:	f7ff ff42 	bl	801ef0c <malloc>
 801f088:	4602      	mov	r2, r0
 801f08a:	61e0      	str	r0, [r4, #28]
 801f08c:	b920      	cbnz	r0, 801f098 <_Balloc+0x20>
 801f08e:	4b18      	ldr	r3, [pc, #96]	@ (801f0f0 <_Balloc+0x78>)
 801f090:	4818      	ldr	r0, [pc, #96]	@ (801f0f4 <_Balloc+0x7c>)
 801f092:	216b      	movs	r1, #107	@ 0x6b
 801f094:	f000 fda0 	bl	801fbd8 <__assert_func>
 801f098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f09c:	6006      	str	r6, [r0, #0]
 801f09e:	60c6      	str	r6, [r0, #12]
 801f0a0:	69e6      	ldr	r6, [r4, #28]
 801f0a2:	68f3      	ldr	r3, [r6, #12]
 801f0a4:	b183      	cbz	r3, 801f0c8 <_Balloc+0x50>
 801f0a6:	69e3      	ldr	r3, [r4, #28]
 801f0a8:	68db      	ldr	r3, [r3, #12]
 801f0aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f0ae:	b9b8      	cbnz	r0, 801f0e0 <_Balloc+0x68>
 801f0b0:	2101      	movs	r1, #1
 801f0b2:	fa01 f605 	lsl.w	r6, r1, r5
 801f0b6:	1d72      	adds	r2, r6, #5
 801f0b8:	0092      	lsls	r2, r2, #2
 801f0ba:	4620      	mov	r0, r4
 801f0bc:	f000 fdaa 	bl	801fc14 <_calloc_r>
 801f0c0:	b160      	cbz	r0, 801f0dc <_Balloc+0x64>
 801f0c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f0c6:	e00e      	b.n	801f0e6 <_Balloc+0x6e>
 801f0c8:	2221      	movs	r2, #33	@ 0x21
 801f0ca:	2104      	movs	r1, #4
 801f0cc:	4620      	mov	r0, r4
 801f0ce:	f000 fda1 	bl	801fc14 <_calloc_r>
 801f0d2:	69e3      	ldr	r3, [r4, #28]
 801f0d4:	60f0      	str	r0, [r6, #12]
 801f0d6:	68db      	ldr	r3, [r3, #12]
 801f0d8:	2b00      	cmp	r3, #0
 801f0da:	d1e4      	bne.n	801f0a6 <_Balloc+0x2e>
 801f0dc:	2000      	movs	r0, #0
 801f0de:	bd70      	pop	{r4, r5, r6, pc}
 801f0e0:	6802      	ldr	r2, [r0, #0]
 801f0e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f0e6:	2300      	movs	r3, #0
 801f0e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f0ec:	e7f7      	b.n	801f0de <_Balloc+0x66>
 801f0ee:	bf00      	nop
 801f0f0:	080217b1 	.word	0x080217b1
 801f0f4:	08021831 	.word	0x08021831

0801f0f8 <_Bfree>:
 801f0f8:	b570      	push	{r4, r5, r6, lr}
 801f0fa:	69c6      	ldr	r6, [r0, #28]
 801f0fc:	4605      	mov	r5, r0
 801f0fe:	460c      	mov	r4, r1
 801f100:	b976      	cbnz	r6, 801f120 <_Bfree+0x28>
 801f102:	2010      	movs	r0, #16
 801f104:	f7ff ff02 	bl	801ef0c <malloc>
 801f108:	4602      	mov	r2, r0
 801f10a:	61e8      	str	r0, [r5, #28]
 801f10c:	b920      	cbnz	r0, 801f118 <_Bfree+0x20>
 801f10e:	4b09      	ldr	r3, [pc, #36]	@ (801f134 <_Bfree+0x3c>)
 801f110:	4809      	ldr	r0, [pc, #36]	@ (801f138 <_Bfree+0x40>)
 801f112:	218f      	movs	r1, #143	@ 0x8f
 801f114:	f000 fd60 	bl	801fbd8 <__assert_func>
 801f118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f11c:	6006      	str	r6, [r0, #0]
 801f11e:	60c6      	str	r6, [r0, #12]
 801f120:	b13c      	cbz	r4, 801f132 <_Bfree+0x3a>
 801f122:	69eb      	ldr	r3, [r5, #28]
 801f124:	6862      	ldr	r2, [r4, #4]
 801f126:	68db      	ldr	r3, [r3, #12]
 801f128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f12c:	6021      	str	r1, [r4, #0]
 801f12e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f132:	bd70      	pop	{r4, r5, r6, pc}
 801f134:	080217b1 	.word	0x080217b1
 801f138:	08021831 	.word	0x08021831

0801f13c <__multadd>:
 801f13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f140:	690d      	ldr	r5, [r1, #16]
 801f142:	4607      	mov	r7, r0
 801f144:	460c      	mov	r4, r1
 801f146:	461e      	mov	r6, r3
 801f148:	f101 0c14 	add.w	ip, r1, #20
 801f14c:	2000      	movs	r0, #0
 801f14e:	f8dc 3000 	ldr.w	r3, [ip]
 801f152:	b299      	uxth	r1, r3
 801f154:	fb02 6101 	mla	r1, r2, r1, r6
 801f158:	0c1e      	lsrs	r6, r3, #16
 801f15a:	0c0b      	lsrs	r3, r1, #16
 801f15c:	fb02 3306 	mla	r3, r2, r6, r3
 801f160:	b289      	uxth	r1, r1
 801f162:	3001      	adds	r0, #1
 801f164:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f168:	4285      	cmp	r5, r0
 801f16a:	f84c 1b04 	str.w	r1, [ip], #4
 801f16e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f172:	dcec      	bgt.n	801f14e <__multadd+0x12>
 801f174:	b30e      	cbz	r6, 801f1ba <__multadd+0x7e>
 801f176:	68a3      	ldr	r3, [r4, #8]
 801f178:	42ab      	cmp	r3, r5
 801f17a:	dc19      	bgt.n	801f1b0 <__multadd+0x74>
 801f17c:	6861      	ldr	r1, [r4, #4]
 801f17e:	4638      	mov	r0, r7
 801f180:	3101      	adds	r1, #1
 801f182:	f7ff ff79 	bl	801f078 <_Balloc>
 801f186:	4680      	mov	r8, r0
 801f188:	b928      	cbnz	r0, 801f196 <__multadd+0x5a>
 801f18a:	4602      	mov	r2, r0
 801f18c:	4b0c      	ldr	r3, [pc, #48]	@ (801f1c0 <__multadd+0x84>)
 801f18e:	480d      	ldr	r0, [pc, #52]	@ (801f1c4 <__multadd+0x88>)
 801f190:	21ba      	movs	r1, #186	@ 0xba
 801f192:	f000 fd21 	bl	801fbd8 <__assert_func>
 801f196:	6922      	ldr	r2, [r4, #16]
 801f198:	3202      	adds	r2, #2
 801f19a:	f104 010c 	add.w	r1, r4, #12
 801f19e:	0092      	lsls	r2, r2, #2
 801f1a0:	300c      	adds	r0, #12
 801f1a2:	f000 fd0b 	bl	801fbbc <memcpy>
 801f1a6:	4621      	mov	r1, r4
 801f1a8:	4638      	mov	r0, r7
 801f1aa:	f7ff ffa5 	bl	801f0f8 <_Bfree>
 801f1ae:	4644      	mov	r4, r8
 801f1b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f1b4:	3501      	adds	r5, #1
 801f1b6:	615e      	str	r6, [r3, #20]
 801f1b8:	6125      	str	r5, [r4, #16]
 801f1ba:	4620      	mov	r0, r4
 801f1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1c0:	08021820 	.word	0x08021820
 801f1c4:	08021831 	.word	0x08021831

0801f1c8 <__hi0bits>:
 801f1c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801f1cc:	4603      	mov	r3, r0
 801f1ce:	bf36      	itet	cc
 801f1d0:	0403      	lslcc	r3, r0, #16
 801f1d2:	2000      	movcs	r0, #0
 801f1d4:	2010      	movcc	r0, #16
 801f1d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f1da:	bf3c      	itt	cc
 801f1dc:	021b      	lslcc	r3, r3, #8
 801f1de:	3008      	addcc	r0, #8
 801f1e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f1e4:	bf3c      	itt	cc
 801f1e6:	011b      	lslcc	r3, r3, #4
 801f1e8:	3004      	addcc	r0, #4
 801f1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f1ee:	bf3c      	itt	cc
 801f1f0:	009b      	lslcc	r3, r3, #2
 801f1f2:	3002      	addcc	r0, #2
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	db05      	blt.n	801f204 <__hi0bits+0x3c>
 801f1f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801f1fc:	f100 0001 	add.w	r0, r0, #1
 801f200:	bf08      	it	eq
 801f202:	2020      	moveq	r0, #32
 801f204:	4770      	bx	lr

0801f206 <__lo0bits>:
 801f206:	6803      	ldr	r3, [r0, #0]
 801f208:	4602      	mov	r2, r0
 801f20a:	f013 0007 	ands.w	r0, r3, #7
 801f20e:	d00b      	beq.n	801f228 <__lo0bits+0x22>
 801f210:	07d9      	lsls	r1, r3, #31
 801f212:	d421      	bmi.n	801f258 <__lo0bits+0x52>
 801f214:	0798      	lsls	r0, r3, #30
 801f216:	bf49      	itett	mi
 801f218:	085b      	lsrmi	r3, r3, #1
 801f21a:	089b      	lsrpl	r3, r3, #2
 801f21c:	2001      	movmi	r0, #1
 801f21e:	6013      	strmi	r3, [r2, #0]
 801f220:	bf5c      	itt	pl
 801f222:	6013      	strpl	r3, [r2, #0]
 801f224:	2002      	movpl	r0, #2
 801f226:	4770      	bx	lr
 801f228:	b299      	uxth	r1, r3
 801f22a:	b909      	cbnz	r1, 801f230 <__lo0bits+0x2a>
 801f22c:	0c1b      	lsrs	r3, r3, #16
 801f22e:	2010      	movs	r0, #16
 801f230:	b2d9      	uxtb	r1, r3
 801f232:	b909      	cbnz	r1, 801f238 <__lo0bits+0x32>
 801f234:	3008      	adds	r0, #8
 801f236:	0a1b      	lsrs	r3, r3, #8
 801f238:	0719      	lsls	r1, r3, #28
 801f23a:	bf04      	itt	eq
 801f23c:	091b      	lsreq	r3, r3, #4
 801f23e:	3004      	addeq	r0, #4
 801f240:	0799      	lsls	r1, r3, #30
 801f242:	bf04      	itt	eq
 801f244:	089b      	lsreq	r3, r3, #2
 801f246:	3002      	addeq	r0, #2
 801f248:	07d9      	lsls	r1, r3, #31
 801f24a:	d403      	bmi.n	801f254 <__lo0bits+0x4e>
 801f24c:	085b      	lsrs	r3, r3, #1
 801f24e:	f100 0001 	add.w	r0, r0, #1
 801f252:	d003      	beq.n	801f25c <__lo0bits+0x56>
 801f254:	6013      	str	r3, [r2, #0]
 801f256:	4770      	bx	lr
 801f258:	2000      	movs	r0, #0
 801f25a:	4770      	bx	lr
 801f25c:	2020      	movs	r0, #32
 801f25e:	4770      	bx	lr

0801f260 <__i2b>:
 801f260:	b510      	push	{r4, lr}
 801f262:	460c      	mov	r4, r1
 801f264:	2101      	movs	r1, #1
 801f266:	f7ff ff07 	bl	801f078 <_Balloc>
 801f26a:	4602      	mov	r2, r0
 801f26c:	b928      	cbnz	r0, 801f27a <__i2b+0x1a>
 801f26e:	4b05      	ldr	r3, [pc, #20]	@ (801f284 <__i2b+0x24>)
 801f270:	4805      	ldr	r0, [pc, #20]	@ (801f288 <__i2b+0x28>)
 801f272:	f240 1145 	movw	r1, #325	@ 0x145
 801f276:	f000 fcaf 	bl	801fbd8 <__assert_func>
 801f27a:	2301      	movs	r3, #1
 801f27c:	6144      	str	r4, [r0, #20]
 801f27e:	6103      	str	r3, [r0, #16]
 801f280:	bd10      	pop	{r4, pc}
 801f282:	bf00      	nop
 801f284:	08021820 	.word	0x08021820
 801f288:	08021831 	.word	0x08021831

0801f28c <__multiply>:
 801f28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f290:	4617      	mov	r7, r2
 801f292:	690a      	ldr	r2, [r1, #16]
 801f294:	693b      	ldr	r3, [r7, #16]
 801f296:	429a      	cmp	r2, r3
 801f298:	bfa8      	it	ge
 801f29a:	463b      	movge	r3, r7
 801f29c:	4689      	mov	r9, r1
 801f29e:	bfa4      	itt	ge
 801f2a0:	460f      	movge	r7, r1
 801f2a2:	4699      	movge	r9, r3
 801f2a4:	693d      	ldr	r5, [r7, #16]
 801f2a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f2aa:	68bb      	ldr	r3, [r7, #8]
 801f2ac:	6879      	ldr	r1, [r7, #4]
 801f2ae:	eb05 060a 	add.w	r6, r5, sl
 801f2b2:	42b3      	cmp	r3, r6
 801f2b4:	b085      	sub	sp, #20
 801f2b6:	bfb8      	it	lt
 801f2b8:	3101      	addlt	r1, #1
 801f2ba:	f7ff fedd 	bl	801f078 <_Balloc>
 801f2be:	b930      	cbnz	r0, 801f2ce <__multiply+0x42>
 801f2c0:	4602      	mov	r2, r0
 801f2c2:	4b41      	ldr	r3, [pc, #260]	@ (801f3c8 <__multiply+0x13c>)
 801f2c4:	4841      	ldr	r0, [pc, #260]	@ (801f3cc <__multiply+0x140>)
 801f2c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801f2ca:	f000 fc85 	bl	801fbd8 <__assert_func>
 801f2ce:	f100 0414 	add.w	r4, r0, #20
 801f2d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801f2d6:	4623      	mov	r3, r4
 801f2d8:	2200      	movs	r2, #0
 801f2da:	4573      	cmp	r3, lr
 801f2dc:	d320      	bcc.n	801f320 <__multiply+0x94>
 801f2de:	f107 0814 	add.w	r8, r7, #20
 801f2e2:	f109 0114 	add.w	r1, r9, #20
 801f2e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801f2ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801f2ee:	9302      	str	r3, [sp, #8]
 801f2f0:	1beb      	subs	r3, r5, r7
 801f2f2:	3b15      	subs	r3, #21
 801f2f4:	f023 0303 	bic.w	r3, r3, #3
 801f2f8:	3304      	adds	r3, #4
 801f2fa:	3715      	adds	r7, #21
 801f2fc:	42bd      	cmp	r5, r7
 801f2fe:	bf38      	it	cc
 801f300:	2304      	movcc	r3, #4
 801f302:	9301      	str	r3, [sp, #4]
 801f304:	9b02      	ldr	r3, [sp, #8]
 801f306:	9103      	str	r1, [sp, #12]
 801f308:	428b      	cmp	r3, r1
 801f30a:	d80c      	bhi.n	801f326 <__multiply+0x9a>
 801f30c:	2e00      	cmp	r6, #0
 801f30e:	dd03      	ble.n	801f318 <__multiply+0x8c>
 801f310:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801f314:	2b00      	cmp	r3, #0
 801f316:	d055      	beq.n	801f3c4 <__multiply+0x138>
 801f318:	6106      	str	r6, [r0, #16]
 801f31a:	b005      	add	sp, #20
 801f31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f320:	f843 2b04 	str.w	r2, [r3], #4
 801f324:	e7d9      	b.n	801f2da <__multiply+0x4e>
 801f326:	f8b1 a000 	ldrh.w	sl, [r1]
 801f32a:	f1ba 0f00 	cmp.w	sl, #0
 801f32e:	d01f      	beq.n	801f370 <__multiply+0xe4>
 801f330:	46c4      	mov	ip, r8
 801f332:	46a1      	mov	r9, r4
 801f334:	2700      	movs	r7, #0
 801f336:	f85c 2b04 	ldr.w	r2, [ip], #4
 801f33a:	f8d9 3000 	ldr.w	r3, [r9]
 801f33e:	fa1f fb82 	uxth.w	fp, r2
 801f342:	b29b      	uxth	r3, r3
 801f344:	fb0a 330b 	mla	r3, sl, fp, r3
 801f348:	443b      	add	r3, r7
 801f34a:	f8d9 7000 	ldr.w	r7, [r9]
 801f34e:	0c12      	lsrs	r2, r2, #16
 801f350:	0c3f      	lsrs	r7, r7, #16
 801f352:	fb0a 7202 	mla	r2, sl, r2, r7
 801f356:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801f35a:	b29b      	uxth	r3, r3
 801f35c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f360:	4565      	cmp	r5, ip
 801f362:	f849 3b04 	str.w	r3, [r9], #4
 801f366:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801f36a:	d8e4      	bhi.n	801f336 <__multiply+0xaa>
 801f36c:	9b01      	ldr	r3, [sp, #4]
 801f36e:	50e7      	str	r7, [r4, r3]
 801f370:	9b03      	ldr	r3, [sp, #12]
 801f372:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801f376:	3104      	adds	r1, #4
 801f378:	f1b9 0f00 	cmp.w	r9, #0
 801f37c:	d020      	beq.n	801f3c0 <__multiply+0x134>
 801f37e:	6823      	ldr	r3, [r4, #0]
 801f380:	4647      	mov	r7, r8
 801f382:	46a4      	mov	ip, r4
 801f384:	f04f 0a00 	mov.w	sl, #0
 801f388:	f8b7 b000 	ldrh.w	fp, [r7]
 801f38c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801f390:	fb09 220b 	mla	r2, r9, fp, r2
 801f394:	4452      	add	r2, sl
 801f396:	b29b      	uxth	r3, r3
 801f398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f39c:	f84c 3b04 	str.w	r3, [ip], #4
 801f3a0:	f857 3b04 	ldr.w	r3, [r7], #4
 801f3a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f3a8:	f8bc 3000 	ldrh.w	r3, [ip]
 801f3ac:	fb09 330a 	mla	r3, r9, sl, r3
 801f3b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801f3b4:	42bd      	cmp	r5, r7
 801f3b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f3ba:	d8e5      	bhi.n	801f388 <__multiply+0xfc>
 801f3bc:	9a01      	ldr	r2, [sp, #4]
 801f3be:	50a3      	str	r3, [r4, r2]
 801f3c0:	3404      	adds	r4, #4
 801f3c2:	e79f      	b.n	801f304 <__multiply+0x78>
 801f3c4:	3e01      	subs	r6, #1
 801f3c6:	e7a1      	b.n	801f30c <__multiply+0x80>
 801f3c8:	08021820 	.word	0x08021820
 801f3cc:	08021831 	.word	0x08021831

0801f3d0 <__pow5mult>:
 801f3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f3d4:	4615      	mov	r5, r2
 801f3d6:	f012 0203 	ands.w	r2, r2, #3
 801f3da:	4607      	mov	r7, r0
 801f3dc:	460e      	mov	r6, r1
 801f3de:	d007      	beq.n	801f3f0 <__pow5mult+0x20>
 801f3e0:	4c25      	ldr	r4, [pc, #148]	@ (801f478 <__pow5mult+0xa8>)
 801f3e2:	3a01      	subs	r2, #1
 801f3e4:	2300      	movs	r3, #0
 801f3e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f3ea:	f7ff fea7 	bl	801f13c <__multadd>
 801f3ee:	4606      	mov	r6, r0
 801f3f0:	10ad      	asrs	r5, r5, #2
 801f3f2:	d03d      	beq.n	801f470 <__pow5mult+0xa0>
 801f3f4:	69fc      	ldr	r4, [r7, #28]
 801f3f6:	b97c      	cbnz	r4, 801f418 <__pow5mult+0x48>
 801f3f8:	2010      	movs	r0, #16
 801f3fa:	f7ff fd87 	bl	801ef0c <malloc>
 801f3fe:	4602      	mov	r2, r0
 801f400:	61f8      	str	r0, [r7, #28]
 801f402:	b928      	cbnz	r0, 801f410 <__pow5mult+0x40>
 801f404:	4b1d      	ldr	r3, [pc, #116]	@ (801f47c <__pow5mult+0xac>)
 801f406:	481e      	ldr	r0, [pc, #120]	@ (801f480 <__pow5mult+0xb0>)
 801f408:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801f40c:	f000 fbe4 	bl	801fbd8 <__assert_func>
 801f410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f414:	6004      	str	r4, [r0, #0]
 801f416:	60c4      	str	r4, [r0, #12]
 801f418:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801f41c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f420:	b94c      	cbnz	r4, 801f436 <__pow5mult+0x66>
 801f422:	f240 2171 	movw	r1, #625	@ 0x271
 801f426:	4638      	mov	r0, r7
 801f428:	f7ff ff1a 	bl	801f260 <__i2b>
 801f42c:	2300      	movs	r3, #0
 801f42e:	f8c8 0008 	str.w	r0, [r8, #8]
 801f432:	4604      	mov	r4, r0
 801f434:	6003      	str	r3, [r0, #0]
 801f436:	f04f 0900 	mov.w	r9, #0
 801f43a:	07eb      	lsls	r3, r5, #31
 801f43c:	d50a      	bpl.n	801f454 <__pow5mult+0x84>
 801f43e:	4631      	mov	r1, r6
 801f440:	4622      	mov	r2, r4
 801f442:	4638      	mov	r0, r7
 801f444:	f7ff ff22 	bl	801f28c <__multiply>
 801f448:	4631      	mov	r1, r6
 801f44a:	4680      	mov	r8, r0
 801f44c:	4638      	mov	r0, r7
 801f44e:	f7ff fe53 	bl	801f0f8 <_Bfree>
 801f452:	4646      	mov	r6, r8
 801f454:	106d      	asrs	r5, r5, #1
 801f456:	d00b      	beq.n	801f470 <__pow5mult+0xa0>
 801f458:	6820      	ldr	r0, [r4, #0]
 801f45a:	b938      	cbnz	r0, 801f46c <__pow5mult+0x9c>
 801f45c:	4622      	mov	r2, r4
 801f45e:	4621      	mov	r1, r4
 801f460:	4638      	mov	r0, r7
 801f462:	f7ff ff13 	bl	801f28c <__multiply>
 801f466:	6020      	str	r0, [r4, #0]
 801f468:	f8c0 9000 	str.w	r9, [r0]
 801f46c:	4604      	mov	r4, r0
 801f46e:	e7e4      	b.n	801f43a <__pow5mult+0x6a>
 801f470:	4630      	mov	r0, r6
 801f472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f476:	bf00      	nop
 801f478:	080218e4 	.word	0x080218e4
 801f47c:	080217b1 	.word	0x080217b1
 801f480:	08021831 	.word	0x08021831

0801f484 <__lshift>:
 801f484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f488:	460c      	mov	r4, r1
 801f48a:	6849      	ldr	r1, [r1, #4]
 801f48c:	6923      	ldr	r3, [r4, #16]
 801f48e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f492:	68a3      	ldr	r3, [r4, #8]
 801f494:	4607      	mov	r7, r0
 801f496:	4691      	mov	r9, r2
 801f498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f49c:	f108 0601 	add.w	r6, r8, #1
 801f4a0:	42b3      	cmp	r3, r6
 801f4a2:	db0b      	blt.n	801f4bc <__lshift+0x38>
 801f4a4:	4638      	mov	r0, r7
 801f4a6:	f7ff fde7 	bl	801f078 <_Balloc>
 801f4aa:	4605      	mov	r5, r0
 801f4ac:	b948      	cbnz	r0, 801f4c2 <__lshift+0x3e>
 801f4ae:	4602      	mov	r2, r0
 801f4b0:	4b28      	ldr	r3, [pc, #160]	@ (801f554 <__lshift+0xd0>)
 801f4b2:	4829      	ldr	r0, [pc, #164]	@ (801f558 <__lshift+0xd4>)
 801f4b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801f4b8:	f000 fb8e 	bl	801fbd8 <__assert_func>
 801f4bc:	3101      	adds	r1, #1
 801f4be:	005b      	lsls	r3, r3, #1
 801f4c0:	e7ee      	b.n	801f4a0 <__lshift+0x1c>
 801f4c2:	2300      	movs	r3, #0
 801f4c4:	f100 0114 	add.w	r1, r0, #20
 801f4c8:	f100 0210 	add.w	r2, r0, #16
 801f4cc:	4618      	mov	r0, r3
 801f4ce:	4553      	cmp	r3, sl
 801f4d0:	db33      	blt.n	801f53a <__lshift+0xb6>
 801f4d2:	6920      	ldr	r0, [r4, #16]
 801f4d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f4d8:	f104 0314 	add.w	r3, r4, #20
 801f4dc:	f019 091f 	ands.w	r9, r9, #31
 801f4e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f4e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f4e8:	d02b      	beq.n	801f542 <__lshift+0xbe>
 801f4ea:	f1c9 0e20 	rsb	lr, r9, #32
 801f4ee:	468a      	mov	sl, r1
 801f4f0:	2200      	movs	r2, #0
 801f4f2:	6818      	ldr	r0, [r3, #0]
 801f4f4:	fa00 f009 	lsl.w	r0, r0, r9
 801f4f8:	4310      	orrs	r0, r2
 801f4fa:	f84a 0b04 	str.w	r0, [sl], #4
 801f4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 801f502:	459c      	cmp	ip, r3
 801f504:	fa22 f20e 	lsr.w	r2, r2, lr
 801f508:	d8f3      	bhi.n	801f4f2 <__lshift+0x6e>
 801f50a:	ebac 0304 	sub.w	r3, ip, r4
 801f50e:	3b15      	subs	r3, #21
 801f510:	f023 0303 	bic.w	r3, r3, #3
 801f514:	3304      	adds	r3, #4
 801f516:	f104 0015 	add.w	r0, r4, #21
 801f51a:	4560      	cmp	r0, ip
 801f51c:	bf88      	it	hi
 801f51e:	2304      	movhi	r3, #4
 801f520:	50ca      	str	r2, [r1, r3]
 801f522:	b10a      	cbz	r2, 801f528 <__lshift+0xa4>
 801f524:	f108 0602 	add.w	r6, r8, #2
 801f528:	3e01      	subs	r6, #1
 801f52a:	4638      	mov	r0, r7
 801f52c:	612e      	str	r6, [r5, #16]
 801f52e:	4621      	mov	r1, r4
 801f530:	f7ff fde2 	bl	801f0f8 <_Bfree>
 801f534:	4628      	mov	r0, r5
 801f536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f53a:	f842 0f04 	str.w	r0, [r2, #4]!
 801f53e:	3301      	adds	r3, #1
 801f540:	e7c5      	b.n	801f4ce <__lshift+0x4a>
 801f542:	3904      	subs	r1, #4
 801f544:	f853 2b04 	ldr.w	r2, [r3], #4
 801f548:	f841 2f04 	str.w	r2, [r1, #4]!
 801f54c:	459c      	cmp	ip, r3
 801f54e:	d8f9      	bhi.n	801f544 <__lshift+0xc0>
 801f550:	e7ea      	b.n	801f528 <__lshift+0xa4>
 801f552:	bf00      	nop
 801f554:	08021820 	.word	0x08021820
 801f558:	08021831 	.word	0x08021831

0801f55c <__mcmp>:
 801f55c:	690a      	ldr	r2, [r1, #16]
 801f55e:	4603      	mov	r3, r0
 801f560:	6900      	ldr	r0, [r0, #16]
 801f562:	1a80      	subs	r0, r0, r2
 801f564:	b530      	push	{r4, r5, lr}
 801f566:	d10e      	bne.n	801f586 <__mcmp+0x2a>
 801f568:	3314      	adds	r3, #20
 801f56a:	3114      	adds	r1, #20
 801f56c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f570:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f574:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f578:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f57c:	4295      	cmp	r5, r2
 801f57e:	d003      	beq.n	801f588 <__mcmp+0x2c>
 801f580:	d205      	bcs.n	801f58e <__mcmp+0x32>
 801f582:	f04f 30ff 	mov.w	r0, #4294967295
 801f586:	bd30      	pop	{r4, r5, pc}
 801f588:	42a3      	cmp	r3, r4
 801f58a:	d3f3      	bcc.n	801f574 <__mcmp+0x18>
 801f58c:	e7fb      	b.n	801f586 <__mcmp+0x2a>
 801f58e:	2001      	movs	r0, #1
 801f590:	e7f9      	b.n	801f586 <__mcmp+0x2a>
	...

0801f594 <__mdiff>:
 801f594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f598:	4689      	mov	r9, r1
 801f59a:	4606      	mov	r6, r0
 801f59c:	4611      	mov	r1, r2
 801f59e:	4648      	mov	r0, r9
 801f5a0:	4614      	mov	r4, r2
 801f5a2:	f7ff ffdb 	bl	801f55c <__mcmp>
 801f5a6:	1e05      	subs	r5, r0, #0
 801f5a8:	d112      	bne.n	801f5d0 <__mdiff+0x3c>
 801f5aa:	4629      	mov	r1, r5
 801f5ac:	4630      	mov	r0, r6
 801f5ae:	f7ff fd63 	bl	801f078 <_Balloc>
 801f5b2:	4602      	mov	r2, r0
 801f5b4:	b928      	cbnz	r0, 801f5c2 <__mdiff+0x2e>
 801f5b6:	4b3e      	ldr	r3, [pc, #248]	@ (801f6b0 <__mdiff+0x11c>)
 801f5b8:	f240 2137 	movw	r1, #567	@ 0x237
 801f5bc:	483d      	ldr	r0, [pc, #244]	@ (801f6b4 <__mdiff+0x120>)
 801f5be:	f000 fb0b 	bl	801fbd8 <__assert_func>
 801f5c2:	2301      	movs	r3, #1
 801f5c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f5c8:	4610      	mov	r0, r2
 801f5ca:	b003      	add	sp, #12
 801f5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5d0:	bfbc      	itt	lt
 801f5d2:	464b      	movlt	r3, r9
 801f5d4:	46a1      	movlt	r9, r4
 801f5d6:	4630      	mov	r0, r6
 801f5d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f5dc:	bfba      	itte	lt
 801f5de:	461c      	movlt	r4, r3
 801f5e0:	2501      	movlt	r5, #1
 801f5e2:	2500      	movge	r5, #0
 801f5e4:	f7ff fd48 	bl	801f078 <_Balloc>
 801f5e8:	4602      	mov	r2, r0
 801f5ea:	b918      	cbnz	r0, 801f5f4 <__mdiff+0x60>
 801f5ec:	4b30      	ldr	r3, [pc, #192]	@ (801f6b0 <__mdiff+0x11c>)
 801f5ee:	f240 2145 	movw	r1, #581	@ 0x245
 801f5f2:	e7e3      	b.n	801f5bc <__mdiff+0x28>
 801f5f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f5f8:	6926      	ldr	r6, [r4, #16]
 801f5fa:	60c5      	str	r5, [r0, #12]
 801f5fc:	f109 0310 	add.w	r3, r9, #16
 801f600:	f109 0514 	add.w	r5, r9, #20
 801f604:	f104 0e14 	add.w	lr, r4, #20
 801f608:	f100 0b14 	add.w	fp, r0, #20
 801f60c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f610:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f614:	9301      	str	r3, [sp, #4]
 801f616:	46d9      	mov	r9, fp
 801f618:	f04f 0c00 	mov.w	ip, #0
 801f61c:	9b01      	ldr	r3, [sp, #4]
 801f61e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f622:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f626:	9301      	str	r3, [sp, #4]
 801f628:	b281      	uxth	r1, r0
 801f62a:	fa1f f38a 	uxth.w	r3, sl
 801f62e:	1a5b      	subs	r3, r3, r1
 801f630:	0c00      	lsrs	r0, r0, #16
 801f632:	4463      	add	r3, ip
 801f634:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f638:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f63c:	b29b      	uxth	r3, r3
 801f63e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f642:	4576      	cmp	r6, lr
 801f644:	f849 3b04 	str.w	r3, [r9], #4
 801f648:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f64c:	d8e6      	bhi.n	801f61c <__mdiff+0x88>
 801f64e:	1b33      	subs	r3, r6, r4
 801f650:	3b15      	subs	r3, #21
 801f652:	f023 0303 	bic.w	r3, r3, #3
 801f656:	3415      	adds	r4, #21
 801f658:	3304      	adds	r3, #4
 801f65a:	42a6      	cmp	r6, r4
 801f65c:	bf38      	it	cc
 801f65e:	2304      	movcc	r3, #4
 801f660:	441d      	add	r5, r3
 801f662:	445b      	add	r3, fp
 801f664:	461e      	mov	r6, r3
 801f666:	462c      	mov	r4, r5
 801f668:	4544      	cmp	r4, r8
 801f66a:	d30e      	bcc.n	801f68a <__mdiff+0xf6>
 801f66c:	f108 0103 	add.w	r1, r8, #3
 801f670:	1b49      	subs	r1, r1, r5
 801f672:	f021 0103 	bic.w	r1, r1, #3
 801f676:	3d03      	subs	r5, #3
 801f678:	45a8      	cmp	r8, r5
 801f67a:	bf38      	it	cc
 801f67c:	2100      	movcc	r1, #0
 801f67e:	440b      	add	r3, r1
 801f680:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f684:	b191      	cbz	r1, 801f6ac <__mdiff+0x118>
 801f686:	6117      	str	r7, [r2, #16]
 801f688:	e79e      	b.n	801f5c8 <__mdiff+0x34>
 801f68a:	f854 1b04 	ldr.w	r1, [r4], #4
 801f68e:	46e6      	mov	lr, ip
 801f690:	0c08      	lsrs	r0, r1, #16
 801f692:	fa1c fc81 	uxtah	ip, ip, r1
 801f696:	4471      	add	r1, lr
 801f698:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801f69c:	b289      	uxth	r1, r1
 801f69e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f6a2:	f846 1b04 	str.w	r1, [r6], #4
 801f6a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f6aa:	e7dd      	b.n	801f668 <__mdiff+0xd4>
 801f6ac:	3f01      	subs	r7, #1
 801f6ae:	e7e7      	b.n	801f680 <__mdiff+0xec>
 801f6b0:	08021820 	.word	0x08021820
 801f6b4:	08021831 	.word	0x08021831

0801f6b8 <__d2b>:
 801f6b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801f6bc:	2101      	movs	r1, #1
 801f6be:	9e08      	ldr	r6, [sp, #32]
 801f6c0:	4690      	mov	r8, r2
 801f6c2:	4699      	mov	r9, r3
 801f6c4:	f7ff fcd8 	bl	801f078 <_Balloc>
 801f6c8:	4604      	mov	r4, r0
 801f6ca:	b930      	cbnz	r0, 801f6da <__d2b+0x22>
 801f6cc:	4602      	mov	r2, r0
 801f6ce:	4b24      	ldr	r3, [pc, #144]	@ (801f760 <__d2b+0xa8>)
 801f6d0:	4824      	ldr	r0, [pc, #144]	@ (801f764 <__d2b+0xac>)
 801f6d2:	f240 310f 	movw	r1, #783	@ 0x30f
 801f6d6:	f000 fa7f 	bl	801fbd8 <__assert_func>
 801f6da:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f6de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f6e2:	b10d      	cbz	r5, 801f6e8 <__d2b+0x30>
 801f6e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f6e8:	9301      	str	r3, [sp, #4]
 801f6ea:	f1b8 0300 	subs.w	r3, r8, #0
 801f6ee:	d024      	beq.n	801f73a <__d2b+0x82>
 801f6f0:	4668      	mov	r0, sp
 801f6f2:	9300      	str	r3, [sp, #0]
 801f6f4:	f7ff fd87 	bl	801f206 <__lo0bits>
 801f6f8:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f6fc:	b1d8      	cbz	r0, 801f736 <__d2b+0x7e>
 801f6fe:	f1c0 0320 	rsb	r3, r0, #32
 801f702:	fa02 f303 	lsl.w	r3, r2, r3
 801f706:	430b      	orrs	r3, r1
 801f708:	40c2      	lsrs	r2, r0
 801f70a:	6163      	str	r3, [r4, #20]
 801f70c:	9201      	str	r2, [sp, #4]
 801f70e:	9b01      	ldr	r3, [sp, #4]
 801f710:	61a3      	str	r3, [r4, #24]
 801f712:	2b00      	cmp	r3, #0
 801f714:	bf0c      	ite	eq
 801f716:	2201      	moveq	r2, #1
 801f718:	2202      	movne	r2, #2
 801f71a:	6122      	str	r2, [r4, #16]
 801f71c:	b1ad      	cbz	r5, 801f74a <__d2b+0x92>
 801f71e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f722:	4405      	add	r5, r0
 801f724:	6035      	str	r5, [r6, #0]
 801f726:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f72c:	6018      	str	r0, [r3, #0]
 801f72e:	4620      	mov	r0, r4
 801f730:	b002      	add	sp, #8
 801f732:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801f736:	6161      	str	r1, [r4, #20]
 801f738:	e7e9      	b.n	801f70e <__d2b+0x56>
 801f73a:	a801      	add	r0, sp, #4
 801f73c:	f7ff fd63 	bl	801f206 <__lo0bits>
 801f740:	9b01      	ldr	r3, [sp, #4]
 801f742:	6163      	str	r3, [r4, #20]
 801f744:	3020      	adds	r0, #32
 801f746:	2201      	movs	r2, #1
 801f748:	e7e7      	b.n	801f71a <__d2b+0x62>
 801f74a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f74e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f752:	6030      	str	r0, [r6, #0]
 801f754:	6918      	ldr	r0, [r3, #16]
 801f756:	f7ff fd37 	bl	801f1c8 <__hi0bits>
 801f75a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f75e:	e7e4      	b.n	801f72a <__d2b+0x72>
 801f760:	08021820 	.word	0x08021820
 801f764:	08021831 	.word	0x08021831

0801f768 <__ssputs_r>:
 801f768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f76c:	688e      	ldr	r6, [r1, #8]
 801f76e:	461f      	mov	r7, r3
 801f770:	42be      	cmp	r6, r7
 801f772:	680b      	ldr	r3, [r1, #0]
 801f774:	4682      	mov	sl, r0
 801f776:	460c      	mov	r4, r1
 801f778:	4690      	mov	r8, r2
 801f77a:	d82d      	bhi.n	801f7d8 <__ssputs_r+0x70>
 801f77c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f780:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801f784:	d026      	beq.n	801f7d4 <__ssputs_r+0x6c>
 801f786:	6965      	ldr	r5, [r4, #20]
 801f788:	6909      	ldr	r1, [r1, #16]
 801f78a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f78e:	eba3 0901 	sub.w	r9, r3, r1
 801f792:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f796:	1c7b      	adds	r3, r7, #1
 801f798:	444b      	add	r3, r9
 801f79a:	106d      	asrs	r5, r5, #1
 801f79c:	429d      	cmp	r5, r3
 801f79e:	bf38      	it	cc
 801f7a0:	461d      	movcc	r5, r3
 801f7a2:	0553      	lsls	r3, r2, #21
 801f7a4:	d527      	bpl.n	801f7f6 <__ssputs_r+0x8e>
 801f7a6:	4629      	mov	r1, r5
 801f7a8:	f7ff fbda 	bl	801ef60 <_malloc_r>
 801f7ac:	4606      	mov	r6, r0
 801f7ae:	b360      	cbz	r0, 801f80a <__ssputs_r+0xa2>
 801f7b0:	6921      	ldr	r1, [r4, #16]
 801f7b2:	464a      	mov	r2, r9
 801f7b4:	f000 fa02 	bl	801fbbc <memcpy>
 801f7b8:	89a3      	ldrh	r3, [r4, #12]
 801f7ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801f7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f7c2:	81a3      	strh	r3, [r4, #12]
 801f7c4:	6126      	str	r6, [r4, #16]
 801f7c6:	6165      	str	r5, [r4, #20]
 801f7c8:	444e      	add	r6, r9
 801f7ca:	eba5 0509 	sub.w	r5, r5, r9
 801f7ce:	6026      	str	r6, [r4, #0]
 801f7d0:	60a5      	str	r5, [r4, #8]
 801f7d2:	463e      	mov	r6, r7
 801f7d4:	42be      	cmp	r6, r7
 801f7d6:	d900      	bls.n	801f7da <__ssputs_r+0x72>
 801f7d8:	463e      	mov	r6, r7
 801f7da:	6820      	ldr	r0, [r4, #0]
 801f7dc:	4632      	mov	r2, r6
 801f7de:	4641      	mov	r1, r8
 801f7e0:	f000 f9c2 	bl	801fb68 <memmove>
 801f7e4:	68a3      	ldr	r3, [r4, #8]
 801f7e6:	1b9b      	subs	r3, r3, r6
 801f7e8:	60a3      	str	r3, [r4, #8]
 801f7ea:	6823      	ldr	r3, [r4, #0]
 801f7ec:	4433      	add	r3, r6
 801f7ee:	6023      	str	r3, [r4, #0]
 801f7f0:	2000      	movs	r0, #0
 801f7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f7f6:	462a      	mov	r2, r5
 801f7f8:	f000 fa32 	bl	801fc60 <_realloc_r>
 801f7fc:	4606      	mov	r6, r0
 801f7fe:	2800      	cmp	r0, #0
 801f800:	d1e0      	bne.n	801f7c4 <__ssputs_r+0x5c>
 801f802:	6921      	ldr	r1, [r4, #16]
 801f804:	4650      	mov	r0, sl
 801f806:	f7ff fb37 	bl	801ee78 <_free_r>
 801f80a:	230c      	movs	r3, #12
 801f80c:	f8ca 3000 	str.w	r3, [sl]
 801f810:	89a3      	ldrh	r3, [r4, #12]
 801f812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f816:	81a3      	strh	r3, [r4, #12]
 801f818:	f04f 30ff 	mov.w	r0, #4294967295
 801f81c:	e7e9      	b.n	801f7f2 <__ssputs_r+0x8a>
	...

0801f820 <_svfiprintf_r>:
 801f820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f824:	4698      	mov	r8, r3
 801f826:	898b      	ldrh	r3, [r1, #12]
 801f828:	061b      	lsls	r3, r3, #24
 801f82a:	b09d      	sub	sp, #116	@ 0x74
 801f82c:	4607      	mov	r7, r0
 801f82e:	460d      	mov	r5, r1
 801f830:	4614      	mov	r4, r2
 801f832:	d510      	bpl.n	801f856 <_svfiprintf_r+0x36>
 801f834:	690b      	ldr	r3, [r1, #16]
 801f836:	b973      	cbnz	r3, 801f856 <_svfiprintf_r+0x36>
 801f838:	2140      	movs	r1, #64	@ 0x40
 801f83a:	f7ff fb91 	bl	801ef60 <_malloc_r>
 801f83e:	6028      	str	r0, [r5, #0]
 801f840:	6128      	str	r0, [r5, #16]
 801f842:	b930      	cbnz	r0, 801f852 <_svfiprintf_r+0x32>
 801f844:	230c      	movs	r3, #12
 801f846:	603b      	str	r3, [r7, #0]
 801f848:	f04f 30ff 	mov.w	r0, #4294967295
 801f84c:	b01d      	add	sp, #116	@ 0x74
 801f84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f852:	2340      	movs	r3, #64	@ 0x40
 801f854:	616b      	str	r3, [r5, #20]
 801f856:	2300      	movs	r3, #0
 801f858:	9309      	str	r3, [sp, #36]	@ 0x24
 801f85a:	2320      	movs	r3, #32
 801f85c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f860:	f8cd 800c 	str.w	r8, [sp, #12]
 801f864:	2330      	movs	r3, #48	@ 0x30
 801f866:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801fa04 <_svfiprintf_r+0x1e4>
 801f86a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f86e:	f04f 0901 	mov.w	r9, #1
 801f872:	4623      	mov	r3, r4
 801f874:	469a      	mov	sl, r3
 801f876:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f87a:	b10a      	cbz	r2, 801f880 <_svfiprintf_r+0x60>
 801f87c:	2a25      	cmp	r2, #37	@ 0x25
 801f87e:	d1f9      	bne.n	801f874 <_svfiprintf_r+0x54>
 801f880:	ebba 0b04 	subs.w	fp, sl, r4
 801f884:	d00b      	beq.n	801f89e <_svfiprintf_r+0x7e>
 801f886:	465b      	mov	r3, fp
 801f888:	4622      	mov	r2, r4
 801f88a:	4629      	mov	r1, r5
 801f88c:	4638      	mov	r0, r7
 801f88e:	f7ff ff6b 	bl	801f768 <__ssputs_r>
 801f892:	3001      	adds	r0, #1
 801f894:	f000 80a7 	beq.w	801f9e6 <_svfiprintf_r+0x1c6>
 801f898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f89a:	445a      	add	r2, fp
 801f89c:	9209      	str	r2, [sp, #36]	@ 0x24
 801f89e:	f89a 3000 	ldrb.w	r3, [sl]
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	f000 809f 	beq.w	801f9e6 <_svfiprintf_r+0x1c6>
 801f8a8:	2300      	movs	r3, #0
 801f8aa:	f04f 32ff 	mov.w	r2, #4294967295
 801f8ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f8b2:	f10a 0a01 	add.w	sl, sl, #1
 801f8b6:	9304      	str	r3, [sp, #16]
 801f8b8:	9307      	str	r3, [sp, #28]
 801f8ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f8be:	931a      	str	r3, [sp, #104]	@ 0x68
 801f8c0:	4654      	mov	r4, sl
 801f8c2:	2205      	movs	r2, #5
 801f8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f8c8:	484e      	ldr	r0, [pc, #312]	@ (801fa04 <_svfiprintf_r+0x1e4>)
 801f8ca:	f7e0 fc59 	bl	8000180 <memchr>
 801f8ce:	9a04      	ldr	r2, [sp, #16]
 801f8d0:	b9d8      	cbnz	r0, 801f90a <_svfiprintf_r+0xea>
 801f8d2:	06d0      	lsls	r0, r2, #27
 801f8d4:	bf44      	itt	mi
 801f8d6:	2320      	movmi	r3, #32
 801f8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f8dc:	0711      	lsls	r1, r2, #28
 801f8de:	bf44      	itt	mi
 801f8e0:	232b      	movmi	r3, #43	@ 0x2b
 801f8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f8e6:	f89a 3000 	ldrb.w	r3, [sl]
 801f8ea:	2b2a      	cmp	r3, #42	@ 0x2a
 801f8ec:	d015      	beq.n	801f91a <_svfiprintf_r+0xfa>
 801f8ee:	9a07      	ldr	r2, [sp, #28]
 801f8f0:	4654      	mov	r4, sl
 801f8f2:	2000      	movs	r0, #0
 801f8f4:	f04f 0c0a 	mov.w	ip, #10
 801f8f8:	4621      	mov	r1, r4
 801f8fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f8fe:	3b30      	subs	r3, #48	@ 0x30
 801f900:	2b09      	cmp	r3, #9
 801f902:	d94b      	bls.n	801f99c <_svfiprintf_r+0x17c>
 801f904:	b1b0      	cbz	r0, 801f934 <_svfiprintf_r+0x114>
 801f906:	9207      	str	r2, [sp, #28]
 801f908:	e014      	b.n	801f934 <_svfiprintf_r+0x114>
 801f90a:	eba0 0308 	sub.w	r3, r0, r8
 801f90e:	fa09 f303 	lsl.w	r3, r9, r3
 801f912:	4313      	orrs	r3, r2
 801f914:	9304      	str	r3, [sp, #16]
 801f916:	46a2      	mov	sl, r4
 801f918:	e7d2      	b.n	801f8c0 <_svfiprintf_r+0xa0>
 801f91a:	9b03      	ldr	r3, [sp, #12]
 801f91c:	1d19      	adds	r1, r3, #4
 801f91e:	681b      	ldr	r3, [r3, #0]
 801f920:	9103      	str	r1, [sp, #12]
 801f922:	2b00      	cmp	r3, #0
 801f924:	bfbb      	ittet	lt
 801f926:	425b      	neglt	r3, r3
 801f928:	f042 0202 	orrlt.w	r2, r2, #2
 801f92c:	9307      	strge	r3, [sp, #28]
 801f92e:	9307      	strlt	r3, [sp, #28]
 801f930:	bfb8      	it	lt
 801f932:	9204      	strlt	r2, [sp, #16]
 801f934:	7823      	ldrb	r3, [r4, #0]
 801f936:	2b2e      	cmp	r3, #46	@ 0x2e
 801f938:	d10a      	bne.n	801f950 <_svfiprintf_r+0x130>
 801f93a:	7863      	ldrb	r3, [r4, #1]
 801f93c:	2b2a      	cmp	r3, #42	@ 0x2a
 801f93e:	d132      	bne.n	801f9a6 <_svfiprintf_r+0x186>
 801f940:	9b03      	ldr	r3, [sp, #12]
 801f942:	1d1a      	adds	r2, r3, #4
 801f944:	681b      	ldr	r3, [r3, #0]
 801f946:	9203      	str	r2, [sp, #12]
 801f948:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f94c:	3402      	adds	r4, #2
 801f94e:	9305      	str	r3, [sp, #20]
 801f950:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 801fa08 <_svfiprintf_r+0x1e8>
 801f954:	7821      	ldrb	r1, [r4, #0]
 801f956:	2203      	movs	r2, #3
 801f958:	4650      	mov	r0, sl
 801f95a:	f7e0 fc11 	bl	8000180 <memchr>
 801f95e:	b138      	cbz	r0, 801f970 <_svfiprintf_r+0x150>
 801f960:	9b04      	ldr	r3, [sp, #16]
 801f962:	eba0 000a 	sub.w	r0, r0, sl
 801f966:	2240      	movs	r2, #64	@ 0x40
 801f968:	4082      	lsls	r2, r0
 801f96a:	4313      	orrs	r3, r2
 801f96c:	3401      	adds	r4, #1
 801f96e:	9304      	str	r3, [sp, #16]
 801f970:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f974:	4825      	ldr	r0, [pc, #148]	@ (801fa0c <_svfiprintf_r+0x1ec>)
 801f976:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f97a:	2206      	movs	r2, #6
 801f97c:	f7e0 fc00 	bl	8000180 <memchr>
 801f980:	2800      	cmp	r0, #0
 801f982:	d036      	beq.n	801f9f2 <_svfiprintf_r+0x1d2>
 801f984:	4b22      	ldr	r3, [pc, #136]	@ (801fa10 <_svfiprintf_r+0x1f0>)
 801f986:	bb1b      	cbnz	r3, 801f9d0 <_svfiprintf_r+0x1b0>
 801f988:	9b03      	ldr	r3, [sp, #12]
 801f98a:	3307      	adds	r3, #7
 801f98c:	f023 0307 	bic.w	r3, r3, #7
 801f990:	3308      	adds	r3, #8
 801f992:	9303      	str	r3, [sp, #12]
 801f994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f996:	4433      	add	r3, r6
 801f998:	9309      	str	r3, [sp, #36]	@ 0x24
 801f99a:	e76a      	b.n	801f872 <_svfiprintf_r+0x52>
 801f99c:	fb0c 3202 	mla	r2, ip, r2, r3
 801f9a0:	460c      	mov	r4, r1
 801f9a2:	2001      	movs	r0, #1
 801f9a4:	e7a8      	b.n	801f8f8 <_svfiprintf_r+0xd8>
 801f9a6:	2300      	movs	r3, #0
 801f9a8:	3401      	adds	r4, #1
 801f9aa:	9305      	str	r3, [sp, #20]
 801f9ac:	4619      	mov	r1, r3
 801f9ae:	f04f 0c0a 	mov.w	ip, #10
 801f9b2:	4620      	mov	r0, r4
 801f9b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f9b8:	3a30      	subs	r2, #48	@ 0x30
 801f9ba:	2a09      	cmp	r2, #9
 801f9bc:	d903      	bls.n	801f9c6 <_svfiprintf_r+0x1a6>
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	d0c6      	beq.n	801f950 <_svfiprintf_r+0x130>
 801f9c2:	9105      	str	r1, [sp, #20]
 801f9c4:	e7c4      	b.n	801f950 <_svfiprintf_r+0x130>
 801f9c6:	fb0c 2101 	mla	r1, ip, r1, r2
 801f9ca:	4604      	mov	r4, r0
 801f9cc:	2301      	movs	r3, #1
 801f9ce:	e7f0      	b.n	801f9b2 <_svfiprintf_r+0x192>
 801f9d0:	ab03      	add	r3, sp, #12
 801f9d2:	9300      	str	r3, [sp, #0]
 801f9d4:	462a      	mov	r2, r5
 801f9d6:	4b0f      	ldr	r3, [pc, #60]	@ (801fa14 <_svfiprintf_r+0x1f4>)
 801f9d8:	a904      	add	r1, sp, #16
 801f9da:	4638      	mov	r0, r7
 801f9dc:	f7fd fe78 	bl	801d6d0 <_printf_float>
 801f9e0:	1c42      	adds	r2, r0, #1
 801f9e2:	4606      	mov	r6, r0
 801f9e4:	d1d6      	bne.n	801f994 <_svfiprintf_r+0x174>
 801f9e6:	89ab      	ldrh	r3, [r5, #12]
 801f9e8:	065b      	lsls	r3, r3, #25
 801f9ea:	f53f af2d 	bmi.w	801f848 <_svfiprintf_r+0x28>
 801f9ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9f0:	e72c      	b.n	801f84c <_svfiprintf_r+0x2c>
 801f9f2:	ab03      	add	r3, sp, #12
 801f9f4:	9300      	str	r3, [sp, #0]
 801f9f6:	462a      	mov	r2, r5
 801f9f8:	4b06      	ldr	r3, [pc, #24]	@ (801fa14 <_svfiprintf_r+0x1f4>)
 801f9fa:	a904      	add	r1, sp, #16
 801f9fc:	4638      	mov	r0, r7
 801f9fe:	f7fe f901 	bl	801dc04 <_printf_i>
 801fa02:	e7ed      	b.n	801f9e0 <_svfiprintf_r+0x1c0>
 801fa04:	0802188a 	.word	0x0802188a
 801fa08:	08021890 	.word	0x08021890
 801fa0c:	08021894 	.word	0x08021894
 801fa10:	0801d6d1 	.word	0x0801d6d1
 801fa14:	0801f769 	.word	0x0801f769

0801fa18 <__sflush_r>:
 801fa18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801fa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa1e:	0716      	lsls	r6, r2, #28
 801fa20:	4605      	mov	r5, r0
 801fa22:	460c      	mov	r4, r1
 801fa24:	d454      	bmi.n	801fad0 <__sflush_r+0xb8>
 801fa26:	684b      	ldr	r3, [r1, #4]
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	dc02      	bgt.n	801fa32 <__sflush_r+0x1a>
 801fa2c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	dd48      	ble.n	801fac4 <__sflush_r+0xac>
 801fa32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801fa34:	2e00      	cmp	r6, #0
 801fa36:	d045      	beq.n	801fac4 <__sflush_r+0xac>
 801fa38:	2300      	movs	r3, #0
 801fa3a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801fa3e:	682f      	ldr	r7, [r5, #0]
 801fa40:	6a21      	ldr	r1, [r4, #32]
 801fa42:	602b      	str	r3, [r5, #0]
 801fa44:	d030      	beq.n	801faa8 <__sflush_r+0x90>
 801fa46:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801fa48:	89a3      	ldrh	r3, [r4, #12]
 801fa4a:	0759      	lsls	r1, r3, #29
 801fa4c:	d505      	bpl.n	801fa5a <__sflush_r+0x42>
 801fa4e:	6863      	ldr	r3, [r4, #4]
 801fa50:	1ad2      	subs	r2, r2, r3
 801fa52:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801fa54:	b10b      	cbz	r3, 801fa5a <__sflush_r+0x42>
 801fa56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801fa58:	1ad2      	subs	r2, r2, r3
 801fa5a:	2300      	movs	r3, #0
 801fa5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801fa5e:	6a21      	ldr	r1, [r4, #32]
 801fa60:	4628      	mov	r0, r5
 801fa62:	47b0      	blx	r6
 801fa64:	1c43      	adds	r3, r0, #1
 801fa66:	89a3      	ldrh	r3, [r4, #12]
 801fa68:	d106      	bne.n	801fa78 <__sflush_r+0x60>
 801fa6a:	6829      	ldr	r1, [r5, #0]
 801fa6c:	291d      	cmp	r1, #29
 801fa6e:	d82b      	bhi.n	801fac8 <__sflush_r+0xb0>
 801fa70:	4a28      	ldr	r2, [pc, #160]	@ (801fb14 <__sflush_r+0xfc>)
 801fa72:	40ca      	lsrs	r2, r1
 801fa74:	07d6      	lsls	r6, r2, #31
 801fa76:	d527      	bpl.n	801fac8 <__sflush_r+0xb0>
 801fa78:	2200      	movs	r2, #0
 801fa7a:	6062      	str	r2, [r4, #4]
 801fa7c:	04d9      	lsls	r1, r3, #19
 801fa7e:	6922      	ldr	r2, [r4, #16]
 801fa80:	6022      	str	r2, [r4, #0]
 801fa82:	d504      	bpl.n	801fa8e <__sflush_r+0x76>
 801fa84:	1c42      	adds	r2, r0, #1
 801fa86:	d101      	bne.n	801fa8c <__sflush_r+0x74>
 801fa88:	682b      	ldr	r3, [r5, #0]
 801fa8a:	b903      	cbnz	r3, 801fa8e <__sflush_r+0x76>
 801fa8c:	6560      	str	r0, [r4, #84]	@ 0x54
 801fa8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fa90:	602f      	str	r7, [r5, #0]
 801fa92:	b1b9      	cbz	r1, 801fac4 <__sflush_r+0xac>
 801fa94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801fa98:	4299      	cmp	r1, r3
 801fa9a:	d002      	beq.n	801faa2 <__sflush_r+0x8a>
 801fa9c:	4628      	mov	r0, r5
 801fa9e:	f7ff f9eb 	bl	801ee78 <_free_r>
 801faa2:	2300      	movs	r3, #0
 801faa4:	6363      	str	r3, [r4, #52]	@ 0x34
 801faa6:	e00d      	b.n	801fac4 <__sflush_r+0xac>
 801faa8:	2301      	movs	r3, #1
 801faaa:	4628      	mov	r0, r5
 801faac:	47b0      	blx	r6
 801faae:	4602      	mov	r2, r0
 801fab0:	1c50      	adds	r0, r2, #1
 801fab2:	d1c9      	bne.n	801fa48 <__sflush_r+0x30>
 801fab4:	682b      	ldr	r3, [r5, #0]
 801fab6:	2b00      	cmp	r3, #0
 801fab8:	d0c6      	beq.n	801fa48 <__sflush_r+0x30>
 801faba:	2b1d      	cmp	r3, #29
 801fabc:	d001      	beq.n	801fac2 <__sflush_r+0xaa>
 801fabe:	2b16      	cmp	r3, #22
 801fac0:	d11d      	bne.n	801fafe <__sflush_r+0xe6>
 801fac2:	602f      	str	r7, [r5, #0]
 801fac4:	2000      	movs	r0, #0
 801fac6:	e021      	b.n	801fb0c <__sflush_r+0xf4>
 801fac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801facc:	b21b      	sxth	r3, r3
 801face:	e01a      	b.n	801fb06 <__sflush_r+0xee>
 801fad0:	690f      	ldr	r7, [r1, #16]
 801fad2:	2f00      	cmp	r7, #0
 801fad4:	d0f6      	beq.n	801fac4 <__sflush_r+0xac>
 801fad6:	0793      	lsls	r3, r2, #30
 801fad8:	680e      	ldr	r6, [r1, #0]
 801fada:	bf08      	it	eq
 801fadc:	694b      	ldreq	r3, [r1, #20]
 801fade:	600f      	str	r7, [r1, #0]
 801fae0:	bf18      	it	ne
 801fae2:	2300      	movne	r3, #0
 801fae4:	1bf6      	subs	r6, r6, r7
 801fae6:	608b      	str	r3, [r1, #8]
 801fae8:	2e00      	cmp	r6, #0
 801faea:	ddeb      	ble.n	801fac4 <__sflush_r+0xac>
 801faec:	6a21      	ldr	r1, [r4, #32]
 801faee:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801faf2:	4633      	mov	r3, r6
 801faf4:	463a      	mov	r2, r7
 801faf6:	4628      	mov	r0, r5
 801faf8:	47e0      	blx	ip
 801fafa:	2800      	cmp	r0, #0
 801fafc:	dc07      	bgt.n	801fb0e <__sflush_r+0xf6>
 801fafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fb06:	81a3      	strh	r3, [r4, #12]
 801fb08:	f04f 30ff 	mov.w	r0, #4294967295
 801fb0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb0e:	4407      	add	r7, r0
 801fb10:	1a36      	subs	r6, r6, r0
 801fb12:	e7e9      	b.n	801fae8 <__sflush_r+0xd0>
 801fb14:	20400001 	.word	0x20400001

0801fb18 <_fflush_r>:
 801fb18:	b538      	push	{r3, r4, r5, lr}
 801fb1a:	690b      	ldr	r3, [r1, #16]
 801fb1c:	4605      	mov	r5, r0
 801fb1e:	460c      	mov	r4, r1
 801fb20:	b913      	cbnz	r3, 801fb28 <_fflush_r+0x10>
 801fb22:	2500      	movs	r5, #0
 801fb24:	4628      	mov	r0, r5
 801fb26:	bd38      	pop	{r3, r4, r5, pc}
 801fb28:	b118      	cbz	r0, 801fb32 <_fflush_r+0x1a>
 801fb2a:	6a03      	ldr	r3, [r0, #32]
 801fb2c:	b90b      	cbnz	r3, 801fb32 <_fflush_r+0x1a>
 801fb2e:	f7fe fa13 	bl	801df58 <__sinit>
 801fb32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb36:	2b00      	cmp	r3, #0
 801fb38:	d0f3      	beq.n	801fb22 <_fflush_r+0xa>
 801fb3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801fb3c:	07d0      	lsls	r0, r2, #31
 801fb3e:	d404      	bmi.n	801fb4a <_fflush_r+0x32>
 801fb40:	0599      	lsls	r1, r3, #22
 801fb42:	d402      	bmi.n	801fb4a <_fflush_r+0x32>
 801fb44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fb46:	f7fe fb3a 	bl	801e1be <__retarget_lock_acquire_recursive>
 801fb4a:	4628      	mov	r0, r5
 801fb4c:	4621      	mov	r1, r4
 801fb4e:	f7ff ff63 	bl	801fa18 <__sflush_r>
 801fb52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fb54:	07da      	lsls	r2, r3, #31
 801fb56:	4605      	mov	r5, r0
 801fb58:	d4e4      	bmi.n	801fb24 <_fflush_r+0xc>
 801fb5a:	89a3      	ldrh	r3, [r4, #12]
 801fb5c:	059b      	lsls	r3, r3, #22
 801fb5e:	d4e1      	bmi.n	801fb24 <_fflush_r+0xc>
 801fb60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fb62:	f7fe fb2d 	bl	801e1c0 <__retarget_lock_release_recursive>
 801fb66:	e7dd      	b.n	801fb24 <_fflush_r+0xc>

0801fb68 <memmove>:
 801fb68:	4288      	cmp	r0, r1
 801fb6a:	b510      	push	{r4, lr}
 801fb6c:	eb01 0402 	add.w	r4, r1, r2
 801fb70:	d902      	bls.n	801fb78 <memmove+0x10>
 801fb72:	4284      	cmp	r4, r0
 801fb74:	4623      	mov	r3, r4
 801fb76:	d807      	bhi.n	801fb88 <memmove+0x20>
 801fb78:	1e43      	subs	r3, r0, #1
 801fb7a:	42a1      	cmp	r1, r4
 801fb7c:	d008      	beq.n	801fb90 <memmove+0x28>
 801fb7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fb82:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fb86:	e7f8      	b.n	801fb7a <memmove+0x12>
 801fb88:	4402      	add	r2, r0
 801fb8a:	4601      	mov	r1, r0
 801fb8c:	428a      	cmp	r2, r1
 801fb8e:	d100      	bne.n	801fb92 <memmove+0x2a>
 801fb90:	bd10      	pop	{r4, pc}
 801fb92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fb96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fb9a:	e7f7      	b.n	801fb8c <memmove+0x24>

0801fb9c <_sbrk_r>:
 801fb9c:	b538      	push	{r3, r4, r5, lr}
 801fb9e:	4d06      	ldr	r5, [pc, #24]	@ (801fbb8 <_sbrk_r+0x1c>)
 801fba0:	2300      	movs	r3, #0
 801fba2:	4604      	mov	r4, r0
 801fba4:	4608      	mov	r0, r1
 801fba6:	602b      	str	r3, [r5, #0]
 801fba8:	f7e3 f80e 	bl	8002bc8 <_sbrk>
 801fbac:	1c43      	adds	r3, r0, #1
 801fbae:	d102      	bne.n	801fbb6 <_sbrk_r+0x1a>
 801fbb0:	682b      	ldr	r3, [r5, #0]
 801fbb2:	b103      	cbz	r3, 801fbb6 <_sbrk_r+0x1a>
 801fbb4:	6023      	str	r3, [r4, #0]
 801fbb6:	bd38      	pop	{r3, r4, r5, pc}
 801fbb8:	20002654 	.word	0x20002654

0801fbbc <memcpy>:
 801fbbc:	440a      	add	r2, r1
 801fbbe:	4291      	cmp	r1, r2
 801fbc0:	f100 33ff 	add.w	r3, r0, #4294967295
 801fbc4:	d100      	bne.n	801fbc8 <memcpy+0xc>
 801fbc6:	4770      	bx	lr
 801fbc8:	b510      	push	{r4, lr}
 801fbca:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fbce:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fbd2:	4291      	cmp	r1, r2
 801fbd4:	d1f9      	bne.n	801fbca <memcpy+0xe>
 801fbd6:	bd10      	pop	{r4, pc}

0801fbd8 <__assert_func>:
 801fbd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fbda:	4614      	mov	r4, r2
 801fbdc:	461a      	mov	r2, r3
 801fbde:	4b09      	ldr	r3, [pc, #36]	@ (801fc04 <__assert_func+0x2c>)
 801fbe0:	681b      	ldr	r3, [r3, #0]
 801fbe2:	4605      	mov	r5, r0
 801fbe4:	68d8      	ldr	r0, [r3, #12]
 801fbe6:	b14c      	cbz	r4, 801fbfc <__assert_func+0x24>
 801fbe8:	4b07      	ldr	r3, [pc, #28]	@ (801fc08 <__assert_func+0x30>)
 801fbea:	9100      	str	r1, [sp, #0]
 801fbec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fbf0:	4906      	ldr	r1, [pc, #24]	@ (801fc0c <__assert_func+0x34>)
 801fbf2:	462b      	mov	r3, r5
 801fbf4:	f000 f870 	bl	801fcd8 <fiprintf>
 801fbf8:	f000 f880 	bl	801fcfc <abort>
 801fbfc:	4b04      	ldr	r3, [pc, #16]	@ (801fc10 <__assert_func+0x38>)
 801fbfe:	461c      	mov	r4, r3
 801fc00:	e7f3      	b.n	801fbea <__assert_func+0x12>
 801fc02:	bf00      	nop
 801fc04:	2000014c 	.word	0x2000014c
 801fc08:	080218a5 	.word	0x080218a5
 801fc0c:	080218b2 	.word	0x080218b2
 801fc10:	080218e0 	.word	0x080218e0

0801fc14 <_calloc_r>:
 801fc14:	b570      	push	{r4, r5, r6, lr}
 801fc16:	fba1 5402 	umull	r5, r4, r1, r2
 801fc1a:	b934      	cbnz	r4, 801fc2a <_calloc_r+0x16>
 801fc1c:	4629      	mov	r1, r5
 801fc1e:	f7ff f99f 	bl	801ef60 <_malloc_r>
 801fc22:	4606      	mov	r6, r0
 801fc24:	b928      	cbnz	r0, 801fc32 <_calloc_r+0x1e>
 801fc26:	4630      	mov	r0, r6
 801fc28:	bd70      	pop	{r4, r5, r6, pc}
 801fc2a:	220c      	movs	r2, #12
 801fc2c:	6002      	str	r2, [r0, #0]
 801fc2e:	2600      	movs	r6, #0
 801fc30:	e7f9      	b.n	801fc26 <_calloc_r+0x12>
 801fc32:	462a      	mov	r2, r5
 801fc34:	4621      	mov	r1, r4
 801fc36:	f7fe fa45 	bl	801e0c4 <memset>
 801fc3a:	e7f4      	b.n	801fc26 <_calloc_r+0x12>

0801fc3c <__ascii_mbtowc>:
 801fc3c:	b082      	sub	sp, #8
 801fc3e:	b901      	cbnz	r1, 801fc42 <__ascii_mbtowc+0x6>
 801fc40:	a901      	add	r1, sp, #4
 801fc42:	b142      	cbz	r2, 801fc56 <__ascii_mbtowc+0x1a>
 801fc44:	b14b      	cbz	r3, 801fc5a <__ascii_mbtowc+0x1e>
 801fc46:	7813      	ldrb	r3, [r2, #0]
 801fc48:	600b      	str	r3, [r1, #0]
 801fc4a:	7812      	ldrb	r2, [r2, #0]
 801fc4c:	1e10      	subs	r0, r2, #0
 801fc4e:	bf18      	it	ne
 801fc50:	2001      	movne	r0, #1
 801fc52:	b002      	add	sp, #8
 801fc54:	4770      	bx	lr
 801fc56:	4610      	mov	r0, r2
 801fc58:	e7fb      	b.n	801fc52 <__ascii_mbtowc+0x16>
 801fc5a:	f06f 0001 	mvn.w	r0, #1
 801fc5e:	e7f8      	b.n	801fc52 <__ascii_mbtowc+0x16>

0801fc60 <_realloc_r>:
 801fc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc64:	4607      	mov	r7, r0
 801fc66:	4614      	mov	r4, r2
 801fc68:	460d      	mov	r5, r1
 801fc6a:	b921      	cbnz	r1, 801fc76 <_realloc_r+0x16>
 801fc6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fc70:	4611      	mov	r1, r2
 801fc72:	f7ff b975 	b.w	801ef60 <_malloc_r>
 801fc76:	b92a      	cbnz	r2, 801fc84 <_realloc_r+0x24>
 801fc78:	f7ff f8fe 	bl	801ee78 <_free_r>
 801fc7c:	4625      	mov	r5, r4
 801fc7e:	4628      	mov	r0, r5
 801fc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc84:	f000 f841 	bl	801fd0a <_malloc_usable_size_r>
 801fc88:	4284      	cmp	r4, r0
 801fc8a:	4606      	mov	r6, r0
 801fc8c:	d802      	bhi.n	801fc94 <_realloc_r+0x34>
 801fc8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fc92:	d8f4      	bhi.n	801fc7e <_realloc_r+0x1e>
 801fc94:	4621      	mov	r1, r4
 801fc96:	4638      	mov	r0, r7
 801fc98:	f7ff f962 	bl	801ef60 <_malloc_r>
 801fc9c:	4680      	mov	r8, r0
 801fc9e:	b908      	cbnz	r0, 801fca4 <_realloc_r+0x44>
 801fca0:	4645      	mov	r5, r8
 801fca2:	e7ec      	b.n	801fc7e <_realloc_r+0x1e>
 801fca4:	42b4      	cmp	r4, r6
 801fca6:	4622      	mov	r2, r4
 801fca8:	4629      	mov	r1, r5
 801fcaa:	bf28      	it	cs
 801fcac:	4632      	movcs	r2, r6
 801fcae:	f7ff ff85 	bl	801fbbc <memcpy>
 801fcb2:	4629      	mov	r1, r5
 801fcb4:	4638      	mov	r0, r7
 801fcb6:	f7ff f8df 	bl	801ee78 <_free_r>
 801fcba:	e7f1      	b.n	801fca0 <_realloc_r+0x40>

0801fcbc <__ascii_wctomb>:
 801fcbc:	4603      	mov	r3, r0
 801fcbe:	4608      	mov	r0, r1
 801fcc0:	b141      	cbz	r1, 801fcd4 <__ascii_wctomb+0x18>
 801fcc2:	2aff      	cmp	r2, #255	@ 0xff
 801fcc4:	d904      	bls.n	801fcd0 <__ascii_wctomb+0x14>
 801fcc6:	228a      	movs	r2, #138	@ 0x8a
 801fcc8:	601a      	str	r2, [r3, #0]
 801fcca:	f04f 30ff 	mov.w	r0, #4294967295
 801fcce:	4770      	bx	lr
 801fcd0:	700a      	strb	r2, [r1, #0]
 801fcd2:	2001      	movs	r0, #1
 801fcd4:	4770      	bx	lr
	...

0801fcd8 <fiprintf>:
 801fcd8:	b40e      	push	{r1, r2, r3}
 801fcda:	b503      	push	{r0, r1, lr}
 801fcdc:	4601      	mov	r1, r0
 801fcde:	ab03      	add	r3, sp, #12
 801fce0:	4805      	ldr	r0, [pc, #20]	@ (801fcf8 <fiprintf+0x20>)
 801fce2:	f853 2b04 	ldr.w	r2, [r3], #4
 801fce6:	6800      	ldr	r0, [r0, #0]
 801fce8:	9301      	str	r3, [sp, #4]
 801fcea:	f000 f83d 	bl	801fd68 <_vfiprintf_r>
 801fcee:	b002      	add	sp, #8
 801fcf0:	f85d eb04 	ldr.w	lr, [sp], #4
 801fcf4:	b003      	add	sp, #12
 801fcf6:	4770      	bx	lr
 801fcf8:	2000014c 	.word	0x2000014c

0801fcfc <abort>:
 801fcfc:	b508      	push	{r3, lr}
 801fcfe:	2006      	movs	r0, #6
 801fd00:	f000 fa06 	bl	8020110 <raise>
 801fd04:	2001      	movs	r0, #1
 801fd06:	f7e2 feeb 	bl	8002ae0 <_exit>

0801fd0a <_malloc_usable_size_r>:
 801fd0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fd0e:	1f18      	subs	r0, r3, #4
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	bfbc      	itt	lt
 801fd14:	580b      	ldrlt	r3, [r1, r0]
 801fd16:	18c0      	addlt	r0, r0, r3
 801fd18:	4770      	bx	lr

0801fd1a <__sfputc_r>:
 801fd1a:	6893      	ldr	r3, [r2, #8]
 801fd1c:	3b01      	subs	r3, #1
 801fd1e:	2b00      	cmp	r3, #0
 801fd20:	b410      	push	{r4}
 801fd22:	6093      	str	r3, [r2, #8]
 801fd24:	da07      	bge.n	801fd36 <__sfputc_r+0x1c>
 801fd26:	6994      	ldr	r4, [r2, #24]
 801fd28:	42a3      	cmp	r3, r4
 801fd2a:	db01      	blt.n	801fd30 <__sfputc_r+0x16>
 801fd2c:	290a      	cmp	r1, #10
 801fd2e:	d102      	bne.n	801fd36 <__sfputc_r+0x1c>
 801fd30:	bc10      	pop	{r4}
 801fd32:	f000 b931 	b.w	801ff98 <__swbuf_r>
 801fd36:	6813      	ldr	r3, [r2, #0]
 801fd38:	1c58      	adds	r0, r3, #1
 801fd3a:	6010      	str	r0, [r2, #0]
 801fd3c:	7019      	strb	r1, [r3, #0]
 801fd3e:	4608      	mov	r0, r1
 801fd40:	bc10      	pop	{r4}
 801fd42:	4770      	bx	lr

0801fd44 <__sfputs_r>:
 801fd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd46:	4606      	mov	r6, r0
 801fd48:	460f      	mov	r7, r1
 801fd4a:	4614      	mov	r4, r2
 801fd4c:	18d5      	adds	r5, r2, r3
 801fd4e:	42ac      	cmp	r4, r5
 801fd50:	d101      	bne.n	801fd56 <__sfputs_r+0x12>
 801fd52:	2000      	movs	r0, #0
 801fd54:	e007      	b.n	801fd66 <__sfputs_r+0x22>
 801fd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd5a:	463a      	mov	r2, r7
 801fd5c:	4630      	mov	r0, r6
 801fd5e:	f7ff ffdc 	bl	801fd1a <__sfputc_r>
 801fd62:	1c43      	adds	r3, r0, #1
 801fd64:	d1f3      	bne.n	801fd4e <__sfputs_r+0xa>
 801fd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801fd68 <_vfiprintf_r>:
 801fd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd6c:	460d      	mov	r5, r1
 801fd6e:	b09d      	sub	sp, #116	@ 0x74
 801fd70:	4614      	mov	r4, r2
 801fd72:	4698      	mov	r8, r3
 801fd74:	4606      	mov	r6, r0
 801fd76:	b118      	cbz	r0, 801fd80 <_vfiprintf_r+0x18>
 801fd78:	6a03      	ldr	r3, [r0, #32]
 801fd7a:	b90b      	cbnz	r3, 801fd80 <_vfiprintf_r+0x18>
 801fd7c:	f7fe f8ec 	bl	801df58 <__sinit>
 801fd80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fd82:	07d9      	lsls	r1, r3, #31
 801fd84:	d405      	bmi.n	801fd92 <_vfiprintf_r+0x2a>
 801fd86:	89ab      	ldrh	r3, [r5, #12]
 801fd88:	059a      	lsls	r2, r3, #22
 801fd8a:	d402      	bmi.n	801fd92 <_vfiprintf_r+0x2a>
 801fd8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fd8e:	f7fe fa16 	bl	801e1be <__retarget_lock_acquire_recursive>
 801fd92:	89ab      	ldrh	r3, [r5, #12]
 801fd94:	071b      	lsls	r3, r3, #28
 801fd96:	d501      	bpl.n	801fd9c <_vfiprintf_r+0x34>
 801fd98:	692b      	ldr	r3, [r5, #16]
 801fd9a:	b99b      	cbnz	r3, 801fdc4 <_vfiprintf_r+0x5c>
 801fd9c:	4629      	mov	r1, r5
 801fd9e:	4630      	mov	r0, r6
 801fda0:	f000 f938 	bl	8020014 <__swsetup_r>
 801fda4:	b170      	cbz	r0, 801fdc4 <_vfiprintf_r+0x5c>
 801fda6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fda8:	07dc      	lsls	r4, r3, #31
 801fdaa:	d504      	bpl.n	801fdb6 <_vfiprintf_r+0x4e>
 801fdac:	f04f 30ff 	mov.w	r0, #4294967295
 801fdb0:	b01d      	add	sp, #116	@ 0x74
 801fdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdb6:	89ab      	ldrh	r3, [r5, #12]
 801fdb8:	0598      	lsls	r0, r3, #22
 801fdba:	d4f7      	bmi.n	801fdac <_vfiprintf_r+0x44>
 801fdbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fdbe:	f7fe f9ff 	bl	801e1c0 <__retarget_lock_release_recursive>
 801fdc2:	e7f3      	b.n	801fdac <_vfiprintf_r+0x44>
 801fdc4:	2300      	movs	r3, #0
 801fdc6:	9309      	str	r3, [sp, #36]	@ 0x24
 801fdc8:	2320      	movs	r3, #32
 801fdca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801fdce:	f8cd 800c 	str.w	r8, [sp, #12]
 801fdd2:	2330      	movs	r3, #48	@ 0x30
 801fdd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ff84 <_vfiprintf_r+0x21c>
 801fdd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801fddc:	f04f 0901 	mov.w	r9, #1
 801fde0:	4623      	mov	r3, r4
 801fde2:	469a      	mov	sl, r3
 801fde4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fde8:	b10a      	cbz	r2, 801fdee <_vfiprintf_r+0x86>
 801fdea:	2a25      	cmp	r2, #37	@ 0x25
 801fdec:	d1f9      	bne.n	801fde2 <_vfiprintf_r+0x7a>
 801fdee:	ebba 0b04 	subs.w	fp, sl, r4
 801fdf2:	d00b      	beq.n	801fe0c <_vfiprintf_r+0xa4>
 801fdf4:	465b      	mov	r3, fp
 801fdf6:	4622      	mov	r2, r4
 801fdf8:	4629      	mov	r1, r5
 801fdfa:	4630      	mov	r0, r6
 801fdfc:	f7ff ffa2 	bl	801fd44 <__sfputs_r>
 801fe00:	3001      	adds	r0, #1
 801fe02:	f000 80a7 	beq.w	801ff54 <_vfiprintf_r+0x1ec>
 801fe06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fe08:	445a      	add	r2, fp
 801fe0a:	9209      	str	r2, [sp, #36]	@ 0x24
 801fe0c:	f89a 3000 	ldrb.w	r3, [sl]
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	f000 809f 	beq.w	801ff54 <_vfiprintf_r+0x1ec>
 801fe16:	2300      	movs	r3, #0
 801fe18:	f04f 32ff 	mov.w	r2, #4294967295
 801fe1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fe20:	f10a 0a01 	add.w	sl, sl, #1
 801fe24:	9304      	str	r3, [sp, #16]
 801fe26:	9307      	str	r3, [sp, #28]
 801fe28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801fe2c:	931a      	str	r3, [sp, #104]	@ 0x68
 801fe2e:	4654      	mov	r4, sl
 801fe30:	2205      	movs	r2, #5
 801fe32:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe36:	4853      	ldr	r0, [pc, #332]	@ (801ff84 <_vfiprintf_r+0x21c>)
 801fe38:	f7e0 f9a2 	bl	8000180 <memchr>
 801fe3c:	9a04      	ldr	r2, [sp, #16]
 801fe3e:	b9d8      	cbnz	r0, 801fe78 <_vfiprintf_r+0x110>
 801fe40:	06d1      	lsls	r1, r2, #27
 801fe42:	bf44      	itt	mi
 801fe44:	2320      	movmi	r3, #32
 801fe46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fe4a:	0713      	lsls	r3, r2, #28
 801fe4c:	bf44      	itt	mi
 801fe4e:	232b      	movmi	r3, #43	@ 0x2b
 801fe50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fe54:	f89a 3000 	ldrb.w	r3, [sl]
 801fe58:	2b2a      	cmp	r3, #42	@ 0x2a
 801fe5a:	d015      	beq.n	801fe88 <_vfiprintf_r+0x120>
 801fe5c:	9a07      	ldr	r2, [sp, #28]
 801fe5e:	4654      	mov	r4, sl
 801fe60:	2000      	movs	r0, #0
 801fe62:	f04f 0c0a 	mov.w	ip, #10
 801fe66:	4621      	mov	r1, r4
 801fe68:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fe6c:	3b30      	subs	r3, #48	@ 0x30
 801fe6e:	2b09      	cmp	r3, #9
 801fe70:	d94b      	bls.n	801ff0a <_vfiprintf_r+0x1a2>
 801fe72:	b1b0      	cbz	r0, 801fea2 <_vfiprintf_r+0x13a>
 801fe74:	9207      	str	r2, [sp, #28]
 801fe76:	e014      	b.n	801fea2 <_vfiprintf_r+0x13a>
 801fe78:	eba0 0308 	sub.w	r3, r0, r8
 801fe7c:	fa09 f303 	lsl.w	r3, r9, r3
 801fe80:	4313      	orrs	r3, r2
 801fe82:	9304      	str	r3, [sp, #16]
 801fe84:	46a2      	mov	sl, r4
 801fe86:	e7d2      	b.n	801fe2e <_vfiprintf_r+0xc6>
 801fe88:	9b03      	ldr	r3, [sp, #12]
 801fe8a:	1d19      	adds	r1, r3, #4
 801fe8c:	681b      	ldr	r3, [r3, #0]
 801fe8e:	9103      	str	r1, [sp, #12]
 801fe90:	2b00      	cmp	r3, #0
 801fe92:	bfbb      	ittet	lt
 801fe94:	425b      	neglt	r3, r3
 801fe96:	f042 0202 	orrlt.w	r2, r2, #2
 801fe9a:	9307      	strge	r3, [sp, #28]
 801fe9c:	9307      	strlt	r3, [sp, #28]
 801fe9e:	bfb8      	it	lt
 801fea0:	9204      	strlt	r2, [sp, #16]
 801fea2:	7823      	ldrb	r3, [r4, #0]
 801fea4:	2b2e      	cmp	r3, #46	@ 0x2e
 801fea6:	d10a      	bne.n	801febe <_vfiprintf_r+0x156>
 801fea8:	7863      	ldrb	r3, [r4, #1]
 801feaa:	2b2a      	cmp	r3, #42	@ 0x2a
 801feac:	d132      	bne.n	801ff14 <_vfiprintf_r+0x1ac>
 801feae:	9b03      	ldr	r3, [sp, #12]
 801feb0:	1d1a      	adds	r2, r3, #4
 801feb2:	681b      	ldr	r3, [r3, #0]
 801feb4:	9203      	str	r2, [sp, #12]
 801feb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801feba:	3402      	adds	r4, #2
 801febc:	9305      	str	r3, [sp, #20]
 801febe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801ff88 <_vfiprintf_r+0x220>
 801fec2:	7821      	ldrb	r1, [r4, #0]
 801fec4:	2203      	movs	r2, #3
 801fec6:	4650      	mov	r0, sl
 801fec8:	f7e0 f95a 	bl	8000180 <memchr>
 801fecc:	b138      	cbz	r0, 801fede <_vfiprintf_r+0x176>
 801fece:	9b04      	ldr	r3, [sp, #16]
 801fed0:	eba0 000a 	sub.w	r0, r0, sl
 801fed4:	2240      	movs	r2, #64	@ 0x40
 801fed6:	4082      	lsls	r2, r0
 801fed8:	4313      	orrs	r3, r2
 801feda:	3401      	adds	r4, #1
 801fedc:	9304      	str	r3, [sp, #16]
 801fede:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fee2:	482a      	ldr	r0, [pc, #168]	@ (801ff8c <_vfiprintf_r+0x224>)
 801fee4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fee8:	2206      	movs	r2, #6
 801feea:	f7e0 f949 	bl	8000180 <memchr>
 801feee:	2800      	cmp	r0, #0
 801fef0:	d03f      	beq.n	801ff72 <_vfiprintf_r+0x20a>
 801fef2:	4b27      	ldr	r3, [pc, #156]	@ (801ff90 <_vfiprintf_r+0x228>)
 801fef4:	bb1b      	cbnz	r3, 801ff3e <_vfiprintf_r+0x1d6>
 801fef6:	9b03      	ldr	r3, [sp, #12]
 801fef8:	3307      	adds	r3, #7
 801fefa:	f023 0307 	bic.w	r3, r3, #7
 801fefe:	3308      	adds	r3, #8
 801ff00:	9303      	str	r3, [sp, #12]
 801ff02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff04:	443b      	add	r3, r7
 801ff06:	9309      	str	r3, [sp, #36]	@ 0x24
 801ff08:	e76a      	b.n	801fde0 <_vfiprintf_r+0x78>
 801ff0a:	fb0c 3202 	mla	r2, ip, r2, r3
 801ff0e:	460c      	mov	r4, r1
 801ff10:	2001      	movs	r0, #1
 801ff12:	e7a8      	b.n	801fe66 <_vfiprintf_r+0xfe>
 801ff14:	2300      	movs	r3, #0
 801ff16:	3401      	adds	r4, #1
 801ff18:	9305      	str	r3, [sp, #20]
 801ff1a:	4619      	mov	r1, r3
 801ff1c:	f04f 0c0a 	mov.w	ip, #10
 801ff20:	4620      	mov	r0, r4
 801ff22:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ff26:	3a30      	subs	r2, #48	@ 0x30
 801ff28:	2a09      	cmp	r2, #9
 801ff2a:	d903      	bls.n	801ff34 <_vfiprintf_r+0x1cc>
 801ff2c:	2b00      	cmp	r3, #0
 801ff2e:	d0c6      	beq.n	801febe <_vfiprintf_r+0x156>
 801ff30:	9105      	str	r1, [sp, #20]
 801ff32:	e7c4      	b.n	801febe <_vfiprintf_r+0x156>
 801ff34:	fb0c 2101 	mla	r1, ip, r1, r2
 801ff38:	4604      	mov	r4, r0
 801ff3a:	2301      	movs	r3, #1
 801ff3c:	e7f0      	b.n	801ff20 <_vfiprintf_r+0x1b8>
 801ff3e:	ab03      	add	r3, sp, #12
 801ff40:	9300      	str	r3, [sp, #0]
 801ff42:	462a      	mov	r2, r5
 801ff44:	4b13      	ldr	r3, [pc, #76]	@ (801ff94 <_vfiprintf_r+0x22c>)
 801ff46:	a904      	add	r1, sp, #16
 801ff48:	4630      	mov	r0, r6
 801ff4a:	f7fd fbc1 	bl	801d6d0 <_printf_float>
 801ff4e:	4607      	mov	r7, r0
 801ff50:	1c78      	adds	r0, r7, #1
 801ff52:	d1d6      	bne.n	801ff02 <_vfiprintf_r+0x19a>
 801ff54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ff56:	07d9      	lsls	r1, r3, #31
 801ff58:	d405      	bmi.n	801ff66 <_vfiprintf_r+0x1fe>
 801ff5a:	89ab      	ldrh	r3, [r5, #12]
 801ff5c:	059a      	lsls	r2, r3, #22
 801ff5e:	d402      	bmi.n	801ff66 <_vfiprintf_r+0x1fe>
 801ff60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ff62:	f7fe f92d 	bl	801e1c0 <__retarget_lock_release_recursive>
 801ff66:	89ab      	ldrh	r3, [r5, #12]
 801ff68:	065b      	lsls	r3, r3, #25
 801ff6a:	f53f af1f 	bmi.w	801fdac <_vfiprintf_r+0x44>
 801ff6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ff70:	e71e      	b.n	801fdb0 <_vfiprintf_r+0x48>
 801ff72:	ab03      	add	r3, sp, #12
 801ff74:	9300      	str	r3, [sp, #0]
 801ff76:	462a      	mov	r2, r5
 801ff78:	4b06      	ldr	r3, [pc, #24]	@ (801ff94 <_vfiprintf_r+0x22c>)
 801ff7a:	a904      	add	r1, sp, #16
 801ff7c:	4630      	mov	r0, r6
 801ff7e:	f7fd fe41 	bl	801dc04 <_printf_i>
 801ff82:	e7e4      	b.n	801ff4e <_vfiprintf_r+0x1e6>
 801ff84:	0802188a 	.word	0x0802188a
 801ff88:	08021890 	.word	0x08021890
 801ff8c:	08021894 	.word	0x08021894
 801ff90:	0801d6d1 	.word	0x0801d6d1
 801ff94:	0801fd45 	.word	0x0801fd45

0801ff98 <__swbuf_r>:
 801ff98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff9a:	460e      	mov	r6, r1
 801ff9c:	4614      	mov	r4, r2
 801ff9e:	4605      	mov	r5, r0
 801ffa0:	b118      	cbz	r0, 801ffaa <__swbuf_r+0x12>
 801ffa2:	6a03      	ldr	r3, [r0, #32]
 801ffa4:	b90b      	cbnz	r3, 801ffaa <__swbuf_r+0x12>
 801ffa6:	f7fd ffd7 	bl	801df58 <__sinit>
 801ffaa:	69a3      	ldr	r3, [r4, #24]
 801ffac:	60a3      	str	r3, [r4, #8]
 801ffae:	89a3      	ldrh	r3, [r4, #12]
 801ffb0:	071a      	lsls	r2, r3, #28
 801ffb2:	d501      	bpl.n	801ffb8 <__swbuf_r+0x20>
 801ffb4:	6923      	ldr	r3, [r4, #16]
 801ffb6:	b943      	cbnz	r3, 801ffca <__swbuf_r+0x32>
 801ffb8:	4621      	mov	r1, r4
 801ffba:	4628      	mov	r0, r5
 801ffbc:	f000 f82a 	bl	8020014 <__swsetup_r>
 801ffc0:	b118      	cbz	r0, 801ffca <__swbuf_r+0x32>
 801ffc2:	f04f 37ff 	mov.w	r7, #4294967295
 801ffc6:	4638      	mov	r0, r7
 801ffc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ffca:	6823      	ldr	r3, [r4, #0]
 801ffcc:	6922      	ldr	r2, [r4, #16]
 801ffce:	1a98      	subs	r0, r3, r2
 801ffd0:	6963      	ldr	r3, [r4, #20]
 801ffd2:	b2f6      	uxtb	r6, r6
 801ffd4:	4283      	cmp	r3, r0
 801ffd6:	4637      	mov	r7, r6
 801ffd8:	dc05      	bgt.n	801ffe6 <__swbuf_r+0x4e>
 801ffda:	4621      	mov	r1, r4
 801ffdc:	4628      	mov	r0, r5
 801ffde:	f7ff fd9b 	bl	801fb18 <_fflush_r>
 801ffe2:	2800      	cmp	r0, #0
 801ffe4:	d1ed      	bne.n	801ffc2 <__swbuf_r+0x2a>
 801ffe6:	68a3      	ldr	r3, [r4, #8]
 801ffe8:	3b01      	subs	r3, #1
 801ffea:	60a3      	str	r3, [r4, #8]
 801ffec:	6823      	ldr	r3, [r4, #0]
 801ffee:	1c5a      	adds	r2, r3, #1
 801fff0:	6022      	str	r2, [r4, #0]
 801fff2:	701e      	strb	r6, [r3, #0]
 801fff4:	6962      	ldr	r2, [r4, #20]
 801fff6:	1c43      	adds	r3, r0, #1
 801fff8:	429a      	cmp	r2, r3
 801fffa:	d004      	beq.n	8020006 <__swbuf_r+0x6e>
 801fffc:	89a3      	ldrh	r3, [r4, #12]
 801fffe:	07db      	lsls	r3, r3, #31
 8020000:	d5e1      	bpl.n	801ffc6 <__swbuf_r+0x2e>
 8020002:	2e0a      	cmp	r6, #10
 8020004:	d1df      	bne.n	801ffc6 <__swbuf_r+0x2e>
 8020006:	4621      	mov	r1, r4
 8020008:	4628      	mov	r0, r5
 802000a:	f7ff fd85 	bl	801fb18 <_fflush_r>
 802000e:	2800      	cmp	r0, #0
 8020010:	d0d9      	beq.n	801ffc6 <__swbuf_r+0x2e>
 8020012:	e7d6      	b.n	801ffc2 <__swbuf_r+0x2a>

08020014 <__swsetup_r>:
 8020014:	b538      	push	{r3, r4, r5, lr}
 8020016:	4b29      	ldr	r3, [pc, #164]	@ (80200bc <__swsetup_r+0xa8>)
 8020018:	4605      	mov	r5, r0
 802001a:	6818      	ldr	r0, [r3, #0]
 802001c:	460c      	mov	r4, r1
 802001e:	b118      	cbz	r0, 8020028 <__swsetup_r+0x14>
 8020020:	6a03      	ldr	r3, [r0, #32]
 8020022:	b90b      	cbnz	r3, 8020028 <__swsetup_r+0x14>
 8020024:	f7fd ff98 	bl	801df58 <__sinit>
 8020028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802002c:	0719      	lsls	r1, r3, #28
 802002e:	d422      	bmi.n	8020076 <__swsetup_r+0x62>
 8020030:	06da      	lsls	r2, r3, #27
 8020032:	d407      	bmi.n	8020044 <__swsetup_r+0x30>
 8020034:	2209      	movs	r2, #9
 8020036:	602a      	str	r2, [r5, #0]
 8020038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802003c:	81a3      	strh	r3, [r4, #12]
 802003e:	f04f 30ff 	mov.w	r0, #4294967295
 8020042:	e033      	b.n	80200ac <__swsetup_r+0x98>
 8020044:	0758      	lsls	r0, r3, #29
 8020046:	d512      	bpl.n	802006e <__swsetup_r+0x5a>
 8020048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802004a:	b141      	cbz	r1, 802005e <__swsetup_r+0x4a>
 802004c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020050:	4299      	cmp	r1, r3
 8020052:	d002      	beq.n	802005a <__swsetup_r+0x46>
 8020054:	4628      	mov	r0, r5
 8020056:	f7fe ff0f 	bl	801ee78 <_free_r>
 802005a:	2300      	movs	r3, #0
 802005c:	6363      	str	r3, [r4, #52]	@ 0x34
 802005e:	89a3      	ldrh	r3, [r4, #12]
 8020060:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020064:	81a3      	strh	r3, [r4, #12]
 8020066:	2300      	movs	r3, #0
 8020068:	6063      	str	r3, [r4, #4]
 802006a:	6923      	ldr	r3, [r4, #16]
 802006c:	6023      	str	r3, [r4, #0]
 802006e:	89a3      	ldrh	r3, [r4, #12]
 8020070:	f043 0308 	orr.w	r3, r3, #8
 8020074:	81a3      	strh	r3, [r4, #12]
 8020076:	6923      	ldr	r3, [r4, #16]
 8020078:	b94b      	cbnz	r3, 802008e <__swsetup_r+0x7a>
 802007a:	89a3      	ldrh	r3, [r4, #12]
 802007c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020084:	d003      	beq.n	802008e <__swsetup_r+0x7a>
 8020086:	4621      	mov	r1, r4
 8020088:	4628      	mov	r0, r5
 802008a:	f000 f883 	bl	8020194 <__smakebuf_r>
 802008e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020092:	f013 0201 	ands.w	r2, r3, #1
 8020096:	d00a      	beq.n	80200ae <__swsetup_r+0x9a>
 8020098:	2200      	movs	r2, #0
 802009a:	60a2      	str	r2, [r4, #8]
 802009c:	6962      	ldr	r2, [r4, #20]
 802009e:	4252      	negs	r2, r2
 80200a0:	61a2      	str	r2, [r4, #24]
 80200a2:	6922      	ldr	r2, [r4, #16]
 80200a4:	b942      	cbnz	r2, 80200b8 <__swsetup_r+0xa4>
 80200a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80200aa:	d1c5      	bne.n	8020038 <__swsetup_r+0x24>
 80200ac:	bd38      	pop	{r3, r4, r5, pc}
 80200ae:	0799      	lsls	r1, r3, #30
 80200b0:	bf58      	it	pl
 80200b2:	6962      	ldrpl	r2, [r4, #20]
 80200b4:	60a2      	str	r2, [r4, #8]
 80200b6:	e7f4      	b.n	80200a2 <__swsetup_r+0x8e>
 80200b8:	2000      	movs	r0, #0
 80200ba:	e7f7      	b.n	80200ac <__swsetup_r+0x98>
 80200bc:	2000014c 	.word	0x2000014c

080200c0 <_raise_r>:
 80200c0:	291f      	cmp	r1, #31
 80200c2:	b538      	push	{r3, r4, r5, lr}
 80200c4:	4605      	mov	r5, r0
 80200c6:	460c      	mov	r4, r1
 80200c8:	d904      	bls.n	80200d4 <_raise_r+0x14>
 80200ca:	2316      	movs	r3, #22
 80200cc:	6003      	str	r3, [r0, #0]
 80200ce:	f04f 30ff 	mov.w	r0, #4294967295
 80200d2:	bd38      	pop	{r3, r4, r5, pc}
 80200d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80200d6:	b112      	cbz	r2, 80200de <_raise_r+0x1e>
 80200d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80200dc:	b94b      	cbnz	r3, 80200f2 <_raise_r+0x32>
 80200de:	4628      	mov	r0, r5
 80200e0:	f000 f830 	bl	8020144 <_getpid_r>
 80200e4:	4622      	mov	r2, r4
 80200e6:	4601      	mov	r1, r0
 80200e8:	4628      	mov	r0, r5
 80200ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80200ee:	f000 b817 	b.w	8020120 <_kill_r>
 80200f2:	2b01      	cmp	r3, #1
 80200f4:	d00a      	beq.n	802010c <_raise_r+0x4c>
 80200f6:	1c59      	adds	r1, r3, #1
 80200f8:	d103      	bne.n	8020102 <_raise_r+0x42>
 80200fa:	2316      	movs	r3, #22
 80200fc:	6003      	str	r3, [r0, #0]
 80200fe:	2001      	movs	r0, #1
 8020100:	e7e7      	b.n	80200d2 <_raise_r+0x12>
 8020102:	2100      	movs	r1, #0
 8020104:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020108:	4620      	mov	r0, r4
 802010a:	4798      	blx	r3
 802010c:	2000      	movs	r0, #0
 802010e:	e7e0      	b.n	80200d2 <_raise_r+0x12>

08020110 <raise>:
 8020110:	4b02      	ldr	r3, [pc, #8]	@ (802011c <raise+0xc>)
 8020112:	4601      	mov	r1, r0
 8020114:	6818      	ldr	r0, [r3, #0]
 8020116:	f7ff bfd3 	b.w	80200c0 <_raise_r>
 802011a:	bf00      	nop
 802011c:	2000014c 	.word	0x2000014c

08020120 <_kill_r>:
 8020120:	b538      	push	{r3, r4, r5, lr}
 8020122:	4d07      	ldr	r5, [pc, #28]	@ (8020140 <_kill_r+0x20>)
 8020124:	2300      	movs	r3, #0
 8020126:	4604      	mov	r4, r0
 8020128:	4608      	mov	r0, r1
 802012a:	4611      	mov	r1, r2
 802012c:	602b      	str	r3, [r5, #0]
 802012e:	f7e2 fcc7 	bl	8002ac0 <_kill>
 8020132:	1c43      	adds	r3, r0, #1
 8020134:	d102      	bne.n	802013c <_kill_r+0x1c>
 8020136:	682b      	ldr	r3, [r5, #0]
 8020138:	b103      	cbz	r3, 802013c <_kill_r+0x1c>
 802013a:	6023      	str	r3, [r4, #0]
 802013c:	bd38      	pop	{r3, r4, r5, pc}
 802013e:	bf00      	nop
 8020140:	20002654 	.word	0x20002654

08020144 <_getpid_r>:
 8020144:	f7e2 bcb5 	b.w	8002ab2 <_getpid>

08020148 <__swhatbuf_r>:
 8020148:	b570      	push	{r4, r5, r6, lr}
 802014a:	460c      	mov	r4, r1
 802014c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020150:	2900      	cmp	r1, #0
 8020152:	b096      	sub	sp, #88	@ 0x58
 8020154:	4615      	mov	r5, r2
 8020156:	461e      	mov	r6, r3
 8020158:	da0d      	bge.n	8020176 <__swhatbuf_r+0x2e>
 802015a:	89a3      	ldrh	r3, [r4, #12]
 802015c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8020160:	f04f 0100 	mov.w	r1, #0
 8020164:	bf14      	ite	ne
 8020166:	2340      	movne	r3, #64	@ 0x40
 8020168:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802016c:	2000      	movs	r0, #0
 802016e:	6031      	str	r1, [r6, #0]
 8020170:	602b      	str	r3, [r5, #0]
 8020172:	b016      	add	sp, #88	@ 0x58
 8020174:	bd70      	pop	{r4, r5, r6, pc}
 8020176:	466a      	mov	r2, sp
 8020178:	f000 f848 	bl	802020c <_fstat_r>
 802017c:	2800      	cmp	r0, #0
 802017e:	dbec      	blt.n	802015a <__swhatbuf_r+0x12>
 8020180:	9901      	ldr	r1, [sp, #4]
 8020182:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8020186:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802018a:	4259      	negs	r1, r3
 802018c:	4159      	adcs	r1, r3
 802018e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020192:	e7eb      	b.n	802016c <__swhatbuf_r+0x24>

08020194 <__smakebuf_r>:
 8020194:	898b      	ldrh	r3, [r1, #12]
 8020196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020198:	079d      	lsls	r5, r3, #30
 802019a:	4606      	mov	r6, r0
 802019c:	460c      	mov	r4, r1
 802019e:	d507      	bpl.n	80201b0 <__smakebuf_r+0x1c>
 80201a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80201a4:	6023      	str	r3, [r4, #0]
 80201a6:	6123      	str	r3, [r4, #16]
 80201a8:	2301      	movs	r3, #1
 80201aa:	6163      	str	r3, [r4, #20]
 80201ac:	b003      	add	sp, #12
 80201ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80201b0:	ab01      	add	r3, sp, #4
 80201b2:	466a      	mov	r2, sp
 80201b4:	f7ff ffc8 	bl	8020148 <__swhatbuf_r>
 80201b8:	9f00      	ldr	r7, [sp, #0]
 80201ba:	4605      	mov	r5, r0
 80201bc:	4639      	mov	r1, r7
 80201be:	4630      	mov	r0, r6
 80201c0:	f7fe fece 	bl	801ef60 <_malloc_r>
 80201c4:	b948      	cbnz	r0, 80201da <__smakebuf_r+0x46>
 80201c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80201ca:	059a      	lsls	r2, r3, #22
 80201cc:	d4ee      	bmi.n	80201ac <__smakebuf_r+0x18>
 80201ce:	f023 0303 	bic.w	r3, r3, #3
 80201d2:	f043 0302 	orr.w	r3, r3, #2
 80201d6:	81a3      	strh	r3, [r4, #12]
 80201d8:	e7e2      	b.n	80201a0 <__smakebuf_r+0xc>
 80201da:	89a3      	ldrh	r3, [r4, #12]
 80201dc:	6020      	str	r0, [r4, #0]
 80201de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80201e2:	81a3      	strh	r3, [r4, #12]
 80201e4:	9b01      	ldr	r3, [sp, #4]
 80201e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80201ea:	b15b      	cbz	r3, 8020204 <__smakebuf_r+0x70>
 80201ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80201f0:	4630      	mov	r0, r6
 80201f2:	f000 f81d 	bl	8020230 <_isatty_r>
 80201f6:	b128      	cbz	r0, 8020204 <__smakebuf_r+0x70>
 80201f8:	89a3      	ldrh	r3, [r4, #12]
 80201fa:	f023 0303 	bic.w	r3, r3, #3
 80201fe:	f043 0301 	orr.w	r3, r3, #1
 8020202:	81a3      	strh	r3, [r4, #12]
 8020204:	89a3      	ldrh	r3, [r4, #12]
 8020206:	431d      	orrs	r5, r3
 8020208:	81a5      	strh	r5, [r4, #12]
 802020a:	e7cf      	b.n	80201ac <__smakebuf_r+0x18>

0802020c <_fstat_r>:
 802020c:	b538      	push	{r3, r4, r5, lr}
 802020e:	4d07      	ldr	r5, [pc, #28]	@ (802022c <_fstat_r+0x20>)
 8020210:	2300      	movs	r3, #0
 8020212:	4604      	mov	r4, r0
 8020214:	4608      	mov	r0, r1
 8020216:	4611      	mov	r1, r2
 8020218:	602b      	str	r3, [r5, #0]
 802021a:	f7e2 fcb0 	bl	8002b7e <_fstat>
 802021e:	1c43      	adds	r3, r0, #1
 8020220:	d102      	bne.n	8020228 <_fstat_r+0x1c>
 8020222:	682b      	ldr	r3, [r5, #0]
 8020224:	b103      	cbz	r3, 8020228 <_fstat_r+0x1c>
 8020226:	6023      	str	r3, [r4, #0]
 8020228:	bd38      	pop	{r3, r4, r5, pc}
 802022a:	bf00      	nop
 802022c:	20002654 	.word	0x20002654

08020230 <_isatty_r>:
 8020230:	b538      	push	{r3, r4, r5, lr}
 8020232:	4d06      	ldr	r5, [pc, #24]	@ (802024c <_isatty_r+0x1c>)
 8020234:	2300      	movs	r3, #0
 8020236:	4604      	mov	r4, r0
 8020238:	4608      	mov	r0, r1
 802023a:	602b      	str	r3, [r5, #0]
 802023c:	f7e2 fcae 	bl	8002b9c <_isatty>
 8020240:	1c43      	adds	r3, r0, #1
 8020242:	d102      	bne.n	802024a <_isatty_r+0x1a>
 8020244:	682b      	ldr	r3, [r5, #0]
 8020246:	b103      	cbz	r3, 802024a <_isatty_r+0x1a>
 8020248:	6023      	str	r3, [r4, #0]
 802024a:	bd38      	pop	{r3, r4, r5, pc}
 802024c:	20002654 	.word	0x20002654

08020250 <log10>:
 8020250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020252:	4604      	mov	r4, r0
 8020254:	460d      	mov	r5, r1
 8020256:	f000 f8b3 	bl	80203c0 <__ieee754_log10>
 802025a:	4622      	mov	r2, r4
 802025c:	4606      	mov	r6, r0
 802025e:	460f      	mov	r7, r1
 8020260:	462b      	mov	r3, r5
 8020262:	4620      	mov	r0, r4
 8020264:	4629      	mov	r1, r5
 8020266:	f7e0 fc39 	bl	8000adc <__aeabi_dcmpun>
 802026a:	b998      	cbnz	r0, 8020294 <log10+0x44>
 802026c:	2200      	movs	r2, #0
 802026e:	2300      	movs	r3, #0
 8020270:	4620      	mov	r0, r4
 8020272:	4629      	mov	r1, r5
 8020274:	f7e0 fc14 	bl	8000aa0 <__aeabi_dcmple>
 8020278:	b160      	cbz	r0, 8020294 <log10+0x44>
 802027a:	2200      	movs	r2, #0
 802027c:	2300      	movs	r3, #0
 802027e:	4620      	mov	r0, r4
 8020280:	4629      	mov	r1, r5
 8020282:	f7e0 fbf9 	bl	8000a78 <__aeabi_dcmpeq>
 8020286:	b140      	cbz	r0, 802029a <log10+0x4a>
 8020288:	f7fd ff6e 	bl	801e168 <__errno>
 802028c:	4f07      	ldr	r7, [pc, #28]	@ (80202ac <log10+0x5c>)
 802028e:	2322      	movs	r3, #34	@ 0x22
 8020290:	6003      	str	r3, [r0, #0]
 8020292:	2600      	movs	r6, #0
 8020294:	4630      	mov	r0, r6
 8020296:	4639      	mov	r1, r7
 8020298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802029a:	f7fd ff65 	bl	801e168 <__errno>
 802029e:	2321      	movs	r3, #33	@ 0x21
 80202a0:	6003      	str	r3, [r0, #0]
 80202a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80202a6:	4802      	ldr	r0, [pc, #8]	@ (80202b0 <log10+0x60>)
 80202a8:	f000 b804 	b.w	80202b4 <nan>
 80202ac:	fff00000 	.word	0xfff00000
 80202b0:	080218e0 	.word	0x080218e0

080202b4 <nan>:
 80202b4:	4901      	ldr	r1, [pc, #4]	@ (80202bc <nan+0x8>)
 80202b6:	2000      	movs	r0, #0
 80202b8:	4770      	bx	lr
 80202ba:	bf00      	nop
 80202bc:	7ff80000 	.word	0x7ff80000

080202c0 <floor>:
 80202c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202c4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80202c8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80202cc:	2e13      	cmp	r6, #19
 80202ce:	4602      	mov	r2, r0
 80202d0:	460b      	mov	r3, r1
 80202d2:	460c      	mov	r4, r1
 80202d4:	4605      	mov	r5, r0
 80202d6:	4680      	mov	r8, r0
 80202d8:	dc35      	bgt.n	8020346 <floor+0x86>
 80202da:	2e00      	cmp	r6, #0
 80202dc:	da17      	bge.n	802030e <floor+0x4e>
 80202de:	a334      	add	r3, pc, #208	@ (adr r3, 80203b0 <floor+0xf0>)
 80202e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202e4:	f7df ffaa 	bl	800023c <__adddf3>
 80202e8:	2200      	movs	r2, #0
 80202ea:	2300      	movs	r3, #0
 80202ec:	f7e0 fbec 	bl	8000ac8 <__aeabi_dcmpgt>
 80202f0:	b150      	cbz	r0, 8020308 <floor+0x48>
 80202f2:	2c00      	cmp	r4, #0
 80202f4:	da57      	bge.n	80203a6 <floor+0xe6>
 80202f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80202fa:	432c      	orrs	r4, r5
 80202fc:	2500      	movs	r5, #0
 80202fe:	42ac      	cmp	r4, r5
 8020300:	4c2d      	ldr	r4, [pc, #180]	@ (80203b8 <floor+0xf8>)
 8020302:	bf08      	it	eq
 8020304:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8020308:	4623      	mov	r3, r4
 802030a:	462a      	mov	r2, r5
 802030c:	e024      	b.n	8020358 <floor+0x98>
 802030e:	4f2b      	ldr	r7, [pc, #172]	@ (80203bc <floor+0xfc>)
 8020310:	4137      	asrs	r7, r6
 8020312:	ea01 0c07 	and.w	ip, r1, r7
 8020316:	ea5c 0c00 	orrs.w	ip, ip, r0
 802031a:	d01d      	beq.n	8020358 <floor+0x98>
 802031c:	a324      	add	r3, pc, #144	@ (adr r3, 80203b0 <floor+0xf0>)
 802031e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020322:	f7df ff8b 	bl	800023c <__adddf3>
 8020326:	2200      	movs	r2, #0
 8020328:	2300      	movs	r3, #0
 802032a:	f7e0 fbcd 	bl	8000ac8 <__aeabi_dcmpgt>
 802032e:	2800      	cmp	r0, #0
 8020330:	d0ea      	beq.n	8020308 <floor+0x48>
 8020332:	2c00      	cmp	r4, #0
 8020334:	bfbe      	ittt	lt
 8020336:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 802033a:	4133      	asrlt	r3, r6
 802033c:	18e4      	addlt	r4, r4, r3
 802033e:	ea24 0407 	bic.w	r4, r4, r7
 8020342:	2500      	movs	r5, #0
 8020344:	e7e0      	b.n	8020308 <floor+0x48>
 8020346:	2e33      	cmp	r6, #51	@ 0x33
 8020348:	dd0a      	ble.n	8020360 <floor+0xa0>
 802034a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 802034e:	d103      	bne.n	8020358 <floor+0x98>
 8020350:	f7df ff74 	bl	800023c <__adddf3>
 8020354:	4602      	mov	r2, r0
 8020356:	460b      	mov	r3, r1
 8020358:	4610      	mov	r0, r2
 802035a:	4619      	mov	r1, r3
 802035c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020360:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8020364:	f04f 3cff 	mov.w	ip, #4294967295
 8020368:	fa2c f707 	lsr.w	r7, ip, r7
 802036c:	4207      	tst	r7, r0
 802036e:	d0f3      	beq.n	8020358 <floor+0x98>
 8020370:	a30f      	add	r3, pc, #60	@ (adr r3, 80203b0 <floor+0xf0>)
 8020372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020376:	f7df ff61 	bl	800023c <__adddf3>
 802037a:	2200      	movs	r2, #0
 802037c:	2300      	movs	r3, #0
 802037e:	f7e0 fba3 	bl	8000ac8 <__aeabi_dcmpgt>
 8020382:	2800      	cmp	r0, #0
 8020384:	d0c0      	beq.n	8020308 <floor+0x48>
 8020386:	2c00      	cmp	r4, #0
 8020388:	da0a      	bge.n	80203a0 <floor+0xe0>
 802038a:	2e14      	cmp	r6, #20
 802038c:	d101      	bne.n	8020392 <floor+0xd2>
 802038e:	3401      	adds	r4, #1
 8020390:	e006      	b.n	80203a0 <floor+0xe0>
 8020392:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8020396:	2301      	movs	r3, #1
 8020398:	40b3      	lsls	r3, r6
 802039a:	441d      	add	r5, r3
 802039c:	4545      	cmp	r5, r8
 802039e:	d3f6      	bcc.n	802038e <floor+0xce>
 80203a0:	ea25 0507 	bic.w	r5, r5, r7
 80203a4:	e7b0      	b.n	8020308 <floor+0x48>
 80203a6:	2500      	movs	r5, #0
 80203a8:	462c      	mov	r4, r5
 80203aa:	e7ad      	b.n	8020308 <floor+0x48>
 80203ac:	f3af 8000 	nop.w
 80203b0:	8800759c 	.word	0x8800759c
 80203b4:	7e37e43c 	.word	0x7e37e43c
 80203b8:	bff00000 	.word	0xbff00000
 80203bc:	000fffff 	.word	0x000fffff

080203c0 <__ieee754_log10>:
 80203c0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80203c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80203c8:	4604      	mov	r4, r0
 80203ca:	460d      	mov	r5, r1
 80203cc:	460b      	mov	r3, r1
 80203ce:	da26      	bge.n	802041e <__ieee754_log10+0x5e>
 80203d0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80203d4:	4302      	orrs	r2, r0
 80203d6:	d107      	bne.n	80203e8 <__ieee754_log10+0x28>
 80203d8:	4933      	ldr	r1, [pc, #204]	@ (80204a8 <__ieee754_log10+0xe8>)
 80203da:	2200      	movs	r2, #0
 80203dc:	2300      	movs	r3, #0
 80203de:	2000      	movs	r0, #0
 80203e0:	f7e0 fa0c 	bl	80007fc <__aeabi_ddiv>
 80203e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80203e8:	2900      	cmp	r1, #0
 80203ea:	da05      	bge.n	80203f8 <__ieee754_log10+0x38>
 80203ec:	4602      	mov	r2, r0
 80203ee:	f7df ff23 	bl	8000238 <__aeabi_dsub>
 80203f2:	2200      	movs	r2, #0
 80203f4:	2300      	movs	r3, #0
 80203f6:	e7f3      	b.n	80203e0 <__ieee754_log10+0x20>
 80203f8:	4b2c      	ldr	r3, [pc, #176]	@ (80204ac <__ieee754_log10+0xec>)
 80203fa:	2200      	movs	r2, #0
 80203fc:	f7e0 f8d4 	bl	80005a8 <__aeabi_dmul>
 8020400:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8020404:	4604      	mov	r4, r0
 8020406:	460d      	mov	r5, r1
 8020408:	460b      	mov	r3, r1
 802040a:	4929      	ldr	r1, [pc, #164]	@ (80204b0 <__ieee754_log10+0xf0>)
 802040c:	428b      	cmp	r3, r1
 802040e:	dd08      	ble.n	8020422 <__ieee754_log10+0x62>
 8020410:	4622      	mov	r2, r4
 8020412:	462b      	mov	r3, r5
 8020414:	4620      	mov	r0, r4
 8020416:	4629      	mov	r1, r5
 8020418:	f7df ff10 	bl	800023c <__adddf3>
 802041c:	e7e2      	b.n	80203e4 <__ieee754_log10+0x24>
 802041e:	2200      	movs	r2, #0
 8020420:	e7f3      	b.n	802040a <__ieee754_log10+0x4a>
 8020422:	1518      	asrs	r0, r3, #20
 8020424:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8020428:	4410      	add	r0, r2
 802042a:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 802042e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8020432:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8020436:	f7e0 f84d 	bl	80004d4 <__aeabi_i2d>
 802043a:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 802043e:	3303      	adds	r3, #3
 8020440:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8020444:	a312      	add	r3, pc, #72	@ (adr r3, 8020490 <__ieee754_log10+0xd0>)
 8020446:	e9d3 2300 	ldrd	r2, r3, [r3]
 802044a:	4606      	mov	r6, r0
 802044c:	460f      	mov	r7, r1
 802044e:	f7e0 f8ab 	bl	80005a8 <__aeabi_dmul>
 8020452:	4680      	mov	r8, r0
 8020454:	4689      	mov	r9, r1
 8020456:	4620      	mov	r0, r4
 8020458:	4629      	mov	r1, r5
 802045a:	f000 f82d 	bl	80204b8 <__ieee754_log>
 802045e:	a30e      	add	r3, pc, #56	@ (adr r3, 8020498 <__ieee754_log10+0xd8>)
 8020460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020464:	f7e0 f8a0 	bl	80005a8 <__aeabi_dmul>
 8020468:	4642      	mov	r2, r8
 802046a:	464b      	mov	r3, r9
 802046c:	f7df fee6 	bl	800023c <__adddf3>
 8020470:	a30b      	add	r3, pc, #44	@ (adr r3, 80204a0 <__ieee754_log10+0xe0>)
 8020472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020476:	4604      	mov	r4, r0
 8020478:	460d      	mov	r5, r1
 802047a:	4630      	mov	r0, r6
 802047c:	4639      	mov	r1, r7
 802047e:	f7e0 f893 	bl	80005a8 <__aeabi_dmul>
 8020482:	4602      	mov	r2, r0
 8020484:	460b      	mov	r3, r1
 8020486:	4620      	mov	r0, r4
 8020488:	4629      	mov	r1, r5
 802048a:	e7c5      	b.n	8020418 <__ieee754_log10+0x58>
 802048c:	f3af 8000 	nop.w
 8020490:	11f12b36 	.word	0x11f12b36
 8020494:	3d59fef3 	.word	0x3d59fef3
 8020498:	1526e50e 	.word	0x1526e50e
 802049c:	3fdbcb7b 	.word	0x3fdbcb7b
 80204a0:	509f6000 	.word	0x509f6000
 80204a4:	3fd34413 	.word	0x3fd34413
 80204a8:	c3500000 	.word	0xc3500000
 80204ac:	43500000 	.word	0x43500000
 80204b0:	7fefffff 	.word	0x7fefffff
 80204b4:	00000000 	.word	0x00000000

080204b8 <__ieee754_log>:
 80204b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204bc:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80204c0:	b087      	sub	sp, #28
 80204c2:	4602      	mov	r2, r0
 80204c4:	460b      	mov	r3, r1
 80204c6:	460d      	mov	r5, r1
 80204c8:	da24      	bge.n	8020514 <__ieee754_log+0x5c>
 80204ca:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80204ce:	4304      	orrs	r4, r0
 80204d0:	d108      	bne.n	80204e4 <__ieee754_log+0x2c>
 80204d2:	49cd      	ldr	r1, [pc, #820]	@ (8020808 <__ieee754_log+0x350>)
 80204d4:	2200      	movs	r2, #0
 80204d6:	2300      	movs	r3, #0
 80204d8:	2000      	movs	r0, #0
 80204da:	f7e0 f98f 	bl	80007fc <__aeabi_ddiv>
 80204de:	b007      	add	sp, #28
 80204e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204e4:	2900      	cmp	r1, #0
 80204e6:	da04      	bge.n	80204f2 <__ieee754_log+0x3a>
 80204e8:	f7df fea6 	bl	8000238 <__aeabi_dsub>
 80204ec:	2200      	movs	r2, #0
 80204ee:	2300      	movs	r3, #0
 80204f0:	e7f3      	b.n	80204da <__ieee754_log+0x22>
 80204f2:	4bc6      	ldr	r3, [pc, #792]	@ (802080c <__ieee754_log+0x354>)
 80204f4:	2200      	movs	r2, #0
 80204f6:	f7e0 f857 	bl	80005a8 <__aeabi_dmul>
 80204fa:	460b      	mov	r3, r1
 80204fc:	460d      	mov	r5, r1
 80204fe:	4602      	mov	r2, r0
 8020500:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8020504:	48c2      	ldr	r0, [pc, #776]	@ (8020810 <__ieee754_log+0x358>)
 8020506:	4285      	cmp	r5, r0
 8020508:	dd06      	ble.n	8020518 <__ieee754_log+0x60>
 802050a:	4610      	mov	r0, r2
 802050c:	4619      	mov	r1, r3
 802050e:	f7df fe95 	bl	800023c <__adddf3>
 8020512:	e7e4      	b.n	80204de <__ieee754_log+0x26>
 8020514:	2100      	movs	r1, #0
 8020516:	e7f5      	b.n	8020504 <__ieee754_log+0x4c>
 8020518:	152c      	asrs	r4, r5, #20
 802051a:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 802051e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8020522:	440c      	add	r4, r1
 8020524:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8020528:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 802052c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8020530:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8020534:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8020538:	ea41 0305 	orr.w	r3, r1, r5
 802053c:	4610      	mov	r0, r2
 802053e:	4619      	mov	r1, r3
 8020540:	2200      	movs	r2, #0
 8020542:	4bb4      	ldr	r3, [pc, #720]	@ (8020814 <__ieee754_log+0x35c>)
 8020544:	f7df fe78 	bl	8000238 <__aeabi_dsub>
 8020548:	1cab      	adds	r3, r5, #2
 802054a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802054e:	2b02      	cmp	r3, #2
 8020550:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8020554:	4682      	mov	sl, r0
 8020556:	468b      	mov	fp, r1
 8020558:	f04f 0200 	mov.w	r2, #0
 802055c:	dc53      	bgt.n	8020606 <__ieee754_log+0x14e>
 802055e:	2300      	movs	r3, #0
 8020560:	f7e0 fa8a 	bl	8000a78 <__aeabi_dcmpeq>
 8020564:	b1d0      	cbz	r0, 802059c <__ieee754_log+0xe4>
 8020566:	2c00      	cmp	r4, #0
 8020568:	f000 8120 	beq.w	80207ac <__ieee754_log+0x2f4>
 802056c:	4620      	mov	r0, r4
 802056e:	f7df ffb1 	bl	80004d4 <__aeabi_i2d>
 8020572:	a391      	add	r3, pc, #580	@ (adr r3, 80207b8 <__ieee754_log+0x300>)
 8020574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020578:	4606      	mov	r6, r0
 802057a:	460f      	mov	r7, r1
 802057c:	f7e0 f814 	bl	80005a8 <__aeabi_dmul>
 8020580:	a38f      	add	r3, pc, #572	@ (adr r3, 80207c0 <__ieee754_log+0x308>)
 8020582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020586:	4604      	mov	r4, r0
 8020588:	460d      	mov	r5, r1
 802058a:	4630      	mov	r0, r6
 802058c:	4639      	mov	r1, r7
 802058e:	f7e0 f80b 	bl	80005a8 <__aeabi_dmul>
 8020592:	4602      	mov	r2, r0
 8020594:	460b      	mov	r3, r1
 8020596:	4620      	mov	r0, r4
 8020598:	4629      	mov	r1, r5
 802059a:	e7b8      	b.n	802050e <__ieee754_log+0x56>
 802059c:	a38a      	add	r3, pc, #552	@ (adr r3, 80207c8 <__ieee754_log+0x310>)
 802059e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205a2:	4650      	mov	r0, sl
 80205a4:	4659      	mov	r1, fp
 80205a6:	f7df ffff 	bl	80005a8 <__aeabi_dmul>
 80205aa:	4602      	mov	r2, r0
 80205ac:	460b      	mov	r3, r1
 80205ae:	2000      	movs	r0, #0
 80205b0:	4999      	ldr	r1, [pc, #612]	@ (8020818 <__ieee754_log+0x360>)
 80205b2:	f7df fe41 	bl	8000238 <__aeabi_dsub>
 80205b6:	4652      	mov	r2, sl
 80205b8:	4606      	mov	r6, r0
 80205ba:	460f      	mov	r7, r1
 80205bc:	465b      	mov	r3, fp
 80205be:	4650      	mov	r0, sl
 80205c0:	4659      	mov	r1, fp
 80205c2:	f7df fff1 	bl	80005a8 <__aeabi_dmul>
 80205c6:	4602      	mov	r2, r0
 80205c8:	460b      	mov	r3, r1
 80205ca:	4630      	mov	r0, r6
 80205cc:	4639      	mov	r1, r7
 80205ce:	f7df ffeb 	bl	80005a8 <__aeabi_dmul>
 80205d2:	4606      	mov	r6, r0
 80205d4:	460f      	mov	r7, r1
 80205d6:	b914      	cbnz	r4, 80205de <__ieee754_log+0x126>
 80205d8:	4632      	mov	r2, r6
 80205da:	463b      	mov	r3, r7
 80205dc:	e0a0      	b.n	8020720 <__ieee754_log+0x268>
 80205de:	4620      	mov	r0, r4
 80205e0:	f7df ff78 	bl	80004d4 <__aeabi_i2d>
 80205e4:	a374      	add	r3, pc, #464	@ (adr r3, 80207b8 <__ieee754_log+0x300>)
 80205e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205ea:	4680      	mov	r8, r0
 80205ec:	4689      	mov	r9, r1
 80205ee:	f7df ffdb 	bl	80005a8 <__aeabi_dmul>
 80205f2:	a373      	add	r3, pc, #460	@ (adr r3, 80207c0 <__ieee754_log+0x308>)
 80205f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205f8:	4604      	mov	r4, r0
 80205fa:	460d      	mov	r5, r1
 80205fc:	4640      	mov	r0, r8
 80205fe:	4649      	mov	r1, r9
 8020600:	f7df ffd2 	bl	80005a8 <__aeabi_dmul>
 8020604:	e0a5      	b.n	8020752 <__ieee754_log+0x29a>
 8020606:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802060a:	f7df fe17 	bl	800023c <__adddf3>
 802060e:	4602      	mov	r2, r0
 8020610:	460b      	mov	r3, r1
 8020612:	4650      	mov	r0, sl
 8020614:	4659      	mov	r1, fp
 8020616:	f7e0 f8f1 	bl	80007fc <__aeabi_ddiv>
 802061a:	e9cd 0100 	strd	r0, r1, [sp]
 802061e:	4620      	mov	r0, r4
 8020620:	f7df ff58 	bl	80004d4 <__aeabi_i2d>
 8020624:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802062c:	4610      	mov	r0, r2
 802062e:	4619      	mov	r1, r3
 8020630:	f7df ffba 	bl	80005a8 <__aeabi_dmul>
 8020634:	4602      	mov	r2, r0
 8020636:	460b      	mov	r3, r1
 8020638:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802063c:	f7df ffb4 	bl	80005a8 <__aeabi_dmul>
 8020640:	a363      	add	r3, pc, #396	@ (adr r3, 80207d0 <__ieee754_log+0x318>)
 8020642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020646:	4680      	mov	r8, r0
 8020648:	4689      	mov	r9, r1
 802064a:	f7df ffad 	bl	80005a8 <__aeabi_dmul>
 802064e:	a362      	add	r3, pc, #392	@ (adr r3, 80207d8 <__ieee754_log+0x320>)
 8020650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020654:	f7df fdf2 	bl	800023c <__adddf3>
 8020658:	4642      	mov	r2, r8
 802065a:	464b      	mov	r3, r9
 802065c:	f7df ffa4 	bl	80005a8 <__aeabi_dmul>
 8020660:	a35f      	add	r3, pc, #380	@ (adr r3, 80207e0 <__ieee754_log+0x328>)
 8020662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020666:	f7df fde9 	bl	800023c <__adddf3>
 802066a:	4642      	mov	r2, r8
 802066c:	464b      	mov	r3, r9
 802066e:	f7df ff9b 	bl	80005a8 <__aeabi_dmul>
 8020672:	a35d      	add	r3, pc, #372	@ (adr r3, 80207e8 <__ieee754_log+0x330>)
 8020674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020678:	f7df fde0 	bl	800023c <__adddf3>
 802067c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020680:	f7df ff92 	bl	80005a8 <__aeabi_dmul>
 8020684:	a35a      	add	r3, pc, #360	@ (adr r3, 80207f0 <__ieee754_log+0x338>)
 8020686:	e9d3 2300 	ldrd	r2, r3, [r3]
 802068a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802068e:	4640      	mov	r0, r8
 8020690:	4649      	mov	r1, r9
 8020692:	f7df ff89 	bl	80005a8 <__aeabi_dmul>
 8020696:	a358      	add	r3, pc, #352	@ (adr r3, 80207f8 <__ieee754_log+0x340>)
 8020698:	e9d3 2300 	ldrd	r2, r3, [r3]
 802069c:	f7df fdce 	bl	800023c <__adddf3>
 80206a0:	4642      	mov	r2, r8
 80206a2:	464b      	mov	r3, r9
 80206a4:	f7df ff80 	bl	80005a8 <__aeabi_dmul>
 80206a8:	a355      	add	r3, pc, #340	@ (adr r3, 8020800 <__ieee754_log+0x348>)
 80206aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206ae:	f7df fdc5 	bl	800023c <__adddf3>
 80206b2:	4642      	mov	r2, r8
 80206b4:	464b      	mov	r3, r9
 80206b6:	f7df ff77 	bl	80005a8 <__aeabi_dmul>
 80206ba:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80206be:	4602      	mov	r2, r0
 80206c0:	460b      	mov	r3, r1
 80206c2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80206c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80206ca:	f7df fdb7 	bl	800023c <__adddf3>
 80206ce:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80206d2:	3551      	adds	r5, #81	@ 0x51
 80206d4:	4335      	orrs	r5, r6
 80206d6:	2d00      	cmp	r5, #0
 80206d8:	4680      	mov	r8, r0
 80206da:	4689      	mov	r9, r1
 80206dc:	dd48      	ble.n	8020770 <__ieee754_log+0x2b8>
 80206de:	4b4e      	ldr	r3, [pc, #312]	@ (8020818 <__ieee754_log+0x360>)
 80206e0:	2200      	movs	r2, #0
 80206e2:	4650      	mov	r0, sl
 80206e4:	4659      	mov	r1, fp
 80206e6:	f7df ff5f 	bl	80005a8 <__aeabi_dmul>
 80206ea:	4652      	mov	r2, sl
 80206ec:	465b      	mov	r3, fp
 80206ee:	f7df ff5b 	bl	80005a8 <__aeabi_dmul>
 80206f2:	4602      	mov	r2, r0
 80206f4:	460b      	mov	r3, r1
 80206f6:	4606      	mov	r6, r0
 80206f8:	460f      	mov	r7, r1
 80206fa:	4640      	mov	r0, r8
 80206fc:	4649      	mov	r1, r9
 80206fe:	f7df fd9d 	bl	800023c <__adddf3>
 8020702:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020706:	f7df ff4f 	bl	80005a8 <__aeabi_dmul>
 802070a:	4680      	mov	r8, r0
 802070c:	4689      	mov	r9, r1
 802070e:	b964      	cbnz	r4, 802072a <__ieee754_log+0x272>
 8020710:	4602      	mov	r2, r0
 8020712:	460b      	mov	r3, r1
 8020714:	4630      	mov	r0, r6
 8020716:	4639      	mov	r1, r7
 8020718:	f7df fd8e 	bl	8000238 <__aeabi_dsub>
 802071c:	4602      	mov	r2, r0
 802071e:	460b      	mov	r3, r1
 8020720:	4650      	mov	r0, sl
 8020722:	4659      	mov	r1, fp
 8020724:	f7df fd88 	bl	8000238 <__aeabi_dsub>
 8020728:	e6d9      	b.n	80204de <__ieee754_log+0x26>
 802072a:	a323      	add	r3, pc, #140	@ (adr r3, 80207b8 <__ieee754_log+0x300>)
 802072c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020734:	f7df ff38 	bl	80005a8 <__aeabi_dmul>
 8020738:	a321      	add	r3, pc, #132	@ (adr r3, 80207c0 <__ieee754_log+0x308>)
 802073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802073e:	4604      	mov	r4, r0
 8020740:	460d      	mov	r5, r1
 8020742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020746:	f7df ff2f 	bl	80005a8 <__aeabi_dmul>
 802074a:	4642      	mov	r2, r8
 802074c:	464b      	mov	r3, r9
 802074e:	f7df fd75 	bl	800023c <__adddf3>
 8020752:	4602      	mov	r2, r0
 8020754:	460b      	mov	r3, r1
 8020756:	4630      	mov	r0, r6
 8020758:	4639      	mov	r1, r7
 802075a:	f7df fd6d 	bl	8000238 <__aeabi_dsub>
 802075e:	4652      	mov	r2, sl
 8020760:	465b      	mov	r3, fp
 8020762:	f7df fd69 	bl	8000238 <__aeabi_dsub>
 8020766:	4602      	mov	r2, r0
 8020768:	460b      	mov	r3, r1
 802076a:	4620      	mov	r0, r4
 802076c:	4629      	mov	r1, r5
 802076e:	e7d9      	b.n	8020724 <__ieee754_log+0x26c>
 8020770:	4602      	mov	r2, r0
 8020772:	460b      	mov	r3, r1
 8020774:	4650      	mov	r0, sl
 8020776:	4659      	mov	r1, fp
 8020778:	f7df fd5e 	bl	8000238 <__aeabi_dsub>
 802077c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020780:	f7df ff12 	bl	80005a8 <__aeabi_dmul>
 8020784:	4606      	mov	r6, r0
 8020786:	460f      	mov	r7, r1
 8020788:	2c00      	cmp	r4, #0
 802078a:	f43f af25 	beq.w	80205d8 <__ieee754_log+0x120>
 802078e:	a30a      	add	r3, pc, #40	@ (adr r3, 80207b8 <__ieee754_log+0x300>)
 8020790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020798:	f7df ff06 	bl	80005a8 <__aeabi_dmul>
 802079c:	a308      	add	r3, pc, #32	@ (adr r3, 80207c0 <__ieee754_log+0x308>)
 802079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207a2:	4604      	mov	r4, r0
 80207a4:	460d      	mov	r5, r1
 80207a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80207aa:	e729      	b.n	8020600 <__ieee754_log+0x148>
 80207ac:	2000      	movs	r0, #0
 80207ae:	2100      	movs	r1, #0
 80207b0:	e695      	b.n	80204de <__ieee754_log+0x26>
 80207b2:	bf00      	nop
 80207b4:	f3af 8000 	nop.w
 80207b8:	fee00000 	.word	0xfee00000
 80207bc:	3fe62e42 	.word	0x3fe62e42
 80207c0:	35793c76 	.word	0x35793c76
 80207c4:	3dea39ef 	.word	0x3dea39ef
 80207c8:	55555555 	.word	0x55555555
 80207cc:	3fd55555 	.word	0x3fd55555
 80207d0:	df3e5244 	.word	0xdf3e5244
 80207d4:	3fc2f112 	.word	0x3fc2f112
 80207d8:	96cb03de 	.word	0x96cb03de
 80207dc:	3fc74664 	.word	0x3fc74664
 80207e0:	94229359 	.word	0x94229359
 80207e4:	3fd24924 	.word	0x3fd24924
 80207e8:	55555593 	.word	0x55555593
 80207ec:	3fe55555 	.word	0x3fe55555
 80207f0:	d078c69f 	.word	0xd078c69f
 80207f4:	3fc39a09 	.word	0x3fc39a09
 80207f8:	1d8e78af 	.word	0x1d8e78af
 80207fc:	3fcc71c5 	.word	0x3fcc71c5
 8020800:	9997fa04 	.word	0x9997fa04
 8020804:	3fd99999 	.word	0x3fd99999
 8020808:	c3500000 	.word	0xc3500000
 802080c:	43500000 	.word	0x43500000
 8020810:	7fefffff 	.word	0x7fefffff
 8020814:	3ff00000 	.word	0x3ff00000
 8020818:	3fe00000 	.word	0x3fe00000

0802081c <_init>:
 802081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802081e:	bf00      	nop
 8020820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020822:	bc08      	pop	{r3}
 8020824:	469e      	mov	lr, r3
 8020826:	4770      	bx	lr

08020828 <_fini>:
 8020828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802082a:	bf00      	nop
 802082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802082e:	bc08      	pop	{r3}
 8020830:	469e      	mov	lr, r3
 8020832:	4770      	bx	lr
